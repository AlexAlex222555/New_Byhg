#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяРегистра()
    Возврат "РегистрНакопления.КнигаДоходовРасходовПоЕдиномуНалогу";
КонецФункции 

Функция ИмяРегистра()
    Возврат СтрЗаменить(ПолноеИмяРегистра(), "РегистрНакопления.", "");
КонецФункции 


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.КнигаДоходовРасходовПоЕдиномуНалогу.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("877a759f-c415-44a3-a8ab-d8f4c62da2b0");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.КнигаДоходовРасходовПоЕдиномуНалогу.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет измерение ОбъектРасчетов.';uk='Заповнює вимір ОбъектРасчетов.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.КнигаДоходовРасходовПоЕдиномуНалогу.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.КнигаДоходовРасходовПоЕдиномуНалогу.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьОбъектыРасчетов(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.КнигаДоходовРасходовПоЕдиномуНалогу КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И НЕ ДанныеРегистра.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчета)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчета", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра
	);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0
		Или Не ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;

	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			Блокировка.Заблокировать();
							
			НаборЗаписей = РегистрыНакопления.КнигаДоходовРасходовПоЕдиномуНалогу.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			НаборИзменен = Ложь;
			
			Для Каждого СтрокаНабораЗаписей Из НаборЗаписей Цикл
				
				ПараметрыПоискаОбъектаРасчетов = ОбъектыРасчетовСервер.ПолучитьПараметрыОбъектаРасчетов();
				РеквизитыАналитикаУчетаПоПартнерам = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					СтрокаНабораЗаписей.АналитикаУчетаПоПартнерам,
					"Организация, Партнер, Контрагент"
				);
				
				ПараметрыПоискаОбъектаРасчетов.ТипРасчетов  = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
				ПараметрыПоискаОбъектаРасчетов.Организация  = РеквизитыАналитикаУчетаПоПартнерам.Организация;
				ПараметрыПоискаОбъектаРасчетов.Партнер      = РеквизитыАналитикаУчетаПоПартнерам.Партнер;
				
				Если НЕ ЗначениеЗаполнено(СтрокаНабораЗаписей.ОбъектРасчетов) Тогда
					НовыйОбъектРасчетов = ОбъектыРасчетовСервер.НайтиНовыйОбъектРасчетов(ПараметрыПоискаОбъектаРасчетов);
					Если НовыйОбъектРасчетов = Неопределено И ЗначениеЗаполнено(СтрокаНабораЗаписей.УдалитьОбъектРасчетов) Тогда
						ВызватьИсключение(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Не найден объект расчетов для источника данных: %1';uk='Не знайдений об''єкт розрахунків для джерела даних: %1'"),
								СтрокаНабораЗаписей.УдалитьОбъектРасчетов
							)
						);
					ИначеЕсли СтрокаНабораЗаписей.ОбъектРасчетов <> НовыйОбъектРасчетов Тогда
						СтрокаНабораЗаписей.ОбъектРасчетов = НовыйОбъектРасчетов;            
						НаборИзменен = Истина;
					КонецЕсли;
				КонецЕсли;	
				
			КонецЦикла;
		
			Если НаборИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru='Не удалось записать данные в регистр %1 по регистратору ""%2"", по причине: %3';uk='Не вдалося записати дані в регістр %1 по реєстратору ""%2"", по причині: %3'");
			ТекстСообщения = 
				СтрШаблон(Шаблон, 
					ПолноеИмяРегистра, 
					Выборка.Регистратор, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра, 
				, 
				ТекстСообщения
			);
			
		КонецПопытки;
		
	КонецЦикла;

	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли
