#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Сумма", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаУпрСНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДС", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

// Возвращает текст запроса с типовой структурой временной таблицы "ВтИсходныеПрочиеРасходы".
//
// Параметры:
//  ДополнительныеПоля	 - Строка	 - Список дополнительный полей.
// 
// Возвращаемое значение:
//  Строка - Текст запроса формирования временной таблицы ВтИсходныеПрочиеРасходы.
//
Функция ТекстОписаниеВтИсходныеПрочиеРасходы(ДополнительныеПоля = "") Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	Строки.Период,
	|	Строки.ВидДвижения,
	|	Строки.Организация,
	|	Строки.Подразделение,
	|	Строки.СтатьяРасходов,
	|	Строки.АналитикаРасходов,
	|	Строки.НаправлениеДеятельности,
    |	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначение,
	|	0 КАК СуммаСНДС,
	|	0 КАК СуммаБезНДС,
	|	0 КАК СуммаБезНДСУпр,
	|	0 КАК СуммаСНДСРегл,
	|	0 КАК СуммаБезНДСРегл,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	Строки.ХозяйственнаяОперация,
	|	Строки.АналитикаУчетаНоменклатуры
	|
	|//ДополнительныеПоля
	|
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК Строки
	|";
	
	ДобавитьДополнительныеПоляВТекстЗапроса(ДополнительныеПоля, ТекстЗапроса);
	
	Возврат ТекстЗапроса
	
КонецФункции

// Формирует текст запроса для формирования временной таблицы "ВтПрочиеРасходы".
//
// Параметры:
//  ДополнительныеПоля	 - Строка	 - Список дополнительный полей.
// 
// Возвращаемое значение:
//  Строка - Текст запроса формирования временной таблицы ВтПрочиеРасходы.
//
Функция ТекстЗапросаТаблицаВтПрочиеРасходы(ДополнительныеПоля = "") Экспорт
	
	// Условия для заполнения ресурсов регистра аналогичны условиям в функции ТекстСписанияРасходовНаВыбытиеТоваровРегистрПрочиеРасходы() общего модуля ПартионныйУчет22
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	Строки.ВидДвижения КАК ВидДвижения,
	|	Строки.Организация КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.СтатьяРасходов КАК СтатьяРасходов,
	|	Строки.АналитикаРасходов КАК АналитикаРасходов,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	(ВЫБОР
	|		КОГДА Статья.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|			ТОГДА 0
	|		ИНАЧЕ Строки.СуммаСНДС КОНЕЦ) КАК Сумма,
    |	(ВЫБОР
    |		КОГДА Статья.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
    |			ТОГДА 0
    |		КОГДА Статья.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
    |			ТОГДА Строки.СуммаБезНДС
    |		ИНАЧЕ 0 КОНЕЦ) КАК СуммаБезНДС,
    |	(ВЫБОР
    |		КОГДА Статья.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
    |		 ИЛИ НЕ &УправленческийУчетОрганизаций И НЕ &ЭтоВводОстатковВНА_2_4
    |		 ИЛИ Строки.СуммаБезНДСУпр = 0
    |			ТОГДА 0
    |		КОГДА ЕСТЬNULL(НалоговыеНазначенияАктивовИЗатрат.ВидДеятельностиНДС, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая)
    |			ТОГДА Строки.СуммаБезНДСУпр + (Строки.СуммаСНДС - Строки.СуммаБезНДС)
    |		ИНАЧЕ Строки.СуммаБезНДСУпр КОНЕЦ) КАК СуммаУпр,
    |	(ВЫБОР
    |		КОГДА Статья.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
    |		 ИЛИ НЕ &УправленческийУчетОрганизаций И НЕ &ЭтоВводОстатковВНА_2_4
    |		 ИЛИ Строки.СуммаБезНДСУпр = 0
    |			ТОГДА 0
    |		ИНАЧЕ Строки.СуммаБезНДСУпр КОНЕЦ) КАК СуммаУпрБезНДС,
	|
	|	(ВЫБОР 
	|		КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|			ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И НЕ &ИспользуетсяУправлениеВНА_2_4
	|			ТОГДА 0
    |		КОГДА ЕСТЬNULL(НалоговыеНазначенияАктивовИЗатрат.ВидДеятельностиНДС, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая)
	|			ТОГДА Строки.СуммаСНДСРегл
	|		ИНАЧЕ Строки.СуммаБезНДСРегл КОНЕЦ) КАК СуммаРегл,
	|
	|	ВЫБОР 
	|	    КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И НЕ &ИспользуетсяУправлениеВНА_2_4
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	|		ИНАЧЕ Строки.НалоговоеНазначение КОНЕЦ КАК НалоговоеНазначение,
	|	ВЫБОР 
	|	    КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл ТОГДА 0 
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|			ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И НЕ &ИспользуетсяУправлениеВНА_2_4
	|			ТОГДА 0
	|		ИНАЧЕ Строки.СуммаБезНДСРегл КОНЕЦ КАК СуммаРеглБезНДС,
    |	ВЫБОР 
	|	    КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл ТОГДА 0 
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|			ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И НЕ &ИспользуетсяУправлениеВНА_2_4
	|			ТОГДА 0
	|		ИНАЧЕ Строки.НДСРегл КОНЕЦ КАК НДСРегл,
    |	0 КАК ПостояннаяРазница,
    |	0 КАК ВременнаяРазница,
	|	Строки.ХозяйственнаяОперация,
	|	Строки.АналитикаУчетаНоменклатуры,
	|
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Справочник.Организации)
	|		 И Строки.АналитикаРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Строки.АналитикаРасходов
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.АктВыполненныхРабот)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.АктВыполненныхРабот).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ВводОстатков)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ВводОстатков).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ВводОстатковПрочиеРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ВводОстатковПрочиеРасходы).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ЗаказКлиента)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ЗаказКлиента).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ЗаказНаПеремещение)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ЗаказНаПеремещение).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ЗаказНаСборку)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ЗаказНаСборку).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ЗаказПоставщику)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ЗаказПоставщику).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ПередачаТоваровМеждуОрганизациями)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ПередачаТоваровМеждуОрганизациями).ОрганизацияПолучатель
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ПеремещениеТоваров)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ПеремещениеТоваров).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ПриобретениеТоваровУслуг)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ПриобретениеТоваровУслуг).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.РеализацияТоваровУслуг)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.РеализацияТоваровУслуг).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.РеализацияУслугПрочихАктивов)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.РеализацияУслугПрочихАктивов).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.СборкаТоваров)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.СборкаТоваров).Организация
	|		ИНАЧЕ Строки.Организация
	|	КОНЕЦ КАК ОрганизацияПолучатель
	|
	|//ДополнительныеПоля
	|
	|ПОМЕСТИТЬ ВтПрочиеРасходы
	|ИЗ
	|	ВтИсходныеПрочиеРасходы КАК Строки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК Статья
	|	ПО
	|		Статья.Ссылка = Строки.СтатьяРасходов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.НалоговыеНазначенияАктивовИЗатрат КАК НалоговыеНазначенияАктивовИЗатрат
	|	ПО
	|		НалоговыеНазначенияАктивовИЗатрат.Ссылка = Строки.НалоговоеНазначение
	|ГДЕ
	|	(Статья.ВариантРаспределенияРасходовУпр <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|		ИЛИ Статья.ВариантРаспределенияРасходовРегл <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|";
	
	ДобавитьДополнительныеПоляВТекстЗапроса(ДополнительныеПоля, ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для формирования движений по регистру "Прочие расходы".
//
// Параметры:
//  ДополнительныеПоля	 - Строка	 - Список дополнительный полей.
// 
// Возвращаемое значение:
//  Строка - Текст запроса формирования движений в регистре ПрочиеРасходы.
//
Функция ТекстЗапросаТаблицаПрочиеРасходы(ДополнительныеПоля = "") Экспорт
	
	ТекстЗапроса = "
	// Формирование таблицы для записи в регистр "ПрочиеРасходы".
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	Строки.ВидДвижения КАК ВидДвижения,
	|	Строки.Организация КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.СтатьяРасходов КАК СтатьяРасходов,
	|	Строки.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(НД.УчетЗатрат, ЛОЖЬ) ТОГДА
	|			Строки.НаправлениеДеятельности
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
    |	Строки.НалоговоеНазначение КАК НалоговоеНазначение,
	|
	|	Строки.Сумма КАК Сумма,
	|	Строки.СуммаБезНДС КАК СуммаБезНДС,
    |	Строки.СуммаУпр КАК СуммаУпр,
    |	Строки.СуммаУпрБезНДС КАК СуммаУпрБезНДС,
	|
	|	Строки.СуммаРегл КАК СуммаРегл,
    |	Строки.СуммаРеглБезНДС КАК СуммаРеглБезНДС,
    |	Строки.НДСРегл КАК НДСРегл,
	|	Строки.ПостояннаяРазница КАК ПостояннаяРазница,
	|	Строки.ВременнаяРазница КАК ВременнаяРазница,
	|
	|	Строки.ХозяйственнаяОперация,
	|	Строки.АналитикаУчетаНоменклатуры
	|
	|//ДополнительныеПоля
	|
	|ИЗ
	|	ВтПрочиеРасходы КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НД
	|		ПО НД.Ссылка = Строки.НаправлениеДеятельности
	|ГДЕ
	|	(Строки.Сумма <> 0 ИЛИ Строки.СуммаБезНДС <> 0 ИЛИ Строки.СуммаУпр <> 0
    |	ИЛИ Строки.СуммаРегл <> 0 ИЛИ Строки.СуммаРеглБезНДС <> 0 ИЛИ Строки.НДСРегл <> 0 ИЛИ Строки.ПостояннаяРазница <> 0 ИЛИ Строки.ВременнаяРазница <> 0 ИЛИ Строки.СуммаУпрБезНДС <> 0)
	|
	// Сторнирование расходов в упр. учете у организации - источника.
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	Строки.ВидДвижения КАК ВидДвижения,
	|	Строки.Организация КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.СтатьяРасходов КАК СтатьяРасходов,
	|	Строки.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(НД.УчетЗатрат, ЛОЖЬ) ТОГДА
	|			Строки.НаправлениеДеятельности
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
    |	Строки.НалоговоеНазначение КАК НалоговоеНазначение,
	|	-Строки.Сумма КАК Сумма,
	|	-Строки.СуммаБезНДС КАК СуммаБезНДС,
    |	-Строки.СуммаУпр КАК СуммаУпр,
    |	-Строки.СуммаУпрБезНДС КАК СуммаУпрБезНДС,
	|	0 КАК СуммаРегл,
    |	0 КАК СуммаРеглБезНДС,
    |	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторнированиеРасходовУУ) КАК ХозяйственнаяОперация,
	|	Строки.АналитикаУчетаНоменклатуры
	|
	|//ДополнительныеПоля
	|
	|ИЗ
	|	ВтПрочиеРасходы КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НД
	|		ПО НД.Ссылка = Строки.НаправлениеДеятельности
	|ГДЕ
	|	Строки.ОрганизацияПолучатель <> Строки.Организация
	|	И Строки.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |	И (Строки.Сумма <> 0 ИЛИ Строки.СуммаБезНДС <> 0 ИЛИ Строки.СуммаУпр <> 0 ИЛИ Строки.СуммаУпрБезНДС <> 0)
	|
	// Регистрация расходов в упр. учете у организации - получателя.
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	Строки.ВидДвижения КАК ВидДвижения,
	|	Строки.ОрганизацияПолучатель КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.СтатьяРасходов КАК СтатьяРасходов,
	|	Строки.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(НД.УчетЗатрат, ЛОЖЬ) ТОГДА
	|			Строки.НаправлениеДеятельности
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
    |	Строки.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Строки.Сумма КАК Сумма,
	|	Строки.СуммаБезНДС КАК СуммаБезНДС,
    |	Строки.СуммаУпр КАК СуммаУпр,
    |	Строки.СуммаУпрБезНДС КАК СуммаУпрБезНДС,
	|	0 КАК СуммаРегл,
    |	0 КАК СуммаРеглБезНДС,
    |	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РегистрацияРасходовУУ) КАК ХозяйственнаяОперация,
	|	Строки.АналитикаУчетаНоменклатуры
	|
	|//ДополнительныеПоля
	|
	|ИЗ
	|	ВтПрочиеРасходы КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НД
	|		ПО НД.Ссылка = Строки.НаправлениеДеятельности
	|ГДЕ
	|	Строки.ОрганизацияПолучатель <> Строки.Организация
	|	И Строки.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |	И (Строки.Сумма <> 0 ИЛИ Строки.СуммаБезНДС <> 0 ИЛИ Строки.СуммаУпр <> 0 ИЛИ Строки.СуммаУпрБезНДС <> 0)
	|";
	
	ДобавитьДополнительныеПоляВТекстЗапроса(ДополнительныеПоля, ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьДополнительныеПоляВТекстЗапроса(ДополнительныеПоля, ТекстЗапроса)

	Если НЕ ЗначениеЗаполнено(ДополнительныеПоля) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстДополнительныеПоля = "";
	
	СписокПолей = СтрРазделить(ДополнительныеПоля, ",");
	Для каждого ИмяПоля Из СписокПолей Цикл
		ТекстДополнительныеПоля = ТекстДополнительныеПоля + "
		|	,Строки." + ИмяПоля;
	КонецЦикла; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоля", ТекстДополнительныеПоля); 

КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПрочиеРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
    Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d19c8e15-8f3c-4fe1-9347-b8a187548e4a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПрочиеРасходы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновляет регистр ""Прочие расходы""
                                   |- очищает ресурс ""Сумма без НДС"" для движений со статьей расходов, распределяемой в упр. учете на финансовый результат
                                   |- корректирует движения документа ""Переоценка валютных средств""
                                   |- исправляет движения регистра ""Прочие расходы"" документов ""Поступление безналичных ДС"" с хоз. операцией ""Конвертация валюты""
                                   |- заполняет измерение ""Подразделение доходов и расходов"" для документов ""Выбытие денежных средств""
                                   |- группирует движения для документов ""Расчет курсовых разниц""
                                   |'
                                   |;uk='Оновлює регістр ""Інші витрати""
                                   |- очищає ресурс ""Сума без ПДВ"" для рухів із статтею витрат, що розподіляється в упр. обліку на фінансовий результат
                                   |- коригує рухи документа ""Переоцінка валютних коштів""
                                   |- виправляє рухи регістру ""Інші витрати"" документів ""Надходження безготівкових ГК"" з госп. операцією ""Конвертація валюти""
                                   |- заповнює вимір ""Підрозділ доходів та витрат"" для документів ""Вибуття грошових коштів""
                                   |- групує рухи для документів ""Розрахунок курсових різниць""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РасчетКурсовыхРазниц.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетБанкаПоОперациямЭквайринга.ПолноеИмя());
	//++ НЕ УТ
    Читаемые.Добавить(Метаданные.Документы.ВыбытиеДенежныхДокументов.ПолноеИмя());
    //-- НЕ УТ     
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До"; 
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";  
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
    //++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыбытиеДенежныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ    
	
	//++ НЕ УТ
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПрочиеРасходы.ОбработатьДанныеИсправлениеДвиженийНалоговыхДокументов";
    Обработчик.Версия = "3.5.10.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6639437a-aafa-4201-8c12-7e840cf8e6ab");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПрочиеРасходы.ЗарегистрироватьДанныеКОбработкеИсправлениеДвиженийНалоговыхДокументов";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновляет регистр ""Прочие расходы""
                                   |- исправляет движения регистра ""Прочие расходы"" документов ""Налоговая накладная"", ""Приложение 2 к налоговой накладной"" с хоз. операцией ""НО по использованию в необлагаемых операциях""
                                   |- исправляет движения регистра ""Прочие расходы"" документа ""Регистрация входящего налогового документа"" с хоз. операцией ""Списание неполученного налогового кредита""
                                   |- исправляет движения регистра ""Прочие расходы"" документа ""Перерасчет пропорционального НДС по товарам и ОС""
                                   |'
                                   |;uk='Оновлює регістр ""Інші витрати""
                                   |- виправляє рухи регістру ""Інші витрати"" документів ""Податкова накладна"", ""Додаток 2 до податкової накладної"" з госп. операцією ""ПЗ з використання в неоподатковуваних операціях при використанні"" 
                                   |- виправляє рухи регістру ""Інші витрати"" документа ""Реєстрація вхідного податкового документа"" з госп. операцією ""Списання неотриманого податкового кредиту""
                                   |- виправляє рухи регістру ""Інші витрати"" документа ""Перерахунок пропорційного ПДВ за товарами та ОЗ""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.НалоговаяНакладная.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.Приложение2КНалоговойНакладной.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РегистрацияВходящегоНалоговогоДокумента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПерерасчетПропорциональногоНДСпоТоварамИОС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До"; 
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";  
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";            
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыбытиеДенежныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.НалоговаяНакладная.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.Приложение2КНалоговойНакладной.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РегистрацияВходящегоНалоговогоДокумента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПерерасчетПропорциональногоНДСпоТоварамИОС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ
    
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПрочиеРасходы";
    
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасходы.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
    |	ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл
	|		= ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|	И ПрочиеРасходы.СуммаБезНДС <> 0
	|";
    
    СписокЗапросов.Добавить(ТекстЗапроса);
	
	
	Если СписокЗапросов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
    
	СписокЗапросов = Новый Массив;
	
	// Очистка СуммыРегл должна произойти только в Управлении торговлей
	ЭтоУТ = НЕ (ПолучитьФункциональнуюОпцию("УправлениеПредприятием") ИЛИ ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация"));
	Если ЭтоУТ Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрочиеРасходы.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПрочиеРасходы.Регистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
        |	И (ПрочиеРасходы.СуммаРегл <> 0 ИЛИ ПрочиеРасходы.СуммаРеглБезНДС <> 0 ИЛИ ПрочиеРасходы.НДСРегл <> 0)";
		СписокЗапросов.Добавить(ТекстЗапроса);
	КонецЕсли;

	
	Если СписокЗапросов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ДанныеРегистра
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств)
	|	И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереоценкаДенежныхСредств)
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	//++ НЕ УТ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ДанныеРегистра
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВыбытиеДенежныхДокументов)
	|	И НЕ ДанныеРегистра.Регистратор.ПодразделениеДоходовРасходов = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	И ДанныеРегистра.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ДанныеРегистра
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ОтчетБанкаПоОперациямЭквайринга)
    |	И НЕ ДанныеРегистра.СтатьяРасходов.ВариантРаспределенияРасходовРегл В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
	|	И ДанныеРегистра.СуммаРегл = 0
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
    
    РегистрыНакопления.ПрочиеАктивыПассивы.ЗарегистироватьКОбновлениюУправленческогоБаланса(Параметры, Регистраторы, ПолноеИмяРегистра);
	//-- НЕ УТ
    
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПрочиеРасходы";
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходы; 
    
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств");
	//++ НЕ УТ
	Регистраторы.Добавить("Документ.ВыбытиеДенежныхДокументов");
	Регистраторы.Добавить("Документ.ОтчетБанкаПоОперациямЭквайринга");
	//-- НЕ УТ
	
	ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы,
		ПолноеИмяРегистра,
		Параметры.Очередь
    );
    
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
        Параметры.Очередь, 
        Неопределено, 
        ПолноеИмяРегистра
    );
    
	ЭтоУТ = НЕ (ПолучитьФункциональнуюОпцию("УправлениеПредприятием") ИЛИ ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация"));
    
    Пока Выборка.Следующий() Цикл

        
        Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") 
	         //++ НЕ УТ  
             ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВыбытиеДенежныхДокументов") 
             ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга") 
	         //-- НЕ УТ
             Тогда   
             
             Продолжить;
             
        КонецЕсли;     

		Регистратор = Выборка.Регистратор;
		ТипДокументСсылка = ТипЗнч(Регистратор);
		МетаданныеДокументСсылка = Регистратор.Метаданные();
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасходы.НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			
			Блокировка.Заблокировать();
		
			НаборЗаписей = РегистрыНакопления.ПрочиеРасходы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписей.Прочитать();
			
			ВсегоЗаписей = НаборЗаписей.Количество() - 1;
			Для Сч = 0 По ВсегоЗаписей Цикл
				
				Запись = НаборЗаписей[Сч];
				
                // Очистим СуммуРегл, СуммаРеглБезНДС, НДСРегл под ПереоценкойВалютныхСредств
				Если ЭтоУТ И ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.РасчетКурсовыхРазниц") Тогда
					Запись.СуммаРегл = 0;
					Запись.СуммаРеглБезНДС = 0;
					Запись.НДСРегл = 0;
				КонецЕсли;
                
                Если ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.СтатьяРасходов, "ВариантРаспределенияРасходовРегл") = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
                    Запись.СуммаБезНДС = 0;
                КонецЕсли;
				
			КонецЦикла;
				
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать движения по регистру ""Прочие расходы"" документа ""%1"" по причине: %2';uk='Не вдалося обробити рухи по регістру ""Інші витрати"" документа ""%1"" з причини: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Регистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
            
            ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				Регистратор,
				ТекстСообщения
            );
			
		КонецПопытки;
        
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

//++ НЕ УТ
Процедура ЗарегистрироватьДанныеКОбработкеИсправлениеДвиженийНалоговыхДокументов(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПрочиеРасходы";
    
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасходы.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПрочиеРасходы.Регистратор) = ТИП(Документ.НалоговаяНакладная)
	|	И ПрочиеРасходы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваУсловнаяПродажа)
    |	И &УправленческийУчетОрганизаций И (ПрочиеРасходы.СуммаУпр = 0 ИЛИ ПрочиеРасходы.СуммаУпрБезНДС = 0)
	|";
    СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасходы.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПрочиеРасходы.Регистратор) = ТИП(Документ.Приложение2КНалоговойНакладной)
	|	И ПрочиеРасходы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваУсловнаяПродажа)
    |	И (ПрочиеРасходы.Сумма <> 0 ИЛИ ПрочиеРасходы.СуммаБезНДС <> 0)
	|";
    СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасходы.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПрочиеРасходы.Регистратор) = ТИП(Документ.РегистрацияВходящегоНалоговогоДокумента)
	|	И ПрочиеРасходы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНДСНаРасходы)
    |	И (ПрочиеРасходы.Сумма <> 0 ИЛИ ПрочиеРасходы.СуммаБезНДС <> 0)
	|";
    СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасходы.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПрочиеРасходы.Регистратор) = ТИП(Документ.ПерерасчетПропорциональногоНДСпоТоварамИОС)
	|	И ПрочиеРасходы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПерерасчетПропорциональногоНДС)
    |	И &УправленческийУчетОрганизаций И (ПрочиеРасходы.СуммаУпр = 0 ИЛИ ПрочиеРасходы.СуммаУпрБезНДС = 0)
	|";
    СписокЗапросов.Добавить(ТекстЗапроса);
	
	Если СписокЗапросов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("УправленческийУчетОрганизаций", РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
    
КонецПроцедуры

Процедура ОбработатьДанныеИсправлениеДвиженийНалоговыхДокументов(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПрочиеРасходы";
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.НалоговаяНакладная");
	Регистраторы.Добавить("Документ.Приложение2КНалоговойНакладной");
	Регистраторы.Добавить("Документ.РегистрацияВходящегоНалоговогоДокумента");
	Регистраторы.Добавить("Документ.ПерерасчетПропорциональногоНДСпоТоварамИОС");
	
	ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы,
		ПолноеИмяРегистра,
		Параметры.Очередь
    );
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли
