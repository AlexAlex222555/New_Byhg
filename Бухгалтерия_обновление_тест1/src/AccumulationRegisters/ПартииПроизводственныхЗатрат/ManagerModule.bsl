#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПартииПроизводственныхЗатрат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a2b6de6b-b0b1-4ba5-946f-1e0fd75c64ab");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПартииПроизводственныхЗатрат.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВидыЗапасов,"    
        + "Справочник.КлючиАналитикиУчетаНоменклатуры," 
		+ "РегистрНакопления.ПартииПроизводственныхЗатрат"
	;
	Обработчик.ИзменяемыеОбъекты = ""
		+ "РегистрНакопления.ПартииПроизводственныхЗатрат"
	;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Очищает измерение ""Вид запасов"" с типом запасов ""Услуга"" записей регистра накопления ""Партии производственных затрат"".
                                   |Заполняет новый реквизит ""Назначение"" в справочнике ""Ключи аналитики учета номенклатуры"", и обновляет движения по регистру.
                                   |Данные в регистре накопления ""Партии производственных затрат"" не рекомендуется использовать до момента завершения обработки. Данные будут некорректны.'
                                   |;uk='Очищає вимірювання ""Вид запасів"" із типом запасів ""Послуга"" записів регістру накопичення ""Партії виробничих витрат"".
                                   |Заповнює новий реквізит ""Призначення"" у довіднику ""Ключі аналітики обліку номенклатури"" та оновлює рухи по регістру.
                                   |Дані в регістрі накопичення ""Партії виробничих витрат"" не рекомендується використовувати до завершення обробки. Дані будуть некоректні.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
    

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьКлючиАналитикиНоменклатуры(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);	                        

КонецПроцедуры

// Обработчик обновления УТ 3.5.4
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
    
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ПартииПроизводственныхЗатрат";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПартииПроизводственныхЗатрат КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
    
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПартииПроизводственныхЗатрат КАК ДанныеРегистра
	|ГДЕ
	|	(ДанныеРегистра.АналитикаУчетаНоменклатуры.Назначение <> ДанныеРегистра.ВидЗапасов.УстарелоНазначение
	|		И ДанныеРегистра.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ДанныеРегистра.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|	ИЛИ (ДанныеРегистра.КорАналитикаУчетаНоменклатуры.Назначение <> ДанныеРегистра.ВидЗапасов.УстарелоНазначение
	|		И ДанныеРегистра.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ДанныеРегистра.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И ДанныеРегистра.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка))
	|");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
    
КонецПроцедуры

// Обработчик обновления УТ 3.5.4
// Очищаются виды запасов с типом запасов Услуга.
// Заполняется новый реквизит "Назначение" в справочнике "Ключи аналитики учета номенклатуры",
// и обновляются движения по регистру.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = "РегистрНакопления.ПартииПроизводственныхЗатрат";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
    
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Регистратор                   КАК Регистратор,
	|	Движения.Период                        КАК Период,
	|	Движения.ВидДвижения                   КАК ВидДвижения,
	|	Движения.Организация                   КАК Организация,
	|	ВЫБОР КОГДА Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И НЕ Аналитика.КлючАналитики ЕСТЬ NULL
	|		И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|		И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ТОГДА Аналитика.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                                  КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ВидЗапасов
	|	КОНЕЦ                                  КАК ВидЗапасов,
	|	Движения.ДокументПоступления           КАК ДокументПоступления,
	|	Движения.АналитикаУчетаПартий          КАК АналитикаУчетаПартий,
	|	Движения.Количество                    КАК Количество,
	|	Движения.Стоимость                     КАК Стоимость,
	|	Движения.СтоимостьБезНДС               КАК СтоимостьБезНДС,
	|	Движения.СтоимостьРегл                 КАК СтоимостьРегл,
	|	Движения.НДСРегл                       КАК НДСРегл,
	|	Движения.ПостояннаяРазница             КАК ПостояннаяРазница,
	|	Движения.ВременнаяРазница              КАК ВременнаяРазница,
	|	Движения.СтатьяКалькуляции             КАК СтатьяКалькуляции,
	|	Движения.ДатаРегистратора              КАК ДатаРегистратора,
    |	Движения.НалоговоеНазначение            КАК НалоговоеНазначение,
	|	Движения.Спецификация                  КАК Спецификация,
	|	Движения.ЗаказНаПроизводство           КАК ЗаказНаПроизводство,
	|	Движения.КодСтрокиПродукция            КАК КодСтрокиПродукция,
	|	Движения.Этап                          КАК Этап,
	|	ВЫБОР КОГДА Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И НЕ КорАналитика.КлючАналитики ЕСТЬ NULL
	|		И Движения.КорАналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|		И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Движения.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		ТОГДА КорАналитика.КлючАналитики
	|		ИНАЧЕ Движения.КорАналитикаУчетаНоменклатуры
	|	КОНЕЦ                                  КАК КорАналитикаУчетаНоменклатуры,
	|	Движения.СтатьяРасходовСписания        КАК СтатьяРасходовСписания,
	|	Движения.АналитикаРасходов             КАК АналитикаРасходов,
	|	Движения.ПодразделениеРасходов         КАК ПодразделениеРасходов,
	|	Движения.ДокументИсточник              КАК ДокументИсточник,
	|	Движения.НомерГруппыЗатрат             КАК НомерГруппыЗатрат,
	|
	|	ВЫБОР КОГДА (Аналитика.КлючАналитики ЕСТЬ NULL
	|			И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|			И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|		ИЛИ (КорАналитика.КлючАналитики ЕСТЬ NULL 
	|			И Движения.КорАналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|			И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			И Движения.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка))
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
	|ИЗ
	|	РегистрНакопления.ПартииПроизводственныхЗатрат КАК Движения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = Движения.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия = Аналитика.Серия
	|		И Ключи.МестоХранения = Аналитика.МестоХранения
	|		И Ключи.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|		И Движения.ВидЗапасов.УстарелоНазначение = Аналитика.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КорКлючи
	|	ПО КорКлючи.Ссылка = Движения.КорАналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитика
	|	ПО КорКлючи.Номенклатура = КорАналитика.Номенклатура
	|		И КорКлючи.Характеристика = КорАналитика.Характеристика
	|		И КорКлючи.Серия = КорАналитика.Серия
	|		И КорКлючи.МестоХранения = КорАналитика.МестоХранения
	|		И КорКлючи.СтатьяКалькуляции = КорАналитика.СтатьяКалькуляции
	|		И Движения.ВидЗапасов.УстарелоНазначение = КорАналитика.Назначение
	|
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючиИнициализированы,
	|	НомерСтроки
	|";
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыНакопления.ПартииПроизводственныхЗатрат.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			ИначеЕсли Результат[0].КлючиИнициализированы = 0 Тогда
				ТекстСообщения = НСтр("ru='есть необновленные ключи. Необходимо перепровести документ вручную.';uk='існують неоновлені ключі. Необхідно перепровести документ вручну.'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли