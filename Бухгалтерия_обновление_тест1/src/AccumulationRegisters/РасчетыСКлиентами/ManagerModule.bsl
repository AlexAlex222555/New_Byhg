#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";
	
	Ограничение.ТекстДляВнешнихПользователей =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|	ПО АналитикаУчетаПоПартнерам.КлючАналитики = ЭтотСписок.АналитикаУчетаПоПартнерам
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователиПартнеры
	|	ПО ВнешниеПользователиПартнеры.ОбъектАвторизации = АналитикаУчетаПоПартнерам.Партнер
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ВнешниеПользователиПартнеры.Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт
    
#Область ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
    Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ea4a8129-9935-4278-a2f5-30bb7aaafcce");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСКлиентами.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновляет движения документов по регистру ""Расчеты с клиентами"".
                                   |Пока обработчик не выполнен, расчеты находятся в некорректном состоянии.'
                                   |;uk='Оновлює рухи документів по регістру ""Розрахунки з клієнтами"".
                                   |Поки обробник не виконаний, розрахунки перебувають у некоректному стані.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаПоПартнерам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.КлючиАналитикиУчетаПоПартнерам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ГрафикИсполненияДоговора.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыкупВозвратнойТарыКлиентом.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатков.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровОтКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОперацияПоПлатежнойКарте.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомиссионера.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомиссионераОСписании.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РеализацияТоваровУслуг.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомитенту.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.АктВыполненныхРабот.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриходныйКассовыйОрдер.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РасходныйКассовыйОрдер.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеЗадолженности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	//++ НЕ УТ
	//-- НЕ УТ
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
    НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВзаимозачетЗадолженности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ГрафикИсполненияДоговора.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
    НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОперацияПоПлатежнойКарте.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитенту.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйКассовыйОрдер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РасходныйКассовыйОрдер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияУслугПрочихАктивов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаПоПартнерам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.АналитикаУчетаПоПартнерам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ГрафикПлатежей.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

    
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьОбъектыРасчетов(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);

#КонецОбласти

#Область ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9769d3c0-f12f-499f-810b-543d4c2adb90");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСКлиентами.ЗарегистрироватьДанныеКорректировокРегистровКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.РасчетыСКлиентами";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.РасчетыСКлиентами";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Заполняет реквизиты ""ПорядокОперации"", ""ДатаРегистратора"", ""ДатаПлатежа"", ""ПорядокЗачетаПоДатеПлатежа"" по движениям, сделанным документом Корректировка регистров в регистре Расчеты с клиентами.
                                   |Пока обработчик не выполнен, расчеты находятся в некорректном состоянии.'
                                   |;uk='Заповнює реквізити ""ПорядокОперации"", ""ДатаРегистратора"", ""ДатаПлатежа"", ""ПорядокЗачетаПоДатеПлатежа"" за рухами, зробленими документом Коригування регістрів у регістрі Розрахунки з клієнтами.
                                   |Поки обробник не виконаний, розрахунки перебувають у некоректному стані.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти
    
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь)[1];

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра(); 
    
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
	|	РеализацияТоваровУслуг.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.РеализацияПоЗаказам
	|	И НЕ РеализацияТоваровУслуг.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|	И РеализацияТоваровУслуг.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту), 
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет), 
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности))
	|	И РеализацияТоваровУслуг.Проведен
	|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОбработке.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ 
	|		ВложенныйЗапрос.Ссылка КАК Регистратор
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДокументыДляОбработки.Ссылка                     КАК Ссылка,
	|			СУММА(ДокументыДляОбработки.ОтгружаетсяДокумент) КАК ОтгружаетсяДокумент,
	|			СУММА(ДокументыДляОбработки.ОтгружаетсяРегистр)  КАК ОтгружаетсяРегистр
	|		ИЗ
	|			(ВЫБРАТЬ 
	|			ТаблицаТовары.Ссылка                     КАК Ссылка,
	|				СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК ОтгружаетсяДокумент,
	|				0                                        КАК ОтгружаетсяРегистр
	|			ИЗ
	|				Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы 
	|						ПО ВТДокументы.Ссылка =  ТаблицаТовары.Ссылка
	|			ГДЕ
	|				(ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|					ИЛИ ВТДокументы.ТребуетсяЗалогЗаТару
	|					ИЛИ НЕ ВТДокументы.ВернутьМногооборотнуюТару)
	|				И ТаблицаТовары.КодСтроки <> 0
	|			СГРУППИРОВАТЬ ПО 
	|				ТаблицаТовары.Ссылка
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				РасчетыСКлиентами.Регистратор,
	|				0,
	|				СУММА(РасчетыСКлиентами.Отгружается)
	|			ИЗ
	|				РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы 
	|						ПО ВТДокументы.Ссылка =  РасчетыСКлиентами.Регистратор
	|			СГРУППИРОВАТЬ ПО
	|				РасчетыСКлиентами.Регистратор) КАК ДокументыДляОбработки
	|		СГРУППИРОВАТЬ ПО
	|			ДокументыДляОбработки.Ссылка) КАК ВложенныйЗапрос
	|	ГДЕ
	|		ВложенныйЗапрос.ОтгружаетсяДокумент < ВложенныйЗапрос.ОтгружаетсяРегистр
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ПО
	|			Расчеты.Регистратор = ДанныеДокумента.Ссылка
	|			И Расчеты.Оплачивается <> 0
	|	ГДЕ
	|		ДанныеДокумента.Проведен
	|		И ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)) 
	|		И Расчеты.Регистратор ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ПО
	|			Расчеты.Регистратор = ДанныеДокумента.Ссылка
	|			И Расчеты.Оплачивается <> 0
	|	ГДЕ
	|		ДанныеДокумента.Проведен
	|		И ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)) 
	|		И Расчеты.Регистратор ЕСТЬ NULL
	|		И (ДанныеДокумента.ПроведеноБанком
	|			ИЛИ НЕ ДанныеДокумента.ОплатаПоЗаявкам)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ПО
	|			Расчеты.Регистратор = ДанныеДокумента.Ссылка
	|			И Расчеты.Оплачивается <> 0
	|	ГДЕ
	|		ДанныеДокумента.Проведен
	|		И ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)) 
	|		И Расчеты.Регистратор ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка
	|	ИЗ
	|		Документ.ОперацияПоПлатежнойКарте КАК ДанныеДокумента
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ПО
	|			Расчеты.Регистратор = ДанныеДокумента.Ссылка
	|			И Расчеты.Оплачивается <> 0
	|	ГДЕ
	|		ДанныеДокумента.Проведен
	|		И ДанныеДокумента.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)) 
	|		И Расчеты.Регистратор ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Расчеты.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК Расшифровка
	|		ПО Расчеты.Регистратор = Расшифровка.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	
	|	ГДЕ
    |		ЕСТЬNULL(Расшифровка.УдалитьЗаказ.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |		И ЕСТЬNULL(Расшифровка.УдалитьЗаказ.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> Аналитика.Организация
	|	) КАК ДокументыКОбработке
	|");
	
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрНакопления.РасчетыСКлиентами");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"), 
        ДополнительныеПараметры
    );
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ВзаимозачетЗадолженности
	|	ПО Расчеты.Регистратор = ВзаимозачетЗадолженности.Ссылка
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
	    Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"), 
	    ПолноеИмяРегистра
	);

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	(((РасчетыСКлиентами.Сумма <> 0
	|			ИЛИ РасчетыСКлиентами.КОплате <> 0)
	|	И РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВводОстатков
	|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.УдалитьЗаказКлиента) НЕ В (&ТипыДокументов)
	|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.УдалитьЗаказКлиента) НЕ В (ТИП(Справочник.ДоговорыКонтрагентов),ТИП(Справочник.ДоговорыМеждуОрганизациями))
	|	И РасчетыСКлиентами.РасчетныйДокумент = Неопределено
	|	И РасчетыСКлиентами.УдалитьЗаказКлиента <> НЕОПРЕДЕЛЕНО)
	//Порядок расчетов
	|	ИЛИ (((РасчетыСКлиентами.ПорядокОперации = """" 
	|			ИЛИ РасчетыСКлиентами.ПорядокЗачетаПоДатеПлатежа = """")
	|		И (РасчетыСКлиентами.Сумма <> 0 ИЛИ РасчетыСКлиентами.КОплате <> 0 ИЛИ РасчетыСКлиентами.КОтгрузке <> 0))
	//Хозяйственная операция
	|		ИЛИ РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|			И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	//Пустые варианты оплаты
	|		ИЛИ РасчетыСКлиентами.КОплате <> 0
	|			И ВидДвижения = Значение(ВидДвиженияНакопления.Приход)
	|			И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) В (&ТипыДокументов)
	|			И РасчетыСКлиентами.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПустаяСсылка)
	//Отрицательные отчеты комиссионеров
	|		ИЛИ РасчетыСКлиентами.Сумма < 0
	|			И РасчетыСКлиентами.КОплате > 0
	|			И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	//Дата регистратора необходима для порядка расчетов
	|		ИЛИ РасчетыСКлиентами.ДатаРегистратора = ДАТАВРЕМЯ(1, 1, 1)
	//ХО Удержания вознаграждения
	|		ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ОтчетКомиссионера
	|			И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера)
	//Валюта документа 
	|		ИЛИ РасчетыСКлиентами.ВалютаДокумента = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	//КорОбъектРасчетов
	|	ИЛИ (ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.УдалитьЗаказКлиента) В (
	|				ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
	|				ТИП(Документ.ПриходныйКассовыйОрдер),
	|				ТИП(Документ.ОперацияПоПлатежнойКарте)
	|			)
	|			ИЛИ ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.УдалитьЗаказКлиента) = ТИП(Документ.ПервичныйДокумент)
	|				И ВЫРАЗИТЬ(РасчетыСКлиентами.УдалитьЗаказКлиента КАК Документ.ПервичныйДокумент).ТипПервичногоДокумента = 
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику)
	|		)
    |		И РасчетыСКлиентами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И РасчетыСКлиентами.Сумма <> 0)
	//Заполнение КорАналитикаУчетаПоПартнерам
	|	ИЛИ (РасчетыСКлиентами.КорАналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
    |		И НЕ РасчетыСКлиентами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка))
    //Перепроведение возвратов ДС
	|	ИЛИ РасчетыСКлиентами.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	|		)
	|		И РасчетыСКлиентами.УдалитьЗаказКлиента <> РасчетыСКлиентами.Регистратор
	|		И РасчетыСКлиентами.Сумма <> 0
	|)
	| И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	| И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТипыДокументов", ПолучитьТипыДокументов());
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
        Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		ПолноеИмяРегистра
    );
    
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
    |";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра
    );
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();      
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь)[1];
    
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0
		Или Не ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	

	ТекстЗапросаРеализация = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТОбъектыДляОбработки
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ 
	|	ОбъектыДляОбработки.Регистратор                 КАК Регистратор,
	|	ОбъектыДляОбработки.Регистратор.ВерсияДанных    КАК ВерсияДанных,
	|	ВЫБОР 
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг 
	|			ТОГДА ВЫБОР 
	|					КОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.РеализацияТоваровУслуг).ПорядокРасчетов 
	|							= ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                           КАК РасчетыПоДоговору
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ 
	|	ДанныеДокумента.Ссылка                     КАК Регистратор,
	|	ДанныеДокумента.ЗаказКлиента               КАК ЗаказКлиента,
	|	СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК Отгружается
	|ИЗ 
	|	Документ.РеализацияТоваровУслуг.Товары КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|			ПО ОбъектыДляОбработки.Регистратор = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.КодСтроки <> 0
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ЗаказКлиента
	|";
	
	ЗапросРеализация = Новый Запрос(ТекстЗапросаРеализация); 
	ЗапросРеализация.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);  
	
	Результат = ЗапросРеализация.ВыполнитьПакет();
	
	ТаблицаРеализации = Результат[1].Выгрузить();
	ТаблицаОтгружается = Результат[2].Выгрузить();
	ТаблицаРеализации.Индексы.Добавить("Регистратор");
	ТаблицаОтгружается.Индексы.Добавить("Регистратор, ЗаказКлиента"); 
	
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
    
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		
		Попытка
            
			СтруктураПоиска = Новый Структура("Регистратор", Регистратор);
			ДокументыРеализации = ТаблицаРеализации.НайтиСтроки(СтруктураПоиска); 
			Если ДокументыРеализации.Количество() > 0 Тогда
				ДокументРеализации = ДокументыРеализации[0];
				РегистраторВерсияДанных = ДокументРеализации.ВерсияДанных; 
			Иначе	   
				РегистраторВерсияДанных = Неопределено;
			КонецЕсли;    
			
			Если НЕ ЭтоФайловаяИБ И РегистраторВерсияДанных <> Регистратор.ВерсияДанных Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
            Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.РасчетыСКлиентами.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор); 
            
			ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, ИмяРегистра);
			Результат = ТаблицыДляДвижений["Таблица" + ИмяРегистра];
            НаборЗаписей.ЗагрузитьСОбработкой(Результат);
			
			СтруктураПоиска = Новый Структура("Регистратор", Регистратор);
			ДокументыРеализации = ТаблицаРеализации.НайтиСтроки(СтруктураПоиска); 
			Если ДокументыРеализации.Количество() > 0 Тогда
				ДокументРеализации = ДокументыРеализации[0];
				РасчетыПоДоговору = ДокументРеализации.РасчетыПоДоговору; 
			Иначе	   
				ДокументРеализации = Неопределено;
				РасчетыПоДоговору = Ложь;
			КонецЕсли;    
			
			сч = 0;
			Пока сч < НаборЗаписей.Количество() Цикл
                
                Запись = НаборЗаписей[сч];
                
                Если Запись.Отгружается <> 0 Тогда
					
					СтруктураПоиска = Новый Структура("Регистратор, ЗаказКлиента");
					СтруктураПоиска.Регистратор = Запись.Регистратор;
					Если РасчетыПоДоговору Тогда
						СтруктураПоиска.ЗаказКлиента = Запись.ПродажаПоЗаказу;
					Иначе
                        СтруктураПоиска.ЗаказКлиента = Запись.УдалитьЗаказКлиента;
					КонецЕсли;
					
					СтрокиОтгружается = ТаблицаОтгружается.НайтиСтроки(СтруктураПоиска);
					
					Если СтрокиОтгружается.Количество() = 0 Тогда
						НаборЗаписей.Удалить(Запись);
						Продолжить;
					Иначе
						Если СтрокиОтгружается[0].Отгружается <> Запись.Отгружается Тогда
							 Запись.Отгружается = СтрокиОтгружается[0].Отгружается;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
                
                сч = сч + 1;
                
            КонецЦикла;
            
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
            
			ЗафиксироватьТранзакцию();  
            
		Исключение
    	
    		ОтменитьТранзакцию();
    		
    		Шаблон = НСтр("ru='Не удалось записать данные в регистр %1 , по причине: %2';uk='Не вдалося записати дані в регістр %1, з причини: %2'");
    		ТекстСообщения = СтрШаблон(
                Шаблон,
    			ПолноеИмяРегистра,
    			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
            );
    		
    		ЗаписьЖурналаРегистрации(
                ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
    			УровеньЖурналаРегистрации.Предупреждение,
    			МетаданныеРегистра,
    			,
    			ТекстСообщения
            );
    	
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ТипыДокументовКОбработке()
	
	Возврат
		"Документ.ГрафикИсполненияДоговора,
		|Документ.ЗаказКлиента,
		|Документ.ЗаявкаНаВозвратТоваровОтКлиента,
		|Документ.АктВыполненныхРабот,
		|Документ.ВводОстатков,
		|Документ.ВзаимозачетЗадолженности,
		|Документ.ВозвратТоваровМеждуОрганизациями,
		|Документ.ВозвратТоваровОтКлиента,
		|Документ.ВыкупВозвратнойТарыКлиентом,
		|Документ.ОперацияПоПлатежнойКарте,
		|Документ.ОтчетКомиссионера,
		|Документ.ОтчетКомиссионераОСписании,
		|Документ.ОтчетКомитенту,
		|Документ.ОтчетПоКомиссииМеждуОрганизациями,
		|Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании,
		|Документ.ПередачаТоваровМеждуОрганизациями,
		|Документ.ПоступлениеБезналичныхДенежныхСредств,
		|Документ.ПриходныйКассовыйОрдер,
		|Документ.РасходныйКассовыйОрдер,
		|Документ.РеализацияТоваровУслуг,
		|Документ.РеализацияУслугПрочихАктивов,
		|Документ.СписаниеБезналичныхДенежныхСредств,
		|Документ.СписаниеЗадолженности";
	
КонецФункции

Функция ПолучитьТипыДокументов()

	ТекстТиповДокументов = ""; 
	
	
	ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента), ";
	ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ЗаказКлиента)";
	
	Возврат ТекстТиповДокументов;
	
КонецФункции

// Регистрирует данные для обновления данных движений документа Корректировка регистров
Процедура ЗарегистрироватьДанныеКорректировокРегистровКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСКлиентами";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	//Порядок расчетов
	|	(РасчетыСКлиентами.ПорядокОперации = """" 
	|		ИЛИ РасчетыСКлиентами.ПорядокЗачетаПоДатеПлатежа = """"
	//Дата регистратора необходима для порядка расчетов
	|		ИЛИ РасчетыСКлиентами.ДатаРегистратора = ДАТАВРЕМЯ(1, 1, 1))
	|	И РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
        Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		ПолноеИмяРегистра
    );
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.4
// Заполняет реквизиты ПорядокОперации, ДатаРегистратора, ДатаПлатежа, ПорядокЗачетаПоДатеПлатежа
// по движениям, сделанным документом Корректировка регистров в не многопоточном режиме
Процедура ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСКлиентами";
	
	//Корректировки регистров.
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
        Параметры.Очередь,
		"Документ.КорректировкаРегистров", 
        ПолноеИмяРегистра
    );
	
	ТипДокумента = Тип("ДокументСсылка.КорректировкаРегистров");
	ВидТипДокумента = ОперативныеВзаиморасчетыСервер.ВидТипДокумента(ТипДокумента);
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.КорректировкаРегистров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Регистратор,"Дата,Номер");
			
			Набор = РегистрыНакопления.РасчетыСКлиентами.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			
			ОбъектИзменен = Ложь;
			
			Для Каждого Запись Из Набор Цикл
				Если Не ЗначениеЗаполнено(Запись.ДатаРегистратора) Тогда
					Запись.ДатаРегистратора = РеквизитыДокумента.Дата;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Запись.ДатаПлатежа) И Запись.КОплате <> 0 Тогда
					Запись.ДатаПлатежа = РеквизитыДокумента.Дата;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Запись.ПорядокЗачетаПоДатеПлатежа) ИЛИ Не ЗначениеЗаполнено(Запись.ПорядокОперации) Тогда
					Если Запись.Сумма = 0 И Запись.КОплате <> 0 Тогда
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Запись.ДатаРегистратора, РеквизитыДокумента.Номер, ВидТипДокумента);
						Запись.ПорядокЗачетаПоДатеПлатежа   = ОперативныеВзаиморасчетыСервер.Порядок(Запись.Период, РеквизитыДокумента.Номер, ВидТипДокумента);
					ИначеЕсли Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Сумма > 0 
							ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Сумма < 0 Тогда 
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Запись.Период, РеквизитыДокумента.Номер, ВидТипДокумента);
						Запись.ПорядокЗачетаПоДатеПлатежа   = Запись.ПорядокОперации;
					Иначе
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Запись.ДатаРегистратора, РеквизитыДокумента.Номер,,ТипДокумента, Запись.ВидДвижения);
						Запись.ПорядокЗачетаПоДатеПлатежа   = ОперативныеВзаиморасчетыСервер.Порядок(
							?(ЗначениеЗаполнено(Запись.ДатаПлатежа),Запись.ДатаПлатежа,Запись.ДатаРегистратора), РеквизитыДокумента.Номер,, ТипДокумента, Запись.ВидДвижения);
					КонецЕсли;
					ОбъектИзменен = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
			Иначе
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось обработать движения документа ""%1"" по причине:
                    |%2'
                    |;uk='Не вдалося обробити рух документа ""%1"" по причині:
                    |%2'"),
				Регистратор,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
            );
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(),
				ТекстСообщения
            );
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
