#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

#Область ОбработатьДанныеДляПереходаНаНовуюВерсию
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ec811348-dd95-47d1-a9f6-aaf83d00c61c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ТоварыОрганизаций.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновляет записи регистра накопления ""Товары организаций"". Данные в регистре накопления ""Товары организаций"" не рекомендуется использовать до момента завершения обработки. Данные будут некорректны.';uk='Оновлює записи регістру накопичення ""Товари організацій"". Дані в регістрі накопичення ""Товари організацій"" не рекомендується використовувати до завершення обробки. Дані будуть некоректні.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ТоварыОрганизаций.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СборкаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыЗапасов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.ПолноеИмя());
	//++ НЕ УТ
	Читаемые.Добавить(Метаданные.Документы.ПередачаМатериаловВПроизводство.ПолноеИмя());
	//-- НЕ УТ
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ТоварыОрганизаций.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаНазначенияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаНалоговогоНазначенияЗапасов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаОбособленногоУчетаЗапасов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПеремещениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПорчаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";
	

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ
	
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.СоздатьРегистраторыГрафикаДвиженияТоваровПоДоговорам";
	НоваяСтрока.Порядок = "После";
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьКлючиАналитикиНоменклатуры(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);	                        

#КонецОбласти

	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыНакопления.ТоварыОрганизаций;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизаций";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ПОМЕСТИТЬ ВтДанныеРегистра
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтДанныеРегистра.Ссылка
	|	ИЗ
	|		ВтДанныеРегистра КАК ВтДанныеРегистра
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК СборкаТоваров
	|		ПО ВтДанныеРегистра.Ссылка = СборкаТоваров.Ссылка
	|			И (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) <> СборкаТоваров.ХозяйственнаяОперация)
	|	ГДЕ
	|		НЕ СборкаТоваров.Ссылка ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК ДанныеРегистра
	|	ГДЕ
	|		(ДанныеРегистра.АналитикаУчетаНоменклатуры.Назначение <> ДанныеРегистра.ВидЗапасов.УстарелоНазначение
	|			И ДанныеРегистра.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|		ИЛИ (ДанныеРегистра.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			И ДанныеРегистра.КорВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			И ДанныеРегистра.КорАналитикаУчетаНоменклатуры.Назначение 
	|				<> ЕСТЬNULL(ДанныеРегистра.КорВидЗапасов.УстарелоНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|			И ЕСТЬNULL(ДанныеРегистра.КорВидЗапасов.УстарелоНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|				<> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|
	|
	//++ НЕ УТ
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Движения.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаМатериаловВПроизводство КАК ПередачаМатериаловВПроизводство
	|			ПО ПередачаМатериаловВПроизводство.Ссылка = Движения.Регистратор
	|	ГДЕ
	|		Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство)
	//-- НЕ УТ
	|
	|	) КАК Движения
	|");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Регистраторы, 
		ДополнительныеПараметры
	);
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизаций";
	
	Запрос = Новый Запрос;
	МассивТекстовЗапроса = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И ДанныеРегистра.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)";
	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	
	
	
	// удаление движений для номенклатуры с типом "Работа"
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК Движения
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
	|	ПО Движения.АналитикаУчетаНоменклатуры = КлючиАналитики.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО СпрНоменклатура.Ссылка = КлючиАналитики.Номенклатура
	|	И СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	// исправление расхождения количества с документом сборки
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Регистратор КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТоварыОрганизаций.Количество КАК Количество,
	|		ТоварыОрганизаций.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|	ГДЕ
	|		ТоварыОрганизаций.Регистратор ССЫЛКА Документ.СборкаТоваров
	|		И ТоварыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СборкаТоваров.АналитикаУчетаНоменклатуры,
	|		-СборкаТоваров.Количество,
	|		СборкаТоваров.Ссылка
	|	ИЗ
	|		Документ.СборкаТоваров КАК СборкаТоваров
	|	ГДЕ
	|		СборкаТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|		И ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.ТоварыОрганизаций КАК Движения
	|				ГДЕ
	|					Движения.Регистратор = СборкаТоваров.Ссылка
	|					И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СборкаТоваровТовары.АналитикаУчетаНоменклатуры,
	|		-СборкаТоваровТовары.Количество,
	|		СборкаТоваровТовары.Ссылка
	|	ИЗ
	|		Документ.СборкаТоваров.Товары КАК СборкаТоваровТовары
	|	ГДЕ
	|		СборкаТоваровТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|		И ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.ТоварыОрганизаций КАК Движения
	|				ГДЕ
	|					Движения.Регистратор = СборкаТоваровТовары.Ссылка
	|					И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Количество) <> 0";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыОрганизаций.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|ГДЕ
	|	(ТоварыОрганизаций.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|	ИЛИ ТоварыОрганизаций.Регистратор ССЫЛКА Документ.КорректировкаНазначенияТоваров)
	|	И (ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|				И ТоварыОрганизаций.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			ИЛИ ТоварыОрганизаций.ВидЗапасов.РеализацияЗапасовДругойОрганизации)";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Регистраторы, 
		ДополнительныеПараметры
	);
	
	ИмяРегистра = "ТоварыОрганизаций";
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизаций";
	
	СписокДокументов = Новый Массив();
	СписокДокументов.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
	СписокДокументов.Добавить("Документ.ПриобретениеТоваровУслуг");
	
	Для Каждого ПолноеИмяДокумента Из СписокДокументов Цикл
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
		ТекстЗапросаМеханизмаПроведения = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
		Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
			ТекстЗапросаМеханизмаПроведения,
			ПолноеИмяРегистра,
			ПолноеИмяДокумента
		);
								
		ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
			Параметры, 
			Регистраторы, 
			ПолноеИмяРегистра
		);  
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизаций";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТоварыОрганизаций;
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.СборкаТоваров");
	//++ НЕ УТ
	Регистраторы.Добавить("Документ.ПередачаМатериаловВПроизводство");
	//-- НЕ УТ
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
		Параметры.Очередь,
		Неопределено,
		ПолноеИмяРегистра,
		МенеджерВременныхТаблиц
	);
		
	ДополнительныеПараметрыПроверкиБлокировки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыПроверкиБлокировки.ИмяВременнойТаблицы = "ВтЗаблокированныеСсылки";
	ЗаблокированныеСсылки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
		Параметры.Очередь,
		Регистраторы,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметрыПроверкиБлокировки
	);
		
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
		
	ТекстЗапросаВыборки = 
	"ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокированныеСсылки
	|		ПО СсылкиДляОбработки.Регистратор = ВтЗаблокированныеСсылки.Ссылка
	|ГДЕ
	|	ВтЗаблокированныеСсылки.Ссылка ЕСТЬ NULL";
	
	ТекстЗапросаОбработчика = 
	"ВЫБРАТЬ
	|	Движения.Регистратор                   КАК Регистратор,
	|	Движения.Период                        КАК Период,
	|	Движения.ВидДвижения                   КАК ВидДвижения,
	|	ВЫБОР КОГДА Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|		И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И НЕ Аналитика.КлючАналитики ЕСТЬ NULL
	|		ТОГДА Аналитика.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                                  КАК АналитикаУчетаНоменклатуры,
	|	Движения.Организация                   КАК Организация,
	|	Движения.ВидЗапасов                    КАК ВидЗапасов,
	|	Движения.НомерГТД                      КАК НомерГТД,
	|	Движения.Количество                    КАК Количество,
	|	ВЫБОР КОГДА НЕ Сборка.ХозяйственнаяОперация ЕСТЬ NULL ТОГДА
	|		Сборка.ХозяйственнаяОперация
	//++ НЕ УТ
	|	КОГДА НЕ ПередачаМатериаловВПроизводство.ХозяйственнаяОперация ЕСТЬ NULL ТОГДА
	|		ПередачаМатериаловВПроизводство.ХозяйственнаяОперация
	//-- НЕ УТ
	|	ИНАЧЕ
	|		Движения.ХозяйственнаяОперация
	|	КОНЕЦ                                  КАК ХозяйственнаяОперация,
	|	Движения.НалоговоеНазначение           КАК НалоговоеНазначение,
	|	ВЫБОР КОГДА Движения.КорВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И Движения.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		И Движения.КорАналитикаУчетаНоменклатуры.Назначение 
	|			<> ЕСТЬNULL(Движения.КорВидЗапасов.УстарелоНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|		И ЕСТЬNULL(Движения.КорВидЗапасов.УстарелоНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|			<> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И НЕ КорАналитика.КлючАналитики ЕСТЬ NULL
	|		ТОГДА КорАналитика.КлючАналитики
	|		ИНАЧЕ Движения.КорАналитикаУчетаНоменклатуры
	|	КОНЕЦ                                  КАК КорАналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И Движения.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|		И Движения.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|		И Движения.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|		И Движения.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПереработчику)
	|		И Движения.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Движения.КорВидЗапасов
	|	КОНЕЦ                                  КАК КорВидЗапасов,
	|	Движения.ОрганизацияОтгрузки           КАК ОрганизацияОтгрузки,
	|	Движения.ДокументРеализации            КАК ДокументРеализации,
	|	Движения.СтатьяРасходов                КАК СтатьяРасходов,
	|	Движения.АналитикаРасходов             КАК АналитикаРасходов,
	|	Движения.Номенклатура                  КАК Номенклатура,
	|	Движения.Характеристика                КАК Характеристика,
	|	Движения.Первичное                     КАК Первичное,
	|
	|	ВЫБОР КОГДА (Аналитика.КлючАналитики ЕСТЬ NULL
	|			И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|			И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|		ИЛИ (КорАналитика.КлючАналитики ЕСТЬ NULL 
	|			И Движения.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			И Движения.КорАналитикаУчетаНоменклатуры.Назначение 
	|				<> ЕСТЬNULL(Движения.КорВидЗапасов.УстарелоНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|			И ЕСТЬNULL(Движения.КорВидЗапасов.УстарелоНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|				<> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И Движения.КорВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК Движения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = Движения.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО СпрНоменклатура.Ссылка = Ключи.Номенклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия = Аналитика.Серия
	|		И Ключи.МестоХранения = Аналитика.МестоХранения
	|		И Ключи.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|		И Движения.ВидЗапасов.УстарелоНазначение = Аналитика.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КорКлючи
	|	ПО КорКлючи.Ссылка = Движения.КорАналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитика
	|	ПО КорКлючи.Номенклатура = КорАналитика.Номенклатура
	|		И КорКлючи.Характеристика = КорАналитика.Характеристика
	|		И КорКлючи.Серия = КорАналитика.Серия
	|		И КорКлючи.МестоХранения = КорАналитика.МестоХранения
	|		И КорКлючи.СтатьяКалькуляции = КорАналитика.СтатьяКалькуляции
	|		И Движения.КорВидЗапасов.УстарелоНазначение = КорАналитика.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Сборка
	|	ПО Движения.Регистратор = Сборка.Ссылка
	|
	//++ НЕ УТ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаМатериаловВПроизводство КАК ПередачаМатериаловВПроизводство
	|	ПО Движения.Регистратор = ПередачаМатериаловВПроизводство.Ссылка
	//-- НЕ УТ
	|
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|	И НЕ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|УПОРЯДОЧИТЬ ПО
	|	КлючиИнициализированы,
	|	НомерСтроки
	|";
	
	ТекстЗапросаВыборки = СтрЗаменить(ТекстЗапросаВыборки, "&ВТДляОбработкиСсылка", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапросаВыборки);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаРегистраторов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРегистраторов Цикл
		
		Регистратор = СтрокаТаблицы.Регистратор;
		
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт")
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.СборкаТоваров")
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПеремещениеТоваров")
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаНазначенияТоваров") Тогда
			
			Продолжить; 
			
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапросаОбработчика);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			ИначеЕсли Результат[0].КлючиИнициализированы = 0 Тогда
				ТекстСообщения = НСтр("ru='есть необновленные ключи. Необходимо перепровести документ вручную.';uk='існують неоновлені ключі. Необхідно перепровести документ вручну.'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), 
				ТекстСообщения
			);
		КонецПопытки;
	КонецЦикла;
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
	Регистраторы.Добавить("Документ.СборкаТоваров");
	Регистраторы.Добавить("Документ.ПриобретениеТоваровУслуг");
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");
	Регистраторы.Добавить("Документ.КорректировкаНазначенияТоваров");
	
	ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы, 
		ПолноеИмяРегистра, 
		Параметры.Очередь
	);
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли
