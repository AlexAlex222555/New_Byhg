#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//++ НЕ УТ
#Область ПрограммныйИнтерфейс

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Сумма", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалюте", "Валюта"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "КорСуммаВВалютеВзаиморасчетов", "КорВалютаВзаиморасчетов"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДС", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРеглБезНДС", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСВВалюте", "Валюта"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "КорСуммаБезНДСВВалютеВзаиморасчетов", "КорВалютаВзаиморасчетов"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДС", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалюте", "Валюта"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "КорСуммаНДСВВалютеВзаиморасчетов", "КорВалютаВзаиморасчетов"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Организация)
	|	И( ЗначениеРазрешено(Партнер)
	|	ИЛИ ЗначениеРазрешено(КорПартнер)
	|	) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c861d43c-d35a-44fc-b840-a9034842e90f");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет измерение ОбъектРасчетов с типом СправочникСсылка.ОбъектыРасчетов';uk='Заповнює вимір ОбъектРасчетов з типом СправочникСсылка.ОбъектыРасчетов'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();


	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";    
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";


	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";


	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";   

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";


	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";


	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьОбъектыРасчетов(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	ИЛИ ДанныеРегистра.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьКорОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|	ИЛИ ДанныеРегистра.ИсточникГФУРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьИсточникГФУРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|	ИЛИ ДанныеРегистра.КорИсточникГФУРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьКорИсточникГФУРасчетов В (&ПустыеЗначенияОбъектовРасчетов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов()); 
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0
		Или Не ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСКлиентамиОР.Регистратор ЕСТЬ NULL
	|			ТОГДА РасчетыСКлиентамиОР.ОбъектРасчетов
	|		КОГДА НЕ РасчетыСПоставщикамиОР.Регистратор ЕСТЬ NULL
	|			ТОГДА РасчетыСПоставщикамиОР.ОбъектРасчетов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	КОНЕЦ КАК ОбъектРасчетов,	
	|	ДанныеРегистра.УдалитьОбъектРасчетов КАК ИсточникОбъектРасчетов,
	|	
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСКлиентамиКорОР.Регистратор ЕСТЬ NULL
	|			ТОГДА РасчетыСКлиентамиКорОР.ОбъектРасчетов
	|		КОГДА НЕ РасчетыСПоставщикамиКорОР.Регистратор ЕСТЬ NULL
	|			ТОГДА РасчетыСПоставщикамиКорОР.ОбъектРасчетов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	КОНЕЦ КАК КорОбъектРасчетов,	
	|	ДанныеРегистра.УдалитьКОРОбъектРасчетов КАК ИсточникКорОбъектРасчетов,
	|	
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСКлиентамиИсточникГФУ.Регистратор ЕСТЬ NULL
	|			ТОГДА РасчетыСКлиентамиИсточникГФУ.ОбъектРасчетов
	|		КОГДА НЕ РасчетыСПоставщикамиИсточникГФУ.Регистратор ЕСТЬ NULL
	|			ТОГДА РасчетыСПоставщикамиИсточникГФУ.ОбъектРасчетов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	КОНЕЦ КАК ИсточникГФУ,
	|	ДанныеРегистра.УдалитьИсточникГФУРасчетов КАК ИсточникГФУРасчетов,
	|	
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСКлиентамиКорИсточникГФУ.Регистратор ЕСТЬ NULL
	|			ТОГДА РасчетыСКлиентамиКорИсточникГФУ.ОбъектРасчетов
	|		КОГДА НЕ РасчетыСПоставщикамиКорИсточникГФУ.Регистратор ЕСТЬ NULL
	|			ТОГДА РасчетыСПоставщикамиКорИсточникГФУ.ОбъектРасчетов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	КОНЕЦ КАК КорИсточникГФУ,
	|	ДанныеРегистра.УдалитьКорИсточникГфуРасчетов КАК ИсточникКорГФУРасчетов
	|ИЗ
	|	РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК ДанныеРегистра
	|		//ОбъектРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентамиОР
	|		ПО (ДанныеРегистра.Регистратор = РасчетыСКлиентамиОР.Регистратор)
	|			И (ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация)
	|			И (ДанныеРегистра.УдалитьОбъектРасчетов = РасчетыСКлиентамиОР.ОбъектРасчетов.Объект)
	|			И (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|				ИЛИ ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|					И (ДанныеРегистра.КорПартнер = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Партнер
	|							И ДанныеРегистра.КорКонтрагент = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Контрагент
	|						ИЛИ ДанныеРегистра.Партнер = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Партнер
	|							И ДанныеРегистра.Контрагент = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Контрагент)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
	|					И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
	|				ИЛИ ДанныеРегистра.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|					И ДанныеРегистра.Партнер = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Партнер
	|					И ДанныеРегистра.Контрагент = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщикамиОР
	|		ПО (ДанныеРегистра.Регистратор = РасчетыСПоставщикамиОР.Регистратор)
	|			И (ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация)
	|			И (ДанныеРегистра.УдалитьОбъектРасчетов = РасчетыСПоставщикамиОР.ОбъектРасчетов.Объект)
	|			И (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|				ИЛИ ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|					И (ДанныеРегистра.КорПартнер = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Партнер
	|							И ДанныеРегистра.КорКонтрагент = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Контрагент
	|						ИЛИ ДанныеРегистра.Партнер = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Партнер
	|							И ДанныеРегистра.Контрагент = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Контрагент)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
	|					И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
	|				ИЛИ ДанныеРегистра.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|					И ДанныеРегистра.Партнер = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Партнер
	|					И ДанныеРегистра.Контрагент = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Контрагент)
	|			
	|		//КорОбъектРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентамиКорОР
	|			ПО ДанныеРегистра.Регистратор = РасчетыСКлиентамиКорОР.Регистратор
	|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСКлиентамиКорОР.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
	|			И ДанныеРегистра.УдалитьКорОбъектРасчетов = РасчетыСКлиентамиКорОР.УдалитьЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщикамиКорОР
	|			ПО ДанныеРегистра.Регистратор = РасчетыСПоставщикамиКорОР.Регистратор
	|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСПоставщикамиКорОР.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
	|			И ДанныеРегистра.УдалитьКорОбъектРасчетов = РасчетыСПоставщикамиКорОР.УдалитьЗаказПоставщику
	|			
	|			
	|		//ИсточникГФУРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентамиИсточникГФУ
	|			ПО ДанныеРегистра.Регистратор = РасчетыСКлиентамиИсточникГФУ.Регистратор
	|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСКлиентамиИсточникГФУ.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
	|			И ДанныеРегистра.УдалитьИсточникГФУРасчетов = РасчетыСКлиентамиИсточникГФУ.УдалитьЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщикамиИсточникГФУ
	|			ПО ДанныеРегистра.Регистратор = РасчетыСПоставщикамиИсточникГФУ.Регистратор
	|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСПоставщикамиИсточникГФУ.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
	|			И ДанныеРегистра.УдалитьИсточникГФУРасчетов = РасчетыСПоставщикамиИсточникГФУ.УдалитьЗаказПоставщику
	|			
	|			
	|		//КорИсточникГФУРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентамиКорИсточникГФУ
	|			ПО ДанныеРегистра.Регистратор = РасчетыСКлиентамиКорИсточникГФУ.Регистратор
	|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСКлиентамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
	|			И ДанныеРегистра.УдалитьКорИсточникГФУРасчетов = РасчетыСКлиентамиКорИсточникГФУ.УдалитьЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщикамиКорИсточникГФУ
	|			ПО ДанныеРегистра.Регистратор = РасчетыСПоставщикамиКорИсточникГФУ.Регистратор
	|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСПоставщикамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
	|			И ДанныеРегистра.УдалитьКорИсточникГФУРасчетов = РасчетыСПоставщикамиКорИсточникГФУ.УдалитьЗаказПоставщику
	|
	|ИТОГИ ПО
	|	Регистратор
	|";
		
	НачатьТранзакцию();
		
	Попытка
			
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ОбновляемыеДанные;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
		Блокировка.Заблокировать();
		
		Запрос.УстановитьПараметр("Регистраторы", ОбновляемыеДанные.ВыгрузитьКолонку("Регистратор"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРегистратор.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
			НаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей - 
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
			НаборЗаписей.Прочитать();
		
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаНабора = НаборЗаписей[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
				
				Если Не ЗначениеЗаполнено(СтрокаНабора.ОбъектРасчетов) Тогда
					Если ВыборкаДетальныеЗаписи.ОбъектРасчетов <> Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
						СтрокаНабора.ОбъектРасчетов = ВыборкаДетальныеЗаписи.ОбъектРасчетов;
					Иначе
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектРасчетов) Тогда
							ВызватьИсключение (
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Не найден объект расчетов для источника данных: %1 по набору записей регистратора: %2';uk='Не знайдено об''єкт розрахунків для джерела даних: %1 за набором записів реєстратора: %2'"),
									ВыборкаДетальныеЗаписи.ИсточникОбъектРасчетов,
									ВыборкаРегистратор.Регистратор
								)
							);
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаНабора.КорОбъектРасчетов)
					И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КорОбъектРасчетов) Тогда
						СтрокаНабора.КорОбъектРасчетов = ВыборкаДетальныеЗаписи.КорОбъектРасчетов;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаНабора.ИсточникГФУРасчетов)
					И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникГФУ) Тогда
						СтрокаНабора.ИсточникГФУРасчетов = ВыборкаДетальныеЗаписи.ИсточникГФУ;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаНабора.КорИсточникГФУРасчетов)
					И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КорИсточникГФУ) Тогда
						СтрокаНабора.КорИсточникГФУРасчетов = ВыборкаДетальныеЗаписи.КорИсточникГФУ;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Шаблон = НСтр("ru='Не удалось записать данные в регистр %1, по причине: %2';uk='Не вдалося записати дані в регістр %1, через: %2'");
		ТекстСообщения = 
			СтрШаблон(Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеРегистра,
			,
			ТекстСообщения
		);
		
	КонецПопытки;
		
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
