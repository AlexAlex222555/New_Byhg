#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//++ НЕ УТ
#Область ПрограммныйИнтерфейс


// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
 	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Стоимость", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаУпрСНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьБезНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаРегл, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a592fa90-c764-4bdf-b244-cb0ccac8c39f");
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СборкаТоваров,"
		+ "РегистрНакопления.ДвиженияНоменклатураНоменклатура,"
		+ "Документ.ПеремещениеТоваров,"
		+ "Справочник.КлючиАналитикиУчетаНоменклатуры,"
	//++ НЕ УТ
		+ "Документ.ПередачаМатериаловВПроизводство,"
	//-- НЕ УТ
		+ "Справочник.ВидыЗапасов";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвиженияНоменклатураНоменклатура";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Корректирует аналитику движений по регистру ""Движения Номенклатура - Номенклатура"" для документов ""Передача товаров"", ""Передача в производство"". 
                                   |Очищает измерение ""Кор. вид запасов"" с типом запасов ""Комиссионный товар"" записей регистра накопления ""Движения номенклатура - номенклатура"" по документам ""Передача материалов в производство"".
                                   |До завершения работы обработчика обновления возможно некорректное отражение комиссинного товара по международному учету.'
                                   |;uk='Коригує аналітику рухів по регістру ""Рухи Номенклатура - Номенклатура"" для документів ""Передача товарів"", ""Передача у виробництво"".
                                   |Очищає вимір ""Кор. вид запасів"" з типом запасів ""Комісійний товар"" записів регістру накопичення ""Рухи номенклатура - номенклатура"" за документами ""Передача матеріалів у виробництво"".
                                   |До завершення роботи обробника оновлення можливе некоректне відображення комісійного товару по міжнародному обліку.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
    

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПеремещениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

 	//++ НЕ УТ    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ
   
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьКлючиАналитикиНоменклатуры(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);	                        
	
    //++ НЕ УТ
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.10.10";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ОбработатьДанныеЗаполнитьПлановыеСуммы";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ЗарегистрироватьДанныеКОбработкеЗаполнитьПлановыеСуммы";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2940e8c6-9df7-4175-85fc-1be0b6922f3d");
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.СебестоимостьТоваров,"
		+ "РегистрНакопления.ДвиженияНоменклатураНоменклатура";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвиженияНоменклатураНоменклатура";
	Обработчик.БлокируемыеОбъекты = "";          
	КомментарийСписокДокументов =  """" + НСтр("ru='Производство без заказа';uk='Виробництво без замовлення'") + """";

	Обработчик.Комментарий = СтрШаблон(НСтр("ru='Формирует отсутствующие движения по плановой стоимости по регистру ""Движения Номенклатура - Номенклатура"" для документов 
                                   |%1.'
                                   |;uk='Формує відсутні рухи за плановою вартістю по регістру ""Рухи Номенклатура - Номенклатура"" для документів
                                   |%1.'"), КомментарийСписокДокументов);
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    //-- НЕ УТ
	
    //++ НЕ УТ
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.11.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ОбработатьДанныеЗаполнитьПлановыеСуммы2";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ЗарегистрироватьДанныеКОбработкеЗаполнитьПлановыеСуммы2";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("08e47e11-4e0f-42d7-9b7f-4033b1634be7");
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.СебестоимостьТоваров,"
		+ "РегистрНакопления.ДвиженияНоменклатураНоменклатура";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвиженияНоменклатураНоменклатура";
	Обработчик.БлокируемыеОбъекты = "";          
	КомментарийСписокДокументов =  """" + НСтр("ru='Движение продукции и материалов';uk='Рух продукції і матеріалів'") + """";

	Обработчик.Комментарий = СтрШаблон(НСтр("ru='Формирует отсутствующие движения по плановой стоимости по регистру ""Движения Номенклатура - Номенклатура"" для документов 
                                   |%1.'
                                   |;uk='Формує відсутні рухи за плановою вартістю по регістру ""Рухи Номенклатура - Номенклатура"" для документів
                                   |%1.'"), КомментарийСписокДокументов);
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ОбработатьДанныеЗаполнитьПлановыеСуммы";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    //-- НЕ УТ
	
КонецПроцедуры

Функция ПолноеИмяРегистра()
	Возврат "РегистрНакопления.ДвиженияНоменклатураНоменклатура";
КонецФункции

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
    
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ПОМЕСТИТЬ ВтДанныеРегистра
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтДанныеРегистра.Ссылка
	|	ИЗ
	|		ВтДанныеРегистра КАК ВтДанныеРегистра
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК СборкаТоваров
	|		ПО ВтДанныеРегистра.Ссылка = СборкаТоваров.Ссылка
	|			И (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) <> СборкаТоваров.ХозяйственнаяОперация)
	|	ГДЕ
	|		НЕ СборкаТоваров.Ссылка ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|	ГДЕ
	| 	((ДанныеРегистра.АналитикаУчетаНоменклатуры.Назначение <> ДанныеРегистра.ВидЗапасов.УстарелоНазначение
	|		 И ДанныеРегистра.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) 
	|		 И ДанныеРегистра.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|		ИЛИ
	|		 (ДанныеРегистра.КорАналитикаУчетаНоменклатуры.Назначение <> ДанныеРегистра.КорВидЗапасов.УстарелоНазначение
	|			И ДанныеРегистра.КорВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И ДанныеРегистра.КорВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)))
	| 	И &ИспользуютсяВидыЗапасов
	|
	//++ НЕ УТ
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Движения.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаМатериаловВПроизводство КАК ПередачаМатериаловВПроизводство
	|			ПО ПередачаМатериаловВПроизводство.Ссылка = Движения.Регистратор
	|	ГДЕ
	|		Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство)
	//-- НЕ УТ
	|	
	|) КАК Движения
	|");
	
    Запрос.УстановитьПараметр("ИспользуютсяВидыЗапасов", Константы.УчитыватьСебестоимостьТоваровПоНазначениям.Получить());
	
	СписокРегистраторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоДвижения = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокРегистраторов, ДополнительныеПараметрыОтметки);
    
	Запрос = Новый Запрос;
	МассивТекстовЗапросов = Новый Массив;
	
	//++ НЕ УТ
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПередачаМатериалов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПередачаМатериаловВПроизводство КАК ПередачаМатериалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|		ПО (ДанныеРегистра.Регистратор = ПередачаМатериалов.Ссылка)
	|ГДЕ
	|	&ИспользуютсяВидыЗапасов
	|	И ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И ДанныеРегистра.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	//-- НЕ УТ
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияНоменклатураНоменклатура.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДвиженияНоменклатураНоменклатура
	|ГДЕ
	|	&ИспользуютсяВидыЗапасов
	|	И (ДвиженияНоменклатураНоменклатура.КорВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ИЛИ ДвиженияНоменклатураНоменклатура.КорВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|	И ДвиженияНоменклатураНоменклатура.Регистратор ССЫЛКА Документ.ПеремещениеТоваров";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(МассивТекстовЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	Запрос.УстановитьПараметр("ИспользуютсяВидыЗапасов", Константы.УчитыватьСебестоимостьТоваровПоНазначениям.Получить());
	
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоДвижения = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), ДополнительныеПараметрыОтметки);
    
КонецПроцедуры

// Обработчик обновления 2.5:
// - в движениях для документа "Сборка товаров" заполняется новая хоз. операция;
// - заполняется назначение в аналитике учета номенклатуры.    
// - в движениях документа ДвиженияНоменклатураНоменклатура заполняется комиссионный вид запасов.
// - очищаются виды запасов для товаров выкупленных у комитента.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияНоменклатураНоменклатура";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура;
	
	//++ НЕ УТ
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПередачаМатериаловВПроизводство");
	//-- НЕ УТ
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	// обработка остальных документов
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
		Параметры.Очередь,
		Неопределено,
		ПолноеИмяРегистра,
		МенеджерВременныхТаблиц);

	//++ НЕ УТ
	ДополнительныеПараметрыПроверкиБлокировки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыПроверкиБлокировки.ИмяВременнойТаблицы = "ВтЗаблокированныеСсылки";
	ЗаблокированныеСсылки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
		Параметры.Очередь,
		Регистраторы,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметрыПроверкиБлокировки);
	//-- НЕ УТ
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
		
	ТекстЗапросаВыборки = 
	"ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	//++ НЕ УТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокированныеСсылки
	|		ПО СсылкиДляОбработки.Регистратор = ВтЗаблокированныеСсылки.Ссылка
	|ГДЕ
	|	ВтЗаблокированныеСсылки.Ссылка ЕСТЬ NULL
	//-- НЕ УТ
	|";
	
	ТекстЗапросаОбработчика = 
	"ВЫБРАТЬ
	|	Движения.Регистратор           КАК Регистратор,
	|	Движения.Период                КАК Период,
	|	ВЫБОР КОГДА НЕ Сборка.ХозяйственнаяОперация ЕСТЬ NULL ТОГДА
	|		Сборка.ХозяйственнаяОперация
//++ НЕ УТ
	|	КОГДА НЕ ПередачаМатериаловВПроизводство.ХозяйственнаяОперация ЕСТЬ NULL ТОГДА
	|		ПередачаМатериаловВПроизводство.ХозяйственнаяОперация
//-- НЕ УТ
	|	ИНАЧЕ
	|		Движения.ХозяйственнаяОперация
	|	КОНЕЦ                                  КАК ХозяйственнаяОперация,
	|	Движения.Организация                   КАК Организация,
	|	Движения.Подразделение                 КАК Подразделение,
	|	ВЫБОР КОГДА Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	| 		И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|		И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) 
	|		И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И &ИспользуютсяВидыЗапасов И НЕ Аналитика.КлючАналитики ЕСТЬ NULL
	|		ТОГДА Аналитика.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                                  КАК АналитикаУчетаНоменклатуры,
	|	Движения.Склад                         КАК Склад,
	|	Движения.ТипЗапасов                    КАК ТипЗапасов,
	|	Движения.ВидЗапасов                    КАК ВидЗапасов,
	|	ВЫБОР КОГДА Движения.КорВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И &ИспользуютсяВидыЗапасов И НЕ КорАналитика.КлючАналитики ЕСТЬ NULL
	|		И Движения.КорАналитикаУчетаНоменклатуры.Назначение <> Движения.КорВидЗапасов.УстарелоНазначение
	|		И Движения.КорВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Движения.КорВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ТОГДА КорАналитика.КлючАналитики
	|		ИНАЧЕ Движения.КорАналитикаУчетаНоменклатуры
	|	КОНЕЦ                                  КАК КорАналитикаУчетаНоменклатуры,
	|	Движения.КорСклад                      КАК КорСклад,
	|	Движения.КорТипЗапасов                 КАК КорТипЗапасов,
	|	ВЫБОР
	|		КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|				И Движения.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|				И &ИспользуютсяВидыЗапасов
	|				И (ЛОЖЬ
//++ НЕ УТ
	|				   ИЛИ ТИПЗНАЧЕНИЯ(Движения.Регистратор) В (ЗНАЧЕНИЕ(Документ.ПередачаМатериаловВПроизводство))
//-- НЕ УТ	
	|               )
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Движения.КорВидЗапасов
	|	КОНЕЦ КАК КорВидЗапасов,
	|	Движения.Количество                    КАК Количество,
	|	Движения.КорКоличество                 КАК КорКоличество,
	|	Движения.Стоимость                     КАК Стоимость,
	|	Движения.СтоимостьБезНДС               КАК СтоимостьБезНДС,
	|	Движения.СтоимостьРегл                 КАК СтоимостьРегл,
	|	Движения.ИсточникГФУНоменклатуры       КАК ИсточникГФУНоменклатуры,
	|	Движения.КорИсточникГФУНоменклатуры    КАК КорИсточникГФУНоменклатуры,
	|	Движения.ДокументДвижения              КАК ДокументДвижения,
	|	Движения.КорОрганизация                КАК КорОрганизация,
	|	Движения.РасчетСебестоимости           КАК РасчетСебестоимости,
	|
	|	ВЫБОР КОГДА (Аналитика.КлючАналитики ЕСТЬ NULL
	| 			И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|		 	И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) 
	|			И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			И &ИспользуютсяВидыЗапасов)
	|		ИЛИ (КорАналитика.КлючАналитики ЕСТЬ NULL
	|			И Движения.КорАналитикаУчетаНоменклатуры.Назначение <> Движения.КорВидЗапасов.УстарелоНазначение
	|			И Движения.КорВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И Движения.КорВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК Движения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = Движения.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия = Аналитика.Серия
    |		И Ключи.МестоХранения = Аналитика.МестоХранения
	|		И Ключи.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|		И ЕСТЬNULL(Движения.ВидЗапасов.УстарелоНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) = Аналитика.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КорКлючи
	|	ПО КорКлючи.Ссылка = Движения.КорАналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитика
	|	ПО КорКлючи.Номенклатура = КорАналитика.Номенклатура
	|		И КорКлючи.Характеристика = КорАналитика.Характеристика
	|		И КорКлючи.Серия = КорАналитика.Серия
    |		И КорКлючи.МестоХранения = КорАналитика.МестоХранения
	|		И КорКлючи.СтатьяКалькуляции = КорАналитика.СтатьяКалькуляции
	|		И ЕСТЬNULL(Движения.КорВидЗапасов.УстарелоНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) = КорАналитика.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Сборка
	|	ПО Сборка.Ссылка = Движения.Регистратор
	|
	|
//++ НЕ УТ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаМатериаловВПроизводство КАК ПередачаМатериаловВПроизводство
	|	ПО Движения.Регистратор = ПередачаМатериаловВПроизводство.Ссылка
//-- НЕ УТ
	|
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючиИнициализированы,
	|	НомерСтроки
	|";
	
	ТекстЗапросаВыборки = СтрЗаменить(ТекстЗапросаВыборки, "&ВТДляОбработкиСсылка", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапросаВыборки);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаРегистраторов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРегистраторов Цикл
		
		Регистратор = СтрокаТаблицы.Регистратор;    
        
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапросаОбработчика);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			Запрос.УстановитьПараметр("ИспользуютсяВидыЗапасов", Константы.УчитыватьСебестоимостьТоваровПоНазначениям.Получить());
			
			Набор = РегистрыНакопления.ДвиженияНоменклатураНоменклатура.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			ИначеЕсли Результат[0].КлючиИнициализированы = 0 Тогда
				ТекстСообщения = НСтр("ru='есть необновленные ключи. Необходимо перепровести документ вручную.';uk='існують неоновлені ключі. Необхідно перепровести документ вручну.'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Регистратор);
		КонецПопытки;
	КонецЦикла;

	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");
	
	ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
		ПолноеИмяРегистра, 
        Параметры.Очередь
    );

	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

//++ НЕ УТ
Процедура ЗарегистрироватьДанныеКОбработкеЗаполнитьПлановыеСуммы(Параметры) Экспорт
    
	Запрос = Новый Запрос(" 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтДанныеРегистраСебестоимость
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК ДанныеРегистра
	|ГДЕ      
	|	НЕ ДанныеРегистра.РасчетСебестоимости
	|	И ДанныеРегистра.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|	)  
	|   И (
	|		ДанныеРегистра.Стоимость <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьБезНДС <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьЗабалансовая <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьРегл <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьЗабалансоваяРегл <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьУпр <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьРеглБезНДС <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьУпрБезНДС <> 0 
	|	) 
	|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (
	|		ТИП(Документ.ПроизводствоБезЗаказа)
	|   )
	|;         
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтДанныеРегистраДвиженияНоменклатураНоменклатура
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|ГДЕ      
	|	НЕ ДанныеРегистра.РасчетСебестоимости
	|	И ДанныеРегистра.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|	)  
	|   И (
	|		ДанныеРегистра.Стоимость <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьБезНДС <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьЗабалансовая <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьРегл <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьЗабалансоваяРегл <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьУпр <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьРеглБезНДС <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьУпрБезНДС <> 0 
	|	)
	|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (
	|		ТИП(Документ.ПроизводствоБезЗаказа)
	|   )
	|; 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистраСебестоимость.Регистратор КАК Регистратор
	|ИЗ
	|	ВтДанныеРегистраСебестоимость КАК ДанныеРегистраСебестоимость
	|   ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеРегистраДвиженияНоменклатураНоменклатура КАК ДанныеРегистраДвиженияНоменклатураНоменклатура 
	|   	ПО ДанныеРегистраСебестоимость.Регистратор = ДанныеРегистраДвиженияНоменклатураНоменклатура.Регистратор
	|   		И ДанныеРегистраСебестоимость.АналитикаУчетаНоменклатуры = ДанныеРегистраДвиженияНоменклатураНоменклатура.АналитикаУчетаНоменклатуры
	|   		И ДанныеРегистраСебестоимость.КорАналитикаУчетаНоменклатуры = ДанныеРегистраДвиженияНоменклатураНоменклатура.КорАналитикаУчетаНоменклатуры
	|   		И ДанныеРегистраСебестоимость.ХозяйственнаяОперация = ДанныеРегистраДвиженияНоменклатураНоменклатура.ХозяйственнаяОперация
	|ГДЕ      
	|	ДанныеРегистраДвиженияНоменклатураНоменклатура.Регистратор ЕСТЬ NULL
	|");
	
	СписокРегистраторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Запрос = Новый Запрос("  
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Регистратор КАК Регистратор,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.СтатьяКалькуляции
	|ИЗ
	|	(
	// аналитика подразделения при выпуске продукции на склад или списании на расходы
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка								КАК Регистратор,
	|		ТаблицаТовары.Ссылка.Подразделение					КАК Склад,
	|		ТаблицаТовары.Номенклатура							КАК Номенклатура,
	|		ТаблицаТовары.Характеристика						КАК Характеристика,
	|		ТаблицаТовары.Назначение							КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ												КАК Серия,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)	КАК СтатьяКалькуляции
	|	ИЗ
	|		Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК ТаблицаТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|		ПО СпрСклады.Ссылка = ТаблицаТовары.Получатель
	|		
	|	ГДЕ
	|		СпрСклады.ЦеховаяКладовая И СпрСклады.Подразделение <> ТаблицаТовары.Ссылка.Подразделение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Аналитика подразделения при выпуске продукции на склад или списании на расходы без назначения.
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка								КАК Регистратор,
	|		ТаблицаТовары.Ссылка.Подразделение					КАК Склад,
	|		ТаблицаТовары.Номенклатура							КАК Номенклатура,
	|		ТаблицаТовары.Характеристика						КАК Характеристика,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)		КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ												КАК Серия,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)	КАК СтатьяКалькуляции
	|	ИЗ
	|		Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК ТаблицаТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|		ПО СпрСклады.Ссылка = ТаблицаТовары.Получатель
	|		
	|	ГДЕ
	|		СпрСклады.ЦеховаяКладовая И СпрСклады.Подразделение <> ТаблицаТовары.Ссылка.Подразделение
	|                            
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Аналитика подразделения при выпуске возвратных отходов на склад или списании на расходы.
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка								КАК Регистратор,
	|		ТаблицаТовары.Подразделение							КАК Склад,
	|		ТаблицаТовары.Номенклатура							КАК Номенклатура,
	|		ТаблицаТовары.Характеристика						КАК Характеристика,
	|		ТаблицаТовары.Назначение							КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ												КАК Серия,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)	КАК СтатьяКалькуляции
	|	ИЗ
	|		Документ.ПроизводствоБезЗаказа.ПобочныеИзделия КАК ТаблицаТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|		ПО СпрСклады.Ссылка = ТаблицаТовары.Получатель
	|		
	|	ГДЕ
	|		СпрСклады.ЦеховаяКладовая И СпрСклады.Подразделение <> ТаблицаТовары.Подразделение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Аналитика подразделения при выпуске возвратных отходов на склад или списании на расходы без назначения.
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка								КАК Регистратор,
	|		ТаблицаТовары.Подразделение							КАК Склад,
	|		ТаблицаТовары.Номенклатура							КАК Номенклатура,
	|		ТаблицаТовары.Характеристика						КАК Характеристика,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)		КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ												КАК Серия,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)	КАК СтатьяКалькуляции
	|	ИЗ
	|		Документ.ПроизводствоБезЗаказа.ПобочныеИзделия КАК ТаблицаТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|		ПО СпрСклады.Ссылка = ТаблицаТовары.Получатель
	|		
	|	ГДЕ
	|		СпрСклады.ЦеховаяКладовая И СпрСклады.Подразделение <> ТаблицаТовары.Подразделение
	|	) КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаТовары.Номенклатура = Аналитика.Номенклатура
	|			И ТаблицаТовары.Характеристика = Аналитика.Характеристика
	|			И ТаблицаТовары.Серия = Аналитика.Серия
	|			И ТаблицаТовары.Склад = Аналитика.МестоХранения
	|			И ТаблицаТовары.Назначение = Аналитика.Назначение
	|			И ТаблицаТовары.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Регистратор,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Назначение,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.СтатьяКалькуляции
	|");

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
		СписокРегистраторов.Добавить(Выборка.Регистратор);
	КонецЦикла;
	
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоДвижения = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		СписокРегистраторов, 
		ДополнительныеПараметрыОтметки
	);
    
КонецПроцедуры

Процедура ОбработатьДанныеЗаполнитьПлановыеСуммы(Параметры) Экспорт

 	ПолноеИмяРегистра = ПолноеИмяРегистра();
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь)[1];
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
        Параметры.Очередь, 
        Неопределено, 
        ПолноеИмяРегистра
    );

	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Набор = РегистрыНакопления.ДвиженияНоменклатураНоменклатура.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);   
			Набор.Прочитать(); 
			СуществующиеЗаписи = Набор.Выгрузить();  
			Результат = Набор.ВыгрузитьКолонки();
			ПараметрыОтбора = Новый Структура("РасчетСебестоимости", Истина);
			СтрокиРасчетСебестоимости = СуществующиеЗаписи.НайтиСтроки(ПараметрыОтбора); 
			ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, ИмяРегистра);
			РезультатПроведения = ТаблицыДляДвижений["Таблица" + ИмяРегистра];  
			Для Каждого СтрокаРасчетСебестоимости Из СтрокиРасчетСебестоимости Цикл
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетСебестоимости);
			КонецЦикла;  
			Для Каждого СтрокаРезультатПроведения Из РезультатПроведения Цикл
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатПроведения); 
				НоваяСтрока.Регистратор = Регистратор; 
				НоваяСтрока.Активность = Истина;
			КонецЦикла;        
			ТекстПоляСортировки = "
				|Регистратор, 
				|Период, 
				|ХозяйственнаяОперация, 
				|Организация, 
				|Подразделение, 
				|НаправлениеДеятельности, 
				|АналитикаУчетаНоменклатуры, 
				|Склад, 
				|ТипЗапасов, 
				|ВидЗапасов, 
				|КорНаправлениеДеятельности, 
				|КорАналитикаУчетаНоменклатуры, 
				|КорСклад, 
				|КорТипЗапасов, 
				|КорВидЗапасов, 
				|РасчетСебестоимости
				|";
			Результат.Сортировать(ТекстПоляСортировки, Новый СравнениеЗначений);
		    Набор.Очистить();
			Набор.Загрузить(Результат); 
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();   
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(
				ИнформацияОбОшибке(), 
				Регистратор
			);
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяРегистра
    );
	
КонецПроцедуры    

Процедура ЗарегистрироватьДанныеКОбработкеЗаполнитьПлановыеСуммы2(Параметры) Экспорт
    
	Запрос = Новый Запрос(" 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтДанныеРегистраСебестоимость
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК ДанныеРегистра
	|ГДЕ      
	|	НЕ ДанныеРегистра.РасчетСебестоимости
	|	И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|   И (
	|		ДанныеРегистра.Стоимость <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьБезНДС <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьЗабалансовая <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьРегл <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьЗабалансоваяРегл <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьУпр <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьРеглБезНДС <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьУпрБезНДС <> 0 
	|	) 
	|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (
	|		ТИП(Документ.ДвижениеПродукцииИМатериалов)
	|   )
	|;         
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтДанныеРегистраДвиженияНоменклатураНоменклатура
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|ГДЕ      
	|	НЕ ДанныеРегистра.РасчетСебестоимости
	|   И (
	|		ДанныеРегистра.Стоимость <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьБезНДС <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьЗабалансовая <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьРегл <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьЗабалансоваяРегл <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьУпр <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьРеглБезНДС <> 0 
	|		ИЛИ ДанныеРегистра.СтоимостьУпрБезНДС <> 0 
	|	)
	|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (
	|		ТИП(Документ.ДвижениеПродукцииИМатериалов)
	|   )
	|; 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистраСебестоимость.Регистратор КАК Регистратор
	|ИЗ
	|	ВтДанныеРегистраСебестоимость КАК ДанныеРегистраСебестоимость
	|   ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеРегистраДвиженияНоменклатураНоменклатура КАК ДанныеРегистраДвиженияНоменклатураНоменклатура 
	|   	ПО ДанныеРегистраСебестоимость.Регистратор = ДанныеРегистраДвиженияНоменклатураНоменклатура.Регистратор
	|   		И ДанныеРегистраСебестоимость.АналитикаУчетаНоменклатуры = ДанныеРегистраДвиженияНоменклатураНоменклатура.АналитикаУчетаНоменклатуры
	|   		И ДанныеРегистраСебестоимость.КорАналитикаУчетаНоменклатуры = ДанныеРегистраДвиженияНоменклатураНоменклатура.КорАналитикаУчетаНоменклатуры
	|   		И ДанныеРегистраСебестоимость.ХозяйственнаяОперация = ДанныеРегистраДвиженияНоменклатураНоменклатура.ХозяйственнаяОперация
	|ГДЕ      
	|	ДанныеРегистраДвиженияНоменклатураНоменклатура.Регистратор ЕСТЬ NULL
	|");
	
	СписокРегистраторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоДвижения = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		СписокРегистраторов, 
		ДополнительныеПараметрыОтметки
	);
    
КонецПроцедуры            

Процедура ОбработатьДанныеЗаполнитьПлановыеСуммы2(Параметры) Экспорт

 	ПолноеИмяРегистра = ПолноеИмяРегистра();
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь)[1];
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
        Параметры.Очередь, 
        Неопределено, 
        ПолноеИмяРегистра
    );

	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Набор = РегистрыНакопления.ДвиженияНоменклатураНоменклатура.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);   
			Набор.Прочитать(); 
			СуществующиеЗаписи = Набор.Выгрузить();  
			Результат = Набор.ВыгрузитьКолонки();
			ПараметрыОтбора = Новый Структура("РасчетСебестоимости", Истина);
			СтрокиРасчетСебестоимости = СуществующиеЗаписи.НайтиСтроки(ПараметрыОтбора); 
			ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, ИмяРегистра);
			РезультатПроведения = ТаблицыДляДвижений["Таблица" + ИмяРегистра];  
			Для Каждого СтрокаРасчетСебестоимости Из СтрокиРасчетСебестоимости Цикл
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетСебестоимости);
			КонецЦикла;  
			Для Каждого СтрокаРезультатПроведения Из РезультатПроведения Цикл
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатПроведения); 
				НоваяСтрока.Регистратор = Регистратор; 
				НоваяСтрока.Активность = Истина;
			КонецЦикла;        
			ТекстПоляСортировки = "
				|Регистратор, 
				|Период, 
				|ХозяйственнаяОперация, 
				|Организация, 
				|Подразделение, 
				|НаправлениеДеятельности, 
				|АналитикаУчетаНоменклатуры, 
				|Склад, 
				|ТипЗапасов, 
				|ВидЗапасов, 
				|КорНаправлениеДеятельности, 
				|КорАналитикаУчетаНоменклатуры, 
				|КорСклад, 
				|КорТипЗапасов, 
				|КорВидЗапасов, 
				|РасчетСебестоимости
				|";
			Результат.Сортировать(ТекстПоляСортировки, Новый СравнениеЗначений);
		    Набор.Очистить();
			Набор.Загрузить(Результат); 
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();   
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(
				ИнформацияОбОшибке(), 
				Регистратор
			);
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяРегистра
    );
	
КонецПроцедуры    
//-- НЕ УТ

#КонецОбласти

#КонецЕсли
