#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Сценарий)
	|	И ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(СтатьяБюджетов)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура формирования движений по регистру "Обороты бюджетов".
//
Процедура ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаОборотыБюджетов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОборотыБюджетов;
	
	Если Отказ ИЛИ ТаблицаОборотыБюджетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЛимитыРасходаДенежныхСредств = Движения.ОборотыБюджетов;
	ДвиженияЛимитыРасходаДенежныхСредств.Записывать = Истина;
	ДвиженияЛимитыРасходаДенежныхСредств.Загрузить(ТаблицаОборотыБюджетов);
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ОборотыБюджетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.4.400"; 
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e79d471d-e2f8-424a-93ff-1bb7e06c99c6");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ОборотыБюджетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "БюджетированиеСервер.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновляет движения регистра накопления ""Обороты бюджетов"" по замещенным планам, а также заменяет пустые значения аналитики на единое значение пустой аналитики Неопределено.';uk='Оновлює рухи регістру накопичення ""Обороти бюджетів"" за заміщеними планами, а також замінює порожні значення аналітики на єдине значення порожньої аналітики Неопределено.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ПланЗакупок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПланПродаж.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПланПродажПоКатегориям.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПланПроизводства.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПланСборкиРазборки.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПланыПроизводства.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланЗакупок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";


	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПродажПоКатегориям.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланСборкиРазборки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Процедура регистрации данных для обработчика обновления ОбработатьДанныеДляПереходаНаВерсию.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ОборотыБюджетов";
	
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.ПланСборкиРазборки.ТекстЗапросаДанныеКОбработке(Истина)
	+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ Документы.ПланЗакупок.ТекстЗапросаДанныеКОбработке(Истина)
	+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ Документы.ПланПродаж.ТекстЗапросаДанныеКОбработке(Истина)
	+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ Документы.ПланПродажПоКатегориям.ТекстЗапросаДанныеКОбработке(Истина)
	;
	
	ЗапросПакет = Запрос.ВыполнитьПакет();
	Регистраторы = ЗапросПакет[4].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Регистраторы, ЗапросПакет[8].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Регистраторы, ЗапросПакет[12].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Регистраторы, ЗапросПакет[16].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
	ПустыеЗначенияДляОбработки = БюджетированиеВызовСервера.ЗаменяемыеПустыеЗначенияАналитики();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	Таблица.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ОборотыБюджетов КАК Таблица
		|ГДЕ
		|	(Таблица.Аналитика1 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика2 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика3 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика4 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика5 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика6 В (&ПустыеЗначенияДляОбработки))";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияДляОбработки", ПустыеЗначенияДляОбработки);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ОборотыБюджетов;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ПустыеЗначенияДляОбработки = БюджетированиеВызовСервера.ЗаменяемыеПустыеЗначенияАналитики();
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ЗначениеЗамены = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
	
	РеквизитыПоиска = Новый Массив;
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		РеквизитыПоиска.Добавить("Аналитика" + Сч);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить(Метаданные.Документы.КорректировкаРегистров);
	Регистраторы.Добавить(Метаданные.Документы.ПланПроизводства);
	Регистраторы.Добавить(Метаданные.Документы.ЭкземплярБюджета);
	
	Для каждого МетаданныеДокумента Из Регистраторы Цикл
		
		ПолноеИмяДокумента = МетаданныеДокумента.ПолноеИмя();
		
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
			Параметры.Очередь, 
			ПолноеИмяДокумента, 
			ПолноеИмяРегистра
		);
		
		Пока Выборка.Следующий() Цикл
			
			Регистратор = Выборка.Регистратор;
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				Блокировка.Заблокировать();
				
				Набор = РегистрыНакопления.ОборотыБюджетов.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(Регистратор);
				Набор.Прочитать();
				
				Если Набор.Количество() = 0 Тогда
					
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
					
				Иначе
					
					ОбъектИзменен = Ложь;
					
					Для каждого Запись Из Набор Цикл
						
						БюджетированиеВызовСервера.ВыполнитьЗаменыЗначенийВОбъекте(
							Запись,
						    РеквизитыПоиска,
						    ПустыеЗначенияДляОбработки,
						    ЗначениеЗамены,
						    ОбъектИзменен
						);
						
					КонецЦикла;
					
					Если ОбъектИзменен Тогда
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
					Иначе
						ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
					КонецЕсли;
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Регистратор.Метаданные(),
					ТекстСообщения
				);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПланПродаж");
	Регистраторы.Добавить("Документ.ПланПродажПоКатегориям");
	Регистраторы.Добавить("Документ.ПланЗакупок");
	Регистраторы.Добавить("Документ.ПланСборкиРазборки");
	Регистраторы.Добавить("Документ.ПланОстатков");

	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы,
		"РегистрНакопления.ОборотыБюджетов", 
		Параметры.Очередь
	);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена
		И Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
