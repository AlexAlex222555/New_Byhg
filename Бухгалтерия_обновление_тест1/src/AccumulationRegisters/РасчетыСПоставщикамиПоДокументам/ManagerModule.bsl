#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТ
#Область ОписаниеИсточника

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ПредоплатаУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ПредоплатаРегл", "ВалютаРегл"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Предоплата", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f14fbf41-d149-4dd9-8a07-200e55d1112e");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновляет движения документов по регистру ""Расчеты с поставщиками по документам"". 
                                   |Пока обработчик не выполнен, расчеты находятся в некорректном состоянии.'
                                   |;uk='Оновлює рухи документів по регістру ""Розрахунки з постачальниками за документами"".
                                   |Поки обробник не виконаний, розрахунки перебувають у некоректному стані.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровПоставщику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РасчетКурсовыхРазниц.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеДоходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютахУчета.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьОбъектыРасчетов(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);

КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь)[1];
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	#Область ТекстЗапроса
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ОтраженныеДокументы
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщиками
	|ГДЕ
	|	(РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ИЛИ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка КАК Регистратор,
	|	СУММА(ВозвратТоваровПоставщикуРасшифровкаПлатежа.Сумма) КАК СуммаКРаспределению
	|ПОМЕСТИТЬ ВозвратыТоваровПоставщику
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК ВозвратТоваровПоставщикуРасшифровкаПлатежа
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтраженныеДокументы КАК РасчетыСПоставщиками
	|		ПО РасчетыСПоставщиками.Регистратор = ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка
	|	
	|ГДЕ
	|	НЕ ВозвратТоваровПоставщикуРасшифровкаПлатежа.УдалитьЗаказ В (Неопределено, Значение(Документ.ВозвратТоваровПоставщику.ПустаяСсылка))
	|	И ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка.Проведен
	|	И НЕ РасчетыСПоставщиками.Регистратор ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Сумма) КАК СуммаКРаспределению,
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВозвратыТоваровМеждуОрганизациями
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтраженныеДокументы КАК РасчетыСПоставщиками
	|		ПО РасчетыСПоставщиками.Регистратор = ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка
	|ГДЕ
	|	НЕ ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.УдалитьЗаказ = ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка
	|	И ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РасчетыСПоставщиками.Предоплата) КАК СуммаВзаиморасчетовРаспределенная,
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ РаспределенныеРасчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И (РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ИЛИ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями)
	|	И РасчетыСПоставщиками.УдалитьЗаказПоставщику = РасчетыСПоставщиками.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОбработке.Регистратор КАК Регистратор
	|ИЗ (ВЫБРАТЬ
	|		ВозвратыТоваровПоставщику.Регистратор КАК Регистратор
	|	ИЗ
	|		ВозвратыТоваровПоставщику КАК ВозвратыТоваровПоставщику
	|			ЛЕВОЕ СОЕДИНЕНИЕ РаспределенныеРасчеты КАК РаспределенныеРасчеты
	|			ПО (ВозвратыТоваровПоставщику.Регистратор = РаспределенныеРасчеты.Регистратор)
	|				И (ВозвратыТоваровПоставщику.СуммаКРаспределению = РаспределенныеРасчеты.СуммаВзаиморасчетовРаспределенная)
	|	ГДЕ
	|		РаспределенныеРасчеты.Регистратор ЕСТЬ NULL
	|		И ВозвратыТоваровПоставщику.СуммаКРаспределению > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВозвратыТоваровМеждуОрганизациями.Регистратор КАК Регистратор
	|	ИЗ
	|		ВозвратыТоваровМеждуОрганизациями КАК ВозвратыТоваровМеждуОрганизациями
	|			ЛЕВОЕ СОЕДИНЕНИЕ РаспределенныеРасчеты КАК РаспределенныеРасчеты
	|			ПО (ВозвратыТоваровМеждуОрганизациями.Регистратор = РаспределенныеРасчеты.Регистратор)
	|				И (ВозвратыТоваровМеждуОрганизациями.СуммаКРаспределению = РаспределенныеРасчеты.СуммаВзаиморасчетовРаспределенная)
	|	ГДЕ
	|		РаспределенныеРасчеты.Регистратор ЕСТЬ NULL
	|		И ВозвратыТоваровМеждуОрганизациями.СуммаКРаспределению > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Расчеты.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	|		И Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками)
	|) КАК ДокументыКОбработке
	|";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Регистраторы, 
		ДополнительныеПараметры
	);
	
	РегистрыНакопления.ПрочиеАктивыПассивы.ЗарегистироватьКОбновлениюУправленческогоБаланса(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщиками
	|ГДЕ
	|	Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|	И ВЫРАЗИТЬ(Регистратор КАК Документ.ПриобретениеТоваровУслуг).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ЗаказПоставщику = Неопределено
	|
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		ПолноеИмяРегистра
	);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ЗаказПоставщику = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра
	);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0
		Или Не ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь) Тогда
		
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат; 
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = " 
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТОбъектыДляОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщиками
	|ГДЕ 
	|	РасчетыСПоставщиками.Регистратор В (&Регистраторы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка КАК Регистратор,
	|	СУММА(ВозвратТоваровПоставщикуРасшифровкаПлатежа.Сумма) КАК СуммаКРаспределению
	|ПОМЕСТИТЬ ВозвратыТоваровПоставщику
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК ВозвратТоваровПоставщикуРасшифровкаПлатежа
	|ГДЕ
	|	НЕ ВозвратТоваровПоставщикуРасшифровкаПлатежа.УдалитьЗаказ В (Неопределено, Значение(Документ.ВозвратТоваровПоставщику.ПустаяСсылка))
	|	И ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Сумма) КАК СуммаКРаспределению,
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВозвратыТоваровМеждуОрганизациями
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа
	|ГДЕ
	|	НЕ ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.УдалитьЗаказ = ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка
	|	И ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РасчетыСПоставщиками.Предоплата) КАК СуммаВзаиморасчетовРаспределенная,
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ РаспределенныеРасчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И (РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ИЛИ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями)
	|	И РасчетыСПоставщиками.УдалитьЗаказПоставщику = РасчетыСПоставщиками.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОбработке.Регистратор КАК Регистратор,
	|	ДокументыКОбработке.СуммаКРаспределению КАК СуммаКРаспределению
	|ПОМЕСТИТЬ ВТТребуютДопроведения
	|ИЗ (ВЫБРАТЬ
	|		ВозвратыТоваровПоставщику.Регистратор КАК Регистратор,
	|		ВозвратыТоваровПоставщику.СуммаКРаспределению КАК СуммаКРаспределению
	|	ИЗ
	|		ВозвратыТоваровПоставщику КАК ВозвратыТоваровПоставщику
	|			ЛЕВОЕ СОЕДИНЕНИЕ РаспределенныеРасчеты КАК РаспределенныеРасчеты
	|			ПО (ВозвратыТоваровПоставщику.Регистратор = РаспределенныеРасчеты.Регистратор)
	|				И (ВозвратыТоваровПоставщику.СуммаКРаспределению = РаспределенныеРасчеты.СуммаВзаиморасчетовРаспределенная)
	|	ГДЕ
	|		РаспределенныеРасчеты.Регистратор ЕСТЬ NULL
	|		И ВозвратыТоваровПоставщику.СуммаКРаспределению > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВозвратыТоваровМеждуОрганизациями.Регистратор КАК Регистратор,
	|		ВозвратыТоваровМеждуОрганизациями.СуммаКРаспределению КАК СуммаКРаспределению
	|	ИЗ
	|		ВозвратыТоваровМеждуОрганизациями КАК ВозвратыТоваровМеждуОрганизациями
	|			ЛЕВОЕ СОЕДИНЕНИЕ РаспределенныеРасчеты КАК РаспределенныеРасчеты
	|			ПО (ВозвратыТоваровМеждуОрганизациями.Регистратор = РаспределенныеРасчеты.Регистратор)
	|				И (ВозвратыТоваровМеждуОрганизациями.СуммаКРаспределению = РаспределенныеРасчеты.СуммаВзаиморасчетовРаспределенная)
	|	ГДЕ
	|		РаспределенныеРасчеты.Регистратор ЕСТЬ NULL
	|		И ВозвратыТоваровМеждуОрганизациями.СуммаКРаспределению > 0
	|	) КАК ДокументыКОбработке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыДляОбработки.Регистратор                КАК Регистратор,
	|	ВЫБОР 
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).ВерсияДанных
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).ВерсияДанных
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ КАК РегистраторВерсияДанных,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).Дата
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).Дата
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) 
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).Валюта
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).Организация
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).Контрагент
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|			ТОГДА 
	|				ВЫБОР 
	|					КОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).РасчетыЧерезОтдельногоКонтрагента
	|						ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).Контрагент
	|					ИНАЧЕ ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).ОрганизацияПолучатель
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).Партнер
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями 
	|			ТОГДА ВЫБОР 
	|					КОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).РасчетыЧерезОтдельногоКонтрагента
	|						ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).Партнер
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|	КОНЕЦ КАК Партнер,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).Договор
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями 
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).РасчетыЧерезОтдельногоКонтрагента
	|						ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).ДоговорПокупки
	|					ИНАЧЕ ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).Договор
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК Договор,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).НаправлениеДеятельности
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) 
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).СуммаДокумента
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).СуммаДокумента
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДокумента
	|ПОМЕСТИТЬ ТаблицаСсылок
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Дата          КАК Дата,
	|	&ВалютаУпр                  КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ДатыКурсовУпр
	|ИЗ
	|	ТаблицаСсылок КАК ТаблицаСсылок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ТаблицаСсылок.Дата >= КурсыВалют.Период
	|ГДЕ 
	|	КурсыВалют.Валюта = &ВалютаУпр
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСсылок.Дата,
	|	ТаблицаСсылок.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Дата          КАК Дата,
	|	&ВалютаРегл                 КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ДатыКурсовРегл
	|ИЗ
	|	ТаблицаСсылок КАК ТаблицаСсылок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ТаблицаСсылок.Дата >= КурсыВалют.Период
	|ГДЕ 
	|	КурсыВалют.Валюта = &ВалютаРегл
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСсылок.Дата,
	|	ТаблицаСсылок.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Дата          КАК Дата,
	|	ТаблицаСсылок.Валюта        КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ДатыКурсовВалютДокументов
	|ИЗ
	|	ТаблицаСсылок КАК ТаблицаСсылок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ТаблицаСсылок.Валюта = КурсыВалют.Валюта
	|			И ТаблицаСсылок.Дата >= КурсыВалют.Период
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСсылок.Дата,
	|	ТаблицаСсылок.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Дата                    КАК Дата,
	|	ДанныеДляОбработки.Регистратор             КАК Регистратор,
	|	ДанныеДляОбработки.РегистраторВерсияДанных КАК РегистраторВерсияДанных,
	|	ДанныеДляОбработки.Организация             КАК Организация,
	|	ДанныеДляОбработки.Партнер                 КАК Партнер,
	|	ДанныеДляОбработки.Контрагент              КАК Контрагент,
	|	ДанныеДляОбработки.Договор                 КАК Договор,
	|	ДанныеДляОбработки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДляОбработки.Валюта                  КАК Валюта,
	|	ДанныеДляОбработки.СуммаДокумента          КАК СуммаДокумента,
	|	ЕСТЬNULL(ТребуютДопроведения.СуммаКРаспределению,0) КАК СуммаКРаспределению,
	|	ВЫРАЗИТЬ((ДанныеДляОбработки.СуммаДокумента * КурсыВалютыДокумента.Курс * КурсыУпр.Кратность)
	|		/ (КурсыУпр.Курс * КурсыВалютыДокумента.Кратность) КАК ЧИСЛО(15,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ((ДанныеДляОбработки.СуммаДокумента * КурсыВалютыДокумента.Курс * КурсыРегл.Кратность) 
	|		/ (КурсыРегл.Курс * КурсыВалютыДокумента.Кратность) КАК ЧИСЛО(15,2)) КАК СуммаРегл,
	|	КурсыВалютыДокумента.Кратность             КАК КратностьВалютыДокумента,
	|	КурсыВалютыДокумента.Курс                  КАК КурсВалютыДокумента,
	|	КурсыУпр.Кратность                         КАК КратностьУпр,
	|	КурсыУпр.Курс                              КАК КурсУпр,
	|	КурсыРегл.Кратность                        КАК КратностьРегл,
	|	КурсыРегл.Курс                             КАК КурсРегл,
	|	ВЫБОР 
	|		КОГДА НЕ ТребуютДопроведения.Регистратор ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                      КАК ТребуетДопроведения
	|ИЗ ТаблицаСсылок КАК ДанныеДляОбработки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДатыКурсовУпр КАК ДатыКурсовУпр
	|			ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КурсыВалют КАК КурсыУпр
	|			ПО ДатыКурсовУпр.ДатаКурса = КурсыУпр.Период
	|				И ДатыКурсовУпр.Валюта = КурсыУпр.Валюта
	|		ПО ДанныеДляОбработки.Дата = ДатыКурсовУпр.Дата
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДатыКурсовРегл КАК ДатыКурсовРегл
	|			ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КурсыВалют КАК КурсыРегл
	|			ПО ДатыКурсовРегл.ДатаКурса = КурсыРегл.Период
	|				И ДатыКурсовРегл.Валюта = КурсыРегл.Валюта
	|		ПО ДанныеДляОбработки.Дата = ДатыКурсовРегл.Дата
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДатыКурсовВалютДокументов КАК ДатыКурсовВалютДокументов
	|			ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КурсыВалют КАК КурсыВалютыДокумента
	|			ПО ДатыКурсовВалютДокументов.ДатаКурса = КурсыВалютыДокумента.Период
	|				И ДатыКурсовВалютДокументов.Валюта = КурсыВалютыДокумента.Валюта
	|		ПО ДанныеДляОбработки.Валюта = ДатыКурсовВалютДокументов.Валюта
	|			И ДанныеДляОбработки.Дата = ДатыКурсовВалютДокументов.Дата
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТТребуютДопроведения КАК ТребуютДопроведения
	|		ПО ДанныеДляОбработки.Регистратор = ТребуютДопроведения.Регистратор
	|;
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) КАК ОбъектРасчетов,
	|	ДанныеРегистра.НомерСтроки КАК НомерСтроки,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
    |	     И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
    |	     И ДанныеРегистра.УдалитьЗаказПоставщику = Неопределено 
    |   ТОГДА
    |       ИСТИНА
    |   ИНАЧЕ
    |       ЛОЖЬ
    |   КОНЕЦ КАК ЗаполнитьУдалитьЗаказПоставщику,
	|	ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|	     И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
    |	     И ДанныеРегистра.УдалитьЗаказПоставщику = Неопределено 
    |   ТОГДА
    |       ДанныеРегистра.Регистратор
    |   ИНАЧЕ
    |       ДанныеРегистра.УдалитьЗаказПоставщику
    |   КОНЕЦ КАК ИсточникОбъектаРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО 
    |       	(    
    |				ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
    |	     			И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
    |	     			И ДанныеРегистра.УдалитьЗаказПоставщику = Неопределено 
    |   			ТОГДА
    |       			ДанныеРегистра.Регистратор
    |   			ИНАЧЕ
    |       			ДанныеРегистра.УдалитьЗаказПоставщику
    |   			КОНЕЦ
    |   		) = 
	|			ОбъектыРасчетов.Объект
	|			И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация = ОбъектыРасчетов.Организация.ГоловнаяОрганизация
	|			И (ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|					И ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер = ОбъектыРасчетов.Партнер
	|				ИЛИ ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
	|			И (НЕ ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент В (&ПустыеЗначенияКонтрагент)
	|					И ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент = ОбъектыРасчетов.Контрагент
	|				ИЛИ ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент В (&ПустыеЗначенияКонтрагент))
	|			И ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|ГДЕ
	|	ДанныеРегистра.Регистратор В (&Регистраторы)
	|	И НЕ ДанныеРегистра.УдалитьЗаказПоставщику В (&ПустыеЗначенияОбъектовРасчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)),
	|	ДанныеРегистра.НомерСтроки,
	|	ДанныеРегистра.Регистратор,  
	|	ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|	     И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	     И ДанныеРегистра.УдалитьЗаказПоставщику = Неопределено 
	|   ТОГДА
	|       ИСТИНА
	|   ИНАЧЕ
	|       ЛОЖЬ
	|   КОНЕЦ КАК ЗаполнитьУдалитьЗаказПоставщику,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|			И ОбъектыРасчетов.Организация = ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация
	|			И ОбъектыРасчетов.Контрагент = ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент
	|			И ОбъектыРасчетов.Договор = ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор
	|			И ОбъектыРасчетов.НаправлениеДеятельности = ДанныеРегистра.АналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|			И ОбъектыРасчетов.Партнер = ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер
	|			И ОбъектыРасчетов.Объект = НЕОПРЕДЕЛЕНО
	|ГДЕ
	|	ДанныеРегистра.Регистратор В (&Регистраторы)
	|	И ДанныеРегистра.УдалитьЗаказПоставщику В (&ПустыеЗначенияОбъектовРасчетов)
	|
	|ИТОГИ ПО
	|	Регистратор";
		
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Запрос.УстановитьПараметр("ПустыеЗначенияКонтрагент", ОбъектыРасчетовСервер.ПустыеЗначенияКонтрагент());
	Запрос.УстановитьПараметр("ВалютаУпр", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	КурсовыеРазницыПрибыль = Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль;
	КурсовыеРазницыУбыток = Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток;
	
	ПорцииДляОбработки = ОбъектыРасчетовСервер.ПорцииДанныхДляОбработки(ОбновляемыеДанные);
	
	Для Каждого ПорцияДанных Из ПорцииДляОбработки Цикл
	
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ПорцияДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			Блокировка.Заблокировать();
				
			Запрос.УстановитьПараметр("Регистраторы", ПорцияДанных.ВыгрузитьКолонку("Регистратор"));  
			
			Результат = Запрос.ВыполнитьПакет();
	
			ТаблицаВозвраты = Результат[9].Выгрузить(); 
			ТаблицаВозвраты.Индексы.Добавить("Регистратор");
			
			ВыборкаРегистратор = Результат[10].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРегистратор.Следующий() Цикл 
				
				Регистратор = ВыборкаРегистратор.Регистратор;
				
				Если НЕ ЭтоФайловаяИБ И (ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") 
					ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) Тогда
					
					МетаданныеДокумента = Регистратор.Метаданные();
					
					Попытка
				
						Блокировка = Новый БлокировкаДанных;
						ЭлементБлокировки = Блокировка.Добавить("Документ." + МетаданныеДокумента.Имя);
						ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
						ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
						Блокировка.Заблокировать();
						
					Исключение
						
						ОтменитьТранзакцию();
						ТекстСообщения = НСтр("ru='Не удалось заблокировать документ: %Ссылка% по причине: %Причина%';uk='Не вдалося заблокувати документ: %Ссылка% по причині: %Причина%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Регистратор);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
						ЗаписьЖурналаРегистрации(
							ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение,
							МетаданныеДокумента,
							Регистратор,
							ТекстСообщения
						);
						
						Продолжить;
						
					КонецПопытки;
					
					СтруктураПоиска = Новый Структура("Регистратор", Регистратор);
					ДокументыВозврата = ТаблицаВозвраты.НайтиСтроки(СтруктураПоиска); 
					Если ДокументыВозврата.Количество() > 0 Тогда
						ДокументВозврата = ДокументыВозврата[0];
						РегистраторВерсияДанных = ДокументВозврата.РегистраторВерсияДанных; 
					Иначе	   
						РегистраторВерсияДанных = Неопределено;
					КонецЕсли;
					
					Если РегистраторВерсияДанных <> Регистратор.ВерсияДанных Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
				НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
				НаборЗаписей.Прочитать();
				
				ЗаписьПриход = Неопределено;
				СуммаРаспределенная = 0;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СтрокаНабора = НаборЗаписей[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
					Если СтрокаНабора.ЗаказПоставщику = Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
						Если ВыборкаДетальныеЗаписи.ОбъектРасчетов <> Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
							СтрокаНабора.ЗаказПоставщику = ВыборкаДетальныеЗаписи.ОбъектРасчетов;
						Иначе
							ВызватьИсключение (
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Не найден объект расчетов для источника данных: %1 по набору записей регистратора: %2';uk='Не знайдено об''єкт розрахунків для джерела даних: %1 за набором записів реєстратора: %2'"),
									ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
									ВыборкаРегистратор.Регистратор
								)
							);
						КонецЕсли;
					КонецЕсли;
                    Если ВыборкаДетальныеЗаписи.ЗаполнитьУдалитьЗаказПоставщику Тогда
				        Если НЕ ЗначениеЗаполнено(СтрокаНабора.УдалитьЗаказПоставщику) Тогда
					       СтрокаНабора.УдалитьЗаказПоставщику = СтрокаНабора.Регистратор;
				        КонецЕсли;
                    КонецЕсли;
					Если ТипЗнч(СтрокаНабора.Регистратор) = Тип("ДокументСсылка.РасчетКурсовыхРазниц") Тогда
						Если СтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
							СтрокаНабора.ХозяйственнаяОперация = КурсовыеРазницыПрибыль;
						Иначе
							СтрокаНабора.ХозяйственнаяОперация = КурсовыеРазницыУбыток;
						КонецЕсли;
					КонецЕсли;
	 				Если СтрокаНабора.УдалитьЗаказПоставщику = Регистратор 
						И СтрокаНабора.РасчетныйДокумент = Регистратор Тогда
						Если СтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
							ЗаписьПриход = СтрокаНабора;
						Иначе
							СуммаРаспределенная = СуммаРаспределенная + СтрокаНабора.Предоплата;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;    
				
				СтруктураПоиска = Новый Структура("Регистратор", Регистратор);
				ДокументыВозврата = ТаблицаВозвраты.НайтиСтроки(СтруктураПоиска); 
				Если ДокументыВозврата.Количество() > 0 Тогда
					ДокументВозврата = ДокументыВозврата[0];
					ТребуетДопроведения = ДокументВозврата.ТребуетДопроведения;  
					СуммаКРаспределению = ДокументВозврата.СуммаКРаспределению;
				Иначе	             
					ДокументВозврата = Неопределено;
				    ТребуетДопроведения = Ложь;    
					СуммаКРаспределению = 0;
				КонецЕсли;
								
				Если ТребуетДопроведения И СуммаКРаспределению > СуммаРаспределенная Тогда
					
					СтруктураАналитики = Новый Структура();
					СтруктураАналитики.Вставить("Организация",             ДокументВозврата.Организация);
					СтруктураАналитики.Вставить("Партнер",                 ДокументВозврата.Партнер);
					СтруктураАналитики.Вставить("Контрагент",              ДокументВозврата.Контрагент);
					СтруктураАналитики.Вставить("Договор",                 ДокументВозврата.Договор);
					СтруктураАналитики.Вставить("НаправлениеДеятельности", ДокументВозврата.НаправлениеДеятельности);
					
					АналитикаВозврата = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(СтруктураАналитики);
					
					ИмеющиесяЗаписи = НаборЗаписей.Выгрузить();
					КоличествоЗаписей = НаборЗаписей.Количество();
					
					Если ЗаписьПриход = Неопределено Тогда
						
						ЗаписьПриход = НаборЗаписей.Вставить(0);
						ЗаполнитьЗначенияСвойств(ЗаписьПриход, НаборЗаписей[1]);
						ЗаписьПриход.ВидДвижения               = ВидДвиженияНакопления.Приход;
						ЗаписьПриход.АналитикаУчетаПоПартнерам = АналитикаВозврата;
						ЗаписьПриход.ЗаказПоставщику           = Регистратор;
						ЗаписьПриход.РасчетныйДокумент         = Регистратор;
						ЗаписьПриход.Валюта                    = ДокументВозврата.Валюта;
						ЗаписьПриход.Предоплата                = ДокументВозврата.СуммаДокумента;
						ЗаписьПриход.ПредоплатаРегл            = ДокументВозврата.СуммаРегл;
						ЗаписьПриход.ПредоплатаУпр             = ДокументВозврата.СуммаУпр;
						ЗаписьПриход.Долг                      = 0;
						ЗаписьПриход.ДолгРегл                  = 0;
						ЗаписьПриход.ДолгУпр                   = 0;
						
						ЗаписьРасход = НаборЗаписей.Вставить(1);
						ЗаполнитьЗначенияСвойств(ЗаписьРасход, ЗаписьПриход);
						ЗаписьРасход.ВидДвижения               = ВидДвиженияНакопления.Расход;
						
					Иначе
						
						ЗаписьРасход = НаборЗаписей.Вставить(0);
						ЗаполнитьЗначенияСвойств(ЗаписьРасход, ЗаписьПриход);
						ЗаписьРасход.ВидДвижения               = ВидДвиженияНакопления.Расход;
						ЗаписьРасход.Предоплата                = ДокументВозврата.СуммаДокумента - ЗаписьПриход.Предоплата;
						ЗаписьРасход.ПредоплатаРегл            = ДокументВозврата.СуммаРегл - ЗаписьПриход.ПредоплатаРегл;
						ЗаписьРасход.ПредоплатаУпр             = ДокументВозврата.СуммаУпр - ЗаписьПриход.ПредоплатаУпр;
						
						НаборЗаписей.Удалить(ЗаписьПриход);
						
						ЗаписьПриход = НаборЗаписей.Вставить(0);
						ЗаполнитьЗначенияСвойств(ЗаписьПриход, ЗаписьРасход);
						ЗаписьПриход.ВидДвижения               = ВидДвиженияНакопления.Приход;
						ЗаписьПриход.Предоплата                = ДокументВозврата.СуммаДокумента;
						ЗаписьПриход.ПредоплатаРегл            = ДокументВозврата.СуммаРегл;
						ЗаписьПриход.ПредоплатаУпр             = ДокументВозврата.СуммаУпр;
						
					КонецЕсли; 
					
				КонецЕсли;
				
				Если НаборЗаписей.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				КонецЕсли;
			
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru='Не удалось записать данные в регистр %1 , по причине: %2';uk='Не вдалося записати дані в регістр %1, з причини: %2'");
			ТекстСообщения = СтрШаблон(
				Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра,
				,
				ТекстСообщения
			);
		
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
