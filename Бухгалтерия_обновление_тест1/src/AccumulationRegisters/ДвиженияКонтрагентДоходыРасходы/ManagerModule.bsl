#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//++ НЕ УТ
#Область ПрограммныйИнтерфейс

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Сумма", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалюте", "Валюта"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДС", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРеглБезНДС", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСВВалюте", "Валюта"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДС", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалюте", "Валюта"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("16adffef-b348-4a3d-ba79-afa8034e040b");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет измерение ОбъектРасчетов и реквизит ИсточникГФУРасчетов с типом СправочникСсылка.ОбъектыРасчетов';uk='Заповнює вимір ОбъектРасчетов і реквізит ИсточникГФУРасчетов з типом СправочникСсылка.ОбъектыРасчетов'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию2";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";


	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";


	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьОбъектыРасчетов(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию2";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e8bb220a-4f8b-4354-87ab-973e0a5866a8");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию2";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СписаниеЗадолженности";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвиженияКонтрагентДоходыРасходы";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Группирует размноженные записи в регистре ""Движения Контрагент - Доходы/Расходы"" для документов ""Списание задолженности"".';uk='Групує розмножені записи у регістрі ""Рухи Контрагент - Доходи/Витрати"" для документів ""Списання заборгованості"".'");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.10.7";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеСформироватьДвиженияПоАкцизу";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9c21ff40-ea4a-468a-966c-7ecd370ce34d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ЗарегистрироватьДанныеКОбработкеСформироватьДвиженияПоАкцизу";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Формирует записи по акцизному налогу в регистре ""Движения Контрагент - Доходы/Расходы"" для документов ""Отчет о розничных продажах"".';uk='Формує записи по акцизному податку в регістрі ""Рухи Контрагент - Доходи/Витрати"" для документів ""Звіт про роздрібні продажі"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетОРозничныхПродажах.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию2";
	НоваяСтрока.Порядок = "После";                           
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетОРозничныхПродажах.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.11.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеОбновитьДвиженияПоАкцизу";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("75308ffd-cb32-4ab4-b8a0-88a4ef5f2228");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ЗарегистрироватьДанныеКОбработкеОбновитьДвиженияПоАкцизу";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновляет записи по акцизному налогу в регистре ""Движения Контрагент - Доходы/Расходы"" для документов ""Отчет о розничных продажах"".';uk='Формує записи по акцизному податку в регістрі ""Рухи Контрагент - Доходи/Витрати"" для документів ""Звіт про роздрібні продажі"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетОРозничныхПродажах.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию2";
	НоваяСтрока.Порядок = "После";                           
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеСформироватьДвиженияПоАкцизу";
	НоваяСтрока.Порядок = "После";                           
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетОРозничныхПродажах.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После"; 

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	ИЛИ (ДанныеРегистра.ИсточникГФУРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьИсточникГФУРасчетов В (&ПустыеЗначенияОбъектовРасчетов))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
		
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0
		Или Не ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.НомерСтроки                                       КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА НЕ РасчетыСКлиентами.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСКлиентами.ОбъектРасчетов
		|		КОГДА НЕ РасчетыСПоставщиками.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСПоставщиками.ОбъектРасчетов
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|	КОНЕЦ                                                            КАК ОбъектРасчетов,
		|	ДанныеРегистра.Регистратор                                       КАК Регистратор,
		|	ДанныеРегистра.УдалитьОбъектРасчетов                             КАК ИсточникОбъектаРасчетов
		|ИЗ
		|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|		ПО ДанныеРегистра.Регистратор = РасчетыСКлиентами.Регистратор
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
		|			И ДанныеРегистра.УдалитьОбъектРасчетов = РасчетыСКлиентами.УдалитьЗаказКлиента
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|		ПО ДанныеРегистра.Регистратор = РасчетыСПоставщиками.Регистратор
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
		|			И ДанныеРегистра.УдалитьОбъектРасчетов = РасчетыСПоставщиками.УдалитьЗаказПоставщику
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И НЕ ДанныеРегистра.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
		|	И НЕ ДанныеРегистра.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		//++ Локализация
		//++ НЕ УТ
		|	И НЕ ДанныеРегистра.Регистратор ССЫЛКА Документ.ВыбытиеДенежныхДокументов
		//-- НЕ УТ
		//-- Локализация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.НомерСтроки,
		|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)),
		|	ДанныеРегистра.Регистратор,
		|	ДанныеРегистра.УдалитьОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ДанныеРегистра.УдалитьОбъектРасчетов = ОбъектыРасчетов.Объект
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = ОбъектыРасчетов.Организация.ГоловнаяОрганизация
		|			И ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) = ОбъектыРасчетов.ТипРасчетов
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И ДанныеРегистра.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
		|	И (ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль)
		|	ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.НомерСтроки,
		|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)),
		|	ДанныеРегистра.Регистратор,
		|	ДанныеРегистра.УдалитьОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ДанныеРегистра.УдалитьОбъектРасчетов = ОбъектыРасчетов.Объект
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = ОбъектыРасчетов.Организация.ГоловнаяОрганизация
		|			И ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) = ОбъектыРасчетов.ТипРасчетов
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И ДанныеРегистра.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
		|	И (ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль)
		|	ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.НомерСтроки,
		|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)),
		|	ДанныеРегистра.Регистратор,
		|	ДанныеРегистра.УдалитьОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ДанныеРегистра.УдалитьОбъектРасчетов = ОбъектыРасчетов.Объект
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = ОбъектыРасчетов.Организация.ГоловнаяОрганизация
		|			И ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) = ОбъектыРасчетов.ТипРасчетов
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И ДанныеРегистра.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//++ Локализация
		//++ НЕ УТ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.НомерСтроки,
		|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)),
		|	ДанныеРегистра.Регистратор,
		|	ДанныеРегистра.УдалитьОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ДанныеРегистра.УдалитьОбъектРасчетов = ОбъектыРасчетов.Объект
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = ОбъектыРасчетов.Организация.ГоловнаяОрганизация
		|			И ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) = ОбъектыРасчетов.ТипРасчетов
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И ДанныеРегистра.Регистратор ССЫЛКА Документ.ВыбытиеДенежныхДокументов
		|
		//-- НЕ УТ
		//-- Локализация
		|ИТОГИ ПО
		|	Регистратор";
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ОбновляемыеДанные;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
		Блокировка.Заблокировать();
		
		Запрос.УстановитьПараметр("Регистраторы", ОбновляемыеДанные.ВыгрузитьКолонку("Регистратор"));
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРегистратор.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
			НаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей - 
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
			НаборЗаписей.Прочитать();
	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаНабора = НаборЗаписей[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
				
				Если Не ЗначениеЗаполнено(СтрокаНабора.ОбъектРасчетов) Тогда
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
						И ВыборкаДетальныеЗаписи.ОбъектРасчетов <> Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
							СтрокаНабора.ОбъектРасчетов = ВыборкаДетальныеЗаписи.ОбъектРасчетов;
					ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
						И ВыборкаДетальныеЗаписи.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда 
							ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Не найден объект расчетов для источника данных: %1 по набору записей регистратора: %2';uk='Не знайдено об''єкт розрахунків для джерела даних: %1 за набором записів реєстратора: %2'"),
								ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
								ВыборкаРегистратор.Регистратор));
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаНабора.ИсточникГФУРасчетов) 
					И ЗначениеЗаполнено(СтрокаНабора.УдалитьИсточникГФУРасчетов) Тогда
						//++ НЕ УТ
						Если ТипЗнч(СтрокаНабора.УдалитьИсточникГФУРасчетов) = Тип("СправочникСсылка.ДоговорыЛизинга")
							Или ТипЗнч(СтрокаНабора.УдалитьИсточникГФУРасчетов) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") 
							Тогда
								СтрокаНабора.ИсточникГФУРасчетов = СтрокаНабора.УдалитьИсточникГФУРасчетов;
						Иначе
						//-- НЕ УТ
								СтрокаНабора.ИсточникГФУРасчетов = СтрокаНабора.ОбъектРасчетов;
						//++ НЕ УТ
						КонецЕсли;
						//-- НЕ УТ
				КонецЕсли;
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
	
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
	
		ОтменитьТранзакцию();
		
		Шаблон = НСтр("ru='Не удалось записать данные в регистр %1, по причине: %2';uk='Не вдалося записати дані в регістр %1, через: %2'");
		ТекстСообщения = 
			СтрШаблон(Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеРегистра,
			,
			ТекстСообщения);

	КонецПопытки;

	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры


Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию2(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеЗадолженностиЗадолженность.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(СписаниеЗадолженностиЗадолженность.Ссылка) КАК Всего
	|ПОМЕСТИТЬ ЗаписейВТЧ
	|ИЗ
	|	Документ.СписаниеЗадолженности.Задолженность КАК СписаниеЗадолженностиЗадолженность
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеЗадолженностиЗадолженность.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентДоходыРасходы.Регистратор КАК Регистратор,
	|	КОЛИЧЕСТВО(КонтрагентДоходыРасходы.Регистратор) КАК ВсегоДвижений,
	|	ЗаписейВТЧ.Всего КАК ВсегоТЧ
	|ИЗ
	|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК КонтрагентДоходыРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаписейВТЧ КАК ЗаписейВТЧ
	|		ПО КонтрагентДоходыРасходы.Регистратор = ЗаписейВТЧ.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрагентДоходыРасходы.Регистратор,
	|	ЗаписейВТЧ.Всего
	|	
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(КонтрагентДоходыРасходы.Регистратор) <> ЗаписейВТЧ.Всего";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрНакопления.ДвиженияКонтрагентДоходыРасходы");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию2(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияКонтрагентДоходыРасходы";
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.СписаниеЗадолженности");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы,
		"РегистрНакопления.ДвиженияКонтрагентДоходыРасходы", 
		Параметры.Очередь
	);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры


Процедура ЗарегистрироватьДанныеКОбработкеСформироватьДвиженияПоАкцизу(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияКонтрагентДоходыРасходы";
	
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаТоваров
	|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДвиженияКонтрагентДоходыРасходы
	|	ПО ТаблицаТоваров.Ссылка = ДвиженияКонтрагентДоходыРасходы.Регистратор
	|   И ДвиженияКонтрагентДоходыРасходы.СтатьяДоходовРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|   И ДвиженияКонтрагентДоходыРасходы.АналитикаАктивовПассивов = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.Акциз)
	|ГДЕ                       
	|   ТаблицаТоваров.Ссылка.Проведен 
	|	И ТаблицаТоваров.СтатьяДекларацииПоАкцизномуНалогу <> ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.ПустаяСсылка)
	|	И ТаблицаТоваров.СуммаАкцизногоНалога <> 0
	|   И ДвиженияКонтрагентДоходыРасходы.Регистратор ЕСТЬ NULL 
	|";
    СписокЗапросов.Добавить(ТекстЗапроса);
	
	Если СписокЗапросов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы, 
		ПолноеИмяРегистра
	);
    
КонецПроцедуры

Процедура ОбработатьДанныеСформироватьДвиженияПоАкцизу(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияКонтрагентДоходыРасходы";
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ОтчетОРозничныхПродажах");
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы,
		ПолноеИмяРегистра, 
		Параметры.Очередь
	);
	
КонецПроцедуры    

Процедура ЗарегистрироватьДанныеКОбработкеОбновитьДвиженияПоАкцизу(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияКонтрагентДоходыРасходы";
	
	СписокЗапросов = Новый Массив;

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияКонтрагентДоходыРасходы.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДвиженияКонтрагентДоходыРасходы
	|ГДЕ                       
	|   ДвиженияКонтрагентДоходыРасходы.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И ДвиженияКонтрагентДоходыРасходы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АкцизныйНалог)
	|	И (ДвиженияКонтрагентДоходыРасходы.Сумма <> 0 ИЛИ ДвиженияКонтрагентДоходыРасходы.СуммаРегл <> 0)
	|   И ДвиженияКонтрагентДоходыРасходы.АналитикаРасходов = НЕОПРЕДЕЛЕНО
	|";
    СписокЗапросов.Добавить(ТекстЗапроса);
	
	Если СписокЗапросов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы, 
		ПолноеИмяРегистра
	);
    
КонецПроцедуры

Процедура ОбработатьДанныеОбновитьДвиженияПоАкцизу(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияКонтрагентДоходыРасходы";
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ОтчетОРозничныхПродажах");
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы,
		ПолноеИмяРегистра, 
		Параметры.Очередь
	);
	
КонецПроцедуры    

#КонецОбласти

#КонецОбласти

#КонецЕсли
