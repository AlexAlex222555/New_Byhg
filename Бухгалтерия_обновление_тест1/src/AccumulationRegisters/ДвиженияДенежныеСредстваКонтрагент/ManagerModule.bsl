#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//++ НЕ УТ
#Область ПрограммныйИнтерфейс

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	// Массив содержит не только ресурсы регистров, но и производные от них поля в запросах.
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаОплаты", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаОплатыРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаОплатыВВалютеПлатежа", "ВалютаПлатежа"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаОплатыВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаОплаты, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПостоплаты", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПостоплатыРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПостоплатыВВалютеПлатежа", "ВалютаПлатежа"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПостоплатыВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаПостоплаты, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПредоплаты", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПредоплатыРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПредоплатыВВалютеПлатежа", "ВалютаПлатежа"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПредоплатыВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаПредоплаты, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДС", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалютеПлатежа", "ВалютаПлатежа"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплатеВРамкахЛимита", "ВалютаПлатежа"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеВРамкахЛимита, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплатеСверхЛимита", "ВалютаПлатежа"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеСверхЛимита, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплате", "ВалютаПлатежа"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплате, Новый Структура(СвойстваПоказателей, МассивРесурсов));

	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Партнер)
	|	И( ВЫБОР КОГДА ТипЗначения(ДенежныеСредства) = Тип(Справочник.Кассы) ТОГДА ЗначениеРазрешено(ДенежныеСредства)
	|	КОГДА ТипЗначения(ДенежныеСредства) = Тип(Справочник.КассыККМ) ТОГДА ЗначениеРазрешено(ДенежныеСредства)
	|	КОГДА ТипЗначения(ДенежныеСредства) = Тип(Справочник.ФизическиеЛица) ТОГДА ЗначениеРазрешено(ДенежныеСредства)
	|	ИНАЧЕ ИСТИНА КОНЕЦ) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";  
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ea5384e2-9389-4513-bae1-dc038184bf43");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет суммы и ставки НДС в регистре ""ДвиженияДенежныеСредстваКонтрагент"".
                                   |Исправляет дату движений заявок на расходование денежных средств по ресурсам планирования платежей для корректного контроля заявок с точностью до дня.
                                   |Заполняет измерение ОбъектРасчетов и реквизит ИсточникГФУРасчетов.'
                                   |;uk='Заповнює суми та ставки ПДВ у регістрі ""ДвиженияДенежныеСредстваКонтрагент"".
                                   |Виправляє дату рухів заявок на витрату коштів за ресурсами планування платежів для коректного контролю заявок з точністю до дня.
                                   |Заповнює вимір ОбъектРасчетов та реквізит ИсточникГФУРасчетов.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратПодарочныхСертификатов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетОРозничныхПродажах.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РеализацияПодарочныхСертификатов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОперацияПоПлатежнойКарте.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриходныйКассовыйОрдер.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РасходныйКассовыйОрдер.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратПодарочныхСертификатов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОперацияПоПлатежнойКарте.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетОРозничныхПродажах.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйКассовыйОрдер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РасходныйКассовыйОрдер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияПодарочныхСертификатов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПланОплат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";           

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";           

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьОбъектыРасчетов(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|	ПО
	|		ДанныеРегистра.Регистратор = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Регистраторы, 
		ДополнительныеПараметры
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (
	|		ТИП(Документ.ОперацияПоПлатежнойКарте),
	|		ТИП(Документ.ОтчетОРозничныхПродажах),
	|		ТИП(Документ.РеализацияПодарочныхСертификатов),
	|		ТИП(Документ.ВозвратПодарочныхСертификатов))
	|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДенежныеСредства) <> ТИП(Справочник.Контрагенты)
	|	И ДанныеРегистра.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ДенежныеСредстваУЭквайера))
	|	ИЛИ
	|	(ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (
	|		ТИП(Документ.ОперацияПоПлатежнойКарте),
	|		ТИП(Документ.ОтчетОРозничныхПродажах),
	|		ТИП(Документ.РеализацияПодарочныхСертификатов),
	|		ТИП(Документ.ВозвратПодарочныхСертификатов))
	|	И ДанныеРегистра.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы, 
		ПолноеИмяРегистра
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	Заявки.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Заявки.ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Заявки.ДатаПлатежа
		|		КОГДА Заявки.ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Заявки.ЖелательнаяДатаПлатежа
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(Заявки.Дата, ДЕНЬ)
		|	КОНЕЦ КАК Период
		|ПОМЕСТИТЬ Регистраторы
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявки
		|ГДЕ
		|	Заявки.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДвиженияДенежныеСредстваКонтрагент.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияДенежныеСредстваКонтрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Регистраторы КАК Регистраторы
		|		ПО ДвиженияДенежныеСредстваКонтрагент.Период = Регистраторы.Период
		|			И ДвиженияДенежныеСредстваКонтрагент.Регистратор = Регистраторы.Ссылка
		|ГДЕ
		|	ДвиженияДенежныеСредстваКонтрагент.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
		|	И Регистраторы.Ссылка ЕСТЬ NULL
		|	И (ДвиженияДенежныеСредстваКонтрагент.СуммаКВыплатеВРамкахЛимита <> 0
		|			ИЛИ ДвиженияДенежныеСредстваКонтрагент.СуммаКВыплатеСверхЛимита <> 0)";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Регистраторы, 
		ДополнительныеПараметры
	);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|ГДЕ
	|	(ДанныеРегистра.УдалитьОбъектРасчетов НЕ В (&ПустыеЗначенияОбъектРасчетов)
	|		И ДанныеРегистра.ОбъектРасчетов = НЕОПРЕДЕЛЕНО)
	|	ИЛИ (ДанныеРегистра.УдалитьИсточникГФУРасчетов НЕ В (&ПустыеЗначенияОбъектРасчетов)
	|		И ДанныеРегистра.ИсточникГФУРасчетов = НЕОПРЕДЕЛЕНО)";
	
	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра
	);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0
		Или Не ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;               
	
	ПриобретенияТоваровУслуг = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
		Параметры.Очередь,
		"Документ.ПриобретениеТоваровУслуг",
		ПолноеИмяРегистра
	);

	Пока ПриобретенияТоваровУслуг.Следующий() Цикл
		
		Регистратор = ПриобретенияТоваровУслуг.Регистратор;		
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			Блокировка.Заблокировать();
			
			ТипРегистратора = ТипЗнч(Регистратор);
			
			Если ТипРегистратора = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				
				Набор = РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(Регистратор);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось записать движения регистра ""Движения ДС - Контрагент"" при обработке документа: %Ссылка% по причине: %Причина%';uk='Не вдалося записати рухи регістру ""Рухи ГК - Контрагент"" при обробці документа: %Ссылка% через: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Регистратор.Метаданные(), 
				Регистратор, 
				ТекстСообщения
			);  
			
			ВызватьИсключение;
			
		КонецПопытки;
		
		
	КонецЦикла;																					
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	
	РегистраторыПерепроведение = Новый Массив;
	
	РегистраторыПерепроведение.Добавить("АвансовыйОтчет");
	РегистраторыПерепроведение.Добавить("ВозвратПодарочныхСертификатов");
	РегистраторыПерепроведение.Добавить("ВыбытиеДенежныхДокументов");
	РегистраторыПерепроведение.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
	РегистраторыПерепроведение.Добавить("ОперацияПоПлатежнойКарте");
	РегистраторыПерепроведение.Добавить("ОтчетОРозничныхПродажах");
	РегистраторыПерепроведение.Добавить("ПоступлениеБезналичныхДенежныхСредств");
	РегистраторыПерепроведение.Добавить("ПоступлениеДенежныхДокументов");
	РегистраторыПерепроведение.Добавить("ПриобретениеУслугПрочихАктивов");
	РегистраторыПерепроведение.Добавить("ПриходныйКассовыйОрдер");
	РегистраторыПерепроведение.Добавить("РасходныйКассовыйОрдер");
	РегистраторыПерепроведение.Добавить("РеализацияПодарочныхСертификатов");
	РегистраторыПерепроведение.Добавить("СписаниеБезналичныхДенежныхСредств");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		РегистраторыПерепроведение,
		ПолноеИмяРегистра,
		Параметры.Очередь,
		ДополнительныеПараметры
	);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
