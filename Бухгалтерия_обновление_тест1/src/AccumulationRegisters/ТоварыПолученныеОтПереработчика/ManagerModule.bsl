#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ВременнаяТаблицаОстатки(ОтборРесурсы, ОтборИзмерения = Неопределено, Индексы = "КодСтроки") Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Остатки.Распоряжение               КАК Распоряжение,
		|	Остатки.КодСтроки                  КАК КодСтроки,
		|	Остатки.ТипСтоимости               КАК ТипСтоимости,
		|	Остатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Остатки.КоличествоОстаток          КАК КоличествоОстаток
		|ПОМЕСТИТЬ ТоварыПолученныеОтПереработчика_Остатки
		|ИЗ
		|	РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки(, %1) КАК Остатки
		|ГДЕ
		|	%2
		|ИНДЕКСИРОВАТЬ ПО
		|	%3";
	
	// Отбор по измерениям.
	ТекстыОтборИзмерения = Новый Массив;
	Если ОтборИзмерения = Неопределено Тогда
		ОтборИзмерения = Новый Структура("Распоряжение", "Распоряжения");
	КонецЕсли;
	
	Если ОтборИзмерения.Свойство("Организация") Тогда
		ТекстыОтборИзмерения.Добавить(СтрШаблон("Организация В(&%1)", ОтборИзмерения.Организация));
	КонецЕсли;
	Если ОтборИзмерения.Свойство("Распоряжение") Тогда
		ТекстыОтборИзмерения.Добавить(СтрШаблон("Распоряжение В(&%1)", ОтборИзмерения.Распоряжение));
	КонецЕсли;
	ТекстыОтборИзмерения = СтрСоединить(ТекстыОтборИзмерения, " И ");
	
	// Отбор по ресурсам.
	ТекстОтборРесурсы = СтрЗаменить(ОтборРесурсы, "КоличествоОстаток", "Остатки.КоличествоОстаток");
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ТекстыОтборИзмерения, ТекстОтборРесурсы, Индексы);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЕстьОстатки(ОтборРесурсы) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Остатки.КодСтроки КАК КодСтроки
		|ИЗ
		|	РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки(, Распоряжение В(&Распоряжения)) КАК Остатки
		|ГДЕ
		|	%1";
	
	ОтборРесурсы = СтрЗаменить(ОтборРесурсы, "КоличествоОстаток", "Остатки.КоличествоОстаток");
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ОтборРесурсы);
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ТоварыПолученныеОтПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2a564943-87da-4ec8-ba15-5c586b491941");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ТоварыПолученныеОтПереработчика.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ОтчетПереработчика,"
		+ "РегистрНакопления.ТоварыПолученныеОтПереработчика";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТоварыПолученныеОтПереработчика";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Заполняется измерение ""Организация"" и очищает измерение ""Распоряжение"". Пока обработчик не выполнен, возможны ошибки в форме списка к оформлению документов ""Отчет переработчика"".';uk='Заповнюється вимір ""Організація"" та очищає вимір ""Розпорядження"". Поки обробник не виконаний, можливі помилки у формі списку до оформлення документів ""Звіт переробника"".'");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры 

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|
	|ВЫБРАТЬ
	|	ТоварыПолученныеОтПереработчика.Регистратор
	|ИЗ
	|	РегистрНакопления.ТоварыПолученныеОтПереработчика КАК ТоварыПолученныеОтПереработчика
	|ГДЕ
	|	ТоварыПолученныеОтПереработчика.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И (ТоварыПолученныеОтПереработчика.Регистратор ССЫЛКА Документ.ПоступлениеОтПереработчика
	|		ИЛИ ТоварыПолученныеОтПереработчика.Регистратор ССЫЛКА Документ.ОтчетПереработчика)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Очищаем код строки в движениях без распоряжений
	|ВЫБРАТЬ
	|	ТоварыПолученныеОтПереработчика.Регистратор
	|ИЗ
	|	РегистрНакопления.ТоварыПолученныеОтПереработчика КАК ТоварыПолученныеОтПереработчика
	|ГДЕ
	|	ТоварыПолученныеОтПереработчика.Распоряжение = НЕОПРЕДЕЛЕНО
	|	И НЕ ТоварыПолученныеОтПереработчика.КодСтроки = 0
	|	И ТИПЗНАЧЕНИЯ(ТоварыПолученныеОтПереработчика.Регистратор) В 
	|		(ТИП(Документ.ПоступлениеОтПереработчика), ТИП(Документ.ОтчетПереработчика))
	|";
	
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		"РегистрНакопления.ТоварыПолученныеОтПереработчика"
	);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыПолученныеОтПереработчика";
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПоступлениеОтПереработчика");
	Регистраторы.Добавить("Документ.ОтчетПереработчика");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы, 
		ПолноеИмяРегистра, 
		Параметры.Очередь
	);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли