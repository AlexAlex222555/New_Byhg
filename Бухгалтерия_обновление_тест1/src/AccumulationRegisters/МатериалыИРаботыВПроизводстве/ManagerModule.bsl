#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма()).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "МатериалыИРаботыВПроизводстве");
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.МатериалыИРаботыВПроизводстве.ОбработатьДанныеДляПереходаНаНовуюВерсию";
    Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("900efe57-66f8-4f2b-a8f1-5fd384b170d3");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.МатериалыИРаботыВПроизводстве.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Данные в регистре накопления ""Материалы и работы в производстве"" не рекомендуется использовать до момента завершения обработки. Данные будут некорректны.';uk='Дані в регістрі накопичення ""Матеріали та роботи у виробництві"" не рекомендується використовувати до момеунту завершення обробки. Дані будуть некоректні.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.АктВыполненныхРабот.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатков.ПолноеИмя());
	//++ НЕ УТ
	Читаемые.Добавить(Метаданные.Документы.ПеремещениеМатериаловВПроизводстве.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПереработчика.ПолноеИмя());
	//-- НЕ УТ
	Читаемые.Добавить(Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.Назначения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.Номенклатура.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";  
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";  
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";          
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПеремещениеМатериаловВПроизводстве.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После"; 
    
	//-- НЕ УТ   
    
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";
	
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыОбработатьДанныеДляГенерацииНазначений(
		Обработчик.ПриоритетыВыполнения,
		"После"
	);
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьКлючиАналитикиНоменклатуры(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);	                        

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.МатериалыИРаботыВПроизводстве";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве КАК ДанныеРегистра
	|ГДЕ
	|	(ДанныеРегистра.АналитикаУчетаНоменклатуры.Назначение <> ДанныеРегистра.Назначение
	|		И ДанныеРегистра.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ДанныеРегистра.АналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка))
	|	ИЛИ (ДанныеРегистра.АналитикаУчетаПродукции.Назначение <> ДанныеРегистра.Назначение
	|		И ДанныеРегистра.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ДанныеРегистра.АналитикаУчетаПродукции <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка))
	|");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);	
	
	//++ НЕ УТ
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеМатериаловВПроизводствеМатериалыИРаботы.Ссылка
	|ИЗ
	|	Документ.ПеремещениеМатериаловВПроизводстве.МатериалыИРаботы КАК ПеремещениеМатериаловВПроизводствеМатериалыИРаботы
	|ГДЕ
	|	ПеремещениеМатериаловВПроизводствеМатериалыИРаботы.СтатусУказанияСерий = 6
	|	И ПеремещениеМатериаловВПроизводствеМатериалыИРаботы.СтатусУказанияСерийОтправитель = 5";
    
    Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	//-- НЕ УТ
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводОстатков.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ВводОстатков КАК ВводОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатков.Товары КАК ВводОстатковТовары
	|		ПО ВводОстатков.Ссылка = ВводОстатковТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.МатериалыИРаботыВПроизводстве КАК МатериалыИРаботыВПроизводстве
	|		ПО ВводОстатков.Ссылка = МатериалыИРаботыВПроизводстве.Регистратор
	|			И (ВводОстатковТовары.Номенклатура = МатериалыИРаботыВПроизводстве.Номенклатура)
	|ГДЕ
	|	ВводОстатков.УдалитьТипОперации = ЗНАЧЕНИЕ(Перечисление.УдалитьТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам)
	|	И ВводОстатков.ОтражатьВОперативномУчете
	|	И ВводОстатковТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И МатериалыИРаботыВПроизводстве.Регистратор ЕСТЬ NULL
	|               
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Очистка КодСтрокиПродукция для отчетов переработчика не по заказу
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика КАК ОтчетПереработчика
	|		ПО ОтчетПереработчика.Ссылка = Движения.Регистратор
	|ГДЕ
	|	Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НЕ Движения.КодСтрокиПродукция = 0
	|	И НЕ ОтчетПереработчика.ПоЗаказам
	|
	//-- НЕ УТ
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"), 
		ПолноеИмяРегистра
	);
	//-- НЕ УТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДвиженияРабот.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.МатериалыИРаботыВПроизводстве КАК ДвиженияРабот
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.Услуги КАК УслугиАкта
		|		ПО ДвиженияРабот.Регистратор = УслугиАкта.Ссылка
		|			И ДвиженияРабот.Номенклатура = УслугиАкта.Номенклатура
		|			И ДвиженияРабот.Характеристика = УслугиАкта.Характеристика
		|			И ДвиженияРабот.Назначение = УслугиАкта.Назначение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказТовары
		|		ПО УслугиАкта.Номенклатура = ЗаказТовары.Номенклатура
		|			И УслугиАкта.Характеристика = ЗаказТовары.Характеристика
		|			И УслугиАкта.КодСтроки = ЗаказТовары.КодСтроки
		|			И УслугиАкта.ЗаказКлиента = ЗаказТовары.Ссылка
		|ГДЕ
		|	НЕ ДвиженияРабот.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	И ДвиженияРабот.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|	И ТИПЗНАЧЕНИЯ(ДвиженияРабот.Регистратор) = ТИП(Документ.АктВыполненныхРабот)
		|	И НЕ ЗаказТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		"РегистрНакопления.МатериалыИРаботыВПроизводстве"
    );             
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
 	ПолноеИмяРегистра = "РегистрНакопления.МатериалыИРаботыВПроизводстве";
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь)[1];
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
        Параметры.Очередь, 
        Неопределено, 
        ПолноеИмяРегистра
    );
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Регистратор                         КАК Регистратор,
	|	Движения.Период                              КАК Период,
	|	Движения.ВидДвижения                         КАК ВидДвижения,
	|	Движения.Организация                         КАК Организация,
	|	Движения.Номенклатура                        КАК Номенклатура,
	|	Движения.Характеристика                      КАК Характеристика,
	|	Движения.Подразделение                       КАК Подразделение,
	|	Движения.Серия                               КАК Серия,
	|	Движения.Назначение                          КАК Назначение,
	|	Движения.УдалитьАналитикаУчетаНоменклатуры   КАК УдалитьАналитикаУчетаНоменклатуры,
	|	Движения.Количество                          КАК Количество,
	|	Движения.СтатьяКалькуляции                   КАК СтатьяКалькуляции,
	|	Движения.ЗаказНаПроизводство                 КАК ЗаказНаПроизводство,
	|	Движения.КодСтрокиПродукция                  КАК КодСтрокиПродукция,
	|	Движения.Этап                                КАК Этап,
	|	Движения.ДатаРегистратора                    КАК ДатаРегистратора,
	|	Движения.НалоговоеНазначение                 КАК НалоговоеНазначение,
	|	ВЫБОР КОГДА НЕ АналитикаПродукции.КлючАналитики ЕСТЬ NULL
	|		И КлючиПродукции.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Движения.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Движения.АналитикаУчетаПродукции <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		ТОГДА АналитикаПродукции.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаПродукции
	|	КОНЕЦ                                        КАК АналитикаУчетаПродукции,
	|	Движения.Спецификация                        КАК Спецификация,
	|	Движения.СтатьяРасходов                      КАК СтатьяРасходов,
	|	Движения.АналитикаРасходов                   КАК АналитикаРасходов,
	|	Движения.ПодразделениеПолучатель             КАК ПодразделениеПолучатель,
	|	Движения.Первичное                           КАК Первичное,
	|	ВЫБОР КОГДА НЕ Аналитика.КлючАналитики ЕСТЬ NULL
	|			И Ключи.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.Назначение
	|			И Движения.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И Движения.АналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		ТОГДА Аналитика.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                                        КАК АналитикаУчетаНоменклатуры,
	|	Движения.БазаРаспределения                   КАК БазаРаспределения,
	|
	|	ВЫБОР КОГДА Аналитика.КлючАналитики ЕСТЬ NULL
	|			И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.Назначение
	|			И Движения.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И Ключи.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И Движения.АналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		ИЛИ (АналитикаПродукции.КлючАналитики ЕСТЬ NULL
	|			И Движения.АналитикаУчетаПродукции.Назначение <> Движения.Назначение
	|			И Движения.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И КлючиПродукции.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И Движения.АналитикаУчетаПродукции <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка))
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве КАК Движения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = Движения.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия = Аналитика.Серия
	|		И Ключи.МестоХранения = Аналитика.МестоХранения
	|		И Ключи.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|		И Движения.Назначение = Аналитика.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиПродукции
	|	ПО КлючиПродукции.Ссылка = Движения.АналитикаУчетаПродукции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаПродукции
	|	ПО КлючиПродукции.Номенклатура = АналитикаПродукции.Номенклатура
	|		И КлючиПродукции.Характеристика = АналитикаПродукции.Характеристика
	|		И КлючиПродукции.Серия = АналитикаПродукции.Серия
	|		И КлючиПродукции.МестоХранения = АналитикаПродукции.МестоХранения
	|		И КлючиПродукции.СтатьяКалькуляции = АналитикаПродукции.СтатьяКалькуляции
	|		И Движения.Назначение = АналитикаПродукции.Назначение
	|
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючиИнициализированы,
	|	НомерСтроки
	|";
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Набор = РегистрыНакопления.МатериалыИРаботыВПроизводстве.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			//++ НЕ УТ
			Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПеремещениеМатериаловВПроизводстве") 
				ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОтчетПереработчика") 
				Тогда
			    ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, ИмяРегистра);
			    Результат = ТаблицыДляДвижений["Таблица" + ИмяРегистра];
			Иначе
			//-- НЕ УТ      
				Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.АктВыполненныхРабот") 
					ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВводОстатков") 
					Тогда
			        ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, ИмяРегистра);
			        Результат = ТаблицыДляДвижений["Таблица" + ИмяРегистра];
			    Иначе
    				Запрос = Новый Запрос(ТекстЗапроса);
    				Запрос.УстановитьПараметр("Регистратор", Регистратор);
    				Результат = Запрос.Выполнить().Выгрузить();
    				Если Результат.Количество() = 0 Тогда
    					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
    					ЗафиксироватьТранзакцию();
    					Продолжить;
    				ИначеЕсли Результат[0].КлючиИнициализированы = 0 Тогда
    					ТекстСообщения = НСтр("ru='есть необновленные ключи. Необходимо перепровести документ вручную.';uk='існують неоновлені ключі. Необхідно перепровести документ вручну.'");
    					ВызватьИсключение ТекстСообщения;
                    КонецЕсли; 
                 КонецЕсли;
			//++ НЕ УТ
			КонецЕсли;
			//-- НЕ УТ
		
			Набор.Загрузить(Результат);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();   
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Регистратор);
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяРегистра
    );
                                                                                        
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
