#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СохранениеДвижений

// Добавляет в дополнительные свойства документа служебное свойство,
// в котором сохраняются дата начала и окончания периода,
// за который необходимо сохранить движения из ИБ в записываемый набор записей регистра.
//
Процедура ИнициализироватьСохранениеДвиженийДокументаЗаПериод(ДополнительныеСвойстваДокумента,
			НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	ДополнительныеСвойстваДокумента.Вставить("ДополнитьДвижениямиИзИБЗаПериод", Новый Структура);
	
	ДополнительныеСвойстваДокумента.ДополнитьДвижениямиИзИБЗаПериод.Вставить(
		"НачалоПериода",
		?(ЗначениеЗаполнено(НачалоПериода), НачалоПериода, Дата(1,1,1)));
	
	ДополнительныеСвойстваДокумента.ДополнитьДвижениямиИзИБЗаПериод.Вставить(
		"КонецПериода", 
		?(ЗначениеЗаполнено(КонецПериода),  КонецПериода,  ДобавитьМесяц(КонецМесяца(ТекущаяДатаСеанса()), 12*100)));
	
КонецПроцедуры

Процедура ИнициализироватьСохранениеДвиженийНабораЗаписейЗаПериод(Движение, ДополнительныеСвойстваДокумента) Экспорт
	
	Если ДополнительныеСвойстваДокумента.Свойство("ДополнитьДвижениямиИзИБЗаПериод") Тогда
		
		Движение.ДополнительныеСвойства.Вставить(
			"ДополнитьДвижениямиИзИБЗаПериод",
			ДополнительныеСвойстваДокумента.ДополнитьДвижениямиИзИБЗаПериод);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f699b4c2-4d86-4d79-89ee-b2f81be0566a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.СебестоимостьТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновляет движения по регистру ""Себестоимость товаров"".';uk='Оновлює рухи по регістру ""Собовартість товарів"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СборкаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПрочееОприходованиеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РеализацияТоваровУслуг.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаНазначенияТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РасчетСебестоимостиТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаРегистров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыЗапасов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.Назначения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.Организации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СделкиСКлиентами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	//++ НЕ УТ
	Читаемые.Добавить(Метаданные.Справочники.ПартииПроизводства.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтатьиКалькуляции.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПартииНезавершенногоПроизводства.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратМатериаловИзПроизводства.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыпускПродукции.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаМатериаловВПроизводство.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказПереработчику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РаспределениеПроизводственныхЗатрат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПереработчика.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РаспределениеПрочихЗатрат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтражениеЗарплатыВФинансовомУчете.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам.ПолноеИмя());
	//-- НЕ УТ
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВнутреннееПотреблениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаНазначенияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПеремещениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПрочееОприходованиеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Организации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПартииПроизводственныхЗатрат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "После";
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратМатериаловИзПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыпускПродукции.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтражениеЗарплатыВФинансовомУчете.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РаспределениеПроизводственныхЗатрат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РаспределениеПрочихЗатрат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СтатьиКалькуляции.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПартииНезавершенногоПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ

	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбновитьПредставленияПредопределенныхЭлементов";
	НоваяСтрока.Порядок = "Любой";   
	
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыОбработатьДанныеДляГенерацииНазначений(
		Обработчик.ПриоритетыВыполнения,
		"После"
	);
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьКлючиАналитикиНоменклатуры(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);	                        
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.4
// 
// Параметры:
// 	Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки; // см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки
	ПараметрыВыборки.ПолныеИменаРегистров = Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПараметрыВыборки.ПолныеИменаРегистров;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка,
	|	ДанныеРегистра.ДокументДвижения КАК ДокументДвижения
	|ПОМЕСТИТЬ ВтДанныеРегистра
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтДанныеРегистра.Ссылка
	|	ИЗ
	|		ВтДанныеРегистра КАК ВтДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК СборкаТоваров
	|		ПО ВтДанныеРегистра.Ссылка = СборкаТоваров.Ссылка
	|			И СборкаТоваров.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК ДвиженияРасчетаСебестоимости
	|		ПО ВтДанныеРегистра.ДокументДвижения = СборкаТоваров.Ссылка
	|			И СборкаТоваров.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|	ГДЕ
	|		НЕ СборкаТоваров.Ссылка ЕСТЬ NULL
	|		ИЛИ НЕ ДвиженияРасчетаСебестоимости.Ссылка ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Движения.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Движения
	|	ГДЕ
	|		Движения.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|		И Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Движения.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Движения
	|	ГДЕ
	|		Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|		И (Движения.Стоимость <> 0 ИЛИ Движения.СтоимостьБезНДС <> 0 ИЛИ Движения.СтоимостьРегл <> 0)
	|	
	|	//%ТекстЗапросаНазначения
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Движения.Регистратор КАК Ссылка
	|	ИЗ
	|		ВТДляДобавленияДвижений КАК Движения
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Движения.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Движения
	|	ГДЕ
	|		Движения.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами),
	|											ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет))
	|		И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	|		И НЕ Движения.Количество = 0
	|
	|
	//++ НЕ УТ
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Движения.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаМатериаловВПроизводство КАК ПередачаМатериаловВПроизводство
	|			ПО ПередачаМатериаловВПроизводство.Ссылка = Движения.Регистратор
	|	ГДЕ
	|		Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство)
	//-- НЕ УТ
	|
	|	) КАК Движения
	|";
	
	Если ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоНазначениям") Тогда
		
		ТекстЗапросаНазначения = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		ТекстЗапросаНазначения = ТекстЗапросаНазначения + "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Движения.Регистратор КАК Ссылка
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров КАК Движения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
		|			ПО Движения.ВидЗапасов = ВидыЗапасов.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
		|			ПО Движения.АналитикаУчетаНоменклатуры = Ключи.Ссылка
		|	ГДЕ
		|		ВидыЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И ВидыЗапасов.УстарелоНазначение <> Ключи.Назначение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Движения.Регистратор КАК Ссылка
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров КАК Движения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК КорВидыЗапасов
		|			ПО Движения.КорВидЗапасов = КорВидыЗапасов.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КорКлючи
		|			ПО Движения.КорАналитикаУчетаНоменклатуры = КорКлючи.Ссылка
		|	ГДЕ
		|		КорВидыЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И КорВидыЗапасов.УстарелоНазначение <> КорКлючи.Назначение
		|";
		
		ТекстЗапросаНазначения = ТекстЗапросаНазначения + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		ТекстЗапросаНазначения = ТекстЗапросаНазначения + "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Движения.Регистратор КАК Регистратор
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров КАК Движения
		|	ГДЕ
		|		Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
		|		ИЛИ Движения.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
		|
		|";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ТекстЗапросаНазначения", ТекстЗапросаНазначения);
		
	КонецЕсли;
	
	УстановитьПараметрЗапросаОбработчикаОбновления(Запрос);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаДополненияДвижений(Запрос.МенеджерВременныхТаблиц);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Регистраторы, 
		ДополнительныеПараметры
	);
	
	РегистрыНакопления.ПрочиеАктивыПассивы.ЗарегистироватьКОбновлениюУправленческогоБаланса(Параметры, Регистраторы, ДополнительныеПараметры.ПолноеИмяРегистра);
	
	//++ НЕ УТ
	ЗарегистрироватьОбъектыДляЗаменыСсылок(Параметры, ДополнительныеПараметры);
	//-- НЕ УТ
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр(
		"ФормироватьВидыЗапасовПоСделкам",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр(
		"ФормироватьВидыЗапасовПоПодразделениямМенеджерам",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор КАК Регистратор
	|ИЗ
	|	(
	|
	// Заполнение кор. направления деятельности при списании на расходы
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Движения.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|			ПО Аналитика.Ссылка = Движения.АналитикаУчетаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|			ПО Назначения.Ссылка = Аналитика.Назначение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|			ПО НаправленияДеятельности.Ссылка = Назначения.НаправлениеДеятельности
	|	ГДЕ
	|		Движения.КорНаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		И (Движения.СтатьяРасходовСписания <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|			ИЛИ Движения.СтатьяАктивовПассивов <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка))
	|  
	|	) КАК Движения
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Регистраторы, 
		ДополнительныеПараметры
	);
	
	
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.1:
// - заполняет новый реквизит "Назначение" в справочнике "Ключи аналитики учета номенклатуры" из вида запасов
// - для документов "Возврат товаров между организациями" заменяет хоз.операцию ВозвратОтКомиссионера на ВозвратПоКомиссииМеждуОрганизациями
// - для документов "Сборка товаров" разделяет хоз.операцию СборкаТоваров на две: СборкаТоваров и РазборкаТоваров
//		(приводит в соответствие с хоз. операцией самого документа)
// - выделяет забалансовую стоимость в новые ресурсы регистра
// - Заполняет тип записи партий (Перемещение обособленно) в движениях документов "ПеремещениеТоваров" (вид операции: ВнутренняяПередачаТоваров),
//		"РеализацияТоваровУслуг" (вид операции: РеализацияКлиентуРеглУчет), по РН СебестоимостьТоваров,
//		которые могли быть потеряны из-за дублирования значения перечисления.
// Заполнение кор. направления деятельности при списании на расходы
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь)[1];
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);

	Если ОбновляемыеДанные.Количество() = 0 Тогда 
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;  
	
	Метаданные.РегистрыНакопления.СебестоимостьТоваров.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	
	Регистраторы = Новый Массив;
	
	Регистраторы.Добавить("Документ.ПрочееОприходованиеТоваров");
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");
	Регистраторы.Добавить("Документ.ВнутреннееПотреблениеТоваров");
	Регистраторы.Добавить("Документ.РеализацияТоваровУслуг");
	Регистраторы.Добавить("Документ.СборкаТоваров");
	Регистраторы.Добавить("Документ.КорректировкаНазначенияТоваров");
	Регистраторы.Добавить("Документ.ПередачаТоваровМеждуОрганизациями");
	Регистраторы.Добавить("Документ.ВозвратТоваровМеждуОрганизациями");
	Регистраторы.Добавить("Справочник.КлючиАналитикиУчетаНоменклатуры");
	Регистраторы.Добавить("Справочник.ВидыЗапасов");
	Регистраторы.Добавить("РегистрНакопления.ПартииПроизводственныхЗатрат");
	
	//++ НЕ УТ
	Регистраторы.Добавить("Документ.ПередачаМатериаловВПроизводство");
	Регистраторы.Добавить("Документ.ВозвратМатериаловИзПроизводства");
	Регистраторы.Добавить("Документ.ВыпускПродукции");
	Регистраторы.Добавить("РегистрНакопления.ПартииНезавершенногоПроизводства");
	//-- НЕ УТ
	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ДополнительныеПараметрыПроверкиБлокировки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыПроверкиБлокировки.ИмяВременнойТаблицы = "ВтЗаблокированныеСсылки";
	ЗаблокированныеСсылки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
		Параметры.Очередь,
		Регистраторы,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметрыПроверкиБлокировки
	);

	ТекстЗапроса = " 
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВсеОбновляемыеДанные
	|ИЗ
	|	&ОбновляемыеДанные КАК СсылкиДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ОбновляемыеДанные
	|ИЗ
	|	ВсеОбновляемыеДанные КАК СсылкиДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокированныеСсылки
	|		ПО СсылкиДляОбработки.Регистратор = ВтЗаблокированныеСсылки.Ссылка
	|ГДЕ
	|	ВтЗаблокированныеСсылки.Ссылка ЕСТЬ NULL 
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор
	|ИЗ
	|	ОбновляемыеДанные КАК СсылкиДляОбработки
	|
	//++ НЕ УТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК СсылкаНаОбъект,
	|	СебестоимостьТоваров.ДокументДвижения КАК СтараяСсылка,
	|	ЕСТЬNULL(ПередачаМатериаловВПроизводство.Ссылка, ВозвратМатериаловИзПроизводства.Ссылка) КАК НоваяСсылка
	|ИЗ
	|	ОбновляемыеДанные КАК СсылкиДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ПО СсылкиДляОбработки.Регистратор = СебестоимостьТоваров.Регистратор
	// ВнутреннееПотреблениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
	|		ПО СебестоимостьТоваров.ДокументДвижения = ВнутреннееПотреблениеТоваров.Ссылка
	|			И (ВнутреннееПотреблениеТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаМатериаловВПроизводство КАК ПередачаМатериаловВПроизводство
	|		ПО ПередачаМатериаловВПроизводство.Дата = ВнутреннееПотреблениеТоваров.Дата
	|			И ПередачаМатериаловВПроизводство.Номер = ВнутреннееПотреблениеТоваров.Номер
	// ПрочееОприходованиеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров КАК ПрочееОприходованиеТоваров
	|		ПО СебестоимостьТоваров.ДокументДвижения = ПрочееОприходованиеТоваров.Ссылка
	|			И (ПрочееОприходованиеТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратМатериаловИзПроизводства КАК ВозвратМатериаловИзПроизводства
	|		ПО ВозвратМатериаловИзПроизводства.Дата = ПрочееОприходованиеТоваров.Дата
	|			И ВозвратМатериаловИзПроизводства.Номер = ПрочееОприходованиеТоваров.Номер
	|ГДЕ
	|	(НЕ ПередачаМатериаловВПроизводство.Ссылка ЕСТЬ NULL 
	|			ИЛИ НЕ ВозвратМатериаловИзПроизводства.Ссылка ЕСТЬ NULL )
	//-- НЕ УТ
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;  
	
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРегистраторов = Результат[2].Выгрузить();
	//++ НЕ УТ
	ТаблицаЗамены = Результат[3].Выгрузить();
	ТаблицаЗамены.Индексы.Добавить("СсылкаНаОбъект, СтараяСсылка");
	//-- НЕ УТ
	
	Запрос.Текст = ТекстЗапросаОбновленияДвижений();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРегистраторов Цикл
		
		Регистратор = СтрокаТаблицы.Регистратор;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				ЭлементБлокировки = Блокировка.Добавить("Документ.ПеремещениеТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			//++ НЕ УТ
			ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПередачаМатериаловВПроизводство") Тогда
				ЭлементБлокировки = Блокировка.Добавить("Документ.ПередачаМатериаловВПроизводство");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВыпускПродукции") Тогда
				ЭлементБлокировки = Блокировка.Добавить("Документ.ВыпускПродукции");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПартииНезавершенногоПроизводства.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства") Тогда
				ЭлементБлокировки = Блокировка.Добавить("Документ.ВозвратМатериаловИзПроизводства");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПартииПроизводственныхЗатрат.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			//-- НЕ УТ
			ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаНазначенияТоваров") Тогда
				ЭлементБлокировки = Блокировка.Добавить("Документ.КорректировкаНазначенияТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ЭлементБлокировки = Блокировка.Добавить("Документ.РеализацияТоваровУслуг");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			КонецЕсли;
			
			Блокировка.Заблокировать();

			ТаблицаНовыхДвижений = РегистрыНакопления.СебестоимостьТоваров.СоздатьНаборЗаписей().ВыгрузитьКолонки();
			ТаблицаДополненияДвижений(Запрос.МенеджерВременныхТаблиц, Регистратор.Ссылка);                   
			
			Если ТипЗнч(Регистратор.Ссылка) <> Тип("ДокументСсылка.РасчетСебестоимостиТоваров")
				И ТипЗнч(Регистратор.Ссылка) <> Тип("ДокументСсылка.КорректировкаРегистров") Тогда
				ДополнитьДвижения(ТаблицаНовыхДвижений, Регистратор.Ссылка);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ТаблицаНовыхДвижений", ТаблицаНовыхДвижений);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			Запрос.УстановитьПараметр("ИспользоватьВидыЗапасов", Константы.УчитыватьСебестоимостьТоваровПоНазначениям.Получить());
			УстановитьПараметрЗапросаОбработчикаОбновления(Запрос);
			
			Набор = РегистрыНакопления.СебестоимостьТоваров.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			ИначеЕсли Результат[0].КлючиИнициализированы = 0 Тогда
				ТекстСообщения = НСтр("ru='есть необновленные ключи. Необходимо перепровести документ вручную.';uk='існують неоновлені ключі. Необхідно перепровести документ вручну.'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			
			//++ НЕ УТ
			СписокПараметровВыборки = Новый Массив;
			ПараметрыВыборки = ПараметрыВыборкиСвязанныхДанных(
				"РегистрНакопления.СебестоимостьТоваров.Реквизит.ДокументДвижения");
			СписокПараметровВыборки.Добавить(ПараметрыВыборки);
			
			ЗаменитьСсылкиВКоллекции(
					Регистратор, 
					СписокПараметровВыборки, 
					ТаблицаЗамены, 
					Набор
			);
			//-- НЕ УТ 
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();  
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), 
				ТекстСообщения
			);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
	
КонецПроцедуры



Процедура УстановитьПараметрЗапросаОбработчикаОбновления(Запрос)
	
	ЗабалансовыеРазделыУчета = Новый Массив;
	ЗабалансовыеРазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию);
	ЗабалансовыеРазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку);
	
	Запрос.УстановитьПараметр("ЗабалансовыеРазделыУчета", ЗабалансовыеРазделыУчета);
	Запрос.УстановитьПараметр("ИспользоватьВидыЗапасов",  ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоНазначениям"));
	
КонецПроцедуры

Процедура ТаблицаДополненияДвижений(МенеджерВременныхТаблиц, Регистратор = Неопределено)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВТДляДобавленияДвижений
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Док
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ПО ТаблицаВидыЗапасов.Ссылка = Док.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК Движения
	|	ПО Док.Ссылка = Движения.Регистратор
	|		И Движения.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|ГДЕ
	|	Док.Проведен
	|	И ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|	И Движения.Регистратор ЕСТЬ NULL
	|	//%УсловиеОтбора%
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПередачаМатериаловВПроизводство КАК Док
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаМатериаловВПроизводство.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ПО ТаблицаВидыЗапасов.Ссылка = Док.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК Движения
	|	ПО Док.Ссылка = Движения.Регистратор
	|		И Движения.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|ГДЕ
	|	Док.Проведен
	|	И (ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|		ИЛИ ТаблицаВидыЗапасов.ВидЗапасовПолучателя.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))
	|	И Движения.Регистратор ЕСТЬ NULL
	|	//%УсловиеОтбора%
	|
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров КАК Док
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаНазначенияТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ПО ТаблицаВидыЗапасов.Ссылка = Док.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК Движения
	|	ПО Док.Ссылка = Движения.Регистратор
	|		И Движения.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|ГДЕ
	|	Док.Проведен
	|	И ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|	И Движения.Регистратор ЕСТЬ NULL
	|	//%УсловиеОтбора%
	| 
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ВыпускПродукции КАК Док
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыпускПродукции.Товары КАК ТаблицаТовары
	|	ПО ТаблицаТовары.Ссылка = Док.Ссылка
	|		И ТаблицаТовары.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК Движения
	|	ПО Док.Ссылка = Движения.Регистратор
	|		И Движения.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|ГДЕ
	|	Док.Проведен
	|	И Движения.Регистратор ЕСТЬ NULL
	|	//%УсловиеОтбора%
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ВозвратМатериаловИзПроизводства КАК Док
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииПроизводственныхЗатрат КАК Партии
	|	ПО Партии.Регистратор = Док.Ссылка
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК Движения
	|	ПО Док.Ссылка = Движения.Регистратор
	|		И Движения.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|ГДЕ
	|	Док.Проведен
	|	И Движения.Регистратор ЕСТЬ NULL
	|	//%УсловиеОтбора%
	//-- НЕ УТ
	|");
	
	Если Регистратор <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеОтбора%", "И Док.Ссылка = &Регистратор");
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить(); 
	
КонецПроцедуры

Процедура ДополнитьДвижения(ТаблицаНовыхДвижений, Ссылка)
	
	ИмяРегистра = "СебестоимостьТоваров";
	ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Ссылка, ИмяРегистра);
	Если Не ТаблицыДляДвижений.Свойство("Таблица"+ИмяРегистра) Тогда
		Возврат;
	КонецЕсли;
	Таблица = ТаблицыДляДвижений["Таблица"+ИмяРегистра];
	
	Отбор = Новый Структура("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение);
	Строки = Таблица.НайтиСтроки(Отбор);
	Для Каждого ТекущаяСтрока Из Строки Цикл
		Если ТекущаяСтрока.РазделУчета = Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение Тогда
			НоваяСтрока = ТаблицаНовыхДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.Регистратор = Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	//++ НЕ УТ
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства") Тогда
		ДополнитьДвижениямиПоРегистру(ТаблицаНовыхДвижений, "РегистрНакопления.ПартииПроизводственныхЗатрат", Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВыпускПродукции") Тогда
		ДополнитьДвижениямиПоРегистру(ТаблицаНовыхДвижений, "РегистрНакопления.ПартииНезавершенногоПроизводства", Ссылка);
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

Функция ТекстЗапросаОбновленияДвижений()
	
	Возврат "
	|ВЫБРАТЬ
	|	Таблица.Регистратор            								КАК Регистратор,
	|	Таблица.Период                 								КАК Период,
	|	Таблица.ВидДвижения            								КАК ВидДвижения,
	|	Таблица.АналитикаУчетаНоменклатуры							КАК АналитикаУчетаНоменклатуры,
	|	Таблица.РазделУчета                   						КАК РазделУчета,
	|	Таблица.ВидЗапасов                    						КАК ВидЗапасов,
	|	Таблица.Организация                   						КАК Организация,
	|
	|	Таблица.Количество             								КАК Количество,
	|	Таблица.Стоимость											КАК Стоимость,
	|	Таблица.СтоимостьБезНДС										КАК СтоимостьБезНДС,
	|	Таблица.СтоимостьЗабалансовая								КАК СтоимостьЗабалансовая,
	|	Таблица.ДопРасходы       									КАК ДопРасходы,
	|	Таблица.ДопРасходыБезНДС 									КАК ДопРасходыБезНДС,
	|	Таблица.СтоимостьРегл										КАК СтоимостьРегл,
	|	Таблица.СтоимостьРеглБезНДС									КАК СтоимостьРеглБезНДС,
	|	Таблица.НДСРегл												КАК НДСРегл,
	|	Таблица.СтоимостьРегл 										КАК СтоимостьЗабалансоваяРегл,
	|	Таблица.ПостояннаяРазница      								КАК ПостояннаяРазница,
	|	Таблица.ВременнаяРазница       								КАК ВременнаяРазница,
	|
	|	Таблица.ХозяйственнаяОперация      							КАК ХозяйственнаяОперация,
	|	Таблица.КорАналитикаУчетаНоменклатуры						КАК КорАналитикаУчетаНоменклатуры,
	|	Таблица.КорРазделУчета                						КАК КорРазделУчета,
	|	Таблица.КорВидЗапасов                 						КАК КорВидЗапасов,
	|	Таблица.КорОрганизация                						КАК КорОрганизация,
	|	Таблица.КорСтоимость                  						КАК КорСтоимость,
	|	Таблица.АналитикаУчетаПоПартнерам     						КАК АналитикаУчетаПоПартнерам,
	|	Таблица.ЗаказКлиента                  						КАК ЗаказКлиента,
	|	Таблица.Подразделение                 						КАК Подразделение,
	|	Таблица.АналитикаРасходов             						КАК АналитикаРасходов,
	|	Таблица.СтатьяРасходовСписания        						КАК СтатьяРасходовСписания,
	|	Таблица.СтатьяДоходов                 						КАК СтатьяДоходов,
	|	Таблица.АналитикаДоходов              						КАК АналитикаДоходов,
	|	Таблица.ПериодПродажи                 						КАК ПериодПродажи,
	|	Таблица.СтатьяАктивовПассивов         						КАК СтатьяАктивовПассивов,
	|	Таблица.АналитикаАктивовПассивов      						КАК АналитикаАктивовПассивов,
	|	Таблица.ДокументДвижения              						КАК ДокументДвижения,
	|	Таблица.ИдентификаторСтроки           						КАК ИдентификаторСтроки,
	|	Таблица.ГруппаПродукции               						КАК ГруппаПродукции,
	|	Таблица.РасчетСебестоимости           						КАК РасчетСебестоимости,
	|	Таблица.НалоговоеНазначение21                   			КАК НалоговоеНазначение21,
	|	Таблица.КорНалоговоеНазначение         						КАК КорНалоговоеНазначение
	|ПОМЕСТИТЬ ТаблицаНовыхДвижений
	|ИЗ
	|	&ТаблицаНовыхДвижений КАК Таблица
	|;
	|//////////////////////////////////////////////////////////
	//++ НЕ УТ
	// Для документов "Выпуск продукции" и "Возврат материалов из производства"
	// расходные движения по продукции давальца не формируются при проведении документа,
	// а формируются офлайн, при восстановлении партионного учета.
	// Поэтому данные для них берем из регистров партий.
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.ВидДвижения КАК ВидДвижения,
	|	Движения.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение) КАК РазделУчета,
	|	ВЫБОР КОГДА &ИспользоватьВидыЗапасов
	|		ТОГДА Движения.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	Движения.Организация КАК Организация,
	|	СУММА(Движения.Количество) КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции) КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ОфлайновыеДвижения
	|ИЗ
	|	ВТДляДобавленияДвижений КАК Таблица
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииПроизводственныхЗатрат КАК Движения
	|	ПО Движения.Регистратор = Таблица.Регистратор
	|ГДЕ
	|	Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|	И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Движения.Регистратор ССЫЛКА Документ.ВозвратМатериаловИзПроизводства
	|СГРУППИРОВАТЬ ПО
	|	Движения.Период,
	|	Движения.Регистратор,
	|	Движения.ВидДвижения,
	|	Движения.АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение),
	|	ВЫБОР КОГДА &ИспользоватьВидыЗапасов
	|		ТОГДА Движения.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Движения.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.ВидДвижения КАК ВидДвижения,
	|	Движения.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение) КАК РазделУчета,
	|	ВЫБОР КОГДА &ИспользоватьВидыЗапасов
	|		ТОГДА Движения.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	Движения.Организация КАК Организация,
	|	СУММА(Движения.Количество) КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства) КАК ХозяйственнаяОперация
	|ИЗ
	|	ВТДляДобавленияДвижений КАК Таблица
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииНезавершенногоПроизводства КАК Движения
	|	ПО Движения.Регистратор = Таблица.Регистратор
	|ГДЕ
	|	Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|	И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Движения.Регистратор ССЫЛКА Документ.ВыпускПродукции
	|СГРУППИРОВАТЬ ПО
	|	Движения.Период,
	|	Движения.Регистратор,
	|	Движения.ВидДвижения,
	|	Движения.АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение),
	|	ВЫБОР КОГДА &ИспользоватьВидыЗапасов
	|		ТОГДА Движения.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Движения.Организация
	|;
	|//////////////////////////////////////////////////////////
	//-- НЕ УТ
	|ВЫБРАТЬ
	|	Движения.Регистратор            								КАК Регистратор,
	|	Движения.Период                 								КАК Период,
	|	Движения.ВидДвижения            								КАК ВидДвижения,
	|	ВЫБОР КОГДА &ИспользоватьВидыЗапасов
	|		И НЕ Аналитика.КлючАналитики ЕСТЬ NULL
	|		И НЕ ВидыЗапасовДвижений.Ссылка ЕСТЬ NULL
	|		И ВидыЗапасовДвижений.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ВидыЗапасовДвижений.УстарелоНазначение <> Ключи.Назначение
	|		ТОГДА Аналитика.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                                  							КАК АналитикаУчетаНоменклатуры,
	|	Движения.РазделУчета                   							КАК РазделУчета,
	|	ВЫБОР КОГДА &ИспользоватьВидыЗапасов
	|		И Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ВидЗапасов
	|	КОНЕЦ КАК ВидЗапасов,
	|	Движения.Организация                   							КАК Организация,
	|
	|	Движения.Количество             								КАК Количество,
	|	ВЫБОР КОГДА Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|		ТОГДА 0
	|		ИНАЧЕ Движения.Стоимость
	|	КОНЕЦ 															КАК Стоимость,
	|	ВЫБОР КОГДА Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|		ТОГДА 0
	|		ИНАЧЕ Движения.СтоимостьБезНДС
	|	КОНЕЦ 															КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|	 И Движения.Стоимость <> 0
	|		ТОГДА Движения.Стоимость
	|		ИНАЧЕ Движения.СтоимостьЗабалансовая
	|	КОНЕЦ 															КАК СтоимостьЗабалансовая,
	|	Движения.ДопРасходы       										КАК ДопРасходы,
	|	Движения.ДопРасходыБезНДС 										КАК ДопРасходыБезНДС,
	|	ВЫБОР КОГДА Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|		ТОГДА 0
	|		ИНАЧЕ Движения.СтоимостьРегл
	|	КОНЕЦ 															КАК СтоимостьРегл,
	|	ВЫБОР КОГДА Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|		ТОГДА 0
	|		ИНАЧЕ Движения.СтоимостьРеглБезНДС
	|	КОНЕЦ 															КАК СтоимостьРеглБезНДС,
	|	ВЫБОР КОГДА Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|		ТОГДА 0
	|		ИНАЧЕ Движения.НДСРегл
	|	КОНЕЦ 															КАК НДСРегл,
	|	ВЫБОР КОГДА Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|	 И Движения.СтоимостьРегл <> 0
	|		ТОГДА Движения.СтоимостьРегл
	|		ИНАЧЕ Движения.СтоимостьЗабалансоваяРегл
	|	КОНЕЦ 															КАК СтоимостьЗабалансоваяРегл,
	|	Движения.ПостояннаяРазница      								КАК ПостояннаяРазница,
	|	Движения.ВременнаяРазница       								КАК ВременнаяРазница,
	|
	|	ВЫБОР КОГДА Движения.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|	 И Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями)
	|	КОГДА Движения.Регистратор ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА СборкаТоваров.ХозяйственнаяОперация
	|	КОГДА Движения.ДокументДвижения ССЫЛКА Документ.СборкаТоваров
	|		ТОГДА Источник.ХозяйственнаяОперация
	//++ НЕ УТ
	|	КОГДА НЕ ПередачаМатериаловВПроизводство.ХозяйственнаяОперация ЕСТЬ NULL ТОГДА
	|		ПередачаМатериаловВПроизводство.ХозяйственнаяОперация
	//-- НЕ УТ
	|		ИНАЧЕ Движения.ХозяйственнаяОперация
	|	КОНЕЦ                                  							КАК ХозяйственнаяОперация,
	|	ВЫБОР КОГДА &ИспользоватьВидыЗапасов
	|		И НЕ КорАналитика.КлючАналитики ЕСТЬ NULL
	|		И НЕ КорВидыЗапасов.Ссылка ЕСТЬ NULL
	|		И КорВидыЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И КорВидыЗапасов.УстарелоНазначение <> КорКлючи.Назначение
	|		ТОГДА КорАналитика.КлючАналитики
	|		ИНАЧЕ Движения.КорАналитикаУчетаНоменклатуры
	|	КОНЕЦ                                  							КАК КорАналитикаУчетаНоменклатуры,
	|	Движения.КорРазделУчета                							КАК КорРазделУчета,
	|	ВЫБОР КОГДА &ИспользоватьВидыЗапасов 
	|			И Движения.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.КорВидЗапасов
	|	КОНЕЦ КАК КорВидЗапасов,
	|	Движения.КорОрганизация                							КАК КорОрганизация,
	|	Движения.КорСтоимость                  							КАК КорСтоимость,
	|	Движения.АналитикаУчетаПоПартнерам     							КАК АналитикаУчетаПоПартнерам,
	|	Движения.ЗаказКлиента                  							КАК ЗаказКлиента,
	|	Движения.Подразделение                 							КАК Подразделение,
	|	Движения.АналитикаРасходов             							КАК АналитикаРасходов,
	|	Движения.СтатьяРасходовСписания        							КАК СтатьяРасходовСписания,
	|	Движения.СтатьяДоходов                 							КАК СтатьяДоходов,
	|	Движения.АналитикаДоходов              							КАК АналитикаДоходов,
	|	Движения.ПериодПродажи                 							КАК ПериодПродажи,
	|	Движения.СтатьяАктивовПассивов         							КАК СтатьяАктивовПассивов,
	|	Движения.АналитикаАктивовПассивов      							КАК АналитикаАктивовПассивов,
	|	Движения.ДокументДвижения              							КАК ДокументДвижения,
	|	Движения.ИдентификаторСтроки           							КАК ИдентификаторСтроки,
	|	Движения.ГруппаПродукции               							КАК ГруппаПродукции,
	|	Движения.РасчетСебестоимости           							КАК РасчетСебестоимости,
	|	Движения.НалоговоеНазначение21                   				КАК НалоговоеНазначение21,
	|	Движения.КорНалоговоеНазначение         						КАК КорНалоговоеНазначение,
	|
	|	ВЫБОР
	|		КОГДА (Аналитика.КлючАналитики ЕСТЬ NULL
	|			И &ИспользоватьВидыЗапасов
	|			И НЕ ВидыЗапасовДвижений.Ссылка ЕСТЬ NULL
	|			И ВидыЗапасовДвижений.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И ВидыЗапасовДвижений.УстарелоНазначение <> Ключи.Назначение)
	|		ИЛИ (КорАналитика.КлючАналитики ЕСТЬ NULL
	|			И Движения.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			И &ИспользоватьВидыЗапасов
	|			И НЕ КорВидыЗапасов.Ссылка ЕСТЬ NULL
	|			И КорВидыЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И КорВидыЗапасов.УстарелоНазначение <> КорКлючи.Назначение)
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Движения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасовДвижений
	|	ПО Движения.ВидЗапасов = ВидыЗапасовДвижений.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК КорВидыЗапасов
	|	ПО Движения.КорВидЗапасов = КорВидыЗапасов.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = Движения.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия = Аналитика.Серия
	|		И Ключи.МестоХранения = Аналитика.МестоХранения
	|		И ЕСТЬNULL(ВидыЗапасовДвижений.УстарелоНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) = Аналитика.Назначение
	//++ НЕ УТ
	|		И Ключи.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	//-- НЕ УТ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КорКлючи
	|	ПО КорКлючи.Ссылка = Движения.КорАналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитика
	|	ПО КорКлючи.Номенклатура = КорАналитика.Номенклатура
	|		И КорКлючи.Характеристика = КорАналитика.Характеристика
	|		И КорКлючи.Серия = КорАналитика.Серия
	|		И КорКлючи.МестоХранения = КорАналитика.МестоХранения
	|		И ЕСТЬNULL(КорВидыЗапасов.УстарелоНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) = КорАналитика.Назначение
	//++ НЕ УТ
	|		И КорКлючи.СтатьяКалькуляции = КорАналитика.СтатьяКалькуляции
	//-- НЕ УТ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК СборкаТоваров
	|	ПО Движения.Регистратор = СборкаТоваров.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Источник
	|	ПО Движения.ДокументДвижения = Источник.Ссылка
	|	
	|
	//++ НЕ УТ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаМатериаловВПроизводство КАК ПередачаМатериаловВПроизводство
	|	ПО Движения.Регистратор = ПередачаМатериаловВПроизводство.Ссылка
	//-- НЕ УТ
	|
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Регистратор            								КАК Регистратор,
	|	Таблица.Период                 								КАК Период,
	|	Таблица.ВидДвижения            								КАК ВидДвижения,
	|	Таблица.АналитикаУчетаНоменклатуры							КАК АналитикаУчетаНоменклатуры,
	|	Таблица.РазделУчета                   						КАК РазделУчета,
	|	Таблица.ВидЗапасов                    						КАК ВидЗапасов,
	|	Таблица.Организация                   						КАК Организация,
	|
	|	Таблица.Количество             								КАК Количество,
	|	Таблица.Стоимость											КАК Стоимость,
	|	Таблица.СтоимостьБезНДС										КАК СтоимостьБезНДС,
	|	Таблица.СтоимостьЗабалансовая								КАК СтоимостьЗабалансовая,
	|	Таблица.ДопРасходы       									КАК ДопРасходы,
	|	Таблица.ДопРасходыБезНДС 									КАК ДопРасходыБезНДС,
	|	Таблица.СтоимостьРегл										КАК СтоимостьРегл,
	|	Таблица.СтоимостьРеглБезНДС									КАК СтоимостьРеглБезНДС,
	|	Таблица.НДСРегл												КАК НДСРегл,
	|	Таблица.СтоимостьРегл 										КАК СтоимостьЗабалансоваяРегл,
	|	Таблица.ПостояннаяРазница      								КАК ПостояннаяРазница,
	|	Таблица.ВременнаяРазница       								КАК ВременнаяРазница,
	|
	|	Таблица.ХозяйственнаяОперация      							КАК ХозяйственнаяОперация,
	|	Таблица.КорАналитикаУчетаНоменклатуры						КАК КорАналитикаУчетаНоменклатуры,
	|	Таблица.КорРазделУчета                						КАК КорРазделУчета,
	|	Таблица.КорВидЗапасов                 						КАК КорВидЗапасов,
	|	Таблица.КорОрганизация                						КАК КорОрганизация,
	|	Таблица.КорСтоимость                  						КАК КорСтоимость,
	|	Таблица.АналитикаУчетаПоПартнерам     						КАК АналитикаУчетаПоПартнерам,
	|	Таблица.ЗаказКлиента                  						КАК ЗаказКлиента,
	|	Таблица.Подразделение                 						КАК Подразделение,
	|	Таблица.АналитикаРасходов             						КАК АналитикаРасходов,
	|	Таблица.СтатьяРасходовСписания        						КАК СтатьяРасходовСписания,
	|	Таблица.СтатьяДоходов                 						КАК СтатьяДоходов,
	|	Таблица.АналитикаДоходов              						КАК АналитикаДоходов,
	|	Таблица.ПериодПродажи                 						КАК ПериодПродажи,
	|	Таблица.СтатьяАктивовПассивов         						КАК СтатьяАктивовПассивов,
	|	Таблица.АналитикаАктивовПассивов      						КАК АналитикаАктивовПассивов,
	|	Таблица.ДокументДвижения              						КАК ДокументДвижения,
	|	Таблица.ИдентификаторСтроки           						КАК ИдентификаторСтроки,
	|	Таблица.ГруппаПродукции               						КАК ГруппаПродукции,
	|	ЛОЖЬ						           						КАК РасчетСебестоимости,
	|	Таблица.НалоговоеНазначение21                   			КАК НалоговоеНазначение21,
	|	Таблица.КорНалоговоеНазначение         						КАК КорНалоговоеНазначение,
	|
	|	ВЫБОР КОГДА (Таблица.АналитикаУчетаНоменклатуры ЕСТЬ NULL И &ИспользоватьВидыЗапасов И Таблица.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
	|ИЗ
	|	ТаблицаНовыхДвижений КАК Таблица
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партии.Регистратор            								КАК Регистратор,
	|	Партии.Период                 								КАК Период,
	|	Партии.ВидДвижения            								КАК ВидДвижения,
	|	Партии.АналитикаУчетаНоменклатуры							КАК АналитикаУчетаНоменклатуры,
	|	Партии.РазделУчета                   						КАК РазделУчета,
	|	Партии.ВидЗапасов                    						КАК ВидЗапасов,
	|	Партии.Организация                   						КАК Организация,
	|
	|	Партии.Количество             								КАК Количество,
	|	0 															КАК Стоимость,
	|	0															КАК СтоимостьБезНДС,
	|	0															КАК СтоимостьЗабалансовая,
	|	0						       								КАК ДопРасходы,
	|	0							 								КАК ДопРасходыБезНДС,
	|	0															КАК СтоимостьРегл,
	|	0															КАК СтоимостьРеглБезНДС,
	|	0															КАК НДСРегл,
	|	0															КАК СтоимостьЗабалансоваяРегл,
	|	0						      								КАК ПостояннаяРазница,
	|	0						       								КАК ВременнаяРазница,
	|
	|	Партии.ХозяйственнаяОперация     							КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО												КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО		                						КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО		                 						КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО		                						КАК КорОрганизация,
	|	0					                  						КАК КорСтоимость,
	|	НЕОПРЕДЕЛЕНО					     						КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО		                  						КАК ЗаказКлиента,
	|	НЕОПРЕДЕЛЕНО		                 						КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО			             						КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО				        						КАК СтатьяРасходовСписания,
	|	НЕОПРЕДЕЛЕНО		                 						КАК СтатьяДоходов,
	|	НЕОПРЕДЕЛЕНО			              						КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО		                 						КАК ПериодПродажи,
	|	НЕОПРЕДЕЛЕНО				         						КАК СтатьяАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО					      						КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО			              						КАК ДокументДвижения,
	|	НЕОПРЕДЕЛЕНО				           						КАК ИдентификаторСтроки,
	|	НЕОПРЕДЕЛЕНО			               						КАК ГруппаПродукции,
	|	ЛОЖЬ						           						КАК РасчетСебестоимости,
	|	НЕОПРЕДЕЛЕНО                   								КАК НалоговоеНазначение21,
	|	НЕОПРЕДЕЛЕНО				         						КАК КорНалоговоеНазначение,
	|
	|	ВЫБОР КОГДА (Партии.АналитикаУчетаНоменклатуры ЕСТЬ NULL И &ИспользоватьВидыЗапасов И Партии.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
	|ИЗ
	|	ОфлайновыеДвижения КАК Партии
	//-- НЕ УТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючиИнициализированы
	|";
	
КонецФункции

//++ НЕ УТ

Процедура ДополнитьДвижениямиПоРегистру(ТаблицаНовыхДвижений, ИмяРегистра, Ссылка)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.Регистратор КАК Регистратор,
	|
	|	Движения.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение) КАК РазделУчета,
	|	ВЫБОР КОГДА &ИспользоватьВидыЗапасов
	|		ТОГДА Движения.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	Движения.Организация КАК Организация,
	|
	|	СУММА(Движения.Количество) КАК Количество
	|ИЗ
	|	&ИмяРегистра КАК Движения
	|ГДЕ
	|	Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	// вид движения - расход
	|	И Движения.Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО
	|	Движения.Период,
	|	Движения.Регистратор,
	|	Движения.АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение),
	|	ВЫБОР КОГДА &ИспользоватьВидыЗапасов
	|		ТОГДА Движения.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Движения.Организация
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРегистра", ИмяРегистра);
	Запрос.УстановитьПараметр("ИспользоватьВидыЗапасов", Константы.УчитыватьСебестоимостьТоваровПоНазначениям.Получить());
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Строки = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекущаяСтрока Из Строки Цикл
		НоваяСтрока = ТаблицаНовыхДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбъектыДляЗаменыСсылок(Параметры, ДополнительныеПараметры)

	ПолноеИмяРегистра = "РегистрНакопления.СебестоимостьТоваров";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СебестоимостьТоваров.Регистратор
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
	|		ПО СебестоимостьТоваров.ДокументДвижения = ВнутреннееПотреблениеТоваров.Ссылка
	|			И (ВнутреннееПотреблениеТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров КАК ПрочееОприходованиеТоваров
	|		ПО СебестоимостьТоваров.ДокументДвижения = ПрочееОприходованиеТоваров.Ссылка
	|			И (ПрочееОприходованиеТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства))
	|ГДЕ
	|	(НЕ ВнутреннееПотреблениеТоваров.Ссылка ЕСТЬ NULL 
	|			ИЛИ НЕ ПрочееОприходованиеТоваров.Ссылка ЕСТЬ NULL )";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы, 
		ПолноеИмяРегистра
	);
	
КонецПроцедуры

Процедура ЗаменитьСсылкиВКоллекции(СсылкаНаОбъект, СписокПараметровВыборки, ТаблицаЗамены, КоллекцияОбъекта)

	Для каждого ДанныеСтроки Из КоллекцияОбъекта Цикл
		Для каждого ПараметрыВыборки Из СписокПараметровВыборки Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
			СтруктураПоиска.Вставить("СтараяСсылка", ДанныеСтроки[ПараметрыВыборки.Реквизит]);
			ДанныеДляЗаменыСсылок = ТаблицаЗамены.НайтиСтроки(СтруктураПоиска);
			Если ДанныеДляЗаменыСсылок.Количество() <> 0 Тогда
				НоваяСсылка = ДанныеДляЗаменыСсылок[0].НоваяСсылка;
				Если ЗначениеЗаполнено(НоваяСсылка) Тогда
					ДанныеСтроки[ПараметрыВыборки.Реквизит] = НоваяСсылка;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

Функция ПараметрыВыборкиСвязанныхДанных(ПутьКРеквизиту, ВыбратьПорцию = Истина)

	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКРеквизиту, ".");
	ВидТаблицы = МассивСтрок[0];
	ИмяТаблицы = МассивСтрок[1];
	
	Если МассивСтрок.ВГраница() = 3 Тогда
		ИмяПодчиненнойТаблицы = "";
		Реквизит = МассивСтрок[3];
	Иначе
		ИмяПодчиненнойТаблицы = МассивСтрок[3];
		Реквизит = МассивСтрок[5];
	КонецЕсли; 
	
	ЭтоНезависимыйРегистрСведений = Ложь;
	
	Если ВидТаблицы = "РегистрНакопления" Тогда
		ПолеОтбора = "Регистратор";
	ИначеЕсли ВидТаблицы = "РегистрСведений" Тогда
		Если Метаданные.РегистрыСведений[ИмяТаблицы].РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			ПолеОтбора = "Регистратор";
		Иначе
			ПолеОтбора = Реквизит;
			ЭтоНезависимыйРегистрСведений = Истина;
		КонецЕсли;
	ИначеЕсли ВидТаблицы = "Справочник" ИЛИ ВидТаблицы = "Документ" Тогда
		ПолеОтбора = "Ссылка";
	Иначе
		ПолеОтбора = "";
	КонецЕсли;
	
	ИмяОсновнойТаблицы = ВидТаблицы + "." + ИмяТаблицы + ?(ИмяПодчиненнойТаблицы <> "", "." + ИмяПодчиненнойТаблицы, "");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ " + ?(ВыбратьПорцию, "ПЕРВЫЕ 500", "") + "
	|	Т." + Реквизит + " КАК СтараяСсылка,
	|	" + ?(ЗначениеЗаполнено(ПолеОтбора), "Т." + ПолеОтбора, """") + " КАК СсылкаНаОбъект
	|ИЗ
	|	" + ИмяОсновнойТаблицы + " КАК Т
	|ГДЕ
	|	Т." + Реквизит + " В (&СписокСсылок)";
	
	ПараметрыВыборки = Новый Структура;
	ПараметрыВыборки.Вставить("ТекстЗапроса", ТекстЗапроса);
	ПараметрыВыборки.Вставить("ВидТаблицы", ВидТаблицы);
	ПараметрыВыборки.Вставить("ИмяТаблицы", ИмяТаблицы);
	ПараметрыВыборки.Вставить("Реквизит", Реквизит);
	ПараметрыВыборки.Вставить("ПолеОтбора", ПолеОтбора);
	ПараметрыВыборки.Вставить("ЭтоНезависимыйРегистрСведений", ЭтоНезависимыйРегистрСведений);
	ПараметрыВыборки.Вставить("ИмяОсновнойТаблицы", ИмяОсновнойТаблицы);
	ПараметрыВыборки.Вставить("ИмяПодчиненнойТаблицы", ИмяПодчиненнойТаблицы);
	ПараметрыВыборки.Вставить("ПолноеИмяОбъекта", ВидТаблицы + "." + ИмяТаблицы);
	
	Возврат ПараметрыВыборки;

КонецФункции

//-- НЕ УТ


#КонецОбласти

#КонецОбласти

#КонецЕсли
