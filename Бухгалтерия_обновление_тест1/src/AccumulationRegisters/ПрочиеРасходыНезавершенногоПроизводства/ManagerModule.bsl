#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

//++ НЕ УТ

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели()
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
    
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Стоимость", "ВалютаУпр"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьБезНДС", "ВалютаУпр"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРеглБезНДС", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДС", "ВалютаУпр"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5d2bf74b-6246-41d7-a7fe-395a7890f331");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = ""
		+ "Документ.РаспределениеПроизводственныхЗатрат,"
		+ "Документ.ОтчетПереработчика,"
		+ "Документ.РаспределениеПрочихЗатрат,"
		+ "РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства,"
		+ "Документ.КорректировкаРегистров,"
		+ "Справочник.КлючиАналитикиУчетаНоменклатуры,"
		+ "Справочник.ВидыЗапасов";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Заполняет новое поле ""Направление деятельности"", очищает поле ""Вид запасов"" для работ.
                                   |Заполняет ключи аналитики учета номенклатуры. 
                                   |Данные прочих производственных расходов будут не корректны до окончания обработки.
                                   |Если обработчик обновления выполняется долго, необходимо отключить использование итогов (всех) для регистра накопления ""Прочие расходы незавершенного производства"".'
                                   |;uk='Заповнює нове поле ""Напрямок діяльності"", очищає поле ""Вид запасів"" для робіт.
                                   |Заповнює ключі аналітики обліку номенклатури.
                                   |Дані інших виробничих витрат не будуть коректні до закінчення обробки.
                                   |Якщо обробник оновлення виконується довго, необхідно відключити використання підсумків (всіх) для регістру накопичення ""Інші витрати незавершеного виробництва"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РаспределениеПроизводственныхЗатрат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РаспределениеПрочихЗатрат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьКлючиАналитикиНоменклатуры(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);	                        
	
КонецПроцедуры	

// Обработчик обновления КА 2.5.4
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ТипыДокументовКОбработке();
	ПараметрыВыборки.ПолныеИменаРегистров = Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОбработке.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.АналитикаУчетаПродукции.Назначение <> ДанныеРегистра.ВидЗапасов.УстарелоНазначение
	|		И ДанныеРегистра.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ДанныеРегистра.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И ДанныеРегистра.АналитикаУчетаПродукции <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) <> ТИП(Документ.РаспределениеПрочихЗатрат)
	|		И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) <> ТИП(Документ.КорректировкаРегистров)
	|		И ДанныеРегистра.АналитикаУчетаПродукции <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|	) КАК КОбработке
	|");
	
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Регистраторы, 
		ДополнительныеПараметры
	);   
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	(
		// Очистка вида запасов услуг
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|
	|	) КАК ДанныеРегистра
	|");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления заполняет новый реквизит "Назначение" в справочнике "Ключи аналитики учета номенклатуры",
// и обновляет движения по регистру.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = "РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Движения.Регистратор) = ТИП(Документ.РаспределениеПрочихЗатрат)
	|		ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОГДА ТИПЗНАЧЕНИЯ(Движения.Регистратор) = ТИП(Документ.ОтчетПереработчика)
	|		И Движения.АналитикаУчетаПродукции = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОГДА ТИПЗНАЧЕНИЯ(Движения.Регистратор) = ТИП(Документ.КорректировкаРегистров)
	|		ТОГДА Движения.ВидДвижения
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                           			КАК ВидДвижения,
	|	Движения.Регистратор            			КАК Регистратор,
	|	Движения.Период                 			КАК Период,
	|	Движения.Организация                		КАК Организация,
	|	Движения.Подразделение              		КАК Подразделение,
	|	Движения.ЗаказНаПроизводство        		КАК ЗаказНаПроизводство,
	|	Движения.КодСтрокиПродукция         		КАК КодСтрокиПродукция,
	|	Движения.Этап                       		КАК Этап,
	|	Движения.СтатьяКалькуляции          		КАК СтатьяКалькуляции,
	|	Движения.СтатьяРасходов             		КАК СтатьяРасходов,
	|	Движения.АналитикаРасходов          		КАК АналитикаРасходов,
	|	Движения.ГруппаПродукции            		КАК ГруппаПродукции,
	|	Движения.НалоговоеНазначение            	КАК НалоговоеНазначение,
	|	Движения.Стоимость               			КАК Стоимость,
	|	Движения.СтоимостьБезНДС         			КАК СтоимостьБезНДС,
	|	Движения.СтоимостьРегл           			КАК СтоимостьРегл,
	|	Движения.СтоимостьРеглБезНДС           		КАК СтоимостьРеглБезНДС,
	|	Движения.НДСРегл           					КАК НДСРегл,
	|	Движения.ПостояннаяРазница       			КАК ПостояннаяРазница,
	|	Движения.ВременнаяРазница        			КАК ВременнаяРазница,
	|	Движения.ДоляСтоимости           			КАК ДоляСтоимости,
	|	Движения.ДоляСтоимости           			КАК УдалитьПоказательОтнесенияНаВыпуск,
	|	Движения.ДоляСтоимости           			КАК УдалитьПоказательОтнесенияНаВыпускБезНДС,
	|	Движения.ДоляСтоимости           			КАК УдалитьПоказательОтнесенияНаВыпускРегл,
	|	Движения.ДоляСтоимости           			КАК УдалитьПоказательОтнесенияНаВыпускУпр,
	|	Движения.Продукция                  		КАК Продукция,
	|	Движения.ХарактеристикаПродукции    		КАК ХарактеристикаПродукции,
	|	Движения.КоличествоПродукции        		КАК КоличествоПродукции,
	|	ВЫБОР КОГДА НЕ Аналитика.КлючАналитики ЕСТЬ NULL
	|		И Движения.АналитикаУчетаПродукции.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|		И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И Движения.АналитикаУчетаПродукции <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		ТОГДА Аналитика.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаПродукции
	|	КОНЕЦ                               		КАК АналитикаУчетаПродукции,
	|	Движения.РазделУчета                		КАК РазделУчета,
	|	ВЫБОР
	|		КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ВидЗапасов
	|	КОНЕЦ										КАК ВидЗапасов,
	|	Движения.ДокументДвижения           		КАК ДокументДвижения,
	|	Движения.ДокументИсточник           		КАК ДокументИсточник,
	|	Движения.ДокументВыпуска            		КАК ДокументВыпуска,
	|	Движения.НалоговоеНазначениеВыпуска        	КАК НалоговоеНазначениеВыпуска,
	|	Движения.РасчетСебестоимости        		КАК РасчетСебестоимости,
	|	Движения.РасчетПартий               		КАК РасчетПартий,
	|
	|	ВЫБОР КОГДА Аналитика.КлючАналитики ЕСТЬ NULL
	|		И Движения.АналитикаУчетаПродукции.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|		И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И Движения.АналитикаУчетаПродукции <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ                               		КАК КлючиИнициализированы,
	|	Движения.ПравилоОтнесенияНаВыпуск			КАК ПравилоОтнесенияНаВыпуск
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства КАК Движения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = Движения.АналитикаУчетаПродукции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия = Аналитика.Серия
	|		И Ключи.МестоХранения = Аналитика.МестоХранения
	|		И Движения.ВидЗапасов.УстарелоНазначение = Аналитика.Назначение
	|		И Ключи.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеПрочихЗатрат КАК ДД
	|	ПО (ВЫБОР
	|			КОГДА Движения.Регистратор ССЫЛКА Документ.РаспределениеПрочихЗатрат
	|				ТОГДА Движения.Регистратор = ДД.Ссылка
	|			ИНАЧЕ Движения.ДокументИсточник = ДД.Ссылка
	|		КОНЕЦ)
	|
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючиИнициализированы,
	|	НомерСтроки
	|";
	
	Для Каждого ТекДанные Из ОбновляемыеДанные Цикл
		
		Регистратор = ТекДанные.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			ИначеЕсли Результат[0].КлючиИнициализированы = 0 Тогда
				ТекстСообщения = НСтр("ru='есть необновленные ключи. Необходимо перепровести документ вручную.';uk='існують неоновлені ключі. Необхідно перепровести документ вручну.'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), 
				ТекстСообщения
			);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ТипыДокументовКОбработке()
	
	Возврат
	"Документ.РасчетСебестоимостиТоваров,
	//++ НЕ УТ
	|Документ.РаспределениеПрочихЗатрат,
	|Документ.ОтчетПереработчика,
	|Документ.ВыпускПродукции,
	|Документ.ПоступлениеОтПереработчика,
	//-- НЕ УТ
	|Документ.КорректировкаРегистров";
	
КонецФункции


#КонецОбласти

#КонецОбласти

#КонецЕсли