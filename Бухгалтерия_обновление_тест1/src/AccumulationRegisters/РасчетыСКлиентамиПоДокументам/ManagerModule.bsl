
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТ
#Область ОписаниеИсточника

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ПредоплатаУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ПредоплатаРегл", "ВалютаРегл"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Предоплата", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
    Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4eb7b587-08cf-4cbc-b869-de676f498b5a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновляет движения документов по регистру ""Расчеты с клиентами по документам"". 
                                   |Пока обработчик не выполнен, расчеты находятся в некорректном состоянии.'
                                   |;uk='Оновлює рухи документів по регістру ""Розрахунки з клієнтами за документами"".
                                   |Поки обробник не виконаний, розрахунки перебувають у некоректному стані.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РасчетКурсовыхРазниц.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ЗаданияКЗакрытиюМесяца.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютахУчета.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеДоходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьОбъектыРасчетов(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);

КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь)[1];
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
    
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ЗаказКлиента = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра
    );  
    
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентами
	|ГДЕ
	|	Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
    |	И УдалитьЗаказКлиента = Неопределено
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		ПолноеИмяРегистра
    );
    
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	|	И Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами)
	|");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Регистраторы, 
        ДополнительныеПараметры
    );
    
    РегистрыНакопления.ПрочиеАктивыПассивы.ЗарегистироватьКОбновлениюУправленческогоБаланса(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0
		Или Не ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) КАК ОбъектРасчетов,
		|	ДанныеРегистра.НомерСтроки КАК НомерСтроки,
		|	ДанныеРегистра.Регистратор КАК Регистратор, 
	    |	ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	    |	     И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
        |	     И ДанныеРегистра.УдалитьЗаказКлиента = Неопределено 
        |   ТОГДА
        |       ИСТИНА
        |   ИНАЧЕ
        |       ЛОЖЬ
        |   КОНЕЦ КАК ЗаполнитьУдалитьЗаказКлиента,
	    |	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	    |	     И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами)
        |   ТОГДА
        |       ИСТИНА
        |   ИНАЧЕ
        |       ЛОЖЬ
        |   КОНЕЦ КАК ЗаполнитьХозяйственнаяОперация,
	    |	ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	    |	     И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
        |	     И ДанныеРегистра.УдалитьЗаказКлиента = Неопределено 
        |   ТОГДА
        |       ДанныеРегистра.Регистратор
        |   ИНАЧЕ
        |       ДанныеРегистра.УдалитьЗаказКлиента
        |   КОНЕЦ КАК ИсточникОбъектаРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
        |		ПО 
        |       (    
	    |			ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	    |	     		И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
        |	     		И ДанныеРегистра.УдалитьЗаказКлиента = Неопределено 
        |   		ТОГДА
        |       		ДанныеРегистра.Регистратор
        |   		ИНАЧЕ
        |       		ДанныеРегистра.УдалитьЗаказКлиента
        |   		КОНЕЦ
        |   	) = 
        |       ОбъектыРасчетов.Объект
		|			И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация = ОбъектыРасчетов.Организация.ГоловнаяОрганизация
		|			И (ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|					И ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер = ОбъектыРасчетов.Партнер
		|				ИЛИ ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|			И (НЕ ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент В (&ПустыеЗначенияКонтрагент)
		|					И ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент = ОбъектыРасчетов.Контрагент
		|				ИЛИ ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент В (&ПустыеЗначенияКонтрагент))
		|			И ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) = ОбъектыРасчетов.ТипРасчетов
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
        |	И НЕ ДанныеРегистра.УдалитьЗаказКлиента В (&ПустыеЗначенияОбъектовРасчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)),
		|	ДанныеРегистра.НомерСтроки,
		|	ДанныеРегистра.Регистратор,
	    |	ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	    |	     И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
        |	     И ДанныеРегистра.УдалитьЗаказКлиента = Неопределено 
        |   ТОГДА
        |       ИСТИНА
        |   ИНАЧЕ
        |       ЛОЖЬ
        |   КОНЕЦ КАК ЗаполнитьУдалитьЗаказКлиента,
	    |	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	    |	     И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами)
        |   ТОГДА
        |       ИСТИНА
        |   ИНАЧЕ
        |       ЛОЖЬ
        |   КОНЕЦ КАК ЗаполнитьХозяйственнаяОперация,
		|	ДанныеРегистра.АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|			И ОбъектыРасчетов.Организация = ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация
		|			И ОбъектыРасчетов.Контрагент = ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент
		|			И ОбъектыРасчетов.Договор = ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор
		|			И ОбъектыРасчетов.НаправлениеДеятельности = ДанныеРегистра.АналитикаУчетаПоПартнерам.НаправлениеДеятельности
		|			И ОбъектыРасчетов.Партнер = ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер
		|			И ОбъектыРасчетов.Объект = НЕОПРЕДЕЛЕНО
		|			
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И 
		|   ДанныеРегистра.УдалитьЗаказКлиента В (&ПустыеЗначенияОбъектовРасчетов)
		|
		|ИТОГИ ПО
		|	Регистратор";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Запрос.УстановитьПараметр("ПустыеЗначенияКонтрагент", ОбъектыРасчетовСервер.ПустыеЗначенияКонтрагент());
	
	КурсовыеРазницыПрибыль = Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль;
	КурсовыеРазницыУбыток = Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток;
    
    ПорцииДляОбработки = ОбъектыРасчетовСервер.ПорцииДанныхДляОбработки(ОбновляемыеДанные);
	
	Для Каждого ПорцияДанных Из ПорцииДляОбработки Цикл
	
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ПорцияДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистраторы", ПорцияДанных.ВыгрузитьКолонку("Регистратор"));
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРегистратор.Следующий() Цикл
				ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
				НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоДокументам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
				НаборЗаписей.Прочитать();
	
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СтрокаНабора = НаборЗаписей[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
					Если СтрокаНабора.ЗаказКлиента = Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
						Если ВыборкаДетальныеЗаписи.ОбъектРасчетов <> Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
							СтрокаНабора.ЗаказКлиента = ВыборкаДетальныеЗаписи.ОбъектРасчетов;
						Иначе
							ВызватьИсключение (
                                СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								    НСтр("ru='Не найден объект расчетов для источника данных: %1 по набору записей регистратора: %2';uk='Не знайдено об''єкт розрахунків для джерела даних: %1 за набором записів реєстратора: %2'"),
								    ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
								    ВыборкаРегистратор.Регистратор
                                )
                            );
						КонецЕсли;
                    КонецЕсли;
                    Если ВыборкаДетальныеЗаписи.ЗаполнитьУдалитьЗаказКлиента Тогда
				        Если НЕ ЗначениеЗаполнено(СтрокаНабора.УдалитьЗаказКлиента) Тогда
					       СтрокаНабора.УдалитьЗаказКлиента = СтрокаНабора.Регистратор;
				        КонецЕсли;
                    КонецЕсли;
                    Если ВыборкаДетальныеЗаписи.ЗаполнитьХозяйственнаяОперация Тогда
					   Если СтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						  СтрокаНабора.ХозяйственнаяОперация = КурсовыеРазницыПрибыль;
					   Иначе
						  СтрокаНабора.ХозяйственнаяОперация = КурсовыеРазницыУбыток;
					   КонецЕсли;
                    КонецЕсли;
				КонецЦикла;
	
				Если НаборЗаписей.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				КонецЕсли;
	
			КонецЦикла;
	
			ЗафиксироватьТранзакцию();
	
		Исключение
	
			ОтменитьТранзакцию();
	
			Шаблон = НСтр("ru='Не удалось записать данные в регистр %1 , по причине: %2';uk='Не вдалося записати дані в регістр %1, з причини: %2'");
			ТекстСообщения = СтрШаблон(Шаблон, ПолноеИмяРегистра, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение, МетаданныеРегистра, , ТекстСообщения);
	
		КонецПопытки;
	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
