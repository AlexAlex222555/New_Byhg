#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
//++ НЕ УТ
#Область ПрограммныйИнтерфейс

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели()
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДС", "ВалютаРегл"));
	
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяРегистра()
    Возврат "РегистрНакопления.НДСРеестрВыданныхНалоговыхДокументов";
КонецФункции 

Функция ИмяРегистра()
    Возврат СтрЗаменить(ПолноеИмяРегистра(), "РегистрНакопления.", "");
КонецФункции 


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a4f64468-bffa-4408-8779-f45227b9aad2");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет реквизит СтавкаНДС с типом СправочникСсылка.СтавкиНДС
                                   |Заполняет измерение ОбъектРасчетов с типом СправочникСсылка.ОбъектыРасчетов'
                                   |;uk='Заповнює реквізит СтавкаНДС з типом СправочникСсылка.СтавкиНДС
                                   |Заповнює вимір ОбъектРасчетов з типом СправочникСсылка.ОбъектыРасчетов'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьОбъектыРасчетов(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);                
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.10.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию2";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fef66933-d55c-451c-8984-fb3e799ef662");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию2";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Исправляет движения регистра накопления ""НДС: Реестр выданных налоговых документов"":
                                    |'
                                    |;uk='Виправляє рухи регістру накопичення ""ПДВ: Реєстр виданих податкових документів"":
                                    |'");
	Обработчик.Комментарий = Обработчик.Комментарий 
						     + НСтр("ru='- по документам ""Налоговая накладная"";
                                     |- по документам ""Приложение 2 к налоговой накладной"".
                                     |'
                                     |;uk='- по документам ""Податкова накладна""; 
                                     |- по документам ""Додаток 2 до податкової накладної"".
                                     |'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.НалоговаяНакладная.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.Приложение2КНалоговойНакладной.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.НалоговаяНакладная.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После"; 

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.Приложение2КНалоговойНакладной.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После"; 

КонецПроцедуры

// Описание
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.НДСРеестрВыданныхНалоговыхДокументов";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.НДСРеестрВыданныхНалоговыхДокументов КАК ДанныеРегистра
	|ГДЕ
	|	(ДанныеРегистра.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьСтавкаНДС = &ПустаяСтавкаНДС)
	|   ИЛИ (ДанныеРегистра.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	    И ДанныеРегистра.УдалитьОбъектРасчетов НЕ В (&ПустыеЗначенияОбъектРасчетов))
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	УчетНДСЛокализация.УстановитьПараметрЗапросаПустаяСтавкаНДСПеречислением(Запрос);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра
	);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			Блокировка.Заблокировать();
							
			НаборЗаписей = РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			НаборИзменен = Ложь;
			
			Для Каждого СтрокаНабораЗаписей Из НаборЗаписей Цикл
				Если Не ЗначениеЗаполнено(СтрокаНабораЗаписей.СтавкаНДС) Тогда
					СтрокаНабораЗаписей.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(СтрокаНабораЗаписей.УдалитьСтавкаНДС);
					СтрокаНабораЗаписей.УдалитьСтавкаНДС = Неопределено;
					НаборИзменен = Истина;
				КонецЕсли;           
				
				Если ТипЗнч(СтрокаНабораЗаписей.УдалитьОбъектРасчетов) = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
					СтрокаНабораЗаписей.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка(); 
					НаборИзменен = Истина;
				Иначе
				
					ПараметрыПоискаОбъектаРасчетов = ОбъектыРасчетовСервер.ПолучитьПараметрыОбъектаРасчетов();
					РеквизитыАналитикаУчетаПоПартнерам = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СтрокаНабораЗаписей.АналитикаУчетаПоПартнерам,
						"Организация, Партнер, Контрагент"
					);
					
					ПараметрыПоискаОбъектаРасчетов.ТипРасчетов  = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
					ПараметрыПоискаОбъектаРасчетов.Организация  = РеквизитыАналитикаУчетаПоПартнерам.Организация;
					ПараметрыПоискаОбъектаРасчетов.Партнер      = РеквизитыАналитикаУчетаПоПартнерам.Партнер;
					ПараметрыПоискаОбъектаРасчетов.Контрагент   = РеквизитыАналитикаУчетаПоПартнерам.Контрагент;
					
					Если НЕ ЗначениеЗаполнено(СтрокаНабораЗаписей.ОбъектРасчетов) Тогда
						ПараметрыПоискаОбъектаРасчетов.Объект = СтрокаНабораЗаписей.УдалитьОбъектРасчетов;
						НовыйОбъектРасчетов = ОбъектыРасчетовСервер.НайтиНовыйОбъектРасчетов(ПараметрыПоискаОбъектаРасчетов);
						Если НовыйОбъектРасчетов = Неопределено И ЗначениеЗаполнено(СтрокаНабораЗаписей.УдалитьОбъектРасчетов) Тогда
							ВызватьИсключение(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Не найден объект расчетов для источника данных: %1';uk='Не знайдений об''єкт розрахунків для джерела даних: %1'"),
									СтрокаНабораЗаписей.УдалитьОбъектРасчетов
								)
							);
						ИначеЕсли СтрокаНабораЗаписей.ОбъектРасчетов <> НовыйОбъектРасчетов Тогда
							СтрокаНабораЗаписей.ОбъектРасчетов = НовыйОбъектРасчетов;            
							НаборИзменен = Истина;
						КонецЕсли;
					КонецЕсли;	
					
				КонецЕсли;		
				
			КонецЦикла;
		
			Если НаборИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru='Не удалось записать данные в регистр %1 по регистратору ""%2"", по причине: %3';uk='Не вдалося записати дані в регістр %1 по реєстратору ""%2"", по причині: %3'");
			ТекстСообщения = 
				СтрШаблон(Шаблон, 
					ПолноеИмяРегистра, 
					Выборка.Регистратор, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра, 
				, 
				ТекстСообщения
			);
			
		КонецПопытки;
		
	КонецЦикла;
		
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ДокументыКОбновлению2()
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить("Документ.НалоговаяНакладная");
	СписокДокументов.Добавить("Документ.Приложение2КНалоговойНакладной");
	Возврат СписокДокументов;
КонецФункции

Процедура ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию2(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.НДСРеестрВыданныхНалоговыхДокументов";
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".")[1];
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(ДокументыКОбновлению2(), ",");
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();

	СписокЗапросов = Новый Массив; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.НалоговаяНакладная КАК ДанныеДокумента
	|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРеестрВыданныхНалоговыхДокументов КАК НДСРеестрВыданныхНалоговыхДокументов
	|	ПО ДанныеДокумента.Ссылка = НДСРеестрВыданныхНалоговыхДокументов.Регистратор
	|   И НДСРеестрВыданныхНалоговыхДокументов.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваРаботыОтНерезидента),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваПродажаНижеОбычнойЦены)
	|	)
	|ГДЕ
	|   ДанныеДокумента.Ссылка.Проведен 
	|	И ДанныеДокумента.ВидОперации В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|	)
	|   И НДСРеестрВыданныхНалоговыхДокументов.Регистратор ЕСТЬ NULL 
	|";
    СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК ДанныеДокумента
	|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРеестрВыданныхНалоговыхДокументов КАК НДСРеестрВыданныхНалоговыхДокументов
	|	ПО ДанныеДокумента.Ссылка = НДСРеестрВыданныхНалоговыхДокументов.Регистратор
	|   И НДСРеестрВыданныхНалоговыхДокументов.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваРаботыОтНерезидента),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваПродажаНижеОбычнойЦены)
	|	)
	|ГДЕ
	|   ДанныеДокумента.Ссылка.Проведен 
	|	И ДанныеДокумента.ВидОперации В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|	)
	|   И НДСРеестрВыданныхНалоговыхДокументов.Регистратор ЕСТЬ NULL 
	|";
    СписокЗапросов.Добавить(ТекстЗапроса);
	
	Если СписокЗапросов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы, 
		ПолноеИмяРегистра
	);                  
	
КонецПроцедуры   

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию2(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.НДСРеестрВыданныхНалоговыхДокументов";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	
	СписокДокументов = ДокументыКОбновлению2();
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		СписокДокументов,
		ПолноеИмяРегистра,
		Параметры.Очередь,
		ДополнительныеПараметры
	);
	
КонецПроцедуры    

#КонецОбласти

#КонецОбласти

#КонецЕсли
