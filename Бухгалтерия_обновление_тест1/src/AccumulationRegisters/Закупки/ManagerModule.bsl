#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//++ НЕ УТ
#Область ПрограммныйИнтерфейс

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Сумма", "ВалютаУпр"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалютеДокумента", "ВалютаДокумента"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДС", "ВалютаУпр"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРеглБезНДС", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСВВалютеДокумента", "ВалютаДокумента"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДС", "ВалютаУпр"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалютеДокумента", "ВалютаДокумента"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Стоимость", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Стоимость, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьБезНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СтоимостьБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СтоимостьРегл, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Склад)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.Закупки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
    Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("631a2f65-e6f5-4fdf-afb0-4cc9bb9495a5");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.Закупки.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Проводит документы ""Поступление товаров и услуг"" через подотчетное лицо по регистру ""Закупки"". 
                                   |Очищает вид запасов в движениях образованных документом ""Отчет комитенту о списании"", очищается вид запасов для работ.
                                   |Заполняет реквизит ИсточникГФУРасчетов с типом Справочник.ОбъектыРасчетов'
                                   |;uk='Проводить документи ""Надходження товарів та послуг"" через підзвітну особу з регістру ""Купівлі"".
                                   |Очищає вид запасів у рухах, утворених документом ""Звіт комітенту про списання"", очищується вид запасів для робіт.
                                   |Заповнює реквізит ИсточникГФУРасчетов з типом Справочник.ОбъектыРасчетов'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаПоПартнерам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.Закупки.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.КлючиАналитикиУчетаПоПартнерам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.Назначения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.Закупки.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После"; 
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";        
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";   
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";    
    

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";  
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаПоПартнерам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После"; 
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";        
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.АналитикаУчетаПоПартнерам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";    
    
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыОбработатьДанныеДляГенерацииНазначений(
		Обработчик.ПриоритетыВыполнения,
		"После"
	);                            
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьКлючиАналитикиНоменклатуры(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);	                                 
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьОбъектыРасчетов(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.Закупки КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ИсточникГФУРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьИсточникГФУРасчетов В (&ПустыеЗначенияОбъектовРасчета)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчета", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра
    );       
    
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.Закупки";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Закупки.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Закупки.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.Закупки КАК Закупки
	|	ГДЕ
	|		(Закупки.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			И ТИПЗНАЧЕНИЯ(Закупки.Регистратор) = ТИП(Документ.ОтчетКомитентуОСписании))
	|		ИЛИ Закупки.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Закупки.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.Закупки КАК Закупки
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК СпрВидЗапасов
	|		ПО СпрВидЗапасов.Ссылка = Закупки.ИсточникГФУНоменклатуры
	|	ГДЕ
	|		СпрВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВозвратМеждуОрганизациями.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями КАК ВозвратМеждуОрганизациями
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	|		ПО ВозвратМеждуОрганизациями.Ссылка = Закупки.Регистратор
	|	ГДЕ
	|		ВозвратМеждуОрганизациями.Договор <> Закупки.Договор
	|		И НЕ ВозвратМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВозвратМеждуОрганизациями.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями КАК ВозвратМеждуОрганизациями
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	|		ПО ВозвратМеждуОрганизациями.Ссылка = Закупки.Регистратор
	|	ГДЕ
	|		ВозвратМеждуОрганизациями.ДоговорПокупки <> Закупки.Договор
	|		И ВозвратМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПередачаМеждуОрганизациями.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаМеждуОрганизациями
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	|		ПО ПередачаМеждуОрганизациями.Ссылка = Закупки.Регистратор
	|	ГДЕ
	|		ПередачаМеждуОрганизациями.Договор <> Закупки.Договор
	|		И НЕ ПередачаМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПередачаМеждуОрганизациями.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаМеждуОрганизациями
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	|		ПО ПередачаМеждуОрганизациями.Ссылка = Закупки.Регистратор
	|	ГДЕ
	|		ПередачаМеждуОрганизациями.ДоговорПокупки <> Закупки.Договор
	|		И ПередачаМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОтчетМеждуОрганизациями.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетМеждуОрганизациями
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	|		ПО ОтчетМеждуОрганизациями.Ссылка = Закупки.Регистратор
	|	ГДЕ
	|		ОтчетМеждуОрганизациями.Договор <> Закупки.Договор
	|		И НЕ ОтчетМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОтчетМеждуОрганизациями.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетМеждуОрганизациями
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	|		ПО ОтчетМеждуОрганизациями.Ссылка = Закупки.Регистратор
	|	ГДЕ
	|		ОтчетМеждуОрганизациями.ДоговорПокупки <> Закупки.Договор
	|		И ОтчетМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОтчетМеждуОрганизациямиОСписании.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании КАК ОтчетМеждуОрганизациямиОСписании
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	|		ПО ОтчетМеждуОрганизациямиОСписании.Ссылка = Закупки.Регистратор
	|	ГДЕ
	|		ОтчетМеждуОрганизациямиОСписании.Договор <> Закупки.Договор
	|		И НЕ ОтчетМеждуОрганизациямиОСписании.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОтчетМеждуОрганизациямиОСписании.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании КАК ОтчетМеждуОрганизациямиОСписании
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	|		ПО ОтчетМеждуОрганизациямиОСписании.Ссылка = Закупки.Регистратор
	|	ГДЕ
	|		ОтчетМеждуОрганизациямиОСписании.ДоговорПокупки <> Закупки.Договор
	|		И ОтчетМеждуОрганизациямиОСписании.РасчетыЧерезОтдельногоКонтрагента
	|
	|	) КАК Закупки
	|");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Регистраторы, 
        ДополнительныеПараметры
    );     
    
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтДанныеРегистра
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриобретениеТоваровУслуг.Товары ДанныеДокументаТовары
	|	ПО
	|		ДанныеДокументаТовары.Ссылка = ДанныеДокумента.Ссылка
	|		И ДанныеДокументаТовары.Номенклатура.ТипНоменклатуры В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.Закупки КАК ДанныеРегистра
	|	ПО
	|		ДанныеРегистра.Регистратор = ДанныеДокумента.Ссылка
	|		И ДанныеРегистра.ПодотчетноеЛицо = ДанныеДокумента.ПодотчетноеЛицо
	|		
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеРегистра.Регистратор ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриобретениеТоваровУслуг.Товары ДанныеДокументаТовары
	|	ПО
	|		ДанныеДокументаТовары.Ссылка = ДанныеДокумента.Ссылка
	|		И ДанныеДокументаТовары.Номенклатура.ТипНоменклатуры В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|		И НЕ ДанныеДокументаТовары.СписатьНаРасходы
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.Закупки КАК ДанныеРегистра
	|	ПО
	|		ДанныеРегистра.Регистратор = ДанныеДокумента.Ссылка
	|		И ДанныеРегистра.ПодотчетноеЛицо = ДанныеДокумента.ПодотчетноеЛицо
	|		
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеРегистра.Регистратор ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтДанныеРегистра.Ссылка
	|	ИЗ
	|		ВтДанныеРегистра КАК ВтДанныеРегистра
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.Закупки КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры.Назначение <> ДанныеРегистра.ВидЗапасов.УстарелоНазначение
	|		И ДанныеРегистра.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ДанныеРегистра.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	) КАК Движения
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
        Параметры, 
        Регистраторы, 
        ПолноеИмяРегистра
    );
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0
		Или Не ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
    КонецЕсли;     
    
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	РезультатыСозданияВТВозвраты = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
        Параметры.Очередь,
		"Документ.ВозвратТоваровМеждуОрганизациями",
		МенеджерВременныхТаблиц
    );
		
	РезультатыСозданияВТПередачи = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
        Параметры.Очередь,
		"Документ.ПередачаТоваровМеждуОрганизациями",
		МенеджерВременныхТаблиц
    );
		
	РезультатыСозданияВТОтчеты = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
        Параметры.Очередь,
		"Документ.ОтчетПоКомиссииМеждуОрганизациями",
		МенеджерВременныхТаблиц
    );
		
	РезультатыСозданияВТОтчетыОСписании = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
        Параметры.Очередь,
		"Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании",
		МенеджерВременныхТаблиц
    );
	
	ТекстЗапроса = " 
	|ВЫБРАТЬ
	|	Закупки.Период                     КАК Период,
	|	Закупки.ХозяйственнаяОперация      КАК ХозяйственнаяОперация,
	|	Закупки.Организация                КАК Организация,
	|	Закупки.Подразделение              КАК Подразделение,
	|	Закупки.Менеджер                   КАК Менеджер,
	|	ВЫБОР КОГДА Закупки.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И Закупки.АналитикаУчетаНоменклатуры.Назначение <> Закупки.ВидЗапасов.УстарелоНазначение
	|		И Закупки.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Закупки.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И НЕ Аналитика.КлючАналитики ЕСТЬ NULL
	|		ТОГДА Аналитика.КлючАналитики
	|		ИНАЧЕ Закупки.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                                        КАК АналитикаУчетаНоменклатуры,
	|	Закупки.Склад                      КАК Склад,
	|	ВЫБОР КОГДА Закупки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Закупки.ТипЗапасов
	|	КОНЕЦ                              КАК ТипЗапасов,
	|	ВЫБОР КОГДА (Закупки.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			И ТИПЗНАЧЕНИЯ(Закупки.Регистратор) = ТИП(Документ.ОтчетКомитентуОСписании))
	|		ИЛИ Закупки.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Закупки.ВидЗапасов
	|	КОНЕЦ                              КАК ВидЗапасов,
	|	ВЫБОР КОГДА НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Закупки.Партнер
	|	КОНЕЦ                                        КАК Партнер,
	|	ВЫБОР КОГДА НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Закупки.Контрагент
	|	КОНЕЦ                                        КАК Контрагент,
	|	ВЫБОР КОГДА НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Закупки.Соглашение
	|	КОНЕЦ                                        КАК Соглашение,
	|	ВЫБОР КОГДА Закупки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|			ТОГДА ВЫБОР КОГДА ВозвратМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|				ТОГДА ВозвратМеждуОрганизациями.ДоговорПокупки
	|				ИНАЧЕ ВозвратМеждуОрганизациями.Договор
	|			КОНЕЦ
	|		КОГДА Закупки.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
	|			ТОГДА ВЫБОР КОГДА ПередачаМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|				ТОГДА ПередачаМеждуОрганизациями.ДоговорПокупки
	|				ИНАЧЕ ПередачаМеждуОрганизациями.Договор
	|		КОНЕЦ
	|		КОГДА Закупки.Регистратор ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациями
	|			ТОГДА ВЫБОР КОГДА ОтчетМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|				ТОГДА ОтчетМеждуОрганизациями.ДоговорПокупки
	|				ИНАЧЕ ОтчетМеждуОрганизациями.Договор
	|		КОНЕЦ
	|		КОГДА Закупки.Регистратор ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании
	|			ТОГДА ВЫБОР КОГДА ОтчетМеждуОрганизациямиОСписании.РасчетыЧерезОтдельногоКонтрагента
	|				ТОГДА ОтчетМеждуОрганизациямиОСписании.ДоговорПокупки
	|				ИНАЧЕ ОтчетМеждуОрганизациямиОСписании.Договор
	|		КОНЕЦ  
    |		ИНАЧЕ  
	|	         ВЫБОР КОГДА НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL
	|		        ТОГДА НЕОПРЕДЕЛЕНО
	|		        ИНАЧЕ Закупки.Договор
    |            КОНЕЦ
	|	КОНЕЦ                                        КАК Договор,
	|	ЕСТЬNULL(ПоступлениеТоваров.Ссылка, Закупки.Заказ) КАК Заказ,
	|	Закупки.НаправлениеДеятельностиНоменклатуры КАК НаправлениеДеятельностиНоменклатуры,
	|	Закупки.НаправлениеДеятельностиКонтрагента КАК НаправлениеДеятельностиКонтрагента,
	|	ЕСТЬNULL(ПоступлениеТоваров.ПодотчетноеЛицо, Закупки.ПодотчетноеЛицо) КАК ПодотчетноеЛицо,
	|	Закупки.Количество                    КАК Количество,
	|	Закупки.Сумма                         КАК Сумма,
	|	Закупки.СуммаБезНДС                   КАК СуммаБезНДС,
	|	Закупки.СуммаРегл                     КАК СуммаРегл,
	|	Закупки.СуммаРеглБезНДС               КАК СуммаРеглБезНДС,
	|	Закупки.СуммаСкидки                   КАК СуммаСкидки,
	|	Закупки.Стоимость                     КАК Стоимость,
	|	Закупки.СтоимостьБезНДС               КАК СтоимостьБезНДС,
	|	Закупки.СтоимостьРегл                 КАК СтоимостьРегл,
	|	Закупки.СуммаДопРасходов              КАК СуммаДопРасходов,
	|	Закупки.СуммаДопРасходовБезНДС        КАК СуммаДопРасходовБезНДС,
	|	Закупки.ВалютаДокумента               КАК ВалютаДокумента,
	|	Закупки.СуммаВВалютеДокумента         КАК СуммаВВалютеДокумента,
	|	Закупки.СуммаБезНДСВВалютеДокумента   КАК СуммаБезНДСВВалютеДокумента,
	|	Закупки.ВалютаВзаиморасчетов          КАК ВалютаВзаиморасчетов,
	|	Закупки.СуммаВВалютеВзаиморасчетов    КАК СуммаВВалютеВзаиморасчетов,
	|	Закупки.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ВЫБОР КОГДА ЕСТЬNULL(СпрВидыЗапасов.ТипЗапасов, ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Закупки.ИсточникГФУНоменклатуры
	|	КОНЕЦ                                 КАК ИсточникГФУНоменклатуры,
	|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) КАК ИсточникГФУРасчетов,
	|	ЕСТЬNULL(ПоступлениеТоваров.Ссылка, Закупки.УдалитьИсточникГФУРасчетов) КАК УдалитьИсточникГФУРасчетов,
	|	Закупки.ДокументДвижения              КАК ДокументДвижения,
	|	Закупки.РасчетСебестоимости           КАК РасчетСебестоимости, 
	|	Закупки.НомерСтроки                   КАК НомерСтроки,
    |
	|	ВЫБОР КОГДА Аналитика.КлючАналитики ЕСТЬ NULL
	|		И Закупки.АналитикаУчетаНоменклатуры.Назначение <> Закупки.ВидЗапасов.УстарелоНазначение
	|		И Закупки.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Закупки.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
    |
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК СпрВидыЗапасов
	|	ПО СпрВидыЗапасов.Ссылка = Закупки.ИсточникГФУНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями КАК ВозвратМеждуОрганизациями
	|	ПО Закупки.Регистратор = ВозвратМеждуОрганизациями.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаМеждуОрганизациями
	|	ПО Закупки.Регистратор = ПередачаМеждуОрганизациями.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетМеждуОрганизациями
	|	ПО Закупки.Регистратор = ОтчетМеждуОрганизациями.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании КАК ОтчетМеждуОрганизациямиОСписании
	|	ПО Закупки.Регистратор = ОтчетМеждуОрганизациямиОСписании.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТЗаблокированныхРегистраторовВозврата КАК ЗаблокированныеРегистраторыВозврата
	|	ПО (ЗаблокированныеРегистраторыВозврата.Ссылка = Закупки.Регистратор)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТЗаблокированныхРегистраторовПередачи КАК ЗаблокированныеРегистраторыПередачи
	|	ПО (ЗаблокированныеРегистраторыПередачи.Ссылка = Закупки.Регистратор)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТЗаблокированныхРегистраторовОтчетов КАК ЗаблокированныеРегистраторыОтчетов
	|	ПО (ЗаблокированныеРегистраторыОтчетов.Ссылка = Закупки.Регистратор)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТЗаблокированныхРегистраторовОтчетовОСписании КАК ЗаблокированныеРегистраторыОтчетовОСписании
	|	ПО (ЗаблокированныеРегистраторыОтчетовОСписании.Ссылка = Закупки.Регистратор)
    |
    |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПоступлениеТоваров
    |	     ПО Закупки.Регистратор = ПоступлениеТоваров.Ссылка
    |	     И ПоступлениеТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
    |
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
    |		ПО (ЕСТЬNULL(ПоступлениеТоваров.Ссылка, Закупки.УдалитьИсточникГФУРасчетов)) = ОбъектыРасчетов.Объект
	|		И ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|		И ОбъектыРасчетов.Организация.ГоловнаяОрганизация = Закупки.Организация.ГоловнаяОрганизация
	|		И НЕ (ЕСТЬNULL(ПоступлениеТоваров.Ссылка, Закупки.УдалитьИсточникГФУРасчетов)) В (&ПустыеЗначенияОбъектовРасчетов)
    |
    |	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	     ПО Ключи.Ссылка = Закупки.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	     ПО Ключи.Номенклатура = Аналитика.Номенклатура
	|		    И Ключи.Характеристика = Аналитика.Характеристика
	|		    И Ключи.Серия = Аналитика.Серия
	|		    И Ключи.МестоХранения = Аналитика.МестоХранения
	|		    И Ключи.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|		    И Закупки.ВидЗапасов.УстарелоНазначение = Аналитика.Назначение
    |
	|ГДЕ
	|	Закупки.Регистратор = &Регистратор
	|	И ЗаблокированныеРегистраторыВозврата.Ссылка ЕСТЬ NULL
	|	И ЗаблокированныеРегистраторыПередачи.Ссылка ЕСТЬ NULL
	|	И ЗаблокированныеРегистраторыОтчетов.Ссылка ЕСТЬ NULL
	|	И ЗаблокированныеРегистраторыОтчетовОСписании.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючиИнициализированы,
	|	НомерСтроки
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"#ИмяВТЗаблокированныхРегистраторовВозврата",
		РезультатыСозданияВТВозвраты.ИмяВременнойТаблицы);
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"#ИмяВТЗаблокированныхРегистраторовПередачи",
		РезультатыСозданияВТПередачи.ИмяВременнойТаблицы);
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"#ИмяВТЗаблокированныхРегистраторовОтчетов",
		РезультатыСозданияВТОтчеты.ИмяВременнойТаблицы);
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"#ЗаблокированныеРегистраторыОтчетовОСписании",
		РезультатыСозданияВТОтчетыОСписании.ИмяВременнойТаблицы);
		
	Запрос = Новый Запрос(ТекстЗапроса);	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
    	
	ЗапросРегистраторы = Новый Запрос;
	ЗапросРегистраторы.Текст = "
        |ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.Закупки КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
        |";
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ОбновляемыеДанные;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
		Блокировка.Заблокировать();
		
		ЗапросРегистраторы.УстановитьПараметр("Регистраторы", ОбновляемыеДанные.ВыгрузитьКолонку("Регистратор"));
		РезультатЗапроса = ЗапросРегистраторы.Выполнить();
		
		ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
        Пока ВыборкаРегистратор.Следующий() Цикл
            
            Регистратор = ВыборкаРегистратор.Регистратор;
			НаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей - 
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписей.Прочитать();    
            
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			Результат = Запрос.Выполнить().Выгрузить();
			
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			ИначеЕсли Результат[0].КлючиИнициализированы = 0 Тогда
				ТекстСообщения = НСтр("ru='есть необновленные ключи. Необходимо перепровести документ вручную.';uk='існують неоновлені ключі. Необхідно перепровести документ вручну.'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			НаборЗаписей.Загрузить(Результат);
            
            ПараметрыОтбора = Новый Структура("НомерСтроки");
            Для Каждого СтрокаНабора Из НаборЗаписей Цикл
                Если Не ЗначениеЗаполнено(СтрокаНабора.ИсточникГФУРасчетов) Тогда
                    ПараметрыОтбора.Вставить("НомерСтроки", СтрокаНабора.НомерСтроки); 
                    СтрокаРезультат = Результат.Найти(СтрокаНабора.НомерСтроки, "НомерСтроки"); 
					Если СтрокаРезультат <> Неопределено Тогда
					   Если ЗначениеЗаполнено(СтрокаРезультат.ИсточникГФУРасчетов)
						  И ЗначениеЗаполнено(СтрокаРезультат.УдалитьИсточникГФУРасчетов) Тогда
						  СтрокаНабора.ИсточникГФУРасчетов = СтрокаРезультат.ИсточникГФУРасчетов;
					   КонецЕсли;
					КонецЕсли;
				КонецЕсли;
            КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
		
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
	
		ОтменитьТранзакцию();
		
		Шаблон = НСтр("ru='Не удалось записать данные в регистр %1 , по причине: %2';uk='Не вдалося записати дані в регістр %1, з причини: %2'");
		ТекстСообщения = СтрШаблон(Шаблон,
			ПолноеИмяРегистра,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеРегистра,
			,
			ТекстСообщения
		);
	
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
