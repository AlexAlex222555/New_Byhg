#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ВыпускПродукции.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9bfc3b84-d594-4ef4-8d43-95494bf4bb1f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ВыпускПродукции.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Перезаполняет ресурс ""Количество"" в записях с переполнением значения из-за несоответствия разрядности ресурса и реквизитов документов-регистраторов.
                                   |Перезаполняет измерение ""Заказ"" записей регистра накопления ""Выпуск продукции"" документов ""Поступление от переработчика"", очищает измерение ""Вид запасов"" с типом запасов ""Услуга"" и другие неиспользуемые поля.'
                                   |;uk='Перезаповнює ресурс ""Кількість"" у записах з переповненням значення через невідповідність розрядності ресурсу та реквізитів документів-реєстраторів.
                                   |Перезаповнює вимір ""Замовлення"" записів регістру накопичення ""Випуск продукції"" документів ""Надходження від переробника"", очищує вимір ""Вид запасів"" з типом запасів ""Послуга"" та інші поля, що не використовуються.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ВыпускПродукции.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыЗапасов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПереработчика.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеОтПереработчика.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыпускПродукции.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ВыпускПродукции.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";    
	

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьКлючиАналитикиНоменклатуры(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ВыпускПродукции";
	ИмяРегистра = "ВыпускПродукции";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ВыпускПродукции";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции КАК ДанныеРегистра
	|ГДЕ
	|	((ДанныеРегистра.АналитикаУчетаНоменклатуры.Назначение <> ДанныеРегистра.ВидЗапасов.УстарелоНазначение
	|		И ДанныеРегистра.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|	ИЛИ (ДанныеРегистра.АналитикаУчетаПродукции.Назначение <> ДанныеРегистра.ВидЗапасов.УстарелоНазначение
	|		И ДанныеРегистра.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|	И ДанныеРегистра.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|	ИЛИ ((ДанныеРегистра.Регистратор ССЫЛКА Документ.ПоступлениеОтПереработчика
	|		И ДанныеРегистра.Заказ = НЕОПРЕДЕЛЕНО))
	|");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукции КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|	) КАК ДанныеРегистра
	|");
	
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить("Документ.ОтчетПереработчика");
	
	Для каждого ПолноеИмяДокумента Из СписокДокументов Цикл
		
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
		
		ТекстЗапросаМеханизмаПроведения = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
		Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
			ТекстЗапросаМеханизмаПроведения,
			ПолноеИмяРегистра,
			ПолноеИмяДокумента
		);
								
		ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
			Параметры, 
			Регистраторы, 
			ПолноеИмяРегистра
		);
		
	КонецЦикла;
	
	//
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистр.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ВыпускПродукции КАК Регистр
		|ГДЕ
		|	Регистр.Регистратор ССЫЛКА Документ.ПоступлениеОтПереработчика
		|	И Регистр.КодСтроки <> 0
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Документ.ПоступлениеОтПереработчика.Товары КАК Товары
		|			ГДЕ
		|				Товары.Ссылка = Регистр.Регистратор
		|				И Товары.КодСтроки = Регистр.КодСтроки
		|				И Товары.АналитикаУчетаНоменклатуры = Регистр.АналитикаУчетаНоменклатуры
		|				И Товары.Количество <> Регистр.Количество)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистр.Регистратор
		|ИЗ
		|	РегистрНакопления.ВыпускПродукции КАК Регистр
		|ГДЕ
		|	Регистр.Регистратор ССЫЛКА Документ.ПоступлениеОтПереработчика
		|	И Регистр.КодСтроки <> 0
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Документ.ПоступлениеОтПереработчика.ВозвратныеОтходы КАК Товары
		|			ГДЕ
		|				Товары.Ссылка = Регистр.Регистратор
		|				И Товары.КодСтроки = Регистр.КодСтроки
		|				И Товары.АналитикаУчетаНоменклатуры = Регистр.АналитикаУчетаНоменклатуры
		|				И Товары.Количество <> Регистр.Количество)
		|
		//++ Устарело_Производство21
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистр.Регистратор
		|ИЗ
		|	РегистрНакопления.ВыпускПродукции КАК Регистр
		|ГДЕ
		|	Регистр.Регистратор ССЫЛКА Документ.ВыпускПродукции
		|	И Регистр.КодСтроки <> 0
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Документ.ВыпускПродукции.Товары КАК Товары
		|			ГДЕ
		|				Товары.Ссылка = Регистр.Регистратор
		|				И Товары.КодСтроки = Регистр.КодСтроки
		|				И Товары.АналитикаУчетаНоменклатуры = Регистр.АналитикаУчетаНоменклатуры
		|				И Товары.Количество <> Регистр.Количество)
		//-- Устарело_Производство21
		|");
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить("Документ.ОтчетПереработчика");
	СписокДокументов.Добавить("Документ.ПоступлениеОтПереработчика");
	//++ Устарело_Производство21
	СписокДокументов.Добавить("Документ.ВыпускПродукции");
	//-- Устарело_Производство21
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		СписокДокументов,
		"РегистрНакопления.ВыпускПродукции",
	    Параметры.Очередь
	);                     
	
	ПолноеИмяРегистра = "РегистрНакопления.ВыпускПродукции";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ВыпускПродукции;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Регистратор                   КАК Регистратор,
	|	Движения.Период                        КАК Период,
	|	Движения.Организация                   КАК Организация,
	|	ВЫБОР КОГДА Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|		И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И НЕ Аналитика.КлючАналитики ЕСТЬ NULL
	|		ТОГДА Аналитика.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                                  КАК АналитикаУчетаНоменклатуры,
	|	Движения.Распоряжение                  КАК Распоряжение,
	|	Движения.КодСтроки                     КАК КодСтроки,
	|	Движения.Заказ                         КАК Заказ,
	|	ВЫБОР КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ВидЗапасов
	|	КОНЕЦ                                  КАК ВидЗапасов,
	|	Движения.Спецификация                  КАК Спецификация,
	|	Движения.Подразделение                 КАК Подразделение,
	|	Движения.СтатьяРасходов                КАК СтатьяРасходов,
	|	Движения.АналитикаРасходов             КАК АналитикаРасходов,
	|	Движения.Количество                    КАК Количество,
	|	ВЫБОР КОГДА Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И Движения.АналитикаУчетаПродукции.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|		И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И НЕ АналитикаПродукции.КлючАналитики ЕСТЬ NULL
	|		ТОГДА АналитикаПродукции.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаПродукции
	|	КОНЕЦ                                  КАК АналитикаУчетаПродукции,
	|
	|	ВЫБОР КОГДА (Аналитика.КлючАналитики ЕСТЬ NULL
	|			И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|			И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|		ИЛИ (АналитикаПродукции.КлючАналитики ЕСТЬ NULL
	|			И Движения.АналитикаУчетаПродукции <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			И Движения.АналитикаУчетаПродукции.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|			И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции КАК Движения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = Движения.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия = Аналитика.Серия
	|		И Ключи.МестоХранения = Аналитика.МестоХранения
	|		И Ключи.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|		И Движения.ВидЗапасов.УстарелоНазначение = Аналитика.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиПродукции
	|	ПО КлючиПродукции.Ссылка = Движения.АналитикаУчетаПродукции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаПродукции
	|	ПО КлючиПродукции.Номенклатура = АналитикаПродукции.Номенклатура
	|		И КлючиПродукции.Характеристика = АналитикаПродукции.Характеристика
	|		И КлючиПродукции.Серия = АналитикаПродукции.Серия
	|		И КлючиПродукции.МестоХранения = АналитикаПродукции.МестоХранения
	|		И КлючиПродукции.СтатьяКалькуляции = АналитикаПродукции.СтатьяКалькуляции
	|		И Движения.ВидЗапасов.УстарелоНазначение = АналитикаПродукции.Назначение
	|
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючиИнициализированы,
	|	НомерСтроки
	|";
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор; 
		
		// Данные документы должны быть обработаны стандартной процедурой ПерезаписатьДвиженияИзОчереди 
		// с проверкой блокировки документов другими очередями.
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеОтПереработчика")
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОтчетПереработчика")
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВыпускПродукции")
			
			Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НачатьТранзакцию();  
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыНакопления.ВыпускПродукции.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			ИначеЕсли Результат[0].КлючиИнициализированы = 0 Тогда
				ТекстСообщения = НСтр("ru='есть необновленные ключи. Необходимо перепровести документ вручную.';uk='існують неоновлені ключі. Необхідно перепровести документ вручну.'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеОтПереработчика") Тогда
				Для Каждого Запись Из Результат Цикл
					Запись.Заказ = ?(Запись.Заказ = Неопределено, Регистратор, Запись.Заказ);
				КонецЦикла;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), 
				ТекстСообщения
			);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
