#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ПодразделениеДиспетчер)
	|	И ЗначениеРазрешено(Сценарий)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПланыЗанятостиТрудовыхРесурсов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.4.400";  
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a347e660-c244-4309-9951-1ff0fc7d5057");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПланыЗанятостиТрудовыхРесурсов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет измерение ""Спецификация продукции"".
                                   |Отменяет движения в статусе ""Отменен"".'
                                   |;uk='Заповнює вимір ""Специфікація продукції"".
                                   |Скасує рухи у статусі ""Скасовано"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.РегистраторПланаПроизводства.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПланыЗанятостиТрудовыхРесурсов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ПланыЗанятостиТрудовыхРесурсов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Планы.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов КАК Планы
	|ГДЕ
	|	Планы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.ПустаяСсылка)
	|	ИЛИ Планы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы, 
		ПолноеИмяРегистра
	);
	
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = "РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
		Параметры.Очередь,
		,
		ПолноеИмяРегистра);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПланыЗанятостиТрудовыхРесурсов.Период КАК Период,
		|	ПланыЗанятостиТрудовыхРесурсов.Регистратор КАК Регистратор,
		|	ПланыЗанятостиТрудовыхРесурсов.НомерСтроки КАК НомерСтроки,
		|	ПланыЗанятостиТрудовыхРесурсов.Активность КАК Активность,
		|	ПланыЗанятостиТрудовыхРесурсов.Сценарий КАК Сценарий,
		|	ВЫБОР 
		|		КОГДА ПланыЗанятостиТрудовыхРесурсов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.ПустаяСсылка) 
		|			ТОГДА ПланПроизводстваДокумент.Статус 
		|		ИНАЧЕ ПланыЗанятостиТрудовыхРесурсов.Статус 
		|	КОНЕЦ КАК Статус,
		|	ПланыЗанятостиТрудовыхРесурсов.ВидРабот КАК ВидРабот,
		|	ПланыЗанятостиТрудовыхРесурсов.ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
		|	ПланыЗанятостиТрудовыхРесурсов.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
		|	ПланыЗанятостиТрудовыхРесурсов.ПланПроизводства КАК ПланПроизводства,
		|	ПланыЗанятостиТрудовыхРесурсов.ДатаПроизводства КАК ДатаПроизводства,
		|	ПланыЗанятостиТрудовыхРесурсов.УдалитьСпецификация КАК СпецификацияПродукции,
		|	ПланыЗанятостиТрудовыхРесурсов.УдалитьНазначениеПродукции КАК НазначениеПродукции,
		|	ПланыЗанятостиТрудовыхРесурсов.НоменклатураПродукции КАК НоменклатураПродукции,
		|	ПланыЗанятостиТрудовыхРесурсов.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
		|	ПланыЗанятостиТрудовыхРесурсов.РазделительРасчета КАК РазделительРасчета,
		|	ПланыЗанятостиТрудовыхРесурсов.Количество КАК Количество,
		|	ПланыЗанятостиТрудовыхРесурсов.КоличествоНаЕдиницуПродукции КАК КоличествоНаЕдиницуПродукции,
		|	ПланыЗанятостиТрудовыхРесурсов.УдалитьСпецификация КАК УдалитьСпецификация,
		|	ПланыЗанятостиТрудовыхРесурсов.УдалитьНазначениеПродукции КАК УдалитьНазначениеПродукции
		|ИЗ
		|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов КАК ПланыЗанятостиТрудовыхРесурсов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПроизводства КАК ПланПроизводстваДокумент
		|		ПО ПланыЗанятостиТрудовыхРесурсов.ПланПроизводства = ПланПроизводстваДокумент.Ссылка
		|ГДЕ
		|	ПланыЗанятостиТрудовыхРесурсов.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫБОР 
		|		КОГДА ПланыЗанятостиТрудовыхРесурсов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.ПустаяСсылка) 
		|			ТОГДА ПланПроизводстваДокумент.Статус 
		|		ИНАЧЕ ПланыЗанятостиТрудовыхРесурсов.Статус 
		|	КОНЕЦ КАК Статус
		|ИЗ
		|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов КАК ПланыЗанятостиТрудовыхРесурсов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПроизводства КАК ПланПроизводстваДокумент
		|		ПО ПланыЗанятостиТрудовыхРесурсов.ПланПроизводства = ПланПроизводстваДокумент.Ссылка
		|ГДЕ
		|	ПланыЗанятостиТрудовыхРесурсов.Регистратор = &Регистратор
		|");
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
			МассивРезультатов = Запрос.ВыполнитьПакет();
			
			ВыборкаСтатус = МассивРезультатов[1].Выбрать();
			
			Если ВыборкаСтатус.Следующий() 
				И ВыборкаСтатус.Статус = Перечисления.СтатусыПланов.Отменен Тогда
				
				НаборЗаписейУдалить = РегистрыНакопления.ПланыЗанятостиТрудовыхРесурсов.СоздатьНаборЗаписей();
				НаборЗаписейУдалить.Отбор.Регистратор.Установить(Выборка.Регистратор);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейУдалить);
				
			ИначеЕсли Не МассивРезультатов[0].Пустой() Тогда
				
				НаборЗаписей = РегистрыНакопления.ПланыЗанятостиТрудовыхРесурсов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Загрузить(МассивРезультатов[0].Выгрузить());
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				
			Иначе
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Регистратор, ДополнительныеПараметры);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
