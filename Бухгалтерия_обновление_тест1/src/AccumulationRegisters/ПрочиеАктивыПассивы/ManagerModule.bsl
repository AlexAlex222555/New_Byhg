#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма()).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы);
		
		Если ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс")
			И ТипЗнч(Документ) <> Тип("ДокументОбъект.РасчетСебестоимостиТоваров") Тогда
			
			Параметры.Производный = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//  ТаблицыДляДвижений - Структура - таблицы данных документа
//  Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПрочиеАктивыПассивы");
	
КонецПроцедуры

// Возникает перед выполнением записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

// Возникает после выполнения записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	УправленческийУчетПроведениеСервер.ОбновитьДвиженияАктивовПассивов(Документ.Ссылка, Документ.Движения);
	
КонецПроцедуры

#КонецОбласти

// Формирует текст запроса для формирования движений по регистру "Активы и пассивы".
//
Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(ЕстьВтПартииПрочихРасходов = Истина) Экспорт
	
	ТекстЗапроса = "
	// Отражение уменьшения пассивов у организации - источника.
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Строки.Организация КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
	|	Строки.Организация КАК Аналитика,
	|	СУММА(Строки.Сумма) КАК Сумма
	|ИЗ
	|	ВтПрочиеРасходы КАК Строки
	|ГДЕ
	|	Строки.ОрганизацияПолучатель <> Строки.Организация
	|СГРУППИРОВАТЬ ПО
	|	Строки.Период,
	|	Строки.Организация,
	|	Строки.Подразделение,
	|	Строки.НаправлениеДеятельности
	|
	// Отражение увеличения пассивов учете у организации - получателя.
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Строки.ОрганизацияПолучатель КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
	|	Строки.ОрганизацияПолучатель КАК Аналитика,
	|	СУММА(Строки.Сумма) КАК Сумма
	|ИЗ
	|	ВтПрочиеРасходы КАК Строки
	|ГДЕ
	|	Строки.ОрганизацияПолучатель <> Строки.Организация
	|СГРУППИРОВАТЬ ПО
	|	Строки.Период,
	|	Строки.ОрганизацияПолучатель,
	|	Строки.Подразделение,
	|	Строки.НаправлениеДеятельности
	|";
	Если ЕстьВтПартииПрочихРасходов Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + "
		// Отражение уменьшения пассивов у организации - источника.
		|ВЫБРАТЬ
		|	Строки.Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	Строки.Организация КАК Организация,
		|	Строки.Подразделение КАК Подразделение,
		|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
		|	Строки.Организация КАК Аналитика,
		|	СУММА(Строки.Стоимость) КАК Сумма
		|ИЗ
		|	ВтПартииПрочихРасходов КАК Строки
		|ГДЕ
		|	Строки.ОрганизацияПолучатель <> Строки.Организация
		|СГРУППИРОВАТЬ ПО
		|	Строки.Период,
		|	Строки.Организация,
		|	Строки.Подразделение,
		|	Строки.НаправлениеДеятельности
		|
		// Отражение увеличения пассивов учете у организации - получателя.
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Строки.Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	Строки.ОрганизацияПолучатель КАК Организация,
		|	Строки.Подразделение КАК Подразделение,
		|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
		|	Строки.ОрганизацияПолучатель КАК Аналитика,
		|	СУММА(Строки.Стоимость) КАК Сумма
		|ИЗ
		|	ВтПартииПрочихРасходов КАК Строки
		|ГДЕ
		|	Строки.ОрганизацияПолучатель <> Строки.Организация
		|СГРУППИРОВАТЬ ПО
		|	Строки.Период,
		|	Строки.ОрганизацияПолучатель,
		|	Строки.Подразделение,
		|	Строки.НаправлениеДеятельности
		|";
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолноеИмяРегистра()
	
	Возврат "РегистрНакопления.ПрочиеАктивыПассивы";
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
    Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a2553e25-65f9-47b3-81ff-44255b36833c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПрочиеАктивыПассивы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновляются даные управленческого баланса.
    |До завершения обработчика данные  отчета ""Управленческий баланс"" могут быть некорректны.'
    |;uk='Відновлюються дані управлінського балансу.
    |До завершення обробника дані звіту ""Управлінський баланс"" можуть бути некоректними.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПереданнаяВозвратнаяТара.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПринятаяВозвратнаяТара.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваНаличные.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПодарочныеСертификаты.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВПути.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПрочиеДоходыРасходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ДвижениеПрочихАктивовПассивов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств.ПолноеИмя());
	//++ НЕ УТ
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДенежныеДокументы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтражениеЗарплатыВФинансовомУчете.ПолноеИмя());
	//-- НЕ УТ
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
    
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
    
    НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДенежныеСредстваВКассахККМ.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДенежныеСредстваВПути.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
    НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДенежныеСредстваБезналичные.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДенежныеСредстваНаличные.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

    НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПартииПрочихРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

    НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеДоходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыПоФинансовымИнструментам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

    НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

    НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ДвижениеПрочихАктивовПассивов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПрочиеДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

    НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
    //++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДенежныеДокументы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
    НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
    НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтражениеЗарплатыВФинансовомУчете.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеСформироватьДвиженияПоАкцизу";
    Обработчик.Версия = "3.5.10.7";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("180fef27-23db-45b2-964a-9aa3f05eddb8");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПрочиеАктивыПассивы.ЗарегистрироватьДанныеКОбработкеСформироватьДвиженияПоАкцизу";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновляются данные управленческого баланса по акцизу.';uk='Оновлюються дані управлінського балансу по акцизу.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетОРозничныхПродажах.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеНедостачТоваров.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
    
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
    
    НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетОРозничныхПродажах.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
    
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеНедостачТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = ПолноеИмяРегистра();
    
    
	// Регистрация документов влияющих на управленческий баланс происходит в регистрах-источниках данных для
	// управленческого баланса. Ниже перечислены все регистры накопления в которых происходит вызов процедуры ЗарегистироватьКОбновлениюУправленческогоБаланса:
	// - ТоварыКОформлениюОтчетовКомитенту
	// - РасчетыПоФинансовымИнструментам
	
	// Регистрация документов изменяющих движения текущего регистра.
    
    
	МассивАналитик = Новый Массив;
	МассивАналитик.Добавить(Неопределено);
	МассивАналитик.Добавить(Перечисления.ТипыНалогов.ПустаяСсылка());
	
	Запрос = Новый Запрос;   
    
#Область ТекстЗапроса

    Запрос.Текст=
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПрочиеАктивыПассивы КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрочиеДоходыРасходы.ПрочиеРасходы КАК ТЧ
	|		ПО ДанныеРегистра.Регистратор = ТЧ.Ссылка
	|			И (ТЧ.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|			И (ТЧ.КорПодразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеАктивыПассивы.Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеАктивыПассивы КАК ПрочиеАктивыПассивы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПрочиеАктивыПассивы.Регистратор) В 
	|		(ТИП(Документ.РасходныйКассовыйОрдер), 
	//++ НЕ УТ
	|		ТИП(Документ.ДепонированиеЗарплаты),
	|		ТИП(Документ.ОтражениеЗарплатыВФинансовомУчете), 
	//-- НЕ УТ
	|		ТИП(Документ.СписаниеБезналичныхДенежныхСредств))
	|	И (ПрочиеАктивыПассивы.Статья = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда)
	|				И НЕ ПрочиеАктивыПассивы.Аналитика = НЕОПРЕДЕЛЕНО
	|			ИЛИ ПрочиеАктивыПассивы.Статья = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|				И ПрочиеАктивыПассивы.Аналитика В (&Аналитики))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеАктивыПассивы КАК ДанныеРегистра
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (
	|		ТИП(Документ.ВнесениеДенежныхСредствВКассуККМ),
	|		ТИП(Документ.ВыемкаДенежныхСредствИзКассыККМ))
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеАктивыПассивы.Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеАктивыПассивы КАК ПрочиеАктивыПассивы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПрочиеАктивыПассивы.Регистратор) = ТИП(Документ.НачислениеОценочныхОбязательствПоОтпускам) 
	|	И (ПрочиеАктивыПассивы.Статья = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда)
	|				И НЕ ПрочиеАктивыПассивы.Аналитика = НЕОПРЕДЕЛЕНО
	|			ИЛИ ПрочиеАктивыПассивы.Статья = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|				И НЕ ПрочиеАктивыПассивы.Аналитика В (&Аналитики))
	//-- НЕ УТ
	|";  
    
#КонецОбласти
    
    Запрос.УстановитьПараметр("Аналитики", МассивАналитик);
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), 
        ПолноеИмяРегистра()
    );
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = ПолноеИмяРегистра();   
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь)[1];
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы;

	ДляОбновленияУпрБаланса = Новый Соответствие;
	
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетКомиссионера"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетКомиссионераОСписании"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетКомитенту"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетКомитентуОСписании"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ПересортицаТоваров"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ПорчаТоваров"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ПрочееОприходованиеТоваров"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.РеализацияТоваровУслуг"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.СборкаТоваров"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.СписаниеНедостачТоваров"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"), Истина);
	//++ НЕ УТ
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ВозвратСырьяОтПереработчика"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ПередачаСырьяПереработчику"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ПередачаМатериаловВПроизводство"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.РаспределениеПроизводственныхЗатрат"), Истина);
	//-- НЕ УТ  
    
	
	ДляОчисткиДвижений = Новый Соответствие;
	ДляОчисткиДвижений.Вставить(Тип("ДокументСсылка.ВнесениеДенежныхСредствВКассуККМ"), Истина);
	ДляОчисткиДвижений.Вставить(Тип("ДокументСсылка.ВыемкаДенежныхСредствИзКассыККМ"), Истина);
	
	ДляОбновленияАналитик = Новый Соответствие;
	ДляОбновленияАналитик.Вставить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"), "Документ.РасходныйКассовыйОрдер");
	ДляОбновленияАналитик.Вставить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"), "Документ.СписаниеБезналичныхДенежныхСредств");
	//++ НЕ УТ
	ДляОбновленияАналитик.Вставить(Тип("ДокументСсылка.ДепонированиеЗарплаты"), "Документ.ДепонированиеЗарплаты");
	ДляОбновленияАналитик.Вставить(Тип("ДокументСсылка.ОтражениеЗарплатыВФинансовомУчете"), "Документ.ОтражениеЗарплатыВФинансовомУчете");
	ДляОбновленияАналитик.Вставить(Тип("ДокументСсылка.НачислениеОценочныхОбязательствПоОтпускам"), "Документ.НачислениеОценочныхОбязательствПоОтпускам");
	//-- НЕ УТ
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	//++ НЕ УТ
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ДепонированиеЗарплаты");
	Регистраторы.Добавить("Документ.ОтражениеЗарплатыВФинансовомУчете");
	Регистраторы.Добавить("Документ.НачислениеОценочныхОбязательствПоОтпускам");
	
	ДополнительныеПараметрыПроверкиБлокировки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыПроверкиБлокировки.ИмяВременнойТаблицы = "ВтЗаблокированныеСсылки";
	ЗаблокированныеСсылки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
		Параметры.Очередь,
		Регистраторы,
		МВТ,
		ДополнительныеПараметрыПроверкиБлокировки
    );
	//-- НЕ УТ
    
    ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДопИсточники = ВлияетНаУправленческийБаланс();
	ДопПараметры.ДополнительныеИсточникиДанных = ДопИсточники;
	
	ДопПараметры.ИмяВременнойТаблицы = "втРегистраторы";
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
        Параметры.Очередь, 
        Неопределено, 
        ПолноеИмяРегистра, 
        МВТ, 
        ДопПараметры
    );
    
    Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
    
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втРегистраторы.Регистратор КАК Регистратор
	|ИЗ
	|	втРегистраторы КАК втРегистраторы
	//++ НЕ УТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокированныеСсылки
	|		ПО втРегистраторы.Регистратор = ВтЗаблокированныеСсылки.Ссылка
	|ГДЕ
	|	ВтЗаблокированныеСсылки.Ссылка ЕСТЬ NULL 
	//-- НЕ УТ
	|";
	#КонецОбласти
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	ВключаяОнлайнРасчеты = Истина;
	БалансовыеРегистры = Обработки.ДвиженияАктивовПассивов.БалансовыеРегистры(ВключаяОнлайнРасчеты);
    
    Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		ТипДокументСсылка = ТипЗнч(Регистратор);
		МетаданныеДокументСсылка = Регистратор.Метаданные();
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			#Область БлокировкаИсточниковУпрБаланса
            
            Если ДляОбновленияУпрБаланса[ТипДокументСсылка] <> Неопределено Тогда
				
				ИсточникиБаланса = Новый Массив;
				Для Каждого Набор Из МетаданныеДокументСсылка.Движения Цикл
				
					ПолноеИмяНабора = Набор.ПолноеИмя();
					Если СтрНайти(ПолноеИмяНабора, "РегистрНакопления") = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяНабора = СтрЗаменить(ПолноеИмяНабора, "РегистрНакопления.", "");
					Если ИмяНабора = "ПрочиеАктивыПассивы" Тогда
						ИсточникиБаланса.Добавить(ИмяНабора);
						Продолжить;
					КонецЕсли;
					БалансовыйРегистр = БалансовыеРегистры.Свойство(ИмяНабора);
					Если НЕ БалансовыйРегистр Тогда
						Продолжить;
					КонецЕсли;
					
					ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяНабора + ".НаборЗаписей");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
					
					ИсточникиБаланса.Добавить(ИмяНабора);
					
				КонецЦикла;
				
			КонецЕсли;
			#КонецОбласти

			Если Не ДляОбновленияАналитик[ТипДокументСсылка] = Неопределено Тогда
					
				ЭлементБлокировки = Блокировка.Добавить(ДляОбновленияАналитик[ТипДокументСсылка]);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
					
			КонецЕсли;
            
			Блокировка.Заблокировать();
		
			НаборЗаписей = РегистрыНакопления.ПрочиеАктивыПассивы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			
			Если ДляОчисткиДвижений[ТипДокументСсылка] <> Неопределено
				ИЛИ ДляОбновленияУпрБаланса[ТипДокументСсылка] <> Неопределено Тогда
				// НаборЗаписей не заполняем
			ИначеЕсли ДляОбновленияАналитик[ТипДокументСсылка] <> Неопределено Тогда
				
			    ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, ИмяРегистра);
			    Результат = ТаблицыДляДвижений["Таблица" + ИмяРегистра];
			    НаборЗаписей.Загрузить(Результат);
				
			КонецЕсли;
			
            // Обновим даные управленческого баланса
            Если ДляОбновленияУпрБаланса[ТипДокументСсылка] <> Неопределено Тогда
                ОбновитьУправленческийБаланс(Регистратор, НаборЗаписей, ИсточникиБаланса);
            КонецЕсли;
			
			Если НаборЗаписей.Количество() > 0 Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось заполнить движения по регистру ""Активы и пассивы"" документа ""%1"" по причине: %2';uk='Не вдалося заповнити рухи з регістру ""Активи та пасиви"" документа ""%1"" по причині: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Регистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
            
            ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				Регистратор,
				ТекстСообщения
            );
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяРегистра
    );
    
    
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеСформироватьДвиженияПоАкцизу(Параметры) Экспорт
	
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаТоваров
	|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыПассивы КАК ПрочиеАктивыПассивы
	|	ПО ТаблицаТоваров.Ссылка = ПрочиеАктивыПассивы.Регистратор
	|   И ПрочиеАктивыПассивы.Статья = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|   И ПрочиеАктивыПассивы.Аналитика = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.Акциз)
	|ГДЕ                       
	|   ТаблицаТоваров.Ссылка.Проведен 
	|	И ТаблицаТоваров.СтатьяДекларацииПоАкцизномуНалогу <> ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.ПустаяСсылка)
	|	И ТаблицаТоваров.СуммаАкцизногоНалога <> 0
	|   И ПрочиеАктивыПассивы.Регистратор ЕСТЬ NULL 
	|";
    СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК ТаблицаТоваров
	|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыПассивы КАК ПрочиеАктивыПассивы
	|	ПО ТаблицаТоваров.Ссылка = ПрочиеАктивыПассивы.Регистратор
	|   И ПрочиеАктивыПассивы.Статья = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|   И ПрочиеАктивыПассивы.Аналитика = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.Акциз)
	|ГДЕ            
	|   ТаблицаТоваров.Ссылка.Проведен 
	|	И ТаблицаТоваров.Ссылка.СтатьяДекларацииПоАкцизномуНалогу <> ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.ПустаяСсылка)
	|	И ТаблицаТоваров.СуммаАкцизногоНалога <> 0
	|   И ПрочиеАктивыПассивы.Регистратор ЕСТЬ NULL 
	|";
    СписокЗапросов.Добавить(ТекстЗапроса);
	
	Если СписокЗапросов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы, 
		ПолноеИмяРегистра()
	);
    
КонецПроцедуры

Процедура ОбработатьДанныеСформироватьДвиженияПоАкцизу(Параметры) Экспорт

 	ПолноеИмяРегистра = ПолноеИмяРегистра();
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь)[1];
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
        Параметры.Очередь, 
        Неопределено, 
        ПолноеИмяРегистра
    );

	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Набор = РегистрыНакопления.ПрочиеАктивыПассивы.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);   
			Набор.Прочитать(); 
			ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, ИмяРегистра);
			РезультатПроведения = ТаблицыДляДвижений["Таблица" + ИмяРегистра];  
			Для Каждого СтрокаРезультатПроведения Из РезультатПроведения Цикл
				НоваяСтрока = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатПроведения); 
				НоваяСтрока.Регистратор = Регистратор; 
				НоваяСтрока.Активность = Истина;
			КонецЦикла;        
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();   
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(
				ИнформацияОбОшибке(), 
				Регистратор
			);
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяРегистра
    );
	
КонецПроцедуры    

#КонецОбласти

#Область ОбновлениеУправленческогоБаланса

Процедура ЗарегистироватьКОбновлениюУправленческогоБаланса(Параметры, Регистраторы, ПолноеИмяРегистраИсточника) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс")
		ИЛИ НЕ Константы.ЗаполненыДвиженияАктивовПассивов.Получить()
		ИЛИ НЕ ВлияетНаУправленческийБаланс(ПолноеИмяРегистраИсточника)
		ИЛИ НЕ ЗначениеЗаполнено(Регистраторы) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУпрБаланса = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
	ПараметрыУпрБаланса.Очередь = ОбновлениеИнформационнойБазы.ОчередьОтложенногоОбработчикаОбновления("РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию");
	Регистраторы = ОтобратьРегистраторыУправленческогоБаланса(Регистраторы);
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(ПараметрыУпрБаланса, Регистраторы, ПолноеИмяРегистра());
	
КонецПроцедуры

Функция ОтобратьРегистраторыУправленческогоБаланса(Регистраторы)
	
	Типы = Новый Соответствие;
	Для Каждого Регистратор Из Регистраторы Цикл
		Типы.Вставить(ТипЗнч(Регистратор));
	КонецЦикла;
	МассивТипов = Новый Массив;
	Для Каждого Тип Из Типы Цикл
		МассивТипов.Добавить(Тип.Ключ);
	КонецЦикла;
	ТипКолонки = Новый ОписаниеТипов(МассивТипов);
	
	ТаблицаРегистраторов = Новый ТаблицаЗначений;
	ТаблицаРегистраторов.Колонки.Добавить("Регистратор", ТипКолонки);
	Для Каждого Регистратор Из Регистраторы Цикл
		НоваяСтрока = ТаблицаРегистраторов.Добавить();
		НоваяСтрока.Регистратор = Регистратор;
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	 Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ втРегистраторы
	|ИЗ
	|	&ТаблицаРегистраторов КАК Т
	|;
	|
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор
	|ИЗ
	|	втРегистраторы КАК Т
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ТипыРегистраторовРегистра)";
	
	ТипыРегистраторовРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТипыРегистраторовРегистра", ТипыРегистраторовРегистра);
	Запрос.УстановитьПараметр("ТаблицаРегистраторов", ТаблицаРегистраторов);
	
	Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Возврат Выборка;
	
КонецФункции

// Проверяет влияние обновления регистра-источника на управленческий баланс.
// Если в регистре-источник изменились незначимые реквизиты или обработчик обновления отсутствует,
// то после его обновления движения упр. баланса не изменятся.
// Флаги проставляются вручную на основании экспертной оценки.
//
// Параметры:
//  ПолноеИмяРегистра - Строка - полное имя регистра в формате "РегистрНакопления.ИмяРегисра".
//
// Возвращаемое значение:
//  Истина - изменения в источника влияют на упр. баланс
//  Соответствие - если ПолноеИмяРегистра = НЕОПРЕДЕЛНО, возвращается соответствие со всеми влияющими источниками упр. баланса.
Функция ВлияетНаУправленческийБаланс(ПолноеИмяРегистра = Неопределено)
	
	ОбновлениеИзменитБаланс = Новый Соответствие;
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ДенежныеДокументыСсылка"               , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ДенежныеСредстваБезналичные"           , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ДенежныеСредстваВКассахККМ"            , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ДенежныеСредстваВПути"                 , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ДенежныеСредстваНаличные"              , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц"       , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПартииПрочихРасходов"                  , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПереданнаяВозвратнаяТара"              , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПодарочныеСертификаты"                 , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПринятаяВозвратнаяТара"                , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПрочиеАктивыПассивы"                   , Истина);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПрочиеДоходы"                          , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПрочиеРасходы"                         , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.РасчетыПоФинансовымИнструментам"       , Истина);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.РасчетыСКлиентамиПоДокументам"         , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.РасчетыСПоставщикамиПоДокументам"      , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.РасчетыСКлиентамиПоСрокам"             , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.РасчетыСПоставщикамиПоСрокам"          , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.СебестоимостьТоваров"                  , Истина);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту"     , Истина);
	//++ НЕ УТ
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ТрудозатратыНезавершенногоПроизводства", Ложь);
	//-- НЕ УТ
	
	Если ПолноеИмяРегистра = Неопределено Тогда
		ВлияющиеИсточники = Новый Соответствие;
		Для Каждого Источник Из ОбновлениеИзменитБаланс Цикл
			Если Источник.Значение Тогда
				ВлияющиеИсточники.Вставить(Источник.Ключ, Истина);
			КонецЕсли;
		КонецЦикла;
		Возврат ВлияющиеИсточники;
	КонецЕсли;
	
	Возврат ОбновлениеИзменитБаланс[ПолноеИмяРегистра];
	
КонецФункции

Процедура ОбновитьУправленческийБаланс(Регистратор, ПрочиеАктивыПассивы, ИсточникиБаланса)
	
	ТаблицыДляДвижений = Новый Структура;
	Для Каждого ИмяРегистра Из ИсточникиБаланса Цикл
		Если ИмяРегистра = "ПрочиеАктивыПассивы" И ПрочиеАктивыПассивы.Количество() > 0 Тогда
			ТаблицыДляДвижений.Вставить("ПрочиеАктивыПассивы", ПрочиеАктивыПассивы.Выгрузить());
		Иначе
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			ТаблицыДляДвижений.Вставить(ИмяРегистра, Набор.Выгрузить());
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыДвижений = Новый Структура("Ссылка", Регистратор);
	ПараметрыДвижений.Вставить("ТаблицыДляДвижений", ТаблицыДляДвижений);
    ПараметрыДвижений.Вставить("ВидОтложеннсогоРасчета", Перечисления.ВидыИсточниковДвижений.РасчетБаланса);
	ЗапросДвижений = Обработки.ДвиженияАктивовПассивов.ЗапросДвижений(ПараметрыДвижений);
	Если ЗапросДвижений <> Неопределено Тогда
		ДвиженияАктивовПассивов = ЗапросДвижений.Выполнить().Выгрузить();
		Если ПрочиеАктивыПассивы.Количество() > 0 Тогда
			ПрочиеАктивыПассивы.Очистить();
		КонецЕсли;
		Для Каждого Движение Из ДвиженияАктивовПассивов Цикл
			НоваяЗапись = ПрочиеАктивыПассивы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Движение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
