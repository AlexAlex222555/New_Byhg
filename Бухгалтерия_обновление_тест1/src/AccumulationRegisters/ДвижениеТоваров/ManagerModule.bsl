#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура рассчитывает и записывает итог запланированного поступления по распоряжению а регистр 
// ГрафикПоступленияТоваров (в регистр записи пишутся только из этого модуля).
// Все плановые поступления\отгрузки записываются в регистр движения товаров. Дата поступления\отгрузки
// указывается в "Периоде". При фактическом поступлении\отгрузке по заказу происходит закрытие графика
// поступления\отгрузки по ФИФО. Рассчитанные записи записываются под распоряжение. Если поступило\отгрузили
// больше, чем в заказе - отрицательные остатки в регистр не пишутся.
// 
// Параметры:
//  МассивРаспоряжений - Массив - массив распоряжений (заказов) по которым нужно рассчитать график поступления.
//  ОбеспечениеЗаказовДополнительныеСвойства - Булево - Структура дополнительных свойств передаваемая набору
//                                                      записей регистра "Обеспечение заказов".
//
Процедура РассчитатьИтогиРегистраОстаткиТоваровПоГрафику(МассивРаспоряжений, ОбеспечениеЗаказовДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(Движения.ДатаРаспоряжения)    КАК ДатаРаспоряжения,
		|	Движения.Распоряжение                  КАК Распоряжение,
		|	Движения.Номенклатура                  КАК Номенклатура,
		|	Движения.Характеристика                КАК Характеристика,
		|	Движения.Назначение                    КАК Назначение,
		|	Движения.Склад                         КАК Склад,
		|
		|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
		|				-Движения.ПланируемоеПоступление
		|			ИНАЧЕ
		|				Движения.ПланируемоеПоступление
		|		КОНЕЦ)                             КАК ПланируемоеПоступлениеОстаток,
		|
		|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
		|				- Движения.ПланируемоеПоступлениеПодЗаказ
		|			ИНАЧЕ
		|				Движения.ПланируемоеПоступлениеПодЗаказ
		|		КОНЕЦ)                             КАК ПланируемоеПоступлениеПодЗаказОстаток,
		|
		|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
		|				-Движения.ПланируемоеПоступлениеСНеподтвержденными
		|			ИНАЧЕ
		|				Движения.ПланируемоеПоступлениеСНеподтвержденными
		|		КОНЕЦ)                             КАК ПланируемоеПоступлениеСНеподтвержденнымиОстаток,
		|
		|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
		|				- Движения.ПланируемоеПоступлениеПодЗаказСНеподтвержденными
		|			ИНАЧЕ
		|				Движения.ПланируемоеПоступлениеПодЗаказСНеподтвержденными
		|		КОНЕЦ)                             КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденнымиОстаток
		|
		|ПОМЕСТИТЬ ОстаткиПоРаспоряжению
		|
		|ИЗ
		|	РегистрНакопления.ДвижениеТоваров КАК Движения
		|ГДЕ
		|	Движения.Распоряжение В(&МассивРаспоряжений)
		|	И Движения.Активность
		|СГРУППИРОВАТЬ ПО
		|	Движения.Распоряжение,
		|	Движения.Номенклатура, Движения.Характеристика, Движения.Склад, Движения.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ)   КАК Период,
		|	Таблица.Номенклатура                  КАК Номенклатура,
		|	Таблица.Характеристика                КАК Характеристика,
		|	Таблица.Назначение                    КАК Назначение,
		|	Таблица.Склад                         КАК Склад,
		|	Таблица.Распоряжение                  КАК Распоряжение,
		|
		|	СУММА(Таблица.ПланируемоеПоступление)                           КАК ПланируемоеПоступление,
		|	СУММА(Таблица.ПланируемоеПоступлениеПодЗаказ)                   КАК ПланируемоеПоступлениеПодЗаказ,
		|	СУММА(Таблица.ПланируемоеПоступлениеСНеподтвержденными)         КАК ПланируемоеПоступлениеСНеподтвержденными,
		|	СУММА(Таблица.ПланируемоеПоступлениеПодЗаказСНеподтвержденными) КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
		|
		|ПОМЕСТИТЬ ПланДвижения
		|
		|ИЗ
		|	РегистрНакопления.ДвижениеТоваров КАК Таблица
		|ГДЕ
		|	Таблица.Распоряжение В(&МассивРаспоряжений)
		|	И (Таблица.ПланируемоеПоступление > 0
		|		ИЛИ Таблица.ПланируемоеПоступлениеПодЗаказ > 0
		|		ИЛИ Таблица.ПланируемоеПоступлениеСНеподтвержденными > 0
		|		ИЛИ Таблица.ПланируемоеПоступлениеПодЗаказСНеподтвержденными > 0)
		|	И Таблица.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ),
		|	Таблица.Распоряжение,
		|	Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад, Таблица.Назначение
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	План.Период                                                                         КАК Период,
		|	План.Номенклатура                                                                   КАК Номенклатура,
		|	План.Характеристика                                                                 КАК Характеристика,
		|	План.Склад                                                                          КАК Склад,
		|	План.Назначение                                                                     КАК Назначение,
		|	План.Распоряжение                                                                   КАК Распоряжение,
		|
		|	МАКСИМУМ(План.ПланируемоеПоступление)                                               КАК ПланируемоеПоступление,
		|	МАКСИМУМ(План.ПланируемоеПоступлениеПодЗаказ)                                       КАК ПланируемоеПоступлениеПодЗаказ,
		|	СУММА(ЕСТЬNULL(Остатки.ПланируемоеПоступлениеОстаток, 0))                           КАК ПланируемоеПоступлениеОстаток,
		|	СУММА(ЕСТЬNULL(Остатки.ПланируемоеПоступлениеПодЗаказОстаток, 0))                   КАК ПланируемоеПоступлениеПодЗаказОстаток,
		|
		|	МАКСИМУМ(План.ПланируемоеПоступлениеСНеподтвержденными)                             КАК ПланируемоеПоступлениеСНеподтвержденными,
		|	МАКСИМУМ(План.ПланируемоеПоступлениеПодЗаказСНеподтвержденными)                     КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными,
		|	СУММА(ЕСТЬNULL(Остатки.ПланируемоеПоступлениеСНеподтвержденнымиОстаток, 0))         КАК ПланируемоеПоступлениеСНеподтвержденнымиОстаток,
		|	СУММА(ЕСТЬNULL(Остатки.ПланируемоеПоступлениеПодЗаказСНеподтвержденнымиОстаток, 0)) КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденнымиОстаток,
		|
		|	МАКСИМУМ(ЕСТЬNULL(Остатки.ДатаРаспоряжения, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаРаспоряжения
		|
		|ИЗ
		|	ПланДвижения КАК План
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоРаспоряжению КАК Остатки
		|		ПО План.Номенклатура      = Остатки.Номенклатура
		|			И План.Характеристика = Остатки.Характеристика
		|			И План.Склад          = Остатки.Склад
		|			И План.Распоряжение   = Остатки.Распоряжение
		|			И План.Назначение     = Остатки.Назначение
		|
		|СГРУППИРОВАТЬ ПО
		|	План.Период,
		|	План.Номенклатура, План.Характеристика, План.Склад, План.Назначение,
		|	План.Распоряжение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Распоряжение,
		|	Номенклатура, Характеристика, Склад, Назначение,
		|	Период УБЫВ";

	НаборЗаписей = РегистрыНакопления.ГрафикПоступленияТоваров.СоздатьНаборЗаписей();
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьЗаписиВВыборке = Выборка.Следующий();
	Пока ЕстьЗаписиВВыборке Цикл

		ТекСклад          = Неопределено;
		ТекНоменклатура   = Неопределено;
		ТекХарактеристика = Неопределено;
		ТекНазначение     = Неопределено;
		ТекРаспоряжение   = Выборка.Распоряжение;

		НаборЗаписей.Отбор.Регистратор.Установить(ТекРаспоряжение);
		// Из таблицы удаляем отработанное распоряжение
		МассивРаспоряжений.Удалить(МассивРаспоряжений.Найти(ТекРаспоряжение));

		// Цикл по строкам одного распоряжения на поступление\отгрузку.
		ДатаРаспоряжения = НачалоДня(ТекущаяДатаСеанса());
		Пока ЕстьЗаписиВВыборке И Выборка.Распоряжение = ТекРаспоряжение Цикл

			Если ЗначениеЗаполнено(Выборка.ДатаРаспоряжения) Тогда
				ДатаРаспоряжения = Выборка.ДатаРаспоряжения;
			КонецЕсли;
			
			Если ТекНоменклатура <> Выборка.Номенклатура Или ТекХарактеристика <> Выборка.Характеристика
				Или ТекСклад <> Выборка.Склад Или ТекНазначение <> Выборка.Назначение Тогда

				ТекНоменклатура   = Выборка.Номенклатура;
				ТекХарактеристика = Выборка.Характеристика;
				ТекСклад          = Выборка.Склад;
				ТекНазначение     = Выборка.Назначение;

				ПоступлениеКоличествоОстаток = 0;
				Если Выборка.ПланируемоеПоступлениеОстаток > 0 Тогда
					ПоступлениеКоличествоОстаток = Выборка.ПланируемоеПоступлениеОстаток;
				КонецЕсли;

				ПоступлениеПодЗаказКоличествоОстаток = 0;
				Если Выборка.ПланируемоеПоступлениеПодЗаказОстаток > 0 Тогда
					ПоступлениеПодЗаказКоличествоОстаток = Выборка.ПланируемоеПоступлениеПодЗаказОстаток;
				КонецЕсли;

				ПоступлениеКоличествоСНеподтвержденнымиОстаток = 0;
				Если Выборка.ПланируемоеПоступлениеСНеподтвержденнымиОстаток > 0 Тогда
					ПоступлениеКоличествоСНеподтвержденнымиОстаток = Выборка.ПланируемоеПоступлениеСНеподтвержденнымиОстаток;
				КонецЕсли;

				ПоступлениеПодЗаказКоличествоСНеподтвержденнымиОстаток = 0;
				Если Выборка.ПланируемоеПоступлениеПодЗаказСНеподтвержденнымиОстаток > 0 Тогда
					ПоступлениеПодЗаказКоличествоСНеподтвержденнымиОстаток = Выборка.ПланируемоеПоступлениеПодЗаказСНеподтвержденнымиОстаток;
				КонецЕсли;

			КонецЕсли;

			КоличествоПоступление = 0;
			КоличествоПоступлениеПодЗаказ = 0;
			
			КоличествоПоступлениеСНеподтвержденными = 0;
			КоличествоПоступлениеПодЗаказСНеподтвержденными = 0;

			Если Выборка.ПланируемоеПоступление > 0
				Или Выборка.ПланируемоеПоступлениеПодЗаказ > 0
				Или Выборка.ПланируемоеПоступлениеСНеподтвержденными > 0
				Или Выборка.ПланируемоеПоступлениеПодЗаказСНеподтвержденными > 0 Тогда

				КоличествоПоступление         = Мин(Выборка.ПланируемоеПоступление,         ПоступлениеКоличествоОстаток);
				КоличествоПоступлениеПодЗаказ = Мин(Выборка.ПланируемоеПоступлениеПодЗаказ, ПоступлениеПодЗаказКоличествоОстаток);
				
				КоличествоПоступлениеСНеподтвержденными         = Мин(Выборка.ПланируемоеПоступлениеСНеподтвержденными,         ПоступлениеКоличествоСНеподтвержденнымиОстаток);
				КоличествоПоступлениеПодЗаказСНеподтвержденными = Мин(Выборка.ПланируемоеПоступлениеПодЗаказСНеподтвержденными, ПоступлениеПодЗаказКоличествоСНеподтвержденнымиОстаток);
				
				Если КоличествоПоступление > 0
					Или КоличествоПоступлениеПодЗаказ > 0
					Или КоличествоПоступлениеСНеподтвержденными > 0
					Или КоличествоПоступлениеПодЗаказСНеподтвержденными > 0 Тогда
					
					ДобавитьПриходВГрафик(НаборЗаписей,
					                      Выборка,
					                      КоличествоПоступление,
					                      КоличествоПоступлениеПодЗаказ,
					                      КоличествоПоступлениеСНеподтвержденными,
					                      КоличествоПоступлениеПодЗаказСНеподтвержденными);
				КонецЕсли;
				
				ПоступлениеКоличествоОстаток         = ПоступлениеКоличествоОстаток         - КоличествоПоступление;
				ПоступлениеПодЗаказКоличествоОстаток = ПоступлениеПодЗаказКоличествоОстаток - КоличествоПоступлениеПодЗаказ;
				
				ПоступлениеКоличествоСНеподтвержденнымиОстаток         = ПоступлениеКоличествоСНеподтвержденнымиОстаток         - КоличествоПоступлениеСНеподтвержденными;
				ПоступлениеПодЗаказКоличествоСНеподтвержденнымиОстаток = ПоступлениеПодЗаказКоличествоСНеподтвержденнымиОстаток - КоличествоПоступлениеПодЗаказСНеподтвержденными;

			КонецЕсли;

			// Переход к следующей записи в выборке.
			ЕстьЗаписиВВыборке = Выборка.Следующий();

		КонецЦикла;

		// Запись и очистка набора.
		НаборЗаписей.Записать(Истина);
		ЗаписатьОбеспечениеЗаказов(НаборЗаписей, ДатаРаспоряжения, ОбеспечениеЗаказовДополнительныеСвойства);
		НаборЗаписей.Очистить();

	КонецЦикла;

	// По неотработанным распоряжениям нужно очистить движения.
	НаборЗаписей.Очистить();
	ДатаРаспоряжения = Неопределено;
	Если МассивРаспоряжений.Количество() > 0 Тогда
		Для Каждого Распоряжение Из МассивРаспоряжений Цикл
			
			НаборЗаписей.Отбор.Регистратор.Установить(Распоряжение);
			НаборЗаписей.Записать(Истина);
			ЗаписатьОбеспечениеЗаказов(НаборЗаписей, ДатаРаспоряжения, ОбеспечениеЗаказовДополнительныеСвойства);
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Склад)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Функция РассчитатьИтогиРегистраОстаткиТоваровПоГрафикуДляОбновленияИБ(Распоряжение) Экспорт

	НаборЗаписей = РегистрыНакопления.ГрафикПоступленияТоваров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Распоряжение);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(Движения.ДатаРаспоряжения)    КАК ДатаРаспоряжения,
		|	Движения.Распоряжение                  КАК Распоряжение,
		|	Движения.Номенклатура                  КАК Номенклатура,
		|	Движения.Характеристика                КАК Характеристика,
		|	Движения.Назначение                    КАК Назначение,
		|	Движения.Склад                         КАК Склад,
		|
		|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
		|				-Движения.ПланируемоеПоступление
		|			ИНАЧЕ
		|				Движения.ПланируемоеПоступление
		|		КОНЕЦ)                             КАК ПланируемоеПоступлениеОстаток,
		|
		|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
		|				- Движения.ПланируемоеПоступлениеПодЗаказ
		|			ИНАЧЕ
		|				Движения.ПланируемоеПоступлениеПодЗаказ
		|		КОНЕЦ)                             КАК ПланируемоеПоступлениеПодЗаказОстаток,
		|
		|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
		|				-Движения.ПланируемоеПоступлениеСНеподтвержденными
		|			ИНАЧЕ
		|				Движения.ПланируемоеПоступлениеСНеподтвержденными
		|		КОНЕЦ)                             КАК ПланируемоеПоступлениеСНеподтвержденнымиОстаток,
		|
		|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
		|				- Движения.ПланируемоеПоступлениеПодЗаказСНеподтвержденными
		|			ИНАЧЕ
		|				Движения.ПланируемоеПоступлениеПодЗаказСНеподтвержденными
		|		КОНЕЦ)                             КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденнымиОстаток
		|
		|ПОМЕСТИТЬ ОстаткиПоРаспоряжению
		|
		|ИЗ
		|	РегистрНакопления.ДвижениеТоваров КАК Движения
		|ГДЕ
		|	Движения.Распоряжение = &Распоряжение
		|	И Движения.Активность
		|СГРУППИРОВАТЬ ПО
		|	Движения.Распоряжение,
		|	Движения.Номенклатура, Движения.Характеристика, Движения.Склад, Движения.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ)   КАК Период,
		|	Таблица.Номенклатура                  КАК Номенклатура,
		|	Таблица.Характеристика                КАК Характеристика,
		|	Таблица.Назначение                    КАК Назначение,
		|	Таблица.Склад                         КАК Склад,
		|	Таблица.Распоряжение                  КАК Распоряжение,
		|
		|	СУММА(Таблица.ПланируемоеПоступление)                           КАК ПланируемоеПоступление,
		|	СУММА(Таблица.ПланируемоеПоступлениеПодЗаказ)                   КАК ПланируемоеПоступлениеПодЗаказ,
		|	СУММА(Таблица.ПланируемоеПоступлениеСНеподтвержденными)         КАК ПланируемоеПоступлениеСНеподтвержденными,
		|	СУММА(Таблица.ПланируемоеПоступлениеПодЗаказСНеподтвержденными) КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
		|
		|ПОМЕСТИТЬ ПланДвижения
		|
		|ИЗ
		|	РегистрНакопления.ДвижениеТоваров КАК Таблица
		|ГДЕ
		|	Таблица.Распоряжение = &Распоряжение
		|	И (Таблица.ПланируемоеПоступление > 0
		|		ИЛИ Таблица.ПланируемоеПоступлениеПодЗаказ > 0
		|		ИЛИ Таблица.ПланируемоеПоступлениеСНеподтвержденными > 0
		|		ИЛИ Таблица.ПланируемоеПоступлениеПодЗаказСНеподтвержденными > 0)
		|	И Таблица.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ),
		|	Таблица.Распоряжение,
		|	Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад, Таблица.Назначение
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	План.Период                                                                         КАК Период,
		|	План.Номенклатура                                                                   КАК Номенклатура,
		|	План.Характеристика                                                                 КАК Характеристика,
		|	План.Склад                                                                          КАК Склад,
		|	План.Назначение                                                                     КАК Назначение,
		|	План.Распоряжение                                                                   КАК Распоряжение,
		|
		|	МАКСИМУМ(План.ПланируемоеПоступление)                                               КАК ПланируемоеПоступление,
		|	МАКСИМУМ(План.ПланируемоеПоступлениеПодЗаказ)                                       КАК ПланируемоеПоступлениеПодЗаказ,
		|	СУММА(ЕСТЬNULL(Остатки.ПланируемоеПоступлениеОстаток, 0))                           КАК ПланируемоеПоступлениеОстаток,
		|	СУММА(ЕСТЬNULL(Остатки.ПланируемоеПоступлениеПодЗаказОстаток, 0))                   КАК ПланируемоеПоступлениеПодЗаказОстаток,
		|
		|	МАКСИМУМ(План.ПланируемоеПоступлениеСНеподтвержденными)                             КАК ПланируемоеПоступлениеСНеподтвержденными,
		|	МАКСИМУМ(План.ПланируемоеПоступлениеПодЗаказСНеподтвержденными)                     КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными,
		|	СУММА(ЕСТЬNULL(Остатки.ПланируемоеПоступлениеСНеподтвержденнымиОстаток, 0))         КАК ПланируемоеПоступлениеСНеподтвержденнымиОстаток,
		|	СУММА(ЕСТЬNULL(Остатки.ПланируемоеПоступлениеПодЗаказСНеподтвержденнымиОстаток, 0)) КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденнымиОстаток,
		|
		|	МАКСИМУМ(ЕСТЬNULL(Остатки.ДатаРаспоряжения, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаРаспоряжения
		|
		|ИЗ
		|	ПланДвижения КАК План
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоРаспоряжению КАК Остатки
		|		ПО План.Номенклатура      = Остатки.Номенклатура
		|			И План.Характеристика = Остатки.Характеристика
		|			И План.Склад          = Остатки.Склад
		|			И План.Распоряжение   = Остатки.Распоряжение
		|			И План.Назначение     = Остатки.Назначение
		|
		|СГРУППИРОВАТЬ ПО
		|	План.Период,
		|	План.Номенклатура, План.Характеристика, План.Склад, План.Назначение,
		|	План.Распоряжение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Распоряжение,
		|	Номенклатура, Характеристика, Склад, Назначение,
		|	Период УБЫВ";

	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьЗаписиВВыборке = Выборка.Следующий();

	ТекСклад          = Неопределено;
	ТекНоменклатура   = Неопределено;
	ТекХарактеристика = Неопределено;
	ТекНазначение     = Неопределено;

	// Цикл по строкам одного распоряжения на поступление\отгрузку.
	Пока ЕстьЗаписиВВыборке Цикл
		
		Если ТекНоменклатура <> Выборка.Номенклатура Или ТекХарактеристика <> Выборка.Характеристика
			Или ТекСклад <> Выборка.Склад Или ТекНазначение <> Выборка.Назначение Тогда

			ТекНоменклатура   = Выборка.Номенклатура;
			ТекХарактеристика = Выборка.Характеристика;
			ТекСклад          = Выборка.Склад;
			ТекНазначение     = Выборка.Назначение;

			ПоступлениеКоличествоОстаток = 0;
			Если Выборка.ПланируемоеПоступлениеОстаток > 0 Тогда
				ПоступлениеКоличествоОстаток = Выборка.ПланируемоеПоступлениеОстаток;
			КонецЕсли;

			ПоступлениеПодЗаказКоличествоОстаток = 0;
			Если Выборка.ПланируемоеПоступлениеПодЗаказОстаток > 0 Тогда
				ПоступлениеПодЗаказКоличествоОстаток = Выборка.ПланируемоеПоступлениеПодЗаказОстаток;
			КонецЕсли;
			
			ПоступлениеКоличествоСНеподтвержденнымиОстаток = 0;
			Если Выборка.ПланируемоеПоступлениеСНеподтвержденнымиОстаток > 0 Тогда
				ПоступлениеКоличествоСНеподтвержденнымиОстаток = Выборка.ПланируемоеПоступлениеСНеподтвержденнымиОстаток;
			КонецЕсли;
			
			ПоступлениеПодЗаказКоличествоСНеподтвержденнымиОстаток = 0;
			Если Выборка.ПланируемоеПоступлениеПодЗаказСНеподтвержденнымиОстаток > 0 Тогда
				ПоступлениеПодЗаказКоличествоСНеподтвержденнымиОстаток = Выборка.ПланируемоеПоступлениеПодЗаказСНеподтвержденнымиОстаток;
			КонецЕсли;

		КонецЕсли;

		КоличествоПоступление = 0;
		КоличествоПоступлениеПодЗаказ = 0;
		
		КоличествоПоступлениеСНеподтвержденными = 0;
		КоличествоПоступлениеПодЗаказСНеподтвержденными = 0;

		Если Выборка.ПланируемоеПоступление > 0
			Или Выборка.ПланируемоеПоступлениеПодЗаказ > 0
			Или Выборка.ПланируемоеПоступлениеСНеподтвержденными > 0
			Или Выборка.ПланируемоеПоступлениеПодЗаказСНеподтвержденными > 0 Тогда

			КоличествоПоступление         = Мин(Выборка.ПланируемоеПоступление,         ПоступлениеКоличествоОстаток);
			КоличествоПоступлениеПодЗаказ = Мин(Выборка.ПланируемоеПоступлениеПодЗаказ, ПоступлениеПодЗаказКоличествоОстаток);
			
			КоличествоПоступлениеСНеподтвержденными         = Мин(Выборка.ПланируемоеПоступлениеСНеподтвержденными,         ПоступлениеКоличествоСНеподтвержденнымиОстаток);
			КоличествоПоступлениеПодЗаказСНеподтвержденными = Мин(Выборка.ПланируемоеПоступлениеПодЗаказСНеподтвержденными, ПоступлениеПодЗаказКоличествоСНеподтвержденнымиОстаток);
			
			Если КоличествоПоступление > 0
				Или КоличествоПоступлениеПодЗаказ > 0
				Или КоличествоПоступлениеСНеподтвержденными > 0
				Или КоличествоПоступлениеПодЗаказСНеподтвержденными > 0 Тогда
				
				ДобавитьПриходВГрафик(НаборЗаписей,
				                      Выборка,
				                      КоличествоПоступление,
				                      КоличествоПоступлениеПодЗаказ,
				                      КоличествоПоступлениеСНеподтвержденными,
				                      КоличествоПоступлениеПодЗаказСНеподтвержденными);
			КонецЕсли;
			
			ПоступлениеКоличествоОстаток         = ПоступлениеКоличествоОстаток         - КоличествоПоступление;
			ПоступлениеПодЗаказКоличествоОстаток = ПоступлениеПодЗаказКоличествоОстаток - КоличествоПоступлениеПодЗаказ;
			
			ПоступлениеКоличествоСНеподтвержденнымиОстаток         = ПоступлениеКоличествоСНеподтвержденнымиОстаток         - КоличествоПоступлениеСНеподтвержденными;
			ПоступлениеПодЗаказКоличествоСНеподтвержденнымиОстаток = ПоступлениеПодЗаказКоличествоСНеподтвержденнымиОстаток - КоличествоПоступлениеПодЗаказСНеподтвержденными;
			
		КонецЕсли;

		// Переход к следующей записи в выборке.
		ЕстьЗаписиВВыборке = Выборка.Следующий();

	КонецЦикла;

	Возврат НаборЗаписей;
	
КонецФункции

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвижениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("07a69892-ea73-4b86-bd12-254a7be505d8");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвижениеТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаказПоставщику,"
		+ "Документ.АктОРасхожденияхПослеПеремещения,"
		+ "Документ.АктОРасхожденияхПослеПриемки,"
		+ "Документ.ВозвратТоваровОтКлиента,"
		+ "Документ.ЗаказНаПеремещение,"
		+ "Документ.ЗаказНаСборку,"
		+ "Документ.ЗаявкаНаВозвратТоваровОтКлиента,"
		+ "Документ.ПриобретениеТоваровУслуг,"
		+ "Документ.ПриходныйОрдерНаТовары,"
		+ "Документ.ПеремещениеТоваров,"
		+ "Документ.РегистраторГрафикаДвиженияТоваров,"
		+ "Документ.СборкаТоваров,"
	//++ НЕ УТ
		+ "Документ.ВыпускПродукции,"
		+ "Документ.ЗаказМатериаловВПроизводство,"
		+ "Документ.ЗаказПереработчику,"
		+ "Документ.ПоступлениеОтПереработчика,"
	//-- НЕ УТ
		+ "Справочник.СоглашенияСПоставщиками,"
		+ "РегистрНакопления.ДвижениеТоваров"
	;
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвижениеТоваров";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Обновляет движения документов по регистру накопления ""Движение товаров"".
    |До завершения обработчика работа с документами ""Выпуск продукции"", ""Поступление от переработчика"", ""Заказ поставщику"", ""Заказ переработчику"", ""Возврат товаров от клиента"", ""Приходный ордер на товары"" и ""Поступление сырья от давальца"" не рекомендуется, т.к. информация в регистре некорректна.'
    |;uk='Оновлює рухи документів з регістру накопичення ""Рух товарів"".
    |До завершення обробника робота з документами ""Випуск продукції"", ""Надходження від переробника"", ""Замовлення постачальнику"", ""Замовлення переробнику"", ""Повернення товарів від клієнта"", ""Прибутковий ордер на товари"" та ""Надходження сировини від давальця"" не рекомендується, оскільки інформація у регістрі некоректна.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СоглашенияСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СоглашенияСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию2";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ГрафикПоступленияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктОРасхожденияхПослеПеремещения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПеремещениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйОрдерНаТовары.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыпускПродукции.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеОтПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ

	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.СоздатьРегистраторыГрафикаДвиженияТоваровПоДоговорам";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвижениеТоваров";
	
	РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.ЗарегистрироватьКОбработкеПриОбновленииИБ(ПолноеИмяРегистра, Параметры);
	
	// Приходный ордер на товары:
	// Для взвода флага ЗакрыватьГрафикПоступления и последующего формирования движений по РН ДвижениеТоваров
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеТоваров КАК ДвижениеТоваров
	|	ПО ПриходныйОрдерНаТовары.Номенклатура = ДвижениеТоваров.Номенклатура
	|		И ПриходныйОрдерНаТовары.Характеристика = ДвижениеТоваров.Характеристика
	|		И ПриходныйОрдерНаТовары.Назначение = ДвижениеТоваров.Назначение
	|		И ПриходныйОрдерНаТовары.Ссылка.Склад = ДвижениеТоваров.Склад
	|		И ПриходныйОрдерНаТовары.Ссылка.Распоряжение = ДвижениеТоваров.Распоряжение
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка.ЗакрыватьГрафикПоступления
	|		<> ВЫБОР
	|			КОГДА ПриходныйОрдерНаТовары.Ссылка.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|					ИЛИ ПриходныйОрдерНаТовары.Ссылка.Распоряжение ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ТОГДА ИСТИНА
	|			КОГДА ДвижениеТоваров.Распоряжение ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ПриходныйОрдерНаТовары.Ссылка.Распоряжение <> НЕОПРЕДЕЛЕНО
	// Некоторые распоряжения могут не иметь движений в РН Движение товаров, необходимо это учесть
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Возврат товаров от клиента
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ДокументРаспоряжение
	|	ПО ПриходныйОрдерНаТовары.Распоряжение = ДокументРаспоряжение.Ссылка
	|ГДЕ
	|	НЕ ПриходныйОрдерНаТовары.ЗакрыватьГрафикПоступления
	|	И ДокументРаспоряжение.ЗаявкаНаВозвратТоваровОтКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
	|	И ДокументРаспоряжение.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ДокументРаспоряжение.Дата >= ДокументРаспоряжение.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|	И ДокументРаспоряжение.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
	//++ НЕ УТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Поступление от переработчика
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеОтПереработчика.Товары КАК ДокументРаспоряжение
	|	ПО ПриходныйОрдерНаТовары.Распоряжение = ДокументРаспоряжение.Ссылка
	|ГДЕ
	|	НЕ ПриходныйОрдерНаТовары.ЗакрыватьГрафикПоступления
	|	И ДокументРаспоряжение.Ссылка.ПоступлениеПоЗаказам
	|	И ДокументРаспоряжение.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ДокументРаспоряжение.Ссылка.Дата >= ДокументРаспоряжение.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|	И ДокументРаспоряжение.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
	//-- НЕ УТ
	|";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), ПолноеИмяРегистра);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвижениеТоваров.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвижениеТоваров КАК ДвижениеТоваров
	|ГДЕ
	|	ДвижениеТоваров.Активность
	|	И (ДвижениеТоваров.ПланируемоеПоступлениеСНеподтвержденными = 0
	|			И ДвижениеТоваров.ПланируемоеПоступлениеПодЗаказСНеподтвержденными = 0)
	|	И НЕ ДвижениеТоваров.Регистратор ССЫЛКА Документ.ЗаказПоставщику
	|	И НЕ ДвижениеТоваров.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Движения приходного ордера, которые должны быть, но их нет
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеТоваров КАК ТаблицаРегистра
	|	ПО ТаблицаРегистра.Регистратор = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаРегистра.Регистратор ЕСТЬ NULL
	|	И НЕ ТаблицаДокумента.ЭтоУпаковочныйЛист
	|	И ТаблицаДокумента.Ссылка.Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И ТаблицаДокумента.Количество <> 0
	|	И (
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Распоряжение ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|				И ВЫРАЗИТЬ(ТаблицаДокумента.Ссылка.Распоряжение КАК Документ.ПриобретениеТоваровУслуг).ПоступлениеПоЗаказам
	|				И ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаДокумента.Ссылка.Распоряжение КАК Документ.ПриобретениеТоваровУслуг).Соглашение.ВариантПриемкиТоваров, &ВариантПриемкиТоваров) = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
	|			ТОГДА ИСТИНА
	|		КОГДА ТаблицаДокумента.Ссылка.Распоряжение ССЫЛКА Документ.ПеремещениеТоваров
	|				И ВЫРАЗИТЬ(ТаблицаДокумента.Ссылка.Распоряжение КАК Документ.ПеремещениеТоваров).ПеремещениеПоЗаказам
	|				И &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
	|			ТОГДА ИСТИНА
	|		КОГДА ТаблицаДокумента.Ссылка.Распоряжение ССЫЛКА Документ.СборкаТоваров
	|				И ВЫРАЗИТЬ(ТаблицаДокумента.Ссылка.Распоряжение КАК Документ.СборкаТоваров).ЗаказНаСборку <> ЗНАЧЕНИЕ(Документ.ЗаказНаСборку.ПустаяСсылка)
	|				И &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
	|			ТОГДА ИСТИНА
	//++ НЕ УТ
	|		КОГДА ТаблицаДокумента.Ссылка.Распоряжение ССЫЛКА Документ.ВыпускПродукции
	|				И &ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
	|			ТОГДА ИСТИНА
	//-- НЕ УТ
	|		ИНАЧЕ 
	|			ЛОЖЬ
	|	КОНЕЦ 
	|	ИЛИ ВЫБОР
	|			КОГДА ТаблицаДокумента.Ссылка.Распоряжение ССЫЛКА Документ.ЗаказПоставщику
	|					ИЛИ ТаблицаДокумента.Ссылка.Распоряжение ССЫЛКА Документ.ЗаказНаПеремещение
	|					ИЛИ ТаблицаДокумента.Ссылка.Распоряжение ССЫЛКА Документ.ЗаказНаСборку
	|					ИЛИ ТаблицаДокумента.Ссылка.Распоряжение ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|					ИЛИ ТаблицаДокумента.Ссылка.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	//++ НЕ УТ
	|					ИЛИ ТаблицаДокумента.Ссылка.Распоряжение ССЫЛКА Документ.ЗаказПереработчику
	//-- НЕ УТ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) <> ТаблицаДокумента.Ссылка.ЗакрыватьГрафикПоступления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Аналог механизма адаптированного текста запроса - поиск заказов поставщиков, движения которых необходимо актуализировать
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка         КАК Ссылка,
	|		ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Склад          КАК Склад,
	|		ТаблицаТовары.Назначение     КАК Назначение,
	|
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|					И НЕ ТаблицаТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
	|				ТОГДА ТаблицаТовары.Количество
	|		КОНЕЦ КАК ПланируемоеПоступление,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|					И НЕ ТаблицаТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
	|				ТОГДА ТаблицаТовары.Количество
	|		КОНЕЦ КАК ПланируемоеПоступлениеПодЗаказ,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ТОГДА ТаблицаТовары.Количество
	|		КОНЕЦ КАК ПланируемоеПоступлениеСНеподтвержденными,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ТОГДА ТаблицаТовары.Количество
	|		КОНЕЦ КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка.Проведен
	|		И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|		И НЕ ТаблицаТовары.Отменено
	|		И ТаблицаТовары.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РегистрДвижениеТоваров.Регистратор,
	|		РегистрДвижениеТоваров.Номенклатура,
	|		РегистрДвижениеТоваров.Характеристика,
	|		РегистрДвижениеТоваров.Склад,
	|		РегистрДвижениеТоваров.Назначение,
	|
	|		-РегистрДвижениеТоваров.ПланируемоеПоступление,
	|		-РегистрДвижениеТоваров.ПланируемоеПоступлениеПодЗаказ,
	|		-РегистрДвижениеТоваров.ПланируемоеПоступлениеСНеподтвержденными,
	|		-РегистрДвижениеТоваров.ПланируемоеПоступлениеПодЗаказСНеподтвержденными
	|	ИЗ
	|		РегистрНакопления.ДвижениеТоваров КАК РегистрДвижениеТоваров
	|	ГДЕ
	|		РегистрДвижениеТоваров.Активность
	|		И РегистрДвижениеТоваров.Регистратор ССЫЛКА Документ.ЗаказПоставщику) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Склад,
	|	Таблица.Назначение
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Таблица.ПланируемоеПоступление) <> 0
	|		ИЛИ СУММА(Таблица.ПланируемоеПоступлениеПодЗаказ) <> 0
	|		ИЛИ СУММА(Таблица.ПланируемоеПоступлениеСНеподтвержденными) <> 0
	|		ИЛИ СУММА(Таблица.ПланируемоеПоступлениеПодЗаказСНеподтвержденными) <> 0)
	|";
	
	Запрос.УстановитьПараметр("ВариантПриемкиТоваров", Константы.ВариантПриемкиТоваров.Получить());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвижениеТоваров";
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.АктОРасхожденияхПослеПеремещения");
	Регистраторы.Добавить("Документ.АктОРасхожденияхПослеПриемки");
	Регистраторы.Добавить("Документ.ВозвратТоваровОтКлиента");
	Регистраторы.Добавить("Документ.ЗаказНаПеремещение");
	Регистраторы.Добавить("Документ.ЗаказНаСборку");
	Регистраторы.Добавить("Документ.ЗаказПоставщику");
	Регистраторы.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента");
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");
	Регистраторы.Добавить("Документ.ПриобретениеТоваровУслуг");
	Регистраторы.Добавить("Документ.ПриходныйОрдерНаТовары");
	Регистраторы.Добавить("Документ.СборкаТоваров");
	//++ НЕ УТ
	Регистраторы.Добавить("Документ.ВыпускПродукции");
	Регистраторы.Добавить("Документ.ЗаказМатериаловВПроизводство");
	Регистраторы.Добавить("Документ.ЗаказПереработчику");
	Регистраторы.Добавить("Документ.ПоступлениеОтПереработчика");
	//-- НЕ УТ
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы, 
		ПолноеИмяРегистра, 
		Параметры.Очередь
	);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры


#КонецОбласти

#Область Прочее

Процедура ДобавитьПриходВГрафик(НаборЗаписей, Выборка, Количество, КоличествоПодЗаказ, КоличествоСНеподтвержденными, КоличествоПодЗаказСНеподтвержденными)
	
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, Выборка);
	Запись.ДатаСобытия = Запись.Период;
	Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Запись.КоличествоИзЗаказов = Количество;
	Запись.КоличествоПодЗаказ  = КоличествоПодЗаказ;
	Запись.КоличествоИзЗаказовСНеподтвержденными = КоличествоСНеподтвержденными;
	Запись.КоличествоПодЗаказСНеподтвержденными  = КоличествоПодЗаказСНеподтвержденными;
	
КонецПроцедуры

Процедура ЗаписатьОбеспечениеЗаказов(НаборЗаписей, Период, ОбеспечениеЗаказовДополнительныеСвойства)
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли