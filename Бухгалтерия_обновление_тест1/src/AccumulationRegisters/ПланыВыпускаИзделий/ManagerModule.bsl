#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ПодразделениеДиспетчер)
	|	И ЗначениеРазрешено(Сценарий)
	|	И ЗначениеРазрешено(ВидПлана)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПланыВыпускаИзделий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("22a55d4c-12b1-4a05-a3b7-e58aecfca81f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПланыВыпускаИзделий.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет регистр.';uk='Заповнює регістр.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ЭтапыПроизводства.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПланыВыпускаИзделий.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПланыПроизводства.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ПланыВыпускаИзделий.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";     
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ЭтапыПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланыПроизводства.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыВыпускаИзделий КАК ПланыВыпускаИзделий
	|		ПО ПланыПроизводства.Период = ПланыВыпускаИзделий.ДатаПроизводства
	|			И ПланыПроизводства.ПланПроизводства = ПланыВыпускаИзделий.ПланПроизводства
	|			И ПланыПроизводства.Спецификация = ПланыВыпускаИзделий.СпецификацияПродукции
	|			И ПланыПроизводства.Назначение = ПланыВыпускаИзделий.НазначениеПродукции
	|ГДЕ
	|	ПланыПроизводства.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|	И ПланыВыпускаИзделий.ПланПроизводства ЕСТЬ NULL
	|
	|");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ПланыВыпускаИзделий";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"),
		ДополнительныеПараметры
	);
	
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПланыВыпускаИзделий";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	ВТРегистраторы = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
		Параметры.Очередь,
		"Документ.ПланПроизводства",
		ПолноеИмяРегистра,
		МенеджерВременныхТаблиц);
		
	Если Не ВТРегистраторы.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не ВТРегистраторы.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	БлокировкиПланыПроизводства = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
		Параметры.Очередь,
		"РегистрНакопления.ПланыПроизводства",
		МенеджерВременныхТаблиц);
		
	БлокировкиЭтапыПроизводства = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
		Параметры.Очередь,
		"Справочник.ЭтапыПроизводства",
		МенеджерВременныхТаблиц);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТРегистраторы.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТБлокировкиПоЭтапам
		|ИЗ
		|	&ВТРегистраторы КАК ВТРегистраторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
		|		ПО ВТРегистраторы.Регистратор = ПланыПроизводства.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ПО (ПланыПроизводства.Спецификация = ЭтапыПроизводства.Владелец)
		|			И (ЭтапыПроизводства.НомерСледующегоЭтапа = 0)
		|			И (НЕ ЭтапыПроизводства.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ &ВТБлокировкиЭтапыПроизводства КАК ВТБлокировкиСсылки
		|		ПО (ЭтапыПроизводства.Ссылка = ВТБлокировкиСсылки.Ссылка)
		|ГДЕ
		|	ВТБлокировкиСсылки.Ссылка ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРегистраторы.Регистратор КАК Регистратор
		|ИЗ
		|	&ВТРегистраторы КАК ВТРегистраторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ &ВТБлокировкиПланыПроизводства КАК ВТБлокировкиРегистраторы
		|		ПО ВТРегистраторы.Регистратор = ВТБлокировкиРегистраторы.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБлокировкиПоЭтапам КАК ВТБлокировкиПоЭтапам
		|		ПО ВТРегистраторы.Регистратор = ВТБлокировкиПоЭтапам.Регистратор
		|ГДЕ
		|	ВТБлокировкиРегистраторы.Регистратор ЕСТЬ NULL
		|	И ВТБлокировкиПоЭтапам.Регистратор ЕСТЬ NULL";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ВТРегистраторы",
		ВТРегистраторы.ИмяВременнойТаблицы);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ВТБлокировкиПланыПроизводства",
		БлокировкиПланыПроизводства.ИмяВременнойТаблицы);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ВТБлокировкиЭтапыПроизводства",
		БлокировкиЭтапыПроизводства.ИмяВременнойТаблицы);
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланыПроизводства.Сценарий КАК Сценарий,
	|	ПланыПроизводства.Статус КАК Статус,
	|	ПланыПроизводства.Номенклатура КАК Номенклатура,
	|	ПланыПроизводства.Характеристика КАК Характеристика,
	|	ПланыПроизводства.Назначение КАК Назначение,
	|	ПланыПроизводства.Подразделение КАК ПодразделениеДиспетчер,
	|	ЭтапыПроизводства.Подразделение КАК ПодразделениеИсполнитель,
	|	ПланыПроизводства.ПланПроизводства КАК ПланПроизводства,
	|	ПланыПроизводства.Спецификация КАК Спецификация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыпусковПлановПроизводства.Основной) КАК ТипВыпуска,
	|	ПланыПроизводства.Период КАК ДатаПроизводства,
	|	ПланыПроизводства.Спецификация КАК СпецификацияПродукции,
	|	ПланыПроизводства.Назначение КАК НазначениеПродукции,
	|	ПланыПроизводства.Номенклатура КАК НоменклатураПродукции,
	|	ПланыПроизводства.Характеристика КАК ХарактеристикаПродукции,
	|	ПланыПроизводства.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ПланыПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
	|			ТОГДА ПланыПроизводства.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КЗаказу,             
	|	ПланПроизводстваДокумент.ВидПлана КАК ВидПлана,
	|	ПланыПроизводства.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыВыпускаИзделий КАК ПланыВыпускаИзделий
	|		ПО ПланыПроизводства.Период = ПланыВыпускаИзделий.ДатаПроизводства
	|			И ПланыПроизводства.ПланПроизводства = ПланыВыпускаИзделий.ПланПроизводства
	|			И ПланыПроизводства.Спецификация = ПланыВыпускаИзделий.СпецификацияПродукции
	|			И ПланыПроизводства.Назначение = ПланыВыпускаИзделий.НазначениеПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ПО ПланыПроизводства.Спецификация = ЭтапыПроизводства.Владелец
	|			И (ЭтапыПроизводства.НомерСледующегоЭтапа = 0)
	|			И (НЕ ЭтапыПроизводства.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПроизводства КАК ПланПроизводстваДокумент
	|		ПО ПланыПроизводства.ПланПроизводства = ПланПроизводстваДокумент.Ссылка
	|ГДЕ
	|	ПланыПроизводства.Регистратор = &Регистратор
	|	И ПланыПроизводства.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|	И ПланыВыпускаИзделий.ПланПроизводства ЕСТЬ NULL
	|	И ПланыПроизводства.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|";
	
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПланыПроизводства.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
			
			Движения = Запрос.Выполнить().Выгрузить();
			НаборИзменен = Ложь;
			
			Если Движения.Количество() <> 0 Тогда
				
				НаборЗаписей = РегистрыНакопления.ПланыВыпускаИзделий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Загрузить(Движения);
				
				НаборИзменен = Истина;
				
					
			КонецЕсли;
			
			Если НаборИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Регистратор, ДополнительныеПараметры);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли	
