#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//++ НЕ УТ
#Область ПрограммныйИнтерфейс

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВыручки", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВыручкиСНДСРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалютеДокумента", "ВалютаДокумента"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВыручкиБезНДС", "ВалютаУпр"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВыручкиРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСВВалютеДокумента", "ВалютаДокумента"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДС", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалютеДокумента", "ВалютаДокумента"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Себестоимость, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьУпрБезНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СебестоимостьБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьУпрСНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СебестоимостьУпрСНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СебестоимостьРегл, Новый Структура(СвойстваПоказателей, МассивРесурсов));

	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВходящийРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДСВходящийРегл, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ДопРасходыУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ДопРасходыРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходов, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ДопРасходыБезНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходовБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСДополнительныхРасходов", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДСДопРасходов, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)
	|	И ЗначениеРазрешено(Т.Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("45f4547f-9eb3-4292-93e0-7933e72e61b1");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Очищает измерение «Вид запасов» в движениях с типами запасов ""Работа"" и ""Услуга"", заполняет измерение ""Раздел учета"" в регистре накопления ""Выручка и себестоимость продаж"".
                                   |Заполняет реквизит ИсточникГФУРасчетов с типом Справочник.ОбъектыРасчетов.
                                   |Данные в регистре накопления ""Выручка и себестоимость продаж"" не рекомендуется использовать до момента завершения обработки. Данные будут некорректны.'
                                   |;uk='Очищає вимір «Вид запасів» у рухах з типами запасів ""Робота"" та ""Послуга"", заповнює вимір ""Розділ обліку"" у регістрі накопичення ""Виручка та собівартість продажів"".
                                   |Заповнює реквізит ИсточникГФУРасчетов з типом Справочник.ОбъектыРасчетов.
                                   |Дані в регістрі накопичення ""Виручка та собівартість продажів"" не рекомендується використовувати до моменту завершення обробки. Дані будуть некоректні.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыЗапасов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьКлючиАналитикиНоменклатуры(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);	                                 
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьОбъектыРасчетов(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ВыручкаИСебестоимостьПродаж";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ИсточникГФУРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьИсточникГФУРасчетов В (&ПустыеЗначенияОбъектовРасчета)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчета", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра
	);

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОбновлению.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ДанныеРегистра
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|		ПО Ключи.Ссылка = ДанныеРегистра.АналитикаУчетаНоменклатуры
	|
	|	ГДЕ
	|		Ключи.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|		И ДанныеРегистра.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ДанныеРегистра
	|
	|	ГДЕ
	|		ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ДанныеРегистра
	|
	|	ГДЕ
	|		ДанныеРегистра.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВозвратМеждуОрганизациями.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями КАК ВозвратМеждуОрганизациями
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Выручка
	|		ПО ВозвратМеждуОрганизациями.Ссылка = Выручка.Регистратор
	|	ГДЕ
	|		ВозвратМеждуОрганизациями.Договор <> Выручка.Договор
	|		И НЕ ВозвратМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВозвратМеждуОрганизациями.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями КАК ВозвратМеждуОрганизациями
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Выручка
	|		ПО ВозвратМеждуОрганизациями.Ссылка = Выручка.Регистратор
	|	ГДЕ
	|		ВозвратМеждуОрганизациями.ДоговорПродажи <> Выручка.Договор
	|		И ВозвратМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПередачаМеждуОрганизациями.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаМеждуОрганизациями
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Выручка
	|		ПО ПередачаМеждуОрганизациями.Ссылка = Выручка.Регистратор
	|	ГДЕ
	|		ПередачаМеждуОрганизациями.Договор <> Выручка.Договор
	|		И НЕ ПередачаМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПередачаМеждуОрганизациями.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаМеждуОрганизациями
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Выручка
	|		ПО ПередачаМеждуОрганизациями.Ссылка = Выручка.Регистратор
	|	ГДЕ
	|		ПередачаМеждуОрганизациями.ДоговорПродажи <> Выручка.Договор
	|		И ПередачаМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОтчетМеждуОрганизациями.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетМеждуОрганизациями
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Выручка
	|		ПО ОтчетМеждуОрганизациями.Ссылка = Выручка.Регистратор
	|	ГДЕ
	|		ОтчетМеждуОрганизациями.Договор <> Выручка.Договор
	|		И НЕ ОтчетМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОтчетМеждуОрганизациями.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетМеждуОрганизациями
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Выручка
	|		ПО ОтчетМеждуОрганизациями.Ссылка = Выручка.Регистратор
	|	ГДЕ
	|		ОтчетМеждуОрганизациями.ДоговорПродажи <> Выручка.Договор
	|		И ОтчетМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|
	|	) КАК КОбновлению
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), 
		ДополнительныеПараметры
	);
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Назначение <> ДанныеРегистра.ВидЗапасов.УстарелоНазначение
	|	И ДанныеРегистра.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ДанныеРегистра.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	И &ИспользуютсяВидыЗапасов
	|");
	
	Запрос.УстановитьПараметр("ИспользуютсяВидыЗапасов", Константы.УчитыватьСебестоимостьТоваровПоНазначениям.Получить());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Заполняет новый реквизит "Назначение" в справочнике "Ключи аналитики учета номенклатуры",
// и обновляет движения по регистру.
// Очищает измерение «Вид запасов» в движениях с типами запасов "Работа" и "Услуга"
// Заполняет измерение "Раздел учета"
// Заполняется измерение договор для документов интеркампани.
// Заполняет реквизит ИсточникГФУРасчетов с типом Справочник.ОбъектыРасчетов
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	РезультатыСозданияВТВозвраты = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
		Параметры.Очередь,
		"Документ.ВозвратТоваровМеждуОрганизациями",
		МенеджерВременныхТаблиц
	);
		
	РезультатыСозданияВТПередачи = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
		Параметры.Очередь,
		"Документ.ПередачаТоваровМеждуОрганизациями",
		МенеджерВременныхТаблиц
	);
		
	РезультатыСозданияВТОтчеты = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
		Параметры.Очередь,
		"Документ.ОтчетПоКомиссииМеждуОрганизациями",
		МенеджерВременныхТаблиц
	);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Регистратор                КАК Регистратор,
	|	Движения.Период                     КАК Период,
	|	ВЫБОР КОГДА НЕ РегистрАналитика.КлючАналитики ЕСТЬ NULL
	|			И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|			И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ТОГДА РегистрАналитика.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                               КАК АналитикаУчетаНоменклатуры,
	|	Движения.ЗаказКлиента               КАК ЗаказКлиента,
	|	Движения.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
	|	Движения.Подразделение              КАК Подразделение,
	|	Движения.ТипЗапасов                 КАК ТипЗапасов,
	|	ВЫБОР КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ВидЗапасов
	|	КОНЕЦ                               КАК ВидЗапасов,
	|	(ВЫБОР
	|		КОГДА Движения.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
	|			ТОГДА Движения.РазделУчета
	|		КОГДА Движения.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА Движения.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)
	|			И Движения.АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		КОГДА Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВПути)
	|		КОГДА Движения.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Партнер)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию)
	|		КОГДА Движения.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Организация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию)
	|		КОГДА Движения.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		 И КлючиАналитики.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		КОГДА Движения.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		 И КлючиАналитики.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КОНЕЦ) КАК РазделУчета,
	|	Движения.Партия                     КАК Партия,
	|	Движения.АналитикаУчетаПартий       КАК АналитикаУчетаПартий,
	|	Движения.АналитикаФинансовогоУчета  КАК АналитикаФинансовогоУчета,
	|	Движения.НалоговоеНазначение         КАК НалоговоеНазначение,
	|	Движения.Менеджер                   КАК Менеджер,
	|	Движения.Склад                      КАК Склад,
	|	Движения.Соглашение                 КАК Соглашение,
	|	ВЫБОР 
	|		КОГДА Движения.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|			ТОГДА ВЫБОР КОГДА ВозвратМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|				ТОГДА ВозвратМеждуОрганизациями.ДоговорПродажи
	|				ИНАЧЕ ВозвратМеждуОрганизациями.Договор
	|		КОНЕЦ
	|		КОГДА Движения.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
	|			ТОГДА ВЫБОР КОГДА ПередачаМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|				ТОГДА ПередачаМеждуОрганизациями.ДоговорПродажи
	|				ИНАЧЕ ПередачаМеждуОрганизациями.Договор
	|		КОНЕЦ
	|		КОГДА Движения.Регистратор ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациями
	|			ТОГДА ВЫБОР КОГДА ОтчетМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|				ТОГДА ОтчетМеждуОрганизациями.ДоговорПродажи
	|				ИНАЧЕ ОтчетМеждуОрганизациями.Договор
	|		КОНЕЦ
	|		ИНАЧЕ Движения.Договор
	|	КОНЕЦ                               КАК Договор,
	|	Движения.ХозяйственнаяОперация      КАК ХозяйственнаяОперация,
	|	Движения.АналитикаУчетаНаборов      КАК АналитикаУчетаНаборов,
	|	Движения.НаправлениеДеятельностиКонтрагента КАК НаправлениеДеятельностиКонтрагента,
	|	Движения.НаправлениеДеятельностиНоменклатуры КАК НаправлениеДеятельностиНоменклатуры,
	// Ресурсы
	|	Движения.Количество                        КАК Количество,
	|	Движения.СуммаВыручки                      КАК СуммаВыручки,
	|	Движения.СуммаВыручкиБезНДС                КАК СуммаВыручкиБезНДС,
	|	Движения.Стоимость                     	   КАК Стоимость,
	|	Движения.СтоимостьБезНДС               	   КАК СтоимостьБезНДС,
	|	Движения.ДопРасходы       				   КАК ДопРасходы,
	|	Движения.ДопРасходыБезНДС 				   КАК ДопРасходыБезНДС,
	|	Движения.СтоимостьУпр       			   КАК СтоимостьУпр,
	|	Движения.СтоимостьРегл                 	   КАК СтоимостьРегл,
	|	Движения.СтоимостьЗабалансовая             КАК СтоимостьЗабалансовая,
	|	Движения.СтоимостьЗабалансоваяРегл         КАК СтоимостьЗабалансоваяРегл,
	|	Движения.СуммаВыручкиРегл                  КАК СуммаВыручкиРегл,
	|	Движения.ДопРасходыУпр                     КАК ДопРасходыУпр,
	|	Движения.ДопРасходыРегл                    КАК ДопРасходыРегл,
	|	Движения.ПостатейныеПостоянныеСНДС         КАК ПостатейныеПостоянныеСНДС,
	|	Движения.ПостатейныеПостоянныеБезНДС       КАК ПостатейныеПостоянныеБезНДС,
	|	Движения.ПостатейныеПостоянныеУпр          КАК ПостатейныеПостоянныеУпр,
	|	Движения.ПостатейныеПостоянныеРегл         КАК ПостатейныеПостоянныеРегл,
	|	Движения.Трудозатраты                      КАК Трудозатраты,
	|	Движения.ТрудозатратыУпр                   КАК ТрудозатратыУпр,
	|	Движения.ТрудозатратыРегл                  КАК ТрудозатратыРегл,
	|	Движения.ПостатейныеПеременныеСНДС         КАК ПостатейныеПеременныеСНДС,
	|	Движения.ПостатейныеПеременныеБезНДС       КАК ПостатейныеПеременныеБезНДС,
	|	Движения.ПостатейныеПеременныеУпр          КАК ПостатейныеПеременныеУпр,
	|	Движения.ПостатейныеПеременныеРегл         КАК ПостатейныеПеременныеРегл,
	|	Движения.ПостояннаяРазница                 КАК ПостояннаяРазница,
	|	Движения.ВременнаяРазница                  КАК ВременнаяРазница,
	|	Движения.СуммаВыручкиСНДСРегл              КАК СуммаВыручкиСНДСРегл,
	|	Движения.СуммаРучнойСкидки                 КАК СуммаРучнойСкидки,
	|	Движения.СуммаАвтоматическойСкидки         КАК СуммаАвтоматическойСкидки,
	|	Движения.СтоимостьРеглБезНДС         	   КАК СтоимостьРеглБезНДС,
	|	Движения.НДСРегл         				   КАК НДСРегл,
	|	Движения.ДопРасходыРеглБезНДС         	   КАК ДопРасходыРеглБезНДС,
	|	Движения.ПостатейныеПостоянныеРеглБезНДС   КАК ПостатейныеПостоянныеРеглБезНДС,
	|	Движения.ПостатейныеПеременныеРеглБезНДС   КАК ПостатейныеПеременныеРеглБезНДС,
	|	Движения.СтоимостьУпрБезНДС         	   КАК СтоимостьУпрБезНДС,
	|	Движения.ДопРасходыУпрБезНДС         	   КАК ДопРасходыУпрБезНДС,
	|	Движения.ПостатейныеПостоянныеУпрБезНДС    КАК ПостатейныеПостоянныеУпрБезНДС,
	|	Движения.ПостатейныеПеременныеУпрБезНДС    КАК ПостатейныеПеременныеУпрБезНДС,
	|
	// Реквизиты
	|	Движения.НалоговоеНазначениеСписания       КАК НалоговоеНазначениеСписания,
	|	Движения.ВалютаВзаиморасчетов              КАК ВалютаВзаиморасчетов,
	|	Движения.СуммаВВалютеВзаиморасчетов        КАК СуммаВВалютеВзаиморасчетов,
	|	Движения.СуммаБезНДСВВалютеВзаиморасчетов  КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	Движения.ВалютаДокумента                   КАК ВалютаДокумента,
	|	Движения.СуммаВВалютеДокумента             КАК СуммаВВалютеДокумента,
	|	Движения.СуммаБезНДСВВалютеДокумента       КАК СуммаБезНДСВВалютеДокумента,
	|	Движения.ИсточникГФУНоменклатуры           КАК ИсточникГФУНоменклатуры,
	|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) КАК ИсточникГФУРасчетов,
	|	Движения.УдалитьИсточникГФУРасчетов        КАК УдалитьИсточникГФУРасчетов,
	|	Движения.ДокументДвижения                  КАК ДокументДвижения,
	|	Движения.РасчетСебестоимости               КАК РасчетСебестоимости,
	|	Движения.РасчетПартий                      КАК РасчетПартий,
	|	Движения.РасчетНеЗавершен                  КАК РасчетНеЗавершен,
	|	ВЫБОР КОГДА РегистрАналитика.КлючАналитики ЕСТЬ NULL
	|			И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|			И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
	|
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Движения
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
	|		ПО КлючиАналитики.Ссылка = Движения.АналитикаУчетаНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями КАК ВозвратМеждуОрганизациями
	|		ПО Движения.Регистратор = ВозвратМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаМеждуОрганизациями
	|		ПО Движения.Регистратор = ПередачаМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетМеждуОрганизациями
	|		ПО Движения.Регистратор = ОтчетМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТЗаблокированныхРегистраторовВозврата КАК ЗаблокированныеРегистраторыВозврата
	|		ПО (ЗаблокированныеРегистраторыВозврата.Ссылка = Движения.Регистратор)
	|	ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТЗаблокированныхРегистраторовПередачи КАК ЗаблокированныеРегистраторыПередачи
	|		ПО (ЗаблокированныеРегистраторыПередачи.Ссылка = Движения.Регистратор)
	|	ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТЗаблокированныхРегистраторовОтчетов КАК ЗаблокированныеРегистраторыОтчетов
	|		ПО (ЗаблокированныеРегистраторыОтчетов.Ссылка = Движения.Регистратор)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрАналитика
	|		ПО КлючиАналитики.Номенклатура = РегистрАналитика.Номенклатура
	|			И КлючиАналитики.Характеристика = РегистрАналитика.Характеристика
	|			И КлючиАналитики.Серия = РегистрАналитика.Серия
	|			И КлючиАналитики.МестоХранения = РегистрАналитика.МестоХранения
	|			И КлючиАналитики.СтатьяКалькуляции = РегистрАналитика.СтатьяКалькуляции
	|			И ЕСТЬNULL(Движения.ВидЗапасов.УстарелоНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) = РегистрАналитика.Назначение
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО Движения.УдалитьИсточникГФУРасчетов = ОбъектыРасчетов.Объект
	|			И ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			И ОбъектыРасчетов.Организация = Движения.АналитикаУчетаПоПартнерам.Организация
	|			И НЕ Движения.УдалитьИсточникГФУРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|	И ЗаблокированныеРегистраторыВозврата.Ссылка ЕСТЬ NULL
	|	И ЗаблокированныеРегистраторыПередачи.Ссылка ЕСТЬ NULL
	|	И ЗаблокированныеРегистраторыОтчетов.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючиИнициализированы,
	|	НомерСтроки
	|";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"#ИмяВТЗаблокированныхРегистраторовВозврата",
		РезультатыСозданияВТВозвраты.ИмяВременнойТаблицы
	);
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"#ИмяВТЗаблокированныхРегистраторовПередачи",
		РезультатыСозданияВТПередачи.ИмяВременнойТаблицы
	);
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"#ИмяВТЗаблокированныхРегистраторовОтчетов",
		РезультатыСозданияВТОтчеты.ИмяВременнойТаблицы
	);
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0
		Или Не ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для каждого Выборка Из ОбновляемыеДанные Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыНакопления.ВыручкаИСебестоимостьПродаж.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			ИначеЕсли Результат[0].КлючиИнициализированы = 0 Тогда
				ТекстСообщения = НСтр("ru='есть необновленные ключи аналитики учета номенклатуры. Необходимо перепровести документ вручную.';uk='є неоновлені ключі аналітики обліку номенклатури. Необхідно перепровести документ вручну.'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), 
				ТекстСообщения
			);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
