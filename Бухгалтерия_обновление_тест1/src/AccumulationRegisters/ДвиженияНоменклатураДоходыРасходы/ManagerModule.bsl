#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//++ НЕ УТ
#Область ПрограммныйИнтерфейс

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));

 	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Стоимость", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаУпрСНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьБезНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаРегл, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("10c56f1b-e5dc-4363-89b6-a2f28af1e6d5");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ДвиженияНоменклатураДоходыРасходы,"
		+ "Справочник.КлючиАналитикиУчетаНоменклатуры,"
		+ "Справочник.ВидыЗапасов,"
		+ "Документ.ПрочееОприходованиеТоваров";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ДвиженияНоменклатураДоходыРасходы";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Очищает измерение ""Вид запасов"" и перезаполняет реквизит ""Источник ГФУ номенклатуры"" записей регистра накопления ""Движения номенклатуры - доходы/расходы"" по документам ""Прочее оприходование товаров"".
                                   |Корректирует аналитику движений по регистру ""Движения Номенклатура - Доходы\Расходы"" для документов ""Отчет по комиссии между организациями о списании"". 
                                   |До завершения работы обработчика обновления возможно некорректные данные в отчете ""Себестоимость товаров"".'
                                   |;uk='Очищає вимір ""Вид запасів"" та перезаповнює реквізит ""Джерело ГФО номенклатури"" записів регістру накопичення ""Рухи номенклатура - доходи/витрати"" за документами ""Інше оприбуткування товарів"".
                                   |Коригує аналітику рухів по регістру ""Рухи Номенклатура - Доходи\Витрати"" для документів ""Звіт по комісії між організаціями про списання"". 
                                   |До завершення роботи обробника оновлення можливі некоректні дані у звіті ""Собовартість товарів"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПрочееОприходованиеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьКлючиАналитикиНоменклатуры(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.4.
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	Если Не Константы.УчитыватьСебестоимостьТоваровПоНазначениям.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ДвиженияНоменклатураДоходыРасходы";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Ссылка
	|ИЗ
	|	(
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ДвиженияНоменклатураДоходыРасходы КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|
	|	) КАК ДанныеРегистра
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), ДополнительныеПараметры);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураДоходыРасходы КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Назначение <> ДанныеРегистра.ВидЗапасов.УстарелоНазначение
	|	И ДанныеРегистра.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ДанныеРегистра.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	И &ИспользуютсяВидыЗапасов
	|");
	
    Запрос.УстановитьПараметр("ИспользуютсяВидыЗапасов", Константы.УчитыватьСебестоимостьТоваровПоНазначениям.Получить());
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.4:
// в движениях регистра заполняется реквизит Назначение в аналитике учета номенклатуры
// очищаются виды запасов для товаров выкупленных у комитента и работ.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияНоменклатураДоходыРасходы";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Движения.Регистратор          КАК Регистратор,
	|	Движения.Период               КАК Период,
	|	Движения.ХозяйственнаяОперация      КАК ХозяйственнаяОперация,
	|	Движения.Организация                КАК Организация,
	|	Движения.Подразделение              КАК Подразделение,
	|	Движения.НаправлениеДеятельностиНоменклатуры КАК НаправлениеДеятельностиНоменклатуры,
	|	ВЫБОР КОГДА НЕ Движения.АналитикаУчетаНоменклатуры ЕСТЬ NULL
	|		И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|		И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ТОГДА Аналитика.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                               КАК АналитикаУчетаНоменклатуры,
	|	Движения.Склад                      КАК Склад,
	|	Движения.ТипЗапасов                 КАК ТипЗапасов,
	|	ВЫБОР 
	|		КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ВидЗапасов
	|	КОНЕЦ                               КАК ВидЗапасов,
	|	Движения.СтатьяДоходовРасходов      КАК СтатьяДоходовРасходов,
	|	Движения.НаправлениеДеятельностиСтатьи КАК НаправлениеДеятельностиСтатьи,
	|	Движения.АналитикаДоходов           КАК АналитикаДоходов,
	|	Движения.АналитикаРасходов          КАК АналитикаРасходов,
	|	Движения.АналитикаАктивовПассивов   КАК АналитикаАктивовПассивов,
	|	Движения.Количество              КАК Количество,
	|	Движения.Стоимость               КАК Стоимость,
	|	Движения.СтоимостьБезНДС         КАК СтоимостьБезНДС,
	|	Движения.СтоимостьРегл           КАК СтоимостьРегл,
	|	ВЫБОР 
	|		КОГДА Движения.ИсточникГФУНоменклатуры.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ИсточникГФУНоменклатуры
	|	КОНЕЦ                               КАК ИсточникГФУНоменклатуры,
	|	Движения.ДокументДвижения           КАК ДокументДвижения,
	|	Движения.РасчетСебестоимости        КАК РасчетСебестоимости,
	|
	|	ВЫБОР КОГДА Аналитика.КлючАналитики ЕСТЬ NULL
	|		И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасов.УстарелоНазначение
	|		И Движения.ВидЗапасов.УстарелоНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
	|
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураДоходыРасходы КАК Движения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = Движения.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия = Аналитика.Серия
	|		И Ключи.МестоХранения = Аналитика.МестоХранения
	|		И Ключи.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|		И ЕСТЬNULL(Движения.ВидЗапасов.УстарелоНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) = Аналитика.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров КАК ПрочееОприходование
	|	ПО Движения.Регистратор = ПрочееОприходование.Ссылка
	|		И ПрочееОприходование.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноСписанияНаРасходы)
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|УПОРЯДОЧИТЬ ПО
	|	КлючиИнициализированы,
	|	НомерСтроки
	|");
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
			ИначеЕсли Результат[0].КлючиИнициализированы = 0 Тогда
				ТекстСообщения = НСтр("ru='Есть необновленные ключи аналитики учета номенклатуры. Необходимо перепровести документ вручную.';uk='Існують неоновлені ключі аналітики обліку номенклатури. Необхідно перепровести документ вручну.'");
				ВызватьИсключение ТекстСообщения;
			Иначе
				Набор.Загрузить(Результат);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли