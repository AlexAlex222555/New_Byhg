#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

#Область ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9884d9ef-b00d-4bc8-982b-7b1fd015962e");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСПоставщиками.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновляет движения документов по регистру ""Расчеты с поставщиками"".
                                   |Пока обработчик не выполнен расчеты находятся в некорректном состоянии.'
                                   |;uk='Оновлює рухи документів по регістру ""Розрахунки з постачальниками"". 
                                   |Поки обробник не виконаний розрахунки перебувають у некоректному стані.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаПоПартнерам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.КлючиАналитикиУчетаПоПартнерам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ГрафикИсполненияДоговора.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыкупВозвратнойТарыУПоставщика.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.АвансовыйОтчет.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомитентуОСписании.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатков.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровПоставщику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РасходныйКассовыйОрдер.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказПоставщику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомиссионера.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомитенту.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриходныйКассовыйОрдер.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеЗадолженности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	//++ НЕ УТ
	Читаемые.Добавить(Метаданные.Документы.ОтчетПереработчика.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказПереработчику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеДенежныхДокументов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыбытиеДенежныхДокументов.ПолноеИмя());
	//-- НЕ УТ
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АвансовыйОтчет.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВзаимозачетЗадолженности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ГрафикИсполненияДоговора.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитенту.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеУслугПрочихАктивов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйКассовыйОрдер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РасходныйКассовыйОрдер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаПоПартнерам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.АналитикаУчетаПоПартнерам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ГрафикПлатежей.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияЗаказовПоставщикам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	//++ НЕ УТ
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыбытиеДенежныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеДенежныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";      
	//-- Локализация
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	//-- НЕ УТ
	
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьОбъектыРасчетов(
		Обработчик.ПриоритетыВыполнения,
		"После",
		Исключения
	);

#КонецОбласти
	
#Область ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("63b77151-97f1-42ff-8d88-b13e318769e8");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСПоставщиками.ЗарегистрироватьДанныеКорректировокРегистровКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.РасчетыСПоставщиками";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.РасчетыСПоставщиками";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Заполняет реквизиты ""ПорядокОперации"", ""ДатаРегистратора"", ""ДатаПлатежа"", ""ПорядокЗачетаПоДатеПлатежа"" по движениям, сделанным документом Корректировка регистров в регистре Расчеты с поставщиками.
                                   |Пока обработчик не выполнен, расчеты находятся в некорректном состоянии.'
                                   |;uk='Заповнює реквізити ""ПорядокОперации"", ""ДатаРегистратора"", ""ДатаПлатежа"", ""ПорядокЗачетаПоДатеПлатежа"" за рухами, зробленими документом Коригування регістрів у регістрі Розрахунки з постачальниками.
                                   |Поки обробник не виконаний, розрахунки перебувають у некоректному стані.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь)[1];
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка КАК Регистратор,
	|	СУММА(ВозвратТоваровПоставщикуРасшифровкаПлатежа.Сумма) КАК СуммаКРаспределению
	|ПОМЕСТИТЬ ВозвратыТоваровПоставщику
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК ВозвратТоваровПоставщикуРасшифровкаПлатежа
	|ГДЕ
	|	НЕ ВозвратТоваровПоставщикуРасшифровкаПлатежа.УдалитьЗаказ В (Неопределено,Значение(Документ.ВозвратТоваровПоставщику.ПустаяСсылка))
	|	И ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Сумма) КАК СуммаКРаспределению,
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВозвратыТоваровМеждуОрганизациями
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа
	|ГДЕ
	|	НЕ ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.УдалитьЗаказ = ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка
	|	И ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РасчетыСПоставщиками.Сумма) КАК СуммаВзаиморасчетовРаспределенная,
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ РаспределенныеРасчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И (РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ИЛИ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОбработке.Регистратор КАК Регистратор
	|ИЗ (ВЫБРАТЬ
	|		ВозвратыТоваровПоставщику.Регистратор КАК Регистратор
	|	ИЗ
	|		ВозвратыТоваровПоставщику КАК ВозвратыТоваровПоставщику
	|			ЛЕВОЕ СОЕДИНЕНИЕ РаспределенныеРасчеты КАК РаспределенныеРасчеты
	|			ПО (ВозвратыТоваровПоставщику.Регистратор = РаспределенныеРасчеты.Регистратор)
	|				И (ВозвратыТоваровПоставщику.СуммаКРаспределению = РаспределенныеРасчеты.СуммаВзаиморасчетовРаспределенная)
	|	ГДЕ
	|		РаспределенныеРасчеты.Регистратор ЕСТЬ NULL
	|		И ВозвратыТоваровПоставщику.СуммаКРаспределению > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВозвратыТоваровМеждуОрганизациями.Регистратор КАК Регистратор
	|	ИЗ
	|		ВозвратыТоваровМеждуОрганизациями КАК ВозвратыТоваровМеждуОрганизациями
	|			ЛЕВОЕ СОЕДИНЕНИЕ РаспределенныеРасчеты КАК РаспределенныеРасчеты
	|			ПО (ВозвратыТоваровМеждуОрганизациями.Регистратор = РаспределенныеРасчеты.Регистратор)
	|				И (ВозвратыТоваровМеждуОрганизациями.СуммаКРаспределению = РаспределенныеРасчеты.СуммаВзаиморасчетовРаспределенная)
	|	ГДЕ
	|		РаспределенныеРасчеты.Регистратор ЕСТЬ NULL
	|		И ВозвратыТоваровМеждуОрганизациями.СуммаКРаспределению > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Расчеты.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК Расшифровка
	|		ПО Расчеты.Регистратор = Расшифровка.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	
	|	ГДЕ
	|		ЕСТЬNULL(Расшифровка.УдалитьЗаказ.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		И ЕСТЬNULL(Расшифровка.УдалитьЗаказ.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> Аналитика.Организация
	|	) КАК ДокументыКОбработке
	//++ НЕ УТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор
	|	
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика КАК ОтчетПереработчика
	|	ПО Расчеты.Регистратор = ОтчетПереработчика.Ссылка
	|ГДЕ
	|	Расчеты.Период = ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)
	//-- НЕ УТ
	|");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрНакопления.РасчетыСПоставщиками");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"), 
		ДополнительныеПараметры
	);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ВзаимозачетЗадолженности
	|	ПО Расчеты.Регистратор = ВзаимозачетЗадолженности.Ссылка
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
	    Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"), 
	    ПолноеИмяРегистра
	);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
	|			ПО Ключи.Ссылка = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	((РасчетыСПоставщиками.Сумма <> 0
	|			ИЛИ РасчетыСПоставщиками.КОплате <> 0)
	|	И РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВводОстатков
	|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.УдалитьЗаказПоставщику) НЕ В (&ТипыДокументов)
	|	И ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.УдалитьЗаказПоставщику) НЕ В (ТИП(Справочник.ДоговорыКонтрагентов),ТИП(Справочник.ДоговорыМеждуОрганизациями))
	|	И РасчетыСПоставщиками.РасчетныйДокумент = Неопределено
	|	И РасчетыСПоставщиками.УдалитьЗаказПоставщику <> НЕОПРЕДЕЛЕНО)
	//Порядок расчетов
	|	ИЛИ ((РасчетыСПоставщиками.ПорядокОперации = """" 
	|			ИЛИ РасчетыСПоставщиками.ПорядокЗачетаПоДатеПлатежа = """")
	|		И (РасчетыСПоставщиками.Сумма <> 0 ИЛИ РасчетыСПоставщиками.КОплате <> 0 ИЛИ РасчетыСПоставщиками.КПоступлению <> 0)
	//Хозяйственная операция
	|	ИЛИ (РасчетыСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|		И НЕ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаРегистров)
	//Пустые варианты оплаты
	|	ИЛИ (РасчетыСПоставщиками.КОплате <> 0
	|		И ВидДвижения = Значение(ВидДвиженияНакопления.Расход)
	|		И ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.Регистратор) В (&ТипыДокументов)
	|		И РасчетыСПоставщиками.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.ПустаяСсылка))
	//Дата регистратора необходима для порядка расчетов
	|	ИЛИ РасчетыСПоставщиками.ДатаРегистратора = ДАТАВРЕМЯ(1, 1, 1)
	//ХО Удержания вознаграждения
	|	ИЛИ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ОтчетКомитенту
	|		И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом)
	//Валюта документа 
	|	ИЛИ РасчетыСПоставщиками.ВалютаДокумента = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И НЕ РасчетыСПоставщиками.Регистратор Ссылка Документ.СписаниеЗадолженности
	//Дозаполнение закупка по заказу
	|	ИЛИ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|		И ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.ПриобретениеТоваровУслуг).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.ПриобретениеТоваровУслуг).ПоступлениеПоЗаказам
	|		И РасчетыСПоставщиками.ЗакупкаПоЗаказу = Неопределено
	|		И (РасчетыСПоставщиками.Сумма <> 0 ИЛИ РасчетыСПоставщиками.КОплате <> 0 ИЛИ РасчетыСПоставщиками.КПоступлению <> 0)
	//КорОбъектРасчетов
	|	ИЛИ (ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.УдалитьЗаказПоставщику) В ( 
	|				ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
	|				ТИП(Документ.РасходныйКассовыйОрдер)
	|			)
	|			ИЛИ ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.УдалитьЗаказПоставщику) = ТИП(Документ.ПервичныйДокумент)
	|				И ВЫРАЗИТЬ(РасчетыСПоставщиками.УдалитьЗаказПоставщику КАК Документ.ПервичныйДокумент).ТипПервичногоДокумента = 
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику)
	|		)
	|		И РасчетыСПоставщиками.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И РасчетыСПоставщиками.Сумма <> 0
	|		И ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.Регистратор) НЕ В (
	|			ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
	|			ТИП(Документ.ПриходныйКассовыйОрдер),
	|			ТИП(Документ.ОперацияПоПлатежнойКарте),
	|			ТИП(Документ.РасходныйКассовыйОрдер),
	|			ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
	|			ТИП(Документ.СписаниеЗадолженности),
	|			ТИП(Документ.ВзаимозачетЗадолженности),
	|			ТИП(Документ.ВводОстатков)
	|		)
	//Исправление НД в ПТиУ по нескольким заказам с разными НД
	|	ИЛИ РасчетыСПоставщиками.УдалитьЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику
	|		И РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|		И Ключи.НаправлениеДеятельности <> ВЫРАЗИТЬ(РасчетыСПоставщиками.УдалитьЗаказПоставщику КАК Документ.ЗаказПоставщику).НаправлениеДеятельности
	//Заполнение КорАналитикаУчетаПоПартнерам
	|	ИЛИ РасчетыСПоставщиками.КорАналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|		И НЕ РасчетыСПоставщиками.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	//Перепроведение возвратов ДС
	|	ИЛИ РасчетыСПоставщиками.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации)
	|		)
	|		И РасчетыСПоставщиками.УдалитьЗаказПоставщику <> РасчетыСПоставщиками.Регистратор
	|		И РасчетыСПоставщиками.Сумма <> 0
	|)
	| И НЕ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	| И НЕ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТипыДокументов", ПолучитьТипыДокументов());

	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		ПолноеИмяРегистра
	);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Расчеты.ЗакупкаПоЗаказу) В (&СписокТипов)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	//++ НЕ УТ
	СписокТипов.Добавить(Тип("ДокументСсылка.ЗаказПереработчику"));
	//-- НЕ УТ
	Запрос.УстановитьПараметр("СписокТипов", СписокТипов);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы, 
		ПолноеИмяРегистра
	);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчета", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра
	);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь)[1];
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0
		Или Не ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаВозвраты = " 
	|ВЫБРАТЬ
	|	ОбновляемыеДанные.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТОбъектыДляОбработки
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка КАК Регистратор,
	|	СУММА(ВозвратТоваровПоставщикуРасшифровкаПлатежа.Сумма) КАК СуммаКРаспределению
	|ПОМЕСТИТЬ ВозвратыТоваровПоставщику
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК ВозвратТоваровПоставщикуРасшифровкаПлатежа
	|ГДЕ
	|	НЕ ВозвратТоваровПоставщикуРасшифровкаПлатежа.УдалитьЗаказ В (Неопределено,Значение(Документ.ВозвратТоваровПоставщику.ПустаяСсылка))
	|	И ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Сумма) КАК СуммаКРаспределению,
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВозвратыТоваровМеждуОрганизациями
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа
	|ГДЕ
	|	НЕ ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.УдалитьЗаказ = ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка
	|	И ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РасчетыСПоставщиками.Сумма) КАК СуммаВзаиморасчетовРаспределенная,
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ РаспределенныеРасчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И (РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ИЛИ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОбработке.Регистратор КАК Регистратор,
	|	ДокументыКОбработке.СуммаКРаспределению КАК СуммаКРаспределению
	|ПОМЕСТИТЬ ВТТребуютДопроведения
	|ИЗ (ВЫБРАТЬ
	|		ВозвратыТоваровПоставщику.Регистратор КАК Регистратор,
	|		ВозвратыТоваровПоставщику.СуммаКРаспределению КАК СуммаКРаспределению
	|	ИЗ
	|		ВозвратыТоваровПоставщику КАК ВозвратыТоваровПоставщику
	|			ЛЕВОЕ СОЕДИНЕНИЕ РаспределенныеРасчеты КАК РаспределенныеРасчеты
	|			ПО (ВозвратыТоваровПоставщику.Регистратор = РаспределенныеРасчеты.Регистратор)
	|				И (ВозвратыТоваровПоставщику.СуммаКРаспределению = РаспределенныеРасчеты.СуммаВзаиморасчетовРаспределенная)
	|	ГДЕ
	|		РаспределенныеРасчеты.Регистратор ЕСТЬ NULL
	|		И ВозвратыТоваровПоставщику.СуммаКРаспределению > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВозвратыТоваровМеждуОрганизациями.Регистратор КАК Регистратор,
	|		ВозвратыТоваровМеждуОрганизациями.СуммаКРаспределению КАК СуммаКРаспределению
	|	ИЗ
	|		ВозвратыТоваровМеждуОрганизациями КАК ВозвратыТоваровМеждуОрганизациями
	|			ЛЕВОЕ СОЕДИНЕНИЕ РаспределенныеРасчеты КАК РаспределенныеРасчеты
	|			ПО (ВозвратыТоваровМеждуОрганизациями.Регистратор = РаспределенныеРасчеты.Регистратор)
	|				И (ВозвратыТоваровМеждуОрганизациями.СуммаКРаспределению = РаспределенныеРасчеты.СуммаВзаиморасчетовРаспределенная)
	|	ГДЕ
	|		РаспределенныеРасчеты.Регистратор ЕСТЬ NULL
	|		И ВозвратыТоваровМеждуОрганизациями.СуммаКРаспределению > 0
	|	) КАК ДокументыКОбработке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыДляОбработки.Регистратор                КАК Регистратор,
	|	ВЫБОР 
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).ВерсияДанных
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).ВерсияДанных
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ КАК РегистраторВерсияДанных,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).Дата
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).Дата
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) 
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).Валюта
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).Организация
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику 
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).Контрагент
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|			ТОГДА 
	|				ВЫБОР 
	|					КОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).РасчетыЧерезОтдельногоКонтрагента
	|						ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).Контрагент
	|					ИНАЧЕ ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).ОрганизацияПолучатель
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).Партнер
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями 
	|			ТОГДА ВЫБОР 
	|					КОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).РасчетыЧерезОтдельногоКонтрагента
	|						ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).Партнер
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|	КОНЕЦ КАК Партнер,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).Договор
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями 
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).РасчетыЧерезОтдельногоКонтрагента
	|						ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).ДоговорПокупки
	|					ИНАЧЕ ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).Договор
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК Договор,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).НаправлениеДеятельности
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) 
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровПоставщику).СуммаДокумента
	|		КОГДА ОбъектыДляОбработки.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|			ТОГДА ВЫРАЗИТЬ(ОбъектыДляОбработки.Регистратор КАК Документ.ВозвратТоваровМеждуОрганизациями).СуммаДокумента
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДокумента
	|ПОМЕСТИТЬ ТаблицаСсылок
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Дата          КАК Дата,
	|	&ВалютаУпр                  КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ДатыКурсовУпр
	|ИЗ
	|	ТаблицаСсылок КАК ТаблицаСсылок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ТаблицаСсылок.Дата >= КурсыВалют.Период
	|ГДЕ 
	|	КурсыВалют.Валюта = &ВалютаУпр
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСсылок.Дата,
	|	ТаблицаСсылок.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Дата          КАК Дата,
	|	&ВалютаРегл                 КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ДатыКурсовРегл
	|ИЗ
	|	ТаблицаСсылок КАК ТаблицаСсылок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ТаблицаСсылок.Дата >= КурсыВалют.Период
	|ГДЕ 
	|	КурсыВалют.Валюта = &ВалютаРегл
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСсылок.Дата,
	|	ТаблицаСсылок.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Дата          КАК Дата,
	|	ТаблицаСсылок.Валюта        КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ДатыКурсовВалютДокументов
	|ИЗ
	|	ТаблицаСсылок КАК ТаблицаСсылок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ТаблицаСсылок.Валюта = КурсыВалют.Валюта
	|			И ТаблицаСсылок.Дата >= КурсыВалют.Период
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСсылок.Дата,
	|	ТаблицаСсылок.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Дата                    КАК Дата,
	|	ДанныеДляОбработки.Регистратор             КАК Регистратор,
	|	ДанныеДляОбработки.РегистраторВерсияДанных КАК РегистраторВерсияДанных,
	|	ДанныеДляОбработки.Организация             КАК Организация,
	|	ДанныеДляОбработки.Партнер                 КАК Партнер,
	|	ДанныеДляОбработки.Контрагент              КАК Контрагент,
	|	ДанныеДляОбработки.Договор                 КАК Договор,
	|	ДанныеДляОбработки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДляОбработки.Валюта                  КАК Валюта,
	|	ДанныеДляОбработки.СуммаДокумента          КАК СуммаДокумента,
	|	ЕСТЬNULL(ТребуютДопроведения.СуммаКРаспределению,0) КАК СуммаКРаспределению,
	|	ВЫРАЗИТЬ((ДанныеДляОбработки.СуммаДокумента * КурсыВалютыДокумента.Курс * КурсыУпр.Кратность)
	|		/ (КурсыУпр.Курс * КурсыВалютыДокумента.Кратность) КАК ЧИСЛО(15,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ((ДанныеДляОбработки.СуммаДокумента * КурсыВалютыДокумента.Курс * КурсыРегл.Кратность) 
	|		/ (КурсыРегл.Курс * КурсыВалютыДокумента.Кратность) КАК ЧИСЛО(15,2)) КАК СуммаРегл,
	|	КурсыВалютыДокумента.Кратность             КАК КратностьВалютыДокумента,
	|	КурсыВалютыДокумента.Курс                  КАК КурсВалютыДокумента,
	|	КурсыУпр.Кратность                         КАК КратностьУпр,
	|	КурсыУпр.Курс                              КАК КурсУпр,
	|	КурсыРегл.Кратность                        КАК КратностьРегл,
	|	КурсыРегл.Курс                             КАК КурсРегл,
	|	ВЫБОР 
	|		КОГДА НЕ ТребуютДопроведения.Регистратор ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                      КАК ТребуетДопроведения
	|ИЗ ТаблицаСсылок КАК ДанныеДляОбработки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДатыКурсовУпр КАК ДатыКурсовУпр
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыУпр
	|			ПО ДатыКурсовУпр.ДатаКурса = КурсыУпр.Период
	|				И ДатыКурсовУпр.Валюта = КурсыУпр.Валюта
	|		ПО ДанныеДляОбработки.Дата = ДатыКурсовУпр.Дата
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДатыКурсовРегл КАК ДатыКурсовРегл
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыРегл
	|			ПО ДатыКурсовРегл.ДатаКурса = КурсыРегл.Период
	|				И ДатыКурсовРегл.Валюта = КурсыРегл.Валюта
	|		ПО ДанныеДляОбработки.Дата = ДатыКурсовРегл.Дата
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДатыКурсовВалютДокументов КАК ДатыКурсовВалютДокументов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютыДокумента
	|			ПО ДатыКурсовВалютДокументов.ДатаКурса = КурсыВалютыДокумента.Период
	|				И ДатыКурсовВалютДокументов.Валюта = КурсыВалютыДокумента.Валюта
	|		ПО ДанныеДляОбработки.Валюта = ДатыКурсовВалютДокументов.Валюта
	|			И ДанныеДляОбработки.Дата = ДатыКурсовВалютДокументов.Дата
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТТребуютДопроведения КАК ТребуютДопроведения
	|		ПО ДанныеДляОбработки.Регистратор = ТребуютДопроведения.Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка               КАК Регистратор,
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.УдалитьЗаказ         КАК УдалитьЗаказ,
	|	СУММА(ВозвратТоваровПоставщикуРасшифровкаПлатежа.Сумма)         КАК Сумма,
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК ВозвратТоваровПоставщикуРасшифровкаПлатежа
	|ГДЕ
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка В (ВЫБРАТЬ ТаблицаСсылок.Регистратор ИЗ ТаблицаСсылок КАК ТаблицаСсылок)
	|	И НЕ ВозвратТоваровПоставщикуРасшифровкаПлатежа.УдалитьЗаказ В (Неопределено,Значение(Документ.ВозвратТоваровПоставщику.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.Ссылка,
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.УдалитьЗаказ,
	|	ВозвратТоваровПоставщикуРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка               КАК Регистратора,
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.УдалитьЗаказ         КАК УдалитьЗаказ,
	|	СУММА(ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Сумма)         КАК Сумма,
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа
	|ГДЕ
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка В (ВЫБРАТЬ ТаблицаСсылок.Регистратор ИЗ ТаблицаСсылок КАК ТаблицаСсылок)
	|	И НЕ ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.УдалитьЗаказ = ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.Ссылка,
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.УдалитьЗаказ,
	|	ВозвратТоваровМеждуОрганизациямиРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|";         

	ЗапросВозвраты = Новый Запрос(ТекстЗапросаВозвраты);
	
	ЗапросВозвраты.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	ЗапросВозвраты.УстановитьПараметр("ВалютаУпр",  Константы.ВалютаУправленческогоУчета.Получить());
	ЗапросВозвраты.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);  

	Результат = ЗапросВозвраты.ВыполнитьПакет();
	
	ТаблицаВозвраты = Результат[9].Выгрузить();
	РасшифровкиПлатежей = Результат[10].Выгрузить();
	ТаблицаВозвраты.Индексы.Добавить("Регистратор");
	РасшифровкиПлатежей.Индексы.Добавить("Регистратор"); 
	
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		Регистратор = Выборка.Регистратор; 
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Если НЕ ЭтоФайловаяИБ И (ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") 
				ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) Тогда
				
				МетаданныеДокумента = Регистратор.Метаданные();
				
				Попытка
			
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ." + МетаданныеДокумента.Имя);
					ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					Блокировка.Заблокировать();
					
				Исключение
					
					ОтменитьТранзакцию();
					ТекстСообщения = НСтр("ru='Не удалось заблокировать документ: %Ссылка% по причине: %Причина%';uk='Не вдалося заблокувати документ: %Ссылка% по причині: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Регистратор);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Предупреждение,
						МетаданныеДокумента,
						Регистратор,
						ТекстСообщения
					);      
					
					Продолжить;
					
				КонецПопытки;
				
				СтруктураПоиска = Новый Структура("Регистратор", Регистратор);
				ДокументыВозврата = ТаблицаВозвраты.НайтиСтроки(СтруктураПоиска); 
				Если ДокументыВозврата.Количество() > 0 Тогда
					ДокументВозврата = ДокументыВозврата[0];
					РегистраторВерсияДанных = ДокументВозврата.РегистраторВерсияДанных; 
				Иначе	   
					РегистраторВерсияДанных = Неопределено;
				КонецЕсли;
				
				Если РегистраторВерсияДанных <> Регистратор.ВерсияДанных Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
            Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.РасчетыСПоставщиками.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор); 
            
			ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, ИмяРегистра);
			Результат = ТаблицыДляДвижений["Таблица" + ИмяРегистра];
            НаборЗаписей.ЗагрузитьСОбработкой(Результат);
			
			ЗаписьПриход = Неопределено;
			СуммаРаспределенная = 0;
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Если НЕ ЗначениеЗаполнено(Запись.ЗакупкаПоЗаказу) И Запись.ЗакупкаПоЗаказу <> Неопределено Тогда
					Запись.ЗакупкаПоЗаказу = Неопределено;
				КонецЕсли;
				Если Запись.УдалитьЗаказПоставщику = Регистратор Тогда
					Если Запись.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						ЗаписьПриход = Запись;
					Иначе
						СуммаРаспределенная = СуммаРаспределенная + Запись.Сумма;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;     
			
			СтруктураПоиска = Новый Структура("Регистратор", Регистратор);
			ДокументыВозврата = ТаблицаВозвраты.НайтиСтроки(СтруктураПоиска); 
			Если ДокументыВозврата.Количество() > 0 Тогда
				ДокументВозврата = ДокументыВозврата[0];
				ТребуетДопроведения = ДокументВозврата.ТребуетДопроведения;  
				СуммаКРаспределению = ДокументВозврата.СуммаКРаспределению;
			Иначе	             
				ДокументВозврата = Неопределено;
			    ТребуетДопроведения = Ложь;    
				СуммаКРаспределению = 0;
			КонецЕсли;
			
			Если ТребуетДопроведения И СуммаКРаспределению > СуммаРаспределенная Тогда
				
				СтруктураАналитики = Новый Структура();
				СтруктураАналитики.Вставить("Организация",             ДокументВозврата.Организация);
				СтруктураАналитики.Вставить("Партнер",                 ДокументВозврата.Партнер);
				СтруктураАналитики.Вставить("Контрагент",              ДокументВозврата.Контрагент);
				СтруктураАналитики.Вставить("Договор",                 ДокументВозврата.Договор);
				СтруктураАналитики.Вставить("НаправлениеДеятельности", ДокументВозврата.НаправлениеДеятельности);
				
				АналитикаВозврата = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(СтруктураАналитики);
				
				Расшифровка = РасшифровкиПлатежей.НайтиСтроки(СтруктураПоиска);
				
				КоличествоЗаписей = Расшифровка.Количество();
				
				Если НЕ ЗаписьПриход = Неопределено Тогда
					НаборЗаписей.Удалить(ЗаписьПриход);
				КонецЕсли;
				
				ЗаписьПриход = НаборЗаписей.Вставить(0);
				
				ЗаполнитьЗначенияСвойств(ЗаписьПриход, НаборЗаписей[1]);    
				
				ЗаписьПриход.ВидДвижения               = ВидДвиженияНакопления.Приход;
				ЗаписьПриход.УдалитьЗаказПоставщику    = Регистратор;   
				ЗаписьПриход.Валюта                    = ДокументВозврата.Валюта;
				ЗаписьПриход.АналитикаУчетаПоПартнерам = АналитикаВозврата;
				ЗаписьПриход.Сумма                     = ДокументВозврата.СуммаДокумента;
				ЗаписьПриход.КОплате                   = ДокументВозврата.СуммаДокумента;
				ЗаписьПриход.СуммаРегл                 = ДокументВозврата.СуммаРегл;
				ЗаписьПриход.СуммаУпр                  = ДокументВозврата.СуммаУпр;
				
				КоэффициентРегл = ?(ЗаписьПриход.Сумма > 0, ЗаписьПриход.СуммаРегл/ЗаписьПриход.Сумма, 0);
				КоэффициентУпр  = ?(ЗаписьПриход.Сумма > 0, ЗаписьПриход.СуммаУпр /ЗаписьПриход.Сумма, 0);
				
				СуммаРегл = ЗаписьПриход.СуммаРегл;
				СуммаУпр  = ЗаписьПриход.СуммаУпр;
				
				Для сч = 0 По КоличествоЗаписей-1 Цикл
					Запись = Расшифровка[сч];
					ЗаписьРасход = НаборЗаписей.Вставить(1+сч);
					
					ЗаполнитьЗначенияСвойств(ЗаписьРасход, ЗаписьПриход);
					
					ЗаписьРасход.ВидДвижения               = ВидДвиженияНакопления.Расход;
					ЗаписьРасход.АналитикаУчетаПоПартнерам = АналитикаВозврата;
					ЗаписьРасход.УдалитьЗаказПоставщику    = Регистратор;
					ЗаписьРасход.Валюта                    = ДокументВозврата.Валюта;
					ЗаписьРасход.Сумма                     = Запись.Сумма;
					ЗаписьРасход.КОплате                   = Запись.Сумма;
					
					Если Сч = КоличествоЗаписей - 1 Тогда
						ЗаписьРасход.СуммаРегл = СуммаРегл;
						ЗаписьРасход.СуммаУпр  = СуммаУпр;
					Иначе
						ЗаписьРасход.СуммаРегл = Запись.Сумма * КоэффициентРегл;
						ЗаписьРасход.СуммаУпр  = Запись.Сумма * КоэффициентУпр;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
            
			ЗафиксироватьТранзакцию();  
            
		Исключение
    	
    		ОтменитьТранзакцию();
    		
    		Шаблон = НСтр("ru='Не удалось записать данные в регистр %1 , по причине: %2';uk='Не вдалося записати дані в регістр %1, з причини: %2'");
    		ТекстСообщения = СтрШаблон(
                Шаблон,
    			ПолноеИмяРегистра,
    			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
            );
    		
    		ЗаписьЖурналаРегистрации(
                ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
    			УровеньЖурналаРегистрации.Предупреждение,
    			МетаданныеРегистра,
    			,
    			ТекстСообщения
            );
    	
		КонецПопытки;
	КонецЦикла;
	

	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ПолучитьТипыДокументов()
	
	ТекстТиповДокументов = ""; 
	
	
	ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ЗаказПоставщику)";
	
	Возврат ТекстТиповДокументов;
	
КонецФункции

// Регистрирует данные для обновления данных движений документа Корректировка регистров
Процедура ЗарегистрироватьДанныеКорректировокРегистровКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСПоставщиками";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	//Порядок расчетов
	|	(РасчетыСПоставщиками.ПорядокОперации = """" 
	|	ИЛИ РасчетыСПоставщиками.ПорядокЗачетаПоДатеПлатежа = """"
	//Дата регистратора необходима для порядка расчетов
	|	ИЛИ РасчетыСПоставщиками.ДатаРегистратора = ДАТАВРЕМЯ(1, 1, 1))
	| И РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		ПолноеИмяРегистра
	);
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.4
// Заполняет реквизиты ПорядокОперации, ДатаРегистратора, ДатаПлатежа, ПорядокЗачетаПоДатеПлатежа 
// по движениям, сделанным документом Корректировка регистров
Процедура ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСПоставщиками";
	
	//Корректировки регистров.
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
		Параметры.Очередь,
		"Документ.КорректировкаРегистров", 
		ПолноеИмяРегистра
	);
	
	ТипДокумента = Тип("ДокументСсылка.КорректировкаРегистров");
	ВидТипДокумента = ОперативныеВзаиморасчетыСервер.ВидТипДокумента(ТипДокумента);
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.КорректировкаРегистров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Регистратор,"Дата,Номер");
			
			Набор = РегистрыНакопления.РасчетыСПоставщиками.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			
			ОбъектИзменен = Ложь;
			
			Для Каждого Запись Из Набор Цикл
				Если Не ЗначениеЗаполнено(Запись.ДатаРегистратора) Тогда
					Запись.ДатаРегистратора = РеквизитыДокумента.Дата;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Запись.ДатаПлатежа) И Запись.КОплате <> 0 Тогда
					Запись.ДатаПлатежа = РеквизитыДокумента.Дата;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Запись.ПорядокЗачетаПоДатеПлатежа) ИЛИ Не ЗначениеЗаполнено(Запись.ПорядокОперации) Тогда
					Если Запись.Сумма = 0 И Запись.КОплате <> 0 Тогда
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Запись.ДатаРегистратора, РеквизитыДокумента.Номер, ВидТипДокумента);
						Запись.ПорядокЗачетаПоДатеПлатежа   = ОперативныеВзаиморасчетыСервер.Порядок(Запись.Период, РеквизитыДокумента.Номер, ВидТипДокумента);
					ИначеЕсли Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Сумма > 0 
							ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Сумма < 0 Тогда 
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Запись.Период, РеквизитыДокумента.Номер, ВидТипДокумента);
						Запись.ПорядокЗачетаПоДатеПлатежа   = Запись.ПорядокОперации;
					Иначе
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Запись.ДатаРегистратора, РеквизитыДокумента.Номер,,ТипДокумента, Запись.ВидДвижения);
						Запись.ПорядокЗачетаПоДатеПлатежа   = ОперативныеВзаиморасчетыСервер.Порядок(
							?(ЗначениеЗаполнено(Запись.ДатаПлатежа),Запись.ДатаПлатежа,Запись.ДатаРегистратора), РеквизитыДокумента.Номер,, ТипДокумента, Запись.ВидДвижения);
					КонецЕсли;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Запись.КорОбъектРасчетов) И НЕ ЗначениеЗаполнено(Запись.КорАналитикаУчетаПоПартнерам) Тогда
					Запись.КорАналитикаУчетаПоПартнерам = Запись.АналитикаУчетаПоПартнерам;
					ОбъектИзменен = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
			Иначе
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось обработать движения документа ""%1"" по причине:
                    |%2'
                    |;uk='Не вдалося обробити рух документа ""%1"" по причині:
                    |%2'"),
				Регистратор,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(),
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
