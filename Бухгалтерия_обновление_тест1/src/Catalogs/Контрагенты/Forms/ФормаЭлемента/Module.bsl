#Область ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ОснованиеОбособленныйКонтрагент") Тогда
		НаОснованииОбособленногоКонтрагента = Истина;
	КонецЕсли;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриЧтенииСозданииНаСервере();
		ЗаполнитьПоОснованию(Параметры);
	КонецЕсли;
	
	УстановитьПараметрыВыбораГоловногоКонтрагента();
	//++ Локализация
	Если Параметры.Ключ.Пустая() Тогда
    	пТекстЗаполнения = СокрЛП(ЭтотОбъект.Параметры.ТекстЗаполнения);
    	Если Не пТекстЗаполнения = "" Тогда
    		Если Пактум_Сервер.ВероятноЕДРПОУ(пТекстЗаполнения) Тогда
    			Объект.КодПоЕДРПОУ  = пТекстЗаполнения;
                Объект.Наименование = "";
        	Иначе 
        		Объект.Наименование = пТекстЗаполнения;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
	//-- Локализация
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ДополнительныеПараметрыКИ = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ДополнительныеПараметрыКИ.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	ДополнительныеПараметрыКИ.Вставить("ПоложениеЗаголовкаКИ", ПоложениеЗаголовкаЭлементаФормы.Лево);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, ДополнительныеПараметрыКИ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	
		
	
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ПартнерыИКонтрагентыЛокализация.ОбработкаПроверкиЗаполненияНаСервереКонтрагент(Отказ, ПроверяемыеРеквизиты, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	

	УстановитьЗаголовокКодаПоЕДРПОУ();
    
    Элементы.ДекорацияЗаполнитьПоЕГРПОУ.Видимость=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если НаОснованииОбособленногоКонтрагента И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОповеститьОВыборе(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    
    // Если контрагент не является нерезидентом Украины, то страна регистрации должна быть Украина.
	Если Не Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		Объект.СтранаРегистрации = ПартнерыИКонтрагентыЛокализацияКлиентСервер.СтранаВеденияУчета();
	КонецЕсли;
	
	Если Не Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		Объект.НалоговыйНомер = "";
	КонецЕсли;
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ПередЗаписьюКонтрагент(Отказ, ПараметрыЗаписи, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Партнер", Объект.Партнер);
	Оповестить("Запись_Контрагенты", ПараметрыЗаписи, Объект.Ссылка);
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ПослеЗаписиКонтрагент(ПараметрыЗаписи, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьЗаголовокФормы();
	УправлениеДоступностью(ЭтаФорма);
	НастроитьПанельНавигации();
	УстановитьПараметрыВыбораГоловногоКонтрагента();
	
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	Если ВидКонтрагента = "ОбособленноеПодразделение" Тогда
		
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		Объект.ОбособленноеПодразделение = Истина;
		
		Если Объект.ГоловнойКонтрагент = Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	Иначе
		СтрокаЮрФизЛицо = "Перечисление.ЮрФизЛицо." + ВидКонтрагента;
		Объект.ЮрФизЛицо = ПредопределенноеЗначение(СтрокаЮрФизЛицо);
		Объект.ОбособленноеПодразделение = Ложь;
		
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
    КонецЕсли;
    
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		Объект.ПлательщикНДС = Ложь;
		Объект.ИННПлательщикаНДС = "";
		Объект.НомерСвидетельстваПлательщикаНДС = "";
	КонецЕсли; 
	
	
	УправлениеДоступностью(ЭтаФорма);
	ОтключитьОтметкуНезаполненного();
	

	УстановитьЗаголовокКодаПоЕДРПОУ();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(Объект.Наименование, Объект.НаименованиеПолное);
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ОтключитьОтметкуНезаполненного();
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКИсторииНаименованияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИсторияНаименований" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущееНаименованиеПолное", Объект.НаименованиеПолное);
		ПараметрыФормы.Вставить("ИсторияНаименований", Объект.ИсторияНаименований);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыФормы.Вставить("ЮрФизлицо", Объект.ЮрФизЛицо);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИсторияНаименованийПослеЗакрытия", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииНаименований", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытии);

	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПлательщикНДСПриИзменении(Элемент)
	УправлениеДоступностью(ЭтаФорма);
КонецПроцедуры

#Область УниверсальныеОбработчикиСобытий

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ОкончаниеВводаТекста_Контрагент(Элемент,
		Текст,
		ДанныеВыбора,
		Параметры,
		СтандартнаяОбработка,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент)
	ПартнерыИКонтрагентыЛокализацияКлиент.ПриИзмененииРеквизита_Контрагент(
		Элемент,
		ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиФормы(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ОбработкаНавигационнойСсылкиФормы_Контрагент(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииИзмененияРеквизитаЛокализации(ИмяЭлемента, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;
	
	Если ИмяЭлемента = "ГоловнойКонтрагент" Тогда
		ГоловнойКонтрагентПриИзменении(Элементы.ГоловнойКонтрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ПараметрыОбработки)
	
	ПартнерыИКонтрагентыЛокализация.ПриОкончанииИзмененияРеквизита_Контрагент(ИмяЭлемента, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

// Обработчик события начало выбора подсистемы "Контактная информация"
// 
// Параметры:
// 	Элемент              - ПолеФормы - элемент формы, в котором произошло событие.
// 	ДанныеВыбора         - Структура - данные, используемые для выбора.
// 	СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки <> Неопределено
		И ДанныеСтроки.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента") Тогда
			ПараметрыОткрытия.Вставить("РазрешитьВводАдресаВСвободнойФорме", Ложь);
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

// Обработчик очистки контактной информации
// 
// Параметры:
// 	Элемент              - ПолеФормы - элемент формы, содержащей контактную информацию.
// 	СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

// Обработчик выполнения команды подсистемы "Контактная информация"
// 
// Параметры:
// 	Команда - КомандаФормы -выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события обработка выбора подсистемы "Контактная информация"
// 
// Параметры:
// 	Элемент              - ПолеФормы - элемент формы, в котором произошло событие.
// 	ВыбранноеЗначение    - Структура - выбранная контактная информация.
// 	СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЛокализации(Команда)
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ВыполнитьКомандуЛокализации(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыЛокализации(ИмяКоманды, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ПараметрыОбработки)
	
	ПартнерыИКонтрагентыЛокализация.ВыполнитьКомандуЛокализации(ЭтаФорма, ИмяКоманды, ПараметрыОбработки);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды



&НаКлиенте
Процедура ЗаполнитьПоЕГРПОУ(Команда)
	Подключаемый_ВыполнитьКомандуЛокализации(Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПартнерыИКонтрагентыЛокализация.УстановитьУсловноеОформлениеКонтрагент(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ПартнерыИКонтрагентыЛокализация.ПриЧтенииСозданииНаСервереКонтрагент(ЭтаФорма);
	
	ПравоИзмененияОбъекта = ПравоДоступа("Изменение", Метаданные.Справочники.Контрагенты);
	УпрощенныйВводДоступен = ПартнерыИКонтрагенты.УпрощенныйВводДоступен() ИЛИ ТолькоПросмотр;
	УстановитьЗаголовокФормы();
	
	Если Объект.ОбособленноеПодразделение Тогда
		ВидКонтрагента = "ОбособленноеПодразделение";
	ИначеЕсли ЗначениеЗаполнено(Объект.ЮрФизЛицо) Тогда
		ВидКонтрагента = ОбщегоНазначения.ИмяЗначенияПеречисления(Объект.ЮрФизЛицо);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		Если Объект.ОбособленноеПодразделение Тогда
			ТолькоПросмотр = Истина;
		Иначе
			Элементы.ВидКонтрагента.СписокВыбора.Удалить(Элементы.ВидКонтрагента.СписокВыбора.НайтиПоЗначению("ОбособленноеПодразделение"));
		КонецЕсли;
	КонецЕсли;
	
	УправлениеДоступностью(ЭтаФорма);
	НастроитьПанельНавигации();

КонецПроцедуры

&НаСервере
Процедура НастроитьПанельНавигации()

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьДанныеКонтрагентаФизическогоЛица", Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	
	ОбщегоНазначенияУТ.НастроитьФормуПоПараметрам(ЭтаФорма, СтруктураНастроек);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	Если Объект.Ссылка.Пустая() Тогда
		Заголовок = НСтр("ru='Контрагент (создание)';uk='Контрагент (створення)'");
	Иначе
		Заголовок = Объект.Наименование + " (" + НСтр("ru='Контрагент (юридическое или физическое лицо)';uk='Контрагент (юридична або фізична особа)'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКодаПоЕДРПОУ()
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		ЗаголовокКода  = НСтр("ru='Код по ЕДРПОУ';uk='Код за ЄДРПОУ'");
		ПодсказкаВвода = НСтр("ru='Введите код ЕДРПОУ 8 цифр';uk='Введіть код ЄДРПОУ 8 цифр'");
	Иначе
		ЗаголовокКода = НСтр("ru='Код по ДРФО';uk='Код за ДРФО'");
        ПодсказкаВвода = НСтр("ru='Введите код ДРФО 10 цифр';uk='Введіть код ДРФО 10 цифр'")
                         + Символы.ПС
                         + НСтр("ru='или серию и номер паспорта старого образца - 2 буквы и 6 цифр, без пробела между серией и номером';uk='або серію та номер паспорта старого зразка - 2 літери і 6 цифр, без пробілу між серією та номером'") 
                         + Символы.ПС
                         + НСтр("ru='или номер паспорта нового образца - 9 цифр.';uk='або номер паспорта нового зразка - 9 цифр.'") 
                         + Символы.ПС
                         ;
	КонецЕсли;
		
	Элементы.КодПоЕДРПОУ.Заголовок      = ЗаголовокКода;
	Элементы.КодПоЕДРПОУ.ПодсказкаВвода = ПодсказкаВвода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованию(Параметры)
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
		
		Если Параметры.Основание.Свойство("АдресЭППартнера") И ЗначениеЗаполнено(Параметры.Основание.АдресЭППартнера) Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Представление", Параметры.Основание.АдресЭППартнера);
			СтруктураДанных.Вставить("КонтактнаяИнформация", "");
			ПартнерыИКонтрагенты.ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
			                                                          ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтрагента"),
			                                                          СтруктураДанных);
		КонецЕсли;
		
		Если Параметры.Основание.Свойство("СокращенноеНаименование") И ЗначениеЗаполнено(Параметры.Основание.СокращенноеНаименование) Тогда
			Объект.НаименованиеПолное = Параметры.Основание.СокращенноеНаименование;
		КонецЕсли;
		
		Если Параметры.Основание.Свойство("ПредставлениеАдреса") И ЗначениеЗаполнено(Параметры.Основание.ПредставлениеАдреса) Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Представление", Параметры.Основание.ПредставлениеАдреса);
			СтруктураДанных.Вставить("КонтактнаяИнформация", "");
			Если Параметры.Основание.Свойство("Адрес") Тогда
				СтруктураДанных.Вставить("КонтактнаяИнформация", Параметры.Основание.Адрес);
			КонецЕсли;
			ПартнерыИКонтрагенты.ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
				                                                          ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
				                                                          СтруктураДанных);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	ПартнерыИКонтрагентыЛокализацияКлиентСервер.УправлениеЭлементамиЮридическихРеквизитов(Форма);
	ПартнерыИКонтрагентыЛокализацияКлиентСервер.УправлениеДоступностьюКонтрагент(Форма);
	
	ПартнерыИКонтрагентыЛокализацияКлиентСервер.ОбновитьСтрокиИсторииНаименований(Форма.Объект.ИсторияНаименований,
		Форма.ПереходКИсторииНаименования,
		Форма.ЦветГиперссылки);
	Форма.Элементы.НаименованиеСокращенное.ТолькоПросмотр = Форма.Объект.ИсторияНаименований.Количество() > 1;
	
	Форма.Элементы.Партнер.Видимость = НЕ ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь();
	
	Если Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент")
		И Форма.Объект.СтранаРегистрации = ПартнерыИКонтрагентыЛокализацияКлиентСервер.СтранаВеденияУчета() Тогда
		
		Форма.Объект.СтранаРегистрации = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораГоловногоКонтрагента()
	
	ПараметрыВыбораГоловногоКонтрагента = Новый Массив;
	Для Каждого ПараметрВыбора Из Элементы.ГоловнойКонтрагент.ПараметрыВыбора Цикл
		
		ПараметрыВыбораГоловногоКонтрагента.Добавить(ПараметрВыбора);
		
	КонецЦикла;
	
	ПараметрыВыбораГоловногоКонтрагента.Добавить(Новый ПараметрВыбора("ИсключаяКонтрагента", Объект.Ссылка));
	Элементы.ГоловнойКонтрагент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораГоловногоКонтрагента);
	
КонецПроцедуры

#Область ПериодическиеРеквизиты

&НаКлиенте
Процедура ИсторияНаименованийПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	ОчиститьСообщения();
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ИсторияНаименований") Тогда
		
		Модифицированность = Истина;
		НоваяИсторияНаименований = Результат.ИсторияНаименований;
		НоваяИсторияНаименований.Сортировать("Период");
	
		Объект.ИсторияНаименований.Очистить();
		Если НоваяИсторияНаименований.Количество() > 1 Тогда
			Для Каждого СтрокаИстории Из НоваяИсторияНаименований Цикл
				ЗаписьИстории = Объект.ИсторияНаименований.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, СтрокаИстории);
			КонецЦикла;
		КонецЕсли;
		
		НовоеТекущееНаименование = НоваяИсторияНаименований[НоваяИсторияНаименований.Количество()-1].НаименованиеПолное;
		
		Если НовоеТекущееНаименование <> Объект.НаименованиеПолное Тогда
			
			Объект.НаименованиеПолное = НовоеТекущееНаименование;
			
		КонецЕсли;
		
		УправлениеДоступностью(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства


#КонецОбласти

#Область Локализация

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом


//++ Локализация
&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
    
	РезультатВыполнения = Пактум_Сервер.ФоновоеЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		Пактум_Клиент.ВыполнитьЗаполнениеРеквизитовПоЕДРПОУ(ЭтаФорма, РезультатВыполнения.РеквизитыКонтрагента);
        Пактум_Клиент.РазблокироватьФорму(ЭтаФорма);
    Иначе
        Пактум_КоличествоПроверок_ФоновогоЗадания = Пактум_КоличествоПроверок_ФоновогоЗадания + 1;
		Если Пактум_КоличествоПроверок_ФоновогоЗадания >= 21 Тогда 	//3 мин + 30 сек
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
    		    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
    			    НСтр("ru='Заполнить карточку контрагента с ЕДРПОУ %1 не удалось.';uk='Заповнити картку контрагента за ЄДРПОУ %1 не вдалося.'"),
    			    Объект.КодПоЕДРПОУ
                ),
                , 
                "КодПоЕДРПОУ"
            );
			Пактум_Клиент.РазблокироватьФорму(ЭтаФорма);
		Иначе
    		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
    		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
        КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//-- Локализация



#КонецОбласти