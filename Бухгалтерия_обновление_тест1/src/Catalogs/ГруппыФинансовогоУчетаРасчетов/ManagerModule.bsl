#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция определяет группу финансового учета по умолчанию.
//
// Возвращает группу финансового учета, если найден один элемент справочника.
// Возвращает ПустуюСсылку в противном случае.
//
// Параметры:
//	ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта, в которой ведутся взаиморасчеты.
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации, Неопределено - хоз. операция.
//	ГФУПолучателя - Булево -
//
// Возвращаемое значение:
//	СправочникСсылка.ГруппыФинансовогоУчетаРасчетов - группа фин. учета по умолчанию.
//
Функция ПолучитьГруппуФинансовогоУчетаПоУмолчанию(ВалютаВзаиморасчетов, ХозяйственнаяОперация = Неопределено, ГФУПолучателя = Ложь) Экспорт
	
	РасчетыВВалюте = ВзаиморасчетыСервер.ВзаиморасчетыВВалюте(ВалютаВзаиморасчетов);
	
	СтруктураОтбора = Новый Структура("РасчетыВВалюте", РасчетыВВалюте);
	Если ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		СтруктураОтбора.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	КонецЕсли;
	Если ГФУПолучателя Тогда
		СтруктураОтбора.Вставить("ГФУПолучателя", Истина);
	КонецЕсли;
	
	ПреобразоватьОтборПараметровВыбора(СтруктураОтбора);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДанныеСправочника.Ссылка КАК ГруппаФинансовогоУчета
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаРасчетов КАК ДанныеСправочника
	|ГДЕ
	|	НЕ ДанныеСправочника.ПометкаУдаления
	|	И НЕ ДанныеСправочника.ЭтоГруппа
	|	И &ДопУсловияОтбора
	|");
	
	ДопУсловияОтбора = "ИСТИНА";
	ШаблонЭлементаОтбора = "И ДанныеСправочника.%1 = &%1";
	Для каждого ЭлементОтбора Из СтруктураОтбора Цикл
		ДопУсловияОтбора = ДопУсловияОтбора + Символы.ПС + Символы.Таб + СтрШаблон(ШаблонЭлементаОтбора, ЭлементОтбора.Ключ);
		Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловияОтбора", ДопУсловияОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		ГруппаФинансовогоУчета = Выборка.ГруппаФинансовогоУчета;
	Иначе
		ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ГруппаФинансовогоУчета;

КонецФункции

// Процедура преобразует отбор переданный в параметрах выбора в корректный отбор в рамках текущей ГФУ
//		Если передано соглашение или договор, то порядок оплаты берется из данных соответствующего значения;
//		Если передана хозяйственная операция, то по соответствию подбирается правильный тип расчетов для отбора.
//
//	Входные параметры:
//		Отбор - структура (см. Параметры.Отбор в обработке получения данных выбора).
//
Процедура ПреобразоватьОтборПараметровВыбора(Отбор) Экспорт
	
	#Область РасчетыВВалюте   
	Если Отбор.Свойство("РасчетыВВалюте") Тогда 
		Если  ТипЗнч(Отбор.РасчетыВВалюте) <> Тип("Булево") Тогда 
			Отбор.РасчетыВВалюте = ВзаиморасчетыСервер.ВзаиморасчетыВВалюте(Отбор.РасчетыВВалюте);
		КонецЕсли;  
	Иначе
		
		УсловияРасчетов = Неопределено;
		РасчетыВВалюте = Неопределено;
		Если Отбор.Свойство("Договор") И ЗначениеЗаполнено(Отбор.Договор) Тогда
			УсловияРасчетов = Отбор.Договор;
		ИначеЕсли Отбор.Свойство("Соглашение") И ЗначениеЗаполнено(Отбор.Соглашение) Тогда
			УсловияРасчетов = Отбор.Соглашение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УсловияРасчетов) Тогда
			ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УсловияРасчетов, "ВалютаВзаиморасчетов");
			РасчетыВВалюте = ВзаиморасчетыСервер.ВзаиморасчетыВВалюте(ВалютаВзаиморасчетов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РасчетыВВалюте) Тогда
			Отбор.Вставить("РасчетыВВалюте", РасчетыВВалюте);
		КонецЕсли;
	
	КонецЕсли;        
	Если Отбор.Свойство("РасчетыВВалюте") И ТипЗнч(Отбор.РасчетыВВалюте) <> Тип("Булево") Тогда
		Отбор.Удалить("РасчетыВВалюте");
	КонецЕсли;
	#КонецОбласти
	
	#Область Расчеты
	
	Если Отбор.Свойство("ХозяйственнаяОперация") И ЗначениеЗаполнено(Отбор.ХозяйственнаяОперация) Тогда
		
		Операции = Перечисления.ХозяйственныеОперации;
		СоответствиеХОиРасчетов = Новый Соответствие;
		
		// Для интеркомпани вид расчетов выбирается еще и в зависимости от того, это ГФУ получателя или поставщика.
		ГФУПолучателя = Отбор.Свойство("ГФУПолучателя") И Отбор.ГФУПолучателя;
		
		#Область ХозяйственныеОперацииПоставщиков
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУПоставщика, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУПоставщикаНеотфактурованнаяПоставка, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУПоставщикаРеглУчет, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУПоставщикаТоварыВПути, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУПоставщикаФактуровкаПоставки, "РасчетыСПоставщиками");
		
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаПоИмпорту, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаПоИмпортуТоварыВПути, "РасчетыСПоставщиками");
		
		
		СоответствиеХОиРасчетов.Вставить(Операции.ПроизводствоУПереработчика, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ПриемНаХранениеСПравомПродажи, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратТоваровПоставщику, "РасчетыСПоставщиками");
		#КонецОбласти
		
		#Область ХозяйственныеОперацииКлиентов
		СоответствиеХОиРасчетов.Вставить(Операции.РеализацияКлиенту, "РасчетыСКлиентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ПроизводствоИзДавальческогоСырья, "РасчетыСКлиентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратТоваровОтКлиента, "РасчетыСКлиентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратОтРозничногоПокупателя, "РасчетыСКлиентами");
		СоответствиеХОиРасчетов.Вставить(Операции.РеализацияБезПереходаПраваСобственности, "РасчетыСКлиентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ПередачаНаХранениеСПравомПродажи, "РасчетыСКлиентами");
		#КонецОбласти
		
		#Область ХозяйственныеОперацииПлатежей
		СоответствиеХОиРасчетов.Вставить(Операции.ПоступлениеОплатыОтКлиента, "РасчетыСКлиентами,РасчетыСКомиссионерами");
		СоответствиеХОиРасчетов.Вставить(Операции.ПоступлениеДенежныхСредствИзДругойОрганизации, "РасчетыСКлиентами,РасчетыСКомиссионерами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратДенежныхСредствОтПоставщика, "РасчетыСПоставщиками,РасчетыСКомитентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратДенежныхСредствОтДругойОрганизации, "РасчетыСПоставщиками,РасчетыСКомитентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ОплатаПоставщику, "РасчетыСПоставщиками,РасчетыСКомитентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ОплатаДенежныхСредствВДругуюОрганизацию, "РасчетыСПоставщиками,РасчетыСКомитентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратОплатыКлиенту, "РасчетыСКлиентами,РасчетыСКомиссионерами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратДенежныхСредствВДругуюОрганизацию, "РасчетыСКлиентами,РасчетыСКомиссионерами");
		СоответствиеХОиРасчетов.Вставить(Операции.ПеречислениеВБюджет, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ПеречислениеТаможне, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ПеречислениеНаДепозиты, "РасчетыСДебиторами");
		СоответствиеХОиРасчетов.Вставить(Операции.ОплатаПоКредитам, "РасчетыСКредиторами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВыдачаЗаймов, "РасчетыСКредиторами");
		#КонецОбласти
		
		#Область ХозяйственныеОперацииОстальные
		СоответствиеХОиРасчетов.Вставить(Операции.ПередачаНаКомиссию, "РасчетыСКомиссионерами");
		СоответствиеХОиРасчетов.Вставить(Операции.ПриемНаКомиссию, "РасчетыСКомитентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ОказаниеАгентскихУслуг, "РасчетыСКомитентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ПоставкаПодПринципала, "РасчетыСКомитентамиПоЗакупке");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратТоваровМеждуОрганизациями, ?(ГФУПолучателя, "РасчетыСПоставщиками", "РасчетыСКлиентами"));
		СоответствиеХОиРасчетов.Вставить(Операции.РеализацияТоваровВДругуюОрганизацию, ?(ГФУПолучателя, "РасчетыСПоставщиками", "РасчетыСКлиентами"));
		СоответствиеХОиРасчетов.Вставить(Операции.ПередачаНаКомиссиюВДругуюОрганизацию, ?(ГФУПолучателя, "РасчетыСКомитентами", "РасчетыСКомиссионерами"));
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУДругойОрганизации, ?(ГФУПолучателя, "РасчетыСПоставщиками", "РасчетыСКлиентами"));
		#КонецОбласти
		
		// Для договоров кредитов/депозитов и между организациями вместо ХО передаем характер или тип договора соответственно:
		СоответствиеХОиРасчетов.Вставить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм, "РасчетыСКредиторами");
		СоответствиеХОиРасчетов.Вставить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный, "РасчетыСДебиторами");
		СоответствиеХОиРасчетов.Вставить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Депозит, "РасчетыСДебиторами");
		СоответствиеХОиРасчетов.Вставить(Перечисления.ТипыДоговоровМеждуОрганизациями.КупляПродажа, ?(ГФУПолучателя, "РасчетыСПоставщиками", "РасчетыСКлиентами"));
		СоответствиеХОиРасчетов.Вставить(Перечисления.ТипыДоговоровМеждуОрганизациями.Комиссионный, ?(ГФУПолучателя, "РасчетыСКомитентами", "РасчетыСКомиссионерами"));
	
		ЗначениеРасчетов = СоответствиеХОиРасчетов.Получить(Отбор.ХозяйственнаяОперация);
		Если ЗначениеРасчетов <> Неопределено Тогда
			МассивВозможныхРасчетов = СтрРазделить(ЗначениеРасчетов, ",");
			Если МассивВозможныхРасчетов.Количество() = 1 Тогда
				Отбор.Вставить(МассивВозможныхРасчетов.Получить(0), Истина);
			Иначе
				Для каждого ВидРасчетов Из ВидыРасчетов() Цикл
					Если МассивВозможныхРасчетов.Найти(ВидРасчетов) = Неопределено Тогда
						Отбор.Вставить(ВидРасчетов, Ложь);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Отбор.Удалить("ХозяйственнаяОперация");
		
	КонецЕсли;
	
	Если Отбор.Свойство("ГФУПолучателя") Тогда
		Отбор.Удалить("ГФУПолучателя");
	КонецЕсли;
	
	#КонецОбласти
		
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

//++ НЕ УТ
// Заполняет реквизиты параметров настройки счетов учета расходов, которые влияют на настройку,
// 	соответствующими им именам реквизитов аналитики учета.
//
// Параметры:
// 	СоответствиеИмен - Соответствие - ключом выступает имя реквизита, используемое в настройке счетов учета,
// 		значением является соответствующее имя реквизита аналитики учета.
// 
Процедура ЗаполнитьСоответствиеРеквизитовНастройкиСчетовУчета(СоответствиеИмен) Экспорт
	
	СоответствиеИмен.РасчетыСКлиентами = "РасчетыСКлиентами";
	СоответствиеИмен.РасчетыСПоставщиками = "РасчетыСПоставщиками";
	СоответствиеИмен.РасчетыСКомиссионерами = "РасчетыСКомиссионерами";
	СоответствиеИмен.РасчетыСКомитентами = "РасчетыСКомитентами";
	СоответствиеИмен.РасчетыСКомитентамиПоЗакупке = "РасчетыСКомитентамиПоЗакупке";
	СоответствиеИмен.РасчетыСКредиторами = "РасчетыСКредиторами";
	СоответствиеИмен.РасчетыСДебиторами = "РасчетыСДебиторами";
	
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщегоНазначенияУТВызовСервера.ОбработкаПолученияДанныхВыбораГруппыФинансовогоУчетаРасчетов(ДанныеВыбора, Параметры, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ВидыРасчетов() Экспорт
	
	ВидыРасчетов = Новый Массив;
	ВидыРасчетов.Добавить("РасчетыСКлиентами");
	ВидыРасчетов.Добавить("РасчетыСПоставщиками");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		ВидыРасчетов.Добавить("РасчетыСКомиссионерами");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		ВидыРасчетов.Добавить("РасчетыСКомитентами");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОказаниеАгентскихУслугПриЗакупке") Тогда
		ВидыРасчетов.Добавить("РасчетыСКомитентамиПоЗакупке");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		ВидыРасчетов.Добавить("РасчетыСКредиторами");
		ВидыРасчетов.Добавить("РасчетыСДебиторами");
	КонецЕсли;
		
	Возврат ВидыРасчетов;
		
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0ede271e-6078-4750-b4d4-e10fb9b23d02");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ГруппыФинансовогоУчетаРасчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет в справочнике ""Группы настроек фин. учета расчетов"" новые реквизиты. 
                                   |Заполнение признака Расчеты в иностранной валюте.'
                                   |;uk='Заповнює у довіднику ""Групи настройок фін. обліку розрахунків"" нові реквізити.
                                   |Заповнення ознаки Розрахунки в іноземній валюті.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	Обработчик.ЧитаемыеОбъекты = Обработчик.ЧитаемыеОбъекты + ", "
	//++ НЕ УТ
		+ "Документ.ОтчетПереработчика,"
	//-- НЕ УТ
		+ "Документ.ЗаявкаНаВозвратТоваровОтКлиента,"
		+ "Документ.ЗаказКлиента,"
		+ "Документ.ВыкупВозвратнойТарыУПоставщика,"
		+ "Справочник.ДоговорыМеждуОрганизациями,"
		+ "Документ.РеализацияУслугПрочихАктивов,"
		+ "Документ.ОтчетКомиссионера,"
	//++ НЕ УТ
	//-- НЕ УТ
		+ "Документ.ПриобретениеУслугПрочихАктивов,"
		+ "Документ.ВыкупВозвратнойТарыКлиентом,"
	//++ НЕ УТ
		+ "Документ.ПередачаСырьяПереработчику,"
	//-- НЕ УТ
	//++ НЕ УТ
		+ "Документ.ВозвратСырьяОтПереработчика,"
	//-- НЕ УТ
		+ "Справочник.ДоговорыКредитовИДепозитов,"
	//++ НЕ УТ
		+ "Документ.ЗаказПереработчику,"
	//-- НЕ УТ
	//++ НЕ УТ
	//-- НЕ УТ
	//++ НЕ УТ
	//-- НЕ УТ
		+ "Константа.ВалютаРегламентированногоУчета,"
		+ "Справочник.ДоговорыКонтрагентов,"
		+ "Справочник.СоглашенияСКлиентами,"
		+ "Справочник.СоглашенияСПоставщиками,"
		+ "Документ.ВозвратТоваровОтКлиента,"
		+ "Документ.ВозвратТоваровПоставщику,"
		+ "Документ.ЗаказПоставщику,"
		+ "Документ.ОтчетКомиссионераОСписании,"
		+ "Документ.РеализацияТоваровУслуг,"
		+ "Документ.ОтчетКомитенту,"
		+ "Документ.ОтчетКомитентуОСписании,"
	//++ Локализация
	//++ НЕ УТ
		+ "Документ.ПоступлениеДенежныхДокументов,"
	//-- НЕ УТ
	//-- Локализация
		+ "Документ.ОтчетПоКомиссииМеждуОрганизациями,"
		+ "Документ.ПередачаТоваровМеждуОрганизациями,"
		+ "Документ.ПриобретениеТоваровУслуг,"
		+ "Документ.ВозвратТоваровМеждуОрганизациями,"
		+ "Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании,"
	//++ Локализация
		+ "Документ.ТаможеннаяДекларацияИмпорт,"
	//-- Локализация
		+ "Документ.АктВыполненныхРабот,"
	//++ НЕ УТ
	//-- НЕ УТ
	//++ Локализация
	//++ НЕ УТ
		+ "Документ.ВыбытиеДенежныхДокументов"
	//-- НЕ УТ
	//-- Локализация
	;
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- Локализация
	
	//++ НЕ УТ
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаСырьяПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СоглашенияСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитенту.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
	//++ НЕ УТ
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратСырьяОтПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияУслугПрочихАктивов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеУслугПрочихАктивов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	
	//++ НЕ УТ
	//-- НЕ УТ
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыбытиеДенежныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеДенежныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	//-- НЕ УТ                      
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.СоздатьРегистраторыГрафикаДвиженияТоваровПоДоговорам";
	НоваяСтрока.Порядок = "После";       
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКредитовИДепозитов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";      
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СоглашенияСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";      
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СоглашенияСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию2";
	НоваяСтрока.Порядок = "После";      

КонецПроцедуры

// Регистрирует элементы справочника к обновлению
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки; // см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ГруппыФинансовогоУчетаРасчетов";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыФинансовогоУчетаРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаРасчетов КАК ГруппыФинансовогоУчетаРасчетов
	|ГДЕ
	|	ГруппыФинансовогоУчетаРасчетов.УдалитьПорядокОплаты <> ЗНАЧЕНИЕ(Перечисление.УдалитьПорядокОплатыПоСоглашениям.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыФинансовогоУчетаРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаРасчетов КАК ГруппыФинансовогоУчетаРасчетов
	|ГДЕ
	|	ГруппыФинансовогоУчетаРасчетов.ПометкаУдаления = ЛОЖЬ
	|	И ГруппыФинансовогоУчетаРасчетов.РасчетыСКлиентами = ЛОЖЬ
	|	И ГруппыФинансовогоУчетаРасчетов.РасчетыСПоставщиками = ЛОЖЬ
	|	И ГруппыФинансовогоУчетаРасчетов.РасчетыСКомиссионерами = ЛОЖЬ
	|	И ГруппыФинансовогоУчетаРасчетов.РасчетыСКомитентами = ЛОЖЬ
	|	И ГруппыФинансовогоУчетаРасчетов.РасчетыСКредиторами = ЛОЖЬ
	|	И ГруппыФинансовогоУчетаРасчетов.РасчетыСДебиторами = ЛОЖЬ
	|");
	
	ГруппыФинансовогоУчетаРасчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ГруппыФинансовогоУчетаРасчетов);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта        = "Справочник.ГруппыФинансовогоУчетаРасчетов";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры); // Массив из СправочникСсылка
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	ОбновляемыеДанные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбновляемыеДанные
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|;
	|//////////////////////////////////////////////////////////////////////////////// 
	|ВЫБРАТЬ 
	|	ГруппыФинансовогоУчетаРасчетов.ВерсияДанных КАК ВерсияДанных,
	|	ОбновляемыеДанные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОбъектыДляОбработки
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыФинансовогоУчетаРасчетов КАК ГруппыФинансовогоУчетаРасчетов
	|			ПО ОбновляемыеДанные.Ссылка = ГруппыФинансовогоУчетаРасчетов.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|		ИЛИ ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СДавальцем) КАК РасчетыСКлиентами,
	|	ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком)
	|		ИЛИ ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Импорт)
	|		ИЛИ ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПереработчиком) КАК РасчетыСПоставщиками,
	|	ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомиссионером) КАК РасчетыСКомиссионерами,
	|	ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомитентом) КАК РасчетыСКомитентами,
	|	ЛОЖЬ КАК РасчетыСКредиторами,
	|	ЛОЖЬ КАК РасчетыСДебиторами,
	|	ЛОЖЬ КАК Кредит,
	|	ЛОЖЬ КАК Займ,
	|	ЛОЖЬ КАК Краткосрочный,
	|	ЛОЖЬ КАК Долгосрочный,
	|	ЛОЖЬ КАК РегламентированнаяВалюта,
	|	ЛОЖЬ КАК ВалютныйДоговор,
	|	ЛОЖЬ КАК Депозит,
	|	ЛОЖЬ КАК ЗаймВыданный
	|ПОМЕСТИТЬ ГФУ
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ДоговорыКонтрагентов.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКредитовИДепозитов.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм),
	|	ДоговорыКредитовИДепозитов.ХарактерДоговора <> ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм),
	|	ДоговорыКредитовИДепозитов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке) И ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм),
	|	ДоговорыКредитовИДепозитов.ТипДоговора <> ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке) И ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм),
	|	ДоговорыКредитовИДепозитов.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный),
	|	ДоговорыКредитовИДепозитов.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный),
	|	ДоговорыКредитовИДепозитов.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета,
	|	ДоговорыКредитовИДепозитов.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета,
	|	ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит),
	|	ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный)
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ДоговорыКредитовИДепозитов.ГруппаФинансовогоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО ИСТИНА
	|
	|ГДЕ
	|	НЕ ДоговорыКредитовИДепозитов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыМеждуОрганизациями.ГруппаФинансовогоУчета,
	|	ДоговорыМеждуОрганизациями.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровМеждуОрганизациями.КупляПродажа),
	|	ДоговорыМеждуОрганизациями.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровМеждуОрганизациями.КупляПродажа),
	|	ДоговорыМеждуОрганизациями.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровМеждуОрганизациями.Комиссионный),
	|	ДоговорыМеждуОрганизациями.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровМеждуОрганизациями.Комиссионный),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ДоговорыМеждуОрганизациями.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ДоговорыМеждуОрганизациями.ПометкаУдаления
	|	И ДоговорыМеждуОрганизациями.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияСКлиентами.ГруппаФинансовогоУчета,
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
	|	ЛОЖЬ,
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = СоглашенияСКлиентами.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияСПоставщиками.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	СоглашенияСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|		ИЛИ СоглашенияСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|	ЛОЖЬ,
	|	СоглашенияСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг)
	|		ИЛИ СоглашенияСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = СоглашенияСПоставщиками.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктВыполненныхРабот.ГруппаФинансовогоУчета,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = АктВыполненныхРабот.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ АктВыполненныхРабот.ПометкаУдаления
	|	И АктВыполненныхРабот.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратСырьяОтПереработчика.ГруппаФинансовогоУчета,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВозвратСырьяОтПереработчика КАК ВозвратСырьяОтПереработчика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ВозвратСырьяОтПереработчика.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ВозвратСырьяОтПереработчика.ПометкаУдаления
	|
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровМеждуОрганизациями.ГруппаФинансовогоУчета,
	|	ВозвратТоваровМеждуОрганизациями.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями),
	|	ВозвратТоваровМеждуОрганизациями.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ВозвратТоваровМеждуОрганизациями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ВозвратТоваровМеждуОрганизациями.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ВозвратТоваровМеждуОрганизациями.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровОтКлиента.ГруппаФинансовогоУчета,
	|	ВозвратТоваровОтКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
	|		ИЛИ ВозвратТоваровОтКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ВозвратТоваровОтКлиента.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ВозвратТоваровОтКлиента.ПометкаУдаления
	|	И ВозвратТоваровОтКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровПоставщику.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ВозвратТоваровПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ВозвратТоваровПоставщику.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ВозвратТоваровПоставщику.ПометкаУдаления
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыбытиеДенежныхДокументов.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВыбытиеДенежныхДокументов КАК ВыбытиеДенежныхДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ВыбытиеДенежныхДокументов.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ВыбытиеДенежныхДокументов.ПометкаУдаления
	|	И ВыбытиеДенежныхДокументов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыкупВозвратнойТарыКлиентом.ГруппаФинансовогоУчета,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом КАК ВыкупВозвратнойТарыКлиентом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ВыкупВозвратнойТарыКлиентом.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ВыкупВозвратнойТарыКлиентом.ПометкаУдаления
	|	И ВыкупВозвратнойТарыКлиентом.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыкупВозвратнойТарыУПоставщика.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыУПоставщика КАК ВыкупВозвратнойТарыУПоставщика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ВыкупВозвратнойТарыУПоставщика.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ВыкупВозвратнойТарыУПоставщика.ПометкаУдаления
	|	И ВыкупВозвратнойТарыУПоставщика.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказКлиента.ГруппаФинансовогоУчета,
	|	ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		ИЛИ ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ЗаказКлиента.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ЗаказКлиента.ПометкаУдаления
	|	И ЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПереработчику.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ЗаказПереработчику.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ЗаказПереработчику.ПометкаУдаления
	|	И ЗаказПереработчику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщику.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ЗаказПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|		ИЛИ ЗаказПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ЗаказПоставщику.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ЗаказПоставщику.ПометкаУдаления
	|	И ЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаВозвратТоваровОтКлиента.ГруппаФинансовогоУчета,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ЗаявкаНаВозвратТоваровОтКлиента.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ЗаявкаНаВозвратТоваровОтКлиента.ПометкаУдаления
	|	И ЗаявкаНаВозвратТоваровОтКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетКомиссионера.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ОтчетКомиссионера.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ОтчетКомиссионера.ПометкаУдаления
	|	И ОтчетКомиссионера.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетКомиссионераОСписании.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ОтчетКомиссионераОСписании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ОтчетКомиссионераОСписании.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ОтчетКомиссионераОСписании.ПометкаУдаления
	|	И ОтчетКомиссионераОСписании.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетКомитенту.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ОтчетКомитенту.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ОтчетКомитенту.ПометкаУдаления
	|	И ОтчетКомитенту.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетКомитентуОСписании.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ОтчетКомитентуОСписании.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ОтчетКомитентуОСписании.ПометкаУдаления
	|	И ОтчетКомитентуОСписании.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетПереработчика.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ОтчетПереработчика КАК ОтчетПереработчика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ОтчетПереработчика.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ОтчетПереработчика.ПометкаУдаления
	|	И ОтчетПереработчика.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетПоКомиссииМеждуОрганизациями.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ОтчетПоКомиссииМеждуОрганизациями.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ОтчетПоКомиссииМеждуОрганизациями.ПометкаУдаления
	|	И ОтчетПоКомиссииМеждуОрганизациями.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетПоКомиссииМеждуОрганизациямиОСписании.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании КАК ОтчетПоКомиссииМеждуОрганизациямиОСписании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ОтчетПоКомиссииМеждуОрганизациямиОСписании.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ОтчетПоКомиссииМеждуОрганизациямиОСписании.ПометкаУдаления
	|	И ОтчетПоКомиссииМеждуОрганизациямиОСписании.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПередачаСырьяПереработчику.ГруппаФинансовогоУчета,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПередачаСырьяПереработчику КАК ПередачаСырьяПереработчику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ПередачаСырьяПереработчику.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ПередачаСырьяПереработчику.ПометкаУдаления
	|
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПередачаТоваровМеждуОрганизациями.ГруппаФинансовогоУчета,
	|	ПередачаТоваровМеждуОрганизациями.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию),
	|	ПередачаТоваровМеждуОрганизациями.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ПередачаТоваровМеждуОрганизациями.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ПередачаТоваровМеждуОрганизациями.ПометкаУдаления
	|	И ПередачаТоваровМеждуОрганизациями.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеДенежныхДокументов.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ПоступлениеДенежныхДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ПоступлениеДенежныхДокументов.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ПоступлениеДенежныхДокументов.ПометкаУдаления
	|	И ПоступлениеДенежныхДокументов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриобретениеТоваровУслуг.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ПриобретениеТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|		ИЛИ ПриобретениеТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ПриобретениеТоваровУслуг.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ПриобретениеТоваровУслуг.ПометкаУдаления
	|	И ПриобретениеТоваровУслуг.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриобретениеУслугПрочихАктивов.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ПриобретениеУслугПрочихАктивов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ПриобретениеУслугПрочихАктивов.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ПриобретениеУслугПрочихАктивов.ПометкаУдаления
	|	И ПриобретениеУслугПрочихАктивов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.ГруппаФинансовогоУчета,
	|	РеализацияТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		ИЛИ РеализацияТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = РеализацияТоваровУслуг.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И РеализацияТоваровУслуг.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияУслугПрочихАктивов.ГруппаФинансовогоУчета,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК РеализацияУслугПрочихАктивов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = РеализацияУслугПрочихАктивов.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ РеализацияУслугПрочихАктивов.ПометкаУдаления
	|	И РеализацияУслугПрочихАктивов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаможеннаяДекларацияИмпорт.ГруппаФинансовогоУчета,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ПО (ОбъектыДляОбработки.Ссылка = ТаможеннаяДекларацияИмпорт.ГруппаФинансовогоУчета)
	|ГДЕ
	|	НЕ ТаможеннаяДекларацияИмпорт.ПометкаУдаления
	|	И ТаможеннаяДекларацияИмпорт.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка КАК Ссылка,
	|	ОбъектыДляОбработки.ВерсияДанных КАК ВерсияДанных,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.РасчетыСКлиентами, ИСТИНА)) КАК РасчетыСКлиентами,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.РасчетыСПоставщиками, ЛОЖЬ)) КАК РасчетыСПоставщиками,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.РасчетыСКомиссионерами, ЛОЖЬ)) КАК РасчетыСКомиссионерами,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.РасчетыСКомитентами, ЛОЖЬ)) КАК РасчетыСКомитентами,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.РасчетыСКредиторами, ЛОЖЬ)) КАК РасчетыСКредиторами,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.РасчетыСДебиторами, ЛОЖЬ)) КАК РасчетыСДебиторами,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.Кредит, ЛОЖЬ)) КАК Кредит,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.Займ, ЛОЖЬ)) КАК Займ,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.Краткосрочный, ЛОЖЬ)) КАК Краткосрочный,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.Долгосрочный, ЛОЖЬ)) КАК Долгосрочный,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.РегламентированнаяВалюта, ЛОЖЬ)) КАК РегламентированнаяВалюта,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.ВалютныйДоговор, ЛОЖЬ)) КАК ВалютныйДоговор,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.Депозит, ЛОЖЬ)) КАК Депозит,
	|	МАКСИМУМ(ЕСТЬNULL(ГФУ.ЗаймВыданный, ЛОЖЬ)) КАК ЗаймВыданный
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГФУ КАК ГФУ
	|		ПО (ОбъектыДляОбработки.Ссылка = ГФУ.ГруппаФинансовогоУчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыДляОбработки.Ссылка,
	|	ОбъектыДляОбработки.ВерсияДанных";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если ЗначениеЗаполнено(СправочникОбъект.УдалитьПорядокОплаты) Тогда
					СправочникОбъект.РасчетыВВалюте = (СправочникОбъект.УдалитьПорядокОплаты = Перечисления.УдалитьПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте
													ИЛИ СправочникОбъект.УдалитьПорядокОплаты = Перечисления.УдалитьПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах);
					СправочникОбъект.УдалитьПорядокОплаты = Неопределено;
					ОбъектИзменен = Истина;
			КонецЕсли;
				
			Если Не СправочникОбъект.РасчетыСКлиентами И Не СправочникОбъект.РасчетыСПоставщиками И Не СправочникОбъект.РасчетыСКомиссионерами
				И Не СправочникОбъект.РасчетыСКомитентами И Не СправочникОбъект.РасчетыСКредиторами И Не СправочникОбъект.РасчетыСДебиторами Тогда
				ЗаполнитьЗначенияСвойств(СправочникОбъект, Выборка,, "Ссылка, ВерсияДанных");
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

//++ НЕ УТ 
// Выполняет первоначальное заполнение справочника
//
Процедура СоздатьГруппыФинансовогоУчетаПоУмолчанию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаРасчетов КАК ГруппыФинансовогоУчета");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ЯзыкИБ = МультиязычностьУкр.КодЯзыкаИнформационнойБазы();
		
		Отказ = Ложь;
		
		ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.СоздатьЭлемент();
		ГруппаФинансовогоУчета.Наименование = НСтр("ru='Расчеты с покупателями в национальной валюте';uk='Розрахунки з покупцями у національній валюті'",ЯзыкИБ);
		ГруппаФинансовогоУчета.Описание = НСтр("ru='Заполнение по умолчанию';uk='Заповнення по умовчанню'",ЯзыкИБ);
		ГруппаФинансовогоУчета.РасчетыСКлиентами = Истина;
		ГруппаФинансовогоУчета.РасчетыВВалюте = Ложь;
		
		ГруппаФинансовогоУчета.Записать();
		
		СтруктураСчетовУчета = Новый Структура;
		СтруктураСчетовУчета.Вставить("СчетУчета_АвансыПолученные", ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВНациональнойВалюте);
		СтруктураСчетовУчета.Вставить("СчетУчета_РасчетыСКлиентами", ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПокупателями);
		СтруктураСчетовУчета.Вставить("СчетУчета_РасчетыСКлиентамиТара", ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПокупателями);
		
		СтруктураИзмерений = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
		СтруктураИзмерений.АналитикаУчета = ГруппаФинансовогоУчета.Ссылка;
		РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СохранитьЗначенияСчетовУчета(СтруктураИзмерений, СтруктураСчетовУчета, Отказ);
		
		ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.СоздатьЭлемент();
		ГруппаФинансовогоУчета.Наименование = НСтр("ru='Расчеты с покупателями в иностранной валюте';uk='Розрахунки з покупцями в іноземній валюті'",ЯзыкИБ);
		ГруппаФинансовогоУчета.Описание = НСтр("ru='Заполнение по умолчанию';uk='Заповнення по умовчанню'",ЯзыкИБ);
		ГруппаФинансовогоУчета.РасчетыСКлиентами = Истина;
		ГруппаФинансовогоУчета.РасчетыВВалюте = Истина;
		
		ГруппаФинансовогоУчета.Записать();
		
		СтруктураСчетовУчета = Новый Структура;
		СтруктураСчетовУчета.Вставить("СчетУчета_АвансыПолученные", ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВИностраннойВалюте);
		СтруктураСчетовУчета.Вставить("СчетУчета_РасчетыСКлиентами", ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПокупателями);
		СтруктураСчетовУчета.Вставить("СчетУчета_РасчетыСКлиентамиТара", ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПокупателями);
		
		СтруктураИзмерений = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
		СтруктураИзмерений.АналитикаУчета = ГруппаФинансовогоУчета.Ссылка;
		РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СохранитьЗначенияСчетовУчета(СтруктураИзмерений, СтруктураСчетовУчета, Отказ);
		
		ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.СоздатьЭлемент();
		ГруппаФинансовогоУчета.Наименование = НСтр("ru='Расчеты с поставщиками в национальной валюте';uk='Розрахунки з постачальниками у національній валюті'",ЯзыкИБ);
		ГруппаФинансовогоУчета.Описание = НСтр("ru='Заполнение по умолчанию';uk='Заповнення по умовчанню'",ЯзыкИБ);
		ГруппаФинансовогоУчета.РасчетыСПоставщиками = Истина;
		ГруппаФинансовогоУчета.РасчетыВВалюте = Ложь;
		
		ГруппаФинансовогоУчета.Записать();
		
		СтруктураСчетовУчета = Новый Структура;
		СтруктураСчетовУчета.Вставить("СчетУчета_АвансыВыданные", ПланыСчетов.Хозрасчетный.РасчетыПоВыданнымАвансамВНациональнойВалюте);
		СтруктураСчетовУчета.Вставить("СчетУчета_РасчетыСПоставщиками", ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками);
		СтруктураСчетовУчета.Вставить("СчетУчета_РасчетыСПоставщикамиТара", ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками);
		
		СтруктураИзмерений = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
		СтруктураИзмерений.АналитикаУчета = ГруппаФинансовогоУчета.Ссылка;
		РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СохранитьЗначенияСчетовУчета(СтруктураИзмерений, СтруктураСчетовУчета, Отказ);
		
		ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.СоздатьЭлемент();
		ГруппаФинансовогоУчета.Наименование = НСтр("ru='Расчеты с поставщиками в иностранной валюте';uk='Розрахунки із постачальниками в іноземній валюті'",ЯзыкИБ);
		ГруппаФинансовогоУчета.Описание = НСтр("ru='Заполнение по умолчанию';uk='Заповнення по умовчанню'",ЯзыкИБ);
		ГруппаФинансовогоУчета.РасчетыСПоставщиками = Истина;
		ГруппаФинансовогоУчета.РасчетыВВалюте = Истина;
		
		ГруппаФинансовогоУчета.Записать();
		
		СтруктураСчетовУчета = Новый Структура;
		СтруктураСчетовУчета.Вставить("СчетУчета_АвансыВыданные", ПланыСчетов.Хозрасчетный.РасчетыПоВыданнымАвансамВИностраннойВалюте);
		СтруктураСчетовУчета.Вставить("СчетУчета_РасчетыСПоставщиками", ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПоставщиками);
		СтруктураСчетовУчета.Вставить("СчетУчета_РасчетыСПоставщикамиТара", ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПоставщиками);
		
		СтруктураИзмерений = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
		СтруктураИзмерений.АналитикаУчета = ГруппаФинансовогоУчета.Ссылка;
		РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СохранитьЗначенияСчетовУчета(СтруктураИзмерений, СтруктураСчетовУчета, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ 

#КонецОбласти

#КонецОбласти

#КонецЕсли
