#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	Возврат РаботаСФайлами.РеквизитыРедактируемыеВГрупповойОбработке();
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(ВладелецФайла)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(ВладелецФайла)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ЭкземплярБюджетаПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ЭкземплярБюджетаПрисоединенныеФайлы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1ece55ca-5096-4609-abe3-f787961a0e33");
	Обработчик.ПроцедураПроверки = "Справочники.ЭкземплярБюджетаПрисоединенныеФайлы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЭкземплярБюджета,"
		+ "Справочник.ЭкземплярБюджетаПрисоединенныеФайлы";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ЭкземплярБюджетаПрисоединенныеФайлы";
	Обработчик.БлокируемыеОбъекты = "Документ.ЭкземплярБюджета,"
		+ "Справочник.ЭкземплярБюджетаПрисоединенныеФайлы";
	Обработчик.Комментарий = НСтр("ru='Удаляет служебные присоединенные файлы, для очистки кэша Экземпляров бюджета.';uk='Вилучає службові приєднані файли, щоб очистити кеш Екземплярів бюджету.'");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры

// Обработчик обновления КА.
// Удаляем служебные присоединенные файлы, для очистки кэша Экземпляров бюджета.
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭкземплярБюджетаПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭкземплярБюджетаПрисоединенныеФайлы КАК ЭкземплярБюджетаПрисоединенныеФайлы
	|		ПО ЭкземплярБюджета.Ссылка = ЭкземплярБюджетаПрисоединенныеФайлы.ВладелецФайла
	|			И (ЭкземплярБюджетаПрисоединенныеФайлы.ТипСлужебногоФайла <> ЗНАЧЕНИЕ(Перечисление.ТипыСлужебныхФайловЭкземпляраБюджета.ПустаяСсылка))";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеМассив = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
				
		ДанныеМассив.Добавить(Выборка.Ссылка);

	КонецЦикла;
		
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеМассив);
		
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ЭкземплярБюджетаПрисоединенныеФайлы";
		
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);	
	
	Пока Выборка.Следующий() Цикл
		Попытка	
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СпрОбъект);
			СпрОбъект.Удалить();
						
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать: %Элемент% по причине: %Причина%';uk='Не вдалося обробити: %Элемент% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Элемент%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.Справочники.ЭкземплярБюджетаПрисоединенныеФайлы, Выборка.Ссылка, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Если Не МетаданныеИОтбор.МетаданныеОбъекта = Метаданные.Документы.ЭкземплярБюджета Тогда
		Возврат ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор);
	КонецЕсли;
	
	Если МетаданныеИОтбор.ЭтоНовый Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭкземплярБюджетаПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭкземплярБюджетаПрисоединенныеФайлы КАК ЭкземплярБюджетаПрисоединенныеФайлы
	|		ПО ЭкземплярБюджета.Ссылка = ЭкземплярБюджетаПрисоединенныеФайлы.ВладелецФайла
	|			И (ЭкземплярБюджетаПрисоединенныеФайлы.ТипСлужебногоФайла <> ЗНАЧЕНИЕ(Перечисление.ТипыСлужебныхФайловЭкземпляраБюджета.ПустаяСсылка))
	|ГДЕ
	|	ЭкземплярБюджета.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", МетаданныеИОтбор.Данные);

	Выборка = Запрос.Выполнить().Выбрать();
	
	МожноЧитатьИМенять = Истина;
	
	Пока Выборка.Следующий() Цикл
		МожноЧитатьИМенять = ОбновлениеИнформационнойБазы.МожноЧитатьИМенять(Неопределено, Выборка.Ссылка);
		Если Не МожноЧитатьИМенять Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МожноЧитатьИМенять;
		
КонецФункции

#КонецОбласти


#КонецЕсли
