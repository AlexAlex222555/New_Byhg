#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Получает реквизиты объекта, которые необходимо блокировать от изменения
//
// Возвращаемое значение:
//	Массив - блокируемые реквизиты объекта.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	Результат.Добавить("ТипПлана");
	Результат.Добавить("ЗаполнятьПодразделение");
	Результат.Добавить("ЗаполнятьПартнераВТЧ");
	Результат.Добавить("ЗаполнятьСоглашениеВТЧ");
	Результат.Добавить("ЗаполнятьНазначениеВТЧ");
	Результат.Добавить("ЗаполнятьСкладВТЧ; ВариантЗаполненияСкладФорматМагазина");
	Результат.Добавить("ЗаполнятьПартнера; ЗаполнятьПартнера,ЗаполнятьПартнераПродажи,ЗаполнятьПартнераЗакупки");
	Результат.Добавить("ЗаполнятьСклад; ВариантЗаполненияСкладФорматМагазина, ЗаполнятьСклад,ЗаполнятьСкладВТЧ");
	Результат.Добавить("ЗаполнятьСоглашение;ЗаполнятьСоглашение,ЗаполнятьСоглашениеВТЧПродажи,ЗаполнятьСоглашениеВТЧЗакупки");
	Результат.Добавить("ЗаполнятьПланОплат");
	Результат.Добавить("ЗаполнятьПоФормуле; ЗаполнятьПоФормуле");
	Результат.Добавить("Замещающий; Замещающий");
	Результат.Добавить("ЗаполнятьМенеджера");
	Результат.Добавить("ЗаполнятьФорматМагазина; ВариантЗаполненияСкладФорматМагазина");
	Результат.Добавить("ХозяйственнаяОперация");
	Результат.Добавить("Родитель");
	Результат.Добавить("ЗаполнятьПоДефициту; ЗаполнятьПоДефициту");
	Результат.Добавить("ВариантЗаполненияСостава; ВариантЗаполненияСостава, ВариантЗаполненияСоставаПоОтбору, ВариантЗаполненияСоставаБезОтборов, ДекорацияВариантЗаполненияСоставаОтбор");
	Результат.Добавить("Ответственный");
	
	//++ НЕ УТ
	Результат.Добавить("ОтражаетсяВБюджетировании");
	Результат.Добавить("СтатьяБюджетов");
	Результат.Добавить("ОтражаетсяВБюджетированииОплаты");
	Результат.Добавить("СтатьяБюджетовОплат");
	Результат.Добавить("ОтражаетсяВБюджетированииОплатыКредит");
	Результат.Добавить("СтатьяБюджетовОплатКредит");
	Результат.Добавить("ПланироватьПолуфабрикатыАвтоматически; ПланироватьПолуфабрикатыАвтоматически");
	Результат.Добавить("ТипПроизводственногоПроцесса");
	//-- НЕ УТ
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыПланов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fbe61594-b63e-4dcc-ac19-910995d6e32c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыПланов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет реквизит ""Тип производственного процесса"" значением по умолчанию ""изготовление, сборка, выполнение работ"" и реквизит ""Количество периодов"" значением 1, если оно было не заполнено. Снимает признак детализации по ""Подразделению диспетчеру"" в КА. Заполнение реквизита ХозяйственнаяОперация с типом ПеречислениеСсылка.ХозяйственныеОперации и разделение видов планов на сборку/разборку если для вида плана есть планы сборки и разборки.';uk='Заповнює реквізит ""Тип виробничого процесу"" значенням по умовчанню ""виготовлення, збирання, виконання робіт"" та реквізит ""Кількість періодів"" значенням 1, якщо воно було не заповнене. Знімає ознаку деталізації по ""Підрозділу диспетчеру"" у КА. Заповнення реквізиту ХозяйственнаяОперация з типом ПеречислениеСсылка.ХозяйственныеОперации та поділ видів планів на збирання/розбирання якщо для плану є плани збирання та розбирання.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПланыСборкиРазборки.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыПланов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ВидыПланов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ВидыПланов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыСборкиРазборки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//-- НЕ УТ

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыПланов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыПланов КАК ВидыПланов,
		|	Константа.КомплекснаяАвтоматизация КАК КомплекснаяАвтоматизация
		|ГДЕ
		|	(ВидыПланов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
		|		И ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланСборкиРазборки)
		|	)	
		|   ИЛИ ВидыПланов.КоличествоПериодов = 0
		//++ НЕ УТ
		|	ИЛИ (ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПроизводства)
		|		И ВидыПланов.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.ПустаяСсылка)
		|	) 
		|	ИЛИ (ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПроизводства)
		|		И ВидыПланов.ЗаполнятьПодразделение И КомплекснаяАвтоматизация.Значение
		|	)
		//-- НЕ УТ
		|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ВидыПланов";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	КомплекснаяАвтоматизация = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОбработке.Ссылка КАК Ссылка,
	|	КОбработке.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВидыПлановКОбработке
	|ИЗ
	|	ВТСсылкиДляОбработки КАК КОбработке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПланСборкиРазборки.ХозяйственнаяОперация) КАК КоличествоОпераций,
	|	ВидыПлановКОбработке.Ссылка КАК Ссылка,
	|	ВидыПлановКОбработке.ВерсияДанных КАК ВерсияДанных,
	|	МАКСИМУМ(ЕСТЬNULL(ПланСборкиРазборки.ХозяйственнаяОперация, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров))) КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВидыПлановКРазделению
	|ИЗ
	|	ВидыПлановКОбработке КАК ВидыПлановКОбработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланСборкиРазборки КАК ПланСборкиРазборки
	|		ПО ПланСборкиРазборки.ВидПлана = ВидыПлановКОбработке.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыПлановКОбработке.Ссылка,
	|	ВидыПлановКОбработке.ВерсияДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыПлановКРазделению.Ссылка КАК Ссылка,
	|	ВидыПлановКРазделению.ВерсияДанных КАК ВерсияДанных,
	|	ВидыПлановКРазделению.КоличествоОпераций КАК КоличествоОпераций,
	|	ВидыПлановКРазделению.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	ВидыПлановКРазделению КАК ВидыПлановКРазделению";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСсылкиДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			
			Если Объект <> Неопределено Тогда

				ОбъектИзменен = Ложь;
			
				Если Объект.ХозяйственнаяОперация.Пустая() И Объект.ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки Тогда
					
					Если Выборка.КоличествоОпераций = 2 Тогда
						НовыйВидПлана = Объект.Скопировать(); // СправочникОбъект.ВидыПланов - 
						НовыйВидПлана.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров;
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйВидПлана);
						
						Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
						Объект.УдалитьВидПланаНовый = НовыйВидПлана.Ссылка;
						ОбъектИзменен = Истина;
					Иначе
						Объект.ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
						ОбъектИзменен = Истина;
					КонецЕсли;
					
					Если ОбъектИзменен Тогда
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
					Иначе
						ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
					КонецЕсли;
					
				Иначе
					//++ НЕ УТ
					Если Объект.ТипПлана = Перечисления.ТипыПланов.ПланПроизводства
						И Объект.ТипПроизводственногоПроцесса.Пустая() Тогда
						
						Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка;
						ОбъектИзменен = Истина;
						
					КонецЕсли;
					//-- НЕ УТ
					
					//++ НЕ УТ
					Если Объект.ТипПлана = Перечисления.ТипыПланов.ПланПроизводства
						И Объект.ЗаполнятьПодразделение И КомплекснаяАвтоматизация Тогда
						
						Объект.ЗаполнятьПодразделение = Ложь;
						ОбъектИзменен = Истина;
						
					КонецЕсли;
					//-- НЕ УТ
					
					Если Объект.КоличествоПериодов = 0 Тогда
						
						Объект.КоличествоПериодов = 1;
						ОбъектИзменен = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
					
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
				КонецЕсли;

				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
