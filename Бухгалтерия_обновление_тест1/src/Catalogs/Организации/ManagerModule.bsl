#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Вызывается при начальном заполнении предопределенных элементов
// Подробнее см. в СтандартныеПодсистемыСервер.НастройкиПредопределенныхЭлементов
//
// Параметры:
//  Настройки - Структура - Настройки начального заполнения.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - Ключ - Имя табличной части объекта.
//                               Значение - Выгрузка в таблицу значений пустой табличной части.
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	#Область УправленческаяОрганизация
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УправленческаяОрганизация";
	Элемент.Наименование = НСтр("ru='Управленческая организация';uk='Управлінська організація'",ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Префикс = "УУ";
	Элемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	#КонецОбласти

КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - СправочникОбъект.Организации - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	Объект.ГоловнаяОрганизация = Объект.Ссылка;
	
КонецПроцедуры

#Область ОбособленныеПодразделения

// Проверяет взаимосвязанность организации по организационной структуре.
// Если первая и вторая организации одинаковы, то считается, что они относятся к одной головной.
//
// Параметры:
//	ПерваяОрганизация - СправочникСсылка.Организации - проверяемая организация.
//	ВтораяОрганизация - СправочникСсылка.Организации - организация, с которой выполняется сравнение.
//
// Возвращаемое значение:
//	Булево - признак взаимосвязанности. Если первая организация является обособленным подразделением,
//		либо если вторая организация является обособленным подразделением первой,
//		либо если обе организации являются обособленными подразделениями одной и той же головной организации.
//		В противном случае возвращается Ложь.
//
Функция ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ПерваяОрганизация, ВтораяОрганизация) Экспорт
	
	Если НЕ (ЗначениеЗаполнено(ПерваяОрганизация) И ЗначениеЗаполнено(ВтораяОрганизация))
	 ИЛИ ПерваяОрганизация = ВтораяОрганизация Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивВзаимосвязанныхОрганизаций = МассивВзаимосвязанныхОрганизаций(ПерваяОрганизация);
	
	Возврат (МассивВзаимосвязанныхОрганизаций.Найти(ВтораяОрганизация) <> Неопределено);
	
КонецФункции

// Проверяет, связана ли организация с другими организациями по организационной структуре.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - проверяемая организация.
//
// Возвращаемое значение:
//	Булево - признак взаимосвязанности. Если организация взаимосвязана с другими,
//		возвращается Истина, в противном случае Ложь.
//
Функция ОрганизацияВзаимосвязанаСДругимиОрганизациями(Организация) Экспорт
	
	МассивВзаимосвязанныхОрганизаций = МассивВзаимосвязанныхОрганизаций(Организация);
	ОрганизацияВзаимосвязанаСДругимиОрганизациями = (МассивВзаимосвязанныхОрганизаций.Количество() <> 0);
	
	Возврат ОрганизацияВзаимосвязанаСДругимиОрганизациями;
	
КонецФункции

// Возвращает массив организаций, взаимосвязанных по организационной структуре.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, для которой нужно искать связи,
//		если не указана, то возвращаются все взаимосвязанные организации.
//
// Возвращаемое значение:
//	Массив - массив взаимосвязанных организаций.
//
Функция МассивВзаимосвязанныхОрганизаций(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	|	Организации.ГоловнаяОрганизация КАК Ссылка,
	|	NULL КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВзаимосвязанныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.ГоловнаяОрганизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаимосвязанныеОрганизации.Ссылка
	|ИЗ
	|	ВзаимосвязанныеОрганизации КАК ВзаимосвязанныеОрганизации
	|ГДЕ
	|	ВзаимосвязанныеОрганизации.Ссылка <> &Организация
	|	И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ВзаимосвязанныеОрганизации.Ссылка = &ГоловнаяОрганизация
	|			ИЛИ ВзаимосвязанныеОрганизации.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И &ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ВзаимосвязанныеОрганизации.ГоловнаяОрганизация = &Организация)");
	
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Справочники.Организации.ПустаяСсылка()));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ?(ЗначениеЗаполнено(Организация),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация"), Справочники.Организации.ПустаяСсылка()));
		
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивОрганизаций;
	
КонецФункции

//++ НЕ БЗК

// Возвращает массив филиалов организации у которых разрешено ведение взаиморасчетов через головную организацию.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, для которой нужно найти филиалы,
//		если не указана, то возвращаются все филиалы в которых допускаются взаиморасчеты через головную организацию.
//
// Возвращаемое значение:
//	Массив - массив взаимосвязанных организаций.
//
Функция ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Организация = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И (Организации.Ссылка <> &Организация И Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

//-- НЕ БЗК

// Возвращает массив головных организаций для указанных организаций.
//
// Параметры:
//	МассивОрганизаций - Массив - организации, для которой нужно получить головные организации.
//
// Возвращаемое значение:
//	Массив - массив головных организаций.
//
Функция ГоловныеОрганизации(МассивОрганизаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.ГоловнаяОрганизация КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИспользованиеНесколькихОрганизаций

// Возвращает организацию по умолчанию.
// Если в ИБ есть только одна организация, которая не помечена на удаление и не является предопределенной,
// то будет возвращена ссылка на нее, иначе будет возвращена пустая ссылка.
//
// Возвращаемое значение:
//     СправочникСсылка.Организации - ссылка на организацию.
//
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Организация = Выборка.Организация;
	КонецЕсли;
	
	Возврат Организация;

КонецФункции

// Возвращает количество элементов справочника Организации.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество организаций.
//
Функция КоличествоОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный
	|	И НЕ Организации.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
		
	Возврат Количество;
	
КонецФункции

// Возвращает признак использования нескольких организаций.
//
// Возвращаемое значение:
//		Булево
//
Функция ИспользуетсяНесколькоОрганизаций() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
КонецФункции

// Возвращает массив доступных организаций.
//
// Параметры:
//	ТолькоРазрешенные - Булево - определяет, надо ли получить все организации ИБ, или только доступные текущему пользователю.
//	УчитыватьПомеченныеНаУдаление - Булево - определяет, надо ли получать помеченные на удаление организации.
//
// Возвращаемое значение:
//	Массив - массив организаций
//
Функция ДоступныеОрганизации(ТолькоРазрешенные = Ложь, УчитыватьПомеченныеНаУдаление = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	(ДанныеСправочника.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|		ИЛИ &ИспользоватьУправленческуюОрганизацию)
	|	И (НЕ ДанныеСправочника.ПометкаУдаления 
	|		ИЛИ &УчитыватьПомеченныеНаУдаление)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("УчитыватьПомеченныеНаУдаление", УчитыватьПомеченныеНаУдаление);
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию",
		ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	
	Если ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
	Иначе
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

#КонецОбласти

//++ НЕ БЗК

#Область Налогообложение

// Функция определяет, является ли организация плательщиком НДС на указанную дату.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется, является ли она плательщиком единого налога
//	Дата        - Дата определения 
//
// Возвращаемое значение:
//	Булево
//
Функция ПлательщикНДС(Организация, Дата) Экспорт
    Возврат УчетнаяПолитикаПереопределяемый.ПлательщикНДС(Организация, Дата);
КонецФункции

// Функция определяет, является ли организация плательщиком единого налога на указанную дату
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется, является ли она плательщиком единого налога
//	Дата        - Дата определения 
//
// Возвращаемое значение:
//	Булево
//
Функция ПлательщикЕдиногоНалога(Организация, Дата) Экспорт
    Возврат УчетнаяПолитикаПереопределяемый.ПлательщикЕН(Организация, Дата);
КонецФункции

Функция ПлательщикНалогаНаПрибыль(Организация, Дата) Экспорт
    Возврат УчетнаяПолитикаПереопределяемый.ПлательщикНалогаНаПрибыль(Организация, Дата);
КонецФункции

// Функция определяет налоговое назначение НДС организации по умолчанию.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется налоговое назначение НДС
//	Дата - Дата определения налогового назначения НДС
//
// Возвращаемое значение:
//	СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат - Налоговое назначение НДС организации 
//
Функция НалоговоеНазначениеНДС(Организация, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
    
    Если Организация = Справочники.Организации.УправленческаяОрганизация Тогда
        Возврат НалоговоеНазначениеУправленческойОрганизации();
    КонецЕсли; 
    
	ПараметрыСистемыНалогообложения = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик(
        "НастройкиСистемыНалогообложения",
		Организация,
		Дата
    );
    
    НалоговоеНазначениеНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
    
    Если ПараметрыСистемыНалогообложения <> Неопределено Тогда
        СистемаНалогообложения = ПараметрыСистемыНалогообложения.СистемаНалогообложения;
		Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.ЕдиныйНалогИНДС ИЛИ СистемаНалогообложения = Перечисления.СистемыНалогообложения.НалогНаПрибыльИНДС Тогда
			НалоговоеНазначениеНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Иначе
			НалоговоеНазначениеНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		КонецЕсли; 
    КонецЕсли;
	
	Возврат НалоговоеНазначениеНДС;
	
КонецФункции 

Функция НалоговоеНазначениеУправленческойОрганизации() Экспорт 
	Возврат Справочники.НалоговыеНазначенияАктивовИЗатрат.Управленческое;
КонецФункции 

#КонецОбласти
//-- НЕ БЗК

#Область Прочие

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
//	Возвращаемое значение:
//		Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	
	//++ НЕ БЗК
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		Результат.Добавить("ОбособленноеПодразделение");
		Результат.Добавить("ГоловнаяОрганизация");
	КонецЕсли;
	//-- НЕ БЗК
	
	Возврат Результат;

КонецФункции

// Функция определяет значения реквизитов выбранной организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Ссылка на организацию.
//  Период - дата получения реквизитов, которые зависят от даты
//
// Возвращаемое значение:
//	Структура - реквизиты выбранной организации.
//
Функция ПолучитьРеквизитыОрганизации(Организация, Период = '00010101') Экспорт    
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование", "");
	СтруктураРеквизитов.Вставить("НаименованиеСокращенное", "");
	СтруктураРеквизитов.Вставить("НаименованиеПолное", "");
	СтруктураРеквизитов.Вставить("ЮрФизЛицо",  Перечисления.ЮрФизЛицо.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("ИндивидуальныйПредприниматель", "");
	ОрганизацииЛокализация.ДополнитьСписокРеквизитовОрганизации(СтруктураРеквизитов);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|	//ПоляВыборкиПараметров
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ПоляВыборкиПараметров = Новый Массив;
	Для каждого Реквизит Из СтруктураРеквизитов Цикл
		ПоляВыборкиПараметров.Добавить(СтрШаблон(" , Организации.%1 КАК %1 ", Реквизит.Ключ));
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПоляВыборкиПараметров", СтрСоединить(ПоляВыборкиПараметров, Символы.ПС));
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
		Наименование = ?(Не ПустаяСтрока(Выборка.НаименованиеСокращенное), Выборка.НаименованиеСокращенное, Выборка.Наименование);
		СтруктураРеквизитов.Наименование = Наименование;
	Иначе
		Наименование = "";
    КонецЕсли;
	СтруктураРеквизитов.Вставить("Представление", Наименование);
    ОрганизацииЛокализация.ДополнитьРеквизитыОрганизации(Организация, СтруктураРеквизитов, Выборка, Период);
	Возврат СтруктураРеквизитов;

КонецФункции


// Получает организацию, если организация одна в справочнике.
// Если управленческая организация отключена в настройках, то она не учитывается.
//
// Возвращаемое значение:
//	СправочникСсылка.Организации - Найденная организация
// 	СправочникСсылка.Организации.ПустаяСсылка - если организаций нет или организаций больше одной.
//
Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|";
	
	Если Не Константы.ИспользоватьУправленческуюОрганизацию.Получить() Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И Не Организации.Предопределенный";
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Организация = Выборка.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Организация;

КонецФункции


// Формирует соответствие имени регистра и элементов формы, связанных с регистром.
// 
// Параметры:
// Возвращаемое значение:
// 	Соответствие - Соответствие элементов формы
Функция СоответствиеЭлементовФормыПараметрамНалоговУчетныхПолитик() Экспорт
	
	СоответствиеЭлементов = Новый Соответствие();
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаУчетнаяПолитикаФинансовогоУчетаОтступ");
	МассивЭлементов.Добавить("ОтступУчетнаяПолитикаФинансовогоУчета");
	МассивЭлементов.Добавить("ОписаниеУчетнаяПолитикаФинансовогоУчета");
	МассивЭлементов.Добавить("ГруппаУчетнаяПолитикаФинансовогоУчета");
	МассивЭлементов.Добавить("ОткрытьУчетнаяПолитикаФинансовогоУчета");
	
	СоответствиеЭлементов.Вставить("УчетнаяПолитикаФинансовогоУчета", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаНДСОтступ");
	МассивЭлементов.Добавить("ОтступНастройкиУчетаНДС");
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаНДС");
	МассивЭлементов.Добавить("ОписаниеНастройкиУчетаНДС");
	МассивЭлементов.Добавить("ОткрытьНастройкиУчетаНДС");
    МассивЭлементов.Добавить("ГруппаУчетНДС");
	
	СоответствиеЭлементов.Вставить("НастройкиУчетаНДС", МассивЭлементов);
	
	ОрганизацииЛокализация.ДополнитьСоответствиеЭлементовФормыПараметрамНалоговУчетныхПолитик(СоответствиеЭлементов);
	
	Возврат СоответствиеЭлементов
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ОрганизацииЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);
	
КонецПроцедуры


#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

//++ Локализация
//-- Локализация

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);	
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Префикс");
	Результат.Добавить("КонтактнаяИнформация.*");
	
	Возврат Результат
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НапечататьПомощникРаботыФаксимильнойПечати") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"НапечататьПомощникРаботыФаксимильнойПечати", 
			НСтр("ru='Как создать факсимильную подпись и печать?';uk='Як створити факсимільний підпис та печатку?'"), 
			СформироватьПомощникРаботыФаксимильнойПечати(МассивОбъектов[0], ОбъектыПечати));
		
		КонецЕсли;
		
КонецПроцедуры

Функция СформироватьПомощникРаботыФаксимильнойПечати(Организация, ОбъектыПечати)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	Макет				= УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации.ПомощникРаботыФаксимильнойПечати");
	
	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация);
	
	// Вывести подписи
	Область = Макет.ПолучитьОбласть("Подписи");
	ТабличныйДокумент.Вывести(Область);

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Линия"));
	Если МультиязычностьУкр.КодЯзыкаИнтерфейса() = "uk" Тогда
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("СхемаУкр"));	
	Иначе
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Схема"));
	КонецЕсли; 
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, Организация);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.Организации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("574719de-e44a-4cab-8558-b4b2caf47b58");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Организации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет головную организацию';uk='Заповнює головну організацію'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.Организации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.Организации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.Организации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбновитьПредставленияПредопределенныхЭлементов";
	НоваяСтрока.Порядок = "Любой";
	

КонецПроцедуры

// Вызывается при переходе на версию БСП 2.2.1.12
//
Процедура ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") =
			ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоОрганизаций") Тогда
		// Опции должны иметь противоположные значения.
		// Если это не так, то значит в ИБ раньше не было этих опций - инициализируем их значения.
		Константы.ИспользоватьНесколькоОрганизаций.Установить(КоличествоОрганизаций() > 1);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ГоловныеОрганизации
	|		ПО Организации.ГоловнаяОрганизация = ГоловныеОрганизации.Ссылка
	|ГДЕ
	|	ГоловныеОрганизации.Ссылка ЕСТЬ NULL
	|	И НЕ Организации.ПометкаУдаления
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.Организации";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Организации");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДанныеОбъекта = Выборка.Ссылка.ПолучитьОбъект();
			Если ДанныеОбъекта = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ГоловнаяОрганизация) Тогда
				ДанныеОбъекта.ГоловнаяОрганизация = ДанныеОбъекта.Ссылка;
			КонецЕсли;
			Если ДанныеОбъекта.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать объект: %Ссылка% по причине: %Причина%';uk='Не вдалося обробити об''єкт: %Ссылка% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
									
		КонецПопытки;
	КонецЦикла;
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
