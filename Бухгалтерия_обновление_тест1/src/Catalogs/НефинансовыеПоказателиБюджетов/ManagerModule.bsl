#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
// 
// Возвращаемое значение:
// 	Массив - имена блокируемых реквизитов:
//		* БлокируемыйРеквизит - Строка - Имя блокируемого реквизита.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			Результат.Добавить("ВидАналитики" + НомерАналитики);
	КонецЦикла;
	Результат.Добавить("ВидПоказателя");
	Результат.Добавить("УстанавливатьЗначениеНаКаждыйПериод");
	Результат.Добавить("ЗагружатьИзДругихПодсистем");
	Результат.Добавить("ПоОрганизациям");
	Результат.Добавить("ПоПериодам");
	Результат.Добавить("ПоСценариям");
	Результат.Добавить("ПоПодразделениям");
	Результат.Добавить("Периодичность");
	Результат.Добавить("ПериодичностьПодпериодов");
	
	Возврат Результат;
	
КонецФункции

// Возвращает предопределенную схему получения данных
//
// Параметры:
//	ИмяМакета - Строка - имя макета, из которого необходимо получить описание и схему.
//
// Возвращаемое значение:
//	СхемаКомпоновкиДанных - схема получения данных.
//
Функция ПредопределеннаяСхемаПолученияДанных(ИмяМакета, РежимПолученияДанных = Неопределено) Экспорт
	
	СхемаПолученияДанных = Справочники.НефинансовыеПоказателиБюджетов.ПолучитьМакет(ИмяМакета);
	
	Если РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все Тогда
		Для Каждого Набор Из СхемаПолученияДанных.НаборыДанных Цикл
			Если ЗначениеЗаполнено(Набор.Запрос) Тогда 
				Набор.Запрос = СтрЗаменить(Набор.Запрос, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ ");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат  СхемаПолученияДанных;
	
КонецФункции

// Возвращает таблицу нефинансовых показателей с учетом отбора компоновки данных
//
// Параметры:
// 	 ОтборКомпоновкиДанны - НастройкиКомпоновкиДанных - Настройки компоновки данных, содержащие отбор.
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица нефинансовых показателей:
//		* НефинансовыйПоказатель - СправочникСсылка.НефинансовыеПоказатели - Нефинансовый показатель.
//		* ПолеВалютыАналитики - Строка - Источник заполнения валюты.
//		* ПолеЕдиницыИзмеренияАналитики - Строка - Источник заполнения единицы измерения.
//
Функция НефинансовыеПоказателиСУчетомОтбора(ОтборКомпоновкиДанны) Экспорт
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхема();
	НаборДанныхСценарии = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СхемаКомпоновкиДанных,
		Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанныхСценарии.Запрос = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НефинансовыеПоказатели.Ссылка КАК НефинансовыйПоказатель,
	|	НефинансовыеПоказатели.АналитикаВалюты.ЗаполнениеВалюты КАК ПолеВалютыАналитики,
	|	НефинансовыеПоказатели.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК ПолеЕдиницыИзмеренияАналитики,
	|	*
	|ИЗ
	|	Справочник.НефинансовыеПоказателиБюджетов КАК НефинансовыеПоказатели
	|ГДЕ
	|	НЕ НефинансовыеПоказатели.ПометкаУдаления
	|	И НЕ НефинансовыеПоказатели.ЭтоГруппа
	|";
	НаборДанныхСценарии.АвтоЗаполнениеДоступныхПолей = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Настройки = Новый НастройкиКомпоновкиДанных;
	КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(Настройки);
	Для каждого Элемент Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если Элемент.Папка Тогда
			Продолжить;
		КонецЕсли;
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, Элемент.Поле);
	КонецЦикла;
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, ОтборКомпоновкиДанны);
	
	Возврат ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЭтоГруппа ИЛИ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция ШаблоныСхемыКомпоновкиДанных() Экспорт
	
	Шаблоны = Новый Массив;
	
	Для каждого Макет Из Метаданные.Справочники.НефинансовыеПоказателиБюджетов.Макеты Цикл
		
		Если Макет.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Шаблоны.Добавить(Новый Структура("Имя, Синоним", Макет.Имя, Макет.Синоним));
		
	КонецЦикла;
	
	Возврат Шаблоны;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ НЕ УТ
	Отчеты.ЗначенияНефинансовыхПоказателей.ДобавитьКомандуОтчета(КомандыОтчетов);
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.НефинансовыеПоказателиБюджетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b2cf3c70-d01a-4e1f-a518-7c3231916105");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НефинансовыеПоказателиБюджетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "БюджетированиеСервер.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НефинансовыеПоказателиБюджетов";
	Обработчик.ИзменяемыеОбъекты = "Справочник.НефинансовыеПоказателиБюджетов";
	Обработчик.БлокируемыеОбъекты = "Отчет.БюджетныйОтчет,"
		+ "Документ.УстановкаЗначенийНефинансовыхПоказателей,"
		+ "Справочник.НефинансовыеПоказателиБюджетов,"
		+ "Документ.ЭкземплярБюджета,"
		+ "Отчет.ЗначенияНефинансовыхПоказателей";
	Обработчик.Комментарий = НСтр("ru='Заменяет пустые значения аналитики на единое значение пустой аналитики Неопределено.
                                   |Заполняет реквизиты оптимизации настроек.'
                                   |;uk='Замінює пусті значення аналітики на єдине значення пустої аналітики Неопределено.
                                   |Заповнює реквізити оптимізації налаштувань.'");
	
КонецПроцедуры

// Регистрирует данные для обработчика обновления КА 2.5.4
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НФП.Ссылка
	|ИЗ
	|	Справочник.НефинансовыеПоказателиБюджетов КАК НФП
	|ГДЕ
	|	НФП.ЗагружатьИзДругихПодсистем
	|	И НФП.ХешНастроек = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеМассив = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеМассив.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеМассив);
	
	ПустыеЗначенияДляОбработки = БюджетированиеВызовСервера.ЗаменяемыеПустыеЗначенияАналитики();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НефинансовыеПоказателиБюджетов КАК Таблица
		|ГДЕ
		|	(Таблица.ЗначениеАналитики1 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.ЗначениеАналитики2 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.ЗначениеАналитики3 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.ЗначениеАналитики4 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.ЗначениеАналитики5 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.ЗначениеАналитики6 В (&ПустыеЗначенияДляОбработки))";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияДляОбработки", ПустыеЗначенияДляОбработки);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Заменяет пустые значения аналитики на единое значение пустой аналитики Неопределено.
// Заполняет реквизиты оптимизации настроек.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяМетаданных = "Справочник.НефинансовыеПоказателиБюджетов";
	МетаданныеОбъекта = Метаданные.Справочники.НефинансовыеПоказателиБюджетов;
	
	ПустыеЗначенияДляОбработки = БюджетированиеВызовСервера.ЗаменяемыеПустыеЗначенияАналитики();
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ЗначениеЗамены = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
	
	РеквизитыПоиска = Новый Массив;
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		РеквизитыПоиска.Добавить("ЗначениеАналитики" + Сч);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, 
		ПолноеИмяМетаданных, 
		МенеджерВременныхТаблиц
	);
		
	Параметры.ОбработкаЗавершена = НЕ Результат.ЕстьДанныеДляОбработки;
	Если Параметры.ОбработкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектыДляОбработки.Ссылка КАК Ссылка
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяМетаданных);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если НЕ Объект = Неопределено Тогда
				
				Объект.Заблокировать();
				
				ОбъектИзменен = Ложь;
				
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				
				БюджетированиеВызовСервера.ВыполнитьЗаменыЗначенийВОбъекте(
					Объект,
				    РеквизитыПоиска,
				    ПустыеЗначенияДляОбработки,
				    ЗначениеЗамены,
				    ОбъектИзменен
				); 
				
				Если Объект.ЗагружатьИзДругихПодсистем И ПустаяСтрока(Объект.ХешНастроек) Тогда
					НастройкиКД = Объект.ХранилищеНастроекКомпоновкиДанных.Получить();
					Объект.ХешНастроек = ОбщегоНазначенияУТ.ХешСуммаСериализуемогоОбъекта(НастройкиКД, ХешФункция.MD5);
				    ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
				
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяМетаданных);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

