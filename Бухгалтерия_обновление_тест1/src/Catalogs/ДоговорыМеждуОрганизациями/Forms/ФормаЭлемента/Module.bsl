#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
    КонецЕсли;
    
    УстановитьДоступностьОплатыВВалюте();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	ДоговорыМеждуОрганизациямиЛокализация.ПриСозданииНаСервереФормаЭлемента(ЭтаФорма, Отказ , СтандартнаяОбработка);
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ДоговорыМеждуОрганизациямиЛокализацияКлиент.ПриОткрытии(Отказ, ЭтаФорма);
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
    
	Если ФиксированнаяСуммаДоговора И Объект.Сумма = 0 Тогда
		
		ТекстОшибки = НСтр("ru='Не заполнена сумма договора.';uk='Не заповнена сума договору.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект.Ссылка,
			"Объект.Сумма",,
			Отказ);
	КонецЕсли;

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	ДоговорыМеждуОрганизациямиЛокализация.ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ДоговорыМеждуОрганизациямиЛокализация.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ОбновитьЗаголовокФормы();
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);

	СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	ДоговорыМеждуОрганизациямиЛокализацияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область УниверсальныеОбработчикиСобытий

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент)
	ДоговорыМеждуОрганизациямиЛокализацияКлиент.ПриИзмененииРеквизита(
		Элемент,
		ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиФормы(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДоговорыМеждуОрганизациямиЛокализацияКлиент.ОбработкаНавигационнойСсылкиФормы(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииИзмененияРеквизитаЛокализации(ИмяЭлемента, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ПараметрыОбработки)
	
	ДоговорыМеждуОрганизациямиЛокализация.ПриОкончанииИзмененияРеквизита(ИмяЭлемента, ЭтаФорма, ПараметрыОбработки);
	
КонецПроцедуры

#КонецОбласти
&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Закрыт")
	Тогда
		Объект.Согласован = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДоговораПриИзменении(Элемент)
	
	ТипДоговораПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
	ЗаполнитьНастройкиУчетаНДСПоОрганизации();
	УправлениеЭлементамиНастройкиУчетаНДС();
    УстановитьДоступностьОплатыВВалюте();
	
КонецПроцедуры                                             	

&НаКлиенте
Процедура ОрганизацияПолучательПриИзменении(Элемент)
	
	ОрганизацияПолучательПриИзмененииСервер();
	ЗаполнитьМоментОпределенияБазыНДСПолучателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	
	ВалютаВзаиморасчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Элементы.НаименованиеДляПечати.СписокВыбора.Очистить();
	Элементы.НаименованиеДляПечати.СписокВыбора.Добавить(Объект.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура КлассификацияЗадолженностиПриИзменении(Элемент)
	
	Если КлассификацияЗадолженности = 1 Тогда
		Объект.УстановленСрокОплаты = Истина;
		Объект.СрокОплаты = 366; // Значение больше 365 календарных дней
	Иначе
		Объект.УстановленСрокОплаты = Ложь;
		Объект.СрокОплаты = 0;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	НаправлениеДеятельностиПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура МоментОпределенияБазыНДСПриИзменении(Элемент)
	УправлениеЭлементамиНастройкиУчетаНДС();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВВалютеПриИзменении(Элемент)
	
	ОплатаВВалютеПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#Область УниверсальныеОбработчикиКомандФормы
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЛокализации(Команда)
	
	ДоговорыМеждуОрганизациямиЛокализацияКлиент.ВыполнитьКомандуЛокализации(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыЛокализации(ИмяКоманды, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ПараметрыОбработки)
	
	ДоговорыМеждуОрганизациямиЛокализация.ВыполнитьКомандуЛокализации(ЭтаФорма, ИмяКоманды, ПараметрыОбработки);
	
КонецПроцедуры
	
#КонецОбласти

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачалаДействия", "ДатаОкончанияДействия"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Изменить", "Доступность", Ложь);

	Если НЕ ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		Объект.ВалютаВзаиморасчетов = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
	КонецЕсли;
	
	ФиксированнаяСуммаДоговора = (Объект.Сумма <> 0);
	

	ПараметрыВыбораБанковскогоСчета = ПараметрыВыбораБанковскихСчетов(Объект.ОплатаВВалюте);
	Элементы.БанковскийСчет.ПараметрыВыбора            = ПараметрыВыбораБанковскогоСчета;
	Элементы.БанковскийСчетПолучателя.ПараметрыВыбора  = ПараметрыВыбораБанковскогоСчета;
	
	НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	УправлениеЭлементамиГрафикИсполнения(Элементы, ФиксированнаяСуммаДоговора);
	
	ПараметрыЗаполнения = Справочники.ДоговорыМеждуОрганизациями.ПараметрыЗаполненияНалогообложенияНДС(Объект);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС,
															Объект.НалогообложениеНДС,
															ПараметрыЗаполнения,
															УчетНДСКэшированныеЗначенияПараметров);
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьНастройкиУчетаНДСПоОрганизации();
		ЗаполнитьМоментОпределенияБазыНДСПолучателя();
	КонецЕсли; 
	УправлениеЭлементамиНастройкиУчетаНДС();
																
	ОбновитьЗаголовокФормы();
	
	Элементы.НаименованиеДляПечати.СписокВыбора.Очистить();
	Элементы.НаименованиеДляПечати.СписокВыбора.Добавить(Объект.Наименование);
	
	УстановитьУсловноеОформление();
	ДоговорыМеждуОрганизациямиЛокализация.ПриЧтенииСозданииНаСервере(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ФиксированнаяСуммаДоговораПриИзменении(Элемент)
	
	Если Не ФиксированнаяСуммаДоговора Тогда
		Объект.Сумма = 0;
	КонецЕсли;
	
	УправлениеЭлементамиГрафикИсполнения(Элементы, ФиксированнаяСуммаДоговора);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиГрафикИсполнения(Элементы, ФиксированнаяСуммаДоговора)
	
	Элементы.Сумма.Доступность = ФиксированнаяСуммаДоговора;
	Элементы.Сумма.АвтоОтметкаНезаполненного = ФиксированнаяСуммаДоговора;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ТипДоговораПриИзмененииСервер()
	
	ОбновитьЗаголовокФормы();
	
	ЗаполнитьНалогообложениеНДС();
    УправлениеЭлементамиНастройкиУчетаНДС();
	ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере("ТипДоговора", Неопределено);

КонецПроцедуры

&НаСервере
Процедура ВалютаВзаиморасчетовПриИзмененииСервер()
	
	Объект.ОплатаВВалюте = ВзаиморасчетыСервер.ПолучитьОплатуВВалютеПоУмолчанию();
	
	ОплатаВВалютеПриИзмененииСервер();
	
	ЗаполнитьМоментОпределенияБазыНДСПоОрганизации();
	ЗаполнитьМоментОпределенияБазыНДСПолучателя();
	УправлениеЭлементамиНастройкиУчетаНДС();
    УстановитьДоступностьОплатыВВалюте();
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Не ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ЗаполнитьНалогообложениеНДС();
	ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.ОплатаВВалюте, Объект.БанковскийСчет);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПолучательПриИзмененииСервер()
    
    Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОрганизацияПолучатель, "ЮрФизЛицо") <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
    	Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
        Объект.ОплатаВВалюте 		= Ложь;
    Иначе	
        Объект.ОплатаВВалюте 		= Истина;
    	Если Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
    		Объект.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
    	КонецЕсли;	
    КонецЕсли;
    
	ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Объект.ОрганизацияПолучатель, Объект.ОплатаВВалюте, Объект.БанковскийСчетПолучателя);
	
    
    УстановитьДоступностьОплатыВВалюте();
	
КонецПроцедуры

&НаСервере
Процедура ОплатаВВалютеПриИзмененииСервер()
	
	ПараметрыВыбораБанковскихСчетов = ПараметрыВыбораБанковскихСчетов(Объект.ОплатаВВалюте);
	Элементы.БанковскийСчет.ПараметрыВыбора            = ПараметрыВыбораБанковскихСчетов;
	Элементы.БанковскийСчетПолучателя.ПараметрыВыбора = ПараметрыВыбораБанковскихСчетов;
	
	Если НЕ БанковскийСчетСоответствуетПорядкуОплаты(Объект.БанковскийСчет, Объект.ОплатаВВалюте) Тогда
		Объект.БанковскийСчет = Неопределено;
	КонецЕсли;
	ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.ОплатаВВалюте, Объект.БанковскийСчет);
	
	Если НЕ БанковскийСчетСоответствуетПорядкуОплаты(Объект.БанковскийСчетПолучателя, Объект.ОплатаВВалюте) Тогда
		Объект.БанковскийСчетПолучателя = Неопределено;
	КонецЕсли;
	ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Объект.ОрганизацияПолучатель, Объект.ОплатаВВалюте, Объект.БанковскийСчетПолучателя);
	
КонецПроцедуры


&НаСервере
Процедура УстановитьДоступностьОплатыВВалюте()
    
    ДоступностьОплатаВВалюте = Ложь;
    Если Объект.Организация = Справочники.Организации.УправленческаяОрганизация Тогда
        ДоступностьОплатаВВалюте = Истина;
	Иначе
        Если Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
            Если Объект.ОплатаВВалюте Тогда
                Объект.ОплатаВВалюте = Ложь;
            КонецЕсли; 
        Иначе
            Если НЕ Объект.ОплатаВВалюте Тогда
                Объект.ОплатаВВалюте = Истина;
            КонецЕсли; 
        КонецЕсли;
        ДоступностьОплатаВВалюте = Ложь;
	КонецЕсли;
    
    ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОплатаВВалюте", "Доступность", ДоступностьОплатаВВалюте);
    
КонецПроцедуры


#КонецОбласти

#Область КонтрольНесогласованныхИзменений

// Параметры:
//	Элемент - ПолеФормы - ЭлементФормы
&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "ОрганизацияПолучатель" Тогда
		ОрганизацияПолучательПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВалютаВзаиморасчетов" Тогда
		ВалютаВзаиморасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ОплатаВВалюте" Тогда
		ОплатаВВалютеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТипДоговора" Тогда
		ТипДоговораПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//	Команда - КомандаФормы - 
&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "УстановитьИнтервал" Тогда
		УстановитьИнтервал(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	
КонецПроцедуры

// Параметры:
//	Элемент - ПолеФормы - ЭлементФормы
&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//	Команда - КомандаФормы - 
&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//	Элемент - ПолеФормы - ЭлементФормы
&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//	Элемент - ПолеФормы - ЭлементФормы
&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//	Элемент - ПолеФормы - ЭлементФормы
&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован Тогда
		УстановитьПодписку = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт Или
		Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует Тогда
		УстановитьПодписку = Объект.Согласован;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Номер");
	МассивЭлементов.Добавить("ДатаНачалаДействия");
	МассивЭлементов.Добавить("ДатаОкончанияДействия");
	МассивЭлементов.Добавить("ОрганизацияПолучатель");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("ВалютаВзаиморасчетов");
	МассивЭлементов.Добавить("ОплатаВВалюте");
	МассивЭлементов.Добавить("ТипДоговора");
	МассивЭлементов.Добавить("ПорядокРасчетов");
	МассивЭлементов.Добавить("УстановитьИнтервал");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВыбораБанковскихСчетов(ОплатаВВалюте)

	МассивПараметров = Новый Массив;
	
	Если НЕ ОплатаВВалюте Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Константы.ВалютаРегламентированногоУчета.Получить()));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Новый ФиксированныйМассив(ИностранныеВалюты())));
	КонецЕсли;
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("ВыборСчетовГоловнойОрганизации", Неопределено));
	
	Возврат Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИностранныеВалюты()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Ссылка <> &ВалютаРегламентированногоУчета
	|");
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчетСоответствуетПорядкуОплаты(БанковскийСчет, ОплатаВВалюте)

	Соответствует = Истина;
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		ВалютаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ВалютаДенежныхСредств");
		
		Если ОплатаВВалюте Тогда
			Соответствует = ВалютаСчета <> Константы.ВалютаРегламентированногоУчета.Получить();
		Иначе
			Соответствует = ВалютаСчета = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Соответствует;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(ВладелецСчета, ОплатаВВалюте, СчетКЗаполнению)
	
	Если ЗначениеЗаполнено(СчетКЗаполнению)
	 ИЛИ НЕ ЗначениеЗаполнено(ВладелецСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Организация
	|	И ((БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = &ВалютаРегл И НЕ &ОплатаВВалюте)
	|	ИЛИ (БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств <> &ВалютаРегл И &ОплатаВВалюте))
	|	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("Организация", ВладелецСчета);
	Запрос.УстановитьПараметр("ОплатаВВалюте", ОплатаВВалюте);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		СчетКЗаполнению = Выборка.БанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Если Объект.ТипДоговора = Перечисления.ТипыДоговоровМеждуОрганизациями.КупляПродажа Тогда
		ПредставлениеТипа = НСтр("ru='Договор купли-продажи';uk='Договір купівлі-продажу'");
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоровМеждуОрганизациями.Комиссионный Тогда
		ПредставлениеТипа = НСтр("ru='Договор комиссии';uk='Договір комісії'");
	Иначе
		ПредставлениеТипа = ЭтаФорма.Заголовок;
	КонецЕсли;
	
	Если Объект.ТипДоговора = Перечисления.ТипыДоговоровМеждуОрганизациями.КупляПродажа Тогда
		Элементы.ГруппаОрганизация.Заголовок = НСтр("ru='Поставщик';uk='Постачальник'");
		Элементы.ГруппаОрганизацияПолучатель.Заголовок = НСтр("ru='Покупатель';uk='Покупець'");
		Элементы.ГруппаФинансовогоУчета.Заголовок = НСтр("ru='Группа учета расчетов с покупателем';uk='Група обліку розрахунків з покупцем'");
		Элементы.ГруппаФинансовогоУчетаПолучателя.Заголовок = НСтр("ru='Группа учета расчетов с поставщиком';uk='Група обліку розрахунків з постачальником'");
	Иначе
		Элементы.ГруппаОрганизация.Заголовок = НСтр("ru='Комитент';uk='Комітент'");
		Элементы.ГруппаОрганизацияПолучатель.Заголовок = НСтр("ru='Комиссионер';uk='Комісіонер'");
		Элементы.ГруппаФинансовогоУчета.Заголовок = НСтр("ru='Группа учета расчетов с комиссионером';uk='Група обліку розрахунків з комісіонером'");
		Элементы.ГруппаФинансовогоУчетаПолучателя.Заголовок = НСтр("ru='Группа учета расчетов с комитентом';uk='Група обліку розрахунків з комітентом'");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.Заголовок = ПредставлениеТипа + " (" + НСтр("ru='создание';uk='створення'") + ")";
	Иначе
		ЭтаФорма.Заголовок = Объект.Наименование + " (" + ПредставлениеТипа + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств()
	
	МассивПараметровВыбора = Новый Массив;
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	Элементы.СтатьяДвиженияДенежныхСредств.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	МассивПараметровВыбора.Очистить();
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	Элементы.СтатьяДвиженияДенежныхСредствПолучателя.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалогообложениеНДС()

	ПараметрыЗаполнения = Справочники.ДоговорыМеждуОрганизациями.ПараметрыЗаполненияНалогообложенияНДС(Объект);

	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Объект.НалогообложениеНДС,
												ПараметрыЗаполнения,
												УчетНДСКэшированныеЗначенияПараметров);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС,
															Объект.НалогообложениеНДС,
															ПараметрыЗаполнения,
															УчетНДСКэшированныеЗначенияПараметров);


КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиНастройкиУчетаНДС()
	
	// Отображаем признак "Внешнеэкономический"
	Внешнеэкономический = Объект.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаголовокГруппы = НСтр("ru='Моменты определения базы НДС поставщика';uk='Моменти визначення бази ПДВ постачальника'") + ?(Внешнеэкономический, НСтр("ru=' (внешнеэкономический договор)';uk=' (зовнішньоекономічний договір)'"), "");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаМоментыОпределенияБазыНДС", "Заголовок", ЗаголовокГруппы);
	ЗаголовокГруппыПолучатель = НСтр("ru='Моменты определения базы НДС получателя';uk='Моменти визначення бази ПДВ одержувача'") + ?(Внешнеэкономический, НСтр("ru=' (внешнеэкономический договор)';uk=' (зовнішньоекономічний договір)'"), "");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаМоментыОпределенияБазыНДСПолучатель", "Заголовок", ЗаголовокГруппыПолучатель);
	
	// Отображаем номенклатуру
	ВидимостьНоменклатуры = Справочники.ДоговорыМеждуОрганизациями.ИспользоватьНоменклатуруЗаполненияНалоговыхНаАванс(Объект);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураЗаполненияНалоговыхНаАванс", "Видимость", ВидимостьНоменклатуры);
	
	// Отображаем моменты определения базы НДС
	ОсновнойЭлементФормы = Неопределено;
	ОсновнойЗаголовок    = Неопределено;
	ВспомогательныйОсновнойЭлементФормы = Неопределено;
	ВспомогательныйОсновнойЗаголовок    = Неопределено;
	
	ОсновнойЭлементФормыПолучатель = Неопределено;
	ОсновнойЗаголовокПолучатель    = Неопределено;
	ВспомогательныйОсновнойЭлементФормыПолучатель = Неопределено;
	ВспомогательныйОсновнойЗаголовокПолучатель    = Неопределено;
	
    Если ЗначениеЗаполнено(Объект.ТипДоговора) Тогда
		
		Если Объект.ТипДоговора = Перечисления.ТипыДоговоровМеждуОрганизациями.КупляПродажа Тогда
			
			ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
			Если Не Внешнеэкономический Тогда
				ОсновнойЗаголовок = НСтр("ru='По продаже';uk='По продажу'");
			Иначе
				ОсновнойЗаголовок = НСтр("ru='По экспорту';uk='По експорту'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоЭкспорту;
			КонецЕсли;
			
			ОсновнойЭлементФормыПолучатель = "МоментОпределенияБазыНДСПолучатель";
			Если Не Внешнеэкономический Тогда
				ОсновнойЗаголовокПолучатель = НСтр("ru='По закупке';uk='По купівлі'");
			Иначе
				ОсновнойЗаголовокПолучатель = НСтр("ru='По импорту (без таможенной декларации)';uk='По імпорту (без митної декларації)'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоЭкспорту;
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоровМеждуОрганизациями.Комиссионный Тогда
			
			Если Не Внешнеэкономический Тогда
				
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
				ОсновнойЗаголовок = НСтр("ru='Налоговый кредит по услугам комиссии';uk='Податковий кредит по послугах комісії'");
				
				ВспомогательныйОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
				ВспомогательныйОсновнойЗаголовок = НСтр("ru='Налоговые обязательства по поставке товаров на комиссию
                                                      |(авансовые платежи не поддерживаются)'
                                                      |;uk='Податкові зобов''язання з поставки товарів на комісію 
                                                      |(авансові платежі не підтримуються)'");
				МоментОпределенияБазыНДССтрокой = Строка(Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию);
				
			Иначе
				
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
				ОсновнойЗаголовок = НСтр("ru='Налоговый кредит по услугам комиссии';uk='Податковий кредит по послугах комісії'");
				МоментОпределенияБазыНДССтрокой = НСтр("ru='Не определяется';uk='Не визначається'");;
				
				ВспомогательныйОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокойДополнительно";
				ВспомогательныйОсновнойЗаголовок = НСтр("ru='Налоговые обязательства по поставке товаров на комиссию';uk='Податкові зобов''язання з поставки товарів на комісію'");
				МоментОпределенияБазыНДССтрокойДополнительно = Строка(Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке); // ПоЭкспорту 
				
			КонецЕсли;
			
			Если Не Внешнеэкономический Тогда
				
				ОсновнойЭлементФормыПолучатель = "МоментОпределенияБазыНДСПолучатель";
				ОсновнойЗаголовокПолучатель = НСтр("ru='Налоговые обязательства по услугам комиссии';uk='Податкові зобов''язання по послугах комісії'");
				
				ВспомогательныйОсновнойЭлементФормыПолучатель = "МоментОпределенияБазыНДССтрокойПолучатель";
				ВспомогательныйОсновнойЗаголовокПолучатель = НСтр("ru='Налоговый кредит по поставке товаров на комиссию
                                                      |(авансовые платежи не поддерживаются)'
                                                      |;uk='Податковий кредит з поставки товарів на комісію 
                                                      |(авансові платежі не підтримуються)'");
				МоментОпределенияБазыНДССтрокойПолучатель = Строка(Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию);
				
			Иначе
				
				ОсновнойЭлементФормыПолучатель = "МоментОпределенияБазыНДССтрокойПолучатель";
				ОсновнойЗаголовокПолучатель = НСтр("ru='Налоговые обязательства по услугам комиссии';uk='Податкові зобов''язання по послугах комісії'");
				МоментОпределенияБазыНДССтрокойПолучатель = НСтр("ru='Не определяется';uk='Не визначається'");;
				
				ВспомогательныйОсновнойЭлементФормыПолучатель = "МоментОпределенияБазыНДССтрокойДополнительноПолучатель";
				ВспомогательныйОсновнойЗаголовокПолучатель = НСтр("ru='Налоговый кредит по поставке товаров на комиссию';uk='Податковий кредит з поставки товарів на комісію'");
				МоментОпределенияБазыНДССтрокойДополнительноПолучатель = Строка(Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке); // ПоЭкспорту 
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОсновнойЭлементФормы = "ДекорацияНеУказанТипДоговора";
		ОсновнойЗаголовок = НСтр("ru='Не указан тип договора';uk='Не зазначений тип договору'");
		
	КонецЕсли;
	
	МассивМоментовОпределенияБазыНДС = Новый Массив;
	МассивМоментовОпределенияБазыНДС.Добавить("МоментОпределенияБазыНДС"); 
	МассивМоментовОпределенияБазыНДС.Добавить("МоментОпределенияБазыНДССтрокой"); 
	МассивМоментовОпределенияБазыНДС.Добавить("МоментОпределенияБазыНДССтрокойДополнительно"); 
	МассивМоментовОпределенияБазыНДС.Добавить("ДекорацияНеУказанТипДоговора"); 
	МассивМоментовОпределенияБазыНДС.Добавить("МоментОпределенияБазыНДСПолучатель"); 
	МассивМоментовОпределенияБазыНДС.Добавить("МоментОпределенияБазыНДССтрокойПолучатель"); 
	МассивМоментовОпределенияБазыНДС.Добавить("МоментОпределенияБазыНДССтрокойДополнительноПолучатель"); 
	
	// Основной элемент делаем видимым
	МассивМоментовОпределенияБазыНДС.Удалить(МассивМоментовОпределенияБазыНДС.Найти(ОсновнойЭлементФормы));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОсновнойЭлементФормы, "Видимость", Истина);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОсновнойЭлементФормы, "Заголовок", ОсновнойЗаголовок);
	
	Если ЗначениеЗаполнено(ОсновнойЭлементФормыПолучатель) Тогда
		МассивМоментовОпределенияБазыНДС.Удалить(МассивМоментовОпределенияБазыНДС.Найти(ОсновнойЭлементФормыПолучатель));
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОсновнойЭлементФормыПолучатель, "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОсновнойЭлементФормыПолучатель, "Заголовок", ОсновнойЗаголовокПолучатель);
	КонецЕсли;
	
	// Вспомогательный элемент делаем видимым
	Если ЗначениеЗаполнено(ВспомогательныйОсновнойЭлементФормы) Тогда
		МассивМоментовОпределенияБазыНДС.Удалить(МассивМоментовОпределенияБазыНДС.Найти(ВспомогательныйОсновнойЭлементФормы));
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ВспомогательныйОсновнойЭлементФормы, "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ВспомогательныйОсновнойЭлементФормы, "Заголовок", ВспомогательныйОсновнойЗаголовок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВспомогательныйОсновнойЭлементФормыПолучатель) Тогда
		МассивМоментовОпределенияБазыНДС.Удалить(МассивМоментовОпределенияБазыНДС.Найти(ВспомогательныйОсновнойЭлементФормыПолучатель));
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ВспомогательныйОсновнойЭлементФормыПолучатель, "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ВспомогательныйОсновнойЭлементФормыПолучатель, "Заголовок", ВспомогательныйОсновнойЗаголовокПолучатель);
	КонецЕсли;

	// Остальное скрываем
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивМоментовОпределенияБазыНДС, "Видимость", Ложь);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиУчетаНДСПоОрганизации()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.ОбособленноеПодразделениеПоУмолчанию      = Объект.Организация.ОбособленноеПодразделениеПоУмолчанию;
	Объект.ОтветственныйЗаВыпискуНалоговыхДокументов = Объект.Организация.ОтветственныйЗаВыпискуНалоговыхДокументов;
	Объект.НоменклатураЗаполненияНалоговыхНаАванс    = Объект.Организация.НоменклатураЗаполненияНалоговыхНаАванс;
	
	ЗаполнитьМоментОпределенияБазыНДСПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМоментОпределенияБазыНДСПоОрганизации()
	
	Объект.МоментОпределенияБазыНДС = Справочники.ДоговорыМеждуОрганизациями.ПолучитьМоментОпределенияБазыНДСПоУмолчанию(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМоментОпределенияБазыНДСПолучателя()
	
	СтруктураОбъекта = Новый Структура("Организация, ТипДоговора, ВалютаВзаиморасчетов", Объект.ОрганизацияПолучатель, Объект.ТипДоговора, Объект.ВалютаВзаиморасчетов);
	Объект.МоментОпределенияБазыНДСПолучатель = Справочники.ДоговорыМеждуОрганизациями.ПолучитьМоментОпределенияБазыНДСПоУмолчанию(СтруктураОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Локализация

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти
