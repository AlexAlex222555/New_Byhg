#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает настройки использования серий для вида номенклатуры на складе (подразделении).
//
// Параметры:
//  ВидНоменклатуры		    - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры, параметры серий которого которой нужно получить
//  ПараметрыУказанияСерий	- Структура, ФиксированнаяСтруктура - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий 
//  ЗначенияПолейСвязи		- Структура, ФиксированнаяСтруктура - 
// 
// Возвращаемое значение:
//  Структура - структура с ключами:
//  * ВидНоменклатуры  - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры, параметры серий которого нужно получить
//  * ИспользоватьСерии - Булево - Истина, если серии для вида номенклатуры используются
//  * ИспользоватьНомерСерии - Булево - Истина, если номера серий для вида номенклатуры используются
//  * ИспользоватьСрокГодностиСерии - Булево - Истина, если используется срок годности серий для вида номенклатуры
//  * ИспользоватьКоличествоСерии - Булево - Истина, если количество серии указывается
//  * ЕдиницаИзмеренияСрокаГодности - ПеречислениеСсылка.ЕдиницыИзмеренияВремени - единица измерения срока
//  годности серии.
//  * ТочностьУказанияСрокаГодностиСерии - ПеречислениеСсылка.ТочностиУказанияСрокаГодности - точность указания срока
//  годности серии.
//  * ШаблонРабочегоНаименованияСерии - Строка - шаблон рабочего наименования серии
//  * ВладелецСерий - СправочникСсылка.ВидыНоменклатуры - владелец
//  * НастройкиСерийБерутсяИзДругогоВидаНоменклатуры - Булево - Истина, если настройки серий берутся из другого вида номенклатуры
//  * ШаблонЭтикеткиСерии - СправочникСсылка.ШаблоныЭтикетокИЦенников - ссылка на шаблон этикетки серии
//  * ИспользоватьRFIDМеткиСерии - Булево - Истина, если используются RFID-метки серий
//  * ИспользоватьДатуПроизводстваСерии - Булево - Истина, если ведется учет серий вида номенклатуры
//  по датам производства.
//  * Признаки использования реквизитов серий, зависящие от локализации - Булево - Истина, если ведется учет серий вида номенклатуры
//  * ФорматнаяСтрокаСрокаГодности - Строка - форматная строка срока годности
//  * ОбязательныеДопРеквизиты - ФиксированныйМассив - массив строк наименования доп реквизитов
//  * ПолитикаУчетаСерий - СправочникСсылка.ПолитикиУчетаСерий - ссылка на политику учета серий
//  * УказыватьПриПоступлении - Булево - Истина, если серии указываются при поступлении
//  * УказыватьПриОтгрузке - Булево - Истина, если серии указываются при отгрузке
//  * УказыватьПриПланированииОтгрузки - Булево - Истина, если серии указываются при планировании отгрузки
//  * УчетСерийПоFEFO - Булево - Истина, если серии учитываются по FEFO
//  * УказыватьПоФактуОтбора - Булево - Истина, если серии учитываются по факту отбора
//  * УчитыватьОстаткиСерий - Булево - Истина, если учитываются остатки серий
//  * УчитыватьСебестоимостьПоСериям - Булево  - Истина, если учитывается себестоимость по сериям.
//
Функция НастройкиИспользованияСерий(ВидНоменклатуры, ПараметрыУказанияСерий = Неопределено, ЗначенияПолейСвязи = Неопределено) Экспорт
	
	РеквизитыВидаНоменклатуры = НастройкиИспользованияСерийСоставПолей(Истина);
	
	РеквизитыНастройкиУказанияСерий = РеквизитыНастройкиУказанияСерий();
	
	Для Каждого СтрМас Из РеквизитыНастройкиУказанияСерий Цикл
		РеквизитыВидаНоменклатуры.Вставить(СтрМас);
	КонецЦикла;
	
	РеквизитыВидаНоменклатуры.Вставить("ОсобенностьУчета");
	РеквизитыВидаНоменклатуры.Вставить("ИспользоватьСерии");
	
	Если ТипЗнч(ВидНоменклатуры) <> Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыВидаНоменклатуры, ВидНоменклатуры);
		РеквизитыВидаНоменклатуры.Вставить("ВидНоменклатуры", ВидНоменклатуры.Ссылка);
		РеквизитыВидаНоменклатуры.ВладелецСерий = ?(ВидНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры,
			ВидНоменклатуры.ВладелецСерий,
			ВидНоменклатуры.Ссылка);
		РеквизитыВидаНоменклатуры.ШаблонЭтикеткиСерии = ?(ВидНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры,
			ОбщегоНазначенияУТ.ЗначенияРеквизитовОбъектаПоУмолчанию(ВидНоменклатуры.ВладелецСерий, "ШаблонЭтикеткиСерии"),
			ВидНоменклатуры.ШаблонЭтикеткиСерии);
	Иначе
		РеквизитыВидаНоменклатуры.Вставить("ВидНоменклатуры", "Ссылка");
		РеквизитыВидаНоменклатуры.ВладелецСерий =
		"	ВЫБОР
		|		КОГДА НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
		|			ТОГДА ВладелецСерий
		|		ИНАЧЕ Ссылка
		|	КОНЕЦ";
		РеквизитыВидаНоменклатуры.ШаблонЭтикеткиСерии =
		"	ВЫБОР
		|		КОГДА НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
		|			ТОГДА ВладелецСерий.ШаблонЭтикеткиСерии
		|		ИНАЧЕ ШаблонЭтикеткиСерии
		|	КОНЕЦ";
		РеквизитыВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидНоменклатуры, РеквизитыВидаНоменклатуры);
	КонецЕсли;		
	
	НастройкиИспользованияСерий = НастройкиИспользованияСерийСоставПолей(Ложь);
	
	ЗаполнитьЗначенияСвойств(НастройкиИспользованияСерий, РеквизитыВидаНоменклатуры);
	
	ОписанияИспользованияРеквизитовСерии = ОписанияИспользованияРеквизитовСерии(НастройкиИспользованияСерий, ПараметрыУказанияСерий, ЗначенияПолейСвязи);
	
	ДляСозданиеФиксированногоМассива = Новый Массив;
	
	Для Каждого Описание Из ОписанияИспользованияРеквизитовСерии Цикл
		
		ДляСозданиеФиксированногоМассива.Добавить(Новый ФиксированнаяСтруктура(Описание));
		
	КонецЦикла;
	
	НастройкиИспользованияСерий.ОписанияИспользованияРеквизитовСерии = Новый ФиксированныйМассив(ДляСозданиеФиксированногоМассива);
	
	Если Не ЗначениеЗаполнено(НастройкиИспользованияСерий.ШаблонЭтикеткиСерии) Тогда
		НастройкиИспользованияСерий.ШаблонЭтикеткиСерии 
			= Справочники.ШаблоныЭтикетокИЦенников.ШаблонПоУмолчанию(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры);
	КонецЕсли;
	
	Если ТипЗнч(ВидНоменклатуры) = Тип("СправочникСсылка.ВидыНоменклатуры")
		И (ЗначениеЗаполнено(ЗначенияПолейСвязи)
			И ЗначенияПолейСвязи.Свойство("Склад")
			И (ЗначениеЗаполнено(ЗначенияПолейСвязи.Склад)
				Или ИспользоватьПроизводство())) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий, ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.ПустаяСсылка)) КАК ПолитикаУчетаСерий,
		|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке, ЛОЖЬ) КАК УказыватьПриПоступлении,
		|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузке, ЛОЖЬ) КАК УказыватьПриОтгрузке,
		|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки, ЛОЖЬ) КАК УказыватьПриПланированииОтгрузки,
		|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO, ЛОЖЬ) КАК УчетСерийПоFEFO,
		|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора, ЛОЖЬ) КАК УказыватьПоФактуОтбора,
		|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий, ЛОЖЬ)
		|			И (ТЧПолитикиУчетаСерий.Склад ССЫЛКА Справочник.Склады ИЛИ &ЕстьПроизводство)КАК УчитыватьОстаткиСерий,
		|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ) 
		|			И (ТЧПолитикиУчетаСерий.Склад ССЫЛКА Справочник.Склады ИЛИ &ЕстьПроизводство)
		|		КАК УчитыватьСебестоимостьПоСериям
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ТЧПолитикиУчетаСерий
		|		ПО ВидыНоменклатуры.Ссылка = ТЧПолитикиУчетаСерий.Ссылка
		|			И (ТЧПолитикиУчетаСерий.Склад = &СкладПодразделение)
		|ГДЕ
		|	ВидыНоменклатуры.Ссылка = &ВидНоменклатуры";		
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
		Запрос.УстановитьПараметр("СкладПодразделение", ЗначенияПолейСвязи.Склад);
		Запрос.УстановитьПараметр("ЕстьПроизводство", ИспользоватьПроизводство());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(НастройкиИспользованияСерий, Выборка);
		
	КонецЕсли;
	
	Если ТипЗнч(ВидНоменклатуры) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыНоменклатурыРеквизитыДляКонтроляСерий.Свойство КАК Свойство
		|ИЗ
		|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляСерий КАК ВидыНоменклатурыРеквизитыДляКонтроляСерий
		|ГДЕ
		|	ВидыНоменклатурыРеквизитыДляКонтроляСерий.Ссылка = ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
		|				ТОГДА ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).ВладелецСерий
		|			ИНАЧЕ &ВидНоменклатуры
		|		КОНЕЦ
		|	И ВидыНоменклатурыРеквизитыДляКонтроляСерий.ЭтоДопРеквизит
		|	И ВидыНоменклатурыРеквизитыДляКонтроляСерий.ЗаполнятьОбязательно";
		
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
		РеквизитыДляКонтроляСерий = Запрос.Выполнить().Выгрузить();
		
	Иначе
		Если ВидНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВидыНоменклатурыРеквизитыДляКонтроляСерий.Свойство КАК Свойство
			|ИЗ
			|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляСерий КАК ВидыНоменклатурыРеквизитыДляКонтроляСерий
			|ГДЕ
			|	ВидыНоменклатурыРеквизитыДляКонтроляСерий.Ссылка = &ВладелецСерий
			|	И ВидыНоменклатурыРеквизитыДляКонтроляСерий.ЭтоДопРеквизит
			|	И ВидыНоменклатурыРеквизитыДляКонтроляСерий.ЗаполнятьОбязательно";
			
			Запрос.УстановитьПараметр("ВладелецСерий", ВидНоменклатуры.ВладелецСерий);
			РеквизитыДляКонтроляСерий = Запрос.Выполнить().Выгрузить();
		
		Иначе
			РеквизитыДляКонтроляСерий = ВидНоменклатуры.РеквизитыДляКонтроляСерий.Выгрузить(
				Новый Структура("ЭтоДопРеквизит,ЗаполнятьОбязательно", Истина, Истина));
		КонецЕсли;
	КонецЕсли;
	
	НастройкиИспользованияСерий.ОбязательныеДопРеквизиты = Новый ФиксированныйМассив(РеквизитыДляКонтроляСерий.ВыгрузитьКолонку("Свойство")); 
	
	Возврат НастройкиИспользованияСерий;
	
КонецФункции

// Получает вид номенклатуры, если вид номенклатуры один в справочнике.
//
// Возвращаемое значение:
// 	СправочникСсылка.ВидыНоменклатуры - найденный вид номенклатуры
// 	Неопределено - если видов номенклатуры нет или видов номенклатуры больше одного.
//
Функция ВидНоменклатурыПоУмолчанию() Экспорт
	
	Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	НЕ ВидыНоменклатуры.ПометкаУдаления
	|	И НЕ ВидыНоменклатуры.ЭтоГруппа";
	
	Запрос = Новый Запрос(Текст);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ВидНоменклатуры = Выборка.ВидНоменклатуры;
	Иначе
		ВидНоменклатуры = Неопределено;
	КонецЕсли;
	
	Возврат ВидНоменклатуры;
	
КонецФункции // ВидНоменклатуры()

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//	Массив из Строка - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("ТипНоменклатуры; ТипНоменклатуры");
	Результат.Добавить("ИспользованиеХарактеристик");
	Результат.Добавить("ИспользоватьХарактеристики");
	Результат.Добавить("ИспользоватьСерии; ВариантЗаданияНастроекСерий");
	Результат.Добавить("ПолитикиУчетаСерий; ПолитикиУчетаСерийДобавитьСкладВПолитикиУчетаСерий,ПолитикиУчетаСерийДобавитьПодразделениеВПолитикиУчетаСерий");
	Результат.Добавить("НастройкаИспользованияСерий");
	Результат.Добавить("ТочностьУказанияСрокаГодностиСерии");
	Результат.Добавить("ВариантОформленияПродажи");
	Результат.Добавить("ВариантПредставленияНабораВПечатныхФормах");
	Результат.Добавить("ВариантРасчетаЦеныНабора;ГруппаЦенаНабора");
	Результат.Добавить("ВладелецХарактеристик");
	Результат.Добавить("ВладелецСерий");
	Результат.Добавить("НастройкиСерийБерутсяИзДругогоВидаНоменклатуры");
	Результат.Добавить("ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры");
	Результат.Добавить("ВладелецТоварныхКатегорий; НастройкаТоварныхКатегорий");
	Результат.Добавить("ЕстьИндивидуальныеНастройкиПолитикиУчетаСерий; ЕстьИндивидуальныеНастройкиПолитикиУчетаСерий");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Справочники.Номенклатура.РеквизитыПризнаковОсобенностейУчета(Метаданные.Справочники.ВидыНоменклатуры));
	
	Возврат Результат;
	
КонецФункции

// Возвращает предустановленные виды номенклатуры.
//
// Возвращаемое значение:
//	Массив из СправочникСсылка.ВидыНоменклатуры - 
//
Функция ПолучитьПредустановленныеВидыНоменклатуры() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МассивВидов = Новый Массив;
	
	ДобавитьПредустановленныйВидНоменклатуры(МассивВидов, Перечисления.ТипыНоменклатуры.Товар, НСтр("ru='Товар';uk='Товар'"));
	ДобавитьПредустановленныйВидНоменклатуры(МассивВидов, Перечисления.ТипыНоменклатуры.Услуга, НСтр("ru='Услуга';uk='Послуга'"));
	
	Возврат МассивВидов;

КонецФункции 

// Добавляет в массив вид номенклатуры с указанным типом.
// Если вида номенклатуры с таким типов нет в ИБ, то он создается.
//
// Параметры:
//	МассивВидов - Массив                              - массив видов номенклатуры,
//	Тип         - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры,
//	Имя         - Строка                              - имя нового вида номенклатуры.
//
Процедура ДобавитьПредустановленныйВидНоменклатуры(МассивВидов, Тип, Имя) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ТипНоменклатуры = &Тип
	|	И НЕ ВидыНоменклатуры.ПометкаУдаления";
						  
	Запрос.УстановитьПараметр("Тип", Тип);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		НовыйВид = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйВид.Заполнить(Неопределено);
		НовыйВид.Наименование = Имя;
		НовыйВид.ТипНоменклатуры = Тип;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры") Тогда
			НовыйВид.ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.ПолучитьГруппуДоступаПоУмолчанию(НовыйВид);
		КонецЕсли;
		НовыйВид.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		
		ЗаполнитьРеквизитыДляКонтроля(НовыйВид, "Номенклатура");
		
		НастройкаЕдИзмерения = НовыйВид.РеквизитыДляКонтроляНоменклатуры.Найти("ЕдиницаИзмерения");
		Если НастройкаЕдИзмерения <> Неопределено Тогда
			НастройкаЕдИзмерения.ОтображатьПриСоздании = Истина;
			НастройкаЕдИзмерения.ЗаполнятьОбязательно = Истина;
		КонецЕсли;
		
		НовыйВид.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		НовыйВид.ЕдиницаДляОтчетов = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		
		НовыйВид.Записать();
		
		МассивВидов.Добавить(НовыйВид.Ссылка);
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		МассивВидов.Добавить(Выборка.Ссылка);
		
	КонецЕсли;	

КонецПроцедуры 

// Параметры:
// 	ДанныеЗаполнения - Структура - структура данных для заполнения
// 	ВидНоменклатурыСсылка - СправочникСсылка.ВидыНоменклатуры - ссылка на созданный объект
// 
Процедура СоздатьВидНоменклатуры(ДанныеЗаполнения, ВидНоменклатурыСсылка) Экспорт
	
	ВидНоменклатурыОбъект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
	
	ВидНоменклатурыОбъект.Заполнить(Неопределено);
	ВидНоменклатурыОбъект.УстановитьНовыйКод();
	
	ВидНоменклатурыОбъект.Наименование      = ДанныеЗаполнения.Наименование;
	ВидНоменклатурыОбъект.СтавкаНДС         = ДанныеЗаполнения.СтавкаНДС;
	ВидНоменклатурыОбъект.ТипНоменклатуры   = ДанныеЗаполнения.ТипНоменклатуры;
	ВидНоменклатурыОбъект.Описание          = ДанныеЗаполнения.Описание;
	ВидНоменклатурыОбъект.ЕдиницаИзмерения  = ДанныеЗаполнения.ЕдиницаИзмерения;
	ВидНоменклатурыОбъект.ЕдиницаДляОтчетов = ДанныеЗаполнения.ЕдиницаДляОтчетов;
	ВидНоменклатурыОбъект.Родитель          = ДанныеЗаполнения.Родитель;
	ВидНоменклатурыОбъект.ИспользоватьХарактеристики = ДанныеЗаполнения.ИспользоватьХарактеристики;
	ВидНоменклатурыОбъект.ИспользованиеХарактеристик = ДанныеЗаполнения.ИспользованиеХарактеристик;
	ВидНоменклатурыОбъект.ВариантОформленияПродажи 	 = ДанныеЗаполнения.ВариантОформленияПродажи;
	
	Если Справочники.ГруппыДоступаНоменклатуры.ИспользуютсяГруппыДоступа() Тогда
		ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.ПолучитьГруппуДоступаПоУмолчанию(ВидНоменклатурыОбъект);
		ДанныеЗаполнения.Свойство("ГруппаДоступа", ГруппаДоступа);
		ВидНоменклатурыОбъект.ГруппаДоступа = ГруппаДоступа;
	КонецЕсли;
	
	ЗаполнитьРеквизитыДляКонтроля(ВидНоменклатурыОбъект, "Номенклатура");
	
	НастройкаЕдИзмерения = ВидНоменклатурыОбъект.РеквизитыДляКонтроляНоменклатуры.Найти("ЕдиницаИзмерения");
	Если НастройкаЕдИзмерения <> Неопределено Тогда
		НастройкаЕдИзмерения.ОтображатьПриСоздании = Истина;
		НастройкаЕдИзмерения.ЗаполнятьОбязательно = Истина;
	КонецЕсли;
	
	ВидНоменклатурыОбъект.Записать();
	
	ВидНоменклатурыСсылка = ВидНоменклатурыОбъект.Ссылка;
	
КонецПроцедуры

// Возвращает значение единицы измерения срока годности по значению точности указания срока годности серии.
//
// Параметры:
//	ТочностьУказанияСрокаГодности - ПеречислениеСсылка.ТочностиУказанияСрокаГодности - Точность указания срока 
//									годности серии вида номенклатуры.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ЕдиницыИзмеренияВремени - единица измерения срока годности по значению точности указания 
//												срока годности серии.
//
Функция ЕдиницаИзмеренияСрокаГодности(ТочностьУказанияСрокаГодности) Экспорт
	
	ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.ПустаяСсылка();
	
	Если ТочностьУказанияСрокаГодности = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев Тогда
		ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Месяц;
	ИначеЕсли ТочностьУказанияСрокаГодности = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
		ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Сутки;
	ИначеЕсли ТочностьУказанияСрокаГодности = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов Тогда
		ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Час;
	КонецЕсли;
	
	Возврат ЕдиницаИзмеренияСрокаГодности;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ ИСТИНА
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЭтоГруппа ИЛИ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	НоменклатураВызовСервера.ВидыНоменклатурыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

#Область ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("95175cb0-81fc-4886-8255-9625a8eb7e66");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыНоменклатуры.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет реквизиты вариантов настроек серий. Также перезаполняет некорректно заполненные табличные части ""Политики учета серий"". Заполняет реквизит СтавкаНДС с типом СправочникСсылка.СтавкиНДС.
                                   |Пока работа обработчика не завершена нельзя записывать элементы справочников ""Виды номенклатуры"", ""Склады"" и ""Структура предприятия"".'
                                   |;uk='Заповнює реквізити налаштувань серій. Також перезаповнює некоректно заповнені табличні частини ""Політики обліку серій"". Заповнює реквізит СтавкаНДС з типом СправочникСсылка.СтавкиНДС.
                                   |Поки робота обробника не завершена, не можна записувати елементи довідників ""Види номенклатури"", ""Склади"" та ""Структура підприємства"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.Склады.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.СтруктураПредприятия.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	
#КонецОбласти

#Область ОбработатьДополнительныеСвойстваИНаборыСвойств

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДополнительныеСвойстваИНаборыСвойств";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("58b1e867-7166-45cf-9704-efbeeaac8e33");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыНоменклатуры.ЗарегистрироватьДополнительныеСвойстваИНаборыСвойствКОбновлению";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = ""
	//++ Локализация
		+ "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения,"
	//-- Локализация
	//++ Локализация
		+ "Справочник.НаборыДополнительныхРеквизитовИСведений"
	//-- Локализация
	;
	Обработчик.ИзменяемыеОбъекты = ""
	//++ Локализация
		+ "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения,"
	//-- Локализация
	//++ Локализация
		+ "Справочник.НаборыДополнительныхРеквизитовИСведений"
	//-- Локализация
	;
	Обработчик.БлокируемыеОбъекты = ""
	//++ Локализация
		+ "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения,"
	//-- Локализация
	//++ Локализация
		+ "Справочник.НаборыДополнительныхРеквизитовИСведений"
	//-- Локализация
	;
	Обработчик.Комментарий = НСтр("ru='Делает общими все дополнительные реквизиты и сведения указанные для номенклатуры, характеристик номенклатуры и серий номенклатуры.';uk='Робить спільними всі додаткові реквізити та відомості, які зазначені для номенклатури, характеристик номенклатури та серій номенклатури.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	//++ Локализация

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "УправлениеСвойствамиПереопределяемый.УстановитьИспользованиеСвойств_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	//-- Локализация
	
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	//-- Локализация
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДополнительныеРеквизитыНоменклатурыДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбновитьПредставленияПредопределенныхЭлементов";
	НоваяСтрока.Порядок = "Любой";   
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбработатьНаборыДопСвойств";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыКА.УстановитьПараметрыНаборовСвойств";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти


#Область ОбработатьДополнительныеРеквизитыНоменклатурыДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДополнительныеРеквизитыНоменклатурыДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3613d8b4-8e4c-4b51-bc30-de49905df84a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыНоменклатуры.ЗарегистрироватьДополнительныеРеквизитыНоменклатурыКОбновлению";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Переносит настройки контроля заполнения дополнительных реквизитов из табличной части видов номенклатуры в элементы плана видов характеристик ""Дополнительные реквизиты и сведения""';uk='Переносить настройки контролю заповнення додаткових реквізитів з табличній частині видів номенклатури в елементи плану видів характеристик ""Додаткові реквізити та відомості""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДополнительныеСвойстваИНаборыСвойств";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

КонецПроцедуры

// Вызывается после окончания загрузки данных из локальной версии
// в область данных сервиса или наоборот.
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	(ВидыНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры
	|			ИЛИ ВидыНоменклатуры.ЗапретРедактированияНаименованияДляПечатиХарактеристики
	|			ИЛИ ВидыНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры
	|			ИЛИ ВидыНоменклатуры.ЗапретРедактированияРабочегоНаименованияХарактеристики)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ВидыНоменклатуры
		
		СправочникОбъект.ЗапретРедактированияНаименованияДляПечатиНоменклатуры   = Ложь;
		СправочникОбъект.ЗапретРедактированияНаименованияДляПечатиХарактеристики = Ложь;
		СправочникОбъект.ЗапретРедактированияРабочегоНаименованияНоменклатуры    = Ложь;
		СправочникОбъект.ЗапретРедактированияРабочегоНаименованияХарактеристики  = Ложь;
		
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ВидыНоменклатуры";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|	И НЕ ВидыНоменклатуры.УдалитьСтавкаНДС = &ПустаяСтавкаНДС";
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ИспользоватьСерии
	|	И (ВидыНоменклатуры.ПолитикиУчетаСерий.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.ПустаяСсылка)
	|		И ВидыНоменклатуры.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|	)
	|";
	
	УчетНДСЛокализация.УстановитьПараметрЗапросаПустаяСтавкаНДСПеречислением(Запрос);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ ВТСкладыПодразделения
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Склад
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК Подразделения
	|ГДЕ
	|	Подразделения.ПроизводственноеПодразделение
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПолитикиУчетаСерий.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСкладыПодразделения КАК СкладыПодразделения
	|			ПО ПолитикиУчетаСерий.Склад = СкладыПодразделения.Склад
	|	ГДЕ
	|		СкладыПодразделения.Склад ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыНоменклатуры.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|	ГДЕ
	|		ВидыНоменклатуры.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыНоменклатуры.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|	ГДЕ
	|		ВидыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|		И (ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыНоменклатуры.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|	ГДЕ
	|		ВидыНоменклатуры.ИспользоватьСрокГодностиСерии
	|		И ВидыНоменклатуры.ЕдиницаИзмеренияСрокаГодности = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка)
	|	
	|	) КАК ДанныеДляОбработки";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта        = "Справочник.ВидыНоменклатуры";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
		Параметры.Очередь, 
		ПолноеИмяОбъекта, 
		МенеджерВТ
	);
	
	ТекстЗапросаТаблицаСкладов = "
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ ВТСкладыПодразделения
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Склад
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК Подразделения
	|ГДЕ
	|	Подразделения.ПроизводственноеПодразделение
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СкладыПодразделения.Склад  КАК Склад
	|ИЗ
	|	ВТСкладыПодразделения КАК СкладыПодразделения
	|";
	
	ЗапросаТаблицаСкладов = Новый Запрос(ТекстЗапросаТаблицаСкладов);
	ПолнаяТаблицаСкладов = ЗапросаТаблицаСкладов.Выполнить().Выгрузить();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	ОбновляемыеДанные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбновляемыеДанные
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|;
	|//////////////////////////////////////////////////////////////////////////////// 
	|ВЫБРАТЬ 
	|	ВидыНоменклатуры.ВладелецСерий КАК ВладелецСерий,
	|	ОбновляемыеДанные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОбъектыДляОбработки
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО ОбновляемыеДанные.Ссылка = ВидыНоменклатуры.Ссылка
	|;
	|//////////////////////////////////////////////////////////////////////////////// 
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка              							 КАК Ссылка,
	|	ВложенныйЗапрос.Ссылка.ВерсияДанных 							 КАК ВерсияДанных,
	|	МАКСИМУМ(ВложенныйЗапрос.Склад)               					 КАК Склад,
	|	МАКСИМУМ(ВложенныйЗапрос.ВладелецСерий)       					 КАК ВладелецСерий,
	|	МАКСИМУМ(ВложенныйЗапрос.ПолитикаУчетаСерийВладельца) 			 КАК ПолитикаУчетаСерийВладельца,
	|	МАКСИМУМ(ВложенныйЗапрос.ЗаполнитьПолитикуПоВладельцу) 			 КАК ЗаполнитьПолитикуПоВладельцу,
	|	МАКСИМУМ(ВложенныйЗапрос.ЗаполнитьСтавкуНДС) 					 КАК ЗаполнитьСтавкуНДС,
	|	МАКСИМУМ(ВложенныйЗапрос.ЗаполнитьОсобенностьУчета) 			 КАК ЗаполнитьОсобенностьУчета,
	|	МАКСИМУМ(ВложенныйЗапрос.ЗаполнитьЕдиницуИзмеренияСрокаГодности) КАК ЗаполнитьЕдиницуИзмеренияСрокаГодности
	|ИЗ
	|   (
	|	ВЫБРАТЬ
	|		ОбъектыДляОбработки.Ссылка               КАК Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|		NULL       								 КАК ВладелецСерий,
	|		NULL 									 КАК ПолитикаУчетаСерийВладельца,
	|		ЛОЖЬ                                     КАК ЗаполнитьПолитикуПоВладельцу,
	|		ЛОЖЬ                                     КАК ЗаполнитьСтавкуНДС,
	|		ИСТИНА                                   КАК ЗаполнитьОсобенностьУчета,
	|		ЛОЖЬ                                     КАК ЗаполнитьЕдиницуИзмеренияСрокаГодности
	|	ИЗ
	|		ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|				ПО ОбъектыДляОбработки.Ссылка = ВидыНоменклатуры.Ссылка
	|	ГДЕ
	|		ВидыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|		И (ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ОбъектыДляОбработки.Ссылка               КАК Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|		NULL       								 КАК ВладелецСерий,
	|		NULL 									 КАК ПолитикаУчетаСерийВладельца,
	|		ЛОЖЬ                                     КАК ЗаполнитьПолитикуПоВладельцу,
	|		ЛОЖЬ                                     КАК ЗаполнитьСтавкуНДС,
	|		ЛОЖЬ                                     КАК ЗаполнитьОсобенностьУчета,
	|		ИСТИНА                                   КАК ЗаполнитьЕдиницуИзмеренияСрокаГодности
	|	ИЗ
	|		ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|				ПО ОбъектыДляОбработки.Ссылка = ВидыНоменклатуры.Ссылка
	|	ГДЕ
	|		ВидыНоменклатуры.ИспользоватьСрокГодностиСерии
	|		И ВидыНоменклатуры.ЕдиницаИзмеренияСрокаГодности = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВТОбъектыДляОбработки.Ссылка КАК Ссылка,
	|		ПолитикиУчетаСерий.Склад КАК Склад,
	|		ВТОбъектыДляОбработки.ВладелецСерий      КАК ВладелецСерий,
	|		ПолитикиУчетаСерий.ПолитикаУчетаСерий    КАК ПолитикаУчетаСерийВладельца,
	|		ИСТИНА                                   КАК ЗаполнитьПолитикуПоВладельцу,
	|		ЛОЖЬ                                     КАК ЗаполнитьСтавкуНДС,
	|		ЛОЖЬ                                     КАК ЗаполнитьОсобенностьУчета,
	|		ЛОЖЬ                                     КАК ЗаполнитьЕдиницуИзмеренияСрокаГодности
	|	ИЗ
	|		ВТОбъектыДляОбработки КАК ВТОбъектыДляОбработки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоВидыНоменклатуры КАК ВТЗаблокированоВидыНоменклатурыВладельцыСерий
	|			ПО ВТОбъектыДляОбработки.ВладелецСерий = ВТЗаблокированоВидыНоменклатурыВладельцыСерий.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ПО ВТОбъектыДляОбработки.ВладелецСерий = ПолитикиУчетаСерий.Ссылка
	|	ГДЕ
	|		ВТЗаблокированоВидыНоменклатурыВладельцыСерий.Ссылка ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыНоменклатуры.Ссылка 				КАК Ссылка,
	|		NULL 									КАК Склад,
	|		NULL 									КАК ВладелецСерий,
	|		NULL    								КАК ПолитикаУчетаСерийВладельца,
	|		ЛОЖЬ                                  	КАК ЗаполнитьПолитикуПоВладельцу,
	|		ИСТИНА                                  КАК ЗаполнитьСтавкуНДС,
	|		ЛОЖЬ                                    КАК ЗаполнитьОсобенностьУчета,
	|		ЛОЖЬ                                    КАК ЗаполнитьЕдиницуИзмеренияСрокаГодности
	|	ИЗ
	|		ВТОбъектыДляОбработки КАК ВТОбъектыДляОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО ВТОбъектыДляОбработки.Ссылка = ВидыНоменклатуры.Ссылка
	|	ГДЕ
	|		ВидыНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|		И НЕ ВидыНоменклатуры.УдалитьСтавкаНДС = &ПустаяСтавкаНДС
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	УчетНДСЛокализация.УстановитьПараметрЗапросаПустаяСтавкаНДСПеречислением(Запрос);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ПараметрыПоискаСклада = Новый Структура("Склад");
	
	Выборка = Запрос.Выполнить().Выбрать();
	 
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Если ЗначениеЗаполнено(Выборка.ВладелецСерий) Тогда
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ВладелецСерий);
			КонецЕсли;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Выборка.Ссылка,
				Выборка.ВерсияДанных,
				Параметры.Очередь
			);
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если Не ЗначениеЗаполнено(СправочникОбъект.СтавкаНДС) Тогда
				СправочникОбъект.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(СправочникОбъект.УдалитьСтавкаНДС);
				ОбъектИзменен = Истина;
			КонецЕсли;  
			
			Если Не ЗначениеЗаполнено(СправочникОбъект.ПолитикаУчетаСерий) Тогда
				СправочникОбъект.ПолитикаУчетаСерий = Справочники.ПолитикиУчетаСерий.СерииНеИспользуются;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если Выборка.ЗаполнитьОсобенностьУчета Тогда
				СправочникОбъект.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом;
				
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если Выборка.ЗаполнитьЕдиницуИзмеренияСрокаГодности Тогда
				СправочникОбъект.ЕдиницаИзмеренияСрокаГодности = Справочники.ВидыНоменклатуры.ЕдиницаИзмеренияСрокаГодности(
					СправочникОбъект.ТочностьУказанияСрокаГодностиСерии
				);
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если СправочникОбъект.ИспользоватьСерии Тогда
				Если СправочникОбъект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры Тогда
					// заполняем табличную часть ПолитикиУчетаСерий из вида номенклатуры-владельца
					СправочникОбъект.ПолитикиУчетаСерий.Очистить();
					Пока Выборка.Следующий() Цикл
						СтрТабл = СправочникОбъект.ПолитикиУчетаСерий.Добавить();
						СтрТабл.ПолитикаУчетаСерий = Выборка.ПолитикаУчетаСерийВладельца;
						СтрТабл.Склад = Выборка.Склад;
					КонецЦикла;
					ОбъектИзменен = Истина;
						
				КонецЕсли;
				
				// дополняем табличную часть ПолитикиУчетаСерий 
				// из полной таблицы всех существующих складов
				// недостающими складами
				ПараметрыПоискаСклада = Новый Структура;
				Для Каждого ДобавляемыйСклад Из ПолнаяТаблицаСкладов Цикл
					Если НЕ ЗначениеЗаполнено(ДобавляемыйСклад) Тогда
						Продолжить;
					КонецЕсли;	
					ПараметрыПоискаСклада.Вставить("Склад", ДобавляемыйСклад);
					Найдено = СправочникОбъект.ПолитикиУчетаСерий.НайтиСтроки(ПараметрыПоискаСклада);
					Если Найдено.Количество() = 0 Тогда
						НоваяСтрока = СправочникОбъект.ПолитикиУчетаСерий.Добавить();
						НоваяСтрока.Склад = ДобавляемыйСклад;
						НоваяСтрока.ПолитикаУчетаСерий = Справочники.ПолитикиУчетаСерий.СерииНеИспользуются;
						ОбъектИзменен = Истина;
					КонецЕсли; 
				КонецЦикла; 
			Иначе	
				СправочникОбъект.ПолитикаУчетаСерий = Справочники.ПолитикиУчетаСерий.СерииНеИспользуются;
				СправочникОбъект.ПолитикиУчетаСерий.Очистить();
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			ПараметрыПоискаСклада = Новый Структура;
			Для Каждого ДобавляемыйСклад Из ПолнаяТаблицаСкладов Цикл
				Если НЕ ЗначениеЗаполнено(ДобавляемыйСклад) Тогда
					Продолжить;
				КонецЕсли;	
				ПараметрыПоискаСклада.Вставить("Склад", ДобавляемыйСклад);
				Найдено = СправочникОбъект.ПолитикиУчетаСерий.НайтиСтроки(ПараметрыПоискаСклада);
				Если Найдено.Количество() = 0 Тогда
					НоваяСтрока = СправочникОбъект.ПолитикиУчетаСерий.Добавить();
					НоваяСтрока.Склад = ДобавляемыйСклад;
					НоваяСтрока.ПолитикаУчетаСерий = Справочники.ПолитикиУчетаСерий.СерииНеИспользуются;
					ОбъектИзменен = Истина;
				КонецЕсли; 
			КонецЦикла; 
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры



Процедура ЗарегистрироватьДополнительныеСвойстваИНаборыСвойствКОбновлению(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НаборыСвойств.НаборСвойств КАК НаборСвойств
	|ПОМЕСТИТЬ ВТНаборыСвойствНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВидыНоменклатуры.НаборСвойств КАК НаборСвойств
	|	ИЗ
	|		Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыНоменклатуры.НаборСвойствСерий
	|	ИЗ
	|		Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыНоменклатуры.НаборСвойствХарактеристик
	|	ИЗ
	|		Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ОбщийНаборСвойствНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ОбщийНаборСвойствХарактеристик
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ОбщийНаборСвойствСерий) КАК НаборыСвойств
	|ГДЕ
	|	НаборыСвойств.НаборСвойств <> ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств В
	|			(ВЫБРАТЬ
	|				ВТНаборыСвойствНоменклатуры.НаборСвойств
	|			ИЗ
	|				ВТНаборыСвойствНоменклатуры КАК ВТНаборыСвойствНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НаборыСвойств.НаборСвойств КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка КАК НаборСвойств
	|	ИЗ
	|		Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|			ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|				И (НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ДополнительныеРеквизитыИСведения.НаборСвойств
	|					ИЛИ ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка))
	|	ГДЕ
	|		ДополнительныеРеквизитыИСведения.Ссылка ЕСТЬ NULL
	|		И НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТНаборыСвойствНоменклатуры.НаборСвойств
	|				ИЗ
	|					ВТНаборыСвойствНоменклатуры КАК ВТНаборыСвойствНоменклатуры)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка
	|	ИЗ
	|		Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|			ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|				И (НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ДополнительныеРеквизитыИСведения.НаборСвойств
	|					ИЛИ ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка))
	|	ГДЕ
	|		ДополнительныеРеквизитыИСведения.Ссылка ЕСТЬ NULL
	|		И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТНаборыСвойствНоменклатуры.НаборСвойств
	|				ИЗ
	|					ВТНаборыСвойствНоменклатуры КАК ВТНаборыСвойствНоменклатуры)) КАК НаборыСвойств";
	
	Запрос.УстановитьПараметр("ОбщийНаборСвойствНоменклатуры", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
	Запрос.УстановитьПараметр("ОбщийНаборСвойствХарактеристик", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие);
	Запрос.УстановитьПараметр("ОбщийНаборСвойствСерий", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Результаты[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Результаты[2].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДополнительныеСвойстваИНаборыСвойств(Параметры) Экспорт
	
	// Свойств и наборов не может быть очень много, при этом свойства и наборы нужно записывать связанно
	// Сделаем это все в одной транзакции
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметрыОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыОбработки.ВыбиратьПорциями = Ложь;
	
	РезультатСозданияВТНаборов = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
	    "Справочник.НаборыДополнительныхРеквизитовИСведений",
		МенеджерВТ,
		ДополнительныеПараметрыОбработки);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
	|	ДополнительныеРеквизитыИСведения.ПометкаУдаления КАК ПометкаУдаления,
	|	ДополнительныеРеквизитыИСведения.НаборСвойств КАК НаборСвойств
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств В
	|			(ВЫБРАТЬ
	|				ВТНаборы.Ссылка
	|			ИЗ
	|				ВТДляОбработкиНаборыДополнительныхРеквизитовИСведений КАК ВТНаборы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаборСвойств
	|ИТОГИ ПО
	|	НаборСвойств";
	
	ВыборкаПоНаборам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаСвойствДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь,
		"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения");
	
	НачатьТранзакцию();
	
	Попытка
		ИдетОбработкаНаборов = Истина;
		Пока ВыборкаПоНаборам.Следующий() Цикл
			
			НаборОбъект = ВыборкаПоНаборам.НаборСвойств.ПолучитьОбъект();
			ОбъектИзменен = Ложь;
			
			Если НаборОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоНаборам.НаборСвойств);
				Продолжить;
			КонецЕсли;
			
			ВыборкаПоСвойствам = ВыборкаПоНаборам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСвойствам.Следующий() Цикл
				
				Если ВыборкаПоСвойствам.ЭтоДополнительноеСведение Тогда
					ТЧНабора = НаборОбъект.ДополнительныеСведения;
				Иначе
					ТЧНабора = НаборОбъект.ДополнительныеРеквизиты;
				КонецЕсли;
				
				НайденныеСтроки = ТЧНабора.НайтиСтроки(Новый Структура("Свойство", ВыборкаПоСвойствам.Свойство));
				Если НайденныеСтроки.Количество() <> 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТЧНабора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоСвойствам);
				
				ОбъектИзменен = Истина;
				
			КонецЦикла;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоНаборам.НаборСвойств);
			КонецЕсли;
			
		КонецЦикла;
		
		НаборыКОтметкеОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь,
			"Справочник.НаборыДополнительныхРеквизитовИСведений",
			ДополнительныеПараметрыОбработки);
		
		Пока НаборыКОтметкеОбработки.Следующий() Цикл
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборыКОтметкеОбработки.Ссылка);
		КонецЦикла;				
		
		ИдетОбработкаНаборов = Ложь;
		
		Пока ВыборкаСвойствДляОбработки.Следующий() Цикл
			
			СвойствоОбъект = ВыборкаСвойствДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если СвойствоОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаСвойствДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СвойствоОбъект);
			
		КонецЦикла;
			
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		Если ИдетОбработкаНаборов Тогда
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаПоНаборам.НаборСвойств);
		Иначе
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаСвойствДляОбработки.Ссылка);
		КонецЕсли;
			
	КонецПопытки;
	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь,
		"Справочник.НаборыДополнительныхРеквизитовИСведений"
	)
	И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь,
		"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения"
	);

КонецПроцедуры


Процедура ЗарегистрироватьДополнительныеРеквизитыНоменклатурыКОбновлению(Параметры) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СвойстваВиды.Свойство КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВложенныйЗапрос.Контроль) КАК Контроль,
	|		ВложенныйЗапрос.Свойство КАК Свойство,
	|		ВложенныйЗапрос.ВидНоменклатуры КАК ВидНоменклатуры
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РеквизитыДляКонтроляНоменклатуры.Свойство КАК Свойство,
	|			РеквизитыДляКонтроляНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|			1 КАК Контроль
	|		ИЗ
	|			Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроляНоменклатуры
	|		ГДЕ
	|			РеквизитыДляКонтроляНоменклатуры.ЗаполнятьОбязательно
	|			И РеквизитыДляКонтроляНоменклатуры.Свойство В
	|					(ВЫБРАТЬ
	|						ТЧДополнительныеРеквизиты.Свойство
	|					ИЗ
	|						Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТЧДополнительныеРеквизиты
	|					ГДЕ
	|						ТЧДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДополнительныеРеквизитыИСведения.Ссылка,
	|			ЕСТЬNULL(ТЧЗависимостиДополнительныхРеквизитов.Значение, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)),
	|			-1
	|		ИЗ
	|			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ТЧЗависимостиДополнительныхРеквизитов
	|				ПО ДополнительныеРеквизитыИСведения.Ссылка = ТЧЗависимостиДополнительныхРеквизитов.Ссылка
	|					И (ТЧЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""ЗаполнятьОбязательно"")
	|					И (ТЧЗависимостиДополнительныхРеквизитов.Условие = ""ВСписке"")
	|					И (ТЧЗависимостиДополнительныхРеквизитов.Реквизит = ""ВидНоменклатуры"")
	|					И (ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно)
	|		ГДЕ
	|			ДополнительныеРеквизитыИСведения.Ссылка В
	|					(ВЫБРАТЬ
	|						ТЧДополнительныеРеквизиты.Свойство
	|					ИЗ
	|						Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТЧДополнительныеРеквизиты
	|					ГДЕ
	|						ТЧДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие))) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Свойство,
	|		ВложенныйЗапрос.ВидНоменклатуры
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВложенныйЗапрос.Контроль) <> 0 И
	|		НЕ(ВложенныйЗапрос.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|				И СУММА(ВложенныйЗапрос.Контроль) < 0)) КАК СвойстваВиды
	|
	|СГРУППИРОВАТЬ ПО
	|	СвойстваВиды.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваВиды.Свойство
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВложенныйЗапрос.Контроль) КАК Контроль,
	|		ВложенныйЗапрос.Свойство КАК Свойство,
	|		ВложенныйЗапрос.ВидНоменклатуры КАК ВидНоменклатуры
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РеквизитыДляКонтроляХарактеристик.Свойство КАК Свойство,
	|			РеквизитыДляКонтроляХарактеристик.Ссылка КАК ВидНоменклатуры,
	|			1 КАК Контроль
	|		ИЗ
	|			Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляХарактеристик КАК РеквизитыДляКонтроляХарактеристик
	|		ГДЕ
	|			РеквизитыДляКонтроляХарактеристик.ЗаполнятьОбязательно
	|			И РеквизитыДляКонтроляХарактеристик.Свойство В
	|					(ВЫБРАТЬ
	|						ТЧДополнительныеРеквизиты.Свойство
	|					ИЗ
	|						Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТЧДополнительныеРеквизиты
	|					ГДЕ
	|						ТЧДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДополнительныеРеквизитыИСведения.Ссылка,
	|			ЕСТЬNULL(ТЧЗависимостиДополнительныхРеквизитов.Значение, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)),
	|			-1
	|		ИЗ
	|			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ТЧЗависимостиДополнительныхРеквизитов
	|				ПО ДополнительныеРеквизитыИСведения.Ссылка = ТЧЗависимостиДополнительныхРеквизитов.Ссылка
	|					И (ТЧЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""ЗаполнятьОбязательно"")
	|					И (ТЧЗависимостиДополнительныхРеквизитов.Условие = ""ВСписке"")
	|					И (ТЧЗависимостиДополнительныхРеквизитов.Реквизит = ""ВидНоменклатуры"")
	|					И (ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно)
	|		ГДЕ
	|			ДополнительныеРеквизитыИСведения.Ссылка В
	|					(ВЫБРАТЬ
	|						ТЧДополнительныеРеквизиты.Свойство
	|					ИЗ
	|						Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТЧДополнительныеРеквизиты
	|					ГДЕ
	|						ТЧДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие))) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Свойство,
	|		ВложенныйЗапрос.ВидНоменклатуры
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВложенныйЗапрос.Контроль) <> 0 И
	|		НЕ(ВложенныйЗапрос.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|				И СУММА(ВложенныйЗапрос.Контроль) < 0)) КАК СвойстваВиды
	|
	|СГРУППИРОВАТЬ ПО
	|	СвойстваВиды.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваВиды.Свойство
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВложенныйЗапрос.Контроль) КАК Контроль,
	|		ВложенныйЗапрос.Свойство КАК Свойство,
	|		ВложенныйЗапрос.ВидНоменклатуры КАК ВидНоменклатуры
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РеквизитыДляКонтроляСерий.Свойство КАК Свойство,
	|			РеквизитыДляКонтроляСерий.Ссылка КАК ВидНоменклатуры,
	|			1 КАК Контроль
	|		ИЗ
	|			Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляСерий КАК РеквизитыДляКонтроляСерий
	|		ГДЕ
	|			РеквизитыДляКонтроляСерий.ЗаполнятьОбязательно
	|			И РеквизитыДляКонтроляСерий.Свойство В
	|					(ВЫБРАТЬ
	|						ТЧДополнительныеРеквизиты.Свойство
	|					ИЗ
	|						Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТЧДополнительныеРеквизиты
	|					ГДЕ
	|						ТЧДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДополнительныеРеквизитыИСведения.Ссылка,
	|			ЕСТЬNULL(ТЧЗависимостиДополнительныхРеквизитов.Значение, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)),
	|			-1
	|		ИЗ
	|			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ТЧЗависимостиДополнительныхРеквизитов
	|				ПО ДополнительныеРеквизитыИСведения.Ссылка = ТЧЗависимостиДополнительныхРеквизитов.Ссылка
	|					И (ТЧЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""ЗаполнятьОбязательно"")
	|					И (ТЧЗависимостиДополнительныхРеквизитов.Условие = ""ВСписке"")
	|					И (ТЧЗависимостиДополнительныхРеквизитов.Реквизит = ""ВидНоменклатуры"")
	|					И (ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно)
	|		ГДЕ
	|			ДополнительныеРеквизитыИСведения.Ссылка В
	|					(ВЫБРАТЬ
	|						ТЧДополнительныеРеквизиты.Свойство
	|					ИЗ
	|						Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТЧДополнительныеРеквизиты
	|					ГДЕ
	|						ТЧДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие))) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Свойство,
	|		ВложенныйЗапрос.ВидНоменклатуры
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВложенныйЗапрос.Контроль) <> 0 И
	|		НЕ(ВложенныйЗапрос.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|				И СУММА(ВложенныйЗапрос.Контроль) < 0)) КАК СвойстваВиды
	|
	|СГРУППИРОВАТЬ ПО
	|	СвойстваВиды.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваВиды.Свойство
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВложенныйЗапрос.Контроль) КАК Контроль,
	|		ВложенныйЗапрос.Свойство КАК Свойство,
	|		ВложенныйЗапрос.ВидНоменклатуры КАК ВидНоменклатуры
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РеквизитыДляКонтроляНоменклатуры.Свойство КАК Свойство,
	|			РеквизитыДляКонтроляНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|			ВЫБОР
	|				КОГДА РеквизитыДляКонтроляНоменклатуры.ЗаполнятьОбязательно
	|					ТОГДА 1
	|				ИНАЧЕ -1
	|			КОНЕЦ КАК Контроль
	|		ИЗ
	|			Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроляНоменклатуры
	|		ГДЕ
	|			РеквизитыДляКонтроляНоменклатуры.Свойство В
	|					(ВЫБРАТЬ
	|						ТЧДополнительныеРеквизиты.Свойство
	|					ИЗ
	|						Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТЧДополнительныеРеквизиты
	|					ГДЕ
	|						ТЧДополнительныеРеквизиты.Ссылка В
	|							(ВЫБРАТЬ
	|								ВидыНоменклатуры.НаборСвойств
	|							ИЗ
	|								Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|							ГДЕ
	|								НЕ ВидыНоменклатуры.ЭтоГруппа))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДополнительныеРеквизитыИСведения.Ссылка,
	|			ЕСТЬNULL(ТЧЗависимостиДополнительныхРеквизитов.Значение, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)),
	|			ВЫБОР
	|				КОГДА НЕ ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно
	|					ТОГДА 1
	|				КОГДА ЕСТЬNULL(ТЧЗависимостиДополнительныхРеквизитов.Условие, """") = ""Равно""
	|					ТОГДА -1
	|				КОГДА ЕСТЬNULL(ТЧЗависимостиДополнительныхРеквизитов.Условие, """") = ""НеРавно""
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИЗ
	|			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ТЧЗависимостиДополнительныхРеквизитов
	|				ПО ДополнительныеРеквизитыИСведения.Ссылка = ТЧЗависимостиДополнительныхРеквизитов.Ссылка
	|					И (ТЧЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""ЗаполнятьОбязательно"")
	|					И (ТЧЗависимостиДополнительныхРеквизитов.Реквизит = ""ВидНоменклатуры"")
	|		ГДЕ
	|			ДополнительныеРеквизитыИСведения.Ссылка В
	|					(ВЫБРАТЬ
	|						ТЧДополнительныеРеквизиты.Свойство
	|					ИЗ
	|						Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТЧДополнительныеРеквизиты
	|					ГДЕ
	|						ТЧДополнительныеРеквизиты.Ссылка В
	|							(ВЫБРАТЬ
	|								ВидыНоменклатуры.НаборСвойств
	|							ИЗ
	|								Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|							ГДЕ
	|								НЕ ВидыНоменклатуры.ЭтоГруппа))) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Свойство,
	|		ВложенныйЗапрос.ВидНоменклатуры
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВложенныйЗапрос.Контроль) <> 0 И
	|		НЕ(ВложенныйЗапрос.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|				И СУММА(ВложенныйЗапрос.Контроль) > 0)) КАК СвойстваВиды
	|
	|СГРУППИРОВАТЬ ПО
	|	СвойстваВиды.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваВиды.Свойство
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВложенныйЗапрос.Контроль) КАК Контроль,
	|		ВложенныйЗапрос.Свойство КАК Свойство,
	|		ВложенныйЗапрос.ВидНоменклатуры КАК ВидНоменклатуры
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РеквизитыДляКонтроляХарактеристик.Свойство КАК Свойство,
	|			РеквизитыДляКонтроляХарактеристик.Ссылка КАК ВидНоменклатуры,
	|			ВЫБОР
	|				КОГДА РеквизитыДляКонтроляХарактеристик.ЗаполнятьОбязательно
	|					ТОГДА 1
	|				ИНАЧЕ -1
	|			КОНЕЦ КАК Контроль
	|		ИЗ
	|			Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляХарактеристик КАК РеквизитыДляКонтроляХарактеристик
	|		ГДЕ
	|			РеквизитыДляКонтроляХарактеристик.Свойство В
	|					(ВЫБРАТЬ
	|						ТЧДополнительныеРеквизиты.Свойство
	|					ИЗ
	|						Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТЧДополнительныеРеквизиты
	|					ГДЕ
	|						ТЧДополнительныеРеквизиты.Ссылка В
	|							(ВЫБРАТЬ
	|								ВидыНоменклатуры.НаборСвойствХарактеристик
	|							ИЗ
	|								Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|							ГДЕ
	|								НЕ ВидыНоменклатуры.ЭтоГруппа))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДополнительныеРеквизитыИСведения.Ссылка,
	|			ЕСТЬNULL(ТЧЗависимостиДополнительныхРеквизитов.Значение, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)),
	|			ВЫБОР
	|				КОГДА НЕ ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно
	|					ТОГДА 1
	|				КОГДА ЕСТЬNULL(ТЧЗависимостиДополнительныхРеквизитов.Условие, """") = ""Равно""
	|					ТОГДА -1
	|				КОГДА ЕСТЬNULL(ТЧЗависимостиДополнительныхРеквизитов.Условие, """") = ""НеРавно""
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИЗ
	|			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ТЧЗависимостиДополнительныхРеквизитов
	|				ПО ДополнительныеРеквизитыИСведения.Ссылка = ТЧЗависимостиДополнительныхРеквизитов.Ссылка
	|					И (ТЧЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""ЗаполнятьОбязательно"")
	|					И (ТЧЗависимостиДополнительныхРеквизитов.Реквизит = ""ВидНоменклатуры"")
	|		ГДЕ
	|			ДополнительныеРеквизитыИСведения.Ссылка В
	|					(ВЫБРАТЬ
	|						ТЧДополнительныеРеквизиты.Свойство
	|					ИЗ
	|						Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТЧДополнительныеРеквизиты
	|					ГДЕ
	|						ТЧДополнительныеРеквизиты.Ссылка В
	|							(ВЫБРАТЬ
	|								ВидыНоменклатуры.НаборСвойствХарактеристик
	|							ИЗ
	|								Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|							ГДЕ
	|								НЕ ВидыНоменклатуры.ЭтоГруппа))) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Свойство,
	|		ВложенныйЗапрос.ВидНоменклатуры
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВложенныйЗапрос.Контроль) <> 0 И
	|		НЕ(ВложенныйЗапрос.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|				И СУММА(ВложенныйЗапрос.Контроль) > 0)) КАК СвойстваВиды
	|
	|СГРУППИРОВАТЬ ПО
	|	СвойстваВиды.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваВиды.Свойство
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВложенныйЗапрос.Контроль) КАК Контроль,
	|		ВложенныйЗапрос.Свойство КАК Свойство,
	|		ВложенныйЗапрос.ВидНоменклатуры КАК ВидНоменклатуры
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РеквизитыДляКонтроляСерий.Свойство КАК Свойство,
	|			РеквизитыДляКонтроляСерий.Ссылка КАК ВидНоменклатуры,
	|			ВЫБОР
	|				КОГДА РеквизитыДляКонтроляСерий.ЗаполнятьОбязательно
	|					ТОГДА 1
	|				ИНАЧЕ -1
	|			КОНЕЦ КАК Контроль
	|		ИЗ
	|			Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляСерий КАК РеквизитыДляКонтроляСерий
	|		ГДЕ
	|			РеквизитыДляКонтроляСерий.Свойство В
	|					(ВЫБРАТЬ
	|						ТЧДополнительныеРеквизиты.Свойство
	|					ИЗ
	|						Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТЧДополнительныеРеквизиты
	|					ГДЕ
	|						ТЧДополнительныеРеквизиты.Ссылка В
	|							(ВЫБРАТЬ
	|								ВидыНоменклатуры.НаборСвойствСерий
	|							ИЗ
	|								Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|							ГДЕ
	|								НЕ ВидыНоменклатуры.ЭтоГруппа))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДополнительныеРеквизитыИСведения.Ссылка,
	|			ЕСТЬNULL(ТЧЗависимостиДополнительныхРеквизитов.Значение, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)),
	|			ВЫБОР
	|				КОГДА НЕ ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно
	|					ТОГДА 1
	|				КОГДА ЕСТЬNULL(ТЧЗависимостиДополнительныхРеквизитов.Условие, """") = ""Равно""
	|					ТОГДА -1
	|				КОГДА ЕСТЬNULL(ТЧЗависимостиДополнительныхРеквизитов.Условие, """") = ""НеРавно""
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИЗ
	|			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ТЧЗависимостиДополнительныхРеквизитов
	|				ПО ДополнительныеРеквизитыИСведения.Ссылка = ТЧЗависимостиДополнительныхРеквизитов.Ссылка
	|					И (ТЧЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""ЗаполнятьОбязательно"")
	|					И (ТЧЗависимостиДополнительныхРеквизитов.Реквизит = ""ВидНоменклатуры"")
	|		ГДЕ
	|			ДополнительныеРеквизитыИСведения.Ссылка В
	|					(ВЫБРАТЬ
	|						ТЧДополнительныеРеквизиты.Свойство
	|					ИЗ
	|						Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТЧДополнительныеРеквизиты
	|					ГДЕ
	|						ТЧДополнительныеРеквизиты.Ссылка В
	|							(ВЫБРАТЬ
	|								ВидыНоменклатуры.НаборСвойствСерий
	|							ИЗ
	|								Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|							ГДЕ
	|								НЕ ВидыНоменклатуры.ЭтоГруппа))) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Свойство,
	|		ВложенныйЗапрос.ВидНоменклатуры
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВложенныйЗапрос.Контроль) <> 0 И
	|		НЕ(ВложенныйЗапрос.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|				И СУММА(ВложенныйЗапрос.Контроль) > 0)) КАК СвойстваВиды
	|
	|СГРУППИРОВАТЬ ПО
	|	СвойстваВиды.Свойство";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДополнительныеРеквизитыНоменклатурыДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
																			ПолноеИмяОбъекта,
																			МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтСсылокДляОбработки.Ссылка КАК Свойство,
	|	ОбщийНабор.Ссылка КАК НаборСвойств
	|ПОМЕСТИТЬ ВтОбщиеСвойства
	|ИЗ
	|	ИмяВТСсылокДляОбработки КАК ВтСсылокДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ОбщийНабор
	|		ПО (ОбщийНабор.Свойство = ВтСсылокДляОбработки.Ссылка)
	|ГДЕ
	|	ОбщийНабор.Ссылка В (ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие), ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие), ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтСсылокДляОбработки.Ссылка КАК Свойство,
	|	РеквизитыДляКонтроляНоменклатуры.Ссылка КАК Значение,
	|	РеквизитыДляКонтроляНоменклатуры.Ссылка.НаборСвойств КАК НаборСвойств,
	|	""ВидНоменклатуры"" КАК Реквизит,
	|	ВЫБОР
	|		КОГДА РеквизитыДляКонтроляНоменклатуры.ЗаполнятьОбязательно
	|			ТОГДА ""Равно""
	|		ИНАЧЕ ""НеРавно""
	|	КОНЕЦ КАК Условие,
	|	""ЗаполнятьОбязательно"" КАК ЗависимоеСвойство,
	|	НЕ РеквизитыДляКонтроляНоменклатуры.Свойство ЕСТЬ NULL КАК ЕстьНастройкаВВидеНоменклатуры
	|ИЗ
	|	ИмяВТСсылокДляОбработки КАК ВтСсылокДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроляНоменклатуры
	|		ПО ВтСсылокДляОбработки.Ссылка = РеквизитыДляКонтроляНоменклатуры.Свойство
	|ГДЕ
	|	НЕ ВтСсылокДляОбработки.Ссылка В
	|				(ВЫБРАТЬ
	|					ВтОбщиеСвойства.Свойство КАК Ссылка
	|				ИЗ
	|					ВтОбщиеСвойства КАК ВтОбщиеСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтСсылокДляОбработки.Ссылка,
	|	РеквизитыДляКонтроляХарактеристик.Ссылка,
	|	РеквизитыДляКонтроляХарактеристик.Ссылка.НаборСвойствХарактеристик,
	|	""ВидНоменклатуры"",
	|	ВЫБОР
	|		КОГДА РеквизитыДляКонтроляХарактеристик.ЗаполнятьОбязательно
	|			ТОГДА ""Равно""
	|		ИНАЧЕ ""НеРавно""
	|	КОНЕЦ,
	|	""ЗаполнятьОбязательно"",
	|	НЕ РеквизитыДляКонтроляХарактеристик.Свойство ЕСТЬ NULL
	|ИЗ
	|	ИмяВТСсылокДляОбработки КАК ВтСсылокДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляХарактеристик КАК РеквизитыДляКонтроляХарактеристик
	|		ПО ВтСсылокДляОбработки.Ссылка = РеквизитыДляКонтроляХарактеристик.Свойство
	|ГДЕ
	|	НЕ ВтСсылокДляОбработки.Ссылка В
	|				(ВЫБРАТЬ
	|					ВтОбщиеСвойства.Свойство КАК Ссылка
	|				ИЗ
	|					ВтОбщиеСвойства КАК ВтОбщиеСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтСсылокДляОбработки.Ссылка,
	|	РеквизитыДляКонтроляСерий.Ссылка,
	|	РеквизитыДляКонтроляСерий.Ссылка.НаборСвойствСерий,
	|	""ВидНоменклатуры"",
	|	ВЫБОР
	|		КОГДА РеквизитыДляКонтроляСерий.ЗаполнятьОбязательно
	|			ТОГДА ""Равно""
	|		ИНАЧЕ ""НеРавно""
	|	КОНЕЦ,
	|	""ЗаполнятьОбязательно"",
	|	НЕ РеквизитыДляКонтроляСерий.Свойство ЕСТЬ NULL
	|ИЗ
	|	ИмяВТСсылокДляОбработки КАК ВтСсылокДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляСерий КАК РеквизитыДляКонтроляСерий
	|		ПО ВтСсылокДляОбработки.Ссылка = РеквизитыДляКонтроляСерий.Свойство
	|ГДЕ
	|	НЕ ВтСсылокДляОбработки.Ссылка В
	|				(ВЫБРАТЬ
	|					ВтОбщиеСвойства.Свойство КАК Ссылка
	|				ИЗ
	|					ВтОбщиеСвойства КАК ВтОбщиеСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОбщиеСвойства.Свойство,
	|	РеквизитыДляКонтроляНоменклатуры.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие),
	|	""ВидНоменклатуры"",
	|	""ВСписке"",
	|	""ЗаполнятьОбязательно"",
	|	НЕ РеквизитыДляКонтроляНоменклатуры.Свойство ЕСТЬ NULL
	|ИЗ
	|	ВтОбщиеСвойства КАК ВтОбщиеСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроляНоменклатуры
	|		ПО ВтОбщиеСвойства.Свойство = РеквизитыДляКонтроляНоменклатуры.Свойство
	|			И (РеквизитыДляКонтроляНоменклатуры.ЗаполнятьОбязательно)
	|			И (ВтОбщиеСвойства.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОбщиеСвойства.Свойство,
	|	РеквизитыДляКонтроляХарактеристик.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие),
	|	""ВидНоменклатуры"",
	|	""ВСписке"",
	|	""ЗаполнятьОбязательно"",
	|	НЕ РеквизитыДляКонтроляХарактеристик.Свойство ЕСТЬ NULL
	|ИЗ
	|	ВтОбщиеСвойства КАК ВтОбщиеСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляХарактеристик КАК РеквизитыДляКонтроляХарактеристик
	|		ПО ВтОбщиеСвойства.Свойство = РеквизитыДляКонтроляХарактеристик.Свойство
	|			И (РеквизитыДляКонтроляХарактеристик.ЗаполнятьОбязательно)
	|			И (ВтОбщиеСвойства.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОбщиеСвойства.Свойство,
	|	РеквизитыДляКонтроляСерий.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие),
	|	""ВидНоменклатуры"",
	|	""ВСписке"",
	|	""ЗаполнятьОбязательно"",
	|	НЕ РеквизитыДляКонтроляСерий.Свойство ЕСТЬ NULL
	|ИЗ
	|	ВтОбщиеСвойства КАК ВтОбщиеСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляСерий КАК РеквизитыДляКонтроляСерий
	|		ПО ВтОбщиеСвойства.Свойство = РеквизитыДляКонтроляСерий.Свойство
	|			И (РеквизитыДляКонтроляСерий.ЗаполнятьОбязательно)
	|			И (ВтОбщиеСвойства.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие))
	|ИТОГИ
	|	МАКСИМУМ(ЕстьНастройкаВВидеНоменклатуры)
	|ПО
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтОбщиеСвойства";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВТСсылокДляОбработки", Результат.ИмяВременнойТаблицы);
	ПВХОбъект = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НаборыДополнительныхРеквизитовИСведений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ВыборкаПоСвойствам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСвойствам.Следующий() Цикл
			
			ПВХОбъект = ВыборкаПоСвойствам.Свойство.ПолучитьОбъект(); // ПланВидовХарактеристикОбъект.ДополнительныеРеквизитыИСведения
			
			ЗаполнятьОбязательно = Ложь;
			
			Если ВыборкаПоСвойствам.ЕстьНастройкаВВидеНоменклатуры Тогда
				ОтборСтрок = Новый Структура("ЗависимоеСвойство,Реквизит", "ЗаполнятьОбязательно", "ВидНоменклатуры");
				
				НайденныеСтроки = ПВХОбъект.ЗависимостиДополнительныхРеквизитов.НайтиСтроки(ОтборСтрок);
				
				Для Каждого СтрМас Из НайденныеСтроки Цикл
					
					ПВХОбъект.ЗависимостиДополнительныхРеквизитов.Удалить(СтрМас);	

				КонецЦикла;
				
				ВыборкаПоВидамНоменклатуры = ВыборкаПоСвойствам.Выбрать();
				
				Пока ВыборкаПоВидамНоменклатуры.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаПоВидамНоменклатуры.Значение) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ВыборкаПоВидамНоменклатуры.Условие = "Равно"
						Или ВыборкаПоВидамНоменклатуры.Условие = "ВСписке" Тогда
						ЗаполнятьОбязательно = Истина;
					КонецЕсли;
					
					НоваяСтрока = ПВХОбъект.ЗависимостиДополнительныхРеквизитов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоВидамНоменклатуры);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ПВХОбъект.ЗаполнятьОбязательно = ЗаполнятьОбязательно;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПВХОбъект);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),
			?(ПВХОбъект = Неопределено, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка(), ПВХОбъект.Ссылка));
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ОтработатьЛогикуСвязиРеквизитов(ВидНоменклатуры) Экспорт
	РеквизитыПризнаковОсобенностейУчета = Справочники.Номенклатура.РеквизитыПризнаковОсобенностейУчета(Метаданные.Справочники.ВидыНоменклатуры);
	
	Для Каждого ИмяРеквизита Из РеквизитыПризнаковОсобенностейУчета Цикл  
		ВидНоменклатуры[ИмяРеквизита] = ВидНоменклатуры.ОсобенностьУчета = 
			ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры." + ИмяРеквизита);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВидНоменклатуры.ОсобенностьУчета) Тогда
		Если ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			
			ВидНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом;
		Иначе
			
			ВидНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета = ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета();
	ЗначенияРеквизитов = ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета.Получить(ВидНоменклатуры.ОсобенностьУчета);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВидНоменклатуры, ЗначенияРеквизитов);
	КонецЕсли;
			
	ПроверитьПоТипуИОсобенностиНоменклатуруОчиститьВладельца(ВидНоменклатуры, "Характеристик");
	ПроверитьПоТипуИОсобенностиНоменклатуруОчиститьВладельца(ВидНоменклатуры, "Серий");
	ПроверитьПоТипуИОсобенностиНоменклатуруОчиститьВладельца(ВидНоменклатуры, "ТоварныхКатегорий");
	
	ИспользованиеРеквизитов = Справочники.Номенклатура.ИспользованиеЭлементов(ВидНоменклатуры,Ложь,Истина);
	МетаданныеОбъекта = Метаданные.Справочники.ВидыНоменклатуры;
	
	Для каждого КлючЗначение Из ИспользованиеРеквизитов Цикл
		Если Не КлючЗначение.Значение Тогда
			Если МетаданныеОбъекта.Реквизиты.Найти(КлючЗначение.Ключ) <> Неопределено Тогда
				ВидНоменклатуры[КлючЗначение.Ключ] = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВидНоменклатуры.ИспользоватьХарактеристики Тогда
		
		ВидНоменклатуры.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать");
		
		ВидНоменклатуры.ШаблонНаименованияДляПечатиХарактеристики = "";
		ВидНоменклатуры.ШаблонРабочегоНаименованияХарактеристики  = "";
		
		ВидНоменклатуры.ЗапретРедактированияНаименованияДляПечатиХарактеристики = Ложь;
		ВидНоменклатуры.ЗапретРедактированияРабочегоНаименованияХарактеристики  = Ложь;
		ВидНоменклатуры.ВладелецХарактеристик = Неопределено;
		
	КонецЕсли;
		
	Если ВидНоменклатуры.ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
		ВидНоменклатуры.ВладелецХарактеристик = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ВидНоменклатуры.ИспользоватьСерии Тогда
		
		ЗначенияРеквизитовПоУмолчанию = ОбщегоНазначенияУТ.ЗначенияРеквизитовОбъектаПоУмолчанию(Справочники.ВидыНоменклатуры.ПустаяСсылка(),
			РеквизитыНастройкиУказанияСерий());
			
		ЗаполнитьЗначенияСвойств(ВидНоменклатуры, ЗначенияРеквизитовПоУмолчанию);
			
		ВидНоменклатуры.ПолитикаУчетаСерий = Справочники.ПолитикиУчетаСерий.СерииНеИспользуются;
		ВидНоменклатуры.ПолитикиУчетаСерий.Очистить();
		
	Иначе
		
		Если ВидНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
			И (ТипЗнч(ВидНоменклатуры) = Тип("СправочникОбъект.ВидыНоменклатуры")
				И Не ВидНоменклатуры.ДополнительныеСвойства.Свойство("ПропуститьЗаполнениеТЧПолитикиУчетаСерий")) Тогда
			
			РеквизитыВладельцаСерий = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидНоменклатуры.ВладелецСерий,
				РеквизитыНастройкиУказанияСерий());
			
			ЗаполнитьЗначенияСвойств(ВидНоменклатуры, РеквизитыВладельцаСерий,,"ВладелецСерий,НастройкиСерийБерутсяИзДругогоВидаНоменклатуры");
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВидыНоменклатурыПолитикиУчетаСерий.Склад,
			|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий
			|ИЗ
			|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
			|ГДЕ
			|	ВидыНоменклатурыПолитикиУчетаСерий.Ссылка = &ВладелецСерий";
			
			Запрос.УстановитьПараметр("ВладелецСерий", ВидНоменклатуры.ВладелецСерий);
			
			ВидНоменклатуры.ПолитикиУчетаСерий.Загрузить(Запрос.Выполнить().Выгрузить());
			
		Иначе
			
			НастройкиИспользованияСерий = НастройкиИспользованияСерий(ВидНоменклатуры);
			
			Для Каждого Описание Из НастройкиИспользованияСерий.ОписанияИспользованияРеквизитовСерии Цикл
				
				Если Не ПустаяСтрока(Описание.ОсобенностиУчета) Тогда
					
					ИменаОсобенностей = СтрРазделить(Описание.ОсобенностиУчета, ",");
					
					НадоОчистить = Истина;
					
					Для Каждого ИмяОсобенности Из ИменаОсобенностей Цикл
						
						Если ВидНоменклатуры.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры." + ИмяОсобенности) Тогда
							НадоОчистить = Ложь;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если НадоОчистить Тогда
						ВидНоменклатуры[Описание.ИмяНастройки] = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ВидНоменклатуры.ИспользоватьКоличествоСерии = (ВидНоменклатуры.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров);
			
			Если ВидНоменклатуры.НастройкаИспользованияСерий <> Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
				ВидНоменклатуры.ИспользоватьRFIDМеткиСерии = Ложь;
			КонецЕсли;
			
			Если Не ВидНоменклатуры.ИспользоватьСрокГодностиСерии
				И Не ВидНоменклатуры.ИспользоватьДатуПроизводстваСерии Тогда
				ВидНоменклатуры.ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.ПустаяСсылка();
				ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.ПустаяСсылка();
			Иначе
				Если Не ЗначениеЗаполнено(ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии) Тогда
					ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней;
				КонецЕсли;
				ВидНоменклатуры.ЕдиницаИзмеренияСрокаГодности = Справочники.ВидыНоменклатуры.ЕдиницаИзмеренияСрокаГодности(
						ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии);
			КонецЕсли;
			
			Если Не ВидНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры Тогда
				ВидНоменклатуры.ВладелецСерий = Справочники.ВидыНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			
			ПараметрыОтбораПолитики = НоменклатураКлиентСервер.ПараметрыОтбораПолитикУчетаСерий();
			ЗаполнитьЗначенияСвойств(ПараметрыОтбораПолитики, ВидНоменклатуры);
			
			Если ЗначениеЗаполнено(ВидНоменклатуры.ПолитикаУчетаСерий)
				И ВидНоменклатуры.ПолитикаУчетаСерий <> Справочники.ПолитикиУчетаСерий.СерииНеИспользуются Тогда
				
				ОтборПолитик = НоменклатураСервер.ОтборПолитикУчетаСерийПоПараметрам(ПараметрыОтбораПолитики);
				
				Если Не ОбщегоНазначенияУТ.СсылкаСоответствуетОтбору(ВидНоменклатуры.ПолитикаУчетаСерий, ОтборПолитик) Тогда
					ВидНоменклатуры.ПолитикаУчетаСерий = Справочники.ПолитикиУчетаСерий.СерииНеИспользуются;
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого СтрТабл Из ВидНоменклатуры.ПолитикиУчетаСерий Цикл
				
				Если СтрТабл.ПолитикаУчетаСерий <> Справочники.ПолитикиУчетаСерий.СерииНеИспользуются Тогда
					
					ПараметрыОтбораПолитики.Склад = СтрТабл.Склад;
					
					ОтборПолитик = НоменклатураСервер.ОтборПолитикУчетаСерийПоПараметрам(ПараметрыОтбораПолитики);
					
					Если Не ОбщегоНазначенияУТ.СсылкаСоответствуетОтбору(СтрТабл.ПолитикаУчетаСерий, ОтборПолитик) Тогда
						СтрТабл.ПолитикаУчетаСерий = ВидНоменклатуры.ПолитикаУчетаСерий;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
						
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ВидНоменклатуры.ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры Тогда
		ВидНоменклатуры.ВладелецТоварныхКатегорий = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьРеквизитыДляКонтроля(ВидНоменклатуры, "Номенклатура");
	ЗаполнитьДопРеквизитыДляКонтроляИОтбора(ВидНоменклатуры, "Номенклатура");
	
	ЗаполнитьРеквизитыДляКонтроля(ВидНоменклатуры, "ХарактеристикиНоменклатуры");
	ЗаполнитьДопРеквизитыДляКонтроляИОтбора(ВидНоменклатуры, "ХарактеристикиНоменклатуры");
	
	ЗаполнитьДопРеквизитыДляКонтроляИОтбора(ВидНоменклатуры, "СерииНоменклатуры");
	
	КонтролироватьДублиНоменклатуры = ВидНоменклатуры.РеквизитыДляКонтроляНоменклатуры.НайтиСтроки(Новый Структура("Уникален", Истина)).Количество() > 0;
	
		
КонецПроцедуры

// Параметры:
// 	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - 
//
Процедура ЗаполнитьРеквизитыПоУмолчанию(ВидНоменклатуры) Экспорт
		
	Если Не ЗначениеЗаполнено(ВидНоменклатуры.ГруппаДоступа) Тогда
		ВидНоменклатуры.ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.ПолучитьГруппуДоступаПоУмолчанию(ВидНоменклатуры);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ВидНоменклатуры.ТипНоменклатуры) 
		И Не Перечисления.ОсобенностиУчетаНоменклатуры.ОднаИзОсобенностейВключена() Тогда
		// Если нет никаких особенностей учета номенклатуры, то устанавливает тип "Товар" по-умолчанию,
		// в противном случае пользователь должен в явном виде указать тип.
		ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	КонецЕсли;
	
	Если ПустаяСтрока(ВидНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры) Тогда
		ВидНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры = "[Наименование]";
	КонецЕсли;
	
	ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета = ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета();
	ЗначенияРеквизитов = ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета.Получить(ВидНоменклатуры.ОсобенностьУчета);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВидНоменклатуры, ЗначенияРеквизитов);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидНоменклатуры.ВариантОформленияПродажи) Тогда
		ВидНоменклатуры.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	КонецЕсли;
	
	Если ВидНоменклатуры.ИспользоватьСерии Тогда
		
		Если Не ЗначениеЗаполнено(ВидНоменклатуры.НастройкаИспользованияСерий) Тогда
			ВидНоменклатуры.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров;
		КонецЕсли;	
		
		Если Не ВидНоменклатуры.ИспользоватьНомерСерии
			И Не ВидНоменклатуры.ИспользоватьСрокГодностиСерии Тогда
			ВидНоменклатуры.ИспользоватьНомерСерии = Истина;
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ВидыНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	НЕ ВидыНоменклатуры.ПометкаУдаления
		|	И ВидыНоменклатуры.Ссылка <> &Ссылка
		|	И &ТекстУсловияОтбора";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ВидНоменклатуры.Ссылка);
		
		ОтборВладельцаСерий = НоменклатураСервер.ОтборВладельцаПодчиненныхСправочников(ВидНоменклатуры, "Серий");
		
		Если ОтборВладельцаСерий.Количество() > 0 Тогда 
			МассивТекстовУсловия = Новый Массив;
			
			Для Каждого КлючЗначение Из ОтборВладельцаСерий Цикл
				
				Если ТипЗнч(КлючЗначение.Значение) = Тип("Массив")
					Или ТипЗнч(КлючЗначение.Значение) = Тип("ФиксированныйМассив") Тогда
					МассивТекстовУсловия.Добавить("ВидыНоменклатуры." + КлючЗначение.Ключ + " В(&" +КлючЗначение.Ключ + ")");
				Иначе
					МассивТекстовУсловия.Добавить("ВидыНоменклатуры." + КлючЗначение.Ключ + " = &" +КлючЗначение.Ключ);
				КонецЕсли;
				Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
				
			КонецЦикла;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияОтбора", СтрСоединить(МассивТекстовУсловия, " И "));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияОтбора", "ИСТИНА");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			ВидНоменклатуры.ВладелецСерий = Выборка.Ссылка;
			ВидНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры = Истина;
			
		Иначе
			
			ВидНоменклатуры.ВладелецСерий = Неопределено;
			ВидНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры = Ложь;
			
		КонецЕсли;	
			
	КонецЕсли;
	
	Если ВидНоменклатуры.ИспользоватьХарактеристики Тогда
		
		Если Не ЗначениеЗаполнено(ВидНоменклатуры.ИспользованиеХарактеристик)
			Или ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
			ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры;
		КонецЕсли;
		
		Если ПустаяСтрока(ВидНоменклатуры.ШаблонНаименованияДляПечатиХарактеристики) Тогда
			ВидНоменклатуры.ШаблонНаименованияДляПечатиХарактеристики = "[Наименование]";
		КонецЕсли;
	КонецЕсли;
	
	НоменклатураЛокализация.ЗаполнитьРеквизитыВидаНоменклатурыПоУмолчанию(ВидНоменклатуры);
	
КонецПроцедуры

Функция ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета() Экспорт
	
	ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета = Новый Соответствие;
	
	НоменклатураЛокализация.ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета(ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета);
	
	Возврат ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета;
	
КонецФункции

Функция РеквизитыНастройкиУказанияСерий()
	                                                                          
	РеквизитыНастройкиУказанияСерий = Новый Массив;
	
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьНомерСерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьСрокГодностиСерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьRFIDМеткиСерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьДатуПроизводстваСерии");
	
	РеквизитыНастройкиУказанияСерий.Добавить("НастройкаИспользованияСерий");
	РеквизитыНастройкиУказанияСерий.Добавить("ВладелецСерий");
	РеквизитыНастройкиУказанияСерий.Добавить("ШаблонЭтикеткиСерии");
	РеквизитыНастройкиУказанияСерий.Добавить("НастройкиСерийБерутсяИзДругогоВидаНоменклатуры");
	РеквизитыНастройкиУказанияСерий.Добавить("ШаблонРабочегоНаименованияСерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ЕдиницаИзмеренияСрокаГодности");
	РеквизитыНастройкиУказанияСерий.Добавить("ТочностьУказанияСрокаГодностиСерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьКоличествоСерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ПолитикаУчетаСерий");
	
	НоменклатураЛокализация.РеквизитыНастройкиУказанияСерий(РеквизитыНастройкиУказанияСерий);
	
	Возврат РеквизитыНастройкиУказанияСерий;
	
КонецФункции

Функция НастройкиИспользованияСерийСоставПолей(ТолькоРеквизитыВида)
	
	НастройкиИспользованияСерийСоставПолей = Новый Структура;
	
	НастройкиИспользованияСерийСоставПолей = ОбщегоНазначенияУТ.ЗначенияРеквизитовОбъектаПоУмолчанию(Справочники.ВидыНоменклатуры.ПустаяСсылка(),
		РеквизитыНастройкиУказанияСерий());
	
	НастройкиИспользованияСерийСоставПолей.Вставить("ОсобенностьУчета", Перечисления.ОсобенностиУчетаНоменклатуры.ПустаяСсылка());
	НастройкиИспользованияСерийСоставПолей.Вставить("ИспользоватьСерии", Ложь);
	
	Если Не ТолькоРеквизитыВида Тогда
		НастройкиИспользованияСерийСоставПолей.Вставить("ПолитикаУчетаСерий", Справочники.ПолитикиУчетаСерий.ПустаяСсылка());
		НастройкиИспользованияСерийСоставПолей.Вставить("УказыватьПриПоступлении", Ложь);
		НастройкиИспользованияСерийСоставПолей.Вставить("УказыватьПриОтгрузке", Ложь);
		НастройкиИспользованияСерийСоставПолей.Вставить("УказыватьПриПланированииОтгрузки", Ложь);
		НастройкиИспользованияСерийСоставПолей.Вставить("УчетСерийПоFEFO", Ложь);
		НастройкиИспользованияСерийСоставПолей.Вставить("УказыватьПоФактуОтбора", Ложь);
		НастройкиИспользованияСерийСоставПолей.Вставить("УчитыватьОстаткиСерий", Ложь);
		НастройкиИспользованияСерийСоставПолей.Вставить("УчитыватьСебестоимостьПоСериям", Ложь);
		НастройкиИспользованияСерийСоставПолей.Вставить("ОбязательныеДопРеквизиты", Новый ФиксированныйМассив(Новый Массив));
		НастройкиИспользованияСерийСоставПолей.Вставить("ОписанияИспользованияРеквизитовСерии", Новый ФиксированныйМассив(Новый Массив));
	КонецЕсли;
	
	Возврат НастройкиИспользованияСерийСоставПолей;
КонецФункции

Функция ОписанияИспользованияРеквизитовСерии(НастройкиИспользованияСерий = Неопределено, ПараметрыУказанияСерий = Неопределено, ЗначенияПолейСвязи = Неопределено) Экспорт

	ОписанияИспользованияРеквизитовСерии = Новый Массив;
	
	Если НастройкиИспользованияСерий = Неопределено Тогда
		НастройкиИспользованияСерий = НастройкиИспользованияСерийСоставПолей(Истина);		
	Иначе
		ФорматнаяСтрокаСрокаГодности = "";
	КонецЕсли;
	
	ФорматнаяСтрокаСрокаГодности = Перечисления.ТочностиУказанияСрокаГодности.ФорматнаяСтрока(НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии);
	ПредставлениеФорматнойСтрокиВЗаголовкеСрокаГодности = Перечисления.ТочностиУказанияСрокаГодности.ПредставлениеФорматнойСтроки(НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии);

	ОписаниеИспользованиеРеквизитаСерии = ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "Номер";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьНомерСерии";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru='%Номер%';uk='%Номер%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "ДатаПроизводства";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьДатуПроизводстваСерии";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru='от %ДатаПроизводства%';uk='від %ДатаПроизводства%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписаниеИспользованиеРеквизитаСерии.Формат = ФорматнаяСтрокаСрокаГодности;
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеФорматнойСтрокиВЗаголовке = ПредставлениеФорматнойСтрокиВЗаголовкеСрокаГодности;
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "ГоденДо";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьСрокГодностиСерии";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru='до %ГоденДо%';uk='до %ГоденДо%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписаниеИспользованиеРеквизитаСерии.Формат = ФорматнаяСтрокаСрокаГодности;
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеФорматнойСтрокиВЗаголовке = ПредставлениеФорматнойСтрокиВЗаголовкеСрокаГодности;
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "RFIDTID";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьRFIDМеткиСерии";
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписаниеИспользованиеРеквизитаСерии.МожноРедактировать = Ложь;
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "RFIDUser";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьRFIDМеткиСерии";
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписаниеИспользованиеРеквизитаСерии.МожноРедактировать = Ложь; // В ERP не реализована запись банка RFIDUser 
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "RFIDEPC";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьRFIDМеткиСерии";
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписаниеИспользованиеРеквизитаСерии.ПроверятьЗаполнение = Истина;
	ОписаниеИспользованиеРеквизитаСерии.МожноРедактировать = Ложь; // В ERP реализована запись только банка RFIDEPC и только для интеграции с ГИСМ
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "EPCGTIN";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьRFIDМеткиСерии";
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписаниеИспользованиеРеквизитаСерии.МожноРедактировать = Ложь;
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "RFIDМеткаНеЧитаемая";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьRFIDМеткиСерии";
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписаниеИспользованиеРеквизитаСерии.МожноРедактировать = Ложь;
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	НоменклатураЛокализация.ОписаниеИспользованияРеквизитовСерии(ОписанияИспользованияРеквизитовСерии, НастройкиИспользованияСерий, ПараметрыУказанияСерий, ЗначенияПолейСвязи);
	
	Возврат ОписанияИспользованияРеквизитовСерии;

КонецФункции

Функция ОписаниеИспользованиеРеквизитаСерии() Экспорт
	
	ОписаниеИспользованиеРеквизитаСерии = Новый Структура;
	ОписаниеИспользованиеРеквизитаСерии.Вставить("ИмяРеквизита");
	ОписаниеИспользованиеРеквизитаСерии.Вставить("ПредставлениеРеквизита");
	ОписаниеИспользованиеРеквизитаСерии.Вставить("ИмяНастройки");
	ОписаниеИспользованиеРеквизитаСерии.Вставить("ТекстШаблонаНаименования");
	ОписаниеИспользованиеРеквизитаСерии.Вставить("Использование");
	
	ОписаниеИспользованиеРеквизитаСерии.Вставить("ОсобенностиУчета", "");
	ОписаниеИспользованиеРеквизитаСерии.Вставить("Формат", "");
	ОписаниеИспользованиеРеквизитаСерии.Вставить("ПредставлениеФорматнойСтрокиВЗаголовке", "");
	ОписаниеИспользованиеРеквизитаСерии.Вставить("ПроверятьЗаполнение", Истина);
	ОписаниеИспользованиеРеквизитаСерии.Вставить("МожноРедактировать", Истина);
	ОписаниеИспользованиеРеквизитаСерии.Вставить("ТекстУсловногоОформления", "");
	ОписаниеИспользованиеРеквизитаСерии.Вставить("ПроверятьУникальностьЗначения", Ложь);
	
	Возврат ОписаниеИспользованиеРеквизитаСерии;
	
КонецФункции

Функция ПредусмотренаАвтоматическаяГенерацияСерий(НастройкиИспользованияСерий) Экспорт
	
	ПредусмотренаАвтоматическаяГенерацияСерий = Ложь;
	НоменклатураЛокализация.ПредусмотренаАвтоматическаяГенерацияСерий(ПредусмотренаАвтоматическаяГенерацияСерий, НастройкиИспользованияСерий); 
	
	Возврат ПредусмотренаАвтоматическаяГенерацияСерий;
	
КонецФункции

Функция ЭтоРеквизитСоставногоТипа(Реквизит)
	
	ТипЗначенияРеквизита = ТипЗнч(Реквизит);
	
	Если ТипЗначенияРеквизита = Тип("ФиксированнаяСтруктура") Тогда
		Возврат (Не Реквизит.Тип.Типы().Количество() < 2);
	ИначеЕсли ТипЗначенияРеквизита = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		Возврат (Не Реквизит.ТипЗначения.Типы().Количество() < 2);
	Иначе
		ТекстИсключения = НСтр("ru='Неожиданный тип значения параметра Реквизит.';uk='Несподіваний тип значення параметра Реквізит.'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

// Проверяет возможность изменения настройки отображения реквизита.
//
//	Параметры:
//		Объект - СправочникОбъект.Номенклатура
//		ИмяРеквизита - Строка
//		ВладелецРеквизита - Строка
//		ЭтоДопРеквизит - Булево
//		ЗаполнятьОбязательно - Булево
//
//	Возвращаемое значение:
//		Булево - изменение настройки возможно.
//
Функция ДоступноИзменениеНастройкиОтображенияРеквизита(Объект, СтрокаРеквизита, ВладелецРеквизита) Экспорт
	
	ИмяРеквизита   = СтрокаРеквизита.ИмяРеквизита;
	ЭтоДопРеквизит = СтрокаРеквизита.ЭтоДопРеквизит;
	
	Если ЭтоДопРеквизит Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаРеквизита.Свойство,"ЗаполнятьОбязательно");
		ЗаполнятьОбязательно = Реквизиты.ЗаполнятьОбязательно;
	Иначе
		Если ВладелецРеквизита = "Номенклатура" Тогда
			
            ОписаниеРеквизита = Справочники.Номенклатура.РеквизитОписание(
                ИмяРеквизита,
            	Объект.ТипНоменклатуры,
            	Объект.ОсобенностьУчета,
            	Объект.ИспользованиеХарактеристик,
            	Объект.ИспользоватьСрокГодностиСерии,
                Объект.ВестиУчетПоГТД, 
                Ложь, // ИзмеряетсяТолькоВСуммовомВыражении 
                Объект.ПодакцизныйТовар
            );
			
			ЗаполнятьОбязательно = ОписаниеРеквизита.ОбязательныйДляЗаполнения;
			
		Иначе
			ЗаполнятьОбязательно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДоступноИзменениеНастройки = Не ЗаполнятьОбязательно;
	
	Если ЭтоОбязательноОтображаемыйРеквизит(Объект, ИмяРеквизита, ВладелецРеквизита, ЭтоДопРеквизит, ЗаполнятьОбязательно) Тогда
		ДоступноИзменениеНастройки = Ложь;
	КонецЕсли;
	
	Возврат ДоступноИзменениеНастройки
			И Не (СтрокаРеквизита.Уникален
					Или СтрокаРеквизита.ЗаполнятьОбязательно);
	
КонецФункции

// Проверяет возможность изменения настройки обязательности заполнения реквизита.
//
//	Параметры:
//		Объект - СправочникОбъект.Номенклатура
//		ИмяРеквизита - Строка
//		ВладелецРеквизита - Строка
//		ЭтоДопРеквизит - Булево
//		ЗаполнятьОбязательно - Булево
//
//	Возвращаемое значение:
//		Булево - изменение настройки возможно.
//
Функция ДоступноИзменениеНастройкиОбязательностиЗаполненияРеквизита(Объект, СтрокаРеквизита, ВладелецРеквизита)
	
	ИмяРеквизита         = СтрокаРеквизита.ИмяРеквизита;
	ЭтоДопРеквизит       = СтрокаРеквизита.ЭтоДопРеквизит;
	
	Если ЭтоДопРеквизит Тогда
		ТекстИсключения = НСтр("ru='Функция не предназначена для использования с доп. реквизитами.';uk='Функція не призначена для використання з дод. реквізитами.'");
		ВызватьИсключение ТекстИсключения;
	Иначе
		Если ВладелецРеквизита = "Номенклатура" Тогда
			
            ОписаниеРеквизита = Справочники.Номенклатура.РеквизитОписание(
                ИмяРеквизита,
            	Объект.ТипНоменклатуры,
            	Объект.ОсобенностьУчета,
            	Объект.ИспользованиеХарактеристик,
            	Объект.ИспользоватьСрокГодностиСерии,
                Объект.ВестиУчетПоГТД, 
                Ложь, // ИзмеряетсяТолькоВСуммовомВыражении 
                Объект.ПодакцизныйТовар
            );
			
			ТипЗначения = ОписаниеРеквизита.Тип;
			
			ЗаполнятьОбязательно = ОписаниеРеквизита.ОбязательныйДляЗаполнения;
			
		ИначеЕсли ВладелецРеквизита = "ХарактеристикиНоменклатуры" Тогда
			
			ОписаниеРеквизита = Справочники.ХарактеристикиНоменклатуры.РеквизитОписание(ИмяРеквизита,
																						Объект.ТипНоменклатуры,
																						Объект.ОсобенностьУчета);
			
			ТипЗначения = ОписаниеРеквизита.Тип;
			
			ЗаполнятьОбязательно = ОписаниеРеквизита.ОбязательныйДляЗаполнения;
			
		Иначе
			ЗаполнятьОбязательно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДоступноИзменениеНастройки = НЕ ЗаполнятьОбязательно;
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Возврат ДоступноИзменениеНастройки
		И ТипЗначения <> ОписаниеТиповБулево;
	
КонецФункции

// Добавляет реквизит в табличные части элемента справочника номенклатуры.
//
// Параметры:
//	Объект - СправочникОбъект.Номенклатура
//	Реквизит - см. Справочники.Номенклатура.ЗначениеСвойствРеквизита
//
Процедура ДобавитьРеквизитДляКонтроляИОтбораНоменклатуры(Объект, Реквизит, ВладелецРеквизита) Экспорт
	
	Если Справочники.Номенклатура.НеотображаемыеВТаблицеНастроекРеквизиты().Найти(Реквизит.Имя) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НеиспользуемыеДляКонтроляРеквизиты = Справочники.Номенклатура.НеиспользуемыеДляКонтроляУникальностиРеквизиты();
	ТипыНеИспользуемыеДляКонтроля = Справочники.Номенклатура.НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы();
			
	СвойстваДляЗаполнения =
		"Уникален, ЗаполнятьОбязательно, ОтображатьПриСоздании, ДоступностьУникален,
		|ДоступностьЗаполнятьОбязательно, ДоступностьОтображатьПриСоздании";
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизит, "Тип") Тогда
		ТипРеквизита = Новый ОписаниеТипов("Неопределено");
	Иначе
		ТипРеквизита = Реквизит.Тип;
	КонецЕсли;
	
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ПредставлениеРеквизита = Реквизит.Представление;
		
	ЭтоНеиспользуемыйДляКонтроляРеквизит = (НеиспользуемыеДляКонтроляРеквизиты.Найти(Реквизит.Имя) <> Неопределено);
	ЭтоНеиспользуемыйДляКонтроляТип = (ТипыНеИспользуемыеДляКонтроля.Найти(Реквизит.Имя) <> Неопределено);
	ЭтоРеквизитСоставногоТипа = ЭтоРеквизитСоставногоТипа(Реквизит);
	ЭтоОбязательныйДляЗаполненияРеквизит = Реквизит.ОбязательныйДляЗаполнения;
	ТипРеквизитаБулево = (ТипРеквизита = ОписаниеТиповБулево);
	
	ЭтоРеквизитРекомендуемыйДляКонтроляУникальности = Реквизит.РекомендуемыйДляКонтроляУникальности; 
	
	Отбор = Новый Структура("ИмяРеквизита,ЭтоДопРеквизит", Реквизит.Имя, Ложь);
	
	Если ВладелецРеквизита = "Номенклатура" Тогда
		ИмяТЧ = "РеквизитыДляКонтроляНоменклатуры";
	Иначе
		ИмяТЧ = "РеквизитыДляКонтроляХарактеристик";
	КонецЕсли;
		
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Отбор);	
	
	ЭтоНоваяСтрока = Ложь;
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаРеквизитовДляКонтроля = Объект[ИмяТЧ].Добавить();
		СтрокаРеквизитовДляКонтроля.ИмяРеквизита = Реквизит.Имя;
		ЭтоНоваяСтрока = Истина;
	Иначе
		СтрокаРеквизитовДляКонтроля = НайденныеСтроки[0];
	КонецЕсли;	
	
	СтрокаРеквизитовДляКонтроля.ПредставлениеРеквизита = ПредставлениеРеквизита;
	
	Если Не СтрокаРеквизитовДляКонтроля.ЗаполнятьОбязательно Тогда
		СтрокаРеквизитовДляКонтроля.ЗаполнятьОбязательно = ЭтоОбязательныйДляЗаполненияРеквизит;
	КонецЕсли;
	
	Если Не СтрокаРеквизитовДляКонтроля.ОтображатьПриСоздании Тогда
		СтрокаРеквизитовДляКонтроля.ОтображатьПриСоздании =
			ЭтоОбязательноОтображаемыйРеквизит(Объект, Реквизит, "Номенклатура", Ложь, ЭтоОбязательныйДляЗаполненияРеквизит);
	КонецЕсли;
	
	Если ЭтоРеквизитРекомендуемыйДляКонтроляУникальности
		И ЭтоНоваяСтрока Тогда
		СтрокаРеквизитовДляКонтроля.Уникален = Истина;
		СтрокаРеквизитовДляКонтроля.ОтображатьПриСоздании = Истина;
		СтрокаРеквизитовДляКонтроля.ДоступностьУникален = Истина;
	ИначеЕсли ЭтоНеиспользуемыйДляКонтроляРеквизит
		Или ЭтоНеиспользуемыйДляКонтроляТип Тогда
		СтрокаРеквизитовДляКонтроля.ДоступностьУникален = Ложь;
		СтрокаРеквизитовДляКонтроля.Уникален = Ложь;
	Иначе
		СтрокаРеквизитовДляКонтроля.ДоступностьУникален = Истина;
	КонецЕсли;
	
	СтрокаРеквизитовДляКонтроля.ДоступностьЗаполнятьОбязательно = ДоступноИзменениеНастройкиОбязательностиЗаполненияРеквизита(Объект,
																												СтрокаРеквизитовДляКонтроля,
																												ВладелецРеквизита);

		
	СтрокаРеквизитовДляКонтроля.ДоступностьОтображатьПриСоздании   = ДоступноИзменениеНастройкиОтображенияРеквизита(Объект,
																													СтрокаРеквизитовДляКонтроля,
																													ВладелецРеквизита);
КонецПроцедуры

Функция ЭтоОбязательноОтображаемыйРеквизит(Объект, ИмяРеквизита, ВладелецРеквизита, ЭтоДопРеквизит, ЗаполнятьОбязательно)
	
	Если ЭтоДопРеквизит Тогда
		Возврат ЗаполнятьОбязательно;
	КонецЕсли;
	
	Если ЗаполнятьОбязательно Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВладелецРеквизита = "Номенклатура" Тогда
		
        ОбязательноОтображаемый = Справочники.Номенклатура.РеквизитОписание(
            ИмяРеквизита,
        	Объект.ТипНоменклатуры,
        	Объект.ОсобенностьУчета,
        	Объект.ИспользованиеХарактеристик,
        	Объект.ИспользоватьСрокГодностиСерии,
            Объект.ВестиУчетПоГТД, 
            Ложь, // ИзмеряетсяТолькоВСуммовомВыражении 
            Объект.ПодакцизныйТовар
        ).ОбязательныйДляОтображенияПриСоздании;
		
		Возврат ОбязательноОтображаемый;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура УдалитьРеквизитДляКонтроля(Объект, ИмяРеквизита, ВладелецРеквизита)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	КоллекцияРеквизитовДляКонтроля = КоллекцияРеквизитовДляКонтроля(Объект, ВладелецРеквизита);
	
	НайденныеСтроки = КоллекцияРеквизитовДляКонтроля.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаТаблицыРеквизитов = НайденныеСтроки[0];
		КоллекцияРеквизитовДляКонтроля.Удалить(СтрокаТаблицыРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьРеквизитДляОтбора(Объект, ИмяРеквизита, ВладелецРеквизита)
	
	КоллекцияРеквизитовОтбора = КоллекцияРеквизитовОтбора(Объект, ВладелецРеквизита); 
	
	МассивСтрок = КоллекцияРеквизитовОтбора.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТаблицыРеквизитов = МассивСтрок[0];
		КоллекцияРеквизитовОтбора.Удалить(СтрокаТаблицыРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииФлагаУникален(Объект, ВладелецРеквизита, ИдентификаторСтрокиТаблицы) Экспорт
	
	КоллекцияРеквизитовДляКонтроля = Справочники.ВидыНоменклатуры.КоллекцияРеквизитовДляКонтроля(Объект, ВладелецРеквизита);
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ВидыНоменклатуры") Тогда
		ТекущиеДанные = КоллекцияРеквизитовДляКонтроля[ИдентификаторСтрокиТаблицы];
	Иначе	
		ТекущиеДанные = КоллекцияРеквизитовДляКонтроля.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Если ВладелецРеквизита <> "СерииНоменклатуры"
		И ТекущиеДанные.Уникален Тогда
		ТекущиеДанные.ЗаполнятьОбязательно = Истина;
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
		
	// Если тип реквизита - Булево, то не включать контроль заполнения.
	Если ТекущиеДанные.ЭтоДопРеквизит Тогда
		
		ТипЗначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Свойство, "ТипЗначения");
		
		Если ТипЗначения = ОписаниеТиповБулево Тогда
			ТекущиеДанные.ЗаполнятьОбязательно = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ВладелецРеквизита = "Номенклатура" Тогда
			
            ТипРеквизита = Справочники.Номенклатура.РеквизитОписание(
                ТекущиеДанные.ИмяРеквизита,
            	Объект.ТипНоменклатуры,
            	Объект.ОсобенностьУчета,
            	Объект.ИспользованиеХарактеристик,
            	Объект.ИспользоватьСрокГодностиСерии,
                Объект.ВестиУчетПоГТД, 
                Ложь, // ИзмеряетсяТолькоВСуммовомВыражении 
                Объект.ПодакцизныйТовар
            ).Тип;
			
			Если ТипРеквизита = ОписаниеТиповБулево Тогда
				ТекущиеДанные.ЗаполнятьОбязательно = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВладелецРеквизита <> "СерииНоменклатуры" Тогда 
		ТекущиеДанные.ДоступностьОтображатьПриСоздании = Справочники.ВидыНоменклатуры.ДоступноИзменениеНастройкиОтображенияРеквизита(Объект,
																																	ТекущиеДанные,
																																	ВладелецРеквизита);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение таблицы настроек контроля реквизитов справочников Номенклатура и ХарактеристикиНоменклатуры.
//
Процедура ЗаполнитьРеквизитыДляКонтроля(Объект, ВладелецРеквизитов) Экспорт
	
	ЭтоРеквизитыХарактеристик = ВладелецРеквизитов = "ХарактеристикиНоменклатуры";
	
	Если ВладелецРеквизитов = "ХарактеристикиНоменклатуры"
		И Не Объект.ИспользоватьХарактеристики Тогда
		Объект.РеквизитыБыстрогоОтбораХарактеристик.Очистить();
		Возврат;
	КонецЕсли;
	
	Если ВладелецРеквизитов = "ХарактеристикиНоменклатуры" Тогда
		ЗависимостьОтТипаНоменклатуры = ЗначениеНастроекПовтИсп.ВсеРеквизитыХарактеристикНоменклатуры(Объект.ТипНоменклатуры,
																									Объект.ОсобенностьУчета);
	Иначе
        ЗависимостьОтТипаНоменклатуры = ЗначениеНастроекПовтИсп.ВсеРеквизитыНоменклатуры(
            Объект.ТипНоменклатуры,
        	Объект.ОсобенностьУчета,
        	Объект.ИспользоватьХарактеристики,
        	Объект.ИспользоватьСрокГодностиСерии,
            Объект.ВестиУчетПоГТД, 
            Ложь, // ИзмеряетсяТолькоВСуммовомВыражении 
            Объект.ПодакцизныйТовар
        );
	КонецЕсли;
	
	Для Каждого НастройкаОтТипа Из ЗависимостьОтТипаНоменклатуры Цикл
		
		Если НастройкаОтТипа.Значение.Использование Тогда
			Справочники.ВидыНоменклатуры.ДобавитьРеквизитДляКонтроляИОтбораНоменклатуры(Объект,
																						НастройкаОтТипа.Значение,
																						ВладелецРеквизитов);
		Иначе
			УдалитьРеквизитДляКонтроля(Объект, НастройкаОтТипа.Ключ, ВладелецРеквизитов);
			УдалитьРеквизитДляОтбора(Объект, НастройкаОтТипа.Ключ, ВладелецРеквизитов);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВладелецРеквизитов = "ХарактеристикиНоменклатуры" Тогда
		Объект.РеквизитыДляКонтроляХарактеристик.Сортировать("ПредставлениеРеквизита");
	Иначе
		Объект.РеквизитыДляКонтроляНоменклатуры.Сортировать("ПредставлениеРеквизита");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДопРеквизитыДляКонтроляИОтбора(Объект, НазначениеДопРеквизитов) Экспорт
	
	Если НазначениеДопРеквизитов = "ХарактеристикиНоменклатуры"
		И Не Объект.ИспользоватьХарактеристики Тогда
		Объект.РеквизитыДляКонтроляХарактеристик.Очистить();
		Возврат;
	ИначеЕсли НазначениеДопРеквизитов = "СерииНоменклатуры"
		И Не Объект.ИспользоватьСерии Тогда
		Объект.РеквизитыДляКонтроляСерий.Очистить();
		Возврат;
	КонецЕсли;
	
	ТипыНеИспользуемыеДляКонтроля = Справочники.Номенклатура.НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы();
	
	Отбор = Новый Структура("Свойство, ЭтоДопРеквизит");
		
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ВсеДопРеквизиты = Справочники.Номенклатура.ВсеДополнительныеРеквизиты(Объект.Ссылка, НазначениеДопРеквизитов);
	
	РеквизитыДляКонтроля    = КоллекцияРеквизитовДляКонтроля(Объект, НазначениеДопРеквизитов);
	РеквизитыБыстрогоОтбора = КоллекцияРеквизитовОтбора(Объект, НазначениеДопРеквизитов);
	
	УдаляемыеСтроки = Новый Массив;
	
	Для каждого ДопРеквизит Из РеквизитыДляКонтроля Цикл
		Если Не ДопРеквизит.ЭтоДопРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, ДопРеквизит);
		
		ОписаниеДопРеквизита = ВсеДопРеквизиты.НайтиСтроки(Отбор);
		
		Если ОписаниеДопРеквизита.Количество() = 0 Тогда
			УдаляемыеСтроки.Добавить(ДопРеквизит);
		Иначе
			ЗаполнитьЗначенияСвойств(ДопРеквизит,ОписаниеДопРеквизита[0]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		РеквизитыДляКонтроля.Удалить(Строка);
	КонецЦикла;
	
	Если РеквизитыБыстрогоОтбора <> Неопределено Тогда
		УдаляемыеСтроки = Новый Массив;
		
		Для каждого ДопРеквизит Из РеквизитыБыстрогоОтбора Цикл
			Если Не ДопРеквизит.ЭтоДопРеквизит Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Отбор, ДопРеквизит);
			
			Если ВсеДопРеквизиты.НайтиСтроки(Отбор).Количество() = 0 Тогда
				УдаляемыеСтроки.Добавить(ДопРеквизит);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			РеквизитыБыстрогоОтбора.Удалить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ДопРеквизит Из ВсеДопРеквизиты Цикл
		
		ТипЗначения = ДопРеквизит.Тип;
		ЭтоНеиспользуемыйДляКонтроляТип = (ТипыНеИспользуемыеДляКонтроля.Найти(ТипЗначения) <> Неопределено);
		ТипРеквизитаБулево = (ТипЗначения = ОписаниеТиповБулево);
		
		ЗаполнитьЗначенияСвойств(Отбор, ДопРеквизит);
		
		НайденныеСтроки = РеквизитыДляКонтроля.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаРеквизитовДляКонтроля = НайденныеСтроки[0];
			СтрокаРеквизитовДляКонтроля.ПредставлениеРеквизита = ДопРеквизит.ПредставлениеРеквизита;	
			НоваяСтрока = Ложь;
		Иначе
			СтрокаРеквизитовДляКонтроля = РеквизитыДляКонтроля.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, ДопРеквизит);
			НоваяСтрока = Истина;
		КонецЕсли;
		
		Если ДопРеквизит.ЗаполнятьОбязательно Тогда
			СтрокаРеквизитовДляКонтроля.ЗаполнятьОбязательно = Истина;
			Если НазначениеДопРеквизитов <> "СерииНоменклатуры" Тогда
				СтрокаРеквизитовДляКонтроля.ОтображатьПриСоздании              = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРеквизитовДляКонтроля.ДоступностьЗаполнятьОбязательно = Истина;
		
		Если НазначениеДопРеквизитов <> "СерииНоменклатуры" Тогда
			Если Не ЭтоНеиспользуемыйДляКонтроляТип Тогда
				СтрокаРеквизитовДляКонтроля.ДоступностьУникален = Истина;
			Иначе
				СтрокаРеквизитовДляКонтроля.Уникален = Ложь;
				СтрокаРеквизитовДляКонтроля.ДоступностьУникален = Ложь;
			КонецЕсли;
			
			СтрокаРеквизитовДляКонтроля.ДоступностьОтображатьПриСоздании = Не СтрокаРеквизитовДляКонтроля.ЗаполнятьОбязательно
																		  И Не СтрокаРеквизитовДляКонтроля.Уникален;
			
		КонецЕсли;			
	КонецЦикла;
		
	Если РеквизитыБыстрогоОтбора <> Неопределено Тогда
		Отбор = Новый Структура("Свойство");
		
		Для Каждого ДопРеквизит Из ВсеДопРеквизиты Цикл
			ЗаполнитьЗначенияСвойств(Отбор, ДопРеквизит);
			ИзменяемыеСтроки = РеквизитыБыстрогоОтбора.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаРеквизитов Из ИзменяемыеСтроки Цикл
				ЗаполнитьЗначенияСвойств(СтрокаРеквизитов, ДопРеквизит, "ПредставлениеРеквизита");
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если РеквизитыДляКонтроля <> Неопределено Тогда
		РеквизитыДляКонтроля.Сортировать("ПредставлениеРеквизита");
	КонецЕсли;
	
КонецПроцедуры

Функция КоллекцияРеквизитовДляКонтроля(ТекущийОбъект, ТипВладельцаНабораЭлементов) Экспорт
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		Возврат ТекущийОбъект.РеквизитыДляКонтроляНоменклатуры;
	ИначеЕсли ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
		Возврат ТекущийОбъект.РеквизитыДляКонтроляХарактеристик;
	ИначеЕсли ТипВладельцаНабораЭлементов = "СерииНоменклатуры" Тогда
		Возврат ТекущийОбъект.РеквизитыДляКонтроляСерий;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция КоллекцияРеквизитовОтбора(ТекущийОбъект, ТипВладельцаНабораЭлементов) Экспорт
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		Возврат ТекущийОбъект.РеквизитыБыстрогоОтбораНоменклатуры;
	ИначеЕсли ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
		Возврат ТекущийОбъект.РеквизитыБыстрогоОтбораХарактеристик;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ИспользоватьПроизводство() Экспорт
	
	ИспользоватьПроизводство = Ложь; //Для УТ
	
	//++ НЕ УТ
	ИспользоватьПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством"); //Для КАУП
	//-- НЕ УТ
	
	Возврат ИспользоватьПроизводство;
	
КонецФункции

Процедура ПроверитьПоТипуИОсобенностиНоменклатуруОчиститьВладельца(ВидНоменклатуры, ЗначащаяЧастьИмени)
	
	Если Не ЗначениеЗаполнено(ВидНоменклатуры["Владелец" + ЗначащаяЧастьИмени]) Тогда
		Возврат;
	КонецЕсли;
	
	ОтборВладельца = НоменклатураСервер.ОтборВладельцаПодчиненныхСправочников(ВидНоменклатуры, ЗначащаяЧастьИмени);
	
	Если Не ОбщегоНазначенияУТ.СсылкаСоответствуетОтбору(ВидНоменклатуры["Владелец" + ЗначащаяЧастьИмени], ОтборВладельца) Тогда
		ВидНоменклатуры["Владелец" + ЗначащаяЧастьИмени] = Неопределено;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
