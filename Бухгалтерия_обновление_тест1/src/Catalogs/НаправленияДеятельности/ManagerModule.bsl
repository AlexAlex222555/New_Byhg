#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//  Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("УчетДоходов");
	Результат.Добавить("УчетЗатрат");
	Результат.Добавить("УчетРасчетовСПоставщиками");
	Результат.Добавить("УчетВнеоборотныхАктивов");
	Результат.Добавить("УчетДенежныхСредств;ГруппаУчетДС");
	Результат.Добавить("ДопускаетсяОбособлениеСверхПотребности");
    Результат.Добавить("НалогообложениеНДС;НалогообложениеНДС");
	
	НаправленияДеятельностиЛокализация.ДополнитьБлокируемыеРеквизитыОбъекта(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращеат признак ведения учета по направлениям деятельности
//
Функция ИспользуетсяУчетПоНаправлениям() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности")
			//++ НЕ УТ
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетВнеоборотныхАктивовПоНаправлениямДеятельности")
			//-- НЕ УТ
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетРасчетовСПоставщикамиПоНаправлениямДеятельности")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетДСпоНаправлениямДеятельностиРаздельно")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетДСпоНаправлениямДеятельностиПоКорреспонденции");
КонецФункции

// Возвращает параметры заполнения реквизита НалогообложениеНДСПродажи
//
Функция ПараметрыЗаполненияНалогообложениеНДСПродажи() Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи();
	
	ПараметрыЗаполнения.Дата = ТекущаяДатаСеанса();
	ПараметрыЗаполнения.РеализацияТоваров = Истина;
	ПараметрыЗаполнения.РеализацияРаботУслуг = Истина;
	ПараметрыЗаполнения.ЭтоЗаказ = Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Назначения

// Возвращает шаблон для генерации назначения товаров в документе.
//
// Параметры:
// 		Объект - СправочникОбъект.НаправленияДеятельности, ДанныеФормыСтруктура - направление деятельности, по которому необходимо получить шаблон назначения.
//
// Возвращаемое значение:
// 		Структура - (см. функцию Справочники.Назначения.ШаблонНового).
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если Объект.УчетЗатрат Тогда
		
		ШаблонНазначения.НаправлениеДеятельности = Объект.Ссылка;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	
#Область ОбработатьДанныеДляГенерацииНазначений

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2909a6a3-1842-4969-b10f-ab9b4084365f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НаправленияДеятельности.ЗарегистрироватьДанныеКОбработкеДляГенерацииНазначений";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.Назначения,"
		+ "Справочник.НаправленияДеятельности";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Назначения";
	Обработчик.БлокируемыеОбъекты = "Справочник.Назначения";
	Обработчик.Комментарий = НСтр("ru='Создает новые назначения связанные со справочником ""Направления деятельности""';uk='Створює нові призначення, пов''язані з довідником ""Напрями діяльності""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	//++ НЕ УТ
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	НоваяСтрока = Исключения.Добавить();
	НоваяСтрока.ИмяОбъекта = "Справочники.НаправленияДеятельности";
	НоваяСтрока.Порядок    = "Удалить";
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыОбработатьДанныеДляГенерацииНазначений(
		Обработчик.ПриоритетыВыполнения,
		"До",
		Исключения
	);

#КонецОбласти


#Область ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("59bb3c93-379a-4b43-a012-ccb2ef9ae455");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НаправленияДеятельности.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет 
                                   |- реквизиты ""Назначение"" и ""Допускается обособление товаров и работ сверх потребности"",
                                   |- реквизит ""УчетРасчетовСПоставщиками"".
                                   |'
                                   |;uk='Заповнює 
                                   |- реквізити ""Призначення"" та ""Допускається відокремлення товарів та робіт понад потребу"", 
                                   |- реквізит ""УчетРасчетовСПоставщиками"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.НаправленияДеятельности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.Назначения.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.НаправленияДеятельности.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.НаправленияДеятельности.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	//++ НЕ УТ
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//-- НЕ УТ

	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	НоваяСтрока = Исключения.Добавить();
	НоваяСтрока.ИмяОбъекта = "Справочники.НаправленияДеятельности";
	НоваяСтрока.Порядок    = "После";
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыОбработатьДанныеДляГенерацииНазначений(
		Обработчик.ПриоритетыВыполнения,
		"До",
		Исключения
	);
	
#КонецОбласти

КонецПроцедуры


Процедура ЗарегистрироватьДанныеКОбработкеДляГенерацииНазначений(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОбъекта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НаправленияДеятельности КАК ТаблицаОбъекта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО ТаблицаОбъекта.Ссылка = Назначения.НаправлениеДеятельности
	|			И Назначения.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			И Назначения.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			И Назначения.Заказ = НЕОПРЕДЕЛЕНО
	|ГДЕ
	|	ТаблицаОбъекта.УчетЗатрат
	|	И ТаблицаОбъекта.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И Назначения.Ссылка ЕСТЬ NULL");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляГенерацииНазначений(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.НаправленияДеятельности";
	
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Справочник.Назначения") Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ЗапросПоиска = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Назначения.Ссылка КАК Назначение
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|ГДЕ
	|	Назначения.НаправлениеДеятельности = &НаправлениеДеятельности
	|	И Назначения.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|	И Назначения.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	И Назначения.Заказ = НЕОПРЕДЕЛЕНО
	// Тип назначения пропускается, т.к. он еще не обработан на этот момент
	|");
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Назначения");
			ЭлементБлокировки.УстановитьЗначение("НаправлениеДеятельности", Выборка.Ссылка);
			ЭлементБлокировки.УстановитьЗначение("Заказ",                   Неопределено);
			ЭлементБлокировки.УстановитьЗначение("Партнер",                 Справочники.Партнеры.ПустаяСсылка());
			ЭлементБлокировки.УстановитьЗначение("Договор",                 Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			
			Блокировка.Заблокировать();
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Объект <> Неопределено Тогда
				
				Если Объект.УчетЗатрат И Не ЗначениеЗаполнено(Объект.Назначение) Тогда
					
					ЗапросПоиска.УстановитьПараметр("НаправлениеДеятельности", Объект.Ссылка);
					ВыборкаПоиска = ЗапросПоиска.Выполнить().Выбрать();
					
					Если Не ВыборкаПоиска.Следующий() Тогда
						
						НазначениеОбъект = Справочники.Назначения.СоздатьЭлемент();
						ЗаполнитьЗначенияСвойств(НазначениеОбъект, ШаблонНазначения(Объект));
						
						НазначениеОбъект.Наименование                = Строка(Объект.Ссылка);
						НазначениеОбъект.ПометкаУдаления             = Объект.ПометкаУдаления;
						НазначениеОбъект.КонтролироватьТолькоНаличие = Объект.ДопускаетсяОбособлениеСверхПотребности;
						НазначениеОбъект.ДвиженияПоСкладскимРегистрам = Истина;
						
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(НазначениеОбъект, Истина);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОбъекта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НаправленияДеятельности КАК ТаблицаОбъекта
	|ГДЕ
	|	(ТаблицаОбъекта.УчетЗатрат И НЕ ТаблицаОбъекта.УчетРасчетовСПоставщиками)
	|   ИЛИ (
	|		ТаблицаОбъекта.УдалитьВариантОбособления <> ЗНАЧЕНИЕ(Перечисление.УдалитьВариантыОбособленияПоНаправлениюДеятельности.ПустаяСсылка)
	|		И ТаблицаОбъекта.УчетЗатрат И ТаблицаОбъекта.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|   )
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.НаправленияДеятельности";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДопПараметры.ИмяВременнойТаблицы = "ВтЗаблокированныеСсылки";
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
		Параметры.Очередь,
		"Справочник.Назначения", 
		МенеджерВременныхТаблиц, 
		ДопПараметры
	);
	
	ЗапросПоиска = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Назначения.Ссылка КАК Назначение
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокированныеСсылки КАК ЗаблокированныеСсылки
	|		ПО Назначения.Ссылка = ЗаблокированныеСсылки.Ссылка
	|ГДЕ
	|	Назначения.НаправлениеДеятельности = &НаправлениеДеятельности
	|	И Назначения.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|	И Назначения.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	И Назначения.Заказ = НЕОПРЕДЕЛЕНО
	// Тип назначения пропускается, т.к. он еще не обработан на этот момент
	|	И ЗаблокированныеСсылки.Ссылка ЕСТЬ NULL");
	
	ЗапросПоиска.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДанныеОбъекта = Выборка.Ссылка.ПолучитьОбъект();
			Если ДанныеОбъекта = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если Не ДанныеОбъекта.УчетРасчетовСПоставщиками 
				И ДанныеОбъекта.УчетЗатрат Тогда
				
				ДанныеОбъекта.УчетРасчетовСПоставщиками = ДанныеОбъекта.УчетЗатрат
				
			КонецЕсли;
			
			Если ДанныеОбъекта.УдалитьВариантОбособления <> Перечисления.УдалитьВариантыОбособленияПоНаправлениюДеятельности.ПустаяСсылка() Тогда
				Если ДанныеОбъекта.УчетЗатрат
					И ДанныеОбъекта.УдалитьВариантОбособления = Перечисления.УдалитьВариантыОбособленияПоНаправлениюДеятельности.ПоНаправлениюВЦелом Тогда
					ДанныеОбъекта.ДопускаетсяОбособлениеСверхПотребности = Истина;
				КонецЕсли;
				ДанныеОбъекта.УдалитьВариантОбособления = Перечисления.УдалитьВариантыОбособленияПоНаправлениюДеятельности.ПустаяСсылка();
			КонецЕсли;
			
			Если ДанныеОбъекта.УчетЗатрат И Не ЗначениеЗаполнено(ДанныеОбъекта.Назначение) Тогда
				ЗапросПоиска.УстановитьПараметр("НаправлениеДеятельности", ДанныеОбъекта.Ссылка);
				ВыборкаПоиска = ЗапросПоиска.Выполнить().Выбрать();
				Если ВыборкаПоиска.Следующий() Тогда
					ДанныеОбъекта.Назначение = ВыборкаПоиска.Назначение;
				Иначе
					ВызватьИсключение НСтр("ru='В информационной базе не обнаружено нужное назначение';uk='В інформаційній базі не виявлено потрібне призначення'");
				КонецЕсли;
			КонецЕсли;
		
			Если ДанныеОбъекта.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать объект: %Ссылка% по причине: %Причина%';uk='Не вдалося обробити об''єкт: %Ссылка% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
									
		КонецПопытки;
	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
