
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
    
    УстановитьДоступностьОплатыВВалюте();
	
	ПараметрыВзаиморасчеты = Справочники.ДоговорыКонтрагентов.ПараметрыВзаиморасчеты(Объект.ТипДоговора, Объект.Сумма);
	ВзаиморасчетыСервер.ФормаПриСозданииНаСервере(ЭтаФорма, ПараметрыВзаиморасчеты);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	
	ДоговорыКонтрагентовЛокализация.ПриСозданииНаСервереФормаЭлемента(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	СуммаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	ДоговорыКонтрагентовКлиентЛокализация.ПриОткрытии(Отказ, ЭтаФорма);
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	ПараметрыВзаиморасчеты = Справочники.ДоговорыКонтрагентов.ПараметрыВзаиморасчеты(Объект.ТипДоговора, Объект.Сумма);
	ВзаиморасчетыСервер.ФормаПриЧтенииНаСервере(ЭтаФорма, ПараметрыВзаиморасчеты);
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ФиксированнаяСуммаДоговора И Объект.Сумма = 0 Тогда
		
		ТекстОшибки = НСтр("ru='Не заполнена сумма договора.';uk='Не заповнена сума договору.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект.Ссылка,
			"Объект.Сумма",,
			Отказ);
	КонецЕсли;
	
	
	ИспользоватьОформлениеЗакупок = ИспользоватьОформлениеЗакупок();
	
	ВариантПриемкиОбязателенДляЗаполнения = (ИспользоватьОрдернуюСхемуПриПоступлении
												Или ИспользоватьТоварыВПутиОтПоставщиков
												Или ИспользоватьНеотфактурованныеПоставки)
												И ИспользоватьОформлениеЗакупок;
	
	Если Не ВариантПриемкиОбязателенДляЗаполнения Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОформлениеОрдера");
		МассивНепроверяемыхРеквизитов.Добавить("ПриемкаТоваров");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДоговорыКонтрагентовЛокализация.ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ДоговорыКонтрагентовЛокализация.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ОбновитьЗаголовокФормы();
	ВзаиморасчетыСервер.ФормаПослеЗаписиНаСервере(ЭтаФорма);
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);

	СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	ДоговорыКонтрагентовЛокализация.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ГрафикИсполненияДоговора" Тогда
		Если Объект.Ссылка = Параметр.Договор Тогда
			
			Объект.ГрафикИсполненияДоговора = Источник;
			Объект.Сумма = Параметр.СуммаДоговора;
			
			ИзменениеГрафикаИсполненияНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка)
		Или ПродажиКлиент.ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Тогда
		ИзмененаОплатаСервер(ИмяСобытия, Параметр);
	КонецЕсли;
	
	ДоговорыКонтрагентовКлиентЛокализация.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПроизведенаЗапись = Истина;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область УниверсальныеОбработчикиСобытий

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент)
	ДоговорыКонтрагентовКлиентЛокализация.ПриИзмененииРеквизита(
		Элемент,
		ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиФормы(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДоговорыКонтрагентовКлиентЛокализация.ОбработкаНавигационнойСсылкиФормы(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииИзмененияРеквизитаЛокализации(ИмяЭлемента, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ПараметрыОбработки)
	
	ДоговорыКонтрагентовЛокализация.ПриОкончанииИзмененияРеквизита(ИмяЭлемента, ЭтаФорма, ПараметрыОбработки);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Закрыт") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДоговораПриИзменении(Элемент)
	
	ТипДоговораПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	ПартнерПриИзмененииСервер(Объект.Партнер, 
								Объект.Контрагент, 
								Объект.ОплатаВВалюте, 
								Объект.БанковскийСчетКонтрагента, 
								Объект.КонтактноеЛицо, 
								КонтрагентЮрФизЛицо);
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	КонтактноеЛицоПриИзмененииСервер(Объект.Партнер, 
										Объект.Контрагент, 
										Объект.ОплатаВВалюте, 
										Объект.БанковскийСчетКонтрагента, 
										Объект.КонтактноеЛицо, 
										КонтрагентЮрФизЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
    
    Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо") <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
    	Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
        Объект.ОплатаВВалюте 		= Ложь;
    Иначе	
        Объект.ОплатаВВалюте 		= Истина;
    	Если Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
    		Объект.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
    	КонецЕсли;	
    КонецЕсли;
	
	КонтрагентПриИзмененииСервер(Объект.Контрагент, Объект.ОплатаВВалюте, Объект.БанковскийСчетКонтрагента, КонтрагентЮрФизЛицо);
	
	УстановитьНалогообложениеНДС(Ложь, Ложь, Истина);
    
    УстановитьДоступностьОплатыВВалюте();
    
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
    
	ЗаполнитьНастройкиУчетаНДСПоОрганизации();
	УправлениеЭлементамиНастройкиУчетаНДС();
	УстановитьДоступностьОплатыВВалюте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	
	ВалютаВзаиморасчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Элементы.НаименованиеДляПечати.СписокВыбора.Очистить();
	Элементы.НаименованиеДляПечати.СписокВыбора.Добавить(Объект.Наименование);
КонецПроцедуры

&НаКлиенте
Процедура КлассификацияЗадолженностиПриИзменении(Элемент)
	
	УстановитьКлассификациюЗадолженности(КлассификацияЗадолженности);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетовПриИзменении(Элемент)
	
	ПорядокРасчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФиксированнаяСуммаДоговораПриИзменении(Элемент)
	
	Если Не ФиксированнаяСуммаДоговора Тогда
		ГрафикИсполненияВДоговоре = 0;
		Объект.ЗаданГрафикИсполнения = Ложь;
		Объект.Сумма = 0;
	КонецЕсли;
	
	УправлениеЭлементамиГрафикИсполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикИсполненияВДоговореПриИзменении(Элемент)
	
	Объект.ЗаданГрафикИсполнения = (ГрафикИсполненияВДоговоре = 1);
	
	УправлениеЭлементамиГрафикИсполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьГрафикИсполненияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Договор еще не записан. Переход к редактированию графика возможен только после записи договора и установки статуса ""Действует"".';uk='Договір ще не записаний. Перехід до редагування графіка можливий тільки після запису договору і встановлення статусу ""Діє"".'"));
		Возврат;
	КонецЕсли;
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Договор", Объект.Ссылка);
	
	СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
	СтруктураПараметры.Вставить("Сумма", Объект.Сумма);
	СтруктураПараметры.Вставить("Ключ", Объект.ГрафикИсполненияДоговора);
	
	ОткрытьФорму("Документ.ГрафикИсполненияДоговора.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Объект.ГрафикИсполненияДоговора.Пустая() Тогда
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(Объект.ГрафикИсполненияДоговора);
		
		ОткрытьФорму(
			"Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета",
			Новый Структура("ВходящиеДокументы", СписокДокументов),
			ЭтаФорма,
			Истина
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеПоСуммеПродажи = Новый Структура("СуммаВзаиморасчетов", Объект.Сумма);
	ПродажиКлиент.ОткрытьОтчетРасшифровкиЗапретаОтгрузки(Объект.Ссылка, ДанныеПоСуммеПродажи, Объект.Ссылка, НоваяАрхитектураВзаиморасчетов);
	
КонецПроцедуры


&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОформленияЗакупокПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Элементы.ВариантОформленияЗакупокДвумяДокументами.Видимость  = ВариантОформленияЗакупок = "ДвумяДокументами"
																	И ИспользоватьВариантыОформленияЗакупокДвумяДокументами;
	Объект.ВариантОформленияЗакупок = ?(ВариантОформленияЗакупок = "ОднимДокументом",
										ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.НеРазделять"),
										?(ВариантОформленияЗакупокДвумяДокументами = "ТоварыВПути",
											ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.ТоварыВПути"),
											ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставки")));
	
	ПриИзмененииНастроекПриемкиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОформленияЗакупокДвумяДокументамиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Объект.ВариантОформленияЗакупок = ?(ВариантОформленияЗакупокДвумяДокументами = "ТоварыВПути",
										ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.ТоварыВПути"),
										ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставки"));
	
	ПриИзмененииНастроекПриемкиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеОрдераПриИзменении(Элемент)
	Модифицированность = Истина;
	ПриИзмененииНастроекПриемкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаТоваровПриИзменении(Элемент)
	Модифицированность = Истина;
	ПриИзмененииНастроекПриемкиСервер();
КонецПроцедуры

#Область Доставка

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
		Элемент,
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставкиПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОплатаВВалютеПриИзменении(Элемент)
	
	ОплатаВВалютеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МоментОпределенияБазыНДСПриИзменении(Элемент)
	УправлениеЭлементамиНастройкиУчетаНДС();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

#Область УниверсальныеОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЛокализации(Команда)
	
	ДоговорыКонтрагентовКлиентЛокализация.ВыполнитьКомандуЛокализации(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыЛокализации(ИмяКоманды, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ПараметрыОбработки)
	
	ДоговорыКонтрагентовЛокализация.ВыполнитьКомандуЛокализации(ЭтаФорма, ИмяКоманды, ПараметрыОбработки);
	
КонецПроцедуры
	
#КонецОбласти

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачалаДействия", "ДатаОкончанияДействия"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетОплаты(Команда)
	
	ВзаиморасчетыКлиент.ЗачетОплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ТипДоговораПриИзмененииСервер()
	
	СтараяХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	Объект.ХозяйственнаяОперация = Справочники.ДоговорыКонтрагентов.ХозяйственнаяОперация(Объект.ТипДоговора, Объект.ВариантОформленияЗакупок);
	Если СтараяХозяйственнаяОперация <> Объект.ХозяйственнаяОперация Тогда
		Объект.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка();
	КонецЕсли;
	
	ОперацииЗакупки = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииИмпорта = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	
	РеквизитыПартнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Партнер, "Клиент, Поставщик");
	Если ЗначениеЗаполнено(Объект.Партнер)
		И (Не РеквизитыПартнера.Клиент
			И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
				ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
				ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи))
		И (Не РеквизитыПартнера.Поставщик
			И (ОперацииЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
				Или ОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
                Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)) Тогда
		
		Объект.Партнер    = Справочники.Партнеры.ПустаяСсылка();
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
	КонецЕсли;
	
	УстановитьВидимостьКонтроляЗадолженности(ЭтаФорма);
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		Объект.ОграничиватьСуммуЗадолженности = Ложь;
	КонецЕсли;
	
	Если Объект.ТипДоговора <> Перечисления.ТипыДоговоров.СПокупателем Тогда
		Объект.ЗапрещаетсяПросроченнаяЗадолженность = Ложь;
	КонецЕсли;
	
	УстановитьНалогообложениеНДС();
	
	Если Объект.ТипДоговора <> Перечисления.ТипыДоговоров.СПоклажедателем
		И Объект.ТипДоговора <> Перечисления.ТипыДоговоров.СКомитентомНаЗакупку Тогда
		Объект.ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров = Перечисления.ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров.ПустаяСсылка();
	Иначе
		Объект.ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров = Перечисления.ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров.ОформлятьСписаниеПринятыхНаХранениеТоваров;
	КонецЕсли;
	
	Если Не (Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
            Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.ИмпортКомиссия
			Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт) Тогда
		
		Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять;
		ИнициализироватьВариантОформленияЗакупок();
		
	КонецЕсли;
	
	Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт
		И ВариантОформленияЗакупок = "ДвумяДокументами" Тогда
		
		Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.ТоварыВПути;
		ИнициализироватьВариантОформленияЗакупок();
		
	КонецЕсли;
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	
	ЗаполнитьПараметрыВыбораПартнера();
	НастроитьСписокВыбораПорядкаРасчетов();
	НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств();
    УправлениеЭлементамиНастройкиУчетаНДС();
	ОбновитьЗаголовокФормы();
	УправлениеЭлементамиГрафикИсполнения();
	УстановитьВидимостьНаправленияДеятельности();
	УстановитьВидимостьВариантовОформленияЗакупок();
	УстановитьВидимостьПорядокСписанияПринятыхТоваров(ЭтаФорма);
	ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере("ТипДоговора", Неопределено);
	
	ПараметрыВзаиморасчеты = Справочники.ДоговорыКонтрагентов.ПараметрыВзаиморасчеты(Объект.ТипДоговора, Объект.Сумма);
	ВзаиморасчетыСервер.ПриИзмененииПараметровМеханизма(ЭтаФорма, ПараметрыВзаиморасчеты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВыбораПартнера()
	
	МассивПараметровВыбораПартнера = Новый Массив;
	
	ОперацииЗакупки = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииИмпорта = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		
		МассивПараметровВыбораПартнера.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли ОперацииЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или ОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
        Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
		
		МассивПараметровВыбораПартнера.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		
	КонецЕсли;
	
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораПартнера);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПартнерПриИзмененииСервер(Партнер, Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, КонтактноеЛицо, КонтрагентЮрФизЛицо)
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента);
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо");
	
КонецПроцедуры

&НаСервере
Процедура ВалютаВзаиморасчетовПриИзмененииСервер()
	
    Объект.ОплатаВВалюте = ВзаиморасчетыСервер.ПолучитьОплатуВВалютеПоУмолчанию(Объект.ВалютаВзаиморасчетов);
	
	ОплатаВВалютеПриИзмененииСервер();
    
	ЗаполнитьМоментОпределенияБазыНДСПоОрганизации();
	УправлениеЭлементамиНастройкиУчетаНДС();
    УстановитьДоступностьОплатыВВалюте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьСуммуЗадолженностиПриИзменении(Элемент)
	
	УстановитьВидимостьКонтроляЗадолженности(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтактноеЛицоПриИзмененииСервер(Партнер, Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, КонтактноеЛицо, КонтрагентЮрФизЛицо)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Партнер Тогда
		Партнер = ВладелецКонтактногоЛица;
		ПартнерПриИзмененииСервер(Партнер, Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, КонтактноеЛицо, КонтрагентЮрФизЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииСервер(Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, КонтрагентЮрФизЛицо)
	
	ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента);
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо");
		
КонецПроцедуры

&НаСервере
Процедура ПорядокРасчетовПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Объект.ЗаданГрафикИсполнения = Ложь;
	КонецЕсли;
	
	УправлениеЭлементамиГрафикИсполнения();
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "ПорядокРасчетов");
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Не ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		Возврат;
	КонецЕсли;
	
	
	УстановитьНалогообложениеНДС();
	
КонецПроцедуры


&НаСервере
Процедура ОплатаВВалютеПриИзмененииСервер()
	
	ПараметрыВыбораБанковскихСчетов = ПараметрыВыбораБанковскихСчетов(Объект.ОплатаВВалюте);
	Элементы.БанковскийСчет.ПараметрыВыбора            = ПараметрыВыбораБанковскихСчетов;
	Элементы.БанковскийСчетКонтрагента.ПараметрыВыбора = ПараметрыВыбораБанковскихСчетов;
	
	Если НЕ БанковскийСчетСоответствуетПорядкуОплаты(Объект.БанковскийСчет, Объект.ОплатаВВалюте) Тогда
		Объект.БанковскийСчет = Неопределено;
	КонецЕсли;
	ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.ОплатаВВалюте, Объект.БанковскийСчет);
	
	Если НЕ БанковскийСчетСоответствуетПорядкуОплаты(Объект.БанковскийСчетКонтрагента, Объект.ОплатаВВалюте) Тогда
		Объект.БанковскийСчетКонтрагента = Неопределено;
	КонецЕсли;
	ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, Объект.ОплатаВВалюте, Объект.БанковскийСчетКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура СуммаПриИзмененииСервер()
	ПараметрыВзаиморасчеты = Справочники.ДоговорыКонтрагентов.ПараметрыВзаиморасчеты(Объект.ТипДоговора, Объект.Сумма);
	ВзаиморасчетыСервер.ПриИзмененииПараметровМеханизма(ЭтаФорма, ПараметрыВзаиморасчеты);
КонецПроцедуры

&НаСервере
Процедура УстановитьНалогообложениеНДС(ПриОткрытииФормы = Ложь, ПоПродаже = Истина, ПоЗакупке = Истина)
	
	НовоеНалогообложениеНДС = Неопределено;
	ДоступностьНалогообложенияНДС = Неопределено;
	
	Если ПоПродаже И Перечисления.ТипыДоговоров.ЭтоДоговорПродажи(Объект.ТипДоговора) Тогда
		
		ПараметрыЗаполнения = Справочники.ДоговорыКонтрагентов.ПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НовоеНалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
		УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров); 
		
	КонецЕсли;
	
	Если ПоЗакупке И Перечисления.ТипыДоговоров.ЭтоДоговорЗакупки(Объект.ТипДоговора) Тогда
		
		ЭтоИмпорт = (Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.ИмпортКомиссия);
		
		Если ЭтоИмпорт Тогда
			ДоступностьНалогообложенияНДС = Ложь;
			НовоеНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		Иначе
			ПараметрыЗаполнения = Справочники.ДоговорыКонтрагентов.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
			УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(НовоеНалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
			УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров); 
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовоеНалогообложениеНДС <> Неопределено И Объект.НалогообложениеНДС <> НовоеНалогообложениеНДС И (НЕ ПриОткрытииФормы) Тогда
		Объект.НалогообложениеНДС = НовоеНалогообложениеНДС;
	КонецЕсли;
	
	Если ДоступностьНалогообложенияНДС = Неопределено Тогда
		ДоступностьНалогообложенияНДС = НДСОбщегоНазначенияСервер.ОрганизацияПлательщикНДС(Объект.Организация, Объект.Дата);
	КонецЕсли;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалогообложениеНДС", "Доступность", ДоступностьНалогообложенияНДС);
	
КонецПроцедуры

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы)
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Изменить", "Доступность", Ложь);

	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо");
	
    Если Не ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
        КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВариантПриемкиТоваров) Тогда
		Объект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	
	ИспользоватьОрдернуюСхемуПриПоступлении = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении");
	ИспользоватьТоварыВПутиОтПоставщиков    = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьНеотфактурованныеПоставки   = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	НоваяАрхитектураВзаиморасчетов          = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	
	ФиксированнаяСуммаДоговора = (Объект.Сумма <> 0);
	Если Объект.ЗаданГрафикИсполнения Тогда
		ГрафикИсполненияВДоговоре = 1;
	Иначе
		ГрафикИсполненияВДоговоре = 0;
	КонецЕсли;
	
	ИнициализироватьВариантОформленияЗакупок();
	
	
	ЗакупкиСервер.ЗаполнитьНастройкиВариантовПриемки(Объект.ВариантПриемкиТоваров, ОформлениеОрдера, ПриемкаТоваров);
	ЗакупкиСервер.ЗаполнитьСписокВыбораВариантовПриемкиПоДоговорам(Элементы.ОформлениеОрдера, Элементы.ПриемкаТоваров, Объект.ВариантОформленияЗакупок);
	
	ПараметрыВыбораБанковскогоСчета = ПараметрыВыбораБанковскихСчетов(Объект.ОплатаВВалюте);
	Элементы.БанковскийСчет.ПараметрыВыбора            = ПараметрыВыбораБанковскогоСчета;
	Элементы.БанковскийСчетКонтрагента.ПараметрыВыбора = ПараметрыВыбораБанковскогоСчета;
	ЗаполнитьПараметрыВыбораПартнера();
	НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	НастроитьСписокВыбораПорядкаРасчетов();
	УстановитьВидимостьКонтроляЗадолженности(ЭтаФорма);
	УправлениеЭлементамиГрафикИсполнения();
    
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьНастройкиУчетаНДСПоОрганизации();
	КонецЕсли; 
	УправлениеЭлементамиНастройкиУчетаНДС();

	УстановитьВидимостьНаправленияДеятельности();
	УстановитьВидимостьВариантовОформленияЗакупок();
	УстановитьВидимостьПорядокСписанияПринятыхТоваров(ЭтаФорма);
	
	ОбновитьЗаголовокФормы();
	
	Элементы.НаименованиеДляПечати.СписокВыбора.Очистить();
	Элементы.НаименованиеДляПечати.СписокВыбора.Добавить(Объект.Наименование);
	
	Если ТолькоПросмотр Тогда
		Элементы.ФиксированнаяСуммаДоговора.ТолькоПросмотр = Истина;
		Элементы.КлассификацияЗадолженности.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ОформлениеОрдера.Доступность = ПравоДоступа("Редактирование", Метаданные.Справочники.ДоговорыКонтрагентов);
	Элементы.ПриемкаТоваров.Доступность   = ПравоДоступа("Редактирование", Метаданные.Справочники.ДоговорыКонтрагентов);
	
	УстановитьДоступностьДоставки();
	
	УстановитьНалогообложениеНДС(Истина);
	
	Если
		(Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоклажедателем
		ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомитентомНаЗакупку)
		И Не ЗначениеЗаполнено(Объект.ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров) Тогда
		
		Объект.ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров =
			Перечисления.ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров.ОформлятьВыкупПринятыхНаХранениеТоваров;
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	ДоговорыКонтрагентовЛокализация.ПриЧтенииСозданииНаСервере(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	ДоговорыКонтрагентовЛокализация.УстановитьУсловноеОформление(ЭтаФорма);
КонецПроцедуры


&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован Тогда
		УстановитьПодписку = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт Или
		Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует Тогда
		УстановитьПодписку = Объект.Согласован;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Номер");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("ДатаНачалаДействия");
	МассивЭлементов.Добавить("ДатаОкончанияДействия");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("ВалютаВзаиморасчетов");
	МассивЭлементов.Добавить("ОплатаВВалюте");
	МассивЭлементов.Добавить("ТипДоговора");
	МассивЭлементов.Добавить("ПорядокРасчетов");
	МассивЭлементов.Добавить("УстановитьИнтервал");
	МассивЭлементов.Добавить("ОграничиватьСуммуЗадолженности");
	МассивЭлементов.Добавить("ДопустимаяСуммаЗадолженности");
    МассивЭлементов.Добавить("ОбособленноеПодразделениеПоУмолчанию");
    МассивЭлементов.Добавить("ОтветственныйЗаВыпискуНалоговыхДокументов");
    МассивЭлементов.Добавить("НоменклатураЗаполненияНалоговыхНаАванс");
    МассивЭлементов.Добавить("МоментОпределенияБазыНДС");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ОграничиватьСуммуЗадолженности");
	МассивЭлементов.Добавить("ДопустимаяСуммаЗадолженности");
	МассивЭлементов.Добавить("ЗапрещаетсяПросроченнаяЗадолженность");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"ТолькоПросмотр", НЕ ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВыбораБанковскихСчетов(ОплатаВВалюте)

	МассивПараметров = Новый Массив;
	
	Если НЕ ОплатаВВалюте Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Константы.ВалютаРегламентированногоУчета.Получить()));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Новый ФиксированныйМассив(ИностранныеВалюты())));
	КонецЕсли;
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("ВыборСчетовГоловнойОрганизации", Неопределено));
	
	Возврат Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИностранныеВалюты()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Ссылка <> &ВалютаРегламентированногоУчета
	|");
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчетСоответствуетПорядкуОплаты(БанковскийСчет, ОплатаВВалюте)

	Соответствует = Истина;
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		ВалютаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ВалютаДенежныхСредств");
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		Если ОплатаВВалюте Тогда
			Соответствует = ВалютаСчета <> ВалютаРегламентированногоУчета;
		Иначе
			Соответствует = ВалютаСчета = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Соответствует;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Организация, ОплатаВВалюте, БанковскийСчет)
	
	Если ЗначениеЗаполнено(БанковскийСчет)
	 ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Организация
	|	И ((БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = &ВалютаРегл И НЕ &ОплатаВВалюте)
	|	ИЛИ (БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств <> &ВалютаРегл И &ОплатаВВалюте))
	|	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОплатаВВалюте", ОплатаВВалюте);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		БанковскийСчет = Выборка.БанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента)
	
	Если (ЗначениеЗаполнено(БанковскийСчетКонтрагента)
		И Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента,"Владелец"))
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.Владелец = &Контрагент
	|	И ((БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &ВалютаРегл И НЕ &ОплатаВВалюте)
	|	ИЛИ (БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств <> &ВалютаРегл И &ОплатаВВалюте))
	|	И НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ОплатаВВалюте", ОплатаВВалюте);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		БанковскийСчетКонтрагента = Выборка.БанковскийСчетКонтрагента;
	Иначе
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	ОперацииЗакупки = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииИмпорта = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	
	ПредставлениеТипа = Метаданные.Справочники.ДоговорыКонтрагентов.ПредставлениеОбъекта;
	Если ЗначениеЗаполнено(Объект.ТипДоговора) Тогда
		ПредставлениеТипа = "" + Объект.ТипДоговора;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.Заголовок = ПредставлениеТипа + " " + НСтр("ru='(создание)';uk='(створення)'"); ;
	Иначе
		ЭтаФорма.Заголовок = Объект.Наименование + " (" + ПредставлениеТипа + ")";
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "Партнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаСчетКонтрагентаВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "БанковскийСчетКонтрагента", Объект.ХозяйственнаяОперация);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКонтроляЗадолженности(Форма)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ОграничиватьСуммуЗадолженности");
	МассивИменЭлементов.Добавить("ДопустимаяСуммаЗадолженности");
	МассивИменЭлементов.Добавить("НадписьВалютаВзаиморасчетов");
	МассивИменЭлементов.Добавить("ЗапрещаетсяПросроченнаяЗадолженность");
	МассивИменЭлементов.Добавить("ГруппаКонтрольЗадолженности");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		МассивИменЭлементов,
		"Видимость",
		Форма.Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДопустимаяСуммаЗадолженности",
		"Доступность",
		Форма.Объект.ОграничиватьСуммуЗадолженности);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораПорядкаРасчетов()
	
	ОперацииЗакупки = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииИмпорта = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	
	СписокВыбора = Элементы.ПорядокРасчетов.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным, НСтр("ru='По отчетам по комиссии';uk='За звітами по комісії'"));
		
		Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным 
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
	ИначеЕсли (ОперацииЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или ОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено)
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи Тогда
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным,
									НСтр("ru='По документам выкупа и списания товаров с хранения';uk='За документами викупу і списання товарів зі зберігання'"));
		Иначе
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным,
									НСтр("ru='По документам выкупа товаров хранителем';uk='За документами викупу товарів зберігачем'"));
		КонецЕсли;
		
		Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
		Если Константы.ВариантОбособленияТоваровВПродажах.Получить() = Перечисления.ВариантыОбособленияТоваровВПродажах.ЗаказКлиента Тогда
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
		КонецЕсли;
		
	Иначе
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств()
	
	ТипыДоговоровПокупатель = Новый Массив;
	ТипыДоговоровПокупатель.Добавить(Перечисления.ТипыДоговоров.СПокупателем);
	ТипыДоговоровПокупатель.Добавить(Перечисления.ТипыДоговоров.СКомиссионером);
	ТипыДоговоровПокупатель.Добавить(Перечисления.ТипыДоговоров.СДавальцем);
	ТипыДоговоровПокупатель.Добавить(Перечисления.ТипыДоговоров.СХранителем);
	
	ТипыДоговоровПоставщик = Новый Массив;
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.СПоставщиком);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.СКомитентом);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.СПереработчиком);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.Импорт);
    ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.ИмпортКомиссия);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.СПоклажедателем);

	МассивПараметровВыбора = Новый Массив;
	
	Если ТипыДоговоровПокупатель.Найти(Объект.ТипДоговора) <> Неопределено Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	ИначеЕсли ТипыДоговоровПоставщик.Найти(Объект.ТипДоговора) <> Неопределено Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Элементы.СтатьяДвиженияДенежныхСредств.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьНаправленияДеятельности()
	
	Видимость = Ложь;
	Если ЗначениеЗаполнено(Объект.ТипДоговора) Тогда
		
		Если НаправленияДеятельностиСервер.ХозяйственнаяОперацияОбразуетДоход(Объект.ХозяйственнаяОперация) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			
			Видимость = Истина;
			
			
		ИначеЕсли НаправленияДеятельностиСервер.ХозяйственнаяОперацияОбразуетАктив(Объект.ХозяйственнаяОперация)
			 И ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
			 
			Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НаправлениеДеятельности.Видимость = Видимость;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиГрафикИсполнения()
	
	ТипыДоговоров = Новый Массив;
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПокупателем);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СДавальцем);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПоставщиком);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПереработчиком);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.Импорт);
    ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.ИмпортКомиссия);
	
	ВидимостьГрафика = (ТипыДоговоров.Найти(Объект.ТипДоговора) <> Неопределено)
		И (Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	
	ЗависимыеЭлементы = Новый Массив;
	ЗависимыеЭлементы.Добавить(Элементы.Отступ2);
	ЗависимыеЭлементы.Добавить(Элементы.ГрафикИсполненияВДоговоре);
	ЗависимыеЭлементы.Добавить(Элементы.НадписьГрафикИсполнения);
	
	Для каждого ЗависимыйЭлемент Из ЗависимыеЭлементы Цикл
		ЗависимыйЭлемент.Видимость = ВидимостьГрафика;
	КонецЦикла;
	
	Элементы.Сумма.Доступность = ФиксированнаяСуммаДоговора;
	Элементы.Сумма.АвтоОтметкаНезаполненного = ФиксированнаяСуммаДоговора;
	
	Элементы.ГрафикИсполненияВДоговоре.Доступность = ФиксированнаяСуммаДоговора;
	Элементы.НадписьГрафикИсполнения.Видимость = Элементы.НадписьГрафикИсполнения.Видимость И Объект.ЗаданГрафикИсполнения;
	
	НадписьГрафикИсполнения = Документы.ГрафикИсполненияДоговора.ПредставлениеГрафика(Объект.ГрафикИсполненияДоговора);
	
КонецПроцедуры

&НаСервере
Процедура ИзмененаОплатаСервер(ИмяСобытия, Параметр)
	
	ВзаиморасчетыСервер.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеГрафикаИсполненияНаСервере()
	
	Записать();
	УправлениеЭлементамиГрафикИсполнения();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.ОплатаВВалюте, Объект.БанковскийСчет);
	
	УстановитьНалогообложениеНДС();
	
	ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере("Организация", Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКлассификациюЗадолженности(КлассификацияЗадолженности)
	
	Если КлассификацияЗадолженности = 1 Тогда
		Объект.УстановленСрокОплаты = Истина;
		Объект.СрокОплаты = 366; // Значение больше 365 календарных дней
	Иначе
		Объект.УстановленСрокОплаты = Ложь;
		Объект.СрокОплаты = 0;
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВариантовОформленияЗакупок()
	
	ИспользоватьОформлениеЗакупок = ИспользоватьОформлениеЗакупок();
	
	ДоговорДоступенДляЗакупокДвухходовки = Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
                                    Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.ИмпортКомиссия
									Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт;
	
	ИспользоватьВариантыОформленияЗакупокДвумяДокументами 		= ИспользоватьТоварыВПутиОтПоставщиков
																	И ИспользоватьНеотфактурованныеПоставки;
	Элементы.ВариантОформленияЗакупокДвумяДокументами.Видимость = ВариантОформленияЗакупок = "ДвумяДокументами"
																	И ИспользоватьВариантыОформленияЗакупокДвумяДокументами;
    Элементы.ВариантОформленияЗакупокДвумяДокументами.Доступность 	= Объект.ТипДоговора <> Перечисления.ТипыДоговоров.Импорт И Объект.ТипДоговора <> Перечисления.ТипыДоговоров.ИмпортКомиссия;
	Элементы.ГруппаОформлениеЗакупок.Видимость 					= ДоговорДоступенДляЗакупокДвухходовки
																	И (ИспользоватьТоварыВПутиОтПоставщиков
																		Или ИспользоватьНеотфактурованныеПоставки);
	Элементы.ГруппаВариантыПриемки.Видимость 					= (ИспользоватьОрдернуюСхемуПриПоступлении
																	Или ИспользоватьТоварыВПутиОтПоставщиков
																	Или ИспользоватьНеотфактурованныеПоставки)
																	И ИспользоватьОформлениеЗакупок;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьВариантОформленияЗакупок()
	
	Если Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять Тогда
		ВариантОформленияЗакупок = "ОднимДокументом";
		
		// Неактивное значение по-умолчанию
		Если ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков") Тогда
			ВариантОформленияЗакупокДвумяДокументами = "ТоварыВПути";
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки") Тогда
			ВариантОформленияЗакупокДвумяДокументами = "НеотфактурованныеПоставки";
		КонецЕсли;
		
	Иначе
		ВариантОформленияЗакупок = "ДвумяДокументами";
		
		Если Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.ТоварыВПути Тогда
			ВариантОформленияЗакупокДвумяДокументами = "ТоварыВПути";
		ИначеЕсли Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставки Тогда
			ВариантОформленияЗакупокДвумяДокументами = "НеотфактурованныеПоставки";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПриемки()
	
	Если ОформлениеОрдера = "ПоДоговору" Тогда
		Элементы.ПриемкаТоваров.Доступность = Ложь;
		ПриемкаТоваров = "НеРазделена";
	Иначе
		Элементы.ПриемкаТоваров.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНастроекПриемкиСервер();
	
	Объект.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантовПриемкиПоНастройкам(ОформлениеОрдера, ПриемкаТоваров);
	
	Если Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставки
		И (Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных
			Или Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным) Тогда
		
		Если Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных Тогда
			Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных;
		ИначеЕсли Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным Тогда
			Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
		КонецЕсли;
		
		ЗакупкиСервер.ЗаполнитьНастройкиВариантовПриемки(Объект.ВариантПриемкиТоваров, ОформлениеОрдера, ПриемкаТоваров);
	КонецЕсли;
	
	ЗакупкиСервер.ЗаполнитьСписокВыбораВариантовПриемкиПоДоговорам(Элементы.ОформлениеОрдера, Элементы.ПриемкаТоваров, Объект.ВариантОформленияЗакупок);
	
	Если Справочники.ДоговорыКонтрагентов.ДоговорИспользуетсяПриПриемке(Объект.ВариантПриемкиТоваров)
		И Объект.СпособДоставки = Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении Тогда
		Объект.СпособДоставки = Перечисления.СпособыДоставки.ПустаяСсылка();
		ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	КонецЕсли;
	
	УстановитьДоступностьПриемки();
	УстановитьДоступностьДоставки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДоставки()
	
	ЭтоДоговорРаспоряжениеНаПриемку = Справочники.ДоговорыКонтрагентов.ДоговорИспользуетсяПриПриемке(Объект.ВариантПриемкиТоваров);
	
	ДоступныеСпособыДоставки = ДоступныеСпособыДоставки(ЭтоДоговорРаспоряжениеНаПриемку);
	
	Элементы.СпособДоставки.СписокВыбора.ЗагрузитьЗначения(ДоступныеСпособыДоставки);
	
КонецПроцедуры

&НаСервере
Функция ДоступныеСпособыДоставки(ЭтоДоговорРаспоряжениеНаПриемку)
	
	ВозвращаемыйМассив = Новый Массив();
	
	Если Не ЭтоДоговорРаспоряжениеНаПриемку Тогда
		ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении);
	КонецЕсли;
	
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада);
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада);
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя);
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
	
	Возврат ВозвращаемыйМассив;
	
КонецФункции

&НаСервере
Функция ИспользоватьОформлениеЗакупок()
	
	ИспользоватьОформлениеЗакупок = Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт
        Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.ИмпортКомиссия
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоклажедателем;
	
	Возврат ИспользоватьОформлениеЗакупок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПорядокСписанияПринятыхТоваров(Форма)
	
	Форма.Элементы.ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров.Видимость = ?(
		Форма.Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоклажедателем")
		ИЛИ Форма.Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентомНаЗакупку") , Истина, Ложь);
	
КонецПроцедуры


&НаСервере
Процедура УправлениеЭлементамиНастройкиУчетаНДС()
	
	// Отображаем настройки учета НДС независимо от статуса плательщик/неплательщик НДС. Статус может смениться в периоде действия договора
	
	// Отображаем признак "Внешнеэкономический"
	Внешнеэкономический = Справочники.ДоговорыКонтрагентов.ЭтоВнешнеэкономическийДоговор(Объект);
	ЗаголовокГруппы = НСтр("ru='Моменты определения базы НДС';uk='Моменти визначення бази ПДВ'") + ?(Внешнеэкономический, НСтр("ru=' (внешнеэкономический договор)';uk=' (зовнішньоекономічний договір)'"), "");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаМоментыОпределенияБазыНДС", "Заголовок", ЗаголовокГруппы);
	
	// Отображаем номенклатуру
	ВидимостьНоменклатуры = Справочники.ДоговорыКонтрагентов.ИспользоватьНоменклатуруЗаполненияНалоговыхНаАванс(Объект);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураЗаполненияНалоговыхНаАванс", "Видимость", ВидимостьНоменклатуры);
	
	
	// Отображаем моменты определения базы НДС
	ОсновнойЭлементФормы = Неопределено;
	ОсновнойЗаголовок    = Неопределено;
	ВспомогательныйОсновнойЭлементФормы = Неопределено;
	ВспомогательныйОсновнойЗаголовок    = Неопределено;
    
    Если ЗначениеЗаполнено(Объект.ТипДоговора) Тогда
		
		Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
			ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
			Если Не Внешнеэкономический Тогда
				ОсновнойЗаголовок = НСтр("ru='По продаже';uk='По продажу'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоПродажам;
			Иначе
				ОсновнойЗаголовок = НСтр("ru='По экспорту';uk='По експорту'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоЭкспорту;
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда
			Если Не Внешнеэкономический Тогда
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
				ОсновнойЗаголовок = НСтр("ru='По закупке';uk='По купівлі'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоЗакупкам;
			Иначе
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
				ОсновнойЗаголовок = НСтр("ru='По импорту
                                       |(без таможенной декларации)'
                                       |;uk='По імпорту
                                       |(без митної декларації)'");
				МоментОпределенияБазыНДССтрокой = НСтр("ru='Не определяется';uk='Не визначається'");
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером Тогда
			Если Не Внешнеэкономический Тогда
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
				ОсновнойЗаголовок = НСтр("ru='По услугам комиссии';uk='По послугах комісії'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоЗакупкам;
				
				ВспомогательныйОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
				ВспомогательныйОсновнойЗаголовок = НСтр("ru='По поставке товаров на комиссию
                                                      |(авансовые платежи не поддерживаются)'
                                                      |;uk='За постачанням товарів на комісію
                                                      |(авансові платежі не підтримуються)'");
				МоментОпределенияБазыНДССтрокой = Строка(Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию);
			Иначе
				
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
				ОсновнойЗаголовок = НСтр("ru='По услугам комиссии';uk='По послугах комісії'");
				МоментОпределенияБазыНДССтрокой = НСтр("ru='Не определяется';uk='Не визначається'");;
				
				ВспомогательныйОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокойДополнительно";
				ВспомогательныйОсновнойЗаголовок = НСтр("ru='По поставке товаров на комиссию';uk='За постачанням товарів на комісію'");
				МоментОпределенияБазыНДССтрокойДополнительно = Строка(Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке); // ПоЭкспорту 
				
				
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомитентом Тогда
			Если Не Внешнеэкономический Тогда
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
				ОсновнойЗаголовок = НСтр("ru='По услугам комиссии';uk='По послугах комісії'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоПродажам;
				
				ВспомогательныйОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
				ВспомогательныйОсновнойЗаголовок = НСтр("ru='По поставке товаров на комиссию
                                                      |(авансовые платежи не поддерживаются)'
                                                      |;uk='За постачанням товарів на комісію
                                                      |(авансові платежі не підтримуються)'");
				МоментОпределенияБазыНДССтрокой = Строка(Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию);
			Иначе
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
				ОсновнойЗаголовок = НСтр("ru='По услугам комиссии';uk='По послугах комісії'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоПродажам;
				
				ВспомогательныйОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
				ВспомогательныйОсновнойЗаголовок = НСтр("ru='По поставке товаров на комиссию
                                                      |(без таможенной декларации)'
                                                      |;uk='За постачанням товарів на комісію
                                                      |(без митної декларації)'");
				МоментОпределенияБазыНДССтрокой = НСтр("ru='Не определяется';uk='Не визначається'");
				
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт Тогда
			ОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
			ОсновнойЗаголовок = НСтр("ru='По импорту
                                   |(с таможенной декларацией)'
                                   |;uk='По імпорту
                                   |(з митною декларацією)'");
			МоментОпределенияБазыНДССтрокой = НСтр("ru='По таможенной декларации';uk='За митною декларацією'");			
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.ИмпортКомиссия Тогда
			ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
			ОсновнойЗаголовок = НСтр("ru='По услугам комиссии';uk='По послугах комісії'");
			//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоПродажам;
			
			ВспомогательныйОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
			ВспомогательныйОсновнойЗаголовок = НСтр("ru='По поставке товаров на комиссию
                                                  |(с таможенной декларацией)'
                                                  |;uk='За постачанням товарів на комісію
                                                  |(з митною декларацією)'");
			МоментОпределенияБазыНДССтрокой = НСтр("ru='По таможенной декларации';uk='За митною декларацією'");			
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем Тогда
			ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
			ОсновнойЗаголовок = НСтр("ru='По продаже';uk='По продажу'");
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком Тогда
            ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
            ОсновнойЗаголовок = НСтр("ru='По закупке';uk='По купівлі'");
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоклажедателем Тогда
            ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
			ОсновнойЗаголовок = НСтр("ru='По выкупу с хранения';uk='По викупу зі зберігання'");
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СХранителем Тогда
            ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
			ОсновнойЗаголовок = НСтр("ru='По выкупу с хранения';uk='По викупу зі зберігання'");
 		КонецЕсли;
		
	Иначе
		ОсновнойЭлементФормы = "ДекорацияНеУказанТипДоговора";
		ОсновнойЗаголовок = НСтр("ru='Не указан тип договора';uk='Не зазначений тип договору'");
		
	КонецЕсли;
	
	МассивМоментовОпределенияБазыНДС = Новый Массив;
	МассивМоментовОпределенияБазыНДС.Добавить("МоментОпределенияБазыНДС"); 
	МассивМоментовОпределенияБазыНДС.Добавить("МоментОпределенияБазыНДССтрокой"); 
	МассивМоментовОпределенияБазыНДС.Добавить("МоментОпределенияБазыНДССтрокойДополнительно"); 
	МассивМоментовОпределенияБазыНДС.Добавить("ДекорацияНеУказанТипДоговора"); 
	
	// Основной элемент делаем видимым
	МассивМоментовОпределенияБазыНДС.Удалить(МассивМоментовОпределенияБазыНДС.Найти(ОсновнойЭлементФормы));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОсновнойЭлементФормы, "Видимость", Истина);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОсновнойЭлементФормы, "Заголовок", ОсновнойЗаголовок);
	
	// Вспомогательный элемент делаем видимым
	Если ЗначениеЗаполнено(ВспомогательныйОсновнойЭлементФормы) Тогда
		МассивМоментовОпределенияБазыНДС.Удалить(МассивМоментовОпределенияБазыНДС.Найти(ВспомогательныйОсновнойЭлементФормы));
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ВспомогательныйОсновнойЭлементФормы, "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ВспомогательныйОсновнойЭлементФормы, "Заголовок", ВспомогательныйОсновнойЗаголовок);
	КонецЕсли;
	
	// Остальное скрываем
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивМоментовОпределенияБазыНДС, "Видимость", Ложь);
	
	ВидимостьРЕЗ = Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем И Объект.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимЭкспортногоОбеспечения", "Видимость", ВидимостьРЕЗ);
	Если Объект.РежимЭкспортногоОбеспечения И НЕ ВидимостьРЕЗ Тогда
		Объект.РежимЭкспортногоОбеспечения = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиУчетаНДСПоОрганизации()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.ОбособленноеПодразделениеПоУмолчанию      = Объект.Организация.ОбособленноеПодразделениеПоУмолчанию;
	Объект.ОтветственныйЗаВыпискуНалоговыхДокументов = Объект.Организация.ОтветственныйЗаВыпискуНалоговыхДокументов;
	Объект.НоменклатураЗаполненияНалоговыхНаАванс    = Объект.Организация.НоменклатураЗаполненияНалоговыхНаАванс;
	
	ЗаполнитьМоментОпределенияБазыНДСПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМоментОпределенияБазыНДСПоОрганизации()
	
	Объект.МоментОпределенияБазыНДС = Справочники.ДоговорыКонтрагентов.ПолучитьМоментОпределенияБазыНДСПоУмолчанию(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьОплатыВВалюте()
    
    ДоступностьОплатаВВалюте = Ложь;
    Если Объект.Организация = Справочники.Организации.УправленческаяОрганизация Тогда
        ДоступностьОплатаВВалюте = Истина;
	Иначе
        Если Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
            Если Объект.ОплатаВВалюте Тогда
                Объект.ОплатаВВалюте = Ложь;
            КонецЕсли; 
        Иначе
            Если НЕ Объект.ОплатаВВалюте Тогда
                Объект.ОплатаВВалюте = Истина;
            КонецЕсли; 
		КонецЕсли;
		ДоступностьОплатаВВалюте = Истина;
	КонецЕсли;
    
    ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОплатаВВалюте", "Доступность", ДоступностьОплатаВВалюте);
    
КонецПроцедуры


#КонецОбласти

#Область КонтрольНесогласованныхИзменений

// Параметры:
//	Элемент - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - ЭлементФормы
&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВалютаВзаиморасчетов" Тогда
		ВалютаВзаиморасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ОплатаВВалюте" Тогда
		ОплатаВВалютеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТипДоговора" Тогда
		ТипДоговораПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПорядокРасчетов" Тогда
		ПорядокРасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ОграничиватьСуммуЗадолженности" Тогда
		ОграничиватьСуммуЗадолженностиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МоментОпределенияБазыНДС" Тогда
		МоментОпределенияБазыНДСПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//	Команда - КомандаФормы - 
&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "УстановитьИнтервал" Тогда
		УстановитьИнтервал(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

// Параметры:
//	Элемент - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - ЭлементФормы
&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//	Команда - КомандаФормы - 
&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//	Элемент - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - ЭлементФормы
&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//	Элемент - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - ЭлементФормы
&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//	Элемент - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - ЭлементФормы
&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Локализация

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом


#КонецОбласти
