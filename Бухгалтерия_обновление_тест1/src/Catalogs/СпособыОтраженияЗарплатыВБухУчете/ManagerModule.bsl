#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак использования статей расходов устаревшего формата в способе отражения зарплаты.
//	Параметры:
//		Объект - СправочникОбъект.СпособыОтраженияЗарплатыВБухУчете - проверяемый способ отражения
//	Возвращаемое значение:
//		Булево - ИСТИНА, если в способе используются статьи расходов с вариантом распределения На прочие активы.
//
Функция ОтражениеПрочихОпераций(Объект) Экспорт
	
	ЭтоОтражениеПрочихОпераций = Ложь;
	
	МассивСтатей = Новый Массив;
	
	Если ТипЗнч(Объект.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов")
		И ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
		МассивСтатей.Добавить(Объект.СтатьяРасходов);
	КонецЕсли;
	
	
	Возврат Ложь;
	
КонецФункции

// Возвращает текст запроса для получения параметров способа отражения.
//	Параметры:
//		ИмяВременнойТаблицы - Строка - имя таблицы, если требуется помещения результата во временную таблицу.
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаДанныхСпособов(ИмяВременнойТаблицы = "") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СписокСпособов.СпособОтражения,
	|	СпособОтраженияЗарплата.ОплатаСдельныхРабот КАК ОплатаСдельныхРабот,
	|	СпособОтраженияЗарплата.СтатьяРасходов КАК СтатьяРасходов,
	|	СпособОтраженияЗарплата.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СпособОтраженияЗарплата.СтатьяРасходов.ВариантРаспределенияРасходовРегл КАК ВариантРаспределения,
	|	СпособОтраженияЗарплата.АналитикаРасходов КАК АналитикаРасходов,
	|	СпособОтраженияЗарплата.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	СпособОтраженияЗарплата.СчетУчета КАК СчетУчета,
	|	СпособОтраженияЗарплата.Субконто1 КАК Субконто1,
	|	СпособОтраженияЗарплата.Субконто2 КАК Субконто2,
	|	СпособОтраженияЗарплата.Субконто3 КАК Субконто3,
	
	|	СпособОтраженияЗарплата.СтатьяРасходовВзносов КАК СтатьяРасходовВзносов,
	|	СпособОтраженияЗарплата.СтатьяРасходовВзносов.ВариантРаспределенияРасходовРегл КАК ВариантРаспределенияВзносов,
	|	СпособОтраженияЗарплата.АналитикаРасходовВзносов КАК АналитикаРасходовВзносов,
	|	СпособОтраженияЗарплата.АналитикаАктивовПассивовВзносов КАК АналитикаАктивовПассивовВзносов,
	|	СпособОтраженияЗарплата.СчетУчетаВзносов КАК СчетУчетаВзносов,
	|	СпособОтраженияЗарплата.Субконто1Взносов КАК Субконто1Взносов,
	|	СпособОтраженияЗарплата.Субконто2Взносов КАК Субконто2Взносов,
	|	СпособОтраженияЗарплата.Субконто3Взносов КАК Субконто3Взносов
	
	
	|//ПоместитьВоВременнуюТаблицу
	|ИЗ
	|	ВтСписокСпособовОтражения КАК СписокСпособов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплата
	|		ПО СписокСпособов.СпособОтражения = СпособОтраженияЗарплата.Ссылка
	|ГДЕ
	|	СписокСпособов.СпособОтражения <> Значение(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)
	|";
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПоместитьВоВременнуюТаблицу", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПоместитьВоВременнуюТаблицу", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает массив блокируемых реквизитов объекта.
//	Возвращаемое значение:
//		Массив - массив реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("НаправлениеДеятельности");
	Результат.Добавить("СтатьяРасходов");
	Результат.Добавить("АналитикаРасходов");
	Результат.Добавить("АналитикаАктивовПассивов");
	Результат.Добавить("РежимУчетаВзносов");
	Результат.Добавить("СтатьяРасходовВзносов");
	Результат.Добавить("АналитикаРасходовВзносов");
	Результат.Добавить("АналитикаАктивовПассивовВзносов");
	Результат.Добавить("ОтдельнаяСтатьяКалькуляции");
	Результат.Добавить("СтатьяКалькуляции");
	Результат.Добавить("ОтдельнаяСтатьяКалькуляцииВзносов");
	Результат.Добавить("БазаРаспределенияПоСдельнымРаботам");
	
	Результат.Добавить("ОплатаСдельныхРабот;ХарактерНачисления");
	
	Возврат Результат;
	
КонецФункции

// Проверяет использование объекта в документах Отражение зарплаты в финансовом учете и Начисление оценочных обязательств.
//	Параметры:
//		Параметры - Структура - структура, содержащая ссылку на проверяемый объект.
//		АдресХранилища - Строка - адрес, по которому следует поместить результат проверки.
//
Процедура ПроверитьИспользованиеОбъекта(Параметры, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Зарплата.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтражениеЗарплатыВФинансовомУчете.НачисленнаяЗарплатаИВзносы КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка.Проведен
	|	И Зарплата.СпособОтраженияЗарплатыВБухучете = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Резервы.Ссылка
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам.ОценочныеОбязательства КАК Резервы
	|ГДЕ
	|	Резервы.Ссылка.Проведен
	|	И Резервы.СпособОтраженияЗарплатыВБухучете = &Объект");
	
	Запрос.УстановитьПараметр("Объект", Параметры.Объект);
	Результат = Запрос.Выполнить();
	
	ПоместитьВоВременноеХранилище(Не Результат.Пустой(), АдресХранилища);
	
КонецПроцедуры

// Заполняет массивы реквизитов, зависимых от свойств документа
//
// Параметры:
//	ВидНаряда - ПеречислениеСсылка.ВидыБригадныхНарядов - вид бригадного наряда
//	ПоРаспоряжениям - Булево - признак оформления документа по распоряжениям
//	МассивВсехРеквизитов - Массив - реквизиты, которые зависят от свойств наряда
//	МассивРеквизитовОперации - Массив - реквизиты, которые используются при заданных свойствах наряда.
//
Функция НеИспользуемыеРеквизиты(Объект) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("НаправлениеДеятельности");
	
	МассивВсехРеквизитов.Добавить("СтатьяРасходов");
	МассивВсехРеквизитов.Добавить("АналитикаРасходов");
	МассивВсехРеквизитов.Добавить("АналитикаАктивовПассивов");
	МассивВсехРеквизитов.Добавить("СчетУчета");
	МассивВсехРеквизитов.Добавить("Субконто1");
	МассивВсехРеквизитов.Добавить("Субконто2");
	МассивВсехРеквизитов.Добавить("Субконто3");
	
	МассивВсехРеквизитов.Добавить("СтатьяРасходовВзносов");
	МассивВсехРеквизитов.Добавить("АналитикаРасходовВзносов");
	МассивВсехРеквизитов.Добавить("АналитикаАктивовПассивовВзносов");
	МассивВсехРеквизитов.Добавить("СчетУчетаВзносов");
	МассивВсехРеквизитов.Добавить("Субконто1Взносов");
	МассивВсехРеквизитов.Добавить("Субконто2Взносов");
	МассивВсехРеквизитов.Добавить("Субконто3Взносов");
	
	
	МассивВсехРеквизитов.Добавить("ОплатаСдельныхРабот");
	МассивВсехРеквизитов.Добавить("ОтдельнаяСтатьяКалькуляции");
	МассивВсехРеквизитов.Добавить("СтатьяКалькуляции");
	МассивВсехРеквизитов.Добавить("ОтдельнаяСтатьяКалькуляцииВзносов");
	МассивВсехРеквизитов.Добавить("СтатьяКалькуляцииВзносов");
	МассивВсехРеквизитов.Добавить("БазаРаспределенияПоСдельнымРаботам");
	
	
	МассивИспользуемыхРеквизитов = Новый Массив;
	
	Если Объект.ОплатаСдельныхРабот Тогда
		МассивИспользуемыхРеквизитов.Добавить("ОплатаСдельныхРабот");
		МассивИспользуемыхРеквизитов.Добавить("ОтдельнаяСтатьяКалькуляции");
		МассивИспользуемыхРеквизитов.Добавить("ОтдельнаяСтатьяКалькуляцииВзносов");
		МассивИспользуемыхРеквизитов.Добавить("БазаРаспределенияПоСдельнымРаботам");
		
		Если Объект.ОтдельнаяСтатьяКалькуляции Тогда
			МассивИспользуемыхРеквизитов.Добавить("СтатьяКалькуляции");
		КонецЕсли;
		Если Объект.ОтдельнаяСтатьяКалькуляцииВзносов Тогда
			МассивИспользуемыхРеквизитов.Добавить("СтатьяКалькуляцииВзносов");
		КонецЕсли;
		
	Иначе
		
		МассивИспользуемыхРеквизитов.Добавить("НаправлениеДеятельности");
		МассивИспользуемыхРеквизитов.Добавить("СтатьяРасходов");
		
		Если ТипЗнч(Объект.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
			МассивИспользуемыхРеквизитов.Добавить("АналитикаАктивовПассивов");
			МассивИспользуемыхРеквизитов.Добавить("СчетУчета");
			МассивИспользуемыхРеквизитов.Добавить("Субконто1");
			МассивИспользуемыхРеквизитов.Добавить("Субконто2");
			МассивИспользуемыхРеквизитов.Добавить("Субконто3");
		Иначе
			МассивИспользуемыхРеквизитов.Добавить("АналитикаРасходов");
		КонецЕсли;
		
		Если Объект.РежимУчетаВзносов = 1 Тогда
			
			МассивИспользуемыхРеквизитов.Добавить("СтатьяРасходовВзносов");
			
			Если ТипЗнч(Объект.СтатьяРасходовВзносов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
				МассивИспользуемыхРеквизитов.Добавить("АналитикаАктивовПассивовВзносов");
				МассивИспользуемыхРеквизитов.Добавить("СчетУчетаВзносов");
				МассивИспользуемыхРеквизитов.Добавить("Субконто1Взносов");
				МассивИспользуемыхРеквизитов.Добавить("Субконто2Взносов");
				МассивИспользуемыхРеквизитов.Добавить("Субконто3Взносов");
			Иначе
				МассивИспользуемыхРеквизитов.Добавить("АналитикаРасходовВзносов");
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивВсехРеквизитов, МассивИспользуемыхРеквизитов);
	
КонецФункции

#Область Прочее

// Возвращает параметры выбора статей для элемента справочника.
// 
Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	МассивПараметров = Новый Массив;
	
	#Область Параметры_выбора_статьи_расходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья      = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи   = "ТипСтатьиРасходов";
	ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходов";
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("АналитикаАктивовПассивов");
	
	МассивПараметров.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	
	#Область Параметры_выбора_статьи_расходов_взносов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья      = "СтатьяРасходовВзносов";
	ПараметрыВыбора.ТипСтатьи   = "ТипСтатьиРасходовВзносов";
	ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовВзносов";
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивовВзносов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовВзносов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовВзносов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("АналитикаАктивовПассивовВзносов");
	
	МассивПараметров.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	
	
	Возврат МассивПараметров;
	
КонецФункции

// Возвращает параметры настройки счетов учета.
// 
// Возвращаемое значение:
// 	МассивПараметров -  Массив параметров настройки счетов учета (См. НастройкаСчетовУчета.ПараметрыНастройки).
//
Функция ПараметрыНастройкиСчетовУчета() Экспорт
	
	МассивПараметров = Новый Массив;
	
	#Область НастройкаСчетаУчета
	ПараметрыНастройки = НастройкаСчетовУчета.ПараметрыНастройки();
	ПараметрыНастройки.ПутьКДанным = "Объект";
	ПараметрыНастройки.СчетУчета     = "СчетУчета";
	ПараметрыНастройки.Субконто1     = "Субконто1";
	ПараметрыНастройки.Субконто2     = "Субконто2";
	ПараметрыНастройки.Субконто3     = "Субконто3";
	ПараметрыНастройки.Представление = "НастроитьОтражениеВРеглУчете";
	ПараметрыНастройки.ТипСтатьи     = "ТипСтатьиРасходов";
	
	ПараметрыНастройки.Организация = "";
	ПараметрыНастройки.АналитикаАктивовПассивов = "Объект.АналитикаАктивовПассивов";
	
	ЗаполнитьИсточникиПодбораСубконто(ПараметрыНастройки.ИсточникиПодбораСубконто);
	
	ПараметрыНастройки.ЭлементыФормы.Добавить("НастроитьОтражениеВРеглУчете");
	
	МассивПараметров.Добавить(ПараметрыНастройки);
	#КонецОбласти
	
	
	#Область НастройкаСчетаУчетаВзносов
	ПараметрыНастройки = НастройкаСчетовУчета.ПараметрыНастройки();
	ПараметрыНастройки.ПутьКДанным = "Объект";
	ПараметрыНастройки.СчетУчета     = "СчетУчетаВзносов";
	ПараметрыНастройки.Субконто1     = "Субконто1Взносов";
	ПараметрыНастройки.Субконто2     = "Субконто2Взносов";
	ПараметрыНастройки.Субконто3     = "Субконто3Взносов";
	ПараметрыНастройки.Представление = "НастроитьОтражениеВРеглУчетеВзносов";
	ПараметрыНастройки.ТипСтатьи     = "ТипСтатьиРасходовВзносов";
	
	ПараметрыНастройки.Организация = "";
	ПараметрыНастройки.АналитикаАктивовПассивов = "Объект.АналитикаАктивовПассивовВзносов";
	
	ЗаполнитьИсточникиПодбораСубконто(ПараметрыНастройки.ИсточникиПодбораСубконто);
	
	ПараметрыНастройки.ЭлементыФормы.Добавить("НастроитьОтражениеВРеглУчетеВзносов");
	
	МассивПараметров.Добавить(ПараметрыНастройки);
	#КонецОбласти
	
	
	
	Возврат МассивПараметров;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьИсточникиПодбораСубконто(Список)
	Список.ЗагрузитьЗначения(ПодбираемыеАналитики());
КонецПроцедуры

Функция ПодбираемыеАналитики() Экспорт
	
	ПодбираемыеАналитики = Новый Массив;
	ПодбираемыеАналитики.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	ПодбираемыеАналитики.Добавить(Тип("СправочникСсылка.ОбъектыЭксплуатации"));
	ПодбираемыеАналитики.Добавить(Тип("СправочникСсылка.Организации"));
	ПодбираемыеАналитики.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ПодбираемыеАналитики.Добавить(Тип("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	
	Возврат ПодбираемыеАналитики;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.СпособыОтраженияЗарплатыВБухУчете.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("51345b36-289b-4695-af85-23fd41db1e31");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.СпособыОтраженияЗарплатыВБухУчете.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = ""
	//++ Локализация
		+ "Справочник.СпособыОтраженияЗарплатыВБухУчете,"
	//-- Локализация
	//++ Локализация
		+ "Документ.ОтражениеЗарплатыВФинансовомУчете"
	//-- Локализация
	;
	Обработчик.ИзменяемыеОбъекты = ""
	//++ Локализация
		+ "Справочник.СпособыОтраженияЗарплатыВБухУчете"
	//-- Локализация
	;
	Обработчик.БлокируемыеОбъекты = ""
	//++ Локализация
		+ "Справочник.СпособыОтраженияЗарплатыВБухУчете"
	//-- Локализация
	;
	Обработчик.Комментарий = НСтр("ru='Создает новый способ отражения для сдельной оплаты труда: оплата сдельных работ пропорционально нормативной стоимости.';uk='Створює новий спосіб відображення для відрядної оплати праці: оплата відрядних робіт пропорційно до нормативної вартості.'");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтражениеЗарплатыВФинансовомУчете.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//-- Локализация
	
КонецПроцедуры	

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Возврат; // Нет данных для регистрации, создаются новые элементы
	
КонецПроцедуры

// Создает новый способ отражения для сдельной оплаты труда по настройкам по умолчанию.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтражениеЗарплатыВФинансовомУчете.НачисленнаяЗарплатаИВзносы КАК ДД
	|ГДЕ
	|	ДД.Ссылка.Проведен
	|	И ДД.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НачисленоСдельноДоход)
	|	И ДД.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)
	|	И ДД.Ссылка.Сводно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДД.Ссылка
	|ИЗ
	|	Документ.ОтражениеЗарплатыВФинансовомУчете.НачисленнаяЗарплатаИВзносыПоФизлицам КАК ДД
	|ГДЕ
	|	ДД.Ссылка.Проведен
	|	И ДД.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НачисленоСдельноДоход)
	|	И ДД.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВБухУчете КАК ДД
	|ГДЕ
	|	НЕ ДД.ПометкаУдаления
	|	И ДД.ОплатаСдельныхРабот
	|	И НЕ ДД.ОтдельнаяСтатьяКалькуляции
	|	И НЕ ДД.ОтдельнаяСтатьяКалькуляцииВзносов
	|	И ДД.БазаРаспределенияПоСдельнымРаботам = ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда)
	|";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[0].Пустой() Или Не Результат[1].Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		НовыйСпособ = Справочники.СпособыОтраженияЗарплатыВБухУчете.СоздатьЭлемент();
		НовыйСпособ.Наименование = НСтр("ru='Начислено сдельно (создан при обновлении ИБ на 2.5.4)';uk='Нараховано відрядно (створено при оновленні ІБ на 2.5.4)'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		НовыйСпособ.ОплатаСдельныхРабот = Истина;
		НовыйСпособ.БазаРаспределенияПоСдельнымРаботам = Перечисления.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда;
		НовыйСпособ.Записать();
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйСпособ, Истина, Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru='Не удалось создать способ отражения для сдельных работ по причине: %Причина%';uk='Не вдалося створити спосіб відображення для відрядних робіт по причині: %Причина%'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ПолноеИмяОбъекта = "Справочник.СпособыОтраженияЗарплатыВБухУчете";
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта,
			,
			ТекстСообщения
		);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли