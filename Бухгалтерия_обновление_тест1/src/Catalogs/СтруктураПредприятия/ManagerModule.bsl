#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	
	Результат.Добавить("ПериодичностьОформленияВыработки");
	Результат.Добавить("ИспользоватьКТУ");
	Результат.Добавить("ИспользоватьТарифныеСтавки");
	Результат.Добавить("ИспользоватьОтработанноеВремя");
	Результат.Добавить("ИспользоватьБригадныеНаряды;
		|ВидыНарядовБригады, ВидыНарядовРаботники, ВидыНарядовБригадыИРаботники");
	Результат.Добавить("ИспользоватьПерсональныеНаряды;
		|ВидыНарядовБригады, ВидыНарядовРаботники, ВидыНарядовБригадыИРаботники");
	
	Результат.Добавить("СпособНастройкиГрафикаРаботы");
	Результат.Добавить("ГрафикиРаботы; ГрафикРаботы");
	
	Результат.Добавить("ПроизводственноеПодразделение");
	Результат.Добавить("ПроизводствоПоЗаказам");
	Результат.Добавить("ПроизводствоБезЗаказов");
	Результат.Добавить("ИспользуетсяСписаниеЗатратНаВыпуск;
		|ОтдельнымДокументом, ПоПравиламРаспределения");
	
	Возврат Результат;
	
КонецФункции

// Получает подразделение-диспетчер, если оно одно в ИБ
//  Если подразделение-диспетчер не передано в качестве параметра или передано пустое,
//  возвращает единственное в информационной базе подразделение-диспетчер.
//  Если подразделений-диспетчеров в базе несколько,
//  возвращает подразделение-диспетчер из настроек пользователя.
//  Если подразделение-диспетчер не указано в настройках пользователя,
//  возвращает пустое подразделение.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - ссылка на пользователя.
// 
// Возвращаемое значение:
//  СправочникСсылка.СтруктураПредприятия - подразделение-диспетчер по умолчанию.
//
Функция ПолучитьПодразделениеДиспетчерПоУмолчанию(Знач Пользователь = Неопределено) Экспорт
	
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	Возврат Подразделение;

КонецФункции

// Возвращает количество подразделений-диспетчеров.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество подразделений-диспетчеров.
//
Функция КоличествоПодразделенийДиспетчеров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|	И СтруктураПредприятия.ПодразделениеДиспетчер");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Возвращает признак использования нескольких подразделений-диспетчеров.
// 
// Возвращаемое значение:
//  Булево - Истина, если используется несколько подразделений-диспетчеров.
//
Функция ИспользуетсяНесколькоПодразделенийДиспетчеров() Экспорт
	
	Возврат КоличествоПодразделенийДиспетчеров() > 1;
	
КонецФункции

//++ НЕ УТ

// Проверяет использование параметров производства
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки.
//
Процедура ПроверитьИспользованиеПараметровПроизводства(Параметры, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоиска.Ссылка
	|ИЗ
	|	Документ.ДвижениеПродукцииИМатериалов КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Отправитель = &Подразделение
	|	И ТаблицаПоиска.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение))
	|	И НЕ ТаблицаПоиска.ПоРаспоряжениям
	//++ Устарело_Производство21
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыпускПродукции.Ссылка
	|ИЗ
	|	Документ.ВыпускПродукции КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Подразделение = &Подразделение
	|	И НЕ ВыпускПродукции.ВыпускПоРаспоряжениям
	//-- Устарело_Производство21
	|;
	|";
	
	Запрос.УстановитьПараметр("Подразделение", Параметры.Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("ИспользуетсяДляПроизводстваБезЗаказов",       НЕ Результат[0].Пустой());
	
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресХранилища);
	
КонецПроцедуры

// Возвращает элемент справочника СтруктураПредприятия, в котором числится физическое лицо.
//
// Параметры:
//  Организация 	- СправочникСсылка.Организации - организация, в которой работает сотрудник
//  ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица - физическое лицо, подразделение которого требуется получить
//  Период			- Дата - дата, на которую требуется получить данные.
//
// Возвращаемое значение:
//   СправочникСсылка.СтруктураПредприятия   - подразделение организационной структуры.
//
Функция МестоСотрудникаВСтруктуреПредприятия(Организация, ФизическоеЛицо, Период) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодДанных = ?(ЗначениеЗаполнено(Период), Период, ТекущаяДатаСеанса());
	
	ОсновныеСотрудники = Новый ТаблицаЗначений();
	ИнтеграцияБЗК.ЗаполнитьОсновныхСотрудниковФизическихЛиц(
		ОсновныеСотрудники,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо),
		Истина,
		Организация,
		ПериодДанных);
	
	Если ОсновныеСотрудники.Количество() = 0 Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	КадровыеДанные = Новый ТаблицаЗначений();
	ИнтеграцияБЗК.ЗаполнитьТаблицуКадровыеДанныеСотрудников(
		КадровыеДанные,
		Ложь,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновныеСотрудники[0].Сотрудник),
		"МестоВСтруктуреПредприятия",
		ПериодДанных);
		
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Возврат КадровыеДанные[0].МестоВСтруктуреПредприятия;
	
КонецФункции

// Определяет цеховую кладовую подразделения
//
// Параметры:
//	Подразделение	- СправочникСсылка.СтруктураПредприятия - Подразделение для которого определяется кладовая.
//
// Возвращаемое значение:
//		СправочникСслыка.Склады - Цеховая кладовая подразделения.
//
Функция ЦеховаяКладоваяПоУмолчанию(Подразделение) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		
		Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
			Возврат Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Таблица.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И НЕ Таблица.ЭтоГруппа
		|	И Таблица.Подразделение = &Подразделение
		|	И Таблица.ЦеховаяКладовая";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Таблица.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И НЕ Таблица.ЭтоГруппа
		|	И Таблица.ЦеховаяКладовая";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Склад = Выборка.Склад;
	Иначе
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Склад;

КонецФункции

//-- НЕ УТ


#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	//++ НЕ УТ
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ПодразделениеДиспетчерИлиПроизводственноеПодразделение") Тогда
		ПроизводствоВызовСервера.СтруктураПредприятияОбработкаПолученияДанныхВыбора(
					ДанныеВыбора, 
					Параметры, 
					СтандартнаяОбработка);
	КонецЕсли; 
	//-- НЕ УТ
	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт
	
	//++ НЕ УТ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.СтруктураПредприятия.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f2bd377b-d75b-4049-8138-532e8d5d5a16");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.СтруктураПредприятия.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.СтруктураПредприятия";
	Обработчик.ИзменяемыеОбъекты = "Справочник.СтруктураПредприятия";
	Обработчик.БлокируемыеОбъекты = "Справочник.СтруктураПредприятия";
	Обработчик.Комментарий = НСтр("ru='Заполняет параметры учета работ сотрудников по умолчанию: использование бригад и распределение по КТУ.
    |Заполняет способ настройки графика работы и табличную часть Графики работы.'
    |;uk='Заповнює параметри обліку робіт по умовчанню: використання бригад та розподіл за КТУ.
    |Заповнює спосіб настройки графіка роботи та табличну частину Графіки роботи.'");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ЭтапыПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиРеестраДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
	//-- НЕ УТ
	
КонецПроцедуры

//++ НЕ УТ

// Заполняет параметры учета выполненных работ по умолчанию:
//  - бригадные наряды
//  - КТУ
//  - произвольный период оформления.
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	(СтруктураПредприятия.ПроизводствоПоЗаказам
	|			ИЛИ СтруктураПредприятия.ПроизводствоБезЗаказов)
	|	И НЕ СтруктураПредприятия.ИспользоватьБригадныеНаряды
	|	И НЕ СтруктураПредприятия.ИспользоватьПерсональныеНаряды
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.СпособНастройкиГрафикаРаботы = ЗНАЧЕНИЕ(Перечисление.СпособыНастройкиГрафикаРаботыПодразделений.ПустаяСсылка)");
	
	Данные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные);
	
КонецПроцедуры

// Заполняет параметры учета выполненных работ по умолчанию:
//  - бригадные наряды
//  - КТУ
//  - произвольный период оформления.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.СтруктураПредприятия";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДопПараметры.ИмяВременнойТаблицы = "ВТСсылкиДляОбработки";
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь,
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц,
		ДопПараметры);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОбработке.Ссылка              КАК Ссылка,
		|	КОбработке.Ссылка.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ВТСсылкиДляОбработки КАК КОбработке");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			
			Если СправочникОбъект <> Неопределено Тогда
				
				ОбъектИзменен = Ложь;
				
				Если СправочникОбъект.ПроизводствоПоЗаказам	ИЛИ СправочникОбъект.ПроизводствоБезЗаказов Тогда
					
					// заполнение значением по умолчанию, в подразделении должны быть хоть какие-то исполнители
					Если Не СправочникОбъект.ИспользоватьБригадныеНаряды И Не СправочникОбъект.ИспользоватьПерсональныеНаряды Тогда
						
						ОбъектИзменен = Истина;
						СправочникОбъект.ИспользоватьБригадныеНаряды = Истина;
						
						Если Не СправочникОбъект.ИспользоватьКТУ Тогда
							СправочникОбъект.ИспользоватьКТУ = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
					// периодичность заполняется значением по умолчанию
					Если Не ЗначениеЗаполнено(СправочникОбъект.ПериодичностьОформленияВыработки) Тогда
						ОбъектИзменен = Истина;
						СправочникОбъект.ПериодичностьОформленияВыработки = Перечисления.ПериодичностьОформленияВыработкиСотрудников.ПроизвольныйПериод;
					КонецЕсли;
				    
				КонецЕсли;
				
				Если СправочникОбъект.СпособНастройкиГрафикаРаботы.Пустая() Тогда
					
					ОбъектИзменен = Истина;
					
					Если СправочникОбъект.ГрафикРаботы.Пустая() Тогда
						СправочникОбъект.СпособНастройкиГрафикаРаботы = Перечисления.СпособыНастройкиГрафикаРаботыПодразделений.ОсновнойКалендарьПредприятия;
					Иначе
						СправочникОбъект.СпособНастройкиГрафикаРаботы = Перечисления.СпособыНастройкиГрафикаРаботыПодразделений.ИндивидуальныйГрафик;
						СправочникОбъект.ГрафикиРаботы.Добавить().ГрафикРаботы = СправочникОбъект.ГрафикРаботы;
						СправочникОбъект.ГрафикРаботы = Неопределено;
					КонецЕсли;
						
				КонецЕсли;
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли
