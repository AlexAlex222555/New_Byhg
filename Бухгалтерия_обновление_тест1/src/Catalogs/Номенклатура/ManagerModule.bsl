#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	БлокируемыеРеквизиты = Новый Массив;
	БлокируемыеРеквизиты.Добавить("ЦеноваяГруппа");
	БлокируемыеРеквизиты.Добавить("ИспользоватьУпаковки");
	БлокируемыеРеквизиты.Добавить("НаборУпаковок");
	БлокируемыеРеквизиты.Добавить("Качество");
	БлокируемыеРеквизиты.Добавить("СтавкаНДС");
	БлокируемыеРеквизиты.Добавить("ЕдиницаИзмерения");
	БлокируемыеРеквизиты.Добавить("Принципал");
	БлокируемыеРеквизиты.Добавить("Контрагент");
	
	НоменклатураЛокализация.ПолучитьБлокируемыеРеквизитыОбъекта(БлокируемыеРеквизиты);
	
	Возврат БлокируемыеРеквизиты;

КонецФункции

// Проверяет могут ли переданные характеристика и упаковка являться характеристикой и упаковкой переданной
// номенклатуры. При проверке учитывается, что характеристики могут быть общими для вида номенклатуры,
// а упаковки общими для набора упаковок.
//
//		Параметры:
//			Номенклатура - СправочникСсылка.Номенклатура - номенклатура-владелец характеристик и упаковок
//			Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - проверяемая характеристика
//			Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - проверяемая упаковка.
//
//		Возвращаемое значение:
//			Структура - стуктура с полями:
//				* Характеристика - СправочникСсылка.Номенклатура - если проверяемая характеристика подходит, 
//						то записывается она, если нет - пустая ссылка.
//				* Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - если проверяемая упаковка подходит, 
//						то записывается она, если нет - пустая ссылка.
//				* ХарактеристикиИспользуются - Булево - равно ИСТИНА, если по номенклатуре ведется учет характеристик.
//
Функция ХарактеристикаИУпаковкаПринадлежатВладельцу(Номенклатура, Характеристика, Упаковка) Экспорт
	СтруктураВозврата = Новый Структура("Характеристика, Упаковка, ХарактеристикиИспользуются");
	СтруктураВозврата.Характеристика             = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	СтруктураВозврата.Упаковка                   = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	СтруктураВозврата.ХарактеристикиИспользуются = Ложь;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(СпрХарактеристики.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ВЫБОР
		|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		|		ПО (ВЫБОР
		|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|					ТОГДА СпрНоменклатура.ВидНоменклатуры
		|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|					ТОГДА СпрНоменклатура.Ссылка
		|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					ТОГДА СпрНоменклатура.ВладелецХарактеристик
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ = СпрХарактеристики.Владелец)
		|			И (СпрХарактеристики.Ссылка = &Характеристика)
		|ГДЕ
		|	СпрНоменклатура.Ссылка = &Номенклатура";
		
		Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		
	КонецЕсли;	
	
	ПараметрыВыбораУпаковки = Новый Структура();
	ПараметрыВыбораУпаковки.Вставить("Номенклатура", Номенклатура);
	
	ДанныеВыбораУпаковок = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьДанныеВыбора(ПараметрыВыбораУпаковки);
	
	Для Каждого ЭлементСпискаЗначений Из ДанныеВыбораУпаковок Цикл
		Если (ТипЗнч(ЭлементСпискаЗначений.Значение) = Тип("Структура")
			И ЭлементСпискаЗначений.Значение.Значение = Упаковка)
			Или ЭлементСпискаЗначений.Значение = Упаковка Тогда 
			СтруктураВозврата.Упаковка = Упаковка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Проверяет используются ли характеристики для переданной номенклатуры
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура - проверяемая номенклатура
//	Возвращаемое значение:
//		Булево - ИСТИНА, если характеристики используются.
//
Функция ХарактеристикиИспользуются(Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|				ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ХарактеристикиИспользуются;
	
КонецФункции

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив из Строка - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры") Тогда
		НеРедактируемыеРеквизиты.Добавить("ВидНоменклатуры");
	КонецЕсли;
	НеРедактируемыеРеквизиты.Добавить("ЕстьТоварыДругогоКачества");
	НеРедактируемыеРеквизиты.Добавить("ИспользованиеХарактеристик");
	НеРедактируемыеРеквизиты.Добавить("КодДляПоиска");
	НеРедактируемыеРеквизиты.Добавить("НаименованиеПолное");
	НеРедактируемыеРеквизиты.Добавить("ПоставляетсяВМногооборотнойТаре");
	НеРедактируемыеРеквизиты.Добавить("НоменклатураМногооборотнаяТара");
	НеРедактируемыеРеквизиты.Добавить("ХарактеристикаМногооборотнаяТара");
	НеРедактируемыеРеквизиты.Добавить("Описание");
	НеРедактируемыеРеквизиты.Добавить("ТипНоменклатуры");
	НеРедактируемыеРеквизиты.Добавить("ВладелецХарактеристик");
	НеРедактируемыеРеквизиты.Добавить("ВладелецСерий");
	НеРедактируемыеРеквизиты.Добавить("ВладелецТоварныхКатегорий");
	НеРедактируемыеРеквизиты.Добавить("ФайлКартинки");
	НеРедактируемыеРеквизиты.Добавить("ФайлОписанияДляСайта");
	НеРедактируемыеРеквизиты.Добавить("ОсобенностьУчета");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеРедактируемыеРеквизиты, РеквизитыПризнаковОсобенностейУчета(Метаданные.Справочники.Номенклатура));
	
	НоменклатураЛокализация.РеквизитыНеРедактируемыеВГрупповойОбработкеНоменклатура(НеРедактируемыеРеквизиты);
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Если для переданной номенклатуры ведутся характеристики, то в параметре возвращается владелец характеристик.
//
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура - проверяемая номенклатура
//		ВладелецХарактеристики - СправочникСсылка.Номенклатура, СправочникСсылка.ВидыНоменклатуры - в этом параметре
//			возвращается владелец характеристик (это зависит от того, какие характеристики используются - индивидуальные
//			или общие для вида номенклатуры).
//	Возвращаемое значение:
//		Булево - признак того, что для переданной номенклатуры ведется учет по характеристикам.
//
Функция ПроверитьИспользованиеХарактеристикИПолучитьВладельцаДляВыбора(Номенклатура, ВладелецХарактеристики) Экспорт

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ВидНоменклатуры"           , "ВидНоменклатуры");
	СтруктураРеквизитов.Вставить("ИспользованиеХарактеристик", "ИспользованиеХарактеристик");
	СтруктураРеквизитов.Вставить("ВладелецХарактеристик"     , "ВладелецХарактеристик");
	ЗначенияРеквизитовВИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СтруктураРеквизитов);

	Если ЗначенияРеквизитовВИБ.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
		ИспользованиеХарактеристик = Ложь;
	Иначе
		ИспользованиеХарактеристик = Истина;

		Если ЗначенияРеквизитовВИБ.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
			ВладелецХарактеристики = ЗначенияРеквизитовВИБ.ВидНоменклатуры;
		ИначеЕсли ЗначенияРеквизитовВИБ.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
			ВладелецХарактеристики = ЗначенияРеквизитовВИБ.ВладелецХарактеристик;
		Иначе
			ВладелецХарактеристики = Номенклатура;
		КонецЕсли;
	КонецЕсли;

	Возврат ИспользованиеХарактеристик;

КонецФункции

//Если для переданной номенклатуры ведутся характеристики, то в параметре возвращается владелец характеристик
//
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура - проверяемая номенклатура
//		ВестиУчетПоНоменклатуреГТД - Булево - в этом параметре возвращается признак учета в разрезе номенклатуры ГТД
//                                            для номенклатуры
//	Возвращаемое значение:
//		Булево - признак того, что для переданной номенклатуры ведется учет по характеристикам
//
Функция ПроверитьИспользованиеНоменклатурыГТД(Номенклатура, ВестиУчетПоНоменклатуреГТД = Неопределено) Экспорт

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
	СтруктураРеквизитов.Вставить("ВестиУчетПоГТД",  "ВестиУчетПоГТД");
	ЗначенияРеквизитовВИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СтруктураРеквизитов);

	Если ЗначенияРеквизитовВИБ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
		ИспользоватьНоменклатурыГТД = Ложь;
		ВестиУчетПоНоменклатуреГТД = Ложь;
		
	Иначе
		ИспользоватьНоменклатурыГТД = Истина;
		ВестиУчетПоНоменклатуреГТД = ЗначенияРеквизитовВИБ.ВестиУчетПоГТД;
		
	КонецЕсли;

	Возврат ИспользоватьНоменклатурыГТД;

КонецФункции // ПроверитьИспользованиеНоменклатурыГТД


// Заполняет реквизиты элемента номенклатуры значениями соответствующих реквизитов вида номенклатуры.
//
// Параметры:
//  Номенклатура						 - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - заполняемый элемент номенклатуры,
//  ПрерыватьЗаполнениеПриОшибкеПроверки - Булево - Истина - признак отмены выполнения заполнения данных,
//  Отказ								 - Булево - если происходит смена вида номенклатуры, то делается проверка корректности этой смены.
//  												Если та проверка выдает ошибку, то параметр выставляется в ИСТИНА.
//  СтарыйВидНоменклатуры				 - СправочникСсылка.ВидыНоменклатуры, Неопределено - передается, если отрабатывается смена вид номенклатуры 
//
Процедура ЗаполнитьРеквизитыПоВидуНоменклатуры(Номенклатура,
												ПрерыватьЗаполнениеПриОшибкеПроверки = Ложь,
												Отказ = Ложь,
												СтарыйВидНоменклатуры = Неопределено) Экспорт
	
	Если Номенклатура.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Номенклатура.ВидНоменклатуры) Тогда
		Возврат;	
	КонецЕсли;
		
	Если СтарыйВидНоменклатуры = Неопределено Тогда 
		Если ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
			СтарыйВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.Ссылка, "ВидНоменклатуры");
			Если ЗначениеЗаполнено(СтарыйВидНоменклатуры) Тогда
				ПроверитьКорректностьСменыВидаНоменклатурыЗаполнитьПоНовомуВиду(Номенклатура, СтарыйВидНоменклатуры, Отказ);
			КонецЕсли;
			Если Отказ
				И ПрерыватьЗаполнениеПриОшибкеПроверки Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			СтарыйВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;	
	
	СтрогоБерутсяИзВида = РеквизитыПризнаковОсобенностейУчета(Метаданные.Справочники.Номенклатура);
	СтрогоБерутсяИзВида.Добавить("ТипНоменклатуры");
	СтрогоБерутсяИзВида.Добавить("ВариантОформленияПродажи");
	СтрогоБерутсяИзВида.Добавить("ГруппаДоступа");
	СтрогоБерутсяИзВида.Добавить("ИспользованиеХарактеристик");
	СтрогоБерутсяИзВида.Добавить("ВладелецСерий");
	СтрогоБерутсяИзВида.Добавить("ВладелецХарактеристик");
	СтрогоБерутсяИзВида.Добавить("ВладелецТоварныхКатегорий");
	СтрогоБерутсяИзВида.Добавить("ОсобенностьУчета");
	СтрогоБерутсяИзВида.Добавить("ЕдиницаИзмеренияСрокаГодности");
	
	ЗаполняютсяТолькоПриСозданииНоменклатуры = Новый Массив;
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ЕдиницаИзмерения");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ЕдиницаДляОтчетов");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("КоэффициентЕдиницыДляОтчетов");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ОбособленнаяЗакупкаПродажа");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("СтавкаНДС");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ЦеноваяГруппа");
	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию = Новый Массив;
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("СкладскаяГруппа");	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("СезоннаяГруппа");	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("ГруппаАналитическогоУчета");	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("ГруппаФинансовогоУчета");	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("ШаблонЦенника");	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("ШаблонЭтикетки");	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("СхемаОбеспечения");	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("СпособОбеспеченияПотребностей");	
	
	ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены = Новый Массив;
	// При этом булевы реквизиты не заполнены, если равны ЛОЖЬ, т.е. булевы могут поменяться только с ЛОЖЬ на ИСТИНА.
	ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены.Добавить("ИспользоватьУпаковки");
	ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены.Добавить("НаборУпаковок");
	ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены.Добавить("ПоставляетсяВМногооборотнойТаре");
	ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены.Добавить("НоменклатураМногооборотнаяТара");
	ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены.Добавить("ХарактеристикаМногооборотнаяТара");
	ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены.Добавить("ВестиУчетСертификатовНоменклатуры");
	
	ЗначенияПоУмолчанию = Новый Структура;
	// Будут использованы, если другие способы не заполнили эти реквизиты
	ЗначенияПоУмолчанию.Вставить("ГруппаФинансовогоУчета", Справочники.ГруппыФинансовогоУчетаНоменклатуры.ПолучитьГруппуФинансовогоУчетаПоУмолчанию());
	ЗначенияПоУмолчанию.Вставить("СкладскаяГруппа", ЗначениеНастроекПовтИсп.СкладскаяГруппаНоменклатурыПоУмолчанию());
	ЗначенияПоУмолчанию.Вставить("ГруппаАналитическогоУчета", Справочники.ГруппыАналитическогоУчетаНоменклатуры.ПолучитьГруппуАналитическогоУчетаПоУмолчанию());
	ЗначенияПоУмолчанию.Вставить("Качество", Перечисления.ГрадацииКачества.Новый);
	ЗначенияПоУмолчанию.Вставить("СтавкаНДС", УчетНДСУП.СтавкаНДСПоУмолчанию());
	
	НоменклатураЛокализация.ЗаполнитьРеквизитыПоВидуНоменклатуры(СтрогоБерутсяИзВида,
		ЗаполняютсяТолькоПриСозданииНоменклатуры,
		ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию,
		ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены,
		ЗначенияПоУмолчанию);
	
	// Очистим реквизиты, которые точно нужно перезаполнить по виду	
	ОбщегоНазначенияУТКлиентСервер.ОчиститьЗначенияСвойств(Номенклатура, СтрогоБерутсяИзВида);
	
	ПолучаемыеРеквизиты = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолучаемыеРеквизиты, СтрогоБерутсяИзВида);
	
	Если Не ЗначениеЗаполнено(СтарыйВидНоменклатуры) Тогда
		// Получим реквизиты нового вида, если нужно заполнять только при создании, то просто не будем получать такие реквизиты.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолучаемыеРеквизиты, ЗаполняютсяТолькоПриСозданииНоменклатуры);
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолучаемыеРеквизиты, ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолучаемыеРеквизиты, ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены);
	
	РеквизитыНовогоВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура.ВидНоменклатуры, ПолучаемыеРеквизиты);
	
	// Если номенклатура создается, то очистим реквизиты, которые при создании заполняются по виду, если в новом виде эти
	// реквизиты заполнены.
	Если Не ЗначениеЗаполнено(Номенклатура.Ссылка)
		И Не ЗначениеЗаполнено(СтарыйВидНоменклатуры) Тогда
		
		Для Каждого ИмяРеквизита Из ЗаполняютсяТолькоПриСозданииНоменклатуры Цикл
			
			Если ЗначениеЗаполнено(РеквизитыНовогоВида[ИмяРеквизита]) Тогда
				Номенклатура[ИмяРеквизита] = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	// Очистим реквизиты, которые раньше были заполнены значениями по умолчанию (если в новом виде эти умолчания не заданы
	// очищать не будем).
	Если ЗначениеЗаполнено(СтарыйВидНоменклатуры) Тогда
		РеквизитыСтарогоВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтарыйВидНоменклатуры, ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию);
		
		Для Каждого КлючЗначение Из РеквизитыСтарогоВида Цикл
			Если Номенклатура[КлючЗначение.Ключ] = КлючЗначение.Значение
				И ЗначениеЗаполнено(РеквизитыНовогоВида[КлючЗначение.Ключ]) Тогда
				Номенклатура[КлючЗначение.Ключ] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Заполним только незаполненные реквизиты - те, которые нужно перезаполнять всегда были ранее принудительно очищены.
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияПустыхСвойств(Номенклатура, РеквизитыНовогоВида);
		
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияПустыхСвойств(Номенклатура, ЗначенияПоУмолчанию);
	
	ОтработатьЛогикуСвязиРеквизитов(Номенклатура);
	
КонецПроцедуры

// Процедура выполняет гармонизацию значений реквизитов между собой, исключая недопустимые сочетания значений.
//
// Параметры:
//  Номенклатура - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику
//                                                                       связи реквизитов.
Процедура ОтработатьЛогикуСвязиРеквизитов(Номенклатура) Экспорт
	
	РеквизитыПризнаковОсобенностейУчета = РеквизитыПризнаковОсобенностейУчета(Метаданные.Справочники.Номенклатура);
	
	Для Каждого ИмяРеквизита Из РеквизитыПризнаковОсобенностейУчета Цикл  
		Номенклатура[ИмяРеквизита] = Номенклатура.ОсобенностьУчета = 
			ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры." + ИмяРеквизита);
	КонецЦикла;
	
	ИспользованиеРеквизитов = ИспользованиеЭлементов(Номенклатура,Ложь,Истина);
	МетаданныеОбъекта = Метаданные.Справочники.Номенклатура;
	
	Для каждого КлючЗначение Из ИспользованиеРеквизитов Цикл
		Если Не КлючЗначение.Значение Тогда
			Если МетаданныеОбъекта.Реквизиты.Найти(КлючЗначение.Ключ) <> Неопределено Тогда
				Номенклатура[КлючЗначение.Ключ] = Неопределено;
			ИначеЕсли МетаданныеОбъекта.ТабличныеЧасти.Найти(КлючЗначение.Ключ) <> Неопределено Тогда
				Номенклатура[КлючЗначение.Ключ].Очистить();
			Иначе
				ТекстИсключения = НСтр("ru='При очистки неиспользуемых реквизитов номенклатуры не найден реквизит %ИмяРеквизита%';uk='При очищенні невикористовуваних реквізитів номенклатури не знайдено реквізит% ИмяРеквизита%'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРеквизита%", КлючЗначение.Ключ);
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		Если ЗначениеЗаполнено(Номенклатура.Принципал)
			И ТипЗнч(Номенклатура.Принципал) = Тип("СправочникСсылка.Организации") Тогда
			Номенклатура.Контрагент = Номенклатура.Принципал;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Номенклатура.НаборУпаковок)
		И Номенклатура.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		
		Номенклатура.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.НаборУпаковок, "ЕдиницаИзмерения");
		
	КонецЕсли;
	
	ИспользоватьТоварныеКатегории = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории");
	
	Если ИспользоватьТоварныеКатегории
		И ЗначениеЗаполнено(Номенклатура.ТоварнаяКатегория) Тогда
		
		ВладелецКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.ТоварнаяКатегория, "Владелец");
		
		Если ВладелецКатегории <> Номенклатура.ВидНоменклатуры 
			И ВладелецКатегории <> Номенклатура.ВладелецТоварныхКатегорий Тогда
			
			Номенклатура.ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура.ЕдиницаДляОтчетов) Тогда
		Номенклатура.ЕдиницаДляОтчетов = Номенклатура.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура.КоэффициентЕдиницыДляОтчетов)
		Или Номенклатура.ЕдиницаДляОтчетов = Номенклатура.ЕдиницаИзмерения Тогда
		Номенклатура.КоэффициентЕдиницыДляОтчетов = 1;
	КонецЕсли;
		
	ТипЕдиницы = "";
	МернаяЕдиницаХранения = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Номенклатура.ЕдиницаИзмерения, ТипЕдиницы);
	
	ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, "Вес");	
	ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, "Объем");	
	ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, "Площадь");	
	ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, "Длина");	
		
	НоменклатураЛокализация.ОтработатьЛогикуСвязиРеквизитов(Номенклатура);
	
КонецПроцедуры

// Проверяет корректность смены вида номенклатуры и в случае проблем выставляет Отказ в ИСТИНА.
//
// Параметры:
//	Номенклатура          - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - номенклатура, нового вида номенклатуры,
//	СтарыйВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры до смены,
//	Отказ                 - Булево - Истина - отмена смена вида номенклатуры.
//
Процедура ПроверитьКорректностьСменыВидаНоменклатурыЗаполнитьПоНовомуВиду(Номенклатура, СтарыйВидНоменклатуры, Отказ) Экспорт
	
	УсловияВыбораНовогоВидаНоменклатуры = УсловияВыбораНовогоВидаНоменклатуры();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ";
	
	Для Каждого КлючЗначение Из УсловияВыбораНовогоВидаНоменклатуры Цикл
		ТекстЗапроса = ТекстЗапроса + КлючЗначение.Значение + " КАК " + КлючЗначение.Ключ + ", ";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	НовыйВидНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК НовыйВидНоменклатуры ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ПараметрыЗапроса = Запрос.НайтиПараметры();

	ИменаРеквизитов = Новый Массив;
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		ИменаРеквизитов.Добавить(Параметр.Имя);
	КонецЦикла;
	
	СтарыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтарыйВидНоменклатуры, ИменаРеквизитов);
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтарыеРеквизиты[Параметр.Имя]);
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	НовыйВидНоменклатуры.Ссылка = &НовыйВидНоменклатуры";
	Запрос.УстановитьПараметр("НовыйВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	ЗначениеОшибки = Результат[0];
	
	Для Каждого Ошибка Из Результат.Колонки Цикл
		Если Ошибка.Имя = "Ссылка"
			Или Не ЗначениеОшибки[Ошибка.Имя] Тогда
			Продолжить;
		КонецЕсли;
		
		Если Ошибка.Имя = "ЕстьПроблемаТипНоменклатуры" Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Проблема при изменении вида номенклатуры: у нового вида другой тип номенклатуры.';uk='Проблема при зміні виду номенклатури: у нового виду інший тип номенклатури.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли Ошибка.Имя = "ЕстьПроблемаОсобенностьУчета" Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Проблема при изменении вида номенклатуры: у нового вида другая особенность учета.';uk='Проблема при зміні виду номенклатури: у нового виду інша особливість обліку.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли Ошибка.Имя = "ЕстьПроблемаИспользоватьСерии" Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Проблема при изменении вида номенклатуры: у нового вида несовместимые настройки ведения серий.';uk='Проблема при зміні виду номенклатури: у нового виду несумісні настройки ведення серій.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли Ошибка.Имя = "ЕстьПроблемаИспользованиеХарактеристик" Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Проблема при изменении вида номенклатуры: у нового вида несовместимые настройки ведения характеристик.';uk='Проблема при зміні виду номенклатури: у нового виду несумісні настройки ведення характеристик.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ТекстИсключения = НСтр("ru='Неизвестный код ошибки.';uk='Невідомий код помилки.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Условия выбора нового вида номенклатуры. Используются как для ограничения списка выбора, так и для проверки смены вида.
// Возвращаемое значение:
//  Структура - структура условий. Ключ - имя условия, значения - текст запроса условия.
//
Функция УсловияВыбораНовогоВидаНоменклатуры() Экспорт
	
	УсловияВыбораНовогоВидаНоменклатуры = Новый Структура;
	
	ЕстьПроблемаТипНоменклатуры = "
	|	ВЫБОР
	|		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА &ТипНоменклатуры <> НовыйВидНоменклатуры.ТипНоменклатуры
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаТипНоменклатуры", ЕстьПроблемаТипНоменклатуры);
	
	ЕстьПроблемаОсобенностьУчета = "
	|	ВЫБОР
	|		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА &ОсобенностьУчета <> НовыйВидНоменклатуры.ОсобенностьУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаОсобенностьУчета", ЕстьПроблемаОсобенностьУчета);
	
	ЕстьПроблемаИспользоватьСерии = "
	|	ВЫБОР
	|		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ(НЕ &ИспользоватьСерии
	|						И НЕ НовыйВидНоменклатуры.ИспользоватьСерии
	|					ИЛИ &ИспользоватьСерии
	|						И НовыйВидНоменклатуры.ИспользоватьСерии
	|						И (&ВладелецСерий = НовыйВидНоменклатуры.ВладелецСерий
	|								И &ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|								И НовыйВидНоменклатуры.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|							ИЛИ &ВладелецСерий = НовыйВидНоменклатуры.Ссылка
	|							ИЛИ НовыйВидНоменклатуры.ВладелецСерий = &Ссылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаИспользоватьСерии", ЕстьПроблемаИспользоватьСерии);
	
	ЕстьПроблемаИспользованиеХарактеристик = "
	|	ВЫБОР
	|		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ(&ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|						И НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ИЛИ &ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|						И НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|					ИЛИ &ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|						И НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|						И НовыйВидНоменклатуры.ВладелецХарактеристик = &Ссылка
	|					ИЛИ НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|						И &ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|						И &ВладелецХарактеристик = НовыйВидНоменклатуры.Ссылка
	|					ИЛИ НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|						И &ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|						И &ВладелецХарактеристик = НовыйВидНоменклатуры.ВладелецХарактеристик)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаИспользованиеХарактеристик", ЕстьПроблемаИспользованиеХарактеристик);
	
	Возврат УсловияВыбораНовогоВидаНоменклатуры;
	
КонецФункции

// Возвращает настройки видимости и заголовков элементов формы. Используется для построения формы и табличного
// документа карточки номенклатуры.
// Параметры:
//  Объект - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов
//	РежимВидимостиПоказатьТолькоВажные 	- Булево - признак отображения основных реквизитов.
//
// Возвращаемое значение:
//  Структура - структура с ключами:
//		* ВидимостьЭлементов - см. ИспользованиеЭлементов
//		* ЗаголовкиЭлементов - см. ЗаголовкиЭлементов
//
Функция НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные = Ложь) Экспорт
	
	НастройкиВидимостиИЗаголовков = Новый Структура;
	
	ВидимостьЭлементов = ИспользованиеЭлементов(Объект, РежимВидимостиПоказатьТолькоВажные, Ложь);
	ЗаголовкиЭлементов = ЗаголовкиЭлементов(Объект, ВидимостьЭлементов);
		
	НастройкиВидимостиИЗаголовков.Вставить("ВидимостьЭлементов", ВидимостьЭлементов);
	НастройкиВидимостиИЗаголовков.Вставить("ЗаголовкиЭлементов", ЗаголовкиЭлементов);
		
	Возврат НастройкиВидимостиИЗаголовков;
	
КонецФункции

// Возвращает признак типа Булево о наличии для переданного параметра НоменклатураВладелец подчиненных элементов типа НоменклатураГТД.
// Параметры:
//	НоменклатураВладелец - СправочникСсылка.Номенклатура - элемент справочника номенклатуры
//
// Возвращаемое значение:
//	Булево - есть подчиненные объекты типа НоменклатураГТД
//
Функция ЕстьПодчиненныеОбъектыНоменклатураГТД(НоменклатураВладелец) Экспорт

	ЕстьПодчиненныеОбъекты = Ложь;
	
	Если ТипЗнч(НоменклатураВладелец) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ЕстьПодчиненныеОбъекты;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК НаличиеПодчиненных
	|ИЗ
	|	Справочник.НоменклатураГТД КАК НоменклатураГТД
	|ГДЕ
	|	НоменклатураГТД.Владелец = &Владелец
	|	И НЕ НоменклатураГТД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", НоменклатураВладелец);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ЕстьПодчиненныеОбъекты = НЕ РезультатЗапроса.Пустой();
	
	Возврат ЕстьПодчиненныеОбъекты;

КонецФункции // ЕстьПодчиненныеОбъектыНоменклатураГТД()

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ ИСТИНА
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЭтоГруппа ИЛИ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий
 
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда	
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			ОбъектКопирования = Параметры.ЗначениеКопирования;
			Если Не ОбъектКопирования.ЭтоГруппа Тогда
				СтандартнаяОбработка = Ложь;
				Параметры = Новый Структура("ЗначениеКопирования", ОбъектКопирования);
				ВыбраннаяФорма = "ФормаЭлемента";
			КонецЕсли;
		ИначеЕсли Параметры.Свойство("РежимВыбора") Тогда
			Если Параметры.РежимВыбора
				И (Не Параметры.Свойство("ЭтоГруппа")
				 	Или Не Параметры.ЭтоГруппа) Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаЭлемента";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		ВыборГруппИЭлементов = Неопределено;
		Если Параметры.Свойство("ВыборГруппИЭлементов",ВыборГруппИЭлементов) Тогда
			Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаВыбораГруппИЭлементов";
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаВыбораГруппИЭлементов";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	НоменклатураВызовСервера.НоменклатураОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Карточка номенклатуры
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КарточкаНоменклатуры";
	КомандаПечати.Представление = НСтр("ru='Печать';uk='Друк'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru='Карточка номенклатуры';uk='Картка номенклатури'");
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КарточкаНоменклатуры") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"КарточкаНоменклатуры", 
			?(МассивОбъектов.Количество() = 1, МассивОбъектов[0], НСтр("ru='Список номенклатуры';uk='Список номенклатури'")), 
            СформироватьПечатнуюФормуКарточкиНоменклатуры(
                МассивОбъектов, 
                ОбъектыПечати, 
                ПараметрыПечати,
				ПараметрыВывода
            ),
			,
			,
			, 
			Истина // ЭтоМногоязычнаяПечатнаяФорма  
        );
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуКарточкиНоменклатуры(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КАРТОЧКАНОМЕНКЛАТУРЫ";
	
	ПерваяКарточка = Истина;
	
	Для Каждого Номенклатура Из МассивОбъектов Цикл
		Если ПерваяКарточка Тогда
			ПерваяКарточка = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
        ТабличныйДокумент.Вывести(
        	ТабличныйДокументКарточкиНоменклатуры(Номенклатура, Неопределено, Истина, ПараметрыВывода)
        );
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#Область КарточкаНоменклатуры

// Возвращает табличный документ номенклатуры.
// Параметры:
//  Номенклатура - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику
//                                                                       связи реквизитов.
//  НастройкиВидимостиИЗаголовков - см. НастройкиВидимостиИЗаголовков
//   ПараметрыВывода - Структура - Параметры формирования табличных документов
//
// Возвращаемое значение:
//	ТабличныйДокумент - табличный документ с реквизитами.
//
Функция ТабличныйДокументКарточкиНоменклатуры(Номенклатура, НастройкиВидимостиИЗаголовков, ДляПечати, ПараметрыВывода = Неопределено) Экспорт
	
	Перем Заголовок;
	
	Если НастройкиВидимостиИЗаголовков = Неопределено Тогда
		НастройкиВидимостиИЗаголовков = НастройкиВидимостиИЗаголовков(Номенклатура);
	КонецЕсли;
	
	Объект = Неопределено;
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Объект = Номенклатура.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникОбъект.Номенклатура")
		Или ТипЗнч(Номенклатура) = Тип("ДанныеФормыСтруктура") Тогда
		Объект = Номенклатура;
	Иначе
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТабличныйДокументКарточка = Новый ТабличныйДокумент;
	
	СтруктураВидимости = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	СтруктураЗаголовков = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Макет = ПолучитьМакет("ПФ_MXL_КарточкаНоменклатуры");
    Если ПараметрыВывода <> Неопределено Тогда
    	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
    Иначе
    	КодЯзыкаПечать = МультиязычностьУкр.ПолучитьЯзыкФормированияПечатныхФорм();
    КонецЕсли; 
    Если ЗначениеЗаполнено(КодЯзыкаПечать) Тогда
    	Макет.КодЯзыкаМакета = КодЯзыкаПечать; 
    КонецЕсли;
	
	#Область Шапка
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Объект);
		
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		ОбластьШапка.Параметры.Наименование = ТекстЗначенияНеЗаполнен("Наименование");
	КонецЕсли;
	Если Не ДляПечати Тогда
		ОбластьШапка.Параметры.РасшифровкаНаименование = "Наименование";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		ОбластьШапка.Параметры.НаименованиеПолное = ТекстЗначенияНеЗаполнен("НаименованиеПолное");
	КонецЕсли;
	Если Не ДляПечати Тогда
		ОбластьШапка.Параметры.РасшифровкаНаименованиеПолное = "НаименованиеПолное";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Артикул) Тогда
		ОбластьШапка.Параметры.Артикул = ТекстЗначенияНеЗаполнен("Артикул");
	КонецЕсли;
	Если Не ДляПечати Тогда
		ОбластьШапка.Параметры.РасшифровкаАртикул = "Артикул";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Код) Тогда
		ОбластьШапка.Параметры.Код = ТекстЗначенияНеЗаполнен("Код");
	КонецЕсли;
	Если Не ДляПечати Тогда
		ОбластьШапка.Параметры.РасшифровкаКод = "Код";
	КонецЕсли;

	Если Не ДляПечати
		И РазделВиден("ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами", СтруктураВидимости) Тогда
		ОбластьШапка.Параметры.РасшифровкаГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами = "ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами";
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиШтрихкодыНоменклатуры", СтруктураВидимости) Тогда 
		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиШтрихкодыНоменклатуры", Заголовок) Тогда
			ОбластьШапка.Параметры.ГиперссылкаПерейтиШтрихкодыНоменклатуры = Заголовок;	
		КонецЕсли;
		Если Не ДляПечати Тогда
			ОбластьШапка.Параметры.РасшифровкаГиперссылкаПерейтиШтрихкодыНоменклатуры = "ГиперссылкаПерейтиШтрихкодыНоменклатуры";
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокументКарточка.Присоединить(ОбластьШапка);
	
	#КонецОбласти
		
	ТабличныйДокументКолонки = Новый ТабличныйДокумент;
	
	#Область ТабличныйДокументЛево
	
	ТабличныйДокументЛево = Новый ТабличныйДокумент;
		
	#Область Описание
	
	Если ГлаваВидна("Описание", СтруктураВидимости) Тогда 
		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ОписаниеЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		// Вывод картинки
		Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
			
			ОбластьОписаниеКартинка = Макет.ПолучитьОбласть("ОписаниеКартинка");
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				КартинкаНоменклатуры = РаботаСФайлами.ДвоичныеДанныеФайла(Объект.ФайлКартинки);
				УстановитьПривилегированныйРежим(Ложь);
			Исключение
				КартинкаНоменклатуры = Неопределено; 
			КонецПопытки;
			
			Если ЗначениеЗаполнено(КартинкаНоменклатуры) Тогда
				ОбластьКартинка = ОбластьОписаниеКартинка.Области.АдресКартинки; 
				
				Если ТипЗнч(КартинкаНоменклатуры) = Тип("Картинка") Тогда
					ОбластьКартинка.Картинка = КартинкаНоменклатуры;
				ИначеЕсли ТипЗнч(КартинкаНоменклатуры) = Тип("ДвоичныеДанные") Тогда
					ОбластьКартинка.Картинка = Новый Картинка(КартинкаНоменклатуры);
				КонецЕсли;
				
				Если Не ДляПечати Тогда
					ОбластьОписаниеКартинка.Параметры.Расшифровка = "ФайлКартинки";
				КонецЕсли;
				
				ТабличныйДокументЛево.Вывести(ОбластьОписаниеКартинка);
			Иначе
				ОписаниеКартинкиОшибка = Макет.ПолучитьОбласть("ФайлКартинкиСтрокаОшибка");
				Если Не ДляПечати Тогда
					ОписаниеКартинкиОшибка.Параметры.Расшифровка = "ФайлКартинки";
				КонецЕсли;
				ТабличныйДокументЛево.Вывести(ОписаниеКартинкиОшибка);
			КонецЕсли;
			
		Иначе
			
			ОписаниеКартинкиНет = Макет.ПолучитьОбласть("ФайлКартинкиСтрока");
			Если Не ДляПечати Тогда
				ОписаниеКартинкиНет.Параметры.Расшифровка = "ФайлКартинки";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОписаниеКартинкиНет);
			
		КонецЕсли;	
		
		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "Описание", Объект.Описание);
		
		Если РазделВиден("ФайлОписанияДляСайта", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "ФайлОписанияДляСайта", Объект.ФайлОписанияДляСайта);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимости) Тогда
			ОбластьОписаниеФайлыСтрока = Макет.ПолучитьОбласть("ФайлыСтрока");
			
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиФайлы", Заголовок) Тогда
				ОбластьОписаниеФайлыСтрока.Параметры.Файлы = Заголовок;
				Если Не ДляПечати Тогда
					ОбластьОписаниеФайлыСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиФайлы";
				КонецЕсли;
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьОписаниеФайлыСтрока);
		КонецЕсли;
		
		Если РазделВиден("ВестиУчетСертификатовНоменклатуры", СтруктураВидимости) Тогда 
			
			
			Область = Макет.ПолучитьОбласть("ВестиУчетСертификатовНоменклатурыСтрока");
			Картинка = КартинкаФлагаПоЗначению(Объект.ВестиУчетСертификатовНоменклатуры);
			Область.Область("ВестиУчетСертификатовНоменклатурыФлаг").Картинка = Картинка;
						
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиСертификатыНоменклатуры", Заголовок) Тогда
				Область.Параметры.ГиперссылкаПерейтиСертификатыНоменклатуры = Заголовок;
				Если РазделВиден("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание", СтруктураВидимости) Тогда 
					Область.Область("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание").Картинка = БиблиотекаКартинок.Внимание16;
				КонецЕсли;
				Если Не ДляПечати Тогда
					Область.Параметры.РасшифровкаГиперссылки = "ГиперссылкаПерейтиСертификатыНоменклатуры";
				КонецЕсли;
			КонецЕсли;
			
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ВестиУчетСертификатовНоменклатуры";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
			
		КонецЕсли;
		
		
	КонецЕсли;
		
	#КонецОбласти
	
	#Область ДополнительныеРеквизиты
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитов.Свойство КАК Свойство,
	|	ВидыНоменклатуры.НаборСвойств КАК НаборСвойств,
	|	НаборыДополнительныхРеквизитов.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение,
	|	ЛОЖЬ КАК ОбщееСвойство,
	|	НаборыДополнительныхРеквизитов.НомерСтроки КАК НомерСтрокиДляСортировки
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ПО ВидыНоменклатуры.НаборСвойств = НаборыДополнительныхРеквизитов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ПО (НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура)
	|			И (НаборыДополнительныхРеквизитов.Свойство = НоменклатураДополнительныеРеквизиты.Свойство)
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитов.Свойство.ЭтоДополнительноеСведение
	|	И ВидыНоменклатуры.Ссылка В(&ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитов.Свойство,
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие),
	|	НаборыДополнительныхРеквизитов.Свойство.Заголовок,
	|	НоменклатураДополнительныеРеквизиты.Значение,
	|	ИСТИНА КАК ОбщееСвойство,
	|	НаборыДополнительныхРеквизитов.НомерСтроки
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ПО (НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура)
	|			И НаборыДополнительныхРеквизитов.Свойство = НоменклатураДополнительныеРеквизиты.Свойство
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитов.Свойство.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	ДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	
	Если ГлаваВидна("ДополнительныеРеквизиты", СтруктураВидимости, ДополнительныеРеквизиты.Количество()) Тогда

		ДополнительныеРеквизиты.Сортировать("ОбщееСвойство Убыв, НомерСтрокиДляСортировки Возр");
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ДополнительныеРеквизитыЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьЗаголовок);
		
		Для Каждого ДопРеквизит Из ДополнительныеРеквизиты Цикл
			
			ЗначениеРеквизита = ДопРеквизит.Значение;
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита)
				И ДопРеквизит.Свойство.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
				ЗначениеРеквизита = Ложь;
			КонецЕсли;
			
			ИмяЭлементаДопРеквизита =  "ДополнительныйРеквизитЗначение_" 
				+ СтрЗаменить(ВРег(Строка(ДопРеквизит.НаборСвойств.УникальныйИдентификатор())), "-", "x")
				+ "_"
				+ СтрЗаменить(ВРег(Строка(ДопРеквизит.Свойство.УникальныйИдентификатор())), "-", "x");
			Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "ДополнительныеРеквизиты", ЗначениеРеквизита, ДопРеквизит.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита);		
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти	
	
	#Область СведенияОПроизводителе
	
	Если ГлаваВидна("СведенияОПроизводителе", СтруктураВидимости) Тогда 

		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("СведенияОПроизводителеЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Если РазделВиден("Производитель", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "Производитель", Объект.Производитель);
		КонецЕсли;
		
		Если РазделВиден("Марка", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "Марка", Объект.Марка);
		КонецЕсли;
		
		Если РазделВиден("Принципал", СтруктураВидимости)
			Или РазделВиден("Контрагент", СтруктураВидимости)
			Или РазделВиден ("ГиперссылкаПерейтиСоглашения", СтруктураВидимости) Тогда
			ОбластьРеализацияУслугиПоАгентскомуДоговору = Макет.ПолучитьОбласть("РеализацияУслугиПоАгентскомуДоговору");
			Если СтруктураЗаголовков.Свойство("ГруппаАгентскиеУслуги", Заголовок) Тогда
				ОбластьРеализацияУслугиПоАгентскомуДоговору.Параметры.РеализацияУслугиПоАгентскомуДоговору = Заголовок;
			КонецЕсли;
			Если Не ДляПечати Тогда
				ОбластьРеализацияУслугиПоАгентскомуДоговору.Параметры.Расшифровка = "ГруппаАгентскиеУслуги";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьРеализацияУслугиПоАгентскомуДоговору);
		КонецЕсли;
		
		Если РазделВиден("Принципал", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "Принципал", Объект.Принципал);
		КонецЕсли;
		
		Если РазделВиден("Контрагент", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "Контрагент", Объект.Контрагент);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиСоглашения", СтруктураВидимости) Тогда 
			ОбластьГиперссылкаПерейтиСоглашения = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСоглашенияСтрока");
			
			ОбластьГиперссылкаПерейтиСоглашения.Параметры.ГиперссылкаПерейтиСоглашения = СтруктураЗаголовков.ГиперссылкаПерейтиСоглашения.Заголовок;
			
			Если Не ДляПечати Тогда
				РасшифровкаСоглашения = Новый Структура;
				РасшифровкаСоглашения.Вставить("ИмяЭлемента", "ГиперссылкаПерейтиСоглашения");
				РасшифровкаСоглашения.Вставить("Гиперссылка", СтруктураЗаголовков.ГиперссылкаПерейтиСоглашения.Гиперссылка);
				
				ОбластьГиперссылкаПерейтиСоглашения.Параметры.Расшифровка = РасшифровкаСоглашения;
			КонецЕсли;
			
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиСоглашения);
		КонецЕсли;
		
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область ПланированиеИМаркетинг
	
	Если ГлаваВидна("ПланированиеИМаркетинг", СтруктураВидимости) Тогда 
		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ПланированиеИМаркетингЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Если РазделВиден("ТоварнаяКатегория", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "ТоварнаяКатегория", Объект.ТоварнаяКатегория);
		КонецЕсли;
		
		Если РазделВиден("КоллекцияНоменклатуры", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "КоллекцияНоменклатуры", Объект.КоллекцияНоменклатуры);
		КонецЕсли;
		
		Если РазделВиден("СезоннаяГруппа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "СезоннаяГруппа", Объект.СезоннаяГруппа);
		КонецЕсли;
		
		Если РазделВиден("РейтингПродаж", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "РейтингПродаж", Объект.РейтингПродаж);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиСовместныеПродажи", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиСовместныеПродажиСтрока = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСовместныеПродажиСтрока");
			Если Не ДляПечати Тогда
				ОбластьГиперссылкаПерейтиСовместныеПродажиСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиСовместныеПродажи";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиСовместныеПродажиСтрока);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиСегменты", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиСегменты = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСегментыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиСегменты", Заголовок) Тогда  
				ОбластьГиперссылкаПерейтиСегменты.Параметры.ГиперссылкаПерейтиСегменты = Заголовок;
			КонецЕсли;
			Если Не ДляПечати Тогда
				ОбластьГиперссылкаПерейтиСегменты.Параметры.Расшифровка = "ГиперссылкаПерейтиСегменты";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиСегменты);
		КонецЕсли;
				
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область ОбеспечениеИПроизводство
	
	Если ГлаваВидна("ОбеспечениеИПроизводство", СтруктураВидимости) Тогда 
		
		Область = Макет.ПолучитьОбласть("ОбеспечениеИПроизводствоЗаголовок");
		Если СтруктураЗаголовков.Свойство("ДекорацияЗаголовокОбеспечение", Заголовок) Тогда
			Область.Параметры.ОбеспечениеПроизводство = Заголовок;
		КонецЕсли;		
		ТабличныйДокументЛево.Вывести(Область);
		
		Если РазделВиден("ОбособленнаяЗакупкаПродажа", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ОбособленнаяЗакупкаПродажаСтрока");
			Картинка = КартинкаФлагаПоЗначению(Объект.ОбособленнаяЗакупкаПродажа);
			Область.Область("ОбособленнаяЗакупкаПродажаФлаг").Картинка = Картинка;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ОбособленнаяЗакупкаПродажа";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("СпособОбеспеченияПотребностей", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "СпособОбеспеченияПотребностей", Объект.СпособОбеспеченияПотребностей);
		КонецЕсли;
		
		Если РазделВиден("СхемаОбеспечения", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "СхемаОбеспечения", Объект.СхемаОбеспечения);
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиВариантыКомплектации", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиВариантыКомплектацииСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиВариантыКомплектации", Заголовок) Тогда
				Область.Параметры.ГиперссылкаПерейтиВариантыКомплектации = Заголовок;
			КонецЕсли;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиВариантыКомплектации";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиНастройкаПоддержанияЗапасов", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиНастройкаПоддержанияЗапасовСтрока");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиНастройкаПоддержанияЗапасов";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностей", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностейСтрока");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностей";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводство", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводствоСтрока");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводство";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПроизводство", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиПроизводствоСтрока");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПроизводство";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
				
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область Цены
	
	Если ГлаваВидна("Цены", СтруктураВидимости) Тогда 

		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ЦеныЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Если РазделВиден("ЦеноваяГруппа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, ДляПечати, "ЦеноваяГруппа", Объект.ЦеноваяГруппа);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПрайсЛистКомпании", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ПрайсЛистКомпанииСтрока");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПрайсЛистКомпании";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПрайсЛистыПоставщиков", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ПрайсЛистыПоставщиковСтрока");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПрайсЛистыПоставщиков";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиИсторияИзмененияЦенКомпании", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ИсторияИзмененияЦенКомпанииСтрока");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиИсторияИзмененияЦенКомпании";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиков", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ИсторияИзмененияЦенПоставщиковСтрока");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиков";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
	КонецЕсли;
				
	#КонецОбласти
	
	#Область ПечатьЭтикетокИЦенников
	
	Если ГлаваВидна("ПечатьЭтикетокИЦенников", СтруктураВидимости) Тогда 
		
		ВидНоменклатурыШаблоны = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры, "ШаблонЦенника, ШаблонЭтикетки");
		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ПечатьЭтикетокИЦенниковЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Область = Макет.ПолучитьОбласть("ИспользоватьИндивидуальныйШаблонЭтикеткиСтрока");
		Если Объект.ИспользоватьИндивидуальныйШаблонЭтикетки Тогда
			Область.Параметры.ИспользоватьИндивидуальныйШаблонЭтикетки = НСтр("ru='Индивидуальный шаблон этикетки:';uk='Індивідуальний шаблон етикетки:'");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ИспользоватьИндивидуальныйШаблонЭтикетки";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
			ОбластьЭтикетки = Макет.ПолучитьОбласть("ШаблонЭтикеткиСтрока");
			ОбластьЭтикетки.Параметры.ШаблонЭтикетки = Объект.ШаблонЭтикетки;
			Если Не ДляПечати Тогда
				ОбластьЭтикетки.Параметры.Расшифровка = "ШаблонЭтикетки";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьЭтикетки);
		Иначе
			Область.Параметры.ИспользоватьИндивидуальныйШаблонЭтикетки = НСтр("ru='Используется общий для вида шаблон этикетки';uk='Використовується загальний для виду шаблон етикетки'");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ИспользоватьИндивидуальныйШаблонЭтикетки";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
			ОбластьЭтикетки = Макет.ПолучитьОбласть("ШаблонЭтикеткиСтрока");
			Если ЗначениеЗаполнено(ВидНоменклатурыШаблоны.ШаблонЭтикетки) Тогда
				ОбластьЭтикетки.Параметры.ШаблонЭтикетки = ВидНоменклатурыШаблоны.ШаблонЭтикетки;
			Иначе
				ОбластьЭтикетки.Параметры.ШаблонЭтикетки =  НСтр("ru='<не указан>';uk='<не зазначено>'");
			КонецЕсли;
			Если Не ДляПечати Тогда
				ОбластьЭтикетки.Параметры.Расшифровка = "ШаблонЭтикетки";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьЭтикетки);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("ИспользоватьИндивидуальныйШаблонЦенникаСтрока");
		Если Объект.ИспользоватьИндивидуальныйШаблонЦенника Тогда
			Область.Параметры.ИспользоватьИндивидуальныйШаблонЦенника = НСтр("ru='Индивидуальный шаблон ценника:';uk='Індивідуальний шаблон цінника:'");
			Область.Параметры.Расшифровка = "ИспользоватьИндивидуальныйШаблонЦенника";
			ТабличныйДокументЛево.Вывести(Область);
			ОбластьЦенника = Макет.ПолучитьОбласть("ШаблонЦенникаСтрока");
			ОбластьЦенника.Параметры.ШаблонЦенника = Объект.ШаблонЦенника;
			Если Не ДляПечати Тогда
				ОбластьЦенника.Параметры.Расшифровка = "ШаблонЦенника";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьЦенника);
		Иначе
			Область.Параметры.ИспользоватьИндивидуальныйШаблонЦенника = НСтр("ru='Используется общий для вида шаблон ценника';uk='Використовується загальний для виду шаблон цінника'");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ИспользоватьИндивидуальныйШаблонЦенника";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(Область);
			ОбластьЦенника = Макет.ПолучитьОбласть("ШаблонЦенникаСтрока");
			Если ЗначениеЗаполнено(ВидНоменклатурыШаблоны.ШаблонЦенника) Тогда
				ОбластьЦенника.Параметры.ШаблонЦенника = ВидНоменклатурыШаблоны.ШаблонЦенника;
			Иначе
				ОбластьЦенника.Параметры.ШаблонЦенника =  НСтр("ru='<не указан>';uk='<не зазначено>'");
			КонецЕсли;
			Если Не ДляПечати Тогда
				ОбластьЦенника.Параметры.Расшифровка = "ШаблонЦенника";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьЦенника);
		КонецЕсли;
				
	КонецЕсли;	
	
	#КонецОбласти
	
	ТабличныйДокументКолонки.Присоединить(ТабличныйДокументЛево);
	
	#КонецОбласти
		
	#Область ТабличныйДокументПраво
	
	ТабличныйДокументПраво = Новый ТабличныйДокумент;
	
	
	#Область ОсновныеПараметрыУчета
	
	Если ГлаваВидна("ОсновныеПараметрыУчета", СтруктураВидимости) Тогда 
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ОсновныеПараметрыУчетаЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если РазделВиден("Родитель", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "Родитель", Объект.Родитель);
		КонецЕсли;
		
		Если РазделВиден("ГруппаДоступа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "ГруппаДоступа", Объект.ГруппаДоступа);
		КонецЕсли;

		Если РазделВиден("ВидНоменклатуры", СтруктураВидимости) Или РазделВиден("ВидНоменклатурыПереключатель", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "ВидНоменклатуры", Объект.ВидНоменклатуры);
		КонецЕсли;
		
		Если РазделВиден("ТипНоменклатуры", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "ТипНоменклатуры", Объект.ТипНоменклатуры);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиСоставНабора", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСоставНабораСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиСоставНабора", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиСоставНабора = Заголовок;
				Если РазделВиден("ГиперссылкаПерейтиСоставНабораВнимание", СтруктураВидимости) Тогда 
					Область.Область("ГиперссылкаПерейтиСоставНабораВнимание").Картинка = БиблиотекаКартинок.Внимание16;
				КонецЕсли;
			КонецЕсли;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиСоставНабора";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ИспользованиеХарактеристик", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "ИспользованиеХарактеристик", Объект.ИспользованиеХарактеристик);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиХарактеристикиНоменклатуры", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиХарактеристикиНоменклатурыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиХарактеристикиНоменклатуры", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиХарактеристикиНоменклатуры = Заголовок;
			КонецЕсли;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиХарактеристикиНоменклатуры";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;

		
		Если РазделВиден("НастройкаИспользованияСерий", СтруктураВидимости) Тогда
			НастройкаИспользованияСерий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "НастройкаИспользованияСерий");
			Если Не ЗначениеЗаполнено(НастройкаИспользованияСерий) Тогда
				НастройкаИспользованияСерийСтрока = НСтр("ru='Не используются';uk='Не використовуються'");
			Иначе
				НастройкаИспользованияСерийСтрока = Строка(НастройкаИспользованияСерий);
			КонецЕсли;
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "НастройкаИспользованияСерий", НастройкаИспользованияСерийСтрока);
		КонецЕсли;
		
		Если РазделВиден("ВариантОформленияПродажи", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "ВариантОформленияПродажи", Объект.ВариантОформленияПродажи);
		КонецЕсли;
		
		Если РазделВиден("СтавкаНДС", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "СтавкаНДС", Объект.СтавкаНДС);
		КонецЕсли;
				
		Если РазделВиден("Качество", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "Качество", Объект.Качество);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиТоварыДругогоКачества", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиТоварыДругогоКачестваСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиТоварыДругогоКачества", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиТоварыДругогоКачества = Заголовок;
			КонецЕсли;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиТоварыДругогоКачества";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область ЕдиницыИзмеренияИОбластьХранения
	
	Если ГлаваВидна("ЕдиницыИзмеренияИОбластьХранения", СтруктураВидимости) Тогда 
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЕдиницыИзмеренияИОбластьХраненияЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если РазделВиден("ИспользоватьУпаковки", СтруктураВидимости) Тогда 
			Если Объект.ИспользоватьУпаковки Тогда
				Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
					Набор = НСтр("ru='Индивидуальный набор';uk='Індивідуальний набір'");
				Иначе
					Набор = Объект.НаборУпаковок;
				КонецЕсли;
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "ИспользоватьУпаковки", Набор);
			Иначе
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "ИспользоватьУпаковки", НСтр("ru='не используются';uk='не використовуються'"));
			КонецЕсли;
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиУпаковкиНоменклатуры", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиУпаковкиНоменклатурыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиУпаковкиНоменклатуры", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиУпаковкиНоменклатуры = Заголовок;
				Если РазделВиден("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание", СтруктураВидимости) Тогда 
					Область.Область("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание").Картинка = БиблиотекаКартинок.Внимание16;
				КонецЕсли;
			КонецЕсли;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиУпаковкиНоменклатуры";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиУпаковкиНабора", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиУпаковкиНабораСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиУпаковкиНабора", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиУпаковкиНабора = Заголовок;
				Если РазделВиден("ГиперссылкаПерейтиУпаковкиНабораВнимание", СтруктураВидимости) Тогда 
					Область.Область("ГиперссылкаПерейтиУпаковкиНабораВнимание").Картинка = БиблиотекаКартинок.Внимание16;
				КонецЕсли;
			КонецЕсли;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиУпаковкиНабора";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПрогнозыРасходаУпаковок", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиПрогнозыРасходаУпаковокСтрока");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПрогнозыРасходаУпаковок";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ЕдиницаИзмерения", СтруктураВидимости) Тогда
			
			
			СтрокаЗаполнения = НСтр("ru='%ЕдиницаИзмерения%%Тара%';uk='%ЕдиницаИзмерения%%Тара%'");
			Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
			Иначе
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", НСтр("ru='<не указана>';uk='<не зазначена>'"));
			КонецЕсли;
			
			Если Объект.ПоставляетсяВМногооборотнойТаре Тогда 
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Тара%", НСтр("ru=', поставляется в таре';uk=', поставляється у тарі'"));
			Иначе
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Тара%", "");
			КонецЕсли;
			
			СтруктураЗаголовков.Свойство("ЕдиницаИзмерения", Заголовок);
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "ЕдиницаИзмерения", СтрокаЗаполнения, Заголовок);
			
		КонецЕсли;
		
		Если РазделВиден("НоменклатураМногооборотнаяТара", СтруктураВидимости) Тогда
			
			СтрокаЗаполнения = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				Объект.НоменклатураМногооборотнаяТара,
				Объект.ХарактеристикаМногооборотнаяТара);				
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "НоменклатураМногооборотнаяТара", СтрокаЗаполнения);
			
		КонецЕсли;
		
		Если РазделВиден("ЕдиницаДляОтчетов", СтруктураВидимости) Тогда
			
			СтрокаЗаполнения = НСтр("ru='<не указана>';uk='<не зазначена>'");
			
			Если ЗначениеЗаполнено(Объект.ЕдиницаДляОтчетов) Тогда
				Если Объект.ЕдиницаДляОтчетов <> Объект.ЕдиницаИзмерения Тогда
					СтрокаЗаполнения = НСтр("ru='%ЕдиницаДляОтчетов%, содержит %Количество% %ЕдиницаИзмерения%';uk='%ЕдиницаДляОтчетов%, містить %Количество% %ЕдиницаИзмерения%'");
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество%", Объект.КоэффициентЕдиницыДляОтчетов);
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = НСтр("ru='%ЕдиницаДляОтчетов%';uk='%ЕдиницаДляОтчетов%'");
				КонецЕсли;
				
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаДляОтчетов%", Объект.ЕдиницаДляОтчетов);
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "ЕдиницаДляОтчетов", СтрокаЗаполнения);
			
		КонецЕсли;
		
		Если РазделВиден("Вес", СтруктураВидимости) Тогда
			
			Если Объект.ВесИспользовать Тогда
				СтрокаЗаполнения = НСтр("ru='%Количество1% %ЕдиницаИзмерения% весит %Количество2% %Единица%, %МожноУказыватьВДокументах%';uk='%Количество1% %ЕдиницаИзмерения% важить %Количество2% %Единица%, %МожноУказыватьВДокументах%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество1%", Объект.ВесЗнаменатель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество2%", Объект.ВесЧислитель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Единица%", Объект.ВесЕдиницаИзмерения);				
				Если Объект.ВесМожноУказыватьВДокументах Тогда
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='можно указывать количество в %ЕдиницаИзмерения% в документах';uk='можна вказувати кількість у %ЕдиницаИзмерения% в документах'"));
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ВесЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='указан справочно';uk='зазначено довідково'"));
				КонецЕсли;
			Иначе
				СтрокаЗаполнения = НСтр("ru='<не измеряется>';uk='<не вимірюється>'");
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "Вес", СтрокаЗаполнения);
			
		КонецЕсли;

		
		Если РазделВиден("Объем", СтруктураВидимости) Тогда
			
			Если Объект.ОбъемИспользовать Тогда
				СтрокаЗаполнения = НСтр("ru='%Количество1% %ЕдиницаИзмерения% занимает объем %Количество2% %Единица%, %МожноУказыватьВДокументах%';uk='%Количество1% %ЕдиницаИзмерения% займає об''єм %Количество2% %Единица%, %МожноУказыватьВДокументах%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество1%", Объект.ОбъемЗнаменатель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество2%", Объект.ОбъемЧислитель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Единица%", Объект.ОбъемЕдиницаИзмерения);				
				Если Объект.ОбъемМожноУказыватьВДокументах Тогда
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='можно указывать количество в %ЕдиницаИзмерения% в документах';uk='можна вказувати кількість у %ЕдиницаИзмерения% в документах'"));
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ОбъемЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='указан справочно';uk='зазначено довідково'"));
				КонецЕсли;
			Иначе
				СтрокаЗаполнения = НСтр("ru='<не измеряется>';uk='<не вимірюється>'");
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "Объем", СтрокаЗаполнения);
			
		КонецЕсли;

		
		Если РазделВиден("Длина", СтруктураВидимости) Тогда
			
			Если Объект.ДлинаИспользовать Тогда
				СтрокаЗаполнения = НСтр("ru='%Количество1% %ЕдиницаИзмерения% имеет длину %Количество2% %Единица%, %МожноУказыватьВДокументах%';uk='%Количество1% %ЕдиницаИзмерения% має довжину %Количество2% %Единица%, %МожноУказыватьВДокументах%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество1%", Объект.ДлинаЗнаменатель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество2%", Объект.ДлинаЧислитель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Единица%", Объект.ДлинаЕдиницаИзмерения);				
				Если Объект.ДлинаМожноУказыватьВДокументах Тогда
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='можно указывать количество в %ЕдиницаИзмерения% в документах';uk='можна вказувати кількість у %ЕдиницаИзмерения% в документах'"));
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ДлинаЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='указана справочно';uk='зазначено довідково '"));
				КонецЕсли;
			Иначе
				СтрокаЗаполнения = НСтр("ru='<не измеряется>';uk='<не вимірюється>'");
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "Длина", СтрокаЗаполнения);
			
		КонецЕсли;

		
		Если РазделВиден("Площадь", СтруктураВидимости) Тогда
			
			Если Объект.ПлощадьИспользовать Тогда
				СтрокаЗаполнения = НСтр("ru='%Количество1% %ЕдиницаИзмерения% имеет площадь %Количество2% %Единица%, %МожноУказыватьВДокументах%';uk='%Количество1% %ЕдиницаИзмерения% має площу %Количество2% %Единица%, %МожноУказыватьВДокументах%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество1%", Объект.ПлощадьЗнаменатель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество2%", Объект.ПлощадьЧислитель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Единица%", Объект.ПлощадьЕдиницаИзмерения);				
				Если Объект.ПлощадьМожноУказыватьВДокументах Тогда
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='можно указывать количество в %ЕдиницаИзмерения% в документах';uk='можна вказувати кількість у %ЕдиницаИзмерения% в документах'"));
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ПлощадьЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='указана справочно';uk='зазначено довідково '"));
				КонецЕсли;
			Иначе
				СтрокаЗаполнения = НСтр("ru='<не измеряется>';uk='<не вимірюється>'");
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "Площадь", СтрокаЗаполнения);
			
		КонецЕсли;
		
		Если РазделВиден("СкладскаяГруппа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "СкладскаяГруппа", Объект.СкладскаяГруппа);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиРазмещениеНоменклатуры", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиРазмещениеНоменклатурыСтрока");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиРазмещениеНоменклатуры";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("СрокГодности", СтруктураВидимости) Тогда
			СтрокаЗаполнения = НСтр("ru='%СрокГодности% %ЕдиницаИзмеренияСрокаГодности%';uk='%СрокГодности% %ЕдиницаИзмеренияСрокаГодности%'");
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%СрокГодности%", Объект.СрокГодности);
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмеренияСрокаГодности%", Объект.ЕдиницаИзмеренияСрокаГодности);
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "СрокГодности", СтрокаЗаполнения);
		КонецЕсли;	
		
	КонецЕсли;	
	
	#КонецОбласти
		
	#Область ФинансовыйУчет
	
	Если ГлаваВидна("ФинансовыйУчет", СтруктураВидимости) Тогда 
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ФинансовыйУчетЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
				 		
		Если РазделВиден("ГруппаАналитическогоУчета", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "ГруппаАналитическогоУчета", Объект.ГруппаАналитическогоУчета);	 
		КонецЕсли;
		
		Если РазделВиден("ГруппаФинансовогоУчета", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "ГруппаФинансовогоУчета", Объект.ГруппаФинансовогоУчета);	 
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельностиСтрока");
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
			
	КонецЕсли;
	
	#КонецОбласти
	
	НоменклатураЛокализация.ВывестиГлавы(ТабличныйДокументПраво, Объект, НастройкиВидимостиИЗаголовков, ДляПечати);
	
	ТабличныйДокументКолонки.Присоединить(ТабличныйДокументПраво);
	
	#КонецОбласти
	
	ТабличныйДокументКарточка.Вывести(ТабличныйДокументКолонки);
	
	Возврат ТабличныйДокументКарточка;
	
КонецФункции

Функция ТекстЗначенияНеЗаполнен(ИмяРаздела)

	Если ИмяРаздела = "Наименование" Тогда
		Возврат НСтр("ru='<не указано>';uk='<не зазначено>'");	
	ИначеЕсли ИмяРаздела = "НаименованиеПолное" Тогда
		Возврат НСтр("ru='<не указано>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "Артикул" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "Код" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "Описание" Тогда
		Возврат НСтр("ru='<не указано>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "ФайлОписанияДляСайта" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "ДополнительныеРеквизиты" Тогда
		Возврат НСтр("ru='<значение не задано>';uk='<значення не задано>'");
	ИначеЕсли ИмяРаздела = "Производитель" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "Марка" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "Контрагент" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "Принципал" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "ТоварнаяКатегория" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "КоллекцияНоменклатуры" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "СезоннаяГруппа" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "РейтингПродаж" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "СпособОбеспеченияПотребностей" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "СхемаОбеспечения" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "ЦеноваяГруппа" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "Родитель" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "ГруппаДоступа" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "СкладскаяГруппа" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "ГруппаАналитическогоУчета" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "ГруппаФинансовогоУчета" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	Иначе
		Возврат НоменклатураЛокализация.ТекстЗначенияНеЗаполнен(ИмяРаздела);
	КонецЕсли;
	
КонецФункции

Процедура ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокумент, Макет, ДляПечати, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита = Неопределено, НовоеИмяРаздела = Неопределено) Экспорт
	
	ОбластьСтрока = Макет.ПолучитьОбласть(ИмяРаздела + "Строка");
		
	Если ТекстЗаголовкаРеквизита <> Неопределено Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела + "Реквизит"] = Строка(ТекстЗаголовкаРеквизита) + ":";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗначенияРеквизита) Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияРеквизита;
	Иначе
		ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияНеЗаполнен(ИмяРаздела);
	КонецЕсли;
	
	Если Не ДляПечати Тогда
		Если НовоеИмяРаздела = Неопределено Тогда 
			ОбластьСтрока.Параметры.Расшифровка = ИмяРаздела;
		Иначе
			ОбластьСтрока.Параметры.Расшифровка = НовоеИмяРаздела;
		КонецЕсли;
	КонецЕсли;	
	
	ТабличныйДокумент.Вывести(ОбластьСтрока);
	
	КоличествоДополнительныхСтрок = 0;
	
	КоличествоДополнительныхСтрок = КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита);
	
	Счетчик = КоличествоДополнительныхСтрок;
	
	ОбластьДопСтрока = Макет.ПолучитьОбласть(ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела));
	
	Пока Счетчик > 0 Цикл
		Счетчик = Счетчик - 1;
		ТабличныйДокумент.Вывести(ОбластьДопСтрока);
	КонецЦикла;
	
	ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяРаздела + "Строка", КоличествоДополнительныхСтрок);
	                                                                                                           		
КонецПроцедуры

Процедура ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяОбласти, КоличествоДопСтрок)
	
	Если КоличествоДопСтрок = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Область = ТабличныйДокумент.Область(ИмяОбласти);
	Область.Разъединить();
	Область.Имя = Неопределено;
	АдресОбласти = Область.Имя;
	СтруктураАдреса = СтруктураАдреса(АдресОбласти);
	
	АдресКолонкиЗаголовкаНачало = СтруктураАдреса.АдресКолонкиНачало + 1; // + 1, т.к. слева колонка-отступ
	АдресКолонкиЗаголовкаКонец = АдресКолонкиЗаголовкаНачало + 7; // +7, т.к. заголовок занимает 8 колонок
	АдресКолонкиЗначенияНачало = АдресКолонкиЗаголовкаКонец + 1;
	
	// В левой колонке карточки разность должна быть равна 20, в правой - 21
	Если СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 20 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец;
	ИначеЕсли СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 21 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец - 1;
	КонецЕсли;
	
	АдресСтрокиНачало = СтруктураАдреса.АдресСтрокиНачало; 
	АдресСтрокиКонец = СтруктураАдреса.АдресСтрокиКонец;
	
	// Для заголовка
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗаголовкаНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗаголовкаКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
	
	// Для значения
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗначенияНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗначенияКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
	
КонецПроцедуры

Функция СтруктураАдреса(Адрес)
	
	МассивАдресОбласти = СтрРазделить(Адрес, ":");
	Если МассивАдресОбласти.Количество() <> 2 Тогда
		// Это значит, что строка состоит из одной колонки, процедура объединения с такими не работает.
		Возврат Неопределено;
	КонецЕсли;
	
	АдресНачало = МассивАдресОбласти[0];
	МассивАдресНачало = СтрРазделить(АдресНачало, "C");
	АдресСтрокиНачало = СтрЗаменить(МассивАдресНачало[0], "R", "");
	АдресКолонкиНачало = МассивАдресНачало[1];
	
	АдресКонец = МассивАдресОбласти[1];
	МассивАдресКонец = СтрРазделить(АдресКонец, "C");
	АдресСтрокиКонец = СтрЗаменить(МассивАдресКонец[0], "R", "");
	АдресКолонкиКонец = МассивАдресКонец[1];

	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("АдресСтрокиНачало", 	Число(АдресСтрокиНачало));
	СтруктураАдреса.Вставить("АдресКолонкиНачало", 	Число(АдресКолонкиНачало));
	СтруктураАдреса.Вставить("АдресСтрокиКонец", 	Число(АдресСтрокиКонец));
	СтруктураАдреса.Вставить("АдресКолонкиКонец", 	Число(АдресКолонкиКонец));
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела)
	                            
	Если ИмяРаздела = "ДополнительныеРеквизиты"
		Или ИмяРаздела = "Описание"
		Или ИмяРаздела = "Производитель"
		Или ИмяРаздела = "Марка"
		Или ИмяРаздела = "Принципал"
		Или ИмяРаздела = "Контрагент"
		Или ИмяРаздела = "ФайлОписанияДляСайта"
		Или ИмяРаздела = "ВестиУчетСертификатовНоменклатуры"
		Или ИмяРаздела = "ТоварнаяКатегория"
		Или ИмяРаздела = "КоллекцияНоменклатуры"
		Или ИмяРаздела = "СезоннаяГруппа"
		Или ИмяРаздела = "РейтингПродаж"
		Или ИмяРаздела = "ГиперссылкаПерейтиСегменты"
		Или ИмяРаздела = "ГиперссылкаПерейтиСовместныеПродажи"
		Или ИмяРаздела = "ОбособленнаяЗакупкаПродажа"
		Или ИмяРаздела = "СпособОбеспеченияПотребностей"
		Или ИмяРаздела = "СхемаОбеспечения"
		Или ИмяРаздела = "ГиперссылкаПерейтиВариантыКомплектации"
		Или ИмяРаздела = "ГиперссылкаПерейтиНастройкаПоддержанияЗапасов"
		Или ИмяРаздела = "ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностей"
		Или ИмяРаздела = "ГиперссылкаПерейтиПроизводство" 
		Или ИмяРаздела = "ЦеноваяГруппа"
		Или ИмяРаздела = "ГиперссылкаПерейтиПрайсЛистКомпании"
		Или ИмяРаздела = "ГиперссылкаПерейтиПрайсЛистыПоставщиков"
		Или ИмяРаздела = "ШаблонЭтикетки"
		Или ИмяРаздела = "ШаблонЦенника"
		Или ИмяРаздела = "ГруппаАналитическогоУчета"
		Или ИмяРаздела = "ГруппаФинансовогоУчета" Тогда
		Возврат "ДопСтрокаЛево";
	Иначе
		Возврат "ДопСтрокаПраво";
	КонецЕсли;
	
КонецФункции

Функция КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗаполненияЗначения, ТекстЗаполненияРеквизита)
	
	ШиринаКолонки = 2.38;
	КоличествоКолонокВЗначенииРеквизита = 12;
	ШиринаЗначенияРеквизита = КоличествоКолонокВЗначенииРеквизита * ШиринаКолонки;
	ЧислоСтрокЗначения = КоличествоСтрок(ШиринаЗначенияРеквизита, ТекстЗаполненияЗначения);
		
	ЧислоСтрокСвойства = 0;
	Если ЗначениеЗаполнено(ТекстЗаполненияРеквизита) Тогда
		КоличествоКолонокВЗаголовкеРеквизита = 8;
		ШиринаЗаголовкаРеквизита = ШиринаКолонки * КоличествоКолонокВЗаголовкеРеквизита;
		ЧислоСтрокСвойства = КоличествоСтрок(ШиринаЗаголовкаРеквизита, ТекстЗаполненияРеквизита);
	КонецЕсли;
	
	ЧислоСтрок = Макс(ЧислоСтрокЗначения, ЧислоСтрокСвойства);
	
	Если ЧислоСтрок = 0 Тогда 
		Возврат 0;
	КонецЕсли;
	
	Возврат ЧислоСтрок - 1;	
	
КонецФункции

Функция КоличествоСтрок(ШиринаОбласти, Строка)
	
	 Если Не ЗначениеЗаполнено(Строка) Тогда 
		Возврат 0;
	КонецЕсли;
	
	СредняяШиринаСимвола = 0.75;
	
	МассивСлов = СтрРазделить(Строка, " ");
		
	КоличествоСтрок = 1; // = 1, т.к. проверку на заполненность мы сделали выше, а значит одна строка нужна точно
	ТекущаяСтрока = "";
	
	Для Каждого Слово Из МассивСлов Цикл
		
		ТекущаяСтрока = ТекущаяСтрока + Слово + " ";
		Если СтрДлина(ТекущаяСтрока) * СредняяШиринаСимвола > ШиринаОбласти Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
			ТекущаяСтрока = Слово + " ";
		КонецЕсли;
		
	КонецЦикла;	 
	 	 
	Возврат КоличествоСтрок;
	
КонецФункции

Функция КартинкаФлагаПоЗначению(ЗначениеФлага) Экспорт
	
	Если ЗначениеФлага Тогда
		Возврат БиблиотекаКартинок.ФлагУстановлен;
	Иначе
		Возврат БиблиотекаКартинок.ФлагНеУстановлен;
	КонецЕсли;
	
КонецФункции

Функция РазделВиден(ИмяРаздела, СтруктураВидимости) Экспорт
	
	Видимость = Истина;
	Если СтруктураВидимости.Свойство(ИмяРаздела) Тогда 
		Видимость = СтруктураВидимости[ИмяРаздела];	
	КонецЕсли;
	
	Возврат Видимость;
	
КонецФункции

Функция ГлаваВидна(ИмяГлавы, СтруктураВидимости, КоличествоДопРеквизитов = 0)
	
	Если ИмяГлавы = "Описание" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "ДополнительныеРеквизиты" Тогда
		Возврат КоличествоДопРеквизитов > 0 И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");		
	КонецЕсли;
	
	Если ИмяГлавы = "СведенияОПроизводителе" Тогда
		Возврат РазделВиден("Производитель", СтруктураВидимости) 
					Или РазделВиден("Марка", СтруктураВидимости) 
					Или РазделВиден("Принципал", СтруктураВидимости)
					Или РазделВиден("Контрагент", СтруктураВидимости)		
					Или РазделВиден("ГиперссылкаПерейтиСоглашения", СтруктураВидимости);		
	КонецЕсли;
				
	Если ИмяГлавы = "ПланированиеИМаркетинг" Тогда
		Возврат РазделВиден("ТоварнаяКатегория", СтруктураВидимости)
					Или РазделВиден("КоллекцияНоменклатуры", СтруктураВидимости)
					Или РазделВиден("СезоннаяГруппа", СтруктураВидимости)
					Или РазделВиден("РейтингПродаж", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиСегменты", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиСовместныеПродажи", СтруктураВидимости);
	КонецЕсли;
				
	Если ИмяГлавы = "ОбеспечениеИПроизводство" Тогда
		Возврат РазделВиден("ОбособленнаяЗакупкаПродажаСтрока", СтруктураВидимости)
					Или РазделВиден("СпособОбеспеченияПотребностейСтрока", СтруктураВидимости)
					Или РазделВиден("СхемаОбеспеченияСтрока", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиВариантыКомплектацииСтрока", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиНастройкаПоддержанияЗапасовСтрока", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностейСтрока", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиПроизводствоСтрока", СтруктураВидимости);
	КонецЕсли;
				
	Если ИмяГлавы = "Цены" Тогда
		Возврат РазделВиден("ЦеноваяГруппа", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиПрайсЛистКомпании", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиПрайсЛистыПоставщиков", СтруктураВидимости);
	КонецЕсли;
				
	Если ИмяГлавы = "ПечатьЭтикетокИЦенников" Тогда
		Возврат РазделВиден("ШаблонЭтикетки", СтруктураВидимости)
				Или РазделВиден("ШаблонЦенника", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "ОсновныеПараметрыУчета" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "ЕдиницыИзмеренияИОбластьХранения" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "ФинансовыйУчет" Тогда
		Возврат РазделВиден("ГруппаАналитическогоУчета", СтруктураВидимости)
					Или РазделВиден("ГруппаФинансовогоУчета", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности", СтруктураВидимости);
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

Функция ПравоДоступаНаОбъектМетаданныхПоРеквизиту(Право, РеквизитОбъектМетаданных) Экспорт

	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивтиповДляПроверки = РеквизитОбъектМетаданных.Тип.Типы();
	Для Каждого Тип Из МассивтиповДляПроверки Цикл
		
		Если ОбщегоНазначенияУТ.ЭтоПримитивныйТип(Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено
			И Не ПравоДоступа(Право, ОбъектМетаданных) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ВидимостьРеквизита(Реквизит, ИмяРеквизита, РежимВидимостиПоказатьТолькоВажные, СтрокаНастройки) Экспорт
	
	Если Не ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Возврат ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Реквизит)
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или СтрокаНастройки.ОтображатьПриСоздании)
	Иначе
		Возврат ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизита])
				И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизита])
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или СтрокаНастройки.ОтображатьПриСоздании)
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПодменюСоздатьНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

#КонецОбласти

#Область ПодменюОтчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КомандаОтчет = Отчеты.ОстаткиИДоступностьТоваров.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Важное";
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ТоварыВЯчейках.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Важное";
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ABCXYZАнализНоменклатуры.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ВедомостьПоТоварамОрганизаций.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 2;
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ВедомостьПоТоварамНаСкладах.ДобавитьКомандуДвиженияТовара(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 3;
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ТоварыВЯчейках.ДобавитьКомандуОтчетаДвиженияТовара(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 4;
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ВедомостьПоСериямНоменклатуры.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 5;
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ТоварыНаСкладахПоСрокамГодности.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ВыручкаИСебестоимостьПродаж.ДобавитьКомандуПродажиПоНоменклатуре(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "СмТакже";
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.СостояниеАссортимента.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "СмТакже";
		КомандаОтчет.РежимЗаписи = "";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьАссортимент";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмыНастройкиРаботыСРеквизитамиВВидеНоменклатуры

// Возвращает имена реквизитов, которые в настоящий момент отключены функциональными опциями.
//
// Возвращаемое значение:
//	Массив из Строка - имена реквизитов.
//
Функция РеквизитыОтключенныеПоФО(ЭтоРеквизитыХарактеристик = Ложь) Экспорт
	
	РеквизитыОтключенныеПоФО = Новый Массив;
	ИспользоватьПродажуАгентскихУслуг  = ПолучитьФункциональнуюОпцию("ИспользоватьПродажуАгентскихУслуг");
	ИспользоватьПартнеровИКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	
	Если Не ИспользоватьПродажуАгентскихУслуг Тогда
		РеквизитыОтключенныеПоФО.Добавить("Принципал");
		РеквизитыОтключенныеПоФО.Добавить("Контрагент");
	ИначеЕсли Не ИспользоватьПартнеровИКонтрагентов Тогда
		РеквизитыОтключенныеПоФО.Добавить("Контрагент");
	КонецЕсли;
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Возврат РеквизитыОтключенныеПоФО;
	КонецЕсли;
	
	ВыводитьКачество							= ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров");
	ИспользоватьАдресноеХранение				= ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение", Новый Структура);
	ВыводитьЦеновуюГруппу						= ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ВыводитьГруппуФинУчета						= ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	ВыводитьАссортимент							= ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории");
	ВыводитьМногооборотнуюТару					= ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	ИспользоватьХарактеристики					= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьЕдиницыДляОтчетов				= ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов");
	ИспользоватьСезонныеКоэффициенты 			= ПолучитьФункциональнуюОпцию("ИспользоватьСезонныеКоэффициенты");
	ИспользоватьУправлениеКоллекциями 			= ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеКоллекциями");
	ИспользоватьРейтингиПродажНоменклатуры		= ПолучитьФункциональнуюОпцию("ИспользоватьРейтингиПродажНоменклатуры");
	ИспользоватьОбособленноеОбеспечениеЗаказов 	= ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	ИспользоватьСертификатыНоменклатуры			= ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	ИспользоватьСпособыОбеспечения 		        = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	ИспользоватьУпаковкиНоменклатуры 			= ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьГруппыАналитическогоУчетаНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыАналитическогоУчетаНоменклатуры");
	ИспользоватьГруппыДоступаНоменклатуры 		= ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры");
	ИспользоватьУчетНДС							= ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС");
	
	Если Не ВыводитьКачество Тогда
		РеквизитыОтключенныеПоФО.Добавить("Качество");
	КонецЕсли;
	
	Если Не ИспользоватьАдресноеХранение Тогда
		РеквизитыОтключенныеПоФО.Добавить("СкладскаяГруппа");
	КонецЕсли;
	
	Если Не ВыводитьЦеновуюГруппу Тогда
		РеквизитыОтключенныеПоФО.Добавить("ЦеноваяГруппа");
	КонецЕсли;
	
	Если Не ВыводитьГруппуФинУчета Тогда
		РеквизитыОтключенныеПоФО.Добавить("ГруппаФинансовогоУчета");
	КонецЕсли;
	
	Если Не ИспользоватьГруппыАналитическогоУчетаНоменклатуры Тогда
		РеквизитыОтключенныеПоФО.Добавить("ГруппаАналитическогоУчета");
	КонецЕсли;
	
	Если Не ВыводитьАссортимент Тогда
		РеквизитыОтключенныеПоФО.Добавить("ТоварнаяКатегория");
		РеквизитыОтключенныеПоФО.Добавить("Марка");
	КонецЕсли;
	
	Если Не ВыводитьМногооборотнуюТару Тогда
		РеквизитыОтключенныеПоФО.Добавить("ПоставляетсяВМногооборотнойТаре");
		РеквизитыОтключенныеПоФО.Добавить("НоменклатураМногооборотнаяТара");
		РеквизитыОтключенныеПоФО.Добавить("ХарактеристикаМногооборотнаяТара");
	ИначеЕсли Не ИспользоватьХарактеристики Тогда 	
		РеквизитыОтключенныеПоФО.Добавить("ХарактеристикаМногооборотнаяТара");
	КонецЕсли;
	
	Если Не ИспользоватьХарактеристики Тогда
		РеквизитыОтключенныеПоФО.Добавить("ИспользованиеХарактеристик");
	КонецЕсли;
	
	Если Не ИспользоватьЕдиницыДляОтчетов Тогда
		РеквизитыОтключенныеПоФО.Добавить("ЕдиницаДляОтчетов");
	КонецЕсли;
	
	Если Не ИспользоватьСезонныеКоэффициенты Тогда
		РеквизитыОтключенныеПоФО.Добавить("СезоннаяГруппа");
	КонецЕсли;
	
	Если Не ИспользоватьУправлениеКоллекциями Тогда
		РеквизитыОтключенныеПоФО.Добавить("КоллекцияНоменклатуры");
	КонецЕсли;
	
	Если Не ИспользоватьРейтингиПродажНоменклатуры Тогда
		РеквизитыОтключенныеПоФО.Добавить("РейтингПродаж");
	КонецЕсли;
	
	Если Не ИспользоватьОбособленноеОбеспечениеЗаказов Тогда
		РеквизитыОтключенныеПоФО.Добавить("ОбособленнаяЗакупкаПродажа");
	КонецЕсли;
	
	Если Не ИспользоватьСертификатыНоменклатуры Тогда
		РеквизитыОтключенныеПоФО.Добавить("ВестиУчетСертификатовНоменклатуры");
	КонецЕсли;
	
	Если Не ИспользоватьСпособыОбеспечения Тогда
		РеквизитыОтключенныеПоФО.Добавить("СхемаОбеспечения");
		РеквизитыОтключенныеПоФО.Добавить("СпособОбеспеченияПотребностей");
	КонецЕсли;
	
	Если Не ИспользоватьУпаковкиНоменклатуры Тогда
		РеквизитыОтключенныеПоФО.Добавить("ИспользоватьУпаковки");
	КонецЕсли;
	
	Если Не ИспользоватьГруппыДоступаНоменклатуры Тогда
		РеквизитыОтключенныеПоФО.Добавить("ГруппаДоступа");
	КонецЕсли;
	
	Если Не ИспользоватьУчетНДС Тогда
		РеквизитыОтключенныеПоФО.Добавить("СтавкаНДС");
	КонецЕсли;
	
	НоменклатураЛокализация.РеквизитыОтключенныеПоФО(РеквизитыОтключенныеПоФО);
	
	Возврат РеквизитыОтключенныеПоФО;
	
КонецФункции

// Возвращает имена реквизитов, которые всегда отображаются при создании новой номенклатуры.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов.
//
Функция ОбязательноОтображаемыеПриСозданииРеквизиты(ТипНоменклатуры, ОсобенностьУчета)
	
	ОбязательноОтображаемыеПриСозданииРеквизиты = Новый Массив;
	
	ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("НаименованиеПолное");
	ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("СтавкаНДС");
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		И ОсобенностьУчета <> Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбязательноОтображаемыеПриСозданииРеквизиты, РеквизитыАгентскихУслуг());
		
	КонецЕсли;
	
	НоменклатураЛокализация.ОбязательноОтображаемыеПриСозданииРеквизиты(ОбязательноОтображаемыеПриСозданииРеквизиты,
																		 ТипНоменклатуры,
																		 ОсобенностьУчета);
	
	Возврат ОбязательноОтображаемыеПриСозданииРеквизиты;
	
КонецФункции

// Возвращает имена реквизитов, которые не отображаются в таблице настроек.
//
// Возвращаемое значение:
//	Массив из Строка - имена реквизитов.
//
Функция НеотображаемыеВТаблицеНастроекРеквизиты() Экспорт
	
	НеотображаемыеВТаблицеНастроекРеквизиты = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеотображаемыеВТаблицеНастроекРеквизиты, РеквизитыПризнаковОсобенностейУчета(Метаданные.Справочники.Номенклатура));
	
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("КодДляПоиска");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ИспользоватьИндивидуальныйШаблонЦенника");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ИспользоватьИндивидуальныйШаблонЭтикетки");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ИспользоватьУпаковки");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("НаборУпаковок");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ТипНоменклатуры");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ЕстьТоварыДругогоКачества");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ИспользованиеХарактеристик");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("НоменклатураМногооборотнаяТара");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ХарактеристикаМногооборотнаяТара");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ОсобенностьУчета");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ЕдиницаИзмеренияСрокаГодности");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("КоэффициентЕдиницыДляОтчетов");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ВладелецХарактеристик");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ВладелецСерий");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ВладелецТоварныхКатегорий");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ГруппаДоступа");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ВариантОформленияПродажи");
	
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ВесЕдиницаИзмерения");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ВесЗнаменатель");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ВесМожноУказыватьВДокументах");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ВесЧислитель");
	
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ОбъемЕдиницаИзмерения");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ОбъемЗнаменатель");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ОбъемМожноУказыватьВДокументах");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ОбъемЧислитель");
	
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ДлинаЕдиницаИзмерения");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ДлинаЗнаменатель");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ДлинаМожноУказыватьВДокументах");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ДлинаЧислитель");
	
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ПлощадьЕдиницаИзмерения");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ПлощадьЗнаменатель");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ПлощадьМожноУказыватьВДокументах");
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ПлощадьЧислитель");
	
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("УдалитьСтавкаНДС");
	
	НоменклатураЛокализация.НеотображаемыеВТаблицеНастроекРеквизиты(НеотображаемыеВТаблицеНастроекРеквизиты);
	
	Возврат НеотображаемыеВТаблицеНастроекРеквизиты;
	
КонецФункции

// Возвращает имена реквизитов, которые не используются для контроля уникальности.
//
// Возвращаемое значение:
//	Массив из Строка - имена реквизитов.
//
Функция НеиспользуемыеДляКонтроляУникальностиРеквизиты() Экспорт
	
	НеиспользуемыеДляКонтроляУникальностиРеквизиты = Новый Массив;
	
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("НаименованиеПолное");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("Описание");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ФайлКартинки");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ШаблонЦенника");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ШаблонЭтикетки");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ФайлОписанияДляСайта");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ИспользоватьИндивидуальныйШаблонЦенника");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ИспользоватьИндивидуальныйШаблонЭтикетки");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("СрокГодности");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ОбособленнаяЗакупкаПродажа");
	
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ВесИспользовать");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ОбъемИспользовать");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ПлощадьИспользовать");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ДлинаИспользовать");
	
	НоменклатураЛокализация.НеиспользуемыеДляКонтроляУникальностиРеквизиты(НеиспользуемыеДляКонтроляУникальностиРеквизиты);
	
	Возврат НеиспользуемыеДляКонтроляУникальностиРеквизиты;
	
КонецФункции

// Возвращает типы значений. Реквизиты данных типов не проверяются на заполненность.
//
// Возвращаемое значение:
//	Массив, элементы - ОписаниеТипов.
//
Функция НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы() Экспорт
	
	НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы = Новый Массив;
	
	НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы.Добавить(Новый ОписаниеТипов("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы.Добавить(Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы.Добавить(Новый ОписаниеТипов("ХранилищеЗначения"));
	НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы.Добавить(Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0)));
	
	НоменклатураЛокализация.НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы(НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы);
	
	Возврат НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы;
	
КонецФункции

// Возвращает описание действий с реквизитами номенклатуры в форме номенклатуры в зависимости от типа номенклатуры.
//
// Параметры:
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета номенклатуры.
//	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры, Булево - вариант
//		использования номенклатуры или признак использования характеристик.
//	ИспользоватьСрокГодностиСерии - Булево - признак использования срока годности в сериях номенклатуры.
//	ЭтоРеквизитыХарактеристик - Булево - признак принадлежности реквизитов справочнику ХарактеристикиНоменклатуры.
//  ВестиУчетПоГТД - Булево - признак ведения учета по ГТД 
//  ИзмеряетсяТолькоВСуммовомВыражении - Булево - признак измерения номенклатуры только в суммовом выражении 
//  ПодакцизныйТовар - Булево - признак подакцизного товара 
//
// Возвращаемое значение:
//	ТаблицаЗначений - с колонками:
//		* Реквизит - ОбъектМетаданныхРеквизит - реквизит справочника Номенклатура
//		* ДействиеСРеквизитом - Строка - действие.
//
Функция ЗависимостьРеквизитовОтТипаНоменклатуры(ТипНоменклатуры,
    ОсобенностьУчета,
	ИспользованиеХарактеристик,
	ИспользоватьСрокГодностиСерии,
	ЭтоРеквизитыХарактеристик,
    ВестиУчетПоГТД = Ложь, 
    ИзмеряетсяТолькоВСуммовомВыражении = Ложь, 
    ПодакцизныйТовар = Ложь
) Экспорт
	
	Если ТипЗнч(ИспользованиеХарактеристик) = Тип("ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры") Тогда
		ИспользоватьХарактеристики = ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	Иначе
		ИспользоватьХарактеристики = ИспользованиеХарактеристик;
	КонецЕсли;
	
	ЭтоТовар 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоНабор 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	ЭтоУслуга 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоРабота 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоМногооборотнаяТара 	= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	// Сформировать таблицу реквизитов для заполнения.
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("Использование");
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Реквизиты = Метаданные.Справочники.ХарактеристикиНоменклатуры.Реквизиты;
	Иначе
		Реквизиты = Метаданные.Справочники.Номенклатура.Реквизиты;
	КонецЕсли;
	
	// Реквизиты, которые должны быть в номенклатуре только тогда, когда не используются характеристики.
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.Принципал;
    НоваяСтрока.Использование = Ложь;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.Контрагент;
    НоваяСтрока.Использование = Ложь;
	
	Если ЭтоРеквизитыХарактеристик Тогда
        НоменклатураЛокализация.ЗависимостьРеквизитовОтТипаНоменклатуры(
            ТаблицаРеквизитов,
        	ТипНоменклатуры,
        	ОсобенностьУчета,
        	ИспользованиеХарактеристик,
        	Истина, // ЭтоРеквизитыХарактеристик
            ВестиУчетПоГТД, 
            ИзмеряетсяТолькоВСуммовомВыражении, 
            ПодакцизныйТовар
        );
		ТаблицаРеквизитов.Индексы.Добавить("Реквизит");
		Возврат ТаблицаРеквизитов;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВариантОформленияПродажи;
	НоваяСтрока.Использование = (ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав")
									И ЭтоТовар)
								Или ЭтоРабота
								Или ЭтоУслуга;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.СкладскаяГруппа;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.Качество;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	ЗависимостьРеквизитаМерыОтТипаНоменклатуры(ТаблицаРеквизитов, Реквизиты, ТипНоменклатуры, "Вес");
	ЗависимостьРеквизитаМерыОтТипаНоменклатуры(ТаблицаРеквизитов, Реквизиты, ТипНоменклатуры, "Объем");
	ЗависимостьРеквизитаМерыОтТипаНоменклатуры(ТаблицаРеквизитов, Реквизиты, ТипНоменклатуры, "Площадь");
	ЗависимостьРеквизитаМерыОтТипаНоменклатуры(ТаблицаРеквизитов, Реквизиты, ТипНоменклатуры, "Длина");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ИспользоватьУпаковки;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.НаборУпаковок;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ОбособленнаяЗакупкаПродажа;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоРабота;
		
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ПоставляетсяВМногооборотнойТаре;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.НоменклатураМногооборотнаяТара;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ХарактеристикаМногооборотнаяТара;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ЕдиницаИзмерения;
	НоваяСтрока.Использование = Истина;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.СрокГодности;
	НоваяСтрока.Использование = (ЭтоТовар
									Или ЭтоМногооборотнаяТара)
								И ИспользоватьСрокГодностиСерии;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ЕдиницаИзмеренияСрокаГодности;
	НоваяСтрока.Использование = (ЭтоТовар
									Или ЭтоМногооборотнаяТара)
								И ИспользоватьСрокГодностиСерии;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ГруппаФинансовогоУчета;
	НоваяСтрока.Использование = Не ЭтоНабор;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВестиУчетСертификатовНоменклатуры;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.СхемаОбеспечения;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.СпособОбеспеченияПотребностей;
	НоваяСтрока.Использование = ЭтоРабота;

    НоменклатураЛокализация.ЗависимостьРеквизитовОтТипаНоменклатуры(
        ТаблицаРеквизитов,
    	ТипНоменклатуры,
    	ОсобенностьУчета,
    	ИспользованиеХарактеристик,
    	Ложь, // ЭтоРеквизитыХарактеристик
        ВестиУчетПоГТД, 
        ИзмеряетсяТолькоВСуммовомВыражении, 
        ПодакцизныйТовар
    );
	
	ТаблицаРеквизитов.Индексы.Добавить("Реквизит");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

// Функция - Значение свойств реквизита
// 
// Возвращаемое значение:
//	Структура:
//		* Имя - Строка
//		* Представление - Строка
//		* Тип - ОписаниеТипов
//		* ОбязательныйДляЗаполнения - Булево
//		* ОбязательныйДляОтображенияПриСоздании - Булево
//		* РекомендуемыйДляКонтроляУникальности - Булево
//		* Использование - Булево
//
Функция ЗначениеСвойствРеквизита() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	Результат.Вставить("Тип");
	Результат.Вставить("Использование");
	Результат.Вставить("ОбязательныйДляЗаполнения");
	Результат.Вставить("ОбязательныйДляОтображенияПриСоздании", Ложь);
	Результат.Вставить("РекомендуемыйДляКонтроляУникальности", Ложь);
	
	Возврат Результат;	
КонецФункции

// Для вызова в методе ЗначениеНастроекПовтИсп.ВсеРеквизитыНоменклатуры
// Возвращает свойства реквизитов номенклатуры с учетом настроек сделанных
// в метаданных и доопределенных в модулях менеджера номенклатуры.
//
// Параметры:
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета номенклатуры.
//	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры, Булево - вариант
//		использования номенклатуры или признак использования характеристик.
//	ИспользоватьСрокГодностиСерии - Булево - признак использования срока годности в сериях номенклатуры.
//  ВестиУчетПоГТД - Булево - признак ведения учета по ГТД 
//  ИзмеряетсяТолькоВСуммовомВыражении - Булево - признак измерения номенклатуры только в суммовом выражении 
//  ПодакцизныйТовар - Булево - признак подакцизного товара 
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура - содержит:
//		* Ключ - Строка - имя реквизита
//		* Значение - см. Справочник.Номенклатура.ЗначениеСвойствРеквизита
//
Функция ВсеРеквизиты(ТипНоменклатуры,
    ОсобенностьУчета,
	ИспользованиеХарактеристик,
	ИспользоватьСрокГодностиСерии,
    ВестиУчетПоГТД = Ложь, 
    ИзмеряетсяТолькоВСуммовомВыражении = Ложь, 
    ПодакцизныйТовар = Ложь
    ) Экспорт
                    
	ЭтоТовар = (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ОбязательноОтображаемыеПриСозданииРеквизиты   = ОбязательноОтображаемыеПриСозданииРеквизиты(ТипНоменклатуры,
																								ОсобенностьУчета);
	РекомендуемыеДляКонтроляУникальностиРеквизиты = РекомендуемыеДляКонтроляУникальностиРеквизиты(ТипНоменклатуры, ОсобенностьУчета);
	
    НастройкиРеквизитовПоТипу = ЗависимостьРеквизитовОтТипаНоменклатуры(
        ТипНоменклатуры,
    	ОсобенностьУчета,
    	ИспользованиеХарактеристик,
    	ИспользоватьСрокГодностиСерии,
    	Ложь, // ЭтоРеквизитыХарактеристик
        ВестиУчетПоГТД, 
        ИзмеряетсяТолькоВСуммовомВыражении, 
        ПодакцизныйТовар
    );
	
	РеквизитыОтключенныеПоФО = РеквизитыОтключенныеПоФО();
	РеквизитыСПереопределеннойОбязательностьюЗаполнения = РеквизитыСПереопределеннойОбязательностьюЗаполнения(ТипНоменклатуры, ОсобенностьУчета, Неопределено);
	
	ВсеРеквизиты = Новый Структура;
	
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		ЗначениеСвойств = ЗначениеСвойствРеквизита();
		
		ЗначениеСвойств.Имя = Реквизит.Имя;
		ПредставлениеРеквизита = "";
		
		СтрокаНастройки = НастройкиРеквизитовПоТипу.Найти(Реквизит, "Реквизит");
		
		Если СтрокаНастройки = Неопределено Тогда
			ЗначениеСвойств.Использование = РеквизитыОтключенныеПоФО.Найти(Реквизит.Имя) = Неопределено;
		Иначе
			ЗначениеСвойств.Использование = СтрокаНастройки.Использование
											И РеквизитыОтключенныеПоФО.Найти(Реквизит.Имя) = Неопределено;
		КонецЕсли;
		
		Если Реквизит.Имя = "ЕдиницаИзмерения" Тогда
			Если ЭтоТовар
				Или ЭтоМногооборотнаяТара Тогда
				ПредставлениеРеквизита = НСтр("ru='Единица хранения';uk='Одиниця зберігання'");
			Иначе
				ПредставлениеРеквизита = НСтр("ru='Единица измерения';uk='Одиниця вимірювання'");
			КонецЕсли;
		Иначе
			ПредставлениеРеквизита = Реквизит.Синоним;
			Если Не ЗначениеЗаполнено(ПредставлениеРеквизита) Тогда
				ПредставлениеРеквизита = Реквизит.Имя;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеСвойств.Представление = ПредставлениеРеквизита;
		
		ОбязательныйДляЗаполнения = РеквизитыСПереопределеннойОбязательностьюЗаполнения.Получить(Реквизит.Имя);
		
		Если ОбязательныйДляЗаполнения = Неопределено Тогда 
			ОбязательныйДляЗаполнения = (Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
		КонецЕсли;
		
		ЗначениеСвойств.ОбязательныйДляЗаполнения = ЗначениеСвойств.Использование
													И ОбязательныйДляЗаполнения;
		ЗначениеСвойств.Тип = Реквизит.Тип;
		
		ЗначениеСвойств.ОбязательныйДляОтображенияПриСоздании = ЗначениеСвойств.Использование
																И (ОбязательноОтображаемыеПриСозданииРеквизиты.Найти(Реквизит.Имя) <> Неопределено
																	Или ЗначениеСвойств.ОбязательныйДляЗаполнения);
		ЗначениеСвойств.РекомендуемыйДляКонтроляУникальности = ЗначениеСвойств.Использование
																И РекомендуемыеДляКонтроляУникальностиРеквизиты.Найти(Реквизит.Имя) <> Неопределено;
		
		ВсеРеквизиты.Вставить(Реквизит.Имя, Новый ФиксированнаяСтруктура(ЗначениеСвойств));
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(ВсеРеквизиты);
	
КонецФункции

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
//
Процедура НастроитьФормуПоТаблицеНастроек(Форма) Экспорт
	
	СтруктураПоиска = Новый Структура("Свойство");
	
	Для Каждого СтрокаТаблицыРеквизитов Из Форма.ТаблицаНастроекРеквизитов Цикл
		
		Если СтрокаТаблицыРеквизитов.ЭтоДопРеквизит Тогда
			
			Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска.Свойство = СтрокаТаблицыРеквизитов.Свойство;
			НайденныеСтроки = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяЭлементаФормы = НайденныеСтроки[0].ИмяРеквизитаЗначение;
			
		Иначе
			
			ИмяЭлементаФормы = СтрокаТаблицыРеквизитов.ИмяРеквизита;
			
		КонецЕсли;
		
		Если Форма.Элементы.Найти(ИмяЭлементаФормы) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыРеквизитов.ПутьКДанным = ИмяЭлементаФормы;
		
		Элемент = Форма.Элементы[ИмяЭлементаФормы];
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			Форма.Элементы[ИмяЭлементаФормы].АвтоОтметкаНезаполненного = СтрокаТаблицыРеквизитов.ЗаполнятьОбязательно;
		КонецЕсли;
		
		Если СтрокаТаблицыРеквизитов.Уникален Тогда
			Элемент.ЦветФона = ЦветаСтиля.ЦветФонаВыделения;
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			Элемент.ЦветФона = Новый Цвет;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыСПереопределеннойОбязательностьюЗаполнения(ТипНоменклатуры, ОсобенностьУчета, Объект) Экспорт
	
	РеквизитыСПереопределеннойОбязательностьюЗаполнения = Новый Соответствие;
	
	ЗапрашиваемыеРеквизитыВидаНоменклатуры = "ШаблонРабочегоНаименованияНоменклатуры, ИспользоватьСрокГодностиСерии, 
                                            |ВестиУчетПоГТД, ПодакцизныйТовар, 
											|ИспользованиеХарактеристик";
	
	Если Объект = Неопределено Тогда
		РеквизитыВидаНоменклатуры = ОбщегоНазначенияУТ.ЗначенияРеквизитовОбъектаПоУмолчанию(Справочники.ВидыНоменклатуры.ПустаяСсылка(),
			ЗапрашиваемыеРеквизитыВидаНоменклатуры);
	Иначе
		РеквизитыВидаНоменклатуры = ОбщегоНазначенияУТ.ЗначенияРеквизитовОбъектаПоУмолчанию(Объект.ВидНоменклатуры,
			ЗапрашиваемыеРеквизитыВидаНоменклатуры);
	КонецЕсли;	
	
	Если Объект = Неопределено Тогда
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("Наименование", Истина);
	Иначе
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("Наименование", Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры));
	КонецЕсли;
	
	Если Объект = Неопределено Тогда 
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("ШаблонЦенника", Ложь);
	Иначе
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("ШаблонЦенника", Объект.ИспользоватьИндивидуальныйШаблонЦенника);
	КонецЕсли;
		
	Если Объект = Неопределено Тогда 
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("ШаблонЭтикетки", Ложь);
	Иначе
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("ШаблонЭтикетки", Объект.ИспользоватьИндивидуальныйШаблонЭтикетки);
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("НаборУпаковок", Ложь);
	Иначе
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("НаборУпаковок", Объект.ИспользоватьУпаковки);
	КонецЕсли;
	
	РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("ГруппаДоступа", Справочники.ГруппыДоступаНоменклатуры.ИспользуютсяГруппыДоступа());
	
	РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("ЕдиницаИзмерения", ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
																			Или ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара
																			Или ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
    РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("Принципал", Ложь);
																		
    РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("Контрагент", Ложь);
	
	
	Если Объект = Неопределено Тогда
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("НоменклатураМногооборотнаяТара", Ложь);
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("ХарактеристикаМногооборотнаяТара", Ложь);
	Иначе
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("НоменклатураМногооборотнаяТара", Объект.ПоставляетсяВМногооборотнойТаре);
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("ХарактеристикаМногооборотнаяТара",
																			Объект.ПоставляетсяВМногооборотнойТаре
																			И Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.НоменклатураМногооборотнаяТара));
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("ЕдиницаИзмеренияСрокаГодности", Ложь);
	Иначе
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("ЕдиницаИзмеренияСрокаГодности", РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии);
	КонецЕсли;
	
	ПереопределитьОбязательностьЗаполненияРеквизитовМеры(Объект, РеквизитыСПереопределеннойОбязательностьюЗаполнения, "Вес");
	ПереопределитьОбязательностьЗаполненияРеквизитовМеры(Объект, РеквизитыСПереопределеннойОбязательностьюЗаполнения, "Объем");
	ПереопределитьОбязательностьЗаполненияРеквизитовМеры(Объект, РеквизитыСПереопределеннойОбязательностьюЗаполнения, "Площадь");
	ПереопределитьОбязательностьЗаполненияРеквизитовМеры(Объект, РеквизитыСПереопределеннойОбязательностьюЗаполнения, "Длина");
	
	НоменклатураЛокализация.РеквизитыСПереопределеннойОбязательностьюЗаполнения(РеквизитыСПереопределеннойОбязательностьюЗаполнения, ТипНоменклатуры, ОсобенностьУчета, Объект);
	
	Если Объект <> Неопределено Тогда
		
		ИзменяемыеРеквизиты       = Новый Массив;
        ТаблицаНастроекРеквизитов = ЗависимостьРеквизитовОтТипаНоменклатуры(
            ТипНоменклатуры,
        	ОсобенностьУчета,
        	РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик,
        	РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии,
        	Ложь, // ЭтоРеквизитыХарактеристик
            РеквизитыВидаНоменклатуры.ВестиУчетПоГТД, 
            Ложь, // ИзмеряетсяТолькоВСуммовомВыражении
            РеквизитыВидаНоменклатуры.ПодакцизныйТовар
        );
		
		Для Каждого Реквизит из РеквизитыСПереопределеннойОбязательностьюЗаполнения Цикл
			
			Если Реквизит.Значение Тогда
				Если Реквизит.Ключ = "Наименование" Тогда
					Продолжить;
				КонецЕсли;
				
				МетаданныеРеквизита = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(Реквизит.Ключ);
				НастройкаРеквизита  = ТаблицаНастроекРеквизитов.Найти(МетаданныеРеквизита);
				
				Если ЗначениеЗаполнено(НастройкаРеквизита)
					И Не НастройкаРеквизита.Использование Тогда
					
					ИзменяемыеРеквизиты.Добавить(Реквизит.Ключ);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ИмяРеквизита Из ИзменяемыеРеквизиты Цикл
			РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить(ИмяРеквизита, Ложь);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РеквизитыСПереопределеннойОбязательностьюЗаполнения;
	
КонецФункции

Функция РекомендуемыеДляКонтроляУникальностиРеквизиты(ТипНоменклатуры, ОсобенностьУчета)
	
	РекомендуемыеДляКонтроляУникальностиРеквизиты = Новый Массив;
	
	НоменклатураЛокализация.РекомендуемыеДляКонтроляУникальностиРеквизиты(РекомендуемыеДляКонтроляУникальностиРеквизиты, ТипНоменклатуры, ОсобенностьУчета); 
	
	Возврат РекомендуемыеДляКонтроляУникальностиРеквизиты;
	
КонецФункции

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - содержит в том числе:
// 	* Объект - СправочникОбъект.Номенклатура - 
//
Процедура ПроверитьУникальностьЭлементаПоРеквизитам(Форма) Экспорт
	
	Форма.ТаблицаНайдено.Очистить();
	
	РеквизитыКонтроляУникальности = Форма.ТаблицаНастроекРеквизитов.НайтиСтроки(Новый Структура("Уникален", Истина));
	
	Если РеквизитыКонтроляУникальности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНоменклатура = ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.Номенклатура");
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроверяемыйСправочник.Ссылка КАК Ссылка,
	|	ИСТИНА КАК НайденоПоДопРеквизитам
	|ИЗ
	|	Справочник.ИмяПроверяемогоСправочника КАК ПроверяемыйСправочник
	|  	//ТекстЗапросаСоединенияСТЧДопРеквизитов
	|ГДЕ
	|  	&ТекстЗапросаУсловияПоРеквизитам";
	
	ШаблонУсловияПоРеквизиту = 
	"
	|	ПроверяемыйСправочник.ИмяРеквизита = &ИмяРеквизита";
	
	ШаблонУсловияПоДопРеквизиту =
	"
	|  (УсловиеПоДопРеквизиту_СчетчикУсловий.Значение ЕСТЬ NULL
	|  			И &ЗначениеПустое_СчетчикУсловий
	|  	ИЛИ УсловиеПоДопРеквизиту_СчетчикУсловий.Свойство = &Свойство_СчетчикУсловий
	|  			И УсловиеПоДопРеквизиту_СчетчикУсловий.Значение = &Значение_СчетчикУсловий)";

	ШаблонТекстаСоединения =
	"
	| ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИмяПроверяемогоСправочника.ДополнительныеРеквизиты КАК УсловиеПоДопРеквизиту_СчетчикУсловий
	| ПО ПроверяемыйСправочник.Ссылка = УсловиеПоДопРеквизиту_СчетчикУсловий.Ссылка
	| 		И УсловиеПоДопРеквизиту_СчетчикУсловий.Свойство = &Свойство_СчетчикУсловий";
	
	СчетчикУсловий   = 1;
	ТекстыУсловий    = Новый Массив;
	
	Если ЭтоНоменклатура Тогда
		ТекстУсловия =
		"
		|	НЕ ПроверяемыйСправочник.ЭтоГруппа
		|	И ПроверяемыйСправочник.ВидНоменклатуры В(&ВидыНоменклатуры)";
		ТекстыУсловий.Добавить(ТекстУсловия);
		
		Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатурыИдентичныеПоНастройкамКонтроляУникальности(Форма.Объект));
	Иначе
		ТекстУсловия =
		"
		|	ПроверяемыйСправочник.Владелец = &Владелец";
		ТекстыУсловий.Добавить(ТекстУсловия);
		
		Запрос.УстановитьПараметр("Владелец", Форма.Объект.Владелец);
	КонецЕсли;	

	
	ТекстыСоединения = Новый Массив;
	
	Для Каждого СтрокаУсловия Из РеквизитыКонтроляУникальности Цикл
		
		Если Не СтрокаУсловия.ЭтоДопРеквизит Тогда
			
			ТекстУсловия = СтрЗаменить(ШаблонУсловияПоРеквизиту, "ИмяРеквизита", СтрокаУсловия.ИмяРеквизита);
			ТекстыУсловий.Добавить(ТекстУсловия);
			
			Запрос.УстановитьПараметр(СтрокаУсловия.ИмяРеквизита, Форма.Объект[СтрокаУсловия.ПутьКДанным]);
			
		Иначе
			ТекстУсловия = СтрЗаменить(ШаблонУсловияПоДопРеквизиту, "СчетчикУсловий", Формат(СчетчикУсловий,"ЧГ="));
			ТекстыУсловий.Добавить(ТекстУсловия);
			
			Запрос.УстановитьПараметр("Свойство_" + СчетчикУсловий, СтрокаУсловия.Свойство);
			Запрос.УстановитьПараметр("Значение_" + СчетчикУсловий, Форма[СтрокаУсловия.ПутьКДанным]);
			Запрос.УстановитьПараметр("ЗначениеПустое_" + СчетчикУсловий, ?(ТипЗнч(Форма[СтрокаУсловия.ПутьКДанным]) = Тип("Булево")
																				И Не Форма[СтрокаУсловия.ПутьКДанным],
																			Истина,
																			Не ЗначениеЗаполнено(Форма[СтрокаУсловия.ПутьКДанным])));
			
			ТекстСоединения = СтрЗаменить(ШаблонТекстаСоединения, "СчетчикУсловий", Формат(СчетчикУсловий,"ЧГ="));
			ТекстыСоединения.Добавить(ТекстСоединения);
			СчетчикУсловий = СчетчикУсловий + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаСоединенияСТЧДопРеквизитов", СтрСоединить(ТекстыСоединения));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаУсловияПоРеквизитам", СтрСоединить(ТекстыУсловий, Символы.ПС + "И" + Символы.НПП));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПроверяемогоСправочника", ?(ЭтоНоменклатура, "Номенклатура", "ХарактеристикиНоменклатуры"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Форма.ТаблицаНайдено.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Функция ВидыНоменклатурыИдентичныеПоНастройкамКонтроляУникальности(Объект)
	
	ИдентичныеВидыНоменклатуры = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеквизитыДляКонтроля.ИмяРеквизита,
	|	РеквизитыДляКонтроля.ЭтоДопРеквизит,
	|	РеквизитыДляКонтроля.Свойство
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроля
	|ГДЕ
	|	РеквизитыДляКонтроля.Уникален
	|	И РеквизитыДляКонтроля.Ссылка = &ВидНоменклатуры
	|	И НЕ (НЕ РеквизитыДляКонтроля.ЭтоДопРеквизит
	|		И РеквизитыДляКонтроля.ИмяРеквизита = &ИмяВидаНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыДляКонтроля.Ссылка КАК ВидНоменклатуры,
	|	РеквизитыДляКонтроля.ИмяРеквизита КАК ИмяРеквизита,
	|	РеквизитыДляКонтроля.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	РеквизитыДляКонтроля.Свойство КАК Свойство
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроля
	|ГДЕ
	|	РеквизитыДляКонтроля.Уникален
	|	И РеквизитыДляКонтроля.Ссылка.ТипНоменклатуры = &ТипНоменклатуры
	|	И НЕ (НЕ РеквизитыДляКонтроля.ЭтоДопРеквизит
	|		И РеквизитыДляКонтроля.ИмяРеквизита = &ИмяВидаНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидНоменклатуры,
	|	ИмяРеквизита,
	|	ЭтоДопРеквизит,
	|	Свойство
	|
	|ИТОГИ ПО
	|	ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры",		Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("ТипНоменклатуры",		Объект.ТипНоменклатуры);
	Запрос.УстановитьПараметр("ИмяВидаНоменклатуры",	"ВидНоменклатуры");
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитовТекВидаНоменклатуры = РезультатыЗапроса[0].Выгрузить();
	КолРеквизитовДляКонтроля = ТаблицаРеквизитовТекВидаНоменклатуры.Количество();
	
	РеквизитыВидовНоменклатуры   = РезультатыЗапроса[1]; // РезультатЗапроса
	Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит, Свойство");
	
	ВыборкаПоВиду = РеквизитыВидовНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоВиду.Следующий() Цикл
		
		СоответствуетУсловиям = Истина;
		
		ВыборкаПоРеквизитам = ВыборкаПоВиду.Выбрать();
		КолРеквизитовВида = ВыборкаПоРеквизитам.Количество();
		
		Если КолРеквизитовВида = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если КолРеквизитовВида <> КолРеквизитовДляКонтроля Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоРеквизитам.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоРеквизитам);
			
			Если ТаблицаРеквизитовТекВидаНоменклатуры.НайтиСтроки(Отбор).Количество() = 0 Тогда
				СоответствуетУсловиям = Ложь;
			КонецЕсли;
			
			Если Не СоответствуетУсловиям Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не СоответствуетУсловиям Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентичныеВидыНоменклатуры.Добавить(ВыборкаПоВиду.ВидНоменклатуры);
		
	КонецЦикла;
	
	Возврат ИдентичныеВидыНоменклатуры;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Проверяет наличие прав у текущего пользователя на ввод информации по номенклатуре без контроля.
//
// Возвращаемое значение:
//	Булево - наличие права ввода
//
Функция ДоступенВводБезКонтроля() Экспорт
	                                     
	Возврат ПраваПользователяПовтИсп.ВводИнформацииПоНоменклатуреБезКонтроля();
	
КонецФункции

// Проверяет уникальность наименования номенклатуры.
//
// Параметры:
//	Объект - СправочникОбъект.Номенклатура - элемент справочника номенклатуры.
//
// Возвращаемое значение:
//	Булево - признак уникальности наименования данного элемента справочника.
//
Функция РабочееНаименованиеУникально(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка <> &Ссылка
	|	И Номенклатура.Наименование = &Наименование
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Ссылка",       Объект.Ссылка);
	Запрос.УстановитьПараметр("Наименование", Объект.Наименование);

	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, Мера) Экспорт
	
	Если Мера <> "Вес"
		И Мера <> "Длина"
		И Мера <> "Площадь"
		И Мера <> "Объем" Тогда
		Возврат;
	КонецЕсли;
	
	Если МернаяЕдиницаХранения
		И ТипЕдиницы = Мера
		И (Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара) Тогда
		
		Номенклатура[Мера + "Использовать"] = Истина;
		Номенклатура[Мера + "Знаменатель"]  = 1;
		Номенклатура[Мера + "Числитель"]    = 1;
		Номенклатура[Мера + "МожноУказыватьВДокументах"] = Истина;
		Номенклатура[Мера + "ЕдиницаИзмерения"] = Номенклатура.ЕдиницаИзмерения;
		
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
		Или Номенклатура[Мера + "Знаменатель"] = 0
		Или Номенклатура[Мера + "Числитель"] = 0
		Или Не Номенклатура[Мера + "Использовать"] Тогда 
		
		Номенклатура[Мера + "ЕдиницаИзмерения"]          = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		Номенклатура[Мера + "Знаменатель"]               = 0;
		Номенклатура[Мера + "Числитель"]                 = 0;
		Номенклатура[Мера + "МожноУказыватьВДокументах"] = Ложь;
		Номенклатура[Мера + "Использовать"]              = Ложь;
	Иначе
	
		Если Не ЗначениеЗаполнено(Номенклатура[Мера + "ЕдиницаИзмерения"]) Тогда
			Номенклатура[Мера + "ЕдиницаИзмерения"] = НоменклатураСервер.ЕдиницаИзмеренияПоУмолчанию(Мера);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу обязательных реквизитов.
//
// Параметры:
//	ВидНоменклатуры - СправочникОбъект.ВидыНоменклатуры - элемент справочника виды номенклатуры.
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета номенклатуры.
//	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры, Булево - вариант
//		использования номенклатуры или признак использования характеристик.
//	ИспользоватьСрокГодностиСерии - Булево - признак использования срока годности в сериях номенклатуры.
//	ВладелецРеквизитов - Строка - имя объекта владельца реквизитов.
//  ВестиУчетПоГТД - Булево - признак ведения учета по ГТД 
//  ИзмеряетсяТолькоВСуммовомВыражении - Булево - признак измерения номенклатуры только в суммовом выражении 
//  ПодакцизныйТовар - Булево - признак подакцизного товара 
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с обязательными для заполнения и выводимыми при создании реквизитами.
//
Функция ТаблицаНастроекРеквизитов(
    ВидНоменклатуры,
	ТипНоменклатуры,
	ОсобенностьУчета,
	ИспользованиеХарактеристик,
	ИспользоватьСрокГодностиСерии,
	ВладелецРеквизитов,
    ВестиУчетПоГТД = Ложь, 
    ИзмеряетсяТолькоВСуммовомВыражении = Ложь, 
    ПодакцизныйТовар = Ложь
    ) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВсеРеквизитыНоменклатурыТаблица.Имя КАК Имя,
	|	ВсеРеквизитыНоменклатурыТаблица.Представление КАК Представление,
	|	ВсеРеквизитыНоменклатурыТаблица.ОбязательныйДляЗаполнения КАК ОбязательныйДляЗаполнения,
	|	ВсеРеквизитыНоменклатурыТаблица.ОбязательныйДляОтображенияПриСоздании КАК ОбязательныйДляОтображенияПриСоздании,
	|	ВсеРеквизитыНоменклатурыТаблица.Использование КАК Использование
	|ПОМЕСТИТЬ ВсеРеквизитыНоменклатурыТаблица
	|ИЗ
	|	&ВсеРеквизитыНоменклатурыТаблица КАК ВсеРеквизитыНоменклатурыТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Представление КАК Представление,
	|	ВложенныйЗапрос.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	ВложенныйЗапрос.ИмяРеквизита КАК ИмяРеквизита,
	|	ВложенныйЗапрос.Свойство КАК Свойство,
	|	МАКСИМУМ(ВложенныйЗапрос.ЗаполнятьОбязательно) КАК ЗаполнятьОбязательно,
	|	МАКСИМУМ(ВложенныйЗапрос.Уникален) КАК Уникален,
	|	МАКСИМУМ(ВложенныйЗапрос.ОтображатьПриСоздании) КАК ОтображатьПриСоздании,
	|	МАКСИМУМ(ВложенныйЗапрос.Использование) КАК Использование,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьРеквизитВМетаданных) КАК ЕстьРеквизитВМетаданных
	|ПОМЕСТИТЬ ВТДляЗапроса
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА РеквизитыДляКонтроля.ЭтоДопРеквизит
	|				ТОГДА РеквизитыДляКонтроля.Свойство.Представление
	|			ИНАЧЕ РеквизитыДляКонтроля.ПредставлениеРеквизита
	|		КОНЕЦ КАК Представление,
	|		РеквизитыДляКонтроля.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|		ВЫБОР
	|			КОГДА РеквизитыДляКонтроля.ЭтоДопРеквизит
	|				ТОГДА РеквизитыДляКонтроля.Свойство.Наименование
	|			ИНАЧЕ РеквизитыДляКонтроля.ИмяРеквизита
	|		КОНЕЦ КАК ИмяРеквизита,
	|		РеквизитыДляКонтроля.Свойство КАК Свойство,
	|		ЕСТЬNULL(ВТВсеДополнительныеРеквизиты.ЗаполнятьОбязательно, ЛОЖЬ) КАК ЗаполнятьОбязательно,
	|		РеквизитыДляКонтроля.Уникален КАК Уникален,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТВсеДополнительныеРеквизиты.ЗаполнятьОбязательно, ЛОЖЬ)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ РеквизитыДляКонтроля.ОтображатьПриСоздании
	|		КОНЕЦ КАК ОтображатьПриСоздании,
	|		РеквизитыДляКонтроля.ЭтоДопРеквизит КАК Использование,
	|		ЛОЖЬ КАК ЕстьРеквизитВМетаданных
	|	ИЗ
	|		#ИсточникРеквизитыДляКонтроля КАК РеквизитыДляКонтроля
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДополнительныеРеквизиты КАК ВТВсеДополнительныеРеквизиты
	|			ПО РеквизитыДляКонтроля.Свойство = ВТВсеДополнительныеРеквизиты.Свойство
	|	ГДЕ
	|		РеквизитыДляКонтроля.Ссылка = &ВидНоменклатуры
	|		И (РеквизитыДляКонтроля.ЭтоДопРеквизит
	|					И НЕ ВТВсеДополнительныеРеквизиты.Свойство ЕСТЬ NULL
	|				ИЛИ НЕ РеквизитыДляКонтроля.ЭтоДопРеквизит)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВсеРеквизитыНоменклатурыТаблица.Представление,
	|		ЛОЖЬ,
	|		ВсеРеквизитыНоменклатурыТаблица.Имя,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка),
	|		ВсеРеквизитыНоменклатурыТаблица.ОбязательныйДляЗаполнения,
	|		ЛОЖЬ,
	|		ВсеРеквизитыНоменклатурыТаблица.ОбязательныйДляОтображенияПриСоздании,
	|		ВсеРеквизитыНоменклатурыТаблица.Использование,
	|		ИСТИНА
	|	ИЗ
	|		ВсеРеквизитыНоменклатурыТаблица КАК ВсеРеквизитыНоменклатурыТаблица) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Представление,
	|	ВложенныйЗапрос.ЭтоДопРеквизит,
	|	ВложенныйЗапрос.ИмяРеквизита,
	|	ВложенныйЗапрос.Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДляЗапроса.Представление КАК Представление,
	|	ВТДляЗапроса.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	ВТДляЗапроса.ИмяРеквизита КАК ИмяРеквизита,
	|	ВТДляЗапроса.Свойство КАК Свойство,
	|	ВТДляЗапроса.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	ВТДляЗапроса.Уникален КАК Уникален,
	|	ВТДляЗапроса.ОтображатьПриСоздании КАК ОтображатьПриСоздании,
	|	ВТДляЗапроса.Использование КАК Использование,
	|	ВТДляЗапроса.Свойство.ТипЗначения КАК Тип,
	|	ЕСТЬNULL(ВТВсеДополнительныеРеквизиты.Набор, ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)) КАК Набор,
	|	ЕСТЬNULL(ВТВсеДополнительныеРеквизиты.ЭтоОбщийРеквизит, ЛОЖЬ) КАК ЭтоОбщийРеквизит,
	|	ЕСТЬNULL(ВТВсеДополнительныеРеквизиты.НаборСвойств, ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)) КАК НаборСвойств
	|ИЗ
	|	ВТДляЗапроса КАК ВТДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДополнительныеРеквизиты КАК ВТВсеДополнительныеРеквизиты
	|		ПО ВТДляЗапроса.Свойство = ВТВсеДополнительныеРеквизиты.Свойство
	|ГДЕ
	|	(ВТДляЗапроса.ЭтоДопРеквизит
	|			ИЛИ ВТДляЗапроса.ЕстьРеквизитВМетаданных)";
 	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВсеДополнительныеРеквизиты(ВидНоменклатуры, ВладелецРеквизитов, МенеджерВременныхТаблиц);
	
	Если ВладелецРеквизитов = "Номенклатура" Тогда
        ВсеРеквизитыНоменклатурыТаблица = ЗначениеНастроекПовтИсп.ВсеРеквизитыНоменклатурыТаблица(
            ТипНоменклатуры,
        	ОсобенностьУчета,
        	ИспользованиеХарактеристик,
        	ИспользоватьСрокГодностиСерии,
            ВестиУчетПоГТД, 
            ИзмеряетсяТолькоВСуммовомВыражении, 
            ПодакцизныйТовар
        );
		//
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИсточникРеквизитыДляКонтроля", "Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры");
	Иначе
		ВсеРеквизитыНоменклатурыТаблица = ЗначениеНастроекПовтИсп.ВсеРеквизитыХарактеристикНоменклатурыТаблица(ТипНоменклатуры,
																												ОсобенностьУчета);
		//
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИсточникРеквизитыДляКонтроля", "Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляХарактеристик");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("ВсеРеквизитыНоменклатурыТаблица", ВсеРеквизитыНоменклатурыТаблица);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из Таблица Цикл
		Если Не СтрТабл.ЭтоДопРеквизит Тогда
			Если ВладелецРеквизитов = "Номенклатура" Тогда
                ОписаниеРеквизита = РеквизитОписание(
                    СтрТабл.ИмяРеквизита,
                	ТипНоменклатуры,
                	ОсобенностьУчета,
                	ИспользованиеХарактеристик,
                	ИспользоватьСрокГодностиСерии,
                    ВестиУчетПоГТД, 
                    ИзмеряетсяТолькоВСуммовомВыражении, 
                    ПодакцизныйТовар
                );
			Иначе
				ОписаниеРеквизита = Справочники.ХарактеристикиНоменклатуры.РеквизитОписание(СтрТабл.ИмяРеквизита,
																							ТипНоменклатуры,
																							ОсобенностьУчета);
			КонецЕсли;
			
			СтрТабл.Тип = ОписаниеРеквизита.Тип;
			СтрТабл.Представление = ОписаниеРеквизита.Представление;
			СтрТабл.Использование = ОписаниеРеквизита.Использование;
			
			СтрТабл.ЗаполнятьОбязательно = СтрТабл.Использование
											И (ОписаниеРеквизита.ОбязательныйДляЗаполнения
											Или СтрТабл.ЗаполнятьОбязательно);
											
			СтрТабл.ОтображатьПриСоздании = СтрТабл.Использование
											И (СтрТабл.ОтображатьПриСоздании
												Или ОписаниеРеквизита.ОбязательныйДляОтображенияПриСоздании
												Или СтрТабл.ЗаполнятьОбязательно
												Или СтрТабл.Уникален);
		Иначе
			СтрТабл.ОтображатьПриСоздании = СтрТабл.ОтображатьПриСоздании
												Или СтрТабл.ЗаполнятьОбязательно
												Или СтрТабл.Уникален;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции


// Возвращает таблицу дополнительные реквизиты номенклатуры
//
// Параметры:
//  ВидНоменклатуры	 - СправочникСсылка.ВидыНоменклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//		* ИмяРеквизита - Строка - наименование свойства
//		* ПредставлениеРеквизита - Строка - заголовок свойства
//		* ЭтоДопРеквизит - Булево - всегда ИСТИНА
//		* ЭтоОбщийРеквизит - Булево - признак, что доп. реквизит входит в набор Справочник_Номенклатура_Общие
//		* ЗаполнятьОбязательно - Булево
//		* НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - набор свойств, для которого был создан доп. реквизит
//		* Тип - ОписаниеТипов
//
Функция ВсеДополнительныеРеквизиты(ВидНоменклатуры, НазначениеДопРеквизитов, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка) КАК Набор,
		|	"""" КАК ИмяРеквизита,
		|	"""" КАК ПредставлениеРеквизита,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка) КАК Свойство,
		|	ИСТИНА КАК ЭтоДопРеквизит,
		|	ЛОЖЬ КАК ЭтоОбщийРеквизит,
		|	ЛОЖЬ КАК ЗаполнятьОбязательно,
		|	ЛОЖЬ КАК ЗаполнятьОбязательноСУсловием,
		|	ЛОЖЬ КАК ВиденСУсловием,
		|	ЛОЖЬ КАК ДоступенСУсловием,
		|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка) КАК НаборСвойств,
		|	ТИПЗНАЧЕНИЯ("""") КАК Тип 
		|//ПОМЕСТИТЬ ВТВсеДополнительныеРеквизиты
		|ГДЕ
		|	ЛОЖЬ";
		
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка КАК Свойство
		|ПОМЕСТИТЬ ЗаполнятьОбязательно
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов
		|ГДЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Реквизит = ""ВидНоменклатуры""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""ЗаполнятьОбязательно""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Значение = &ВидНоменклатуры
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.НаборСвойств = &НаборВида
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Условие = ""Равно""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка.ЗаполнятьОбязательно
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов
		|ГДЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Реквизит = ""ВидНоменклатуры""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""ЗаполнятьОбязательно""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Значение = &ВидНоменклатуры
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.НаборСвойств = &ОбщийНабор
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Условие = ""ВСписке""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка.ЗаполнятьОбязательно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка КАК Свойство
		|ПОМЕСТИТЬ ЗаполнятьОбязательноСУсловием
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов
		|ГДЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Реквизит <> ""ВидНоменклатуры""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""ЗаполнятьОбязательно""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.НаборСвойств В (&НаборВида, &ОбщийНабор)
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка.ЗаполнятьОбязательно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка КАК Свойство
		|ПОМЕСТИТЬ Виден
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов
		|ГДЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""Виден""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.НаборСвойств В (&НаборВида, &ОбщийНабор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка КАК Свойство
		|ПОМЕСТИТЬ Доступен
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов
		|ГДЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""Доступен""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.НаборСвойств В (&НаборВида, &ОбщийНабор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеРеквизиты.Ссылка КАК Набор,
		|	ДополнительныеРеквизиты.Свойство.Наименование КАК ИмяРеквизита,
		|	ДополнительныеРеквизиты.Свойство.Заголовок КАК ПредставлениеРеквизита,
		|	ДополнительныеРеквизиты.Свойство КАК Свойство,
		|	ИСТИНА КАК ЭтоДопРеквизит,
		|	ВЫБОР
		|		КОГДА ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОбщийРеквизит,
		|	НЕ ЗаполнятьОбязательно.Свойство ЕСТЬ NULL КАК ЗаполнятьОбязательно,
		|	НЕ ЗаполнятьОбязательноСУсловием.Свойство ЕСТЬ NULL КАК ЗаполнятьОбязательноСУсловием,
		|	НЕ Виден.Свойство ЕСТЬ NULL КАК ВиденСУсловием,
		|	НЕ Доступен.Свойство ЕСТЬ NULL КАК ДоступенСУсловием,
		|	ДополнительныеРеквизиты.Свойство.НаборСвойств КАК НаборСвойств,
		|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК Тип
		|//ПОМЕСТИТЬ ВТВсеДополнительныеРеквизиты
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнятьОбязательно КАК ЗаполнятьОбязательно
		|		ПО ДополнительныеРеквизиты.Свойство = ЗаполнятьОбязательно.Свойство
		|		ЛЕВОЕ СОЕДИНЕНИЕ Доступен КАК Доступен
		|		ПО ДополнительныеРеквизиты.Свойство = Доступен.Свойство
		|		ЛЕВОЕ СОЕДИНЕНИЕ Виден КАК Виден
		|		ПО ДополнительныеРеквизиты.Свойство = Виден.Свойство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнятьОбязательноСУсловием КАК ЗаполнятьОбязательноСУсловием
		|		ПО ДополнительныеРеквизиты.Свойство = ЗаполнятьОбязательноСУсловием.Свойство
		|ГДЕ
		|	(ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
		|			ИЛИ ДополнительныеРеквизиты.Ссылка = &НаборВида)
		|	И НЕ ДополнительныеРеквизиты.ПометкаУдаления";
		
		Если НазначениеДопРеквизитов = "Номенклатура" Тогда
			ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)";
			НаборВида  = "ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НаборСвойств";
		ИначеЕсли НазначениеДопРеквизитов = "ХарактеристикиНоменклатуры" Тогда
			ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие)";
			НаборВида  = "ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НаборСвойствХарактеристик";
		ИначеЕсли НазначениеДопРеквизитов = "СерииНоменклатуры" Тогда
			ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие)";
			НаборВида  = "ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НаборСвойствСерий";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбщийНабор", ОбщийНабор);  	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НаборВида", НаборВида);  	
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.Текст = ТекстЗапроса;
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПОМЕСТИТЬ", "ПОМЕСТИТЬ");  	
		Запрос.Текст = ТекстЗапроса;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает описание настроек реквизита номенклатуры.
//
// Параметры:
//	Реквизит - ОбъектМетаданныхРеквизит - реквизит справочника Номенклатура.
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета номенклатуры.
//	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры, Булево - вариант
//		использования номенклатуры или признак использования характеристик.
//	ИспользоватьСрокГодностиСерии - Булево - признак использования срока годности в сериях номенклатуры.
//	ЭтоРеквизитыХарактеристик - Булево - признак принадлежности реквизитов справочнику ХарактеристикиНоменклатуры.
//  ВестиУчетПоГТД - Булево - признак ведения учета по ГТД 
//  ИзмеряетсяТолькоВСуммовомВыражении - Булево - признак измерения номенклатуры только в суммовом выражении 
//  ПодакцизныйТовар - Булево - признак подакцизного товара 
//
// Возвращаемое значение:
//	Структура - описание настроек реквизит (см. Справочник.Номенклатура.ЗначениеСвойствРеквизита).
//
Функция РеквизитОписание(
    Реквизит,
	ТипНоменклатуры,
	ОсобенностьУчета,
	ИспользованиеХарактеристик,
	ИспользоватьСрокГодностиСерии,
    ВестиУчетПоГТД = Ложь, 
    ИзмеряетсяТолькоВСуммовомВыражении = Ложь, 
    ПодакцизныйТовар = Ложь
    ) Экспорт
                            
	Если ТипЗнч(Реквизит) = Тип("Строка")
		Или ТипЗнч(Реквизит) = Тип("ОбъектМетаданных") Тогда
		
        ВсеРеквизитыНоменклатуры = ЗначениеНастроекПовтИсп.ВсеРеквизитыНоменклатуры(
            ТипНоменклатуры,
        	ОсобенностьУчета,
        	ИспользованиеХарактеристик,
        	ИспользоватьСрокГодностиСерии,
            ВестиУчетПоГТД, 
            ИзмеряетсяТолькоВСуммовомВыражении, 
            ПодакцизныйТовар
        );
		
		Если ТипЗнч(Реквизит) = Тип("Строка") Тогда
			ИмяРеквизита = Реквизит;
		Иначе
			ИмяРеквизита = Реквизит.Имя;
		КонецЕсли;
		
		Возврат ВсеРеквизитыНоменклатуры[ИмяРеквизита];
	ИначеЕсли ТипЗнч(Реквизит) = Тип("ФиксированнаяСтруктура") Тогда
		Возврат Реквизит;
	Иначе
		ТекстИсключения = НСтр("ru='Неожиданный тип параметра Реквизит.';uk='Несподіваний тип параметра Реквізит.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - содержит:
//		* Имя - Строка - описание реквизита
//		* Представление - Строка - 
//		* Тип - ОписаниеТипов - 
//		* ОбязательныйДляЗаполнения - Булево - 
//		* ОбязательныйДляОтображенияПриСоздании - Булево - 
//		* РекомендуемыйДляКонтроляУникальности - Булево - 
//		* Использование - Булево - 
//
Функция СтруктураОписанияРеквизитовВТаблицу(СтруктураОписаний) Экспорт
	Таблица = Новый ТаблицаЗначений; // см. СтруктураОписанияРеквизитовВТаблицу 
	ПерваяСтрока = Истина;
	
	Для Каждого ОписаниеРеквизита Из СтруктураОписаний Цикл
		
		Если ПерваяСтрока Тогда
			Для Каждого Свойство Из ОписаниеРеквизита.Значение Цикл
				Если ТипЗнч(Свойство.Значение) = Тип("Строка") Тогда
					Таблица.Колонки.Добавить(Свойство.Ключ,
						Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
				Иначе
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(ТипЗнч(Свойство.Значение));
					Таблица.Колонки.Добавить(Свойство.Ключ,Новый ОписаниеТипов(МассивТипов));
				КонецЕсли;
			КонецЦикла;
			ПерваяСтрока = Ложь;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Имя = ОписаниеРеквизита.Ключ;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеРеквизита.Значение);
	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

Функция НепроверяемыеРеквизиты(Объект) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	РеквизитыСПереопределеннойОбязательностьюЗаполнения = РеквизитыСПереопределеннойОбязательностьюЗаполнения(Объект.ТипНоменклатуры, Объект.ОсобенностьУчета, Объект);

	Для Каждого КлючЗначение Из РеквизитыСПереопределеннойОбязательностьюЗаполнения Цикл
		
		Если Не КлючЗначение.Значение Тогда
			МассивНепроверяемыхРеквизитов.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат МассивНепроверяемыхРеквизитов;
	
КонецФункции

// Возвращает имена реквизитов номенклатуры, используемых только для агентских услуг.
//
// Возвращаемое значение:
//	Массив из Строка - имена реквизитов.
//
Функция РеквизитыАгентскихУслуг()
	
	МассивАгентскихРеквизитов = Новый Массив;
	
	МассивАгентскихРеквизитов.Добавить("Принципал");
	МассивАгентскихРеквизитов.Добавить("Контрагент");
	
	Возврат МассивАгентскихРеквизитов;
	
КонецФункции

Функция РеквизитыПризнаковОсобенностейУчета(МетаданныеОбъекта) Экспорт
	
	РеквизитыПризнаковОсобенностейУчета = Новый Массив;
	
	Для Каждого ЗначениеПеречисления Из Перечисления.ОсобенностиУчетаНоменклатуры Цикл
		
		ИмяЗначенияПеречисления = ОбщегоНазначения.ИмяЗначенияПеречисления(ЗначениеПеречисления);
		
		Если МетаданныеОбъекта.Реквизиты.Найти(ИмяЗначенияПеречисления) <> Неопределено Тогда
			РеквизитыПризнаковОсобенностейУчета.Добавить(ИмяЗначенияПеречисления);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РеквизитыПризнаковОсобенностейУчета;
	
КонецФункции

// Возвращает структуру с видимостью элементов.
// Параметры:
//	Объект - СправочникОбъект.Номенклатура - элемент справочника номенклатуры
//	РежимВидимостиПоказатьТолькоВажные - Булево - признак отображения основных реквизитов.
//
// Возвращаемое значение:
//	Структура - структура видимости элементов. Ключ - имя элемента, значения - видимость.
//
Функция ИспользованиеЭлементов(ПереданныйОбъект, РежимВидимостиПоказатьТолькоВажные, РежимПроверкиИспользованияРеквизитов) Экспорт
	
	ИменаРеквизитовВидаНоменклатуры = "ИспользоватьСерии, НастройкаИспользованияСерий, ИспользоватьСрокГодностиСерии,"
										+ "ШаблонЭтикетки, ШаблонЦенника";
	Если ТипЗнч(ПереданныйОбъект.Ссылка) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		Объект = ОбщегоНазначенияУТ.СтруктураСоСвойствамиОбъектаМетаданных(Метаданные.Справочники.Номенклатура);
		ЗаполнитьЗначенияСвойств(Объект, ПереданныйОбъект);
		РеквизитыВидаНоменклатуры = Новый Структура(ИменаРеквизитовВидаНоменклатуры);
		ЗаполнитьЗначенияСвойств(РеквизитыВидаНоменклатуры, ПереданныйОбъект);
		Объект.ВидНоменклатуры = ПереданныйОбъект.Ссылка;
	Иначе
		Объект = ПереданныйОбъект;
		РеквизитыВидаНоменклатуры = ОбщегоНазначенияУТ.ЗначенияРеквизитовОбъектаПоУмолчанию(Объект.ВидНоменклатуры, ИменаРеквизитовВидаНоменклатуры);
	КонецЕсли;	
										
	ИспользованиеЭлементов = Новый Структура;
	
	АвторизованВнешнийПользователь = ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь();
	
	#Область ФункциональныеОпции
	
	ИспользоватьМногооборотнуюТару 			= ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	ИспользоватьХарактеристикиНоменклатуры 	= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьНесколькоВидовНоменклатуры 	= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры");
	ИспользоватьСерииНоменклатуры 			= ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры"); 
	ИспользоватьСборкуРазборку 				= ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку");
	ИспользоватьСертификатыНоменклатуры 	= ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	ИспользоватьСегментыНоменклатуры 		= ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры");
	ИспользоватьПроизводство 				= ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	ИспользоватьАдресноеХранение			= ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение");
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	ИспользоватьАдресноеХранениеСправочно	= ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранениеСправочно");
	ИспользоватьКомиссиюПриЗакупках			= ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках");
	ИспользоватьНесколькоОрганизаций		= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьНоменклатуруПродаваемуюСовместно = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПродаваемуюСовместно");
	ИспользоватьПрогнозРасходаУпаковок		= ПолучитьФункциональнуюОпцию("ИспользоватьПрогнозРасходаУпаковок");
	ФормироватьФинансовыйРезультат			= ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат");
	ИспользоватьРасширенноеОбеспечениеПотребностей = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	ИспользоватьСоглашенияСПоставщиками		= ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	#КонецОбласти
	
	#Область ПризнакиТипаНоменклатуры
	ЭтоТовар				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара	= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЭтоРабота 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоУслуга 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоНабор 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	#КонецОбласти
	
	#Область НастройкаПоВидуНоменклатуры
		
    НастройкиРеквизитовПоВидуНоменклатуры = ТаблицаНастроекРеквизитов(
        Объект.ВидНоменклатуры,
    	Объект.ТипНоменклатуры,
    	Объект.ОсобенностьУчета,
    	Объект.ИспользованиеХарактеристик,
    	РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии,
    	"Номенклатура",
        Объект.ВестиУчетПоГТД, 
        Объект.ИзмеряетсяТолькоВСуммовомВыражении, 
        Объект.ПодакцизныйТовар
    );
	
	Для Каждого СтрТабл Из НастройкиРеквизитовПоВидуНоменклатуры Цикл
		ИмяРеквизита     = СтрТабл.ИмяРеквизита;
		Если СтрТабл.ЭтоДопРеквизит Тогда
			Если Не РежимПроверкиИспользованияРеквизитов Тогда

				ИмяЭлементаФормы = "ДополнительныйРеквизитЗначение_"
					+ СтрЗаменить(?(СтрТабл.ЭтоОбщийРеквизит,
							ВРег(Строка(СтрТабл.Набор.УникальныйИдентификатор())),
							ВРег(Строка(СтрТабл.НаборСвойств.УникальныйИдентификатор()))),
						"-",
						"x")
					+ "_"
					+ СтрЗаменить(ВРег(Строка(СтрТабл.Свойство.УникальныйИдентификатор())), "-", "x");
				
				ИспользованиеЭлементов.Вставить(ИмяЭлементаФормы, СтрТабл.Использование 
																	И ВидимостьРеквизита(СтрТабл,
																	ИмяРеквизита,
																	РежимВидимостиПоказатьТолькоВажные,
																	СтрТабл));
			КонецЕсли;														
		Иначе
			Если (ИмяРеквизита = "ВариантОформленияПродажи"
					Или ИмяРеквизита = "Качество"
					Или ИмяРеквизита = "ИспользованиеХарактеристик")
				И РежимПроверкиИспользованияРеквизитов Тогда
				
				ИспользованиеЭлементов.Вставить(ИмяРеквизита, Истина);
				
			Иначе
				ИспользованиеЭлементов.Вставить(ИмяРеквизита, СтрТабл.Использование
															И (РежимПроверкиИспользованияРеквизитов
																Или ВидимостьРеквизита(ИмяРеквизита,
																				ИмяРеквизита,
																				РежимВидимостиПоказатьТолькоВажные,
																				СтрТабл)));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ШапкаФормы
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ИспользованиеЭлементов.Вставить("ЗаполнитьРабочееНаименованиеПоШаблону", 	ЗначениеЗаполнено(Объект.ВидНоменклатуры));
		ИспользованиеЭлементов.Вставить("ЗаполнитьНаименованиеДляПечатиПоШаблону", 	ЗначениеЗаполнено(Объект.ВидНоменклатуры));
		
		ГиперссылкаПерейтиШтрихкодыНоменклатурыВидимость = ПравоДоступа("Просмотр",
			Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры)
			И Не РежимВидимостиПоказатьТолькоВажные
			И ЗначениеЗаполнено(Объект.Ссылка);
		
		ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствамиВидимость = ПравоДоступа("Просмотр", 
			Метаданные.РегистрыСведений.НоменклатураСегмента)
			И Не ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь()
			И Не РежимВидимостиПоказатьТолькоВажные;
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиШтрихкодыНоменклатуры", 
			ГиперссылкаПерейтиШтрихкодыНоменклатурыВидимость);
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами",
			ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствамиВидимость);
	КонецЕсли;
	#КонецОбласти
	
	#Область Описание
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ГиперссылкаПерейтиФайлыВидимость = ПравоДоступа("Просмотр", Метаданные.Справочники.НоменклатураПрисоединенныеФайлы)
			И Не РежимВидимостиПоказатьТолькоВажные;
		
		ВидимостьКомандФайлаКартинки = ИспользованиеЭлементов.ФайлКартинки;
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиФайлы", ГиперссылкаПерейтиФайлыВидимость);
		
		ИспользованиеЭлементов.Вставить("ДобавитьИзображение", ВидимостьКомандФайлаКартинки);
		ИспользованиеЭлементов.Вставить("ОчиститьИзображение", ВидимостьКомандФайлаКартинки);
		ИспользованиеЭлементов.Вставить("ИзменитьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
		ИспользованиеЭлементов.Вставить("ПросмотретьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
		ИспользованиеЭлементов.Вставить("ВыбратьКартинкуИзПрисоединенныхФайлов", ЗначениеЗаполнено(Объект.Ссылка));
		
		ГиперссылкаПерейтиСертификатыНоменклатурыВидимость = ИспользоватьСертификатыНоменклатуры
			И Объект.ВестиУчетСертификатовНоменклатуры
			И Не РежимВидимостиПоказатьТолькоВажные
			И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ОбластиДействияСертификатовНоменклатуры);
			
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиСертификатыНоменклатуры",
			ГиперссылкаПерейтиСертификатыНоменклатурыВидимость);
	КонецЕсли;
	
	
	#КонецОбласти
	
	#Область СведенияОПроизводителе
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
        ГиперссылкаПерейтиСоглашенияВидимость = Ложь;
			
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиСоглашения", ГиперссылкаПерейтиСоглашенияВидимость);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПланированиеИМаркетинг
	
	ИспользованиеЭлементов.Вставить("ТоварнаяКатегория", ЗначениеЗаполнено(Объект.ВидНоменклатуры)
														И Не РежимВидимостиПоказатьТолькоВажные
														Или РежимПроверкиИспользованияРеквизитов);
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ГиперссылкаПерейтиСовместныеПродажиВидимость = ИспользоватьНоменклатуруПродаваемуюСовместно
			И Не ЭтоНабор
			И Не ЭтоМногооборотнаяТара
			И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НоменклатураПродаваемаяСовместно)
			И Не РежимВидимостиПоказатьТолькоВажные;
		
		ГиперссылкаПерейтиСегментыВидимость = ИспользоватьСегментыНоменклатуры
			И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НоменклатураСегмента)
			И Не РежимВидимостиПоказатьТолькоВажные
			И Не АвторизованВнешнийПользователь;
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиСовместныеПродажи", ГиперссылкаПерейтиСовместныеПродажиВидимость);
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиСегменты", ГиперссылкаПерейтиСегментыВидимость);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОбеспечениеИПроизводство
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ГиперссылкаПерейтиВариантыКомплектацииВидимость = ИспользоватьСборкуРазборку
			И (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
				Или Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар)
			И ПравоДоступа("Просмотр", Метаданные.Справочники.ВариантыКомплектацииНоменклатуры)
			И Не РежимВидимостиПоказатьТолькоВажные;
		
		ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностейВидимость = 
			 ИспользоватьРасширенноеОбеспечениеПотребностей
			И (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
				Или Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
			И Не РежимВидимостиПоказатьТолькоВажные
			И ПравоДоступа("Просмотр", Метаданные.Обработки.НастройкаСпособовОбеспеченияПотребностей);
		
		ГиперссылкаПерейтиНастройкаПоддержанияЗапасовВидимость = ИспользоватьРасширенноеОбеспечениеПотребностей
			И (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
				Или Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
			И Не РежимВидимостиПоказатьТолькоВажные
			И ПравоДоступа("Просмотр", Метаданные.Обработки.НастройкаПоддержанияЗапасов);
		
		ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводствоВидимость = Ложь;
		//++ Устарело_Производство21
		//-- Устарело_Производство21
		
		ГиперссылкаПерейтиПроизводствоВидимость = Ложь;
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиВариантыКомплектации", ГиперссылкаПерейтиВариантыКомплектацииВидимость);
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиНастройкаПоддержанияЗапасов",
			ГиперссылкаПерейтиНастройкаПоддержанияЗапасовВидимость);
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностей",
			ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностейВидимость);
			
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводство",
			ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводствоВидимость);
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиПроизводство", ГиперссылкаПерейтиПроизводствоВидимость);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Цены
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ГиперссылкаПерейтиПрайсЛистКомпанииВидимость = Не РежимВидимостиПоказатьТолькоВажные
			И ПравоДоступа("Просмотр", Метаданные.Обработки.ПрайсЛист);
		
		ГиперссылкаПерейтиПрайсЛистыПоставщиковВидимость = Не ЭтоНабор
			И Не РежимВидимостиПоказатьТолькоВажные
			И ПравоДоступа("Просмотр", Метаданные.Обработки.ПрайсЛистПоставщика);
		
		ГиперссылкаПерейтиИсторияИзмененияЦенКомпанииВидимость = Не РежимВидимостиПоказатьТолькоВажные
			И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры)
			И Не АвторизованВнешнийПользователь;
		
		ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиковВидимость = Не ЭтоНабор
			И Не РежимВидимостиПоказатьТолькоВажные
			И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатурыПоставщиков);
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиПрайсЛистКомпании", ГиперссылкаПерейтиПрайсЛистКомпанииВидимость);
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиПрайсЛистыПоставщиков",
			ГиперссылкаПерейтиПрайсЛистыПоставщиковВидимость);
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиИсторияИзмененияЦенКомпании",
			ГиперссылкаПерейтиИсторияИзмененияЦенКомпанииВидимость);
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиков",
			ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиковВидимость);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПечатьЭтикетокИЦенников
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ВидимостьШаблонЭтикетки = ИспользованиеЭлементов.ШаблонЭтикетки;
		
		ВидимостьШаблонЦенника = ИспользованиеЭлементов.ШаблонЦенника;
		
		ИспользованиеЭлементов.Вставить("ИспользоватьОбщийШаблонЭтикетки", ВидимостьШаблонЭтикетки);
		ИспользованиеЭлементов.Вставить("ИспользоватьИндивидуальныйШаблонЭтикетки", ВидимостьШаблонЭтикетки);
		ИспользованиеЭлементов.Вставить("ШаблонЭтикетки",							ВидимостьШаблонЭтикетки);
		ИспользованиеЭлементов.Вставить("ВидНоменклатурыШаблонЭтикетки",			ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЭтикетки)
																				И ВидимостьШаблонЭтикетки
																				И Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки);
		ИспользованиеЭлементов.Вставить("ВидНоменклатурыШаблонЭтикеткиНеУказан",	Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЭтикетки)
																				И ВидимостьШаблонЭтикетки
																				И Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки);
		
		ИспользованиеЭлементов.Вставить("ИспользоватьОбщийШаблонЦенника",	ВидимостьШаблонЦенника);
		ИспользованиеЭлементов.Вставить("ИспользоватьИндивидуальныйШаблонЦенника",	ВидимостьШаблонЦенника);
		ИспользованиеЭлементов.Вставить("ШаблонЦенника",							ВидимостьШаблонЦенника);
		ИспользованиеЭлементов.Вставить("ВидНоменклатурыШаблонЦенника",				ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЦенника)
																				И ВидимостьШаблонЦенника
																				И Не Объект.ИспользоватьИндивидуальныйШаблонЦенника);
		ИспользованиеЭлементов.Вставить("ВидНоменклатурыШаблонЦенникаНеУказан",		Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЦенника)
																				И ВидимостьШаблонЦенника
																				И Не Объект.ИспользоватьИндивидуальныйШаблонЦенника);
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ОсновныеПараметрыУчета
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ВидНоменклатурыВидимость = ИспользоватьНесколькоВидовНоменклатуры И Не РежимВидимостиПоказатьТолькоВажные;
		ВидНоменклатурыПереключательВидимость = Не ИспользоватьНесколькоВидовНоменклатуры И Не РежимВидимостиПоказатьТолькоВажные;
		ВидНоменклатурыОбязательныеПоляВидимость = ИспользоватьНесколькоВидовНоменклатуры И РежимВидимостиПоказатьТолькоВажные;
		ВидНоменклатурыПереключательОбязательныеПоляВидимость = Не ИспользоватьНесколькоВидовНоменклатуры И РежимВидимостиПоказатьТолькоВажные;
		ТипНоменклатурыВидимость = ИспользоватьНесколькоВидовНоменклатуры И Не РежимВидимостиПоказатьТолькоВажные;
		
		ИспользованиеЭлементов.Вставить("ВидНоменклатуры", 								ВидНоменклатурыВидимость);
		ИспользованиеЭлементов.Вставить("ВидНоменклатурыПереключатель", 				ВидНоменклатурыПереключательВидимость);
		ИспользованиеЭлементов.Вставить("ВидНоменклатурыОбязательныеПоля", 				ВидНоменклатурыОбязательныеПоляВидимость);
		ИспользованиеЭлементов.Вставить("ВидНоменклатурыПереключательОбязательныеПоля", ВидНоменклатурыПереключательОбязательныеПоляВидимость);
		ИспользованиеЭлементов.Вставить("ТипНоменклатуры", 								ТипНоменклатурыВидимость);
		
		ИспользованиеХарактеристикВидимость  = ИспользованиеЭлементов.ИспользованиеХарактеристик
			И Не РежимВидимостиПоказатьТолькоВажные;
		
		ИспользованиеЭлементов.Вставить("ИспользованиеХарактеристик", ИспользованиеХарактеристикВидимость);
		
		ГиперссылкаПерейтиХарактеристикиНоменклатурыВидимость = ИспользованиеХарактеристикВидимость
			И ПравоДоступа("Просмотр", Метаданные.Справочники.ХарактеристикиНоменклатуры)
			И Объект.ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиХарактеристикиНоменклатуры", 
			ГиперссылкаПерейтиХарактеристикиНоменклатурыВидимость);
			
		НастройкаИспользованияСерийВидимость = ИспользоватьСерииНоменклатуры
			И (ЭтоТовар
				Или ЭтоМногооборотнаяТара)
			И Не РежимВидимостиПоказатьТолькоВажные;
		
		ГиперссылкаПерейтиТоварыДругогоКачестваВидимость = ИспользованиеЭлементов.Качество
			И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ТоварыДругогоКачества)
			И Не РежимВидимостиПоказатьТолькоВажные;
		
		ИспользованиеЭлементов.Вставить("НастройкаИспользованияСерий", НастройкаИспользованияСерийВидимость);
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиСоставНабора", 
										ПравоДоступа("Просмотр", Метаданные.Справочники.ВариантыКомплектацииНоменклатуры)
										И Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
										И Не РежимВидимостиПоказатьТолькоВажные);
											
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиТоварыДругогоКачества",
			ГиперссылкаПерейтиТоварыДругогоКачестваВидимость);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЕдиницыИзмеренияИУсловияХранения
	ВидимостьНастроекУпаковок = ИспользованиеЭлементов.ИспользоватьУпаковки
								И Объект.ИспользоватьУпаковки
								И (Не РежимВидимостиПоказатьТолькоВажные
									Или РежимПроверкиИспользованияРеквизитов);
	
		
	ЕдиницаДляОтчетовВидимость = ИспользованиеЭлементов.ЕдиницаДляОтчетов
								И (РежимПроверкиИспользованияРеквизитов 
								Или Не РежимВидимостиПоказатьТолькоВажные
								И ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.ЕдиницаДляОтчетов)
								И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", 
															Метаданные.Справочники.Номенклатура.Реквизиты.ЕдиницаДляОтчетов));
	
	КоэффициентЕдиницыДляОтчетовВидимость = ЕдиницаДляОтчетовВидимость
											  И ЗначениеЗаполнено(Объект.ЕдиницаДляОтчетов)
											  И Объект.ЕдиницаДляОтчетов <> Объект.ЕдиницаИзмерения
											  И (Не РежимВидимостиПоказатьТолькоВажные
											  	Или РежимПроверкиИспользованияРеквизитов);
											  
														
	ИспользованиеЭлементов.Вставить("ЕдиницаДляОтчетов", 			 ЕдиницаДляОтчетовВидимость);
	ИспользованиеЭлементов.Вставить("КоэффициентЕдиницыДляОтчетов",  КоэффициентЕдиницыДляОтчетовВидимость);
	ИспользованиеЭлементов.Вставить("ЕдиницаИзмеренияСрокаГодности", ИспользованиеЭлементов.СрокГодности);
	ИспользованиеЭлементов.Вставить("НаборУпаковок", ВидимостьНастроекУпаковок
									И (Объект.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры
										Или РежимПроверкиИспользованияРеквизитов));
		
	ПоставляетсяВМногооборотнойТареВидимость = ИспользоватьМногооборотнуюТару
		И ЭтоТовар
		И ЗначениеЗаполнено(Объект.ЕдиницаИзмерения)
		И Не Объект.ИспользоватьУпаковки
		И Не Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения)
		И (РежимПроверкиИспользованияРеквизитов 
			Или Не РежимВидимостиПоказатьТолькоВажные
			 	И ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.ПоставляетсяВМногооборотнойТаре));
	
	НоменклатураМногооборотнаяТараВидимость = ПоставляетсяВМногооборотнойТареВидимость 
		И Объект.ПоставляетсяВМногооборотнойТаре;
	
	ХарактеристикаМногооборотнаяТараВидимость = НоменклатураМногооборотнаяТараВидимость
		И ЗначениеЗаполнено(Объект.НоменклатураМногооборотнаяТара) 
		И ХарактеристикиИспользуются(Объект.НоменклатураМногооборотнаяТара);
	
	
	ИспользованиеЭлементов.Вставить("ПоставляетсяВМногооборотнойТаре", 	ПоставляетсяВМногооборотнойТареВидимость);
	ИспользованиеЭлементов.Вставить("НоменклатураМногооборотнаяТара", 	НоменклатураМногооборотнаяТараВидимость);
	ИспользованиеЭлементов.Вставить("ХарактеристикаМногооборотнаяТара", ХарактеристикаМногооборотнаяТараВидимость);
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		
		НастройкиОбщегоНабораУпаковокВидимость = ВидимостьНастроекУпаковок
												И Объект.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
												
		// Реквизиты с настройкой видимости по интерфейсу и зависящие от связанных полей.
		ИспользованиеЭлементов.Вставить("НаборУпаковокОбщий", НастройкиОбщегоНабораУпаковокВидимость
			И ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.НаборУпаковок)
			И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.НаборУпаковок));
		
		ЕдиницаДляОтчетовЕдиницаИзмеренияНадписьВидимость = КоэффициентЕдиницыДляОтчетовВидимость
															И Объект.ЕдиницаДляОтчетов <> Объект.ЕдиницаИзмерения
															И Не РежимВидимостиПоказатьТолькоВажные;
		ИспользованиеЭлементов.Вставить("ЕдиницаДляОтчетовЕдиницаИзмеренияНадпись", 	ЕдиницаДляОтчетовЕдиницаИзмеренияНадписьВидимость);
		
		ТараОтступВидимость = ПоставляетсяВМногооборотнойТареВидимость
			И Объект.ПоставляетсяВМногооборотнойТаре;
		ИспользованиеЭлементов.Вставить("ТараОтступ", 						ТараОтступВидимость);
		
		ГиперссылкаПерейтиРазмещениеНоменклатурыВидимость =
			(ЭтоТовар
			Или ЭтоМногооборотнаяТара)
			И Не РежимВидимостиПоказатьТолькоВажные
			И ИспользоватьАдресноеХранениеСправочно
			И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам);
			
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиРазмещениеНоменклатуры",
			ГиперссылкаПерейтиРазмещениеНоменклатурыВидимость);
								
		ГиперссылкаПерейтиУпаковкиНоменклатурыВидимость = ВидимостьНастроекУпаковок
			И Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры
			И ПравоДоступа("Просмотр", Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
		
		ГиперссылкаПерейтиПрогнозыРасходаУпаковокВидимость = ВидимостьНастроекУпаковок
			И ИспользоватьПрогнозРасходаУпаковок
			И ПравоДоступа("Просмотр", Метаданные.Справочники.УпаковкиЕдиницыИзмерения)
			И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПрогнозыРасходаУпаковок)
			И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиАдресныхСкладов);
		
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНабора", 		НастройкиОбщегоНабораУпаковокВидимость
																				И ПравоДоступа("Просмотр", Метаданные.Справочники.УпаковкиЕдиницыИзмерения));
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатуры",	ГиперссылкаПерейтиУпаковкиНоменклатурыВидимость);
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиПрогнозыРасходаУпаковок",
			ГиперссылкаПерейтиПрогнозыРасходаУпаковокВидимость);
		
		ИспользованиеЭлементов.Вставить("НаборУпаковокОтступ", 						ВидимостьНастроекУпаковок);
		ИспользованиеЭлементов.Вставить("ИспользованиеУпаковокИндивидуальныйНабор", ВидимостьНастроекУпаковок);
		ИспользованиеЭлементов.Вставить("ИспользованиеУпаковокОбщийНабор", 			ВидимостьНастроекУпаковок);
	КонецЕсли;
		
	#КонецОбласти

	#Область ФинансовыйУчет
		
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности = 
			(ЭтоТовар
				Или ЭтоМногооборотнаяТара
				Или ЭтоУслуга
				Или ЭтоРабота)
			И ФормироватьФинансовыйРезультат
			И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкаРаспределенияПоНаправлениямДеятельности)
			И Не РежимВидимостиПоказатьТолькоВажные;
		
		ИспользованиеЭлементов.Вставить("ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности",
			ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПрочиеЭлементы
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ИспользованиеЭлементов.Вставить("ПроверитьУникальность", 
									РежимВидимостиПоказатьТолькоВажные
									И Константы.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов.Получить()
									И Не ЗначениеЗаполнено(Объект.Ссылка));
	КонецЕсли;
	#КонецОбласти
	
	#Область Отчеты
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ИспользованиеЭлементов.Вставить("ВедомостьПоТоварамОрганизаций", (ЭтоТовар
				Или ЭтоМногооборотнаяТара
				Или ЭтоРабота)
			И (ИспользоватьНесколькоОрганизаций
				Или ИспользоватьКомиссиюПриЗакупках)
			И ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамОрганизаций));
		
		ИспользованиеЭлементов.Вставить("ВедомостьПоСериямНоменклатуры", (ЭтоТовар
				Или ЭтоМногооборотнаяТара)
			И РеквизитыВидаНоменклатуры.ИспользоватьСерии
			И ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоСериямНоменклатуры));
		
		ИспользованиеЭлементов.Вставить("ВедомостьПоТоварамНаСкладах", (ЭтоТовар
				Или ЭтоМногооборотнаяТара)
			И ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах));
		
		ИспользованиеЭлементов.Вставить("ТоварыВЯчейках", (ЭтоТовар
				Или ЭтоМногооборотнаяТара)
			И ИспользоватьАдресноеХранение
			И ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах));
		
		ИспользованиеЭлементов.Вставить("ОстаткиИДоступностьТоваров", (ЭтоТовар
				Или ЭтоМногооборотнаяТара)
			И ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиИДоступностьТоваров));
		
		ИспользованиеЭлементов.Вставить("ТоварыНаСкладахПоСрокамГодности", (ЭтоТовар
				Или ЭтоМногооборотнаяТара)
			И РеквизитыВидаНоменклатуры.ИспользоватьСерии
			И РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии
			И ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыНаСкладахПоСрокамГодности));
		
		ИспользованиеЭлементов.Вставить("ВыручкаИСебестоимостьПродаж",
			ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж));
		
		ИспользованиеЭлементов.Вставить("СостояниеАссортимента",
			ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеАссортимента));
	КонецЕсли;
	#КонецОбласти

	НоменклатураЛокализация.ИспользованиеЭлементов(ИспользованиеЭлементов, Объект, РежимВидимостиПоказатьТолькоВажные, РежимПроверкиИспользованияРеквизитов);
	
	Возврат ИспользованиеЭлементов;
	
КонецФункции

// Возвращает структуру с заголовками элементов.
// Параметры:
//	Объект - СправочникОбъект.Номенклатура - элемент справочника номенклатуры
//	СтруктураВидимостиЭлементов - Структура - структура видимости элементов.
//
// Возвращаемое значение:
//	Структура - структура заголовков элементов, ключ - имя элемента, значения - заголовок, содержит:
//		* ЕдиницаИзмерения - Строка
//		* ГруппаАгентскиеУслуги - Строка
//		* ДекорацияЗаголовокОбеспечение - Строка
//		* ГиперссылкаПерейтиВариантыКомплектации - Строка
//		* ГиперссылкаПерейтиТоварыДругогоКачества - Строка
//		* ГиперссылкаПерейтиШтрихкодыНоменклатуры - Строка
//		* ГиперссылкаПерейтиСоставНабора - Строка
//		* ГиперссылкаПерейтиСоставНабораВнимание - Строка
//		* ГиперссылкаПерейтиХарактеристикиНоменклатуры- Строка
//		* ГиперссылкаПерейтиУпаковкиНоменклатуры - Строка
//		* ГиперссылкаПерейтиУпаковкиНабора - Строка
//		* ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание - Строка
//		* ГиперссылкаПерейтиУпаковкиНабораВнимание - Строка
//		* ГиперссылкаПерейтиСертификатыНоменклатурыВнимание - Строка
//		* ГиперссылкаПерейтиСертификатыНоменклатуры - Строка
//		* ГиперссылкаПерейтиФайлы - Строка
//		* ГиперссылкаПерейтиСегменты - Строка
//		* ГиперссылкаПерейтиСоглашения - Строка
//
Функция ЗаголовкиЭлементов(Объект, ВидимостьЭлементов)
	
	ЗаголовкиЭлементов = Новый Структура;
	
	#Область ПризнакиТипаНоменклатуры
	
	ЭтоТовар				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара 	= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЭтоРабота 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоУслуга 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоНабор 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	
	#КонецОбласти
	
	ИспользуютсяХарактеристики = Объект.ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	
	ЗаголовкиЭлементов.Вставить("ЕдиницаИзмерения", ?(ЭтоТовар Или ЭтоМногооборотнаяТара,
															НСтр("ru='Единица хранения';uk='Одиниця зберігання'"),
															НСтр("ru='Единица измерения';uk='Одиниця вимірювання'")));
															
	Если ЭтоРабота Тогда
		ЗаголовкиЭлементов.Вставить("ГруппаАгентскиеУслуги", НСтр("ru='Работа выполняется по агентскому договору';uk='Робота виконується за агентським договором'"));
	Иначе
		ЗаголовкиЭлементов.Вставить("ГруппаАгентскиеУслуги", НСтр("ru='Услуга реализуется по агентскому договору';uk='Послуга реалізується за агентським договором'"));
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		ЗаголовкиЭлементов.Вставить("ДекорацияЗаголовокОбеспечение", НСтр("ru='Обеспечение';uk='Забезпечення'"));
	Иначе
		ЗаголовкиЭлементов.Вставить("ДекорацияЗаголовокОбеспечение", НСтр("ru='Обеспечение и производство';uk='Забезпечення і виробництво'"));
	КонецЕсли;            
	
	#Область ЗаголовкиГиперссылок
	
	Картинка = Новый Картинка;
	КартинкаПредупреждение = БиблиотекаКартинок.ПредупреждениеСНачалаСтроки;
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если РазделВиден("ГиперссылкаПерейтиТоварыДругогоКачества", ВидимостьЭлементов) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТоварыДругогоКачества.Номенклатура КАК Номенклатура,
		|	ТоварыДругогоКачества.НоменклатураБрак КАК НоменклатураБрак,
		|	ТоварыДругогоКачества.ГрадацияКачества КАК ГрадацияКачества
		|ИЗ
		|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
		|ГДЕ
		|	ТоварыДругогоКачества.Номенклатура = &Номенклатура";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ГиперссылкаПерейтиТоварыДругогоКачества");
	КонецЕсли;

	Если РазделВиден("ГиперссылкаПерейтиШтрихкодыНоменклатуры", ВидимостьЭлементов) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ГиперссылкаПерейтиШтрихкодыНоменклатуры");
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСоставНабора", ВидимостьЭлементов) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатурыТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
		|ГДЕ
		|	ВариантыКомплектацииНоменклатурыТовары.Ссылка = &ВариантКомплектацииНоменклатуры
		|	И НЕ ВариантыКомплектацииНоменклатурыТовары.Ссылка.ПометкаУдаления";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ГиперссылкаПерейтиСоставНабора");
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСоставНабора", ВидимостьЭлементов)
		Или РазделВиден("ГиперссылкаПерейтиВариантыКомплектации", ВидимостьЭлементов) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|ГДЕ
		|	ВариантыКомплектацииНоменклатуры.Владелец = &Номенклатура
		|	И НЕ ВариантыКомплектацииНоменклатуры.ПометкаУдаления";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ГиперссылкаПерейтиСоставНабораИлиГиперссылкаПерейтиВариантыКомплектации");
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиХарактеристикиНоменклатуры", ВидимостьЭлементов) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристики
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ГиперссылкаПерейтиХарактеристикиНоменклатуры");
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиУпаковкиНоменклатуры", ВидимостьЭлементов)
		Или РазделВиден("ГиперссылкаПерейтиУпаковкиНабора", ВидимостьЭлементов) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Владелец = &ВладелецУпаковки
		|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ГиперссылкаПерейтиУпаковкиНоменклатурыИЛИГиперссылкаПерейтиУпаковкиНабора");
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСертификатыНоменклатуры", ВидимостьЭлементов) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры КАК СертификатНоменклатуры
		|ИЗ
		|	РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатовНоменклатуры
		|ГДЕ
		|	ОбластиДействияСертификатовНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
		|	И (ОбластиДействияСертификатовНоменклатуры.Номенклатура = &Номенклатура
		|			ИЛИ ОбластиДействияСертификатовНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|	И НЕ ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.ПометкаУдаления
		|	И ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатуры.Действующий)";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ГиперссылкаПерейтиСертификатыНоменклатуры");
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиФайлы", ВидимостьЭлементов) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|ГДЕ
		|	НоменклатураПрисоединенныеФайлы.ВладелецФайла = &Номенклатура
		|	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ГиперссылкаПерейтиФайлы");
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСегменты", ВидимостьЭлементов) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НоменклатураСегмента.Сегмент КАК Сегмент
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|ГДЕ
		|	НоменклатураСегмента.Номенклатура = &Номенклатура";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ГиперссылкаПерейтиСегменты");
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СегментыНоменклатуры.Ссылка КАК Сегмент,
		|	СегментыНоменклатуры.Ответственный КАК Ответственный,
		|	СегментыНоменклатуры.СпособФормирования КАК СпособФормирования
		|ИЗ
		|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
		|ГДЕ
		|	НЕ СегментыНоменклатуры.ЭтоГруппа
		|	И НЕ СегментыНоменклатуры.ПометкаУдаления
		|	И СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ГиперссылкаПерейтиСегментыФормироватьДинамически");
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСоглашения", ВидимостьЭлементов) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоглашенияСПоставщиками.Ссылка) КАК КоличествоСоглашений,
		|	МАКСИМУМ(НЕ ТЧАгентскиеУслуги.Ссылка ЕСТЬ NULL
		|			ИЛИ НЕ СоглашенияСПоставщиками.ИспользоватьУказанныеАгентскиеУслуги) КАК ЕстьСоглашенияПоНоменклатуре
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками.АгентскиеУслуги КАК ТЧАгентскиеУслуги
		|		ПО СоглашенияСПоставщиками.Ссылка = ТЧАгентскиеУслуги.Ссылка
		|			И (ТЧАгентскиеУслуги.Номенклатура = &Номенклатура)
		|ГДЕ
		|	НЕ &ИспользуютсяХарактеристики
		|	И СоглашенияСПоставщиками.Партнер = &Партнер
		|	И (СоглашенияСПоставщиками.Контрагент = &Контрагент
		|			ИЛИ СоглашенияСПоставщиками.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
		|	И СоглашенияСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг)
		|	И (СоглашенияСПоставщиками.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ СоглашенияСПоставщиками.ДатаНачалаДействия <= &ТекущаяДата)
		|	И (СоглашенияСПоставщиками.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ СоглашенияСПоставщиками.ДатаОкончанияДействия >= &ТекущаяДата)
		|	И (НЕ ТЧАгентскиеУслуги.Ссылка ЕСТЬ NULL
		|			ИЛИ НЕ СоглашенияСПоставщиками.ИспользоватьУказанныеАгентскиеУслуги)";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ГиперссылкаПерейтиСоглашенияНеИспользуютсяХарактеристики");
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоглашенияСПоставщиками.Ссылка) КАК КоличествоСоглашений,
		|	МАКСИМУМ(НЕ ТЧАгентскиеУслуги.Ссылка ЕСТЬ NULL
		|			ИЛИ НЕ СоглашенияСПоставщиками.ИспользоватьУказанныеАгентскиеУслуги) КАК ЕстьСоглашенияПоНоменклатуре
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|		ПО ХарактеристикиНоменклатуры.Принципал = СоглашенияСПоставщиками.Партнер
		|			И (ХарактеристикиНоменклатуры.Контрагент = СоглашенияСПоставщиками.Контрагент
		|				ИЛИ СоглашенияСПоставщиками.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками.АгентскиеУслуги КАК ТЧАгентскиеУслуги
		|		ПО (СоглашенияСПоставщиками.Ссылка = ТЧАгентскиеУслуги.Ссылка)
		|			И (ТЧАгентскиеУслуги.Номенклатура = &Номенклатура)
		|			И (ТЧАгентскиеУслуги.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
		|ГДЕ
		|	&ИспользуютсяХарактеристики
		|	И ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристики
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
		|	И СоглашенияСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг)
		|	И (СоглашенияСПоставщиками.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ СоглашенияСПоставщиками.ДатаНачалаДействия <= &ТекущаяДата)
		|	И (СоглашенияСПоставщиками.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ СоглашенияСПоставщиками.ДатаОкончанияДействия >= &ТекущаяДата)
		|	И (НЕ ТЧАгентскиеУслуги.Ссылка ЕСТЬ NULL
		|			ИЛИ НЕ СоглашенияСПоставщиками.ИспользоватьУказанныеАгентскиеУслуги)";
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ГиперссылкаПерейтиСоглашенияИспользуютсяХарактеристики");
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);                          
	Запрос.УстановитьПараметр("Партнер", Объект.Принципал);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ИспользуютсяХарактеристики", ИспользуютсяХарактеристики);
	
	Если РазделВиден("ГиперссылкаПерейтиСоставНабора", ВидимостьЭлементов) Тогда 
		ВариантКомплектацииНоменклатуры = НаборыВызовСервера.ВариантКомплектацииНоменклатурыПоУмолчанию(
											Объект.Ссылка,
											Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		Запрос.УстановитьПараметр("ВариантКомплектацииНоменклатуры", ВариантКомплектацииНоменклатуры);
	Иначе
		Запрос.УстановитьПараметр("ВариантКомплектацииНоменклатуры", Справочники.ВариантыКомплектацииНоменклатуры.ПустаяСсылка());
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВариантКомплектацииНоменклатуры", ВариантКомплектацииНоменклатуры);
	
	Если Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		ВладелецХарактеристики = Объект.Ссылка;
	ИначеЕсли Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
		ВладелецХарактеристики = Объект.ВидНоменклатуры;
	ИначеЕсли Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
		ВладелецХарактеристики = Объект.ВладелецХарактеристик;
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладелецХарактеристики", ВладелецХарактеристики);
	
	Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		ВладелецУпаковки = Объект.Ссылка;
	Иначе 
		ВладелецУпаковки = Объект.НаборУпаковок;
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладелецУпаковки", ВладелецУпаковки);
		
	УстановитьПривилегированныйРежим(Истина);
	
	Таблицы = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,,Истина);
	
	УстановитьПривилегированныйРежим(Ложь);
	ВидимостьЭлемента = Ложь;
	
	Если РазделВиден("ГиперссылкаПерейтиТоварыДругогоКачества", ВидимостьЭлементов) Тогда
		Количество = Таблицы.ГиперссылкаПерейтиТоварыДругогоКачества.Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Товары другого качества';uk='Товари іншої якості'") 
																+ " (" + Количество + ")",,,,"ТоварыДругогоКачестваКоличество");
		ЗаголовкиЭлементов.Вставить("ГиперссылкаПерейтиТоварыДругогоКачества", ЗаголовокГиперссылки);
	КонецЕсли;
	
	
	Если РазделВиден("ГиперссылкаПерейтиШтрихкодыНоменклатуры", ВидимостьЭлементов) Тогда
		Количество = Таблицы.ГиперссылкаПерейтиШтрихкодыНоменклатуры.Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Штрихкоды';uk='Штрихкоди'") + " (" + Количество + ")",,,,"ШтрихкодыНоменклатурыКоличество");
		ЗаголовкиЭлементов.Вставить("ГиперссылкаПерейтиШтрихкодыНоменклатуры", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСоставНабора", ВидимостьЭлементов) Тогда 
		Количество = Таблицы.ГиперссылкаПерейтиСоставНабора.Количество();
		Если Количество <> 0 Тогда
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Состав набора';uk='Склад набору'") + " (" + Количество + ")",,,,"СоставНабора");
			ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиСоставНабораВнимание", Ложь);
		Иначе
			ВидимостьПредупреждения = Таблицы.ГиперссылкаПерейтиСоставНабораИлиГиперссылкаПерейтиВариантыКомплектации.Количество() = 0;
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(НСтр("ru='Настроить набор';uk='Настроїти набір'"),,,,"НастроитьНабор"),
				?(ВидимостьПредупреждения,Новый ФорматированнаяСтрока(КартинкаПредупреждение),""));
			ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиСоставНабораВнимание", ВидимостьПредупреждения);
		КонецЕсли;
		ЗаголовкиЭлементов.Вставить("ГиперссылкаПерейтиВариантыКомплектации", ЗаголовокГиперссылки);
		ЗаголовкиЭлементов.Вставить("ГиперссылкаПерейтиСоставНабора", ЗаголовокГиперссылки);
	ИначеЕсли РазделВиден("ГиперссылкаПерейтиВариантыКомплектации", ВидимостьЭлементов) Тогда	
		Количество = Таблицы.ГиперссылкаПерейтиСоставНабораИлиГиперссылкаПерейтиВариантыКомплектации.Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Варианты комплектации';uk='Варіанти комплектації'") + " (" + Количество + ")",,,,"ВариантыКомплектации");
		ЗаголовкиЭлементов.Вставить("ГиперссылкаПерейтиВариантыКомплектации", ЗаголовокГиперссылки);
		ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиСоставНабораВнимание", Ложь);
	Иначе
		ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиСоставНабораВнимание", Ложь);
	КонецЕсли;
		
	Если РазделВиден("ГиперссылкаПерейтиХарактеристикиНоменклатуры", ВидимостьЭлементов) Тогда
		КоличествоХарактеристик = Таблицы.ГиперссылкаПерейтиХарактеристикиНоменклатуры.Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + КоличествоХарактеристик + ")",,,,"ХарактеристикиНоменклатуры");
		ЗаголовкиЭлементов.Вставить("ГиперссылкаПерейтиХарактеристикиНоменклатуры", ЗаголовокГиперссылки);
	Иначе
		КоличествоХарактеристик = 0;
	КонецЕсли;
		
	Если РазделВиден("ГиперссылкаПерейтиУпаковкиНоменклатуры", ВидимостьЭлементов) 
			Или РазделВиден("ГиперссылкаПерейтиУпаковкиНабора", ВидимостьЭлементов) Тогда 
		Количество = Таблицы.ГиперссылкаПерейтиУпаковкиНоменклатурыИЛИГиперссылкаПерейтиУпаковкиНабора.Количество();
		Если Количество <> 0 Тогда 
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"УпаковкиНоменклатуры");
			ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание", Ложь);
		Иначе
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"УпаковкиНоменклатуры"));
			ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание", 
				Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
		КонецЕсли;
		ЗаголовкиЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатуры", ЗаголовокГиперссылки);
		Если Количество <> 0 Тогда 
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"УпаковкиНабора");
			ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНабораВнимание", Ложь);
		Иначе
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"УпаковкиНабора"));
			ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНабораВнимание", 
				Объект.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
		КонецЕсли;
		ЗаголовкиЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНабора", ЗаголовокГиперссылки);
	Иначе
		ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание", Ложь);
		ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНабораВнимание", Ложь);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСертификатыНоменклатуры", ВидимостьЭлементов) Тогда
		Количество = Таблицы.ГиперссылкаПерейтиСертификатыНоменклатуры.Количество();
		Если Количество <> 0 Тогда 
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"СертификатыНоменклатуры");
			ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание", Ложь);
		Иначе
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"СертификатыНоменклатуры"));
			ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание", Истина);
		КонецЕсли;
		ЗаголовкиЭлементов.Вставить("ГиперссылкаПерейтиСертификатыНоменклатуры", ЗаголовокГиперссылки);
	Иначе 
		ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание", Ложь);
	КонецЕсли;
		
	
	Если РазделВиден("ГиперссылкаПерейтиФайлы", ВидимостьЭлементов) Тогда
		Количество = Таблицы.ГиперссылкаПерейтиФайлы.Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Файлы';uk='Файли'") + " (" + Количество + ")",,,,"Файлы");
		ЗаголовкиЭлементов.Вставить("ГиперссылкаПерейтиФайлы", ЗаголовокГиперссылки);		
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСегменты", ВидимостьЭлементов) Тогда
		Сегменты = Таблицы.ГиперссылкаПерейтиСегменты.ВыгрузитьКолонку("Сегмент");
	
		ЕстьДинамическиеСегменты = Таблицы.ГиперссылкаПерейтиСегментыФормироватьДинамически.Количество() > 0;
		ТекстДинамическиеСегменты = ?(ЕстьДинамическиеСегменты, НСтр("ru=', без учета формируемых динамически';uk=', без урахування тих що формуються динамічно'"), "");
			
		Количество = Сегменты.Количество();
		Если Количество = 1 Тогда
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Сегмент';uk='Сегмент'") + " " + Сегменты[0] + ТекстДинамическиеСегменты,,,,"Сегменты");
		Иначе
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Сегменты';uk='Сегменти'") + " (" + Количество + ТекстДинамическиеСегменты + ")",,,,"Сегменты");
		КонецЕсли;
		ЗаголовкиЭлементов.Вставить("ГиперссылкаПерейтиСегменты", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСоглашения", ВидимостьЭлементов) Тогда
		
		Если Не ИспользуютсяХарактеристики Тогда
			ТаблицаПоСоглашениям = Таблицы.ГиперссылкаПерейтиСоглашенияНеИспользуютсяХарактеристики;
		Иначе
			ТаблицаПоСоглашениям = Таблицы.ГиперссылкаПерейтиСоглашенияИспользуютсяХарактеристики;
		КонецЕсли;
		
		Если ТаблицаПоСоглашениям.Количество() > 0 Тогда
			КоличествоСоглашений = ТаблицаПоСоглашениям[0].КоличествоСоглашений;
			ЕстьСоглашенияПоНоменклатуре = ТаблицаПоСоглашениям[0].ЕстьСоглашенияПоНоменклатуре;
		Иначе
			КоличествоСоглашений = 0;
			ЕстьСоглашенияПоНоменклатуре = Ложь;
		КонецЕсли;
		
		МожноДобавлятьСоглашения = ПравоДоступа("Добавление", Метаданные.Справочники.СоглашенияСПоставщиками);
		
		Если МожноДобавлятьСоглашения Тогда
			Если КоличествоСоглашений = 0 Тогда
				
				Если ИспользуютсяХарактеристики Тогда
					ГиперссылкаСоглашения = "СписокСоглашенийПоХарактеристикам";
					ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Характеристики не выбраны в соглашениях';uk='Характеристики не вибрані в офертах'"),,,,ГиперссылкаСоглашения);
				Иначе
					ГиперссылкаСоглашения = "СоглашенияСоздать";
					ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Создать соглашение';uk='Створити оферту'"),,,,ГиперссылкаСоглашения);
				КонецЕсли;
				
			ИначеЕсли Не ЕстьСоглашенияПоНоменклатуре Тогда
				
				ГиперссылкаСоглашения = "СоглашенияВыбрать";
				ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Выбрать в существующем соглашении';uk='Вибрати в існуючій оферті'"),,,,ГиперссылкаСоглашения);
			КонецЕсли;	
		Иначе
			
			Если КоличествоСоглашений = 0 Тогда
				СтрокаЗаголовкаГиперссылки = НСтр("ru='В соглашениях не выбрана';uk='В офертах не обрана'");
			Иначе
				СтрокаСоглашений = СтрокаСЧислом(";%1 соглашении;;%1 соглашениях;%1 соглашениях;%1 соглашениях",
													КоличествоСоглашений,
													ВидЧисловогоЗначения.Количественное,
													"L=ru");
				
				СтрокаЗаголовкаГиперссылки = НСтр("ru='Выбрана в %КоличествоСоглашений%';uk='Вибрана в%КоличествоСоглашений%'");
				СтрокаЗаголовкаГиперссылки = СтрЗаменить(СтрокаЗаголовкаГиперссылки, "%КоличествоСоглашений%", СтрокаСоглашений);
			КонецЕсли;
			
			Если ИспользуютсяХарактеристики Тогда
				ГиперссылкаСоглашения = "СписокСоглашенийПоХарактеристикам";
			Иначе
				ГиперссылкаСоглашения = "СписокСоглашенийПоНоменклатуре";
			КонецЕсли;
			
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(СтрокаЗаголовкаГиперссылки,,,,ГиперссылкаСоглашения);
						
		КонецЕсли;
		
		ЗаголовокСоглашения = Новый Структура;
		ЗаголовокСоглашения.Вставить("Заголовок", ЗаголовокГиперссылки);
		ЗаголовокСоглашения.Вставить("Гиперссылка", ГиперссылкаСоглашения);
		
		ЗаголовкиЭлементов.Вставить("ГиперссылкаПерейтиСоглашения", ЗаголовокСоглашения);
		
	КонецЕсли;
	
	#КонецОбласти
	
	НоменклатураЛокализация.ЗаголовкиЭлементов(ЗаголовкиЭлементов, Объект, ВидимостьЭлементов);
	
	Возврат ЗаголовкиЭлементов;

КонецФункции

// Параметры:
// 	ЭлементЗаголовок - Строка, ФорматированнаяСтрока, КлючИЗначение - см. ЗаголовкиЭлементов 
// Возвращаемое значение:
// 	Строка - заголовок
Функция ЗаголовокГиперссылки(ЭлементЗаголовок) Экспорт
	Если ТипЗнч(ЭлементЗаголовок.Значение) = Тип("Строка") 
		Или ТипЗнч(ЭлементЗаголовок.Значение) = Тип("ФорматированнаяСтрока") Тогда
		Возврат ЭлементЗаголовок.Значение;
	Иначе
		Возврат ЭлементЗаголовок.Значение.Заголовок;
	КонецЕсли;	
КонецФункции

Процедура ПереопределитьОбязательностьЗаполненияРеквизитовМеры(Объект, РеквизитыСПереопределеннойОбязательностьюЗаполнения, Мера)
	
	Если Объект = Неопределено Тогда
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить(Мера + "Числитель", Ложь);	
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить(Мера + "Знаменатель", Ложь);	
	Иначе
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить(Мера + "Числитель", Объект[Мера + "Использовать"]);	
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить(Мера + "Знаменатель", Объект[Мера + "Использовать"]);	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗависимостьРеквизитаМерыОтТипаНоменклатуры(ТаблицаРеквизитов, Реквизиты, ТипНоменклатуры, Мера)
	
	ЭтоТовар 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара 	= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты[Мера + "ЕдиницаИзмерения"];
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты[Мера + "Знаменатель"];
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты[Мера + "МожноУказыватьВДокументах"];
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты[Мера + "Числитель"];
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты[Мера + "Использовать"];
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
								
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("acccd4f2-263a-465a-84c4-86c54aaf286e");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Номенклатура.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет реквизиты ОсобенностьУчета и ЕдиницаИзмеренияСрокаГодности по данным справочника ВидыНоменклатуры.
                                   |Заполняет реквизит СтавкаНДС с типом СправочникСсылка.СтавкиНДС.'
                                   |;uk='Заповнює реквізити ОсобенностьУчета та ЕдиницаИзмеренияСрокаГодности за даними довідника ВидыНоменклатуры.
                                   |Заповнює реквізит СтавкаНДС з типом СправочникСсылка.СтавкиНДС.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.Номенклатура.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыНоменклатуры.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.Номенклатура.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.Номенклатура.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ЦеныНоменклатурыПоставщиков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.МатериалыИРаботыВПроизводстве.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	//++ НЕ УТ
	//-- НЕ УТ

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.Номенклатура";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|	И НЕ Номенклатура.УдалитьСтавкаНДС = &ПустаяСтавкаНДС";
	
	УчетНДСЛокализация.УстановитьПараметрЗапросаПустаяСтавкаНДСПеречислением(Запрос);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОбъектОбработки.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.Номенклатура КАК ОбъектОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО ОбъектОбработки.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|	ГДЕ
	|		ВидыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|		И (ОбъектОбработки.ОсобенностьУчета <> ВидыНоменклатуры.ОсобенностьУчета
	|			ИЛИ ОбъектОбработки.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОбъектОбработки.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.Номенклатура КАК ОбъектОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО ОбъектОбработки.ВладелецСерий = ВидыНоменклатуры.Ссылка
	|	ГДЕ
	|		ВидыНоменклатуры.ИспользоватьСрокГодностиСерии
	|		И (ОбъектОбработки.ЕдиницаИзмеренияСрокаГодности <> ВидыНоменклатуры.ЕдиницаИзмеренияСрокаГодности
	|			ИЛИ ОбъектОбработки.ЕдиницаИзмеренияСрокаГодности = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОбъектОбработки.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.Номенклатура КАК ОбъектОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО ОбъектОбработки.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|	ГДЕ
	|		ВидыНоменклатуры.ИспользоватьСрокГодностиСерии
	|		И (ОбъектОбработки.ЕдиницаИзмеренияСрокаГодности <> ВидыНоменклатуры.ЕдиницаИзмеренияСрокаГодности
	|			ИЛИ ОбъектОбработки.ЕдиницаИзмеренияСрокаГодности = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка))
	|
	|	) КАК ОбъектОбработки";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта  = "Справочник.Номенклатура";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВТЗаблокированоВидыНоменклатуры";
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
		Параметры.Очередь,
		"Справочник.ВидыНоменклатуры",
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры
	);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	ОбновляемыеДанные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОбъектыДляОбработки
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка    КАК Ссылка,
	|	ДанныеОбъекта.ВерсияДанных    КАК ВерсияДанных,
	|	ДанныеОбъекта.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ДанныеОбъекта.ВладелецСерий   КАК ВладелецСерий
	|ПОМЕСТИТЬ ВТНоменклатураДляЗапроса
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеОбъекта
	|		ПО ОбъектыДляОбработки.Ссылка = ДанныеОбъекта.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка          КАК Ссылка,
	|	ОбъектыДляОбработки.ВерсияДанных    КАК ВерсияДанных,
	|	ОбъектыДляОбработки.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ОбъектыДляОбработки.ВладелецСерий   КАК ВладелецСерий
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	ВТНоменклатураДляЗапроса КАК ОбъектыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ОбъектыДляОбработки.ВладелецСерий = ВидыНоменклатуры.Ссылка
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Ссылка       							КАК Ссылка,
	|	Данные.ВерсияДанных 							КАК ВерсияДанных,
	|	МАКСИМУМ(Данные.ОсобенностьУчета)				КАК ОсобенностьУчета,
	|	МАКСИМУМ(Данные.ЕдиницаИзмеренияСрокаГодности) 	КАК ЕдиницаИзмеренияСрокаГодности
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОбъектыДляОбработки.Ссылка        КАК Ссылка,
	|		ОбъектыДляОбработки.ВерсияДанных  КАК ВерсияДанных,
	|		ВидыНоменклатуры.ОсобенностьУчета КАК ОсобенностьУчета,
	|		NULL                              КАК ЕдиницаИзмеренияСрокаГодности
	|	ИЗ
	|		ВТНоменклатура КАК ОбъектыДляОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеОбъекта
	|			ПО ОбъектыДляОбработки.Ссылка = ДанныеОбъекта.Ссылка
	|			
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО ОбъектыДляОбработки.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|	ГДЕ
	|		ВидыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|		И (ДанныеОбъекта.ОсобенностьУчета <> ВидыНоменклатуры.ОсобенностьУчета
	|			ИЛИ ДанныеОбъекта.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОбъектыДляОбработки.Ссылка                     КАК Ссылка,
	|		ОбъектыДляОбработки.ВерсияДанных               КАК ВерсияДанных,
	|		NULL                                           КАК ОсобенностьУчета,
	|		ВидыНоменклатуры.ЕдиницаИзмеренияСрокаГодности КАК ЕдиницаИзмеренияСрокаГодности
	|	ИЗ
	|		ВТНоменклатура КАК ОбъектыДляОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеОбъекта
	|			ПО ОбъектыДляОбработки.Ссылка = ДанныеОбъекта.Ссылка
	|			
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО ОбъектыДляОбработки.ВладелецСерий = ВидыНоменклатуры.Ссылка
	|	ГДЕ
	|		ВидыНоменклатуры.ИспользоватьСрокГодностиСерии
	|		И (ДанныеОбъекта.ЕдиницаИзмеренияСрокаГодности <> ВидыНоменклатуры.ЕдиницаИзмеренияСрокаГодности
	|			ИЛИ ДанныеОбъекта.ЕдиницаИзмеренияСрокаГодности = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОбъектыДляОбработки.Ссылка                     КАК Ссылка,
	|		ОбъектыДляОбработки.ВерсияДанных               КАК ВерсияДанных,
	|		NULL                                   		   КАК ОсобенностьУчета,
	|		ВидыНоменклатуры.ЕдиницаИзмеренияСрокаГодности КАК ЕдиницаИзмеренияСрокаГодности
	|	ИЗ
	|		ВТНоменклатура КАК ОбъектыДляОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеОбъекта
	|			ПО ОбъектыДляОбработки.Ссылка = ДанныеОбъекта.Ссылка
	|			
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО ОбъектыДляОбработки.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|	ГДЕ
	|		ВидыНоменклатуры.ИспользоватьСрокГодностиСерии
	|		И (ДанныеОбъекта.ЕдиницаИзмеренияСрокаГодности <> ВидыНоменклатуры.ЕдиницаИзмеренияСрокаГодности
	|			ИЛИ ДанныеОбъекта.ЕдиницаИзмеренияСрокаГодности = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ОбъектыДляОбработки.Ссылка       КАК Ссылка,
	|		ОбъектыДляОбработки.ВерсияДанных КАК ВерсияДанных,
	|		NULL                             КАК ОсобенностьУчета,
	|		NULL                             КАК ЕдиницаИзмеренияСрокаГодности
	|	ИЗ
	|		ВТНоменклатура КАК ОбъектыДляОбработки
	|	) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Ссылка,
	|	Данные.ВерсияДанных";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[Результат.ВГраница()].Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если Не ЗначениеЗаполнено(СправочникОбъект.СтавкаНДС) Тогда
				СправочникОбъект.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(СправочникОбъект.УдалитьСтавкаНДС);
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ОсобенностьУчета) Тогда
				СправочникОбъект.ОсобенностьУчета = Выборка.ОсобенностьУчета;
				ОбъектИзменен = Истина;
			КонецЕсли;

			Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмеренияСрокаГодности) Тогда
				
				Если Не ЗначениеЗаполнено(СправочникОбъект.ЕдиницаИзмеренияСрокаГодности) Тогда
					
					ОбъектИзменен = Истина;
					
					СправочникОбъект.ЕдиницаИзмеренияСрокаГодности = Выборка.ЕдиницаИзмеренияСрокаГодности;
					
				ИначеЕсли Выборка.ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Сутки
					И СправочникОбъект.ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Час Тогда
					
					ОбъектИзменен = Истина;
					ОчиститьЗначение = Цел(СправочникОбъект.СрокГодности / 24) <> (СправочникОбъект.СрокГодности / 24);
					
					СправочникОбъект.СрокГодности = ?(ОчиститьЗначение, 0, СправочникОбъект.СрокГодности / 24);
					СправочникОбъект.ЕдиницаИзмеренияСрокаГодности = Выборка.ЕдиницаИзмеренияСрокаГодности;
					
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, 
		ПолноеИмяОбъекта
	);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
