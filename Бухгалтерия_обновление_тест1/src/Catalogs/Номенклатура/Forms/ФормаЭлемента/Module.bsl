
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	ЕстьПравоРедактирования = Справочники.ГруппыДоступаНоменклатуры.ЕстьПравоИзменения(Объект);
	
	ПараметрыДополнительныхСвойств = Новый Структура;
	ПараметрыДополнительныхСвойств.Вставить("Объект", Объект);
	ПараметрыДополнительныхСвойств.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ПараметрыДополнительныхСвойств.Вставить("СкрытьУдаленные", Ложь);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ПараметрыДополнительныхСвойств);
		
	Если Не ЕстьПравоРедактирования Тогда
		Элементы.СтраницыКарточкаНоменклатуры.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницаРеквизитыНоменклатуры.Видимость = Ложь;
	    ПараметрыВывода = Новый Структура;
	    ПараметрыВывода.Вставить("КодЯзыкаДляМногоязычныхПечатныхФорм", МультиязычностьУкр.КодЯзыкаИнтерфейса());
        КарточкаНоменклатуры = Справочники.Номенклатура.ТабличныйДокументКарточкиНоменклатуры(Объект, Неопределено, Ложь, ПараметрыВывода);
		Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			Элементы.ПодменюПерейти.Видимость = Ложь;
		КонецЕсли;
		ПриСозданииНаСервереЛокализация(Отказ, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
			
	// Запрет редактирования
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	ИспользоватьТоварныеКатегории = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории");
	
	Если Параметры.Свойство("РежимВыбора")
		И Параметры.РежимВыбора Тогда
		ДляВыбора = Истина;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры") Тогда
		МассивВидов = Справочники.ВидыНоменклатуры.ПолучитьПредустановленныеВидыНоменклатуры();
		Элементы.ВидНоменклатурыПереключатель.СписокВыбора.ЗагрузитьЗначения(МассивВидов);
		Элементы.ВидНоменклатурыПереключательОбязательныеПоля.СписокВыбора.ЗагрузитьЗначения(МассивВидов);
	КонецЕсли;
	
	КоэффициентПересчетаВКубическиеМетры = 
		НоменклатураСервер.КоэффициентПересчетаВКубическиеМетры(Константы.ЕдиницаИзмеренияОбъема.Получить());
	
	ПоказатьСоветПереходКРедактированию = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Справочник.Номенклатура.Форма.ФормаЭлемента",
																								"ПоказатьСоветПереходКРедактированию",
																								Истина);
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Установим доступность
		// ... формы в целом 
		ЭтаФорма.ТолькоПросмотр = Не ЕстьПравоРедактирования;
		
		// ... полей шаблонов этикетки и ценника
		Элементы.ИспользоватьИндивидуальныйШаблонЦенника.ТолькоПросмотр   = Не ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты.ИспользоватьИндивидуальныйШаблонЦенника);
		Элементы.ИспользоватьИндивидуальныйШаблонЭтикетки.ТолькоПросмотр = Не ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты.ИспользоватьИндивидуальныйШаблонЭтикетки);
		
		// ... поля картинки и кнопок его панели
		ЕстьПравоРедактированияКартинки    = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты.ФайлКартинки);
        Элементы.ГруппаФайлКартинки.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ФайлКартинки.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ДобавитьИзображение.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ИзменитьИзображение.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ОчиститьИзображение.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ВыбратьКартинкуИзПрисоединенныхФайлов.Видимость = ЕстьПравоРедактированияКартинки;
		
		// ... поля описание для сайта и кнопки его выбора
		ЕстьПравоРедактированияОписания = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты.ФайлОписанияДляСайта);
		Элементы.ФайлОписанияДляСайта.ТолькоПросмотр = Не ЕстьПравоРедактированияОписания;
		
		// Режим редактирования
		Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаКарточкаНоменклатуры;
		НастройкаВидимостиФормы = "СвернутьВсеГруппы";
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		
		СкрытьРаскрытьВсеГруппы(Истина);
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость=Ложь;
		
		Элементы.НастройкаВидимостиФормы.СписокВыбора.Удалить(0);
		
		ОбновитьКешРеквизитовВидаНоменклатуры();
		ОбновитьНастройкиРеквизитов();
		НастроитьФормуИОбновитьКарточку();
		НастроитьДоступностьБлокируемыхРеквизитов();
		
	Иначе	
		
		ПараметрыСозданияСтруктура = Новый Структура;
		ПараметрыСозданияСтруктура.Вставить("Наименование", "");
		ПараметрыСозданияСтруктура.Вставить("НаименованиеПолное", "");
		ПараметрыСозданияСтруктура.Вставить("ИсточникКопирования", Параметры.ЗначениеКопирования);
		
		Если Параметры.ДополнительныеПараметры <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыСозданияСтруктура, Параметры.ДополнительныеПараметры, Истина); 
		КонецЕсли;
			
		Если Параметры.Свойство("ТекстЗаполнения")
			И Не ПустаяСтрока(Параметры.ТекстЗаполнения) Тогда
			
			ПараметрыСозданияСтруктура.Наименование = Параметры.ТекстЗаполнения;
			
		КонецЕсли;
		
		ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Режим копирования
			Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры;
			НастройкаВидимостиФормы = "ПоказатьВсе";
			РежимВидимостиПоказатьТолькоВажные = Ложь;
			
			СкрытьРаскрытьВсеГруппы(Ложь);
			
			ЗаполнитьПоОбъектуКопирования();
			
			ВидНоменклатурыДоИзменения = Объект.ВидНоменклатуры;
		Иначе
			// Режим создания
			Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры;
			НастройкаВидимостиФормы = "ПоказатьОсновные";
			РежимВидимостиПоказатьТолькоВажные = Истина;
			
			СкрытьРаскрытьВсеГруппы(Ложь);
		КонецЕсли;
		
		ЗаполнитьПоПараметрамСоздания();
		НастроитьФормуИОбновитьКарточку();
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
			
	ПриСозданииНаСервереЛокализация(Отказ, СтандартнаяОбработка);

	ФормаИнициализирована = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	ПараметрыСозданияСтруктура = Новый Структура();
	ПараметрыСозданияСтруктура.Вставить("Наименование", Объект.Наименование);
	ПараметрыСозданияСтруктура.Вставить("НаименованиеПолное", Объект.НаименованиеПолное);
	
	ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
	
	ВариантКомплектацииНоменклатуры = НаборыВызовСервера.ВариантКомплектацииНоменклатурыПоУмолчанию(
		Объект.Ссылка,
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	ОбновитьАдресКартинки(Ложь);
	
	Если Не Объект.ФайлОписанияДляСайта.Пустая() Тогда
		ПутьКФайлуОписанию = Строка(Объект.ФайлОписанияДляСайта);
	КонецЕсли;
	
	Если ФормаИнициализирована Тогда
		ОбновитьКешРеквизитовВидаНоменклатуры();
		ОбновитьНастройкиРеквизитов();
		НастроитьФормуИОбновитьКарточку();
		НастроитьДоступностьБлокируемыхРеквизитов();
	КонецЕсли;
	
	ВидНоменклатурыДоИзменения = Объект.ВидНоменклатуры;
		
	ПриСозданииЧтенииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ПреобразоватьМожноУказыватьВДокументахВСтроку("Вес");
	ПреобразоватьМожноУказыватьВДокументахВСтроку("Объем");
	ПреобразоватьМожноУказыватьВДокументахВСтроку("Площадь");
	ПреобразоватьМожноУказыватьВДокументахВСтроку("Длина");
	
	Если Объект.ИспользоватьИндивидуальныйШаблонЦенника Тогда 
		ИспользоватьИндивидуальныйШаблонЦенника = 1;
	КонецЕсли;
	
	Если Объект.ИспользоватьИндивидуальныйШаблонЭтикетки Тогда 
		ИспользоватьИндивидуальныйШаблонЭтикетки = 1;
	КонецЕсли;
	
	Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		ИспользованиеУпаковок = "ИндивидуальныйНабор";
	Иначе
		ИспользованиеУпаковок = "ОбщийНабор";
	КонецЕсли;
						
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЕстьПравоРедактирования Тогда
		ПриОткрытииЛокализация(Отказ);
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПриОткрытииЛокализация(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не НастройкиКопированияЗаданы
		Или Не КонтрольУникальностиПередЗаписьюПроведен Тогда
		ПодготовитьДанныеДляИнтерактиваПередЗаписью(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		
		Если НастройкаВидимостиФормы = "СвернутьВсеГруппы" Тогда
			НастройкаВидимостиФормы = "ПоказатьВсе";
		КонецЕсли;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	
	Если Не Отказ
		И ПараметрыКопированияДополнительныхДанных.Количество() > 0
		И Не НастройкиКопированияЗаданы Тогда
		
		Отказ = Истина;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ИсточникКопирования", ПараметрыСоздания.ИсточникКопирования);
		ПараметрыФормы.Вставить("ПараметрыКопированияДополнительныхДанных", ПараметрыКопированияДополнительныхДанных);
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.НастройкиПараметровКопированияДополнительныхДанных",
			ПараметрыФормы,
			ЭтаФорма,
			,
			,
			,
			Новый ОписаниеОповещения("НастройкиПараметровКопированияДополнительныхДанныхЗавершение",
			ЭтаФорма),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресВременногоХранилищаТаблицаНайдено) Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура("АдресВременногоХранилищаТаблицаНайдено, ЭтоЗапись", АдресВременногоХранилищаТаблицаНайдено,Истина);
		ОткрытьФорму("Справочник.Номенклатура.Форма.КонтрольУникальности",
			ПараметрыФормы,ЭтаФорма,
			,
			,
			,
			Новый ОписаниеОповещения("ПроверитьУникальностьЗавершение",ЭтаФорма),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеДляИнтерактиваПередЗаписью(Отказ)
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	Если Не Отказ Тогда
		// Контроль уникальности вызываем всегда, т.к. нужно обязательно проверить уникальность рабочего наименования.
		АдресВременногоХранилищаТаблицаНайдено = ПроверитьУникальностьСформироватьНаименования(Истина, Отказ);
		ПараметрыКопированияДополнительныхДанных.Очистить();
	КонецЕсли;
	
	Если Не Отказ
		И ПараметрыСоздания().Свойство("ИсточникКопирования")
		И ЗначениеЗаполнено(ПараметрыСоздания().ИсточникКопирования)
		И Не НастройкиКопированияЗаданы Тогда
		СоответствияСкопированныхОбъектов = Новый Структура;
		
		Если Объект.ИспользованиеХарактеристик 
			= Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
			СоответствияСкопированныхОбъектов.Вставить("Характеристики");
		КонецЕсли;
		
		ВариантПереноса =
			НоменклатураСервер.ВариантПереносаНастроекПоХарактеристикам(Объект,
				ПараметрыСоздания().ИсточникКопирования,
				СоответствияСкопированныхОбъектов);
		Если ВариантПереноса = "ВзятьИзСоответствия" Тогда
			ПараметрыКопированияДополнительныхДанных.Добавить("КопироватьИндивидуальныеХарактеристики",
				НСтр("ru='Копировать индивидуальные характеристики';uk='Копіювати індивідуальні характеристики'"),
				Истина); 
		КонецЕсли;
		
		Если Объект.ИспользоватьУпаковки
			И Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
			СоответствияСкопированныхОбъектов.Вставить("Упаковки");
		КонецЕсли;
		
		ВариантПереноса =
			НоменклатураСервер.ВариантПереносаНастроекПоУпаковкам(Объект,
				ПараметрыСоздания().ИсточникКопирования,
				СоответствияСкопированныхОбъектов);
	
		Если ВариантПереноса = "ВзятьИзСоответствия" Тогда
			ПараметрыКопированияДополнительныхДанных.Добавить("КопироватьИндивидуальныеУпаковки",
				НСтр("ru='Копировать индивидуальные упаковки';uk='Копіювати індивідуальні упаковки'"),
				Истина); 
		КонецЕсли;
			
		Если Справочники.Номенклатура.ЕстьПодчиненныеОбъектыНоменклатураГТД(ПараметрыСоздания().ИсточникКопирования) Тогда
			ПараметрыКопированияДополнительныхДанных.Добавить("КопироватьНоменклатуруГТД",
				НСтр("ru='Копировать коды номенклатуры для налоговых документов';uk='Копіювати коди номенклатури для податкових документів'"),
				Истина); 
		КонецЕсли;
	
		НоменклатураЛокализация.ПараметрыКопированияДополнительныхДанных(
		    Объект,
			ПараметрыСоздания(),
			ПараметрыКопированияДополнительныхДанных,
			СоответствияСкопированныхОбъектов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
		Если ТипЗнч(ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры) = Тип("Структура") Тогда
			ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("НоменклатураСсылка", Объект.Ссылка);
		КонецЕсли;
	КонецЕсли; 
	
	ПередЗакрытиемЛокализация(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНоваяНоменклатура", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	ТекущийОбъект.ИспользоватьИндивидуальныйШаблонЭтикетки = Булево(ИспользоватьИндивидуальныйШаблонЭтикетки);
	ТекущийОбъект.ИспользоватьИндивидуальныйШаблонЦенника  = Булево(ИспользоватьИндивидуальныйШаблонЦенника);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НаименованиеДляПечатиСформировано");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочееНаименованиеСформировано");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СменаВидаНоменклатурыОтработана");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочееНаименованиеПроверено", Истина);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПриЗаписиНаСервереЛокализация(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ЗначениеЗаполнено(ДанныеФайлаHTML) Или ЗначениеЗаполнено(ДанныеФайлаКартинки) Тогда
		
		Если ЗначениеЗаполнено(ДанныеФайлаКартинки) Тогда
			
			ПараметрыФайлаКартинки = Новый Структура();
			ПараметрыФайлаКартинки.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайлаКартинки.Вставить("ВладелецФайлов", ТекущийОбъект.Ссылка);
			ПараметрыФайлаКартинки.Вставить("ИмяБезРасширения", ДанныеФайлаКартинки.ИмяБезРасширения);
			ПараметрыФайлаКартинки.Вставить("РасширениеБезТочки", ДанныеФайлаКартинки.Расширение);
			ПараметрыФайлаКартинки.Вставить("ВремяИзмененияУниверсальное", ДанныеФайлаКартинки.УниверсальноеВремяИзменения);
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
				ПараметрыФайлаКартинки,
				АдресКартинки,
				"",
				"НоменклатураПрисоединенныеФайлы");
			
			ТекущийОбъект.ФайлКартинки = ПрисоединенныйФайл;
			
			ДанныеФайлаКартинки = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеФайлаHTML) Тогда
			
			ПараметрыФайлаHTML = Новый Структура();
			ПараметрыФайлаHTML.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайлаHTML.Вставить("ВладелецФайлов", ТекущийОбъект.Ссылка);
			ПараметрыФайлаHTML.Вставить("ИмяБезРасширения", ДанныеФайлаHTML.ИмяБезРасширения);
			ПараметрыФайлаHTML.Вставить("РасширениеБезТочки", ДанныеФайлаHTML.Расширение);
			ПараметрыФайлаHTML.Вставить("ВремяИзмененияУниверсальное", ДанныеФайлаHTML.УниверсальноеВремяИзменения);
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
				ПараметрыФайлаHTML,
				АдресОписанияHTML,
				"",
				"НоменклатураПрисоединенныеФайлы");
			
			ТекущийОбъект.ФайлОписанияДляСайта = ПрисоединенныйФайл;
			
			ДанныеФайлаHTML = Неопределено;
		КонецЕсли;
		
		ТекущийОбъект.Записать();
		Прочитать();
	КонецЕсли;
	
	СоответствияСкопированныхОбъектов = Новый Структура;
	
	ПараметрКопирования = ПараметрыКопированияДополнительныхДанных.НайтиПоЗначению("КопироватьИндивидуальныеУпаковки");
	Если ПараметрКопирования <> Неопределено
		И ПараметрКопирования.Пометка Тогда
		Справочники.УпаковкиЕдиницыИзмерения.СкопироватьИерархиюУпаковок(Объект.Ссылка,
																		 ПараметрыСоздания().ИсточникКопирования,
																		 СоответствияСкопированныхОбъектов);
	КонецЕсли;
	
	ПараметрКопирования = ПараметрыКопированияДополнительныхДанных.НайтиПоЗначению("КопироватьИндивидуальныеХарактеристики");
	Если ПараметрКопирования <> Неопределено
		И ПараметрКопирования.Пометка Тогда
		
		СоответствиеХарактеристик = Новый Соответствие;
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ХарактеристикиНоменклатуры.Наименование,
		|	ХарактеристикиНоменклатуры.НаименованиеПолное,
		|	ХарактеристикиНоменклатуры.ДополнительныеРеквизиты.(
		|		Ссылка,
		|		НомерСтроки,
		|		Свойство,
		|		Значение,
		|		ТекстоваяСтрока
		|	)
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И (Не ХарактеристикиНоменклатуры.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Владелец", ПараметрыСоздания().ИсточникКопирования);
		
		ВыборкаХарактеристик = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаХарактеристик.Следующий() Цикл
			
			ХарактеристикаОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			
			ХарактеристикаОбъект.Наименование       = ВыборкаХарактеристик.Наименование;
			ХарактеристикаОбъект.НаименованиеПолное = ВыборкаХарактеристик.НаименованиеПолное;
			
			ВыборкаДополнительныеРеквизиты = ВыборкаХарактеристик.ДополнительныеРеквизиты; // ВыборкаИзРезультатаЗапроса
			
			ВыборкаДопРеквизитов = ВыборкаДополнительныеРеквизиты.Выбрать();
			
			Пока ВыборкаДопРеквизитов.Следующий() Цикл
				
				СтрокаДопРеквизитов = ХарактеристикаОбъект.ДополнительныеРеквизиты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДопРеквизитов,ВыборкаДопРеквизитов);
				
			КонецЦикла;
			
			ХарактеристикаОбъект.Владелец = Объект.Ссылка;
			ХарактеристикаОбъект.Записать();
			
			СоответствиеХарактеристик.Вставить(ВыборкаХарактеристик.Ссылка, ХарактеристикаОбъект.Ссылка);
			
		КонецЦикла;
		
		СоответствияСкопированныхОбъектов.Вставить("Характеристики", СоответствиеХарактеристик);
	КонецЕсли;
	
	ПараметрКопирования = ПараметрыКопированияДополнительныхДанных.НайтиПоЗначению("КопироватьНоменклатуруГТД");
	Если ПараметрКопирования <> Неопределено Тогда
		Если ПараметрКопирования.Пометка Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НоменклатураГТД.Наименование,
			|	НоменклатураГТД.КодУКТВЭД,
			|	НоменклатураГТД.НомерГТД,
			|	НоменклатураГТД.Комментарий,
			|	ВЫБОР
			|		КОГДА НоменклатураГТД.Владелец.НоменклатураГТД = НоменклатураГТД.Ссылка
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НоменклатураГТДПоУмолчанию
			|ИЗ
			|	Справочник.НоменклатураГТД КАК НоменклатураГТД
			|ГДЕ
			|	НоменклатураГТД.Владелец = &Владелец
			|	И НЕ НоменклатураГТД.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Владелец", ПараметрыСоздания().ИсточникКопирования);
			
			ВыборкаНоменклатурыГТД = Запрос.Выполнить().Выбрать();
			
			НоменклатураГТДПоУмолчанию = Справочники.НоменклатураГТД.ПустаяСсылка();
			
			Пока ВыборкаНоменклатурыГТД.Следующий() Цикл
				
				НоменклатураГТДОбъект = Справочники.НоменклатураГТД.СоздатьЭлемент();
				
				ЗаполнитьЗначенияСвойств(НоменклатураГТДОбъект, ВыборкаНоменклатурыГТД);
				
				НоменклатураГТДОбъект.Владелец = Объект.Ссылка;
				НоменклатураГТДОбъект.Записать();
				
				Если ВыборкаНоменклатурыГТД.НоменклатураГТДПоУмолчанию Тогда
					НоменклатураГТДПоУмолчанию = НоменклатураГТДОбъект.Ссылка;
				КонецЕсли; 	
			КонецЦикла;
			
			Если НоменклатураГТДПоУмолчанию <> Объект.НоменклатураГТД Тогда
				Объект.НоменклатураГТД = НоменклатураГТДПоУмолчанию;
				
				СправочникОбъект = РеквизитФормыВЗначение("Объект");
				// Только запись элемента для установки значения реквизита НоменклатураГТД, 
				// повторно выполнять все обработчики нет необходимости 
				СправочникОбъект.ОбменДанными.Загрузка = Истина;
				Попытка
					СправочникОбъект.Записать();
				Исключение
					//Сообщить(НСтр("ru='Не удалось установить ""Код номенклатуры для НН и номер ГТД"" по умолчанию'"));
				КонецПопытки; 
				ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	НоменклатураЛокализация.СкопироватьДополнительныеДанные(Объект,
		ПараметрыСоздания(),
		ПараметрыКопированияДополнительныхДанных,
		СоответствияСкопированныхОбъектов);
	
	Если Не Элементы.СтраницаКарточкаНоменклатуры.Доступность Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастройкаВидимостиФормы = "ПоказатьВсе";
		НастроитьФормуИОбновитьКарточку();
		СкрытьРаскрытьВсеГруппы(Ложь);
	Иначе
		НастроитьФормуИОбновитьКарточку();
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	НастроитьДоступностьБлокируемыхРеквизитов();
	
	ПараметрыКопированияДополнительныхДанных.Очистить();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	ПослеЗаписиНаСервереЛокализация(ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Номенклатура", ПараметрыЗаписи, Объект.Ссылка);

	Если ЗначениеЗаполнено(Штрихкод) Тогда
		
		ТекстВопроса =НСтр("ru='Зарегистрировать штрихкод?';uk='Зареєструвати штрихкод?'");
		
		Оповещение = Новый ОписаниеОповещения("ЗарегистрироватьШтрихкодЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru='Регистрация штрихкода';uk='Реєстрація штрихкоду'"));
	КонецЕсли;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ПослеЗаписиЛокализация(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		 ОбновитьНастройкиРеквизитов();
		 УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Элементы.Штрихкод.Видимость
				И Элементы.Штрихкод.Доступность Тогда
				Штрихкод = МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр).Штрихкод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ВидыНоменклатуры" Тогда
		
		ПриЗаписиВидаНоменклатуры();
	ИначеЕсли ИмяСобытия = "Запись_ШтрихкодыНоменклатуры"
		И Параметр = Объект.Ссылка Тогда
		
		НастроитьФормуИОбновитьКарточку();
	ИначеЕсли ИмяСобытия = "Запись_ТоварыДругогоКачества"
		И Параметр = Объект.Ссылка Тогда
		
		ОбработатьЗаписьТовараДругогоКачества();
		
	ИначеЕсли ИмяСобытия = "Запись_ВариантыКомплектацииНоменклатуры"
		И Параметр.Свойство("ВладелецКомплекта")
		И Параметр.ВладелецКомплекта = Объект.Ссылка Тогда
		
		Если Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать")
			И Параметр.Свойство("Основной")
			И Параметр.Основной Тогда
			
			ВариантКомплектацииНоменклатуры = Параметр.Комплект;
			
		КонецЕсли;
		
		НастроитьФормуИОбновитьКарточку();
		
	ИначеЕсли ИмяСобытия = "Запись_ХарактеристикиНоменклатуры" Тогда
		ОбработкаОповещенияЗапись_ХарактеристикиНоменклатуры(Источник);
	ИначеЕсли ИмяСобытия = "Запись_УпаковкиНоменклатурыСписок"
		И (Параметр = Объект.Ссылка Или Параметр = Объект.НаборУпаковок) Тогда
		НастроитьФормуИОбновитьКарточку();
	ИначеЕсли ИмяСобытия = "Запись_СертификатНоменклатуры" Тогда
		ОбработкаОповещенияЗапись_Запись_СертификатыНоменклатурыСписок(Параметр);
	ИначеЕсли ИмяСобытия = "Запись_Файл" 
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Если Параметр.ВладелецФайла = Объект.Ссылка Тогда
			Модифицированность = Истина;
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Если ВыборИзображения Тогда
				
				Объект.ФайлКартинки = СсылкаНаФайл;
				ОбновитьАдресКартинки(Истина);				
				
			ИначеЕсли ВыборФайлаОписания Тогда
				
				Объект.ФайлОписанияДляСайта = СсылкаНаФайл;
				ПутьКФайлуОписанию = СсылкаНаФайл;
				НастроитьФормуИОбновитьКарточку();
			
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "ВключитьУдалитьВСегмент"
		И Параметр = Объект.Ссылка Тогда
		НастроитьФормуИОбновитьКарточку();
	ИначеЕсли ИмяСобытия = "Запись_СоглашенияСПоставщиками" Тогда
		НастроитьФормуИОбновитьКарточку();
	ИначеЕсли ИмяСобытия = "ВыбранаУпаковкаДляОтчетов" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Коэффициент") Тогда
			Объект.КоэффициентЕдиницыДляОтчетов = Параметр.Коэффициент;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗапись_Запись_СертификатыНоменклатурыСписок(Сертификат)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры
	|ИЗ
	|	РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатовНоменклатуры
	|ГДЕ
	|	(ОбластиДействияСертификатовНоменклатуры.Номенклатура = &Номенклатура
	|			ИЛИ ОбластиДействияСертификатовНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|				И ОбластиДействияСертификатовНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И НЕ ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.ПометкаУдаления
	|	И ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатуры.Действующий)
	|	И ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры = &СертификатНоменклатуры";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("СертификатНоменклатуры", Сертификат);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		НастроитьФормуИОбновитьКарточку();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗапись_ХарактеристикиНоменклатуры(Характеристика)

	Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика,"Владелец");
	
	Если Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры 
		И Владелец = Объект.Ссылка 
		Или Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры 
		И Владелец = Объект.ВидНоменклатуры
		Или Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры 
		И Владелец = Объект.ВладелецХарактеристик Тогда
			НастроитьФормуИОбновитьКарточку();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастроитьФормуИОбновитьКарточкуКлиент(Элемент)
	
	НастроитьФормуИОбновитьКарточку();	
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыКарточкаНоменклатурыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.Номенклатура.ФормаЭлемента.Элемент.СтраницыКарточкаНоменклатуры.ПриСменеСтраницы");
	
	Если ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры Тогда
		
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Истина;
		ПоказатьСовет("ПереходКРедактированию");
		
	Иначе
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Ложь;
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка)
			Или Модифицированность Тогда
			
			ОчиститьСообщения();
			
			ТекстВопроса = НСтр("ru='Данные еще не записаны.
|Информация, отображаемая в карточке, обновится после записи.
|Записать элемент?'
|;uk='Дані ще не записані. 
|Інформація, яка відображається в картці, оновиться після запису. 
|Записати елемент?'");
			
			ПоказатьВопрос(Новый ОписаниеОповещения("СтраницыКарточкаНоменклатурыПриСменеСтраницыЗавершение", ЭтотОбъект),
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыКарточкаНоменклатурыПриСменеСтраницыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСовет(ИмяСовета)

	ИмяНастройки = "ПоказатьСовет" + ИмяСовета;
	
	Если ЭтотОбъект[ИмяНастройки] Тогда
		
			Если ИмяСовета = "ПереходКРедактированию" Тогда 
				ТекстСообщения = НСтр("ru='Чтобы быстро перейти к редактированию реквизита, кликните дважды по нему в карточке.';uk='Щоб швидко перейти до редагування реквізиту, клікніть двічі по ньому у картці.'");
			Иначе
				ВызватьИсключение НСтр("ru='Неизвестное имя совета. Обратитесь к разработчикам программы.';uk='Невідоме ім''я поради. Зверніться до розробників програми.'");
			КонецЕсли;
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Спасибо за совет';uk='Дякую за пораду'"));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьСоветЗавершение", ЭтотОбъект, ИмяНастройки);
			
			ПоказатьВопрос(ОписаниеОповещения,ТекстСообщения, СписокКнопок,,КодВозвратаДиалога.ОК, НСтр("ru='Полезный совет';uk='Корисна порада'"));
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоветЗавершение(Результат, ИмяНастройки) Экспорт
	
	ПоказатьСоветЗавершениеСервер(ИмяНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСоветЗавершениеСервер(Знач ИмяНастройки)
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("Справочник.Номенклатура.Форма.ФормаЭлемента",
															ИмяНастройки,
															Ложь);
	ЭтотОбъект[ИмяНастройки] = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ВидНоменклатурыПриИзмененииНастройкаФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУпаковкиПриИзменении(Элемент)
	
	Если Не Объект.ИспользоватьУпаковки Тогда
		Объект.НаборУпаковок = Неопределено;
	Иначе
		Объект.НаборУпаковок = РеквизитыВидаНоменклатуры.НаборУпаковок;
		Если Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры") Тогда
			ИспользованиеУпаковок = "ИндивидуальныйНабор";
		КонецЕсли;
		Объект.ПоставляетсяВМногооборотнойТаре   = Ложь;
		Объект.НоменклатураМногооборотнаяТара    = Неопределено;
		Объект.ХарактеристикаМногооборотнаяТара  = Неопределено;
	КонецЕсли;
	
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковокИндивидуальныйНаборПриИзменении(Элемент)
	Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры");
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковокОбщийНаборПриИзменении(Элемент)
	Объект.НаборУпаковок = Неопределено;
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура НаборУпаковокПриИзменении(Элемент)
	
	НаборУпаковокПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура НаборУпаковокПриИзмененииСервер()
	
	ИндивидуальныеУпаковки = Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
	
	Если Объект.ИспользоватьУпаковки
		И Не ИндивидуальныеУпаковки  Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						Объект.НаборУпаковок,
						Новый Структура("ЕдиницаИзмерения, ЕдиницаДляОтчетов, КоэффициентЕдиницыДляОтчетов"));
						НеЗаполняемыеРеквизиты = "";
		Если Не ЗначениеЗаполнено(РеквизитыОбъекта.ЕдиницаДляОтчетов) Тогда
			НеЗаполняемыеРеквизиты = "ЕдиницаДляОтчетов, КоэффициентЕдиницыДляОтчетов";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта, , НеЗаполняемыеРеквизиты);
	КонецЕсли;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура НаборУпаковокОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Если Не ЭтаФорма.Записать() Тогда
				
				ТекстСообщения = НСтр("ru='Ошибка записи элемента!';uk='Помилка запису елемента!'");
				ПоказатьПредупреждение(Неопределено, ТекстСообщения);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		
		ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.ФормаСписка", Новый Структура("Отбор", Отбор), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	ЕдиницаИзмеренияПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураМногооборотнаяТараПриИзменении(Элемент)
	
	НоменклатураМногооборотнаяТараПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураМногооборотнаяТараПриИзмененииСервер()
	
	ИспользуютсяХарактеристикиМногооборотнойТары = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.НоменклатураМногооборотнаяТара);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Объект.ХарактеристикаМногооборотнаяТара);

	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Номенклатура", Объект.НоменклатураМногооборотнаяТара);
	СтруктураСтроки.Вставить("Характеристика", Объект.ХарактеристикаМногооборотнаяТара);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", ИспользуютсяХарактеристикиМногооборотнойТары);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураСтроки, СтруктураДействий, Неопределено);

	Объект.НоменклатураМногооборотнаяТара = СтруктураСтроки.Номенклатура;
	Объект.ХарактеристикаМногооборотнаяТара = СтруктураСтроки.Характеристика;
	
	ИспользуютсяХарактеристикиМногооборотнойТары = СтруктураСтроки.ХарактеристикиИспользуются;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаДляОтчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ИспользоватьУпаковки Тогда
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Номенклатура", Объект.Ссылка);
		СтруктураПараметров.Вставить("НаборУпаковок", Объект.НаборУпаковок);
		СтруктураПараметров.Вставить("ЕдиницаХранения", Объект.ЕдиницаИзмерения);
		СтруктураПараметров.Вставить("ЕдиницаДляОтчетов", Объект.ЕдиницаДляОтчетов);
		
		ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.Форма.ФормаВыбораЕдиницыДляОтчетов",
				СтруктураПараметров,
				Элемент, , , , ,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВесИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Вес");
КонецПроцедуры

&НаКлиенте
Процедура ОбъемИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Объем");
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Площадь");
КонецПроцедуры

&НаКлиенте
Процедура ДлинаИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Длина");
КонецПроцедуры

&НаКлиенте
Процедура ВесМожноУказыватьВДокументахПриИзменении(Элемент)
	МераМожноУказыватьВДокументахПриИзменении("Вес");
КонецПроцедуры

&НаКлиенте
Процедура ОбъемМожноУказыватьВДокументахПриИзменении(Элемент)
	МераМожноУказыватьВДокументахПриИзменении("Объем");
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьМожноУказыватьВДокументахПриИзменении(Элемент)
	МераМожноУказыватьВДокументахПриИзменении("Площадь");
КонецПроцедуры

&НаКлиенте
Процедура ДлинаМожноУказыватьВДокументахПриИзменении(Элемент)
	МераМожноУказыватьВДокументахПриИзменении("Длина");
КонецПроцедуры

&НаКлиенте
Процедура ВесЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ВесЕдиницаИзмерения", СтандартнаяОбработка, "Вес");
КонецПроцедуры

&НаКлиенте
Процедура ОбъемЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ОбъемЕдиницаИзмерения", СтандартнаяОбработка, "Объем");
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ПлощадьЕдиницаИзмерения", СтандартнаяОбработка, "Площадь");
КонецПроцедуры

&НаКлиенте
Процедура ДлинаЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ДлинаЕдиницаИзмерения", СтандартнаяОбработка, "Длина");
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНажатие(ИмяПоля, СтандартнаяОбработка, ИмяМеры)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОповещения = Новый Структура("ИмяПоля, ИмяМеры", ИмяПоля, ИмяМеры);
	ОписаниеОповещения  = Новый ОписаниеОповещения("ЕдиницаИзмеренияНажатиеЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ИмяТипаИзмеряемойВеличины = "Перечисление.ТипыИзмеряемыхВеличин." + ИмяМеры;
	ТипИзмеряемойВеличины     = ПредопределенноеЗначение(ИмяТипаИзмеряемойВеличины);
	
	Отбор          = Новый Структура("ТипИзмеряемойВеличины", ТипИзмеряемойВеличины);
	ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, Объект[ИмяПоля]);
	
	ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.ФормаВыбора",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Модифицированность = Истина;
		
		Объект[ДополнительныеПараметры.ИмяПоля] = Результат;
	КонецЕсли;
	
	Мера = ДополнительныеПараметры.ИмяМеры;
	
	ТекстПредставленияЗначения = НСтр("ru='Можно указывать количество в %ЕдиницаИзмеренияМеры% в документах';uk='Можна вказувати кількість у %ЕдиницаИзмеренияМеры% в документах'");
	ТекстПредставленияЗначения = СтрЗаменить(ТекстПредставленияЗначения,
											"%ЕдиницаИзмеренияМеры%",
                                            Строка(Объект[ДополнительныеПараметры.ИмяПоля]));
	
    ИмяПоляМожноУказыватьВДокументах = СтрЗаменить(ДополнительныеПараметры.ИмяПоля, "ЕдиницаИзмерения", "МожноУказыватьВДокументах");
    Элементы[ИмяПоляМожноУказыватьВДокументах].СписокВыбора[1].Представление = ТекстПредставленияЗначения;
	
КонецПроцедуры
&НаКлиенте
Процедура ПринципалПриИзменении(Элемент)
	ПринципалПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	
	Если ИспользоватьТоварныеКатегории Тогда
		ПроизводительПриИзмененииСервер()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйШаблонЭтикеткаПриИзменении(Элемент)
	
	Объект.ШаблонЭтикетки = ПредопределенноеЗначение("Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка");
	Объект.ИспользоватьИндивидуальныйШаблонЭтикетки = (ИспользоватьИндивидуальныйШаблонЭтикетки = 1);
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйШаблонЦенникПриИзменении(Элемент)
	
	Объект.ШаблонЦенника = ПредопределенноеЗначение("Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка");
	Объект.ИспользоватьИндивидуальныйШаблонЦенника = ИспользоватьИндивидуальныйШаблонЦенника = 1;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(АдресКартинки) Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
		ДобавитьИзображениеНаКлиенте();
	Иначе
		ПросмотретьПрисоединенныйФайл("ФайлКартинки", "АдресКартинки",
			НСтр("ru='Отсутствует изображение для просмотра';uk='Відсутнє зображення для перегляду'"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Описание",
		НСтр("ru='Дополнительная информация';uk='Додаткова інформація'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОписанияДляСайтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогВыбораФайла.МножественныйВыбор = Ложь;
			ДиалогВыбораФайла.Фильтр = НСтр("ru='Все файлы (*.*)|*.*';uk='Всі файли (*.*)|*.*'");
			
			Если ЗначениеЗаполнено(ПутьКФайлуОписанию) Тогда
				ДиалогВыбораФайла.ПолноеИмяФайла = ПутьКФайлуОписанию;
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавлениеФайлаДиалогЗавершение",
			ЭтотОбъект,
			Новый Структура("ИмяРеквизита", "ДанныеФайлаHTML"));
			
			ДиалогВыбораФайла.Показать(ОписаниеОповещения);
			
	Иначе
		 ДобавитьФайлОписаниеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОписанияДляСайтаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПросмотретьПрисоединенныйФайл("ФайлОписанияДляСайта", "ФайлОписанияДляСайта",
		НСтр("ru='Файл описания не выбран';uk='Файл опису не вибрано'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОписанияДляСайтаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ФайлОписанияДляСайта = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	ПутьКФайлуОписанию = "";
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка)
	
	ПараметрыПереходаПоГиперссылке = Новый Структура("ИмяЭлемента,Гиперссылка,ИмяФормы,НавигационнаяСсылка,ИмяГруппы,ПараметрыФормы,РежимОткрытияОкнаФормы");
	ПараметрыПереходаПоГиперссылке.ИмяЭлемента = ИмяЭлемента;
	ПараметрыПереходаПоГиперссылке.Гиперссылка = Гиперссылка;
	
	Если ИмяЭлемента = "ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами" Тогда
		
		ПараметрыФормы = Новый Структура("НоменклатураФильтраПоСвойствам", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Справочник.Номенклатура.Форма.ФормаСписка";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиТоварыДругогоКачества" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "РегистрСведений.ТоварыДругогоКачества.Форма.ФормаСписка";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиШтрихкодыНоменклатуры" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "РегистрСведений.ШтрихкодыНоменклатуры.ФормаСписка";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиВариантыКомплектации"
		Или ИмяЭлемента = "ГиперссылкаПерейтиСоставНабора" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		Если Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
			
			Если ЗначениеЗаполнено(ВариантКомплектацииНоменклатуры) Тогда
				ПараметрыФормы = Новый Структура("Ключ", ВариантКомплектацииНоменклатуры);
				
				ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Справочник.ВариантыКомплектацииНоменклатуры.Форма.СоставНабора";
				ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
			Иначе
				Если Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать") Тогда
					Отбор = Новый Структура;
					Отбор.Вставить("Владелец", Объект.Ссылка);
					Отбор.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
					ПараметрыФормы = Новый Структура("Отбор", Отбор);
					
					ПараметрыПереходаПоГиперссылке.ИмяФормы       =  "Справочник.ВариантыКомплектацииНоменклатуры.Форма.СоставНабора";
					ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("Владелец", Объект.Ссылка);
					ПараметрыФормы = Новый Структура("Отбор", Отбор);
					
					ПараметрыПереходаПоГиперссылке.ИмяФормы       =  "Справочник.ХарактеристикиНоменклатуры.ФормаСписка";
					ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Отбор = Новый Структура;
			Отбор.Вставить("Владелец", Объект.Ссылка);
			ПараметрыФормы = Новый Структура("Отбор", Отбор);
			
			ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Справочник.ВариантыКомплектацииНоменклатуры.Форма.ФормаСписка";
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиХарактеристикиНоменклатуры" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Справочник.ХарактеристикиНоменклатуры.ФормаСписка";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиУпаковкиНоменклатуры" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Справочник.УпаковкиЕдиницыИзмерения.ФормаСписка";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиУпаковкиНабора" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.НаборУпаковок);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Справочник.УпаковкиЕдиницыИзмерения.ФормаСписка";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПрогнозыРасходаУпаковок" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы 	  = "РегистрСведений.ПрогнозыРасходаУпаковок.Форма.ФормаСписка";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиРазмещениеНоменклатуры" Тогда
		
		Отбор = Новый Структура("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам.Форма.ФормаСписка";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСертификатыНоменклатуры" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Справочник.СертификатыНоменклатуры.Форма.ФормаСпискаКонтекст";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиФайлы" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности" Тогда
		
		Отбор = Новый Структура("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы 	  = "РегистрСведений.НастройкаРаспределенияПоНаправлениямДеятельности.ФормаСписка";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСовместныеПродажи" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",  Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Справочник.Номенклатура.Форма.СовместныеПродажи";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСегменты" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "РегистрСведений.НоменклатураСегмента.Форма.СегментыНоменклатурыПараметрическая";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
				
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностей" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор",	Отбор);
		ПараметрыФормы.Вставить("Источник",	"Номенклатура");
				
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Обработка.НастройкаСпособовОбеспеченияПотребностей.Форма.Форма";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиНастройкаПоддержанияЗапасов" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор",	Отбор);
		ПараметрыФормы.Вставить("Источник",	"Номенклатура");
				
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Обработка.НастройкаПоддержанияЗапасов.Форма.Форма";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПрайсЛистКомпании" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура",  Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Обработка.ПрайсЛист.Форма.Форма";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПрайсЛистыПоставщиков" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура",  Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Обработка.ПрайсЛистПоставщика.Форма.Форма";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиИсторияИзмененияЦенКомпании" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "РегистрСведений.ЦеныНоменклатуры.Форма.ФормаСписка";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиков" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке.ИмяФормы       = "РегистрСведений.ЦеныНоменклатурыПоставщиков.Форма.ФормаСписка";
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСоглашения" Тогда
		
		Если Гиперссылка = "СоглашенияВыбрать"
			Или Гиперссылка = "СписокСоглашенийПоНоменклатуре" Тогда
			
			ОтборСоглашений = Новый Структура;
			ОтборСоглашений.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг"));
			
	        ОтборПользовательский = Новый Структура;
			ОтборПользовательский.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.СостоянияСоглашенийСПоставщиками.Действует"));
			
			МассивКонтрагентовДляОтбора = Новый Массив;
			МассивКонтрагентовДляОтбора.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
			МассивКонтрагентовДляОтбора.Добавить(Объект.Контрагент);
			
			ОтборСоглашений.Вставить("Контрагент", Новый ФиксированныйМассив(МассивКонтрагентовДляОтбора));
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", ОтборСоглашений);
			ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ОтборПользовательский);
			ПараметрыФормы.Вставить("ВключитьОтборПоАгентскойУслуге", Гиперссылка = "СписокСоглашенийПоНоменклатуре");
			
			ПараметрыСозданияСоглашения = Новый Структура;
			ПараметрыСозданияСоглашения.Вставить("АгентскаяУслугаНоменклатура", Объект.Ссылка);
			
			ПараметрыФормы.Вставить("ДополнительныеПараметры", ПараметрыСозданияСоглашения);
			
			ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Справочник.СоглашенияСПоставщиками.ФормаСписка";
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
			
		ИначеЕсли Гиперссылка = "СоглашенияСоздать" Тогда
			
			ЗначенияЗаполненияСоглашений = Новый Структура;
			ЗначенияЗаполненияСоглашений.Вставить("Партнер", Объект.Принципал);
			ЗначенияЗаполненияСоглашений.Вставить("Статус",  ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийСПоставщиками.Действует"));
			ЗначенияЗаполненияСоглашений.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг"));
			ЗначенияЗаполненияСоглашений.Вставить("Контрагент", Объект.Контрагент);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияСоглашений);
			
			ПараметрыСозданияСоглашения = Новый Структура;
			ПараметрыСозданияСоглашения.Вставить("АгентскаяУслугаНоменклатура", Объект.Ссылка);
			ПараметрыФормы.Вставить("ДополнительныеПараметры", ПараметрыСозданияСоглашения);
			
			ПараметрыПереходаПоГиперссылке.ИмяФормы 	  = "Справочник.СоглашенияСПоставщиками.ФормаОбъекта";
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
			
		ИначеЕсли Гиперссылка = "СписокСоглашенийПоХарактеристикам" Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
			
			ПараметрыПереходаПоГиперссылке.ИмяФормы       = "Справочник.Номенклатура.Форма.СоглашенияСПоставщикамиПоХарактеристикам";
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы = ПараметрыФормы;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы = Неопределено Тогда
		ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы = РежимОткрытияОкнаФормы.Независимый;
	КонецЕсли;	
	
	Возврат ПараметрыПереходаПоГиперссылке
КонецФункции

&НаСервере
Функция ПредставлениеВсплывающейГруппы(ИмяГруппы)
	
    ТекстИсключения = НСтр("ru='Не определено действие по гиперссылке для режима, когда у пользователя нет прав на редактирование.';uk='Не визначено дію за гіперпосиланням для режиму, коли у користувача немає прав на редагування.'");
    ВызватьИсключение ТекстИсключения;
	
    Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ИмяЭлемента, Гиперссылка)
	
	ОчиститьСообщения();
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Данные еще не записаны.
|Переход к дополнительной информации возможен только после записи элемента.
|Записать элемент?'
|;uk='Дані ще не записані. 
|Перехід до додаткової інформації можливий тільки після запису елемента. 
|Записати елемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента,
																		ДополнительныеПараметры.Гиперссылка);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(Элемент.Имя, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.Номенклатура.Форма.ФормаЭлемента.Команда." + ПараметрыПереходаПоГиперссылке.ИмяЭлемента);
	
	Если ПараметрыПереходаПоГиперссылке.ИмяФормы <> Неопределено Тогда
		Если ПараметрыПереходаПоГиперссылке.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаСписка" Тогда
			Оповестить("ФильтрПоАналогичнымСвойствам_Номенклатура", Объект.Ссылка, Объект.Ссылка);
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , ЭтаФорма.УникальныйИдентификатор, , , ,
			ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	ИначеЕсли ПараметрыПереходаПоГиперссылке.НавигационнаяСсылка <> Неопределено Тогда
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(ПараметрыПереходаПоГиперссылке.НавигационнаяСсылка);
	ИначеЕсли ПараметрыПереходаПоГиперссылке.ИмяГруппы <> Неопределено  Тогда
		Если ЕстьПравоРедактирования Тогда
			Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры;
			РазвернутьСворачиваемуюГруппу(ПараметрыПереходаПоГиперссылке.ИмяГруппы);
			Элементы[ПараметрыПереходаПоГиперссылке.ИмяГруппы].Показать();
		Иначе
			ТабличныйДокумент = ПредставлениеВсплывающейГруппы(ПараметрыПереходаПоГиперссылке.ИмяГруппы);
			ТабличныйДокумент.Показать(Элементы[ПараметрыПереходаПоГиперссылке.ИмяГруппы].Заголовок);
		КонецЕсли;
	Иначе
		ТекстИсключения = НСтр("ru='Не определено действие по гиперссылке.';uk='Не визначено дію за гіперпосиланням.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
	ПараметрыСозданияСтруктура = Новый Структура(ПараметрыСоздания);
	ПараметрыСозданияСтруктура.Наименование = Объект.Наименование;
	ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
	ПараметрыСозданияСтруктура = Новый Структура(ПараметрыСоздания);
	ПараметрыСозданияСтруктура.НаименованиеПолное = Объект.НаименованиеПолное;
	ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУникальность(Команда)
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = Ложь;
	АдресВременногоХранилищаТаблицаНайдено = ПроверитьУникальностьСервер(Отказ); 
	
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(АдресВременногоХранилищаТаблицаНайдено) Тогда
			ПараметрыФормы = Новый Структура("АдресВременногоХранилищаТаблицаНайдено, Запись", АдресВременногоХранилищаТаблицаНайдено, Ложь);
			ОткрытьФорму("Справочник.Номенклатура.Форма.КонтрольУникальности",
				ПараметрыФормы,ЭтаФорма,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца,
				Новый ОписаниеОповещения("ПроверитьУникальностьЗавершение",
					ЭтаФорма),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
				ПоказатьПредупреждение(Неопределено,НСтр("ru='Позиция номенклатуры уникальна';uk='Позиція номенклатури унікальна'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьУникальностьСервер(Отказ)
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	Если Не Отказ Тогда
		АдресВременногоХранилищаТаблицаНайдено = ПроверитьУникальностьСформироватьНаименования(Ложь);
	Иначе
		АдресВременногоХранилищаТаблицаНайдено = "";
	КонецЕсли;
	
	Возврат АдресВременногоХранилищаТаблицаНайдено;
	
КонецФункции

// Параметры:
// 	Результат - см. НоменклатураКлиент.НовыйРезультатОбработкиЗавершения
// 	ДополнительныеПараметры - Неопределено - 
&НаКлиенте
Процедура ПроверитьУникальностьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Действие = "ВыбратьСуществующую" Тогда
		
		ПараметрыОповещения = Новый Структура("ЭтоНоваяНоменклатура", Ложь);
		Оповестить("Запись_Номенклатура",ПараметрыОповещения,Результат.Ссылка);
		
		Если ДляВыбора Тогда
			ОповеститьОВыборе(Результат.Ссылка);
		Иначе
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли Результат.Действие = "ПродолжитьЗапись" Тогда
		
		КонтрольУникальностиПередЗаписьюПроведен = Истина;
		
		Попытка
			ЭлементЗаписан = Записать();
		Исключение
			КонтрольУникальностиПередЗаписьюПроведен = Ложь;
			Возврат;
		КонецПопытки;
		
		Если Не ЭлементЗаписан Тогда
			КонтрольУникальностиПередЗаписьюПроведен = Ложь;
			Возврат;
		КонецЕсли;
		
		Если ДляВыбора Тогда
			ОповеститьОВыборе(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаНоменклатурыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.Номенклатура.ФормаЭлемента.Элемент.КарточкаНоменклатуры.ОбработкаРасшифровки");
	
	Если Не ЗначениеЗаполнено(Расшифровка) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Элементы.ГруппаГруппировкаЛевоПраво.Видимость Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость=Истина;
	КонецЕсли;
	
	Если ТипЗнч(Расшифровка) = Тип("Строка")
		Или ТипЗнч(Расшифровка) = ТипЗнч(Расшифровка) = Тип("ФорматированнаяСтрока") Тогда
		ИмяЭлемента = Расшифровка;
		Гиперссылка = "";
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ИмяЭлемента = Расшифровка.ИмяЭлемента;
		Гиперссылка = Расшифровка.Гиперссылка;
	Иначе
		ТекстИсключения = НСтр("ru='Неподдерживаемый тип параметры расшифровки.';uk='Непідтримуваний тип параметри розшифровки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	Если СтрНайти(ИмяЭлемента, "ГиперссылкаПерейти") <> 0 Тогда
		ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ИмяЭлемента, Гиперссылка);
	ИначеЕсли Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Если ЕстьПравоРедактирования Тогда
			Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры;
			
			РазвернутьСворачиваемуюГруппу(ИмяЭлемента);
			ТекущийЭлементВыбор = ИмяЭлемента;
			ПодключитьОбработчикОжидания("УстановитьАктивностьТекущийЭлемент",0.0001,Истина);
		Иначе
			Если Объект.Свойство(ИмяЭлемента) Тогда
				Если ТипЗнч(Объект[ИмяЭлемента]) <> Тип("Строка")
					И ТипЗнч(Объект[ИмяЭлемента]) <> Тип("Булево")
					И ЗначениеЗаполнено(Объект[ИмяЭлемента]) Тогда
					ПоказатьЗначение(,Объект[ИмяЭлемента]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстИсключения = НСтр("ru='Необрабатываемый тип параметр расшифровки.';uk='Необроблюваний тип параметр розшифровки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьТекущийЭлемент()
	ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийЭлементВыбор];
КонецПроцедуры


&НаКлиенте
Процедура ВестиУчетПоГТДПриИзменении(Элемент)
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	ЭтоСтавкаБезНДСИлиНеНДС = (Объект.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС")) ИЛИ (Объект.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.НеНДС"));
	Если НЕ ЭтоСтавкаБезНДСИлиНеНДС Тогда
		Объект.ЛьготаНДС = "";
		Объект.КодЛьготы = "";
	КонецЕсли; 
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура ИзмеряетсяТолькоВСуммовомВыраженииПриИзменении(Элемент)
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура ПодакцизныйТоварПриИзменении(Элемент)
	Если Объект.ПодакцизныйТовар Тогда
	     Объект.ВестиУчетПоГТД = Истина;
	Иначе
	     Объект.СтатьяДекларацииПоАкцизномуНалогу = Неопределено;
		 Объект.УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека = Ложь;
	КонецЕсли;
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru='Для выбора кода для налоговой накладной и номера ГТД по умолчанию необходимо записать объект. Записать?';uk='Для вибору коду для податкової накладної та номера ВМД за замовчуванням необхідно записати об''єкт. Записати?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("НоменклатураГТДНачалоВыбораЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураГТДНачалоВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
	Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
	Иначе
        Возврат;
    КонецЕсли;
	
	НоменклатураГТДНачалоВыбораФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураГТДНачалоВыбораФрагмент()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.НоменклатураГТД.Форма.ФормаВыбора", ПараметрыФормы, Элементы.НоменклатураГТД);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураГТДПриИзменении(Элемент)
	
	УстановитьСвойстваВидаКодаДляНН(
        Объект.НоменклатураГТД, 
		Элементы.ВидКодаДляННДекорация.Заголовок, 
		Элементы.ВидКодаДляННДекорация.Видимость,
		Элементы.НоменклатураГТД.Видимость
    );
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьНаименованиеДляПечатиПоШаблону(Команда)
	
	ЗаполнитьНаименованиеПоШаблонуСервер("ДляПечати");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРабочееНаименованиеПоШаблону(Команда)
	
	ЗаполнитьНаименованиеПоШаблонуСервер("Рабочее");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьШтрихкодЗавершение(Знач Результат, Знач ПараметрКоманды) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Штрихкод = Неопределено;
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Номенклатура", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("Штрихкод", Штрихкод);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		Штрихкод = Неопределено;
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.ФормаЗаписи", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	ДанныеФайлаКартинки = Неопределено;
	ОбновитьАдресКартинки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("ФайлКартинки", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра';uk='Відсутнє зображення для перегляду'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлКартинки);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования';uk='Відсутнє зображення для редагування'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
		Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);

	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		СтруктураПараметрыВыбора,,,,,
		Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        Объект.ФайлКартинки = Результат;
		ОбновитьАдресКартинки(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейти(Команда)
	
	ИмяЭлемента = Команда.Имя;
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Команда", "Гиперссылка");

	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ИмяЭлемента, "");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.РазблокированиеРеквизитов",,,,,, 
			Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		
		Если Результат.Найти("ИспользоватьУпаковки") <> Неопределено Тогда
			Элементы.ИспользованиеУпаковокИндивидуальныйНабор.ТолькоПросмотр = Ложь;
			Элементы.ИспользованиеУпаковокОбщийНабор.ТолькоПросмотр = Ложь;
		КонецЕсли;
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры




#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПринципалПриИзмененииНаСервере()
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Принципал, Объект.Контрагент);
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиВидаНоменклатуры()

	ОбновитьКешРеквизитовВидаНоменклатуры();
	НастроитьФормуИОбновитьКарточку();

КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере()
	
	ОбновитьКешРеквизитовВидаНоменклатуры();
	
	Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(Объект, , , ВидНоменклатурыДоИзменения);
	
	ВидНоменклатурыДоИзменения = Объект.ВидНоменклатуры;
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		
		Если ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры) Тогда
			Объект.Наименование = "";
			ФормироватьРабочееНаименование = Истина;
		ИначеЕсли ЗначениеЗаполнено(ПараметрыСоздания().Наименование) Тогда
			// После обратного переключения на вид номенклатуры без шаблона возвращаем исходное наименование.
			Объект.Наименование = ПараметрыСоздания().Наименование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры) Тогда
			Объект.НаименованиеПолное = "";
			ФормироватьНаименованиеДляПечати = Истина;
		ИначеЕсли ЗначениеЗаполнено(ПараметрыСоздания().НаименованиеПолное) Тогда
			// После обратного переключения на вид номенклатуры без шаблона возвращаем исходное наименование.
			Объект.НаименованиеПолное = ПараметрыСоздания().НаименованиеПолное;
		КонецЕсли;
		
		Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда 
			ИспользованиеУпаковок = "ИндивидуальныйНабор";
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьНастройкиРеквизитов();
	
	ИспользуетсяИндивидуальныйШаблонЦенника  = ЗначениеЗаполнено(Объект.ШаблонЦенника)
												И (Объект.ШаблонЦенника <> РеквизитыВидаНоменклатуры.ШаблонЦенника);
	ИспользуетсяИндивидуальныйШаблонЭтикетки = ЗначениеЗаполнено(Объект.ШаблонЭтикетки)
												И (Объект.ШаблонЭтикетки <> РеквизитыВидаНоменклатуры.ШаблонЭтикетки);
	
	Объект.ИспользоватьИндивидуальныйШаблонЦенника  = ИспользуетсяИндивидуальныйШаблонЦенника;
	Объект.ИспользоватьИндивидуальныйШаблонЭтикетки = ИспользуетсяИндивидуальныйШаблонЭтикетки;
	
	Объект.ШаблонЦенника  = ?(ИспользуетсяИндивидуальныйШаблонЦенника, Объект.ШаблонЦенника,
		Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	Объект.ШаблонЭтикетки = ?(ИспользуетсяИндивидуальныйШаблонЭтикетки, Объект.ШаблонЭтикетки,
		Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	
	ОтборНастроекШаблонаЦенников = Новый Структура("ИмяРеквизита", "ШаблонЦенника");
	НастройкиШаблонаЦенников     = ТаблицаНастроекРеквизитов.НайтиСтроки(ОтборНастроекШаблонаЦенников);
	
	Если НастройкиШаблонаЦенников.Количество() > 0 Тогда
		
		Если Не Объект.ИспользоватьИндивидуальныйШаблонЦенника
			И НастройкиШаблонаЦенников[0].ЗаполнятьОбязательно
			И Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЦенника) Тогда
			
			ИспользоватьИндивидуальныйШаблонЦенника = 1;
			Объект.ИспользоватьИндивидуальныйШаблонЦенника = Истина;
			
		ИначеЕсли Не Объект.ИспользоватьИндивидуальныйШаблонЦенника Тогда
			ИспользоватьИндивидуальныйШаблонЦенника = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтборНастроекШаблонаЭтикеток = Новый Структура("ИмяРеквизита", "ШаблонЭтикетки");
	НастройкиШаблонаЭтикеток     = ТаблицаНастроекРеквизитов.НайтиСтроки(ОтборНастроекШаблонаЭтикеток);
	
	Если НастройкиШаблонаЭтикеток.Количество() > 0 Тогда
		
		Если Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки
			И НастройкиШаблонаЭтикеток[0].ЗаполнятьОбязательно
			И Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЭтикетки) Тогда
			
			ИспользоватьИндивидуальныйШаблонЭтикетки = 1;
			Объект.ИспользоватьИндивидуальныйШаблонЭтикетки = Истина;
			
		ИначеЕсли Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки Тогда
			ИспользоватьИндивидуальныйШаблонЭтикетки = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВидНоменклатуры.АвтоОтметкаНезаполненного = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНастройкаФормы()
	
	ВидНоменклатурыПриИзмененииНаСервере();
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКешРеквизитовВидаНоменклатуры()
	
	ИменаРеквизитов =
	"ШаблонРабочегоНаименованияНоменклатуры,
	|ЗапретРедактированияРабочегоНаименованияНоменклатуры,
	|ШаблонНаименованияДляПечатиНоменклатуры,
	|ЗапретРедактированияНаименованияДляПечатиНоменклатуры,
	|НастройкаИспользованияСерий,
	|ИспользованиеХарактеристик,
	|ИспользоватьСерии,
	|ИспользоватьСрокГодностиСерии,
	|НаборУпаковок,
	|ГруппаДоступа,
	|НаборСвойств,
	|ТипНоменклатуры,
	|ШаблонЦенника,
	|ШаблонЭтикетки";
	
	РеквизитыВидаНоменклатуры = Новый ФиксированнаяСтруктура(
		ОбщегоНазначенияУТ.ЗначенияРеквизитовОбъектаПоУмолчанию(Объект.ВидНоменклатуры, ИменаРеквизитов));
	
	ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьНеобходимостьФормированияНаименований(Форма)
	
	Форма.ФормироватьРабочееНаименование =
		Форма.РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры
		ИЛИ (Не ЗначениеЗаполнено(Форма.Объект.Наименование)
		И ЗначениеЗаполнено(Форма.РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры));
	Форма.ФормироватьНаименованиеДляПечати =
		Форма.РеквизитыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры
		ИЛИ (Не ЗначениеЗаполнено(Форма.Объект.НаименованиеПолное)
		И ЗначениеЗаполнено(Форма.РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры));

КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] = НоваяСтруктураДанныхФайлаКартинки();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаИнициализацияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаСуществованияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ДополнительныеПараметры.Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл не найден';uk='Файл не знайдено'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита], ДополнительныеПараметры.Файл);
	
	РеквизитКартинки = ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита]; // см. НоваяСтруктураДанныхФайлаКартинки
	
	РеквизитКартинки.Расширение = СтрЗаменить(РеквизитКартинки.Расширение, ".", "");
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].ВремяИзменения = ВремяИзменения;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].УниверсальноеВремяИзменения = ВремяИзменения;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры.ИмяФайла);
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	Если ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаКартинки" Тогда
		АдресКартинки      = АдресФайлаВХранилище;
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаHTML" Тогда
		АдресОписанияHTML  = АдресФайлаВХранилище;
		ПутьКФайлуОписанию = ДополнительныеПараметры.ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Перем ИдентификаторФайла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = НоменклатураКлиент.ФильтрФайловИзображений();
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавлениеФайлаДиалогЗавершение",
			ЭтотОбъект,
			Новый Структура("ИмяРеквизита", "ДанныеФайлаКартинки"));
		
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
	Иначе
		ВыборИзображения   = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, НоменклатураКлиент.ФильтрФайловИзображений());
		ВыборИзображения   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлОписаниеНаКлиенте()
	
	Перем ИдентификаторФайла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		ДиалогВыбораФайла.Фильтр = НСтр("ru='Все файлы (*.*)|*.*';uk='Всі файли (*.*)|*.*'");
		
		Если ЗначениеЗаполнено(ПутьКФайлуОписанию) Тогда
			ДиалогВыбораФайла.ПолноеИмяФайла = ПутьКФайлуОписанию;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаДиалогЗавершение",
		ЭтотОбъект,
		Новый Структура("ИмяРеквизита", "ДанныеФайлаHTML"));
		
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
	Иначе
		
		ВыборФайлаОписания = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
		ВыборФайлаОписания = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				ЭтаФорма.Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизводительПриИзмененииСервер()
		
	Объект.Марка = Справочники.Марки.ПолучитьМаркуПоУмолчанию(Объект.Производитель);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайламиИИзображениями

&НаСервере
Функция ОбновитьАдресКартинки(НастроитьФормуИОбновитьКарточку)
	
	Если Объект.ФайлКартинки.Пустая() Тогда
		ПриПолученииДанныхКартинкиВозниклаОшибка = Ложь;
		АдресКартинки = "";
	Иначе		
		
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			АдресКартинки = РаботаСФайлами.ДанныеФайла(Объект.ФайлКартинки, ЭтотОбъект.УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
		Исключение
			АдресКартинки = "";
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ПустаяСтрока(АдресКартинки) Тогда
			ПриПолученииДанныхКартинкиВозниклаОшибка = Истина;
		Иначе
			ПриПолученииДанныхКартинкиВозниклаОшибка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НастроитьФормуИОбновитьКарточку Тогда
		НастроитьФормуИОбновитьКарточку();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НастройкиПараметровКопированияДополнительныхДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		НастройкиКопированияЗаданы = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыКопированияДополнительныхДанных = Результат;
	
	КонтрольУникальностиПередЗаписьюПроведен = Истина;
	НастройкиКопированияЗаданы = Истина;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		КонтрольУникальностиПередЗаписьюПроведен = Ложь;
		НастройкиКопированияЗаданы = Ложь;
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		КонтрольУникальностиПередЗаписьюПроведен = Ложь;
		НастройкиКопированияЗаданы = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура НастроитьФормуИОбновитьКарточку()

	// Настройки видимости элементов формы происходят в конце этой процедуры.
	// Если видимость элементов формы зависит от реквизитов формы и эти элементы 
	// не должны отображаться в карточке номенклатуры (первая вкладка формы), то настройки их видимости не обязательно 
	// заносить в процедуру СтруктураВидимостиЭлементовФормы(...). 
	// (Но все же лучше попытаться занести не добавляя никаких параметров для однородности).
		
	Элементы.СтраницаКарточкаНоменклатуры.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	УстановитьДоступностьРедактированияНаименований(Истина);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Элементы.Штрихкод.Видимость = Ложь;
	Иначе
		Элементы.Штрихкод.Видимость = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.НастройкаИспользованияСерий) Тогда
		НастройкаИспользованияСерий = НСтр("ru='Не используются';uk='Не використовуються'");
	Иначе
		НастройкаИспользованияСерий = Строка(РеквизитыВидаНоменклатуры.НастройкаИспользованияСерий);
	КонецЕсли;
	
    ТипСсылкаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
    ТипСсылкаПартнеры = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
    
    Элементы.Принципал.ОграничениеТипа  = ТипСсылкаПартнеры;
    Элементы.Контрагент.ОграничениеТипа = ТипСсылкаКонтрагенты;
	
	Элементы.ЕдиницаИзмерения.Доступность = (ИспользованиеУпаковок = "ИндивидуальныйНабор"
											И Объект.ИспользоватьУпаковки)
											Или Не Объект.ИспользоватьУпаковки;
	
	ДоступностьШаблоновЭтикеток = ИспользоватьИндивидуальныйШаблонЭтикетки = 1;
	Элементы.ШаблонЭтикетки.Доступность = ДоступностьШаблоновЭтикеток;
	
	ДоступностьШаблоновЦенников = ИспользоватьИндивидуальныйШаблонЦенника = 1;
	Элементы.ШаблонЦенника.Доступность = ДоступностьШаблоновЦенников;
	
	Элементы.ГруппаДоступа.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	
	РеквизитыСПереопределеннойОбязательностьюЗаполнения = Справочники.Номенклатура.РеквизитыСПереопределеннойОбязательностьюЗаполнения(Объект.ТипНоменклатуры, Объект.ОсобенностьУчета, Объект);
	Для Каждого КлючЗначение Из РеквизитыСПереопределеннойОбязательностьюЗаполнения Цикл
		
		ИмяЭлемента = СтрЗаменить(КлючЗначение.Ключ, ".", "");
		Элементы[ИмяЭлемента].АвтоОтметкаНезаполненного = КлючЗначение.Значение;
		
	КонецЦикла;
	
	НастройкиВидимостиИЗаголовков = Справочники.Номенклатура.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	НастроитьЭлементыМеры("Вес",	ВидимостьЭлементов, ЗаголовкиЭлементов, РежимВидимостиПоказатьТолькоВажные);
	НастроитьЭлементыМеры("Объем",	ВидимостьЭлементов, ЗаголовкиЭлементов, РежимВидимостиПоказатьТолькоВажные);
	НастроитьЭлементыМеры("Площадь",ВидимостьЭлементов, ЗаголовкиЭлементов, РежимВидимостиПоказатьТолькоВажные);
	НастроитьЭлементыМеры("Длина",	ВидимостьЭлементов, ЗаголовкиЭлементов, РежимВидимостиПоказатьТолькоВажные);
	
	
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) <> Неопределено Тогда
			Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		КонецЕсли;
		
		// Формирование видимости элементов подменю "Перейти"
		ИмяКоманды = ЭлементВидимость.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				Элементы[ИмяКоманды].Видимость = ЭлементВидимость.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		ИмяЭлемента = ЭлементЗаголовок.Ключ;
		
		ЗаголовокЭлемента = Справочники.Номенклатура.ЗаголовокГиперссылки(ЭлементЗаголовок);
		
		ЭлементУправления = Элементы.Найти(ИмяЭлемента);
		
		Если  ЭлементУправления <> Неопределено
			И ТипЗнч(ЭлементУправления) <> Тип("ГруппаФормы") Тогда
			ЭлементУправления.Заголовок = ЗаголовокЭлемента;
		КонецЕсли;
		
		// Формирование заголовков элементов подменю "Перейти"
		Если СтрНачинаетсяС(ИмяЭлемента,"Гиперссылка") Тогда
			
			ИмяКоманды = СтрЗаменить(ИмяЭлемента, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				
				СтрокаИсключение = НСтр("ru='Список';uk='Список'");
				НачалоСтроки     = СтрНайти(ЗаголовокЭлемента, "(") - 1;
				
				Если СтрНайти(ЗаголовокЭлемента, СтрокаИсключение) = 0
					И НачалоСтроки > 0 Тогда
					
					Элементы[ИмяКоманды].Заголовок = СокрЛП(Лев(ЗаголовокЭлемента, НачалоСтроки));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;                                                                                   	
	
	Если ПриПолученииДанныхКартинкиВозниклаОшибка Тогда
		Элементы.ФайлКартинки.ТекстНевыбраннойКартинки = НСтр("ru='Ошибка при чтении файла изображения';uk='Помилка при читанні файлу зображення'");
		Элементы.ФайлКартинки.ЦветТекста 			   = ЦветаСтиля.ПоясняющийОшибкуТекст;
	Иначе
		Элементы.ФайлКартинки.ТекстНевыбраннойКартинки = НСтр("ru='Добавить изображение';uk='Додати зображення'");
		Элементы.ФайлКартинки.ЦветТекста               = ЦветаСтиля.ЦветТекстаНевыбраннойКартинки;
	КонецЕсли;
    
	УстановитьСвойстваВидаКодаДляНН(Объект.НоменклатураГТД, 
		Элементы.ВидКодаДляННДекорация.Заголовок, 
		Элементы.ВидКодаДляННДекорация.Видимость,
		Элементы.НоменклатураГТД.Видимость);
    
    ПараметрыВывода = Новый Структура;
    ПараметрыВывода.Вставить("КодЯзыкаДляМногоязычныхПечатныхФорм", МультиязычностьУкр.КодЯзыкаИнтерфейса());
    КарточкаНоменклатуры = Справочники.Номенклатура.ТабличныйДокументКарточкиНоменклатуры(Объект, НастройкиВидимостиИЗаголовков, Ложь, ПараметрыВывода);
	
КонецПроцедуры

#Область НастройкаВидимостиГруппИЭлементовПереключательРежима

&НаКлиенте
Процедура НастройкаВидимостиФормыПриИзменении(Элемент)
	
	РежимВидимостиПоказатьТолькоВажныеДО = РежимВидимостиПоказатьТолькоВажные;
	
	Если НастройкаВидимостиФормы = "ПоказатьВсе" Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		Свернуть                           = Ложь;
	ИначеЕсли НастройкаВидимостиФормы = "ПоказатьОсновные" Тогда
		РежимВидимостиПоказатьТолькоВажные = Истина;
		Свернуть                           = Ложь;
	Иначе
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		Свернуть                           = Истина;
	КонецЕсли;
	
	Если РежимВидимостиПоказатьТолькоВажныеДО <> РежимВидимостиПоказатьТолькоВажные Тогда
		НастроитьФормуИОбновитьКарточку();
	КонецЕсли;
	
	СкрытьРаскрытьВсеГруппы(Свернуть);
		
КонецПроцедуры

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы Из ИменаСворачиваемыхГрупп Цикл
		
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть)
	
	ЭлементСворачиваемаяГруппа = Элементы["СворачиваемаяГруппа" + ИмяГруппы];
	
	Если Свернуть Тогда
		ЭлементСворачиваемаяГруппа.Скрыть();
	Иначе
		ЭлементСворачиваемаяГруппа.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСворачиваемуюГруппу(ИмяГруппы)
	ГруппаРодитель  = Элементы[ИмяГруппы].Родитель; // ГруппаФормы
	Если ГруппаРодитель = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	ИмяГруппыРодителя = ГруппаРодитель.Имя;
	
	Если СтрНайти(ИмяГруппыРодителя, "СворачиваемаяГруппа") = 0 Тогда
		РазвернутьСворачиваемуюГруппу(ИмяГруппыРодителя);
	Иначе
		ИмяГруппыРодителя = СтрЗаменить(ИмяГруппыРодителя, "СворачиваемаяГруппа", "");
		ИзменитьСвернутостьГруппы(ИмяГруппыРодителя, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура УстановитьСвойстваВидаКодаДляНН(НоменклатураГТД, ЗаголовокДекорацииВидКодаДляНН, ВидимостьДекорацииВидКодаДляНН, ВидимостьНоменклатурыГТД)
	
	ВидКодаДляНН = "";
	
	Если ЗначениеЗаполнено(НоменклатураГТД) Тогда
		ВидКодаДляНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураГТД, "КодУКТВЭД.Вид");
	КонецЕсли; 
	
	ЗаголовокДекорацииВидКодаДляНН = ВидКодаДляНН;
	ВидимостьДекорацииВидКодаДляНН = ВидимостьНоменклатурыГТД И ЗначениеЗаполнено(ВидКодаДляНН);
	
КонецПроцедуры

#КонецОбласти

#Область ЕдиницыИзмерения

&НаСервере
Процедура НастроитьЭлементыМеры(Мера, СтруктураВидимостиЭлементов, СтруктураЗаголовковЭлементов, РежимВидимостиПоказатьТолькоВажные)
	
	ДоступностьМеры = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты[Мера + "ЕдиницаИзмерения"]);
	
	Если Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
		ВидимостьМеры = Объект[Мера + "Использовать"];
		Элементы[Мера + "Использовать"].Доступность = ДоступностьМеры;
	Иначе
		
		ТипЕдиницы = "";
		
		Если Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения, ТипЕдиницы)
			И Мера = ТипЕдиницы Тогда
			ДоступностьМеры = Ложь;
			Элементы[Мера + "Использовать"].Доступность = ДоступностьМеры;
			ВидимостьМеры = Ложь;
		Иначе
			
			Элементы[Мера + "Использовать"].Доступность = ДоступностьМеры;
			ВидимостьМеры = Объект[Мера + "Использовать"] И СтруктураВидимостиЭлементов[Мера + "Использовать"];
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьМеры = ВидимостьМеры;
	
	СтруктураВидимостиЭлементов.Вставить(Мера + "Отступ", 						ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "Знаменатель", 					ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "Надпись", 						ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "Числитель", 					ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "ЕдиницаИзмерения", 			ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "МожноУказыватьВДокументах", 	ВидимостьМеры);
	
	Если Мера = "Вес" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru='%ЕдиницаИзмерения% весит';uk='%ЕдиницаИзмерения% важить'");
	ИначеЕсли Мера = "Объем" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru='%ЕдиницаИзмерения% занимает объем';uk='%ЕдиницаИзмерения% займає об''єм'");
	ИначеЕсли Мера = "Площадь" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru='%ЕдиницаИзмерения% имеет площадь';uk='%ЕдиницаИзмерения% має площу'");
	ИначеЕсли Мера = "Длина" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru='%ЕдиницаИзмерения% имеет длину';uk='%ЕдиницаИзмерения% має довжину'");
	КонецЕсли;
	
	ТекстЗаголовкаНадписи = СтрЗаменить(ТекстЗаголовкаНадписи, "%ЕдиницаИзмерения%", Строка(Объект.ЕдиницаИзмерения));
	СтруктураЗаголовковЭлементов.Вставить(Мера + "Надпись", ТекстЗаголовкаНадписи);
	
	ТекстПредставленияЗначения = НСтр("ru='Можно указывать количество в %ЕдиницаИзмеренияМеры% в документах';uk='Можна вказувати кількість у %ЕдиницаИзмеренияМеры% в документах'");
	ТекстПредставленияЗначения = СтрЗаменить(ТекстПредставленияЗначения, "%ЕдиницаИзмеренияМеры%", Строка(Объект[Мера + "ЕдиницаИзмерения"]));
	
	Элементы[Мера + "МожноУказыватьВДокументах"].Доступность = ДоступностьМеры;
	Элементы[Мера + "МожноУказыватьВДокументах"].СписокВыбора[1].Представление = ТекстПредставленияЗначения;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьМожноУказыватьВДокументахВСтроку(Мера)
	
	Если Объект[Мера + "МожноУказыватьВДокументах"] Тогда
		ЭтотОбъект[Мера + "МожноУказыватьВДокументахСтрока"] = "МожноВыбиратьВДокументах";
	Иначе
		ЭтотОбъект[Мера + "МожноУказыватьВДокументахСтрока"] = "Справочно";
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура МераМожноУказыватьВДокументахПриИзменении(Мера)
	
	Если ЭтотОбъект[Мера + "МожноУказыватьВДокументахСтрока"] = "МожноВыбиратьВДокументах" Тогда
		Объект[Мера + "МожноУказыватьВДокументах"] = Истина;
	Иначе
		Объект[Мера + "МожноУказыватьВДокументах"] = Ложь;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура МераИспользоватьПриИзмененииСервер(Мера)
	
	Если Объект[Мера + "Использовать"] Тогда
		Объект[Мера + "Знаменатель"] = 1;
		Объект[Мера + "ЕдиницаИзмерения"] = НоменклатураСервер.ЕдиницаИзмеренияПоУмолчанию(Мера);
	КонецЕсли;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииСервер()
	
	Если Объект.КоэффициентЕдиницыДляОтчетов = 1
		Или Объект.КоэффициентЕдиницыДляОтчетов = 0 Тогда
		Объект.ЕдиницаДляОтчетов = Объект.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если Объект.ЕдиницаДляОтчетов = Объект.ЕдиницаИзмерения Тогда
		Объект.КоэффициентЕдиницыДляОтчетов = 1;
	КонецЕсли;
	
	ТипЕдиницы = "";
	
	ЭтоМернаяЕдиница = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения, ТипЕдиницы);
	Справочники.Номенклатура.ОтработатьЛогикуЗаполненияМеры(Объект, ЭтоМернаяЕдиница, ТипЕдиницы, ТипЕдиницы);
	
	Если ЭтоМернаяЕдиница Тогда
		Объект.ПоставляетсяВМногооборотнойТаре   = Ложь;
	КонецЕсли;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаУникальности

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
		
	ТекстОшибки = НСтр("ru='Поле ""%ИмяРеквизита%"" не заполнено';uk='Поле ""%ИмяРеквизита%"" не заповнено'");
	
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		
		ТекстСообщения = СтрЗаменить(ТекстОшибки, "%ИмяРеквизита%", НСтр("ru='Вид номенклатуры';uk='Вид номенклатури'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидНоменклатуры",,Отказ);
		
		Возврат;
		
	КонецЕсли;
	
	НепроверяемыеРеквизиты = Справочники.Номенклатура.НепроверяемыеРеквизиты(Объект);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроекРеквизитов Цикл
		
		Если СтрокаТаблицы.ЭтоДопРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаТаблицы.ЗаполнятьОбязательно
			Или (НепроверяемыеРеквизиты.Найти(СтрокаТаблицы.ИмяРеквизита) <> Неопределено) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗначениеРеквизита = Объект[СтрокаТаблицы.ИмяРеквизита];
		ПутьКРеквизиту = СтрокаТаблицы.ПутьКДанным;
		
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			ТекстСообщения = СтрЗаменить(ТекстОшибки, "%ИмяРеквизита%", СтрокаТаблицы.Представление);
						
			Если СтрокаТаблицы.ИмяРеквизита = "ФайлКартинки" Тогда
				
				Если Не ЗначениеЗаполнено(Объект.Ссылка)
						И Не ЗначениеЗаполнено(АдресКартинки)
					Или ЗначениеЗаполнено(Объект.Ссылка) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКРеквизиту, , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.ИмяРеквизита = "ФайлОписанияДляСайта" Тогда
				
				Если Не ЗначениеЗаполнено(Объект.Ссылка)
						И Не ЗначениеЗаполнено(ПутьКФайлуОписанию)
					Или ЗначениеЗаполнено(Объект.Ссылка) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКРеквизиту, , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
						
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект." + СтрокаТаблицы.ИмяРеквизита,,Отказ);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ПроверяемыеРеквизиты = Новый Массив;
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
		
	Если Отказ И Не РежимВидимостиПоказатьТолькоВажные Тогда
		НастройкаВидимостиФормы = "ПоказатьВсе";
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФормуИОбновитьКарточку();
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьСозданияИзмененияЭлементаПоГруппеДоступа(Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	Если ЗначениеЗаполнено(Объект.ГруппаДоступа) Тогда
		
		Если Не Справочники.ГруппыДоступаНоменклатуры.ЕстьПравоИзменения(Новый Структура("ГруппаДоступа, Ссылка", Объект.ГруппаДоступа, Объект.Ссылка)) Тогда
			
			ТекстСообщения = НСтр("ru='Недостаточно прав на создание номенклатуры по этой группе доступа %ГруппаДоступа%';uk='Недостатньо прав на створення номенклатури по цій групі доступу %ГруппаДоступа%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ГруппаДоступа%", Объект.ГруппаДоступа);
			
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru='В виде номенклатуры ""%ГруппаДоступа%"" не указана группа доступа. Невозможно создать номенклатуру этого вида.';uk='У виді номенклатури ""%ГруппаДоступа%"" не вказана група доступу. Неможливо створити номенклатуру цього виду.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ГруппаДоступа%", Объект.ГруппаДоступа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидНоменклатуры",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьЭлементаПоШтрихкоду()
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура                   КАК Ссылка,
	|	ШтрихкодыНоменклатуры.Номенклатура.Наименование      КАК Наименование
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Отбор.Ссылка = Выборка.Ссылка;
		
		НайденныеСтроки = ТаблицаНайдено.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = ТаблицаНайдено.Добавить();
			
			НоваяСтрока.Ссылка             = Выборка.Ссылка;
			НоваяСтрока.НайденоПоШтрихкоду = Истина;
			
		Иначе
			
			НайденныеСтроки[0].НайденоПоШтрихкоду = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьПоРабочемуНаименованию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка <> &Ссылка
	|	И Номенклатура.Наименование = &Наименование
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Ссылка",       Объект.Ссылка);
	Запрос.УстановитьПараметр("Наименование", Объект.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отбор = Новый Структура("Ссылка");
	
	Пока Выборка.Следующий() Цикл
		
		Отбор.Ссылка = Выборка.Ссылка;
		
		НайденныеСтроки = ТаблицаНайдено.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = ТаблицаНайдено.Добавить();
			
			НоваяСтрока.Ссылка                = Выборка.Ссылка;
			НоваяСтрока.НайденоПоНаименованию = Истина;
			
		Иначе
			
			НайденныеСтроки[0].НайденоПоНаименованию = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьУникальностьСформироватьНаименования(ЭтоЗапись, Отказ = Ложь)

	Если Не Отказ Тогда
		ПроверитьВозможностьСозданияИзмененияЭлементаПоГруппеДоступа(Отказ);
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаНайдено.Очистить();
	
	Если Константы.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов.Получить()
		И Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не КонтрольУникальностиПередЗаписьюПроведен Тогда
		
		Справочники.Номенклатура.ПроверитьУникальностьЭлементаПоРеквизитам(ЭтотОбъект);
		
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			ПроверитьУникальностьЭлементаПоШтрихкоду();
		КонецЕсли;
	КонецЕсли;	
	
	Если ЭтоЗапись Тогда
		Если ФормироватьРабочееНаименование
			И ФормироватьНаименованиеДляПечати Тогда
			ЗаполнитьНаименованиеПоШаблонуСервер("Оба");
		ИначеЕсли ФормироватьРабочееНаименование Тогда
			ЗаполнитьНаименованиеПоШаблонуСервер("Рабочее");
		ИначеЕсли ФормироватьНаименованиеДляПечати Тогда
			ЗаполнитьНаименованиеПоШаблонуСервер("ДляПечати");
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Наименование)
		И Константы.КонтролироватьУникальностьРабочегоНаименованияНоменклатурыИХарактеристик.Получить() Тогда
		ПроверитьУникальностьПоРабочемуНаименованию();
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Наименование) И ЭтоЗапись Тогда
		ТекстСообщения = НСтр("ru='Поле ""Рабочее наименование"" не заполнено';uk='Поле ""Робоча назва"" не заповнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Наименование", "Объект"); 
		Отказ = Истина;
	КонецЕсли;
	
	ТаблицаНайдено.Сортировать("Ссылка");
	Если ТаблицаНайдено.Количество() > 0 Тогда
		Отказ = Истина;
		Возврат ПоместитьВоВременноеХранилище(ТаблицаНайдено.Выгрузить(),УникальныйИдентификатор);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура НастроитьДоступностьБлокируемыхРеквизитов()

	Элементы.ИспользоватьУпаковки.ТолькоПросмотр = Объект.ИспользоватьУпаковки;
	Элементы.ИспользованиеУпаковокИндивидуальныйНабор.ТолькоПросмотр = Объект.ИспользоватьУпаковки;
	Элементы.ИспользованиеУпаковокОбщийНабор.ТолькоПросмотр = Объект.ИспользоватьУпаковки;
	Элементы.НаборУпаковок.ТолькоПросмотр = Объект.ИспользоватьУпаковки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОбъектуКопирования()
	
	Если ПараметрыСоздания().Свойство("Качество")
		И ЗначениеЗаполнено(ПараметрыСоздания().Качество)
		И ПараметрыСоздания().Качество <> Перечисления.ГрадацииКачества.Новый Тогда
		
		Автозаголовок = Ложь;
		
		ТекстЗаголовка = НСтр("ru='Создание номенклатуры для испорченного товара ""%НаименованиеТовара%"".';uk='Створення номенклатури для зіпсованого товару ""%НаименованиеТовара%"".'");
		Заголовок = СтрЗаменить(ТекстЗаголовка, "%НаименованиеТовара%", Строка(Объект.Наименование));
		
		Объект.Качество              = ПараметрыСоздания().Качество;
		Объект.СкладскаяГруппа       = Справочники.СкладскиеГруппыНоменклатуры.ПустаяСсылка();
		Объект.ЦеноваяГруппа         = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		Объект.ФайлКартинки          = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
		Объект.ФайлОписанияДляСайта  = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
		
		ПараметрыСозданияСтруктура = Новый Структура(ПараметрыСоздания());
		ПараметрыСозданияСтруктура.Наименование       = Объект.Наименование + ", " + Строка(Объект.Качество); 
		ПараметрыСозданияСтруктура.НаименованиеПолное = Объект.НаименованиеПолное + ", " + Строка(Объект.Качество);
		ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки)
		Или ЗначениеЗаполнено(Объект.ФайлОписанияДляСайта) Тогда
		
		СкопироватьПрисоединенныеФайлы(ПараметрыСоздания().ИсточникКопирования.ФайлКартинки, 
			ПараметрыСоздания().ИсточникКопирования.ФайлОписанияДляСайта);
			
		Объект.ФайлКартинки          = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
		Объект.ФайлОписанияДляСайта  = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
		
	КонецЕсли;
	
	Объект.ГруппаДоступа         = Справочники.ГруппыДоступаНоменклатуры.ПустаяСсылка();
	Объект.Код                   = "";
	Объект.КодДляПоиска          = "";
	Объект.ПометкаУдаления       = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПараметрамСоздания()
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияПустыхСвойств(Объект, ПараметрыСоздания());
	
	Если ПараметрыСоздания().Свойство("НаименованиеНоменклатурыПоставщика")
		И ЗначениеЗаполнено(ПараметрыСоздания().НаименованиеНоменклатурыПоставщика) Тогда
		
		ПараметрыСозданияСтруктура = Новый Структура(ПараметрыСоздания());
		ПараметрыСозданияСтруктура.Наименование = Объект.Наименование;
		ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
		
	КонецЕсли;
	
	Если ПараметрыСоздания().Свойство("АртикулНоменклатурыПоставщика")
		И ЗначениеЗаполнено(ПараметрыСоздания().АртикулНоменклатурыПоставщика) 
		И Не ЗначениеЗаполнено(Объект.Артикул)Тогда
		Объект.Артикул = ПараметрыСоздания().АртикулНоменклатурыПоставщика;
	КонецЕсли;
	
	Если ПустаяСтрока(Штрихкод)
		И ПараметрыСоздания().Свойство("Штрихкод") Тогда
		Штрихкод = ПараметрыСоздания().Штрихкод;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры)
		Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "ЭтоГруппа") Тогда
		Объект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ВидНоменклатурыПоУмолчанию();
	КонецЕсли;
	
	НоменклатураЛокализация.ЗаполнитьПоПараметрамСоздания(Объект, ПараметрыСоздания());
	
	ВидНоменклатурыПриИзмененииНаСервере();
		
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		
		Если ПараметрыСоздания().Свойство("АдресТаблицыПараметров")
			И ЗначениеЗаполнено(ПараметрыСоздания().АдресТаблицыПараметров)
			И ЭтоАдресВременногоХранилища(ПараметрыСоздания().АдресТаблицыПараметров) Тогда
			
			ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
			ТаблицаДопРеквизитов.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(255)));
			
			ТаблицаЗначенийРеквизитов = ПолучитьИзВременногоХранилища(ПараметрыСоздания().АдресТаблицыПараметров);
			МассивРеквизитов = ТаблицаЗначенийРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит", Ложь));
			
			Для Каждого ЭлементМассива Из МассивРеквизитов Цикл
				Если Не ЗначениеЗаполнено(Объект[ЭлементМассива.ИмяРеквизита]) Тогда
					Объект[ЭлементМассива.ИмяРеквизита] = ЭлементМассива.ЗначениеОтбора;
				КонецЕсли;
			КонецЦикла;
			
			МассивДопРеквизитов = ТаблицаЗначенийРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит", Истина));
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") 
				И МассивДопРеквизитов.Количество() > 0 Тогда
				
				Для Каждого ЭлементМассива Из МассивДопРеквизитов Цикл
					
					НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
					НоваяСтрока.ИмяРеквизита = ЭлементМассива.ИмяРеквизита;
					
				КонецЦикла;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ТаблицаДопРеквизитов.ИмяРеквизита
				|ПОМЕСТИТЬ ТаблицаИменСвойств
				|ИЗ
				|	&ТаблицаДопРеквизитов КАК ТаблицаДопРеквизитов
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаИменСвойств.ИмяРеквизита КАК ИмяРеквизита,
				|	НаборыДополнительныхРеквизитов.Свойство КАК Свойство
				|ИЗ
				|	ТаблицаИменСвойств КАК ТаблицаИменСвойств
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
				|		ПО ТаблицаИменСвойств.ИмяРеквизита = НаборыДополнительныхРеквизитов.Свойство.Наименование
				|ГДЕ
				|	НаборыДополнительныхРеквизитов.Ссылка = &НаборРеквизитов";
				
				Запрос.УстановитьПараметр("ТаблицаДопРеквизитов", ТаблицаДопРеквизитов);
				Запрос.УстановитьПараметр("НаборРеквизитов",      РеквизитыВидаНоменклатуры.НаборСвойств);
				
				ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
				СтруктураПоиска = Новый Структура("ИмяРеквизита");
				
				Для Каждого СтрокаТаблицы Из ТаблицаСвойств Цикл
					
					СтруктураПоискаЗначения = Новый Структура("Свойство", СтрокаТаблицы.Свойство);
					МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоискаЗначения);
					ОписаниеСвойства = МассивСтрок[0];
					ПутьКДанным = ОписаниеСвойства.ИмяРеквизитаЗначение;
					
					СтруктураПоиска.ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
					МассивСтрокЗначение = ТаблицаЗначенийРеквизитов.НайтиСтроки(СтруктураПоиска);
					ЗначениеРеквизита = МассивСтрокЗначение[0].ЗначениеОтбора;
					Если Не ЗначениеЗаполнено(ЭтаФорма[ПутьКДанным]) Тогда
						ЭтаФорма[ПутьКДанным] = ЗначениеРеквизита;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
// 	ФиксированнаяСтруктура:
// 		* АдресТаблицыПараметров - Строка
// 		* АртикулНоменклатурыПоставщика - Строка
// 		* ИсточникКопирования - Структура
// 		* Качество - ПеречислениеСсылка.ГрадацииКачества
// 		* Наименование - Строка
// 		* НаименованиеНоменклатурыПоставщика - Строка
// 		* НаименованиеПолное - Строка
// 		* Штрихкод - Строка
//
&НаСервере
Функция ПараметрыСоздания()
	
	Возврат ПараметрыСоздания;

КонецФункции

// Возвращаемое значение:
// 	Структура:
// * УниверсальноеВремяИзменения - Неопределено
// * ВремяИзменения - Неопределено
// * Расширение - Строка
// * ИмяБезРасширения - Строка
//
&НаСервере
Функция НоваяСтруктураДанныхФайлаКартинки()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяБезРасширения");
	Результат.Вставить("Расширение");
	Результат.Вставить("ВремяИзменения");
	Результат.Вставить("УниверсальноеВремяИзменения");
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	ФайлКартинки - СправочникСсылка.НоменклатураПрисоединенныеФайлы
// 	ФайлОписание - СправочникСсылка.НоменклатураПрисоединенныеФайлы
&НаСервере
Процедура СкопироватьПрисоединенныеФайлы(ФайлКартинки, ФайлОписание)
	
	Если ЗначениеЗаполнено(ФайлКартинки) Тогда
		
		ДанныеПрисоединенногоФайла = РаботаСФайлами.ДанныеФайла(ФайлКартинки);
		
		ДанныеФайлаКартинки = НоваяСтруктураДанныхФайлаКартинки();
		ЗаполнитьЗначенияСвойств(ДанныеФайлаКартинки, ДанныеПрисоединенногоФайла);
		
		ДанныеФайлаКартинки.ИмяБезРасширения = СтрЗаменить(ДанныеПрисоединенногоФайла.ИмяФайла, "." + ДанныеПрисоединенногоФайла.Расширение, "");
		ДвоичныеДанныеФайла  = ПолучитьИзВременногоХранилища(ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла);
		
		// Конвертация присоединенного файла "старого" формата
		ПреобразоватьКартинкуВДвоичныеДанные(ДвоичныеДанныеФайла);
		
		Если Не ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда
			ДанныеФайлаКартинки = Неопределено;
		КонецЕсли;
		
		АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
		АдресКартинки = АдресФайлаВХранилище;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ФайлОписание) Тогда
		
		ДанныеПрисоединенногоФайла = РаботаСФайлами.ДанныеФайла(ФайлОписание);
		
		ДанныеФайлаHTML = НоваяСтруктураДанныхФайлаКартинки();
		ЗаполнитьЗначенияСвойств(ДанныеФайлаHTML, ДанныеПрисоединенногоФайла);
		
		ДанныеФайлаHTML.ИмяБезРасширения = СтрЗаменить(ДанныеПрисоединенногоФайла.ИмяФайла, "." + ДанныеПрисоединенногоФайла.Расширение, "");
		
		ДвоичныеДанныеФайла  = ПолучитьИзВременногоХранилища(ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла);
		АдресОписанияHTML    = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
		ПутьКФайлуОписанию   = ФайлОписание.Наименование;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	ОбъектКартинка - ДвоичныеДанные, Картинка - 
&НаСервереБезКонтекста
Процедура ПреобразоватьКартинкуВДвоичныеДанные(ОбъектКартинка)
	
	Если ТипЗнч(ОбъектКартинка) <> Тип("Картинка") Тогда
		Возврат;
	КонецЕсли;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ОбъектКартинка.Записать(ВременныйФайл);
	
	ОбъектКартинка = Новый ДвоичныеДанные(ВременныйФайл);
	
	ИмяСобытия = НСтр("ru='Копирование номенклатуры.Удаление временного файла.';uk='Копіювання номенклатури. Вилучення тимчасового файлу.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Попытка
		УдалитьФайлы(ВременныйФайл);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьТовараДругогоКачества()
			 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпрНоменклатура.ЕстьТоварыДругогоКачества КАК ЕстьТоварыДругогоКачестваВБазе,
	|	ВЫБОР
	|		КОГДА ТоварыДругогоКачества.НоменклатураБрак ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТоварыДругогоКачестваПоФакту
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|		ПО СпрНоменклатура.Ссылка = ТоварыДругогоКачества.Номенклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура
	|	И СпрНоменклатура.ЕстьТоварыДругогоКачества <> ВЫБОР
	|			КОГДА ТоварыДругогоКачества.НоменклатураБрак ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Номенклатура",Объект.Ссылка);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Объект.ЕстьТоварыДругогоКачества <> Выборка.ЕстьТоварыДругогоКачестваПоФакту Тогда
			Объект.ЕстьТоварыДругогоКачества = Выборка.ЕстьТоварыДругогоКачестваПоФакту;
		КонецЕсли;
		
		Записать();
	КонецЕсли;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеПоШаблонуСервер(ВариантФормирования)
	
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, Объект);
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ВариантФормирования = "Рабочее" ИЛИ ВариантФормирования = "Оба" Тогда
		Объект.Наименование = НоменклатураСервер.НаименованиеПоШаблону(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры, СправочникОбъект);
		СправочникОбъект.Наименование = Объект.Наименование;
	КонецЕсли;
	Если ВариантФормирования = "ДляПечати" ИЛИ ВариантФормирования = "Оба" Тогда
		Объект.НаименованиеПолное = НоменклатураСервер.НаименованиеПоШаблону(РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры, СправочникОбъект);
	КонецЕсли;

	ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ЗаголовокФормированияПоШаблонуРабочее()
	Возврат НСтр("ru='<Рабочее наименование будет сформировано по шаблону>';uk='<Робоче найменування буде сформоване за шаблоном>'");
КонецФункции

&НаСервере
Функция ЗаголовокФормированияПоШаблонуДляПечати()
	Возврат НСтр("ru='<Наименование для печати будет сформировано по шаблону>';uk='<Найменування для друку буде сформовано за шаблоном>'");
КонецФункции

&НаСервере
Процедура УстановитьДоступностьРедактированияНаименований(СкрыватьДоступность)
	
	ЗаголовокФормированияПоШаблонуРабочее = ЗаголовокФормированияПоШаблонуРабочее();
	ЗаголовокФормированияПоШаблонуДляПечати = ЗаголовокФормированияПоШаблонуДляПечати();
	
	Если РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры Тогда
		
		Элементы.Наименование.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Наименование.ОтметкаНезаполненного = Ложь;
		
	Иначе
		
		Элементы.Наименование.АвтоОтметкаНезаполненного = Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры);
		
	КонецЕсли;
	
	Если СкрыватьДоступность Тогда
		
		Если РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры Тогда
			Объект.Наименование = ?(ЗначениеЗаполнено(Объект.Наименование), Объект.Наименование, ЗаголовокФормированияПоШаблонуРабочее);
			ЦветТекстаНаименования = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Иначе
			Объект.Наименование = ?(ЗначениеЗаполнено(Объект.Наименование), Объект.Наименование, "");
			ЦветТекстаНаименования = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
			Элементы.Наименование.ТолькоПросмотр = РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры;
			Элементы.Наименование.ЦветТекста = ЦветТекстаНаименования;
		
		Если РеквизитыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры Тогда
			Объект.НаименованиеПолное = ?(ЗначениеЗаполнено(Объект.НаименованиеПолное), Объект.НаименованиеПолное, ЗаголовокФормированияПоШаблонуДляПечати);
			ЦветТекстаНаименования = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Иначе
			Объект.НаименованиеПолное = ?(ЗначениеЗаполнено(Объект.НаименованиеПолное), Объект.НаименованиеПолное, "");
			ЦветТекстаНаименования = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
		Элементы.НаименованиеПолное.ТолькоПросмотр = РеквизитыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры;
		Элементы.НаименованиеПолное.ЦветТекста = ЦветТекстаНаименования;
		
	Иначе
		
		Если РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры И Объект.Наименование = ЗаголовокФормированияПоШаблонуРабочее Тогда
			Объект.Наименование = ?(Объект.Наименование = ЗаголовокФормированияПоШаблонуРабочее, "", Объект.Наименование);
		КонецЕсли;
		
		Если РеквизитыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры И Объект.НаименованиеПолное = ЗаголовокФормированияПоШаблонуДляПечати Тогда
			Объект.НаименованиеПолное = ?(Объект.НаименованиеПолное = ЗаголовокФормированияПоШаблонуДляПечати, "", Объект.НаименованиеПолное);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ЗаполнитьНаименованиеДляПечатиПоШаблону.Доступность = ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры);
	
	Элементы.ЗаполнитьРабочееНаименованиеПоШаблону.Доступность   = ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры);	                                                                                     

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИспользованиеУпаковокОбщийНабор.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Элементы.ИспользоватьУпаковки.ТолькоПросмотр;
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИспользованиеУпаковокИндивидуальныйНабор.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Элементы.ИспользоватьУпаковки.ТолькоПросмотр;
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	УстановитьУсловноеОформлениеЛокализация();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,, Ложь);
	
	Для Каждого Элемент Из Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы Цикл
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			Если Элемент.МногострочныйРежим <> Истина Тогда
				
				Элемент.РастягиватьПоГоризонтали = Ложь;
				
			Иначе
				
				Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Лево;
				Элемент.РастягиватьПоВертикали   = Ложь;
				Элемент.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			
		КонецЕсли;
		
	КонецЦикла;
	
    ТаблицаРеквизитов = Справочники.Номенклатура.ТаблицаНастроекРеквизитов(
        Объект.ВидНоменклатуры,
    	Объект.ТипНоменклатуры,
    	Объект.ОсобенностьУчета,
    	Объект.ИспользованиеХарактеристик,
    	РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии,
    	"Номенклатура",
        Объект.ВестиУчетПоГТД, 
        Объект.ИзмеряетсяТолькоВСуммовомВыражении, 
        Объект.ПодакцизныйТовар
    );
	
	ТаблицаНастроекРеквизитов.Загрузить(ТаблицаРеквизитов);
	
	Справочники.Номенклатура.НастроитьФормуПоТаблицеНастроек(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ИменаСворачиваемыхГрупп()
	
	ИменаСворачиваемыхГрупп = Новый Массив;
	
	ИменаСворачиваемыхГрупп.Добавить("ОсновныеПараметрыУчета");
	ИменаСворачиваемыхГрупп.Добавить("ЕдиницыИзмерения");
	ИменаСворачиваемыхГрупп.Добавить("ФинансовыйУчет");
	
	ИменаСворачиваемыхГрупп.Добавить("КартинкаОписание");
	ИменаСворачиваемыхГрупп.Добавить("ДополнительныеРеквизиты");
	ИменаСворачиваемыхГрупп.Добавить("ПланированиеИМаркетинг");
	ИменаСворачиваемыхГрупп.Добавить("Обеспечение");
	ИменаСворачиваемыхГрупп.Добавить("Цены");
	ИменаСворачиваемыхГрупп.Добавить("Шаблоны");

	ИменаСворачиваемыхГруппЛокализация(ИменаСворачиваемыхГрупп);
	
	Возврат ИменаСворачиваемыхГрупп;
КонецФункции

&НаСервереБезКонтекста
Функция ЕдиницаИзмерения(Знач ДрагоценныйМатериал)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДрагоценныйМатериал, "ЕдиницаИзмерения");

КонецФункции

#КонецОбласти

#КонецОбласти

#Область Локализация

//++ Локализация
//-- Локализация

&НаСервере
Процедура ПриСозданииНаСервереЛокализация(Отказ, СтандартнаяОбработка)
	
	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЛокализация(Отказ)
	
	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЛокализация(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервереЛокализация(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервереЛокализация(ТекущийОбъект, ПараметрыЗаписи)
	
	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЛокализация(ПараметрыЗаписи)
	
	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ИменаСворачиваемыхГруппЛокализация(ИменаСворачиваемыхГрупп)
	
	//++ Локализация
	
	ИменаСворачиваемыхГрупп.Добавить("РегламентированныйУчет");
	ИменаСворачиваемыхГрупп.Добавить("СведенияОПроизводителе");
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЛокализация()
	
	//++ Локализация
	//-- Локализация

	Возврат;
	
КонецПроцедуры

#КонецОбласти
