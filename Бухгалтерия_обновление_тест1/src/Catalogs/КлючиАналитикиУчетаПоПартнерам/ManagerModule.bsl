#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Соотвествие со списком реквизитов, по которым определяется уникальность ключа
// 
// Возвращаемое значение:
//   Соотвествие - ключ - имя реквизита 
//
Функция КлючевыеРеквизиты() Экспорт
	
	Возврат ОбщегоНазначенияУТ.КлючевыеРеквизитыСправочникаКлючейПоРегиструСведений(Метаданные.РегистрыСведений.АналитикаУчетаПоПартнерам);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаменаДублейКлючейАналитики

Процедура ЗаменитьДублиКлючейАналитики() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ДанныеСправочника.ПометкаУдаления КАК ПометкаУдаления,
	|	Аналитика.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК ДанныеСправочника
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК ДанныеРегистра
	|	ПО
	|		ДанныеСправочника.Ссылка = ДанныеРегистра.КлючАналитики
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		ДанныеСправочника.Партнер = Аналитика.Партнер
	|		И ДанныеСправочника.Организация = Аналитика.Организация
	|		И ДанныеСправочника.Контрагент = Аналитика.Контрагент
	|		И ДанныеСправочника.Договор = Аналитика.Договор
	|		И ДанныеСправочника.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	ДанныеРегистра.КлючАналитики ЕСТЬ NULL
	|");
	
	// Сформируем соответствие ключей аналитики.
	СоответствиеАналитик = Новый Соответствие;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоответствиеАналитик.Вставить(Выборка.Ссылка, Выборка.КлючАналитики);
			
			Если Не Выборка.ПометкаУдаления Тогда
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка
					СправочникОбъект.УстановитьПометкуУдаления(Истина, Ложь);
				Исключение
					ВызватьИсключение;
				КонецПопытки;
			КонецЕсли;

		КонецЦикла;
		
		ОбщегоНазначенияУТ.ЗаменитьСсылки(СоответствиеАналитик);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеИнформационнойБазы


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("121c2442-9d85-4e1c-be9e-068906fa73ba");
	Обработчик.Процедура = "Справочники.КлючиАналитикиУчетаПоПартнерам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.КлючиАналитикиУчетаПоПартнерам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "Справочники.КлючиАналитикиУчетаПоПартнерам.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.КлючиАналитикиУчетаПоПартнерам";
	Обработчик.ИзменяемыеОбъекты = "Справочник.КлючиАналитикиУчетаПоПартнерам";
	Обработчик.БлокируемыеОбъекты = "Справочник.КлючиАналитикиУчетаПоПартнерам";
	Обработчик.Комментарий = НСтр("ru='Перезаполняет пустые реквизиты ""Договор"". Пока работа обработчика не выполнена - данные в отчетах будут некорректными.';uk='Перезаповнює порожні реквізити ""Договір"". Поки робота обробника не виконана – дані у звітах будуть некоректними.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ЗаказыПоставщикам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.Закупки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвижениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Контрагенты.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.4
// В справочнике Ключи аналитики учета по партнерам перезаполняет договор:
// c Неопределено на Справочник.ДоговорыКонтрагентов.ПустаяСсылка().
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ключи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
	|ГДЕ
	|	Ключи.Договор = НЕОПРЕДЕЛЕНО
	|	ИЛИ (Ключи.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			И Ключи.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			И ТИПЗНАЧЕНИЯ(Ключи.Контрагент) = ТИП(Справочник.Организации))
	|");
	
	Ключи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Ключи);
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.4
// В справочнике Ключи аналитики учета по партнерам перезаполняет договор:
// c Неопределено на Справочник.ДоговорыКонтрагентов.ПустаяСсылка().
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ВыбиратьПорциями = Ложь;
	
	ПолноеИмяСправочника = Метаданные.Справочники.КлючиАналитикиУчетаПоПартнерам.ПолноеИмя();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь,
		ПолноеИмяСправочника,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДляОбработкиСсылка", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяСправочника);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ИсходныйДоговор = СпрОбъект.Договор;
			Если СпрОбъект.Партнер = Справочники.Партнеры.НашеПредприятие
				И ТипЗнч(СпрОбъект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				СпрОбъект.Договор = Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка();
			Иначе
				СпрОбъект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
			СправочникИзменен = ?(ИсходныйДоговор = СпрОбъект.Договор, Ложь, Истина);
			Если СправочникИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект);
			Иначе 
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось инициализировать ключ аналитики учета по партнерам: %Ключ% по причине: %Причина%';uk='Не вдалося ініціалізувати ключ аналітики обліку за партнерами: %Ключ% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ключ%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяСправочника);
	
КонецПроцедуры

Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	НовыйКлюч = МетаданныеИОтбор.Данные;
	Если Не ЗначениеЗаполнено(НовыйКлюч.Договор) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ключи.Ссылка
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|ГДЕ
		|	Ключи.Партнер = &Партнер
		|	И Ключи.Организация = &Организация
		|	И Ключи.Контрагент = &Контрагент
		|	И Ключи.НаправлениеДеятельности = &НаправлениеДеятельности
		|	И Ключи.Договор = НЕОПРЕДЕЛЕНО
		|");
		Запрос.УстановитьПараметр("Партнер", НовыйКлюч.Партнер);
		Запрос.УстановитьПараметр("Организация", НовыйКлюч.Организация);
		Запрос.УстановитьПараметр("Контрагент", НовыйКлюч.Контрагент);
		Запрос.УстановитьПараметр("НаправлениеДеятельности", НовыйКлюч.НаправлениеДеятельности);
		ДаннныеОбновлены = Запрос.Выполнить().Пустой();
	Иначе
		ДаннныеОбновлены = Истина;
	КонецЕсли;
	
	Возврат ДаннныеОбновлены;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли