#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает статью движения денежных средств для выбранной хозяйственной операции.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
// 	СправочникСсылка.СтатьиДвиженияДенежныхСредств - Найденная статья ДДС.
//
Функция СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
		|	СтатьиДвиженияДенежныхСредств.Ссылка КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств.ХозяйственныеОперации КАК СтатьиДвиженияДенежныхСредствХозяйственныеОперации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
		|		ПО СтатьиДвиженияДенежныхСредствХозяйственныеОперации.Ссылка = СтатьиДвиженияДенежныхСредств.Ссылка
		|			И (НЕ СтатьиДвиженияДенежныхСредств.ПометкаУдаления)
		|			И (СтатьиДвиженияДенежныхСредствХозяйственныеОперации.ХозяйственнаяОперация = &ХозяйственнаяОперация)");
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
	Иначе
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СтатьяДвиженияДенежныхСредств;

КонецФункции

// Получает предопределенную статью движения денежных средств для выбранной хозяйственной операции.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Валюта - СправочникСсылка.Валюты - Валюта документа.
//
// Возвращаемое значение:
// 	СправочникСсылка.СтатьиДвиженияДенежныхСредств - Предопределенная статья ДДС.
//
Функция ПредопределеннаяСтатьяДДС(ХозяйственнаяОперация, Валюта = Неопределено) Экспорт
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
		Если Не ЗначениеЗаполнено(Валюта)
		 ИЛИ Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанка;
		Иначе
			СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанкаВИностраннойВалюте;
		КонецЕсли;
			
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет Тогда
		Если Не ЗначениеЗаполнено(Валюта)
		 ИЛИ Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанк;
		Иначе
			СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанкВИностраннойВалюте;
		КонецЕсли;
		
	Иначе
		Соответствие = Новый Соответствие;
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу, 
			Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюКассу);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию, 
			Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюКассу);	

		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,
			Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеДенежныхСредствНаДругойСчет);

		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюКассу);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации,
			Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюКассу);

		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВКассуККМ);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ,
			Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзКассыККМ);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыДСПрибыль,
			Справочники.СтатьиДвиженияДенежныхСредств.КурсовыеРазницыПрибыль);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыДСУбыток,
			Справочники.СтатьиДвиженияДенежныхСредств.КурсовыеРазницыУбыток);
		
		СтатьяДвиженияДенежныхСредств = Соответствие.Получить(ХозяйственнаяОперация);
	КонецЕсли; 
	
	Если СтатьяДвиженияДенежныхСредств = Неопределено Тогда
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СтатьяДвиженияДенежныхСредств;
	
КонецФункции

// Получает список хозяйственных операций соответствующих расходу денежных средств.
//
// Возвращаемое значение:
// 	Массив - массив хозяйственных операций.
//
Функция ХозяйственныеОперацииРасходаДенежныхСредств() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|ГДЕ
	|	НастройкиХозяйственныхОпераций.Расход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ДенежныеСредства)
	|	И НастройкиХозяйственныхОпераций.Приход <> ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ПустаяСсылка)
	|	И НастройкиХозяйственныхОпераций.ХозяйственнаяОперация НЕ В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)"); 
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ХозяйственнаяОперация");
	
КонецФункции

// Вызывается при начальном заполнении предопределенных элементов
// Подробнее см. в СтандартныеПодсистемыСервер.НастройкиПредопределенныхЭлементов
//
// Параметры:
//  Настройки - Структура - Настройки НачальногоЗаполнения
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - Ключ - имя табличной части объекта
//                               Значение - Выгрузка в таблицу значений пустой табличной части
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	#Область ВозвратДенежныхСредствОтДругойОрганизации
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВозвратДенежныхСредствОтДругойОрганизации";
	Элемент.Наименование = НСтр("ru='Возврат денежных средств от другой организации';uk='Повернення грошових коштів від іншої організації'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ВозвратДенежныхСредствОтПоставщика
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВозвратДенежныхСредствОтПоставщика";
	Элемент.Наименование = НСтр("ru='Возврат оплаты поставщиком (товары, работы, услуги)';uk='Повернення оплати постачальником (товари, роботи, послуги)'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ВозвратОплатыКлиенту
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВозвратОплатыКлиенту";
	Элемент.Наименование = НСтр("ru='Возврат оплаты клиенту (продажа товаров, работ, услуг)';uk='Повернення оплати клієнту (продаж товарів, робіт, послуг)'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ВыдачаДенежныхСредствВДругуюКассу
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВыдачаДенежныхСредствВДругуюКассу";
	Элемент.Наименование = НСтр("ru='Выдача денежных средств в другую кассу';uk='Видача грошових коштів в іншу касу'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ВыдачаДенежныхСредствВКассуККМ
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВыдачаДенежныхСредствВКассуККМ";
	Элемент.Наименование = НСтр("ru='Выдача денежных средств в кассу ККМ';uk='Видача грошових коштів в касу ККМ'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ВыплатаЗаработнойПлаты
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВыплатаЗаработнойПлаты";
	Элемент.Наименование = НСтр("ru='Выплата заработной платы по ведомостям';uk='Виплата заробітної плати по відомостях'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ИнвестиционнаяДеятельность
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ИнвестиционнаяДеятельность";
	Элемент.Наименование = НСтр("ru='Инвестиционная деятельность';uk='Інвестиційна діяльність'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область КурсовыеРазницыПрибыль
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыПрибыль";
	Элемент.Наименование = НСтр("ru='Прибыль от курсовых разниц';uk='Прибуток від курсових різниць'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область КурсовыеРазницыУбыток
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыУбыток";
	Элемент.Наименование = НСтр("ru='Убыток от курсовых разниц';uk='Збиток від курсових різниць'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ОперационнаяДеятельность
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОперационнаяДеятельность";
	Элемент.Наименование = НСтр("ru='Операционная деятельность';uk='Операційна діяльність'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ОплатаДенежныхСредствВДругуюОрганизацию
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОплатаДенежныхСредствВДругуюОрганизацию";
	Элемент.Наименование = НСтр("ru='Оплата денежных средств в другую организацию';uk='Оплата грошових коштів в іншу організацію'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ОплатаПоставщику
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОплатаПоставщику";
	Элемент.Наименование = НСтр("ru='Оплата поставщику (товары, работы, услуги)';uk='Оплата постачальнику (товари, роботи, послуги)'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ПеречислениеДенежныхСредствНаДругойСчет
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПеречислениеДенежныхСредствНаДругойСчет";
	Элемент.Наименование = НСтр("ru='Перечисление денежных средств на другой счет';uk='Перерахування грошових коштів на інший рахунок'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ПоступлениеДенежныхСредствИзБанка
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствИзБанка";
	Элемент.Наименование = НСтр("ru='Поступление денежных средств из банка (в рублях)';uk='Надходження коштів з банку (в рублях)'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ПоступлениеДенежныхСредствИзБанкаВИностраннойВалюте
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствИзБанкаВИностраннойВалюте";
	Элемент.Наименование = НСтр("ru='Поступление денежных средств из банка (в иностранной валюте)';uk='Надходження грошових коштів з банку (в іноземній валюті)'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ПоступлениеДенежныхСредствИзКассыККМ
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствИзКассыККМ";
	Элемент.Наименование = НСтр("ru='Поступление денежных средств из кассы ККМ';uk='Надходження грошових коштів з каси ККМ'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ПоступлениеДенежныхСредствОтДругойОрганизации
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствОтДругойОрганизации";
	Элемент.Наименование = НСтр("ru='Поступление денежных средств от другой организации';uk='Надходження грошових коштів від іншої організації'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ПоступлениеОплатыОтКлиента
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПоступлениеОплатыОтКлиента";
	Элемент.Наименование = НСтр("ru='Поступление оплаты от клиента (продажа товаров, работ, услуг)';uk='Надходження оплати від клієнта (продаж товарів, робіт, послуг)'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область СдачаДенежныхСредствВБанк
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СдачаДенежныхСредствВБанк";
	Элемент.Наименование = НСтр("ru='Сдача денежных средств в банк (в рублях)';uk='Здача коштів в банк (в рублях)'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область СдачаДенежныхСредствВБанкВИностраннойВалюте
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СдачаДенежныхСредствВБанкВИностраннойВалюте";
	Элемент.Наименование = НСтр("ru='Сдача денежных средств в банк (в иностранной валюте)';uk='Здача готівкових коштів у банк (в іноземній валюті)'",КодОсновногоЯзыка);
	#КонецОбласти

	#Область ФинансоваяДеятельность
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ФинансоваяДеятельность";
	Элемент.Наименование = НСтр("ru='Финансовая деятельность';uk='Фінансова діяльність'",КодОсновногоЯзыка);
	#КонецОбласти

КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - СправочникОбъект.ДрагоценныеМатериалы - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ТолькоРасходДенежныхСредств") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация КАК Ссылка
		|ПОМЕСТИТЬ ХозяйственныеОперацииРасхода 
		|ИЗ
		|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
		|ГДЕ
		|	НастройкиХозяйственныхОпераций.Расход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ДенежныеСредства)
		|	И НастройкиХозяйственныхОпераций.Приход <> ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ПустаяСсылка)
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатьиДвиженияДенежныхСредствХозОперации.Ссылка
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств.ХозяйственныеОперации КАК СтатьиДвиженияДенежныхСредствХозОперации
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ХозяйственныеОперацииРасхода КАК ХозяйственныеОперацииРасхода
		|	ПО
		|		СтатьиДвиженияДенежныхСредствХозОперации.ХозяйственнаяОперация = ХозяйственныеОперацииРасхода.Ссылка");
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	ИначеЕсли Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ХозяйственнаяОперация") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДанныеСправочника.Ссылка
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств.ХозяйственныеОперации КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|	И (ДанныеСправочника.Ссылка.Наименование ПОДОБНО &СтрокаПоиска ИЛИ &СтрокаПоискаНеЗадана)
		|";
		
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Параметры.Отбор.ХозяйственнаяОперация);
		
		СтрокаПоиска = "";
		Если Параметры.Свойство("СтрокаПоиска") Тогда
			СтрокаПоиска = Параметры.СтрокаПоиска;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("СтрокаПоискаНеЗадана", Не ЗначениеЗаполнено(СтрокаПоиска));
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" Тогда
		Если Параметры.Свойство("Отбор")
			И Параметры.Отбор.Свойство("ХозяйственнаяОперация")
			И ТипЗнч(Параметры.Отбор.ХозяйственнаяОперация) = Тип("ПеречислениеСсылка.ХозяйственныеОперации") Тогда
			ВыбраннаяФорма = "ФормаВыбораПоХозяйственнойОперации";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы


Процедура ЗаполнитьПредопределенныеСтатьиДвиженияДенежныхСредств(СтатьяДДС = Неопределено) Экспорт
	
	Соответствие = Новый Соответствие;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюКассу ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюКассу,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу,
				"301",
				Перечисления.ВидыДвиженийДенежныхСредств.ПустаяСсылка()));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ОплатаПоставщику,
				"631",
				Перечисления.ВидыДвиженийДенежныхСредств.ОплатаТоваровУслуг));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеДенежныхСредствНаДругойСчет ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеДенежныхСредствНаДругойСчет,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,
				"311",
				Перечисления.ВидыДвиженийДенежныхСредств.ПустаяСсылка()));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанка ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанка,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка,
				"311",
				Перечисления.ВидыДвиженийДенежныхСредств.ПустаяСсылка()));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанкаВИностраннойВалюте ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанкаВИностраннойВалюте,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка,
				"312",
				Перечисления.ВидыДвиженийДенежныхСредств.ПустаяСсылка()));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента,
				"361",
				Перечисления.ВидыДвиженийДенежныхСредств.ВыручкаОтРеализацииТоваровУслуг));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанк ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанк,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк,
				"311",
				Перечисления.ВидыДвиженийДенежныхСредств.ПустаяСсылка()));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанкВИностраннойВалюте ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанкВИностраннойВалюте,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк,
				"312",
				Перечисления.ВидыДвиженийДенежныхСредств.ПустаяСсылка()));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию,
				"633",
				Перечисления.ВидыДвиженийДенежныхСредств.ОплатаТоваровУслуг));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВКассуККМ ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВКассуККМ,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ,
				"308",     
				Перечисления.ВидыДвиженийДенежныхСредств.ВозвратАвансовПокупателей));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзКассыККМ ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзКассыККМ,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ,
				"308",
				Перечисления.ВидыДвиженийДенежныхСредств.ВыручкаОтРеализацииТоваровУслуг));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты,
				"661",
				Перечисления.ВидыДвиженийДенежныхСредств.ОплатаТруда));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствОтПоставщика ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствОтПоставщика,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика,
				"631",
				Перечисления.ВидыДвиженийДенежныхСредств.ВозвратАвансовПоставщиков));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту,
				"361",
				Перечисления.ВидыДвиженийДенежныхСредств.ВозвратАвансовПокупателей));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.КурсовыеРазницыПрибыль ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.КурсовыеРазницыПрибыль,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.КурсовыеРазницыДСПрибыль,
				"714",
				Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоОперационнойДеятельности));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.КурсовыеРазницыУбыток ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.КурсовыеРазницыУбыток,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.КурсовыеРазницыДСУбыток,
				"945",
				Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоОперационнойДеятельности));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствОтДругойОрганизации ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствОтДругойОрганизации,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации,
				"363",
				Перечисления.ВидыДвиженийДенежныхСредств.ВыручкаОтРеализацииТоваровУслуг));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствОтДругойОрганизации ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствОтДругойОрганизации ,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет, ВидДвиженияДенежныхСредств",
				Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации,
				"633",
				Перечисления.ВидыДвиженийДенежныхСредств.ВозвратАвансовПоставщиков));
	КонецЕсли;
	
	Для Каждого Элемент Из Соответствие Цикл
	
		СтатьяДДСОбъект = Элемент.Ключ.ПолучитьОбъект();
		Элемент.Значение.Вставить("Родитель", ОперационнаяДеятельность);
		ЗаполнитьЗначенияСвойств(СтатьяДДСОбъект, Элемент.Значение);
		Если СтатьяДДСОбъект.ХозяйственныеОперации.Найти(Элемент.Значение.ХозяйственнаяОперация) = Неопределено Тогда
			СтатьяДДСОбъект.ХозяйственныеОперации.Добавить().ХозяйственнаяОперация = Элемент.Значение.ХозяйственнаяОперация;
		КонецЕсли;
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтатьяДДСОбъект);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Справочник %1 не записан, произошли ошибки при записи!';uk='Довідник %1 не збережений, відбулися помилки при запису!'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				СтатьяДДСОбъект);
			ОписаниеОшибки = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		
		Объект = ОперационнаяДеятельность.ПолучитьОбъект();
		Объект.РеквизитДопУпорядочивания = 1;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
		Объект = ИнвестиционнаяДеятельность.ПолучитьОбъект();
		Объект.РеквизитДопУпорядочивания = 2;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
		Объект = ФинансоваяДеятельность.ПолучитьОбъект();
		Объект.РеквизитДопУпорядочивания = 3;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	Исключение
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Справочник %1 не записан, произошли ошибки при записи!';uk='Довідник %1 не збережений, відбулися помилки при запису!'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Объект);
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
	КонецПопытки;
	
КонецПроцедуры


#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.СтатьиДвиженияДенежныхСредств.ОбновитьСтатьиПоККМ";
	Обработчик.Версия = "3.5.11.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("81152f63-ddd1-4b0e-aec6-c0ade8b0340c");
	Обработчик.Комментарий = НСтр("ru='Обновляет реквизиты статей движения ДС по ККМ';uk='Оновлює реквізити статей руху ГК по ККМ'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.СтатьиДвиженияДенежныхСредств.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

Процедура ОбновитьСтатьиПоККМ() Экспорт
	
	ЗаполнитьПредопределенныеСтатьиДвиженияДенежныхСредств(Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВКассуККМ);
	ЗаполнитьПредопределенныеСтатьиДвиженияДенежныхСредств(Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзКассыККМ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли


