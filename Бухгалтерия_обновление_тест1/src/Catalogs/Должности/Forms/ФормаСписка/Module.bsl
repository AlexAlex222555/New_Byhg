
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
		Если Параметры.Свойство("ПоказыватьИсключенныеДолжности") Тогда
			ПоказыватьИсключенныеДолжности = Параметры.ПоказыватьИсключенныеДолжности;
		КонецЕсли;
		
		Если Параметры.Свойство("ПоказыватьНовыеДолжности") Тогда
			ПоказыватьНовыеДолжности = Параметры.ПоказыватьНовыеДолжности;
		Иначе
			ПоказыватьНовыеДолжности = Не Параметры.РежимВыбора;
		КонецЕсли;
		
		ИспользоватьУсловноеОформление = Истина;
		
	Иначе
		
		ИспользоватьУсловноеОформление = Ложь;
		
		ПоказыватьИсключенныеДолжности = Истина;
		ПоказыватьНовыеДолжности = Истина;
		
	КонецЕсли;
	
	Для каждого ЭлементУсловногоОформления Из Список.УсловноеОформление.Элементы Цикл
		ЭлементУсловногоОформления.Использование = ИспользоватьУсловноеОформление;
	КонецЦикла;
	
	Если Параметры.РежимВыбора Тогда
		
		Элементы.Список.РежимВыбора = Истина;
		Если ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
			ПоказыватьИсключенныеДолжности = Параметры.ТекущаяСтрока.ИсключенаИзШтатногоРасписания;
			Если Не Параметры.ТекущаяСтрока.ВведенаВШтатноеРасписание Тогда
				ПоказыватьНовыеДолжности = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		ОписаниеДинамическогоСписка = Новый Структура;
		ОписаниеДинамическогоСписка.Вставить("ИмяРеквизитаСписка", 		"Список");
		ОписаниеДинамическогоСписка.Вставить("ИмяТаблицыДолжностей", 	"СправочникДолжности");
		ОписаниеДинамическогоСписка.Вставить("ИмяПоляДолжности", 		"Ссылка");
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ПриСозданииФормыСпискаСправочникаДолжности(ЭтотОбъект, Параметры, ОписаниеДинамическогоСписка);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.НастроитьОтображениеГрейдаВФормеСписка(ЭтотОбъект, "СправочникДолжности");
	КонецЕсли;
	
	УстановитьОтборСписка(ЭтотОбъект);
	
	ЗарплатаКадры.ПриСозданииНаСервереФормыСДинамическимСписком(ЭтотОбъект, "Список",,,, "ВведенаВШтатноеРасписание, ИсключенаИзШтатногоРасписания");
	
//++ ЕРП ЗИК
//~	Элементы.ФормаПереместитьЭлементВверх.Видимость = Ложь;
//~	Элементы.ФормаПереместитьЭлементВниз.Видимость = Ложь;
//-- ЕРП ЗИК
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПоказыватьНовыеДолжностиПриИзменении(Элемент)
	УстановитьОтборСписка(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИсключенныеДолжностиПриИзменении(Элемент)
	УстановитьОтборСписка(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, Истина);
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьИзКлассификатора(Команда)
		
	СтрокаПоиска = "";
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтрокаПоиска = ТекДанные.Наименование;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("СтрокаПоиска, ОткрытИзФормыСписка", СтрокаПоиска, Истина);
	ОткрытьФорму("Справочник.Должности.Форма.ФормаВыбораИзКлассификатора",
		СтруктураПараметров, ЭтаФорма);

КонецПроцедуры


#Область ПроцедурыПодсистемыНастройкиПорядкаЭлементов

&НаКлиенте
Процедура ПослеДобавленияДолжностейИзКлассификатора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ПоказыватьНовыеДолжности Тогда
		
		ПоказыватьНовыеДолжности = Истина;
		УстановитьОтборСписка(ЭтотОбъект);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлементВверх(Команда)
	
//++ ЕРП ЗИК
//-- ЕРП ЗИК	
КонецПроцедуры	

&НаКлиенте
Процедура ПереместитьЭлементВниз(Команда)
	
//++ ЕРП ЗИК
//-- ЕРП ЗИК	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСписка(Форма)
	
	Список = Форма.Список;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ВведенаВШтатноеРасписание");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ИсключенаИзШтатногоРасписания");
		
	Если НЕ Форма.ПоказыватьНовыеДолжности Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВведенаВШтатноеРасписание", Истина);
	КонецЕсли;
	
	Если НЕ Форма.ПоказыватьИсключенныеДолжности Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ИсключенаИзШтатногоРасписания", Ложь);
	КонецЕсли;
	
	#Если Клиент Тогда
		ГосударственнаяСлужбаСуществует = ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	#Иначе
		ГосударственнаяСлужбаСуществует = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	#КонецЕсли
	
	Если ГосударственнаяСлужбаСуществует Тогда
		#Если Клиент Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиентСервер");
		#Иначе
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаКлиентСервер");
		#КонецЕсли
		Модуль.УстановитьЭлементыОтбораФормыСпискаСправочникаДолжности(Форма, Список);
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти
