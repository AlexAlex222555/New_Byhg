#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Находит регламентное задание по GUID.
//
// Параметры:
//  УникальныйНомерЗадания - Строка - строка с GUID регламентного задания.
// 
// Возвращаемое значение:
//  Неопределено               - если поиск регламентного задания по GUID не дал результатов.
//  ТекущееРегламентноеЗадание - РегламентноеЗадание - найденное по GUID регламентное задание.
//
Функция РегламентноеЗаданиеПоУникальномуНомеру(УникальныйНомерЗадания) Экспорт
	
	Если ПустаяСтрока(УникальныйНомерЗадания) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		РегламентноеЗадание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(УникальныйНомерЗадания);
	Исключение
		РегламентноеЗадание = Неопределено;
	КонецПопытки;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ПроверкиСостоянияСистемы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0885991b-eec8-4164-81ca-a1d513d5463b");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ПроверкиСостоянияСистемы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.ПроверкиСостоянияСистемы";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ПроверкиСостоянияСистемы";
	Обработчик.БлокируемыеОбъекты = "Справочник.ПроверкиСостоянияСистемы";
	Обработчик.Комментарий = НСтр("ru='Заполняет справочник """"Проверки состояния учета"""" поставляемыми проверками.';uk='Заповнює довідник ""Перевірки стану обліку"" перевірками, що постачаються.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	
	
КонецПроцедуры

// Обработчик обновления УП 2.5.4, заполняет справочник поставляемыми проверками.
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Возврат; // нечего регистрировать - создаются новые элементы
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Результат = АудитСостоянияСистемы.ЗаполнитьСправочникПроверокСостоянияСистемы();
	
	// Заполнение справочника выполняется целиком в одной порции обработки данных.
	// Если при заполнении возникли какие-либо проблемы, то обработчик считаем не выполненным.
	Параметры.ОбработкаЗавершена = Результат;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли
