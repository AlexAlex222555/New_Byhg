
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Отбор.Свойство("ТипРасчетов") Тогда
		Если Параметры.Отбор.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			Заголовок = НСтр("ru='Выбор объекта расчетов с клиентом';uk='Вибір об''єкта розрахунків з клієнтом'");
		Иначе
			Заголовок = НСтр("ru='Выбор объекта расчетов с поставщиком';uk='Вибір об''єкта розрахунків з постачальником'");
		КонецЕсли;
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ТипРасчетов", Параметры.Отбор.ТипРасчетов);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОбъектовРасчетов,
				"ТипРасчетов",
				Параметры.Отбор.ТипРасчетов,
				ВидСравненияКомпоновкиДанных.ВСписке,
				,
				Истина);
	КонецЕсли;
	
	УстановленоОтборов = 0;
	Если Параметры.Отбор.Свойство("Партнер") И ЗначениеЗаполнено(Параметры.Отбор.Партнер) Тогда
		СписокПартнеров = Новый СписокЗначений;
		ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Параметры.Отбор.Партнер, СписокПартнеров);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокОбъектовРасчетов,
			"Партнер",
			СписокПартнеров,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ЗначениеЗаполнено(СписокПартнеров));
			
		Если Параметры.ВыборОснованияПлатежа Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОснованийПлатежа,
				"Партнер",
				СписокПартнеров,
				ВидСравненияКомпоновкиДанных.ВСписке,
				,
				ЗначениеЗаполнено(СписокПартнеров));
		КонецЕсли;
			
		Элементы.ОтборПартнер.Заголовок = Параметры.Отбор.Партнер;
		УстановленоОтборов = УстановленоОтборов + 1;
	Иначе
		Элементы.ОтборПартнер.Видимость = Ложь;
		Элементы.ЗаголовокПартнер.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Контрагент") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			Если ТипЗнч(Параметры.Отбор.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если ЗначениеЗаполнено(Параметры.Отбор.Контрагент) Тогда
					ПартнерКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Отбор.Контрагент, "Партнер");
				Иначе
					ПартнерКонтрагента = Неопределено;
				КонецЕсли;
				СписокПартнеров = Новый СписокЗначений;
				ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(ПартнерКонтрагента, СписокПартнеров);
				Элементы.ОтборПартнер.Заголовок = ПартнерКонтрагента;
				Элементы.ОтборПартнер.Видимость = Истина;
				Элементы.ЗаголовокПартнер.Видимость = Истина;
				Параметры.Отбор.Вставить("Партнер", СписокПартнеров);
			ИначеЕсли ТипЗнч(Параметры.Отбор.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Параметры.Отбор.Вставить("Партнер", Справочники.Партнеры.НашеПредприятие);
				Элементы.ОтборПартнер.Заголовок = Справочники.Партнеры.НашеПредприятие;
				Элементы.ОтборПартнер.Видимость = Истина;
				Элементы.ЗаголовокПартнер.Видимость = Истина;
			КонецЕсли;
			Элементы.ОтборКонтрагент.Видимость = Ложь;
			Элементы.ЗаголовокКонтрагент.Видимость = Ложь;
		Иначе
			Элементы.ОтборКонтрагент.Заголовок = Параметры.Отбор.Контрагент;
			УстановленоОтборов = УстановленоОтборов + 1;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокОбъектовРасчетов,
			"Контрагент",
			Параметры.Отбор.Контрагент,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ЗначениеЗаполнено(Параметры.Отбор.Контрагент));
		
		Если Параметры.ВыборОснованияПлатежа Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОснованийПлатежа,
				"Контрагент",
				Параметры.Отбор.Контрагент,
				ВидСравненияКомпоновкиДанных.ВСписке,
				,
				ЗначениеЗаполнено(Параметры.Отбор.Контрагент));
		КонецЕсли;
		
	Иначе
		Элементы.ОтборКонтрагент.Видимость = Ложь;
		Элементы.ЗаголовокКонтрагент.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Организация") Тогда
		
		Элементы.ОтборОрганизация.Заголовок = Параметры.Отбор.Организация;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
			И Параметры.УчитыватьФилиалы Тогда
			
			Организация = Параметры.Отбор.Организация;
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ГоловнаяОрганизация В (&Организация)
			|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
			Запрос.УстановитьПараметр("Организация", Организация);
			ДоступныеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			Если ТипЗнч(Организация) = Тип("Массив") Тогда // В качестве отбора передано несколько организаций
				Для Каждого ЭлементОрганизаций Из Организация Цикл 
					ДоступныеОрганизации.Добавить(ЭлементОрганизаций);
				КонецЦикла;
			Иначе
				ДоступныеОрганизации.Добавить(Организация);
			КонецЕсли;
			Список = Новый СписокЗначений();
			Список.ЗагрузитьЗначения(ДоступныеОрганизации);
			Параметры.Отбор.Организация = Список;
			
		КонецЕсли;
		
		УстановленоОтборов = УстановленоОтборов + 1;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокОбъектовРасчетов,
			"Организация",
			Параметры.Отбор.Организация,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ЗначениеЗаполнено(Параметры.Отбор.Организация));
		
		Если Параметры.ВыборОснованияПлатежа Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОснованийПлатежа,
				"Организация",
				Параметры.Отбор.Организация,
				ВидСравненияКомпоновкиДанных.ВСписке,
				,
				ЗначениеЗаполнено(Параметры.Отбор.Организация));
		КонецЕсли;
		
	Иначе
		Элементы.ОтборОрганизация.Видимость = Ложь;
		Элементы.ЗаголовокОрганизация.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.РедактируемыйДокумент) Тогда
		ИсключаемыйОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Параметры.РедактируемыйДокумент,,
			?(Параметры.Отбор.Свойство("ТипРасчетов"),Параметры.Отбор.ТипРасчетов,Неопределено));
		Если ЗначениеЗаполнено(ИсключаемыйОбъектРасчетов) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОбъектовРасчетов,
				"ОбъектРасчетов",
				ИсключаемыйОбъектРасчетов,
				ВидСравненияКомпоновкиДанных.НеРавно,
				,
				ЗначениеЗаполнено(ИсключаемыйОбъектРасчетов));
				
			Если Параметры.ВыборОснованияПлатежа Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					СписокОснованийПлатежа,
					"ОбъектРасчетов",
					ИсключаемыйОбъектРасчетов,
					ВидСравненияКомпоновкиДанных.НеРавно,
					,
					ЗначениеЗаполнено(ИсключаемыйОбъектРасчетов));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ВыборОснованияПлатежа Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОснованиеПлатежа;
	Иначе
		Элементы.ГруппаОснованиеПлатежа.Видимость = Ложь;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	Если УстановленоОтборов > 0 Тогда
		Элементы.ГруппаПредустановленныеОтборы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Установлено отборов: %1';uk='Встановлено відборів: %1'"), УстановленоОтборов);
	Иначе
		Элементы.ГруппаПредустановленныеОтборы.Видимость = Ложь;
	КонецЕсли;
	
	СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ПодборДебиторскойЗадолженности", 
		?(Параметры.Свойство("ПодборДебиторскойЗадолженности"), Параметры.ПодборДебиторскойЗадолженности, Истина));
		
	Если Параметры.Свойство("ПодборДебиторскойЗадолженности") Тогда
		Элементы.ЗаголовокТипЗадолженности.Видимость = Истина;
		Элементы.ОтборЗадолженность.Заголовок = ?(Параметры.ПодборДебиторскойЗадолженности, НСтр("ru='дебиторской';uk='дебіторської'"), НСтр("ru='кредиторской';uk='кредиторської'"));
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПодборДебиторскойЗадолженности", Параметры.ПодборДебиторскойЗадолженности);
	Иначе
		Элементы.ЗаголовокТипЗадолженности.Видимость = Ложь;
		Элементы.ОтборЗадолженность.Видимость = Ложь;
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПодборДебиторскойЗадолженности", Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("ВернутьСтруктуру") Тогда
		ВернутьСтруктуру = Параметры.ВернутьСтруктуру;
	КонецЕсли;
	
	ИспользоватьНесколькоВалют     = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбъектыРасчетовВалюта", "Видимость", ИспользоватьНесколькоВалют);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОснованияПлатежаВалюта", "Видимость", ИспользоватьНесколькоВалют);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъект(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбъектРасчетов Тогда
		СтрокаТаблицы = Элементы.ОбъектыРасчетов.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
			ПоказатьЗначение(Неопределено, СтрокаТаблицы.ОбъектРасчетов);
		КонецЕсли;
	Иначе
		СтрокаТаблицы = Элементы.ОснованияПлатежа.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеПлатежа) Тогда
			ПоказатьЗначение(Неопределено, СтрокаТаблицы.ОснованиеПлатежа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСОстаткомПриИзменении(Элемент)
	УстановитьОтборПоОстатку();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоОстатку()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОбъектовРасчетов,
		"СуммаОстаток",
		0,
		ВидСравненияКомпоновкиДанных.Больше,
		,
		ТолькоСОстатком);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтборПоОстатку();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбъектРасчетов Тогда
		СтрокаТаблицы = Элементы.ОбъектыРасчетов.ТекущиеДанные;
	Иначе
		СтрокаТаблицы = Элементы.ОснованияПлатежа.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		Если ВернутьСтруктуру Тогда
			РезультатВыбора = РезультатВыбора(СтрокаТаблицы);
		Иначе
			РезультатВыбора = СтрокаТаблицы.ОбъектРасчетов;
		КонецЕсли;
		ОповеститьОВыборе(РезультатВыбора);
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РезультатВыбора(СтрокаТаблицы)
	
	Если Не ИспользоватьНесколькоВалют Тогда
		ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	Иначе
		ВалютаВзаиморасчетов = СтрокаТаблицы.ВалютаВзаиморасчетов;
	КонецЕсли;
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("ОбъектРасчетов", СтрокаТаблицы.ОбъектРасчетов);
	РезультатВыбора.Вставить("ОснованиеПлатежа", ?(СтрокаТаблицы.Свойство("ОснованиеПлатежа"), СтрокаТаблицы.ОснованиеПлатежа, Неопределено));
	РезультатВыбора.Вставить("Организация", СтрокаТаблицы.Организация);
	РезультатВыбора.Вставить("Партнер", СтрокаТаблицы.Партнер);
	РезультатВыбора.Вставить("Контрагент", СтрокаТаблицы.Контрагент);
	РезультатВыбора.Вставить("Договор", СтрокаТаблицы.Договор);
	РезультатВыбора.Вставить("НаправлениеДеятельности", СтрокаТаблицы.НаправлениеДеятельности);
	РезультатВыбора.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	РезультатВыбора.Вставить("СуммаВзаиморасчетов", 0);
	РезультатВыбора.Вставить("Дата", СтрокаТаблицы.Дата);
	РезультатВыбора.Вставить("Номер", СтрокаТаблицы.Номер);
	
	
	РезультатВыбора.Вставить("СтавкаНДС", ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	РезультатВыбора.Вставить("СуммаНДС", 0);
	РезультатВыбора.Вставить("СуммаЗаказа", СтрокаТаблицы.Сумма);
	
	РезультатВыбора.Вставить("СуммаПлатежа", СуммаПлатежа);
	РезультатВыбора.Вставить("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	
	Возврат РезультатВыбора;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовНомер.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовДата.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовТипСсылки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовСумма.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовВалюта.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовСуммаОстаток.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовВалютаВзаиморасчетов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовОрганизация.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовПартнер.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовДоговор.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовКонтрагент.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовНомерВходящегоДокумента.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовДатаВходящегоДокумента.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СсылкаНаОбъектРасчетов.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектовРасчетов.Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектовРасчетов.Договор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектовРасчетов.Объект");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовТипСсылки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектовРасчетов.ТипСсылки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Объект не указан>';uk='<Об''єкт не вказано>'"));

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРасчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ОбъектыРасчетов.ТекущиеДанные;
	Если ВернутьСтруктуру Тогда
		РезультатВыбора = РезультатВыбора(СтрокаТаблицы);
	Иначе
		РезультатВыбора = СтрокаТаблицы.ОбъектРасчетов;
	КонецЕсли;
	ОповеститьОВыборе(РезультатВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ОснованияПлатежа.ТекущиеДанные;
	РезультатВыбора = РезультатВыбора(СтрокаТаблицы);
	ОповеститьОВыборе(РезультатВыбора);
КонецПроцедуры

#КонецОбласти
