#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Проверяет использование объекта
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки
//
Процедура ПроверитьИспользованиеОбъекта(Параметры, АдресХранилища) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСсылки
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
	|	И ТаблицаПоиска.ИсточникПолученияПолуфабриката = &Объект
	//++ Устарело_Производство21
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ВыпускПродукции.Товары КАК ВыпускПродукцииТовары
	|ГДЕ
	|	ВыпускПродукцииТовары.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.СписаниеЗатратНаВыпуск КАК СписаниеЗатратНаВыпуск
	|ГДЕ
	|	СписаниеЗатратНаВыпуск.Спецификация = &Объект
	//-- Устарело_Производство21
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|";
	
	Запрос.УстановитьПараметр("Объект", Параметры.Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЕстьСсылки = НЕ Результат.Пустой();
	
	ПоместитьВоВременноеХранилище(ЕстьСсылки, АдресХранилища);

КонецПроцедуры

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, Параметры) Экспорт
	
	ВидимостьВФормах = "ФормаЭлемента,ФормаСписка,ФормаВыбора";
	
	
	Команда = БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Команда.ВидимостьВФормах = ВидимостьВФормах;
	
КонецПроцедуры

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Устарело_Производство21
	//-- Устарело_Производство21
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Конструкторы

// Функция - конструктор структуры для выборки данных ресурсной спецификации.
// 
// Возвращаемое значение:
//  Структура - структура с параметрами выборки данных спецификации:
//  	* Номенклатура - СправочникСсылка.Номенклатура - номенклатура
//  	* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
//  	* Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
//  	* Количество - Число - количество изделий
//
Функция ДанныеПоНоменклатуре() Экспорт
	
	ДанныеПоНоменклатуре = Новый Структура;
	
	ДанныеПоНоменклатуре.Вставить("Номенклатура");
	ДанныеПоНоменклатуре.Вставить("Характеристика");
	
	ДанныеПоНоменклатуре.Вставить("Спецификация");
	ДанныеПоНоменклатуре.Вставить("Количество");
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Функция - конструктор структуры для выборки данных ресурсной спецификации.
//
// Возвращаемое значение:
//  Структура - структура с параметрами выборки данных спецификации:
//  	* Номенклатура - СправочникСсылка.Номенклатура - номенклатура
//  	* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
//  	* Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
//  	* Количество - Число - количество изделий
//  	* ПодразделениеДиспетчер - СправочникСсылка.СтруктураПредприятия - подразделение
//  	* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - направление деятельности
//  	* НачалоПроизводства - Дата - дата начала производства
//  	* ДнейОтПотребности - Число - количество дней от потребности по нормативному графику
//		* Распоряжение - ДокументСсылка - распоряжение
//
Функция ДанныеПоНоменклатуреРасширенный() Экспорт
	
	ДанныеПоНоменклатуре = Новый Структура;
	
	ДанныеПоНоменклатуре.Вставить("Номенклатура");
	ДанныеПоНоменклатуре.Вставить("Характеристика");
	
	ДанныеПоНоменклатуре.Вставить("Спецификация");
	ДанныеПоНоменклатуре.Вставить("Количество");
	
	ДанныеПоНоменклатуре.Вставить("Распоряжение");
	
	ДанныеПоНоменклатуре.Вставить("ПодразделениеДиспетчер");
	ДанныеПоНоменклатуре.Вставить("НаправлениеДеятельности");
	ДанныеПоНоменклатуре.Вставить("НачалоПроизводства");
	
	ДанныеПоНоменклатуре.Вставить("ДнейОтПотребности");
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Функция - конструктор таблицы для выборки данных ресурсной спецификации по списку значений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с параметрами выборки данных спецификации:
//  	* Номенклатура - СправочникСсылка.Номенклатура - номенклатура
//  	* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
//  	* Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
//  	* Количество - Число - количество изделий
//  	* ПодразделениеДиспетчер - СправочникСсылка.СтруктураПредприятия - подразделение
//  	* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - направление деятельности
//  	* НачалоПроизводства - Дата - дата начала производства
//  	* ДнейОтПотребности - Число - количество дней от потребности по нормативному графику
//  	* Распоряжение - ДокументСсылка - распоряжение
//  	* Идентификатор - Число - идентификатор строки таблицы (добавляется позже)
//
Функция СписокНоменклатуры() Экспорт
	
	СписокНоменклатуры = Новый ТаблицаЗначений;
	
	СписокНоменклатуры.Колонки.Добавить("Номенклатура",            Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СписокНоменклатуры.Колонки.Добавить("Характеристика",          Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СписокНоменклатуры.Колонки.Добавить("Спецификация",            Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	СписокНоменклатуры.Колонки.Добавить("Количество",              Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	СписокНоменклатуры.Колонки.Добавить("ПодразделениеДиспетчер",  Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	СписокНоменклатуры.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	СписокНоменклатуры.Колонки.Добавить("НачалоПроизводства",      Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	СписокНоменклатуры.Колонки.Добавить("ДнейОтПотребности",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	
	Возврат СписокНоменклатуры;
	
КонецФункции

// Функция - конструктор структуры для выборки данных ресурсной спецификации.
//
// Параметры:
//  ПереченьДанных - Строка,Массив,Неопределено  - содержит перечень данных спецификации, которые требуется получить.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц,Неопределено - содержит временные таблицы используемые для получения способа обеспечения.
//  ВариантЗаполненияОбеспечения - ПеречислениеСсылка.ВариантыЗаполненияОбеспеченияПроизводства,Неопределено - определяет вариант заполнения обеспечения.
// 
// Возвращаемое значение:
//  Структура - структура с параметрами выборки данных спецификации:
//  	* ПереченьДанных - Массив - Содержит перечень данных спецификации, которые требуется получить.
//  	    Неопределено - если нужно получить весь набор данных.
//  	* МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит временные таблицы используемые для получения способа обеспечения.
//  	* ВариантЗаполненияОбеспечения - ПеречислениеСсылка.ВариантыЗаполненияОбеспеченияПроизводства -  Вариант заполнения обеспечения в производстве
//  	* ПолучитьПредставления - Булево - Истина, если нужно получить представления ссылочных полей.
//  	* ПолучитьСведенияАвтовыбора - Булево - Истина, если нужно получить сведения автовыбора.
//  	* ПереопределениеНастройкиПартииВыпуска - Структура - используется для переопределение настройки партии выпуска.
//  	* ОкруглятьКоличествоШтучныхТоваров - Булево - если Истина, то штучные товары в мерных ед. изм. при отгрузке
//  		с/на склады, не являющиеся цеховыми кладовыми, будут округляться до целого количества штук.
//
Функция ПараметрыВыборкиДанных(ПереченьДанных = Неопределено, МенеджерВременныхТаблиц = Неопределено, ВариантЗаполненияОбеспечения = Неопределено) Экспорт
	
	ПараметрыВыборки = Новый Структура;
	
	Если ТипЗнч(ПереченьДанных) = Тип("Строка") Тогда
		ПараметрыВыборки.Вставить("ПереченьДанных", СтрРазделить(СтрЗаменить(ПереченьДанных, " ", ""), ",", Ложь));
	ИначеЕсли ТипЗнч(ПереченьДанных) = Тип("Массив") Тогда
		ПараметрыВыборки.Вставить("ПереченьДанных", ПереченьДанных);
	Иначе
		ПараметрыВыборки.Вставить("ПереченьДанных", ПереченьДанныхСпецификации());
	КонецЕсли;
	
	ПараметрыВыборки.Вставить("ПолучитьПредставления", Ложь);
	ПараметрыВыборки.Вставить("ПолучитьСведенияАвтовыбора", Истина);
	
	ПараметрыВыборки.Вставить("ОбъединитьМатериалыИВходящиеИзделия", Ложь);
	
	ПараметрыВыборки.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	Если ВариантЗаполненияОбеспечения = Неопределено Тогда
		ПараметрыВыборки.Вставить("ВариантЗаполненияОбеспечения", Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения);
	Иначе
		ПараметрыВыборки.Вставить("ВариантЗаполненияОбеспечения", ВариантЗаполненияОбеспечения);
	КонецЕсли;
	
	ПараметрыВыборки.Вставить("ДоступныРаботы", Истина);
	
	ПараметрыВыборки.Вставить("УчитыватьВероятностьБрака", Истина);
	ПараметрыВыборки.Вставить("СпособРасчетаМатериалов", Перечисления.СпособыРасчетаМатериалов.МинимальноеПотребление);
	
	ПараметрыВыборки.Вставить("ПереопределениеНастройкиПартииВыпуска", Новый Структура("Использовать,ВыпускПроизвольнымиПорциями",Ложь,Ложь));
	
	ПараметрыВыборки.Вставить("РассчитыватьПризнакЗапланироватьПроизводство", Истина);
	
	ПараметрыВыборки.Вставить("ОкруглятьКоличествоШтучныхТоваров", Истина);
	
	Возврат ПараметрыВыборки;
	
КонецФункции

#КонецОбласти

#Область ДанныеСпецификации

// Возвращает данные спецификации с учетом данных о номенклатуре
// 
// Параметры:
// 	ДанныеПоНоменклатуре - см. ДанныеПоНоменклатуреРасширенный
// 	ПараметрыВыборки - см. ПараметрыВыборкиДанных
// 	Отбор - Структура,Неопределено - структура отбора
// Возвращаемое значение:
// 	см. ДанныеСпецификацииКонструктор
//
Функция ДанныеСпецификацииПоНоменклатуре(ДанныеПоНоменклатуре, ПараметрыВыборки, Отбор = Неопределено) Экспорт
	
	ДанныеСпецификации = ДанныеСпецификации(ДанныеПоНоменклатуре, ПараметрыВыборки)[0];
	
	ПартияВыпуска = РассчитатьПартиюВыпускаПоНоменклатуре(
		ДанныеПоНоменклатуре,
		ДанныеСпецификации);
	
	РассчитатьКоличествоНаПартиюВыпуска(ПартияВыпуска, ДанныеСпецификации, ДанныеПоНоменклатуре);
	
	ПрименитьОтборПоДаннымСпецификации(ДанныеСпецификации, ПараметрыВыборки, Отбор);
	
	Возврат ДанныеСпецификации;
	
КонецФункции

// Возвращает данные спецификации по переданному списку номенклатуры.
//
// Параметры:
//  СписокНоменклатуры - см. СписокНоменклатуры
//  ПараметрыВыборки   - см. ПараметрыВыборкиДанных
//	ГруппироватьДанные - Булево - Истина, если при получении данных требуется группировать их
//		по заданному набору полей (см. параметр ПоляГруппировки).
//	ПоляГруппировки    - Строка - имена полей, указанных через запятую, по которым необходимо группировать данные.
//		В строке не должно быть пробелов и прочих незначимых символов.
//		Колонки с аналогичными именами должны присутствовать в списке номенклатуры к получению данных.
//		Если поля не заданы, но взведен параметр ГруппироватьДанные, то группировка осуществляется только по спецификации.
//
// Возвращаемое значение:
//  Массив из см. ДанныеСпецификацииКонструктор - массив данных спецификаций
//
Функция ДанныеСпецификацииПоСпискуНоменклатуры(СписокНоменклатуры, ПараметрыВыборки, ГруппироватьДанные = Ложь, ПоляГруппировки = "") Экспорт
	
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(СписокНоменклатуры, "Идентификатор");
	
	ДанныеСпецификаций = ДанныеСпецификации(СписокНоменклатуры, ПараметрыВыборки);
	
	#Область ГруппировкаДанных
	
	// Переменные для группировки данных
	СтруктураПоиска = Неопределено;
	ДополнительныйИндекс = Неопределено;
	ПоляГруппировкиМассив = Новый Массив;
	
	Если ГруппироватьДанные Тогда
		
		ПоляПоиска = ПоляГруппировки;
		Если СтрНайти(ПоляПоиска, "Спецификация") = 0 Тогда
			ПоляПоиска = ПоляПоиска + ?(ПустаяСтрока(ПоляПоиска), "", ",") + "Спецификация";
		КонецЕсли;
		СтруктураПоиска = Новый Структура(ПоляПоиска);
		ДополнительныйИндекс = СписокНоменклатуры.Индексы.Добавить(ПоляПоиска);
		
		Если НЕ ПустаяСтрока(ПоляГруппировки) Тогда
			Для каждого Элемент Из СтрРазделить(ПоляГруппировки, ",", Ложь) Цикл
				ПоляГруппировкиМассив.Добавить(СокрЛП(Элемент));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Результат = Новый Массив;
	
	Для Индекс = 0 По СписокНоменклатуры.Количество()-1 Цикл
		
		Строка = СписокНоменклатуры[Индекс];
		
		Если Строка.Спецификация.Пустая() Тогда
			Результат.Добавить(Неопределено);
			Продолжить;
		ИначеЕсли Строка.Идентификатор = -1 Тогда
			Продолжить; // строки, обработанные в процессе группировки данных, получают идентификатор -1
		КонецЕсли;
		
		ДанныеСпецификации   = ДанныеСпецификаций[Строка.Идентификатор];
		ДанныеПоНоменклатуре = ДанныеПоНоменклатуреРасширенный();
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Строка);
		
		// Расчет партии выпуска
		Если ГруппироватьДанные Тогда
			
			ПартияВыпуска = ПартияВыпуска(0,1);
			
			#Область ГруппировкаДанных
			
			Если ДанныеСпецификации.ОсновноеИзделие.ЭтоОсновноеИзделие Тогда
				Номенклатура = Строка.Номенклатура;
				Характеристика = Строка.Характеристика;
			Иначе
				Номенклатура = Неопределено;
				Характеристика = Неопределено;
			КонецЕсли;
			
			// Поиск строк для группировки
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
			НайденныеСтроки = СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
			
			Для Сч1 = 0 По НайденныеСтроки.ВГраница() Цикл
				
				Если НайденныеСтроки[Сч1].Идентификатор = -1 Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеСпецификацииНов = ДанныеСпецификаций[НайденныеСтроки[Сч1].Идентификатор];
				
				// Ограничение по номенклатуре и характеристике
				Если ДанныеСпецификации.ЕстьУточняемоеОсновноеИзделие
					И ДанныеСпецификацииНов.ОсновноеИзделие.ЭтоОсновноеИзделие Тогда
					
					Если Номенклатура = Неопределено Тогда
						Номенклатура = НайденныеСтроки[Сч1].Номенклатура;
						Характеристика = НайденныеСтроки[Сч1].Характеристика;
					ИначеЕсли Номенклатура <> НайденныеСтроки[Сч1].Номенклатура
						ИЛИ Характеристика <> НайденныеСтроки[Сч1].Характеристика Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				ДанныеПоНоменклатуреНов = ДанныеПоНоменклатуреРасширенный();
				ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуреНов, НайденныеСтроки[Сч1]);
				
				// Суммирование количества если Н и Х идентичные
				Для Сч2 = Сч1+1 По НайденныеСтроки.ВГраница() Цикл
					
					Если НайденныеСтроки[Сч2].Идентификатор <> -1
						И НайденныеСтроки[Сч1].Номенклатура = НайденныеСтроки[Сч2].Номенклатура
						И НайденныеСтроки[Сч1].Характеристика = НайденныеСтроки[Сч2].Характеристика Тогда
						
						ДанныеПоНоменклатуреНов.Количество = ДанныеПоНоменклатуреНов.Количество + НайденныеСтроки[Сч2].Количество;
						НайденныеСтроки[Сч2].Идентификатор = -1;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НайденныеСтроки[Сч1].Идентификатор = -1;
				
				// Расчет макс. партии
				ПартияВыпускаНов = РассчитатьПартиюВыпускаПоНоменклатуре(ДанныеПоНоменклатуреНов, ДанныеСпецификацииНов);
				Если СравнитьПартииВыпуска(ПартияВыпускаНов, ПартияВыпуска) > 0 Тогда
					ПартияВыпуска = ПартияВыпускаНов;
					ДанныеПоНоменклатуре = ДанныеПоНоменклатуреНов;
				КонецЕсли;
				
			КонецЦикла;
			
			// Копирование полей группировки в результат
			Для каждого Поле Из ПоляГруппировкиМассив Цикл
				ДанныеСпецификации.Вставить(Поле, Строка[Поле]);
			КонецЦикла;
			
			#КонецОбласти
			
		Иначе
			
			ПартияВыпуска = РассчитатьПартиюВыпускаПоНоменклатуре(ДанныеПоНоменклатуре, ДанныеСпецификации);
			
		КонецЕсли;
		
		// Расчет количества
		РассчитатьКоличествоНаПартиюВыпуска(ПартияВыпуска, ДанныеСпецификации, ДанныеПоНоменклатуре);
		
		Результат.Добавить(ДанныеСпецификации);
		
	КонецЦикла;
	
	СписокНоменклатуры.Колонки.Удалить("Идентификатор");
	
	Если ГруппироватьДанные Тогда
		СписокНоменклатуры.Индексы.Удалить(ДополнительныйИндекс);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные спецификации с учетом данных о номенклатуре и спецификаций полуфабрикатов, производимых в процессе.
// 
// Параметры:
// 	ДанныеПоНоменклатуре - см. ДанныеПоНоменклатуреРасширенный
// 	ИсключитьПолуфабрикаты - Булево, Неопределено - Истина, если не требуется добавлять полуфабрикаты в материалы и выходные изделия, Неопределено - если нужно получить весь набор данных..
// 	ПараметрыВыборки - см. ПараметрыВыборкиДанных
// Возвращаемое значение:
// 	см. ДанныеСпецификацииКонструктор
//
Функция ДанныеСпецификацииСПолуфабрикатами(ДанныеПоНоменклатуре, ИсключитьПолуфабрикаты, ПараметрыВыборки) Экспорт
	
	ДанныеСпецификации = ДанныеСпецификацииПоНоменклатуре(ДанныеПоНоменклатуре, ПараметрыВыборки);
	
	Если ДанныеСпецификации = Неопределено Тогда
		
		Если ДанныеПоНоменклатуре.Свойство("Спецификация") И ЗначениеЗаполнено(ДанныеПоНоменклатуре.Спецификация) Тогда
			ТекстИсключения = НСтр("ru='Ошибка при чтении данных ресурсной спецификации: %Спецификация%.';uk='Помилка при читанні даних ресурсної специфікації: %Спецификация%.'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Спецификация%", ДанныеПоНоменклатуре.Спецификация);
		Иначе
			ТекстИсключения = НСтр("ru='Ошибка при чтении данных ресурсной спецификации: не передана спецификация.';uk='Помилка при читанні даних ресурсної специфікації: не передана специфікація.'");
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	СписокНоменклатуры = СписокНоменклатуры();
	
	Для Каждого Строка Из ДанныеСпецификации.МатериалыИУслуги Цикл
		
		Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации Тогда
			
			НоваяСтрока = СписокНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура, Характеристика, Количество, ДнейОтПотребности");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоНоменклатуре, "НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности");
			НоваяСтрока.Спецификация = Строка.ИсточникПолученияПолуфабриката;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока СписокНоменклатуры.Количество() > 0 Цикл
		
		СписокНоменклатуры = ДобавитьДанныеПолуфабрикатов(ДанныеСпецификации, СписокНоменклатуры, ПараметрыВыборки);
		
	КонецЦикла;
	
	Если ИсключитьПолуфабрикаты Тогда
		
		СтруктураОтбора = Новый Структура("ПроизводитсяВПроцессе", Истина);
		НайденныеСтроки = ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе
				И ДанныеСпецификации.Свойство("ВозвратныеОтходы") Тогда
				
				СтруктураОтбораОтходов = Новый Структура("Номенклатура, Характеристика, Этап");
				ЗаполнитьЗначенияСвойств(СтруктураОтбораОтходов, Строка);
				СтруктураОтбораОтходов.Этап = Строка.ИсточникПолученияПолуфабриката;
				
				НайденныеСтрокиОтходов = ДанныеСпецификации.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбораОтходов);
				
				Для Каждого СтрокаОтхода Из НайденныеСтрокиОтходов Цикл
					ДанныеСпецификации.ВозвратныеОтходы.Удалить(СтрокаОтхода);
				КонецЦикла;
				
			КонецЕсли;
			
			ДанныеСпецификации.МатериалыИУслуги.Удалить(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеСпецификации;
	
КонецФункции

#КонецОбласти

#Область ОписаниеПроизводственногоПроцесса

// Получает описание партии выпуска по спецификации
//
// Параметры:
//  Спецификация - СправочникОбъект.РесурсныеСпецификации, СправочникСсылка.РесурсныеСпецификации - данные спецификации
// 
// Возвращаемое значение:
//  Структура - описание партии выпуска
//
Функция ОписаниеПартииВыпуска(Спецификация) Экспорт
	
	ОписаниеПартииВыпуска = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураОписаниеПартииВыпуска();
	
	СписокРеквизитовСпецификации = "ТипПроизводственногоПроцесса,ВариантНазначения,ВыпускПроизвольнымиПорциями";
	
	Если ТипЗнч(Спецификация) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
		
		РеквизитыСпецификации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Спецификация, СписокРеквизитовСпецификации);
		
		ДанныеОсновногоИзделия = ДанныеОсновногоИзделияСпецификации(Спецификация);
		ЗаполнитьЗначенияСвойств(ОписаниеПартииВыпуска, ДанныеОсновногоИзделия);
		
	Иначе
		
		РеквизитыСпецификации = Новый Структура(СписокРеквизитовСпецификации);
		ЗаполнитьЗначенияСвойств(РеквизитыСпецификации, Спецификация);
		
		ДанныеОсновногоИзделия = УправлениеДаннымиОбИзделияхКлиентСервер.ДанныеОсновногоИзделияСпецификации(Спецификация);
		ЗаполнитьЗначенияСвойств(ОписаниеПартииВыпуска, ДанныеОсновногоИзделия);
		
	КонецЕсли;
	
	Если (РеквизитыСпецификации.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
			И РеквизитыСпецификации.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры
		) Тогда
		ОписаниеПартииВыпуска.МножественныйВыпуск = Истина;
	Иначе
		ОписаниеПартииВыпуска.МножественныйВыпуск = Ложь;
	КонецЕсли;
	
	Если РеквизитыСпецификации.ВыпускПроизвольнымиПорциями = Истина Тогда
		ОписаниеПартииВыпуска.ВыпускПроизвольнымиПорциями = Истина;
	Иначе
		ОписаниеПартииВыпуска.ВыпускПроизвольнымиПорциями = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеПартииВыпуска.Номенклатура) Тогда
		БазоваяЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеПартииВыпуска.Номенклатура, "ЕдиницаИзмерения");
	Иначе
		БазоваяЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОсновногоИзделия.Упаковка, "Владелец.ЕдиницаИзмерения");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) И ОписаниеПартииВыпуска.Упаковка.Пустая() Тогда
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия = БазоваяЕдиницаИзмерения;
	Иначе
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия = ОписаниеПартииВыпуска.Упаковка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) И РеквизитыСпецификации.ВыпускПроизвольнымиПорциями Тогда
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска = БазоваяЕдиницаИзмерения;
	ИначеЕсли ОписаниеПартииВыпуска.МножественныйВыпуск ИЛИ ОписаниеПартииВыпуска.КоличествоУпаковок <> 1 Тогда // ЕдиницаИзмеренияПартииВыпуска() 
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	Иначе
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска = ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия;
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеПартииВыпуска);
	
КонецФункции

// Получает описание производственного процесса
//
// Параметры:
//  Ссылка - СправочникСсылка.РесурсныеСпецификации - ресурсная спецификация
// 
// Возвращаемое значение:
//  Структура - описание производственного процесса
//
Функция ОписаниеПроизводственногоПроцесса(Ссылка) Экспорт
	
	Результат = Новый Структура("НесколькоПервыхЭтапов,НесколькоПоследнихЭтапов");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА НомерСледующегоЭтапа = 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) > 1 КАК НесколькоПоследнихЭтапов,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА НомерЭтапа = 1
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) > 1 КАК НесколькоПервыхЭтапов
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	Владелец = &Ссылка И НЕ ПометкаУдаления");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает структуру данных основного изделия по спецификации
//
// Параметры:
//  Спецификация	 - СправочникСсылка.РесурсныеСпецификации	 - спецификация, данные которой требуется получить
//  Номенклатура	 - СправочникСсылка.Номенклатура			 - Номенклатура выходного изделия, если не указано, то основная
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика выходного изделия, если не указано, 
//																	то основная или любая из характеристик номенклатуры
//
// Возвращаемое значение:
//   Структура   - содержит данные изделия
//
Функция ДанныеОсновногоИзделияСпецификации(Спецификация, Номенклатура = Неопределено, Характеристика = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	0               КАК Идентификатор,
	|	&Спецификация   КАК Спецификация,
	|	&Номенклатура   КАК Номенклатура,
	|	&Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВтДанныеПоНоменклатуре
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|"
	+ ТекстЗапросаДанныеОсновногоИзделияСпецификации();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	Если Номенклатура = Неопределено Тогда
		Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	КонецЕсли;
	
	Если Характеристика = Неопределено Тогда
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УчитыватьВероятностьБрака", Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = РезультатыЗапроса[РезультатыЗапроса.Количество()-1];
	
	ДанныеПоНоменклатуре = СтруктураДанныхОсновногоИзделияСпецификации();
		
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Выборка);
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВСтрокеНабораДанных(
			ДанныеПоНоменклатуре,
			РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить());
		
		ДанныеПоНоменклатуре.Количество = ОписаниеТипаКоличественногоРеквизита().ПривестиЗначение(
			ДанныеПоНоменклатуре.КоличествоУпаковок
				* ДанныеПоНоменклатуре.ДанныеУпаковки.Числитель / ДанныеПоНоменклатуре.ДанныеУпаковки.Знаменатель);
		
	КонецЕсли;
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

#КонецОбласти

#Область Прочее

//Возвращает параметры выбора спецификаций для изделий, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров выбора спецификаций.
//
// Возвращаемое значение:
//   Структура - Структура, переопределяющая умолчания, заданные в функции УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций().
//
Функция ПараметрыВыбораСпецификаций(Объект) Экспорт
	
	ПараметрыВыбораСпецификаций = Новый Структура;
	
#Область Сборка

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.ВРазработке);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.Вставить("Сборка", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти
	
#Область Ремонт

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Ремонт);
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.ВРазработке);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.Вставить("Ремонт", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти
	
#Область Разборка

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.ВРазработке);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.Вставить("Разборка", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти

	Возврат ПараметрыВыбораСпецификаций;

КонецФункции

//Имена реквизитов, от значений которых зависят параметры выбора спецификаций
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций() Экспорт
	
	ИменаРеквизитов = "";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры распределения затрат на выходные изделия.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров распределения затрат.
// 
// Возвращаемое значение:
//  Структура - параметры, уточняющие особенности распределения затрат на выходные изделия.
//
Функция ПараметрыРаспределенияЗатрат(Объект) Экспорт
	
	ПараметрыРаспределенияЗатрат = ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия("ВыходныеИзделия", Объект.СпособРаспределенияЗатратНаВыходныеИзделия);
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка Тогда
		ПараметрыРаспределенияЗатрат.АвтоРасчетЛюбойХарактеристики = Истина;
	КонецЕсли;
	
	ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации = Истина;
	
	ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакЕстьОшибкиЗаполнения = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакДоляСтоимостиОбязательна = Истина;
	
	ПараметрыРаспределенияЗатрат.ПоляСвязи = "Номенклатура,Характеристика,ЭтапРедактирование";
	ПараметрыРаспределенияЗатрат.ТолькоПросмотр = Истина;
	
	Возврат ПараметрыРаспределенияЗатрат;
	
КонецФункции

// Возвращает спецификации, в которые входит полуфабрикат производимый / обрабатываемый по указанной спецификации
//
// Параметры:
//  Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация полуфабриката
// 
// Возвращаемое значение:
//  Массив - зависимые спецификации
//
Функция ЗависимыеСпецификации(Спецификация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	(
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И Таблица.ОбработатьПоСпецификации
	|	И Таблица.Спецификация = &Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И Таблица.ОбработатьПоСпецификации
	|	И Таблица.Спецификация = &Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И Таблица.ПроизводитсяВПроцессе
	|	И Таблица.ИсточникПолученияПолуфабриката = &Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И Таблица.ПроизводитсяВПроцессе
	|	И Таблица.СпецификацияРемонта = &Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.СпецификацииИзделий КАК СпецификацииИзделий
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Таблица
	|		ПО СпецификацииИзделий.ВидНоменклатуры = Таблица.Номенклатура.ВидНоменклатуры
	|			И СпецификацииИзделий.Номенклатура В (Таблица.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			И СпецификацииИзделий.Характеристика В (ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка), Таблица.Характеристика)
	|			И Таблица.ПроизводитсяВПроцессе
	|			И Таблица.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
	|			И Таблица.ИсточникПолученияПолуфабриката = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|			И Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			
	|ГДЕ
	|	СпецификацииИзделий.Спецификация = &Спецификация
	|	И СпецификацииИзделий.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
	|	И СпецификацииИзделий.ПобочныйВыход = ЛОЖЬ
	|
	|) КАК Таблица");
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Возвращает ссылку на этап спецификации у которой производственный процесс одноэтапный
//
// Параметры:
//  Спецификация	- СправочникСсылка.РесурсныеСпецификации - спецификация, этапы которой требуется проверить
//
// Возвращаемое значение:
//   СправочникСсылка.ЭтапыПроизводства - этап одноэтапной спецификации
//
Функция ПолучитьЭтапОдногоЭтапногоПроцесса(Спецификация) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Этапы.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК Этапы
	|ГДЕ
	|	НЕ Этапы.ПометкаУдаления
	|	И Этапы.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа,
	|	Ссылка");
	Запрос.УстановитьПараметр("Владелец", Спецификация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;

КонецФункции

// Проверяет соответствие количества заказанного изделия, ограничениям на размер партии:
// минимальнаый и оптимальный размер партии, кратность партии.
// 
// Параметры:
// 	ДанныеСпецификации - см. Справочники.РесурсныеСпецификации.ДанныеСпецификации
// 	Количество - Число - размер партии в базовых единицах заказанного изделия (ДанныеСпецификации.ОсновноеИзделие).
// 	Отказ - Булево - результат проверки: если проверка не пройдена, переменной присваивается значение Истина.
//
Процедура ПроверитьРазмерПартии(ДанныеСпецификации, Количество, Отказ) Экспорт
	
	// Проверка на оптимальную / минимальную партию
	Если ДанныеСпецификации.ВыпускПроизвольнымиПорциями Тогда
		Коэффициент = ДанныеСпецификации.ОсновноеИзделие.КоэффициентПересчетаВОсновноеИзделие;
	Иначе
		ДанныеУпаковки = ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки;
		Коэффициент = ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
			* ДанныеУпаковки.Числитель / ДанныеУпаковки.Знаменатель;
	КонецЕсли;
	
	МинимальныйВыпуск    = Окр(ДанныеСпецификации.МинимальнаяПартияВыпуска * Коэффициент, 3);
	ОптимальныйВыпуск    = Окр(ДанныеСпецификации.ОптимальнаяПартияВыпуска * Коэффициент, 3);
	ДопустимоеПревышение = Окр(ДанныеСпецификации.ДопустимоеПревышениеОптимальнойПартииВыпуска * Коэффициент, 3);
	
	Если МинимальныйВыпуск <> 0
		И Количество < МинимальныйВыпуск Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Размер партии меньше минимально допустимого значения по спецификации (%1 %2).';uk='Розмір партії менше мінімально допустимого значення за специфікацією (%1 %2).'"),
				Формат(МинимальныйВыпуск, "ЧГ="),
				ДанныеСпецификации.ОсновноеИзделие.ЕдиницаИзмерения),,,,
			Отказ);
		
	ИначеЕсли ОптимальныйВыпуск <> 0
		И Количество > (ОптимальныйВыпуск + ДопустимоеПревышение) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Размер партии больше оптимального значения по спецификации (%1 %2).';uk='Розмір партії більше оптимального значення за специфікацією (%1 %2).'"),
				Формат(ОптимальныйВыпуск + ДопустимоеПревышение, "ЧГ="),
				ДанныеСпецификации.ОсновноеИзделие.ЕдиницаИзмерения),,,,
			Отказ);
	
	КонецЕсли;
	
	// Проверка на кратность выпуска
	Если НЕ ДанныеСпецификации.ВыпускПроизвольнымиПорциями
		И НЕ Отказ Тогда
		
		КоличествоНаЕдиницуПартииВыпуска = ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
			* ДанныеУпаковки.Числитель / ДанныеУпаковки.Знаменатель;
		
		Если Количество % КоличествоНаЕдиницуПартииВыпуска <> 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Размер партии не кратен нормативному значению по спецификации (%1 %2).';uk='Розмір партії не кратний нормативному значенню за специфікацією (%1 %2).'"),
					Формат(КоличествоНаЕдиницуПартииВыпуска, "ЧГ="),
					ДанныеСпецификации.ОсновноеИзделие.ЕдиницаИзмерения),,,,
			Отказ);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	УправлениеДаннымиОбИзделияхВызовСервера.РесурсныеСпецификацииОбработкаПолученияДанныхВыбора(
				ДанныеВыбора,
				Параметры, 
				СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	УправлениеДаннымиОбИзделияхВызовСервера.РесурсныеСпецификацииОбработкаПолученияФормы(
				ВидФормы,
				Параметры,
				ВыбраннаяФорма,
				СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполнения


#КонецОбласти

#Область ДанныеСпецификаций

#Область Основное

// Конструктор структуры данных спецификации
// 
// Возвращаемое значение:
// 	Структура - из:
//		* Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
//		* СпецификацияПредставление - Строка - представление спецификации
//		* СпособРаспределенияЗатратНаВыходныеИзделия - ПеречислениеСсылка.СпособыРаспределенияЗатратНаВыходныеИзделия - способ распределения затрат
//		* ТипПроизводственногоПроцесса - ПеречислениеСсылка.ТипыПроизводственныхПроцессов - тип производственного процесса
//		* ВариантНазначения - ПеречислениеСсылка.ВариантыНазначенияСпецификации - вариант назначения
//		* МногоэтапныйПроизводственныйПроцесс - Булево - признак многоэтапного процесса
//		* ВыпускПроизвольнымиПорциями - Булево - признак выпуска произвольными порциями
//		* ОптимальнаяПартияВыпуска - Число - размер оптимальной партии
//		* ДопустимоеПревышениеОптимальнойПартииВыпуска - Число - размер допустимого превышения
//		* МинимальнаяПартияВыпуска - Число - размер минимальной партии
//		* ОсновноеИзделие - см. СтруктураДанныхОсновногоИзделияСпецификации
//		* ОграниченСрокПролеживания - Булево - признак ограничения срока пролеживания
//		* МаксимальныйСрокПролеживанияВДнях - Число - максимальный срок пролеживания
//		* ОптимальноеКоличествоПередачиМеждуЭтапами - Число - оптимальное количество передачи между этапами
//		* СостояниеДанныхНаборов - Строка - текущее состояние наборов: Распакованы, Свернуты
//		* Этапы - ТаблицаЗначений - таблица этапов
//		* ВыходныеИзделия - ТаблицаЗначений - таблица выходных изделий:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* ВозвратныеОтходы - ТаблицаЗначений - таблица возвратных отходов:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* МатериалыИУслуги - ТаблицаЗначений - таблица материалов:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* ВходящиеИзделия - ТаблицаЗначений - таблица входящих изделий:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* Трудозатраты - ТаблицаЗначений - таблица трудозатрат:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* ВидыРабочихЦентров - ТаблицаЗначений - таблица видов рабочих центров:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* АльтернативныеВидыРабочихЦентров - ТаблицаЗначений - таблица альтернативных видов рабочих центров:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//
Функция ДанныеСпецификацииКонструктор() Экспорт
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Спецификация");
	СтруктураДанных.Вставить("СпецификацияПредставление", "");
	
	СтруктураДанных.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия");
	
	СтруктураДанных.Вставить("ТипПроизводственногоПроцесса");
	СтруктураДанных.Вставить("ВариантНазначения");
	
	СтруктураДанных.Вставить("МногоэтапныйПроизводственныйПроцесс",  Ложь);
	
	СтруктураДанных.Вставить("ВыпускПроизвольнымиПорциями",          Ложь);
	СтруктураДанных.Вставить("ОптимальнаяПартияВыпуска", 0);
	СтруктураДанных.Вставить("ДопустимоеПревышениеОптимальнойПартииВыпуска", 0);
	СтруктураДанных.Вставить("МинимальнаяПартияВыпуска", 0);
	
	СтруктураДанных.Вставить("ОсновноеИзделие", СтруктураДанныхОсновногоИзделияСпецификации());
	
	СтруктураДанных.Вставить("ОграниченСрокПролеживания", Ложь);
	СтруктураДанных.Вставить("МаксимальныйСрокПролеживанияВДнях", 0);
	
	СтруктураДанных.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", 0);
	
	СтруктураДанных.Вставить("ЕстьУточняемоеОсновноеИзделие", Ложь);
	СтруктураДанных.Вставить("ЕстьПараметризацияРесурсов", Ложь);
	СтруктураДанных.Вставить("ЕстьАвтовыборСпецификацийВПроцессе", Ложь);
	СтруктураДанных.Вставить("ЕстьРасчетВероятности", Ложь);
	СтруктураДанных.Вставить("ЕстьНекратныйВыпуск", Ложь);
	СтруктураДанных.Вставить("ЕстьНекратныеНормативыВРЦ", Ложь);
	
	СтруктураДанных.Вставить("СостояниеДанныхНаборов", "Отсутствуют"); // Свернуты, Распакованы
	
	Возврат СтруктураДанных;
	
КонецФункции

// Получает данные спецификаций по заданному списку данных по номенклатуре
// 
// Параметры:
// 	СписокСтруктураДанных - см. СписокНоменклатуры
// 	ПараметрыВыборки - см. ПараметрыВыборкиДанных
// 
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Число
// * Значение - см. ДанныеСпецификацииКонструктор
//
Функция ДанныеСпецификации(СписокСтруктураДанных, ПараметрыВыборки) Экспорт
	
	ПереченьДанных = Неопределено;
	Если НЕ ПараметрыВыборки.Свойство("ПереченьДанных", ПереченьДанных) ИЛИ НЕ ЗначениеЗаполнено(ПереченьДанных) Тогда
		ПереченьДанных = ПереченьДанныхСпецификации();
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Неопределено;
	Если НЕ ПараметрыВыборки.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц)
		ИЛИ МенеджерВременныхТаблиц = Неопределено
		Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	#Область Инициализация
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Идентификатор             КАК Идентификатор,
	|	Т.Спецификация              КАК Спецификация,
	|	Т.Номенклатура              КАК Номенклатура,
	|	Т.Характеристика            КАК Характеристика,
	|	Т.Количество                КАК Количество,
	|	Т.ПодразделениеДиспетчер    КАК ПодразделениеДиспетчер,
	|	Т.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	Т.Распоряжение              КАК Распоряжение,
	|	Т.Назначение                КАК Назначение,
	|	Т.НачалоПроизводства        КАК НачалоПроизводства
	|ПОМЕСТИТЬ ВтДанныеПоНоменклатуре
	|ИЗ
	|	&НаборДанныхПоНоменклатуре КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация, Идентификатор
	|;
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ГДЕ
	|	&ПроверитьНаличиеПараметризацииРесурсов
	|	И ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1 
	|			ИСТИНА 
	|		ИЗ 
	|			ВтДанныеПоНоменклатуре КАК Т 
	|		ГДЕ
	|			Т.Спецификация.ЕстьПараметризацияРесурсов)
	|";
	
	Если ТипЗнч(СписокСтруктураДанных) = Тип("ТаблицаЗначений") Тогда
		НаборДанныхПоНоменклатуре = СписокСтруктураДанных;
	Иначе
		НаборДанныхПоНоменклатуре = СписокНоменклатуры();
		ЗаполнитьЗначенияСвойств(НаборДанныхПоНоменклатуре.Добавить(), СписокСтруктураДанных);
	КонецЕсли;
	Запрос.УстановитьПараметр("НаборДанныхПоНоменклатуре", НаборДанныхПоНоменклатуре);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Идентификатор",           0);
	ДополнительныеПараметры.Вставить("ПодразделениеДиспетчер",  Справочники.СтруктураПредприятия.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("Распоряжение",            Справочники.РесурсныеСпецификации.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("Назначение",              Справочники.Назначения.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("НачалоПроизводства",      Дата(1,1,1));
	
	Для каждого КлючИЗначение Из ДополнительныеПараметры Цикл
		ИмяПараметра = КлючИЗначение.Ключ;
		Если НаборДанныхПоНоменклатуре.Колонки.Найти(ИмяПараметра) = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Т."+ИмяПараметра, "&"+ИмяПараметра);
			Запрос.УстановитьПараметр(ИмяПараметра, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ИсточникиПараметризацииРесурсов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		СтрРазделить("ВыходныеИзделия,МатериалыИУслуги",","), ПереченьДанных);
	
	Запрос.УстановитьПараметр("ПроверитьНаличиеПараметризацииРесурсов", ИсточникиПараметризацииРесурсов.ВГраница() <> -1);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если ИсточникиПараметризацииРесурсов.ВГраница() <> -1 И НЕ Результат.Пустой() Тогда
		ПереченьДанных = ОбщегоНазначения.СкопироватьРекурсивно(ПереченьДанных, Ложь);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПереченьДанных, ИсточникиПараметризацииРесурсов);
	КонецЕсли;
	
	#КонецОбласти
	
	СписокТаблицДляУдаления = Новый Массив;
	СписокТаблицДляУдаления.Добавить("ВтДанныеПоНоменклатуре");
	
	РазделительЗапросовВПакете = ОбщегоНазначенияУТ.РазделительЗапросовВПакете();
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	#Область ВтИзделия
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВтДанныеПоНоменклатуре.Идентификатор                КАК Идентификатор,
	|	ВтДанныеПоНоменклатуре.Спецификация                 КАК Спецификация,
	|
	|	ВыходныеИзделия.НомерСтроки                         КАК НомерСтроки,
	|
	|	ВыходныеИзделия.ВидНоменклатуры                     КАК ВидНоменклатуры,
	|	&ВыходныеИзделияИсточникНоменклатуры                КАК Номенклатура,
	|	&ВыходныеИзделияИсточникХарактеристики              КАК Характеристика,
	|	
	|	ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать)                   КАК СпособПолученияМатериала,
	|
	|	ВыходныеИзделия.Этап                                КАК Этап,
	|
	|	ВЫРАЗИТЬ(ВыходныеИзделия.КоличествоУпаковок * ЕСТЬNULL(&ВыходныеИзделияКоэффициентУпаковки, 1) КАК ЧИСЛО(15,3)) КАК Количество,
	|	ВыходныеИзделия.КоличествоУпаковок                                                                              КАК КоличествоУпаковок,
	|
	|	ВыходныеИзделия.Упаковка                            КАК Упаковка,
	|	ЕСТЬNULL(&ВыходныеИзделияКоэффициентУпаковки, 1)    КАК КоэффициентУпаковки,
	|
	|	ВыходныеИзделия.ПроцентБрака                        КАК ПроцентБрака,
	|
	|	ВыходныеИзделия.ДоляСтоимости                       КАК ДоляСтоимости,
	|	ВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	ВыходныеИзделия.ОбработатьПоСпецификации            КАК ОбработатьПоСпецификации,
	|	ВыходныеИзделия.Спецификация                        КАК ОбработатьПоСпецификацииСпецификация,
	|	ВыходныеИзделия.СпособАвтовыбораНоменклатуры        КАК СпособАвтовыбораНоменклатуры,
	|	ВыходныеИзделия.СпособАвтовыбораХарактеристики      КАК СпособАвтовыбораХарактеристики,
	|	ВыходныеИзделия.СвойствоСодержащееНоменклатуру      КАК СвойствоСодержащееНоменклатуру,
	|	ВыходныеИзделия.АлгоритмАвтовыбораХарактеристики    КАК АлгоритмАвтовыбораХарактеристики,
	|	ВыходныеИзделия.АлгоритмРасчетаКоличества           КАК АлгоритмРасчетаКоличества,
	|	ВыходныеИзделия.КлючСвязи                           КАК КлючСвязи,
	|
	|	ВЫБОР КОГДА ВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|		И (ВыходныеИзделия.НомерСтроки = 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                               КАК ЭтоОсновноеИзделие,
	|	ИСТИНА                                              КАК ЭтоВыходноеИзделие,
	|
	|	ВЫБОР КОГДА ВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|		И (ВыходныеИзделия.Номенклатура = ВтДанныеПоНоменклатуре.Номенклатура
	|			ИЛИ ВтДанныеПоНоменклатуре.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ВыходныеИзделия.НомерСтроки = 1
	|			ИЛИ ВыходныеИзделия.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ВыходныеИзделия.ВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры
	|				И ВыходныеИзделия.НомерСтроки = 1)
	|		И (ВтДанныеПоНоменклатуре.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ВыходныеИзделия.НомерСтроки = 1
	|			ИЛИ ВыходныеИзделия.Характеристика = ВтДанныеПоНоменклатуре.Характеристика
	|			ИЛИ ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                               КАК СоответствуетДаннымПоНоменклатуре
	|
	|ПОМЕСТИТЬ ВтИзделия
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО ВыходныеИзделия.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтДанныеПоНоменклатуре.Идентификатор,
	|	ВтДанныеПоНоменклатуре.Спецификация,
	|
	|	0,
	|
	|	ВходныеИзделия.ОсновноеИзделиеВидНоменклатуры,
	|	&ВходныеИзделияИсточникНоменклатуры,
	|	&ВходныеИзделияИсточникХарактеристики,
	|
	|	ВходныеИзделия.ОсновноеИзделиеХарактеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать),
	|
	|	ВходныеИзделия.ОсновноеИзделиеЭтап,
	|
	|	ВЫРАЗИТЬ(ВходныеИзделия.ОсновноеИзделиеКоличествоУпаковок * ЕСТЬNULL(&ВходныеИзделияКоэффициентУпаковки, 1) КАК ЧИСЛО(15,3)),
	|	ВходныеИзделия.ОсновноеИзделиеКоличествоУпаковок,
	|
	|	ВходныеИзделия.ОсновноеИзделиеУпаковка,
	|	ЕСТЬNULL(&ВходныеИзделияКоэффициентУпаковки, 1),
	|
	|	0,
	|
	|	1,
	|	ВходныеИзделия.ТипПроизводственногоПроцесса,
	|	ЛОЖЬ             КАК ОбработатьПоСпецификации,
	|	НЕОПРЕДЕЛЕНО     КАК ОбработатьПоСпецификацииСпецификация,
	|	НЕОПРЕДЕЛЕНО     КАК СпособАвтовыбораНоменклатуры,
	|	НЕОПРЕДЕЛЕНО     КАК СпособАвтовыбораХарактеристики,
	|	НЕОПРЕДЕЛЕНО     КАК СвойствоСодержащееНоменклатуру,
	|	""""             КАК АлгоритмАвтовыбораХарактеристики,
	|	""""             КАК АлгоритмРасчетаКоличества,
	|	&ПустойКлючСвязи КАК КлючСвязи,
	|
	|	ВходныеИзделия.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка) КАК ЭтоОсновноеИзделие,
	|	ЛОЖЬ КАК ЭтоВыходноеИзделие,
	|
	|	ВЫБОР КОГДА ВходныеИзделия.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			И (ВходныеИзделия.ОсновноеИзделиеНоменклатура = ВтДанныеПоНоменклатуре.Номенклатура
	|				ИЛИ ВтДанныеПоНоменклатуре.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ИЛИ ВходныеИзделия.ОсновноеИзделиеНоменклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВходныеИзделия.ОсновноеИзделиеВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры)
	|			И (ВтДанныеПоНоменклатуре.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ИЛИ ВходныеИзделия.ОсновноеИзделиеХарактеристика = ВтДанныеПоНоменклатуре.Характеристика
	|				ИЛИ ВходныеИзделия.ОсновноеИзделиеХарактеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК ВходныеИзделия
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО ВходныеИзделия.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
	|			И ВходныеИзделия.ТипПроизводственногоПроцесса В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор, НомерСтроки
	|;
	|";
	
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВыходныеИзделия.Упаковка",
		"ВЫРАЗИТЬ(&ВыходныеИзделияИсточникНоменклатуры КАК Справочник.Номенклатура)");
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ВыходныеИзделияКоэффициентУпаковки",
		ТекстЗапросаКоэффициентУпаковки);
	
	ПараметрыПодстановкиВыходныеИзделия = ПараметрыПодстановкиНоменклатураХарактеристикаОсновногоИзделия(
		"ВыходныеИзделия",
		"ВидНоменклатуры",
		"Номенклатура",
		"Характеристика");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникНоменклатуры",   ПараметрыПодстановкиВыходныеИзделия.ИсточникНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникХарактеристики", ПараметрыПодстановкиВыходныеИзделия.ИсточникХарактеристика);
	
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВходныеИзделия.ОсновноеИзделиеУпаковка",
		"ВЫРАЗИТЬ(&ВходныеИзделияИсточникНоменклатуры КАК Справочник.Номенклатура)");
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ВходныеИзделияКоэффициентУпаковки",
		ТекстЗапросаКоэффициентУпаковки);
	
	ПараметрыПодстановкиВходныеИзделия  = ПараметрыПодстановкиНоменклатураХарактеристикаОсновногоИзделия(
		"ВходныеИзделия",
		"ОсновноеИзделиеВидНоменклатуры",
		"ОсновноеИзделиеНоменклатура",
		"ОсновноеИзделиеХарактеристика");
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВходныеИзделияИсточникНоменклатуры",   ПараметрыПодстановкиВходныеИзделия.ИсточникНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВходныеИзделияИсточникХарактеристики", ПараметрыПодстановкиВходныеИзделия.ИсточникХарактеристика);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтИзделия");
	
	#КонецОбласти
	
	#Область ВтСпособыПолученияМатериалов
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтСпособыПолученияМатериалов") = Неопределено Тогда
	
		ТекстыЗапроса.Добавить(ОбеспечениеПроизводства.ТекстЗапросаВТСпособыПолученияМатериаловПустая());
		СписокТаблицДляУдаления.Добавить("ВтСпособыПолученияМатериалов");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВтФорматыСкладов
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтФорматыСкладов") = Неопределено Тогда
	
		ТекстыЗапроса.Добавить(Справочники.ФорматыМагазинов.ТекстЗапросаВтФорматыСкладов(Ложь));
		СписокТаблицДляУдаления.Добавить("ВтФорматыСкладов");
	
	КонецЕсли;
	
	#КонецОбласти
	

	#Область ДанныеПоНоменклатуре
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеПоНоменклатуре.Идентификатор             КАК Идентификатор,
	|	ДанныеПоНоменклатуре.Спецификация              КАК Спецификация,
	|	ДанныеПоНоменклатуре.Номенклатура              КАК Номенклатура,
	|	ДанныеПоНоменклатуре.Характеристика            КАК Характеристика,
	|	ДанныеПоНоменклатуре.Количество                КАК Количество,
	|	ДанныеПоНоменклатуре.ПодразделениеДиспетчер    КАК ПодразделениеДиспетчер,
	|	ДанныеПоНоменклатуре.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	ДанныеПоНоменклатуре.Распоряжение              КАК Распоряжение,
	|	ДанныеПоНоменклатуре.Назначение                КАК Назначение,
	|	ДанныеПоНоменклатуре.НачалоПроизводства        КАК НачалоПроизводства
	|ИЗ
	|	ВтДанныеПоНоменклатуре КАК ДанныеПоНоменклатуре
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ДанныеПоНоменклатуре");
	
	#КонецОбласти
	
	
	#Область РеквизитыСпецификации
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВтДанныеПоНоменклатуре.Идентификатор КАК Идентификатор,
	|
	|	РесурсныеСпецификации.Ссылка         КАК Спецификация,
	|	РесурсныеСпецификации.Представление  КАК СпецификацияПредставление,
	|
	|	РесурсныеСпецификации.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатратНаВыходныеИзделия,
	|
	|	РесурсныеСпецификации.ТипПроизводственногоПроцесса         КАК ТипПроизводственногоПроцесса,
	|	РесурсныеСпецификации.ВариантНазначения                    КАК ВариантНазначения,
	|	РесурсныеСпецификации.МногоэтапныйПроизводственныйПроцесс  КАК МногоэтапныйПроизводственныйПроцесс,
	|
	|	ВЫБОР
	|		КОГДА &ПереопределятьНастройкуПартииВыпуска
	|			ТОГДА &ВыпускПроизвольнымиПорциями
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &ДоступноОписаниеПартииВыпуска
	|					ТОГДА РесурсныеСпецификации.ВыпускПроизвольнымиПорциями
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ                                                         КАК ВыпускПроизвольнымиПорциями,
	|	ВЫБОР
	|		КОГДА &ПереопределятьНастройкуПартииВыпуска
	|			ТОГДА 0
	|		ИНАЧЕ РесурсныеСпецификации.ОптимальнаяПартияВыпуска
	|	КОНЕЦ                                                         КАК ОптимальнаяПартияВыпуска,
	|	ВЫБОР
	|		КОГДА &ПереопределятьНастройкуПартииВыпуска
	|			ТОГДА 0
	|		ИНАЧЕ РесурсныеСпецификации.ДопустимоеПревышениеОптимальнойПартииВыпуска
	|	КОНЕЦ                                                         КАК ДопустимоеПревышениеОптимальнойПартииВыпуска,
	|	ВЫБОР
	|		КОГДА &ПереопределятьНастройкуПартииВыпуска
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &ДоступноОписаниеПартииВыпуска
	|					ТОГДА РесурсныеСпецификации.МинимальнаяПартияВыпуска
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ                                                         КАК МинимальнаяПартияВыпуска,
	|	
	|	РесурсныеСпецификации.ОграниченСрокПролеживанияВыходныхИзделий КАК ОграниченСрокПролеживания,
	|	РесурсныеСпецификации.МаксимальныйСрокПролеживанияВыходныхИзделий КАК МаксимальныйСрокПролеживанияВДнях,
	|	РесурсныеСпецификации.ОптимальноеКоличествоПередачиМеждуЭтапами КАК ОптимальноеКоличествоПередачиМеждуЭтапами,
	|	
	|	РесурсныеСпецификации.ЕстьУточняемоеОсновноеИзделие      КАК ЕстьУточняемоеОсновноеИзделие,
	|	РесурсныеСпецификации.ЕстьПараметризацияРесурсов         КАК ЕстьПараметризацияРесурсов,
	|	РесурсныеСпецификации.ЕстьАвтовыборСпецификацийВПроцессе КАК ЕстьАвтовыборСпецификацийВПроцессе,
	|	РесурсныеСпецификации.ЕстьРасчетВероятности              КАК ЕстьРасчетВероятности,
	|	РесурсныеСпецификации.ЕстьНекратныйВыпуск                КАК ЕстьНекратныйВыпуск,
	|	РесурсныеСпецификации.ЕстьНекратныеНормативыВРЦ          КАК ЕстьНекратныеНормативыВРЦ
	|	
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО РесурсныеСпецификации.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "РеквизитыСпецификации");
	
	#КонецОбласти
	
	#Область ОсновноеИзделие
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВтИзделия.Идентификатор                            КАК Идентификатор,
	|
	|	ВтИзделия.ВидНоменклатуры                          КАК ВидНоменклатуры,
	|	ВтИзделия.Номенклатура                             КАК Номенклатура,
	|	ВтИзделия.Характеристика                           КАК Характеристика,
	|	
	|	0                                                  КАК Количество,
	|	ВтИзделия.КоличествоУпаковок                       КАК КоличествоУпаковок,
	|	ВтИзделия.КоличествоУпаковок                       КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
	|	ВтИзделия.Номенклатура.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	|	ВтИзделия.Упаковка                                 КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО                                       КАК ДанныеУпаковки,
	|
	|	ВтИзделия.Номенклатура.ТипНоменклатуры             КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВтИзделия.Номенклатура.ИспользованиеХарактеристик В (
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                              КАК ХарактеристикиИспользуются,
	|
	|	ВтИзделия.ЛюбаяХарактеристика                      КАК ЛюбаяХарактеристика,
	|	ВтИзделия.Спецификация                             КАК Спецификация,
	|	ВтИзделия.Спецификация.ВариантНазначения           КАК ВариантНазначения,
	|	ВЫБОР
	|		КОГДА &УчитыватьВероятностьБрака
	|			ТОГДА ВтИзделия.ПроцентБрака / 100
	|		ИНАЧЕ 0
	|	КОНЕЦ                                              КАК КоэффициентБрака,
	|	ВтИзделия.ЭтоОсновноеИзделие                       КАК ЭтоОсновноеИзделие,
	|	
	|	ЕСТЬNULL(ВтИзделияОсновноеИзделие.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))         КАК ОсновноеИзделиеНоменклатура,
	|	ЕСТЬNULL(ВтИзделияОсновноеИзделие.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ОсновноеИзделиеУпаковка,
	|	ЕСТЬNULL(ВтИзделияОсновноеИзделие.КоличествоУпаковок, 0)                                                КАК ОсновноеИзделиеКоличествоУпаковокНаЕдиницуПартииВыпуска,
	|
	|	ЕСТЬNULL(ВтИзделия.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК ЕдиницаИзмеренияШтучная,
	|	ЕСТЬNULL(&ТекстЗапросаТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК УпаковкаШтучная,
	|	ЕСТЬNULL(ВтИзделия.Номенклатура.ГруппаАналитическогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)) КАК ГруппаАналитическогоУчета
	|
	|ИЗ ВтИзделия КАК ВтИзделия
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИзделия КАК ВтИзделияОсновноеИзделие
	|		ПО ВтИзделия.Идентификатор = ВтИзделияОсновноеИзделие.Идентификатор
	|			И НЕ ВтИзделия.ЭтоОсновноеИзделие
	|			И ВтИзделияОсновноеИзделие.ЭтоОсновноеИзделие
	|
	|ГДЕ
	|	ВтИзделия.СоответствуетДаннымПоНоменклатуре
	|";
	
	ТекстПоляТипИзмеряемойВеличины = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
		"ТипИзмеряемойВеличины",
		"ВтИзделия.Упаковка",
		"ВтИзделия.Номенклатура");
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаТипИзмеряемойВеличины",
		ТекстПоляТипИзмеряемойВеличины);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ОсновноеИзделие");
	
	#КонецОбласти
	
	#Область Этапы
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	//ЭтапыПроизводства_Представления
	|	ВтДанныеПоНоменклатуре.Идентификатор                                     КАК Идентификатор,
	|	ЭтапыПроизводства.Ссылка                                                 КАК Этап,
	|	ЭтапыПроизводства.Владелец                                               КАК Спецификация,
	|	ЭтапыПроизводства.Представление                                          КАК ЭтапПредставление,
	|	ЭтапыПроизводства.НомерЭтапа                                             КАК НомерЭтапа,
	|	ЭтапыПроизводства.НомерСледующегоЭтапа                                   КАК НомерСледующегоЭтапа,
	|	ЭтапыПроизводства.Подразделение                                          КАК Подразделение,
	|	1                                                                        КАК Количество,
	|	1                                                                        КАК КоличествоНаЕдиницуПартииВыпуска,
	|	ЕСТЬNULL(ОсновноеВыходноеИзделие.Количество, 0)                          КАК КоличествоИзделие,
	|
	|	ЭтапыПроизводства.ПланироватьРаботуВидовРабочихЦентров                   КАК ПланироватьРаботуВидовРабочихЦентров,
	|	ЭтапыПроизводства.Непрерывный                                            КАК Непрерывный,
	|	ЭтапыПроизводства.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий  КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
	|	ЭтапыПроизводства.ДлительностьЭтапа                                      КАК ДлительностьЭтапа,
	|	ЭтапыПроизводства.ЕдиницаИзмеренияДлительностиЭтапа                      КАК ЕдиницаИзмеренияДлительностиЭтапа,
	|	ЭтапыПроизводства.ПредварительныйБуфер                                   КАК ПредварительныйБуфер,
	|	ЭтапыПроизводства.ЗавершающийБуфер                                       КАК ЗавершающийБуфер,
	|	ЭтапыПроизводства.ЕдиницаИзмеренияПредварительногоБуфера                 КАК ЕдиницаИзмеренияПредварительногоБуфера,
	|	ЭтапыПроизводства.ЕдиницаИзмеренияЗавершающегоБуфера                     КАК ЕдиницаИзмеренияЗавершающегоБуфера,
	|	ЭтапыПроизводства.МаршрутнаяКарта                                        КАК МаршрутнаяКарта,
	|	ЭтапыПроизводства.КоэффициентМаршрутнойКарты                             КАК КоэффициентМаршрутнойКарты,
	|	ЭтапыПроизводства.КоэффициентМаршрутнойКарты                             КАК КоэффициентМаршрутнойКартыНаЕдиницуПартииВыпуска,
	|	ЭтапыПроизводства.Описание                                               КАК Описание,
	|	ЭтапыПроизводства.ПроизводствоНаСтороне                                  КАК ПроизводствоНаСтороне,
	|	ЭтапыПроизводства.Партнер                                                КАК Партнер,
	|	ЭтапыПроизводства.ГрафикРаботыПартнера                                   КАК ГрафикРаботыПартнера,
	|	ЭтапыПроизводства.УслугаПереработчика                                    КАК УслугаПереработчика,
	|	ЭтапыПроизводства.ХарактеристикаУслугиПереработчика                      КАК ХарактеристикаУслугиПереработчика,
	|	ЭтапыПроизводства.СтатьяКалькуляции                                      КАК СтатьяКалькуляции,
	|
	|
	|	ВЫБОР РесурсныеСпецификации.ТипПроизводственногоПроцесса
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
	|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
	|	КОНЕЦ                                                                    КАК ДнейОтПотребности,
	|
	|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях,0)              КАК ДлительностьЭтапаВДнях,
	|
	|	ВЫБОР ЭтапыПроизводства.ЕдиницаИзмеренияДлительностиЭтапа
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА 60
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА 3600
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|			ТОГДА 86400
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА 86400
	|		ИНАЧЕ 1
	|	КОНЕЦ * ЭтапыПроизводства.ДлительностьЭтапа                              КАК ДлительностьЭтапаВСекундах
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО ЭтапыПроизводства.Владелец = ВтДанныеПоНоменклатуре.Спецификация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|		ПО ЭтапыПроизводства.Владелец = РесурсныеСпецификации.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
	|		ПО ВтДанныеПоНоменклатуре.Идентификатор = ОсновноеВыходноеИзделие.Идентификатор
	|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
	|		ПО НормативнаяДлительностьЭтапов.Этап = ЭтапыПроизводства.Ссылка
	|
	|
	|ГДЕ
	|	НЕ ЭтапыПроизводства.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор, НомерЭтапа";
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "Этапы");
	
	#КонецОбласти
	
	#Область ВыходныеИзделия
	
	Если ПереченьДанных.Найти("ВыходныеИзделия") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	//ВыходныеИзделия_Представления
		|	ВтИзделия.Идентификатор                         КАК Идентификатор,
		|	ВтИзделия.НомерСтроки                           КАК НомерСтроки,
		|	ВтИзделия.ВидНоменклатуры                       КАК ВидНоменклатуры,
		|	ВтИзделия.Номенклатура                          КАК Номенклатура,
		|	ВтИзделия.Характеристика                        КАК Характеристика,
		|	ВтИзделия.ЛюбаяХарактеристика                   КАК ЛюбаяХарактеристика,
		|
		|	ВтИзделия.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК ЕдиницаИзмеренияШтучная,
		|	ЕСТЬNULL(&ТекстЗапросаТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ)            КАК УпаковкаШтучная,
		|
		|	0                                               КАК Количество,
		|	ВтИзделия.КоличествоУпаковок                    КАК КоличествоУпаковок,
		|	ВтИзделия.КоличествоУпаковок                    КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	ВтИзделия.Номенклатура.ЕдиницаИзмерения         КАК ЕдиницаИзмерения,
		|	ВтИзделия.Упаковка                              КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО                                    КАК ДанныеУпаковки,
		|
		|	ЕСТЬNULL(ОсновноеВыходноеИзделие.Количество, 0) КАК КоличествоИзделие,
		|
		|	%ДоляСтоимости%                                 КАК ДоляСтоимости,
		|	%ДоляСтоимостиНаЕдиницу%                        КАК ДоляСтоимостиНаЕдиницу,
		|
		|	ВтИзделия.Этап                                  КАК Этап,
		|	ВтИзделия.Этап.Подразделение                    КАК ПодразделениеЭтапа,
		|	&ТекстПолеСклад                                 КАК Склад,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)       КАК ЭтоЦеховаяКладовая,
		|	ВтИзделия.Номенклатура.ТипНоменклатуры          КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА ВтИзделия.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                           КАК ХарактеристикиИспользуются,
		|	ВтИзделия.ОбработатьПоСпецификации              КАК ОбработатьПоСпецификации,
		|	ВтИзделия.ОбработатьПоСпецификацииСпецификация  КАК Спецификация,
		|
		|	ВЫБОР
		|		КОГДА &УчитыватьВероятностьБрака
		|			ТОГДА ВтИзделия.ПроцентБрака / 100
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК КоэффициентБрака,
		|
		|	ВЫБОР 
		|		КОГДА (ВтИзделия.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|				ИЛИ ВтИзделия.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|				И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                           КАК ИспользуетсяАвтовыбор,
		|	ПРЕДСТАВЛЕНИЕ("""")                             КАК СведенияАвтовыбора,
		|	ВтИзделия.СпособАвтовыбораНоменклатуры          КАК СпособАвтовыбораНоменклатуры,
		|	ВтИзделия.СпособАвтовыбораХарактеристики        КАК СпособАвтовыбораХарактеристики,
		|	ВтИзделия.СвойствоСодержащееНоменклатуру        КАК СвойствоСодержащееНоменклатуру,
		|	ВтИзделия.АлгоритмАвтовыбораХарактеристики      КАК АлгоритмАвтовыбораХарактеристики,
		|
		|	// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА ВтИзделия.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                           КАК АлгоритмРасчетаКоличества,
		|	ПРЕДСТАВЛЕНИЕ("""")                             КАК Формула,
		|
		|	// округление:
		|	&ОкруглятьКоличествоШтучныхТоваров
		|		И ВтИзделия.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И ВтИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		И &ТекстЗапросаТипИзмеряемойВеличины В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
    	|       		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
    	|               ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
    	|               ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)) КАК Округлить,
		|
		|	ВЫБОР ВтИзделия.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
		|	КОНЕЦ                                             КАК ДнейОтПотребности,
		|
		|	ВтИзделия.КлючСвязи                             КАК КлючСвязи
		|
		|ИЗ
		|	ВтИзделия КАК ВтИзделия
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО ВтИзделия.Идентификатор = ОсновноеВыходноеИзделие.Идентификатор
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = ВтИзделия.Этап
		|
		|		%ТекстСоединенияНастройкиПередачиМатериалов%
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
		|
		|		%СоединениеДоляСтоимости%
		|
		|ГДЕ
		|	ВтИзделия.ЭтоВыходноеИзделие = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор, НомерСтроки";
		
		// Для совместимости с 2.1, получение склада по основному выходному изделию
		ИмяТаблицыТовары =
			?(ПараметрыВыборки.ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения,
			"ВтИзделия",
			"ОсновноеВыходноеИзделие");
		
		ТекстЗапросаДляПолученияСклада = ОбеспечениеПроизводства.ТекстЗапросаНастройкиПередачиМатериалов(
			ИмяТаблицыТовары,
			"Этап.Подразделение",
			ПараметрыВыборки.ВариантЗаполненияОбеспечения);
			
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"%ТекстСоединенияНастройкиПередачиМатериалов%",
							ТекстЗапросаДляПолученияСклада.ТекстСоединения);
							
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПолеСклад",
							ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
		
		ТекстПоляТипИзмеряемойВеличины = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
							"ТипИзмеряемойВеличины",
							"ВтИзделия.Упаковка",
							"ВтИзделия.Номенклатура");
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстЗапросаТипИзмеряемойВеличины",
							ТекстПоляТипИзмеряемойВеличины);
		
		ПараметрыПодстановки = ПроизводствоСервер.ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(
			"ВтИзделия",
			"ВтИзделия.Спецификация.СпособРаспределенияЗатратНаВыходныеИзделия",
			"(Номенклатура, Характеристика) В (
			|	Выбрать
			|		Т.Номенклатура,
			|		Т.Характеристика
			|	ИЗ
			|		ВтИзделия КАК Т
			|	ГДЕ
			|		Т.ЭтоВыходноеИзделие = ИСТИНА
			|		И Т.Спецификация.СпособРаспределенияЗатратНаВыходныеИзделия =
			|			ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости))");
		ПроизводствоСервер.ВыполнитьПодстановкуАлгоритмаРасчетаДолейСтоимости(ТекстЗапроса, ПараметрыПодстановки);
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВыходныеИзделия");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВозвратныеОтходы
	
	Если ПереченьДанных.Найти("ВозвратныеОтходы") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	//ВозвратныеОтходы_Представления
		|	ВтДанныеПоНоменклатуре.Идентификатор               КАК Идентификатор,
		|	ВозвратныеОтходы.НомерСтроки                       КАК НомерСтроки,
		|	ВозвратныеОтходы.Номенклатура                      КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ВозвратныеОтходы.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВозвратныеОтходы.Характеристика
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                              КАК Характеристика,
		|	ВЫБОР 
		|		КОГДА ВозвратныеОтходы.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА ВозвратныеОтходы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ЛюбаяХарактеристика,
		|
		|	0                                                  КАК Количество,
		|	ВозвратныеОтходы.КоличествоУпаковок                КАК КоличествоУпаковок,
		|	ВозвратныеОтходы.КоличествоУпаковок                КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	ВозвратныеОтходы.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	ВозвратныеОтходы.Упаковка                          КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО                                       КАК ДанныеУпаковки,
		|
		|	ЕСТЬNULL(ОсновноеВыходноеИзделие.Количество, 0)    КАК КоличествоИзделие,
		|
		|	ВозвратныеОтходы.СтатьяКалькуляции                 КАК СтатьяКалькуляции,
		|
		|	ВЫБОР 
		|		КОГДА (ВозвратныеОтходы.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|				ИЛИ ВозвратныеОтходы.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|				И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ИспользуетсяАвтовыбор,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК СведенияАвтовыбора,
		|	ВозвратныеОтходы.СпособАвтовыбораНоменклатуры      КАК СпособАвтовыбораНоменклатуры,
		|	ВозвратныеОтходы.СпособАвтовыбораХарактеристики    КАК СпособАвтовыбораХарактеристики,
		|	ВозвратныеОтходы.СвойствоСодержащееНоменклатуру    КАК СвойствоСодержащееНоменклатуру,
		|	ВозвратныеОтходы.АлгоритмАвтовыбораХарактеристики  КАК АлгоритмАвтовыбораХарактеристики,
		|
		|	// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА ВозвратныеОтходы.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                              КАК АлгоритмРасчетаКоличества,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК Формула,
		|
		|	// округление:
		|	&ОкруглятьКоличествоШтучныхТоваров
		|		И ВозвратныеОтходы.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И ВозвратныеОтходы.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		И &ТекстЗапросаТипИзмеряемойВеличины В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
    	|       		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
    	|               ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
    	|               ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)) КАК Округлить,
		|
		|	ВозвратныеОтходы.ОписаниеИзделия                   КАК ОписаниеИзделия,
		|	ВозвратныеОтходы.Этап                              КАК Этап,
		|	ВозвратныеОтходы.Этап.Подразделение                КАК ПодразделениеЭтапа,
		|	&ТекстПолеСклад                                    КАК Склад,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)          КАК ЭтоЦеховаяКладовая,
		|	ВозвратныеОтходы.Номенклатура.ТипНоменклатуры      КАК ТипНоменклатуры,
		|	ВозвратныеОтходы.ОбработатьПоСпецификации          КАК ОбработатьПоСпецификации,
		|	ВозвратныеОтходы.Спецификация                      КАК Спецификация,
		|
		|	ВЫБОР ВозвратныеОтходы.Ссылка.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
		|	КОНЕЦ                                              КАК ДнейОтПотребности,
		|
		|	ВозвратныеОтходы.КлючСвязи                         КАК КлючСвязи
		|
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ВозвратныеОтходы
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
		|		ПО ВозвратныеОтходы.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО ВтДанныеПоНоменклатуре.Идентификатор = ОсновноеВыходноеИзделие.Идентификатор
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = ВозвратныеОтходы.Этап
		|
		|		%ТекстСоединенияНастройкиПередачиМатериалов%
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
		|
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор, НомерСтроки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"&ТекстЗапросаТипИзмеряемойВеличины",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"ТипИзмеряемойВеличины",
				"ВозвратныеОтходы.Упаковка",
				"ВозвратныеОтходы.Номенклатура"));
		
		// Для совместимости с 2.1, получение склада по основному выходному изделию
		ИмяТаблицыТовары =
			?(ПараметрыВыборки.ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения,
			"ВозвратныеОтходы",
			"ОсновноеВыходноеИзделие");
		
		ТекстЗапросаДляПолученияСклада = ОбеспечениеПроизводства.ТекстЗапросаНастройкиПередачиМатериалов(
			ИмяТаблицыТовары,
			"Этап.Подразделение",
			ПараметрыВыборки.ВариантЗаполненияОбеспечения);
			
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"%ТекстСоединенияНастройкиПередачиМатериалов%",
							ТекстЗапросаДляПолученияСклада.ТекстСоединения);
							
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПолеСклад",
							ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
			
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВозвратныеОтходы");
		
	КонецЕсли;
	
	#КонецОбласти
	

	#Область МатериалыИУслуги
	
	Если ПереченьДанных.Найти("МатериалыИУслуги") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|
		|	МатериалыИУслуги.Ссылка      КАК Ссылка,
		|	МатериалыИУслуги.НомерСтроки КАК НомерСтроки,
		|
		|	МатериалыИУслуги.Номенклатура КАК Номенклатура,
		|
		|	МатериалыИУслуги.Этап.Подразделение         КАК Подразделение,
		|	МатериалыИУслуги.Этап.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|
		|	МатериалыИУслуги.Упаковка                   КАК Упаковка,
		|	
		|	МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК ЕдиницаИзмеренияШтучная,
		|	ЕСТЬNULL(&ТекстЗапросаТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ)                   КАК УпаковкаШтучная,
		|	ЕСТЬNULL(&ТекстЗапросаТипИзмеряемойВеличины В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
		|		, ЛОЖЬ)                                                                                                                        КАК УпаковкаМерная,
		|	
		|	&ТекстПолеЗаказатьНаСклад                     КАК ЗаказатьНаСклад,
		|
		|	&ТекстПолеСклад                               КАК Склад,
		|	&ТекстПолеВариантОбеспечения                  КАК ВариантОбеспечения,
		|
		|	ВтДанныеПоНоменклатуре.Идентификатор
		|	
		|ПОМЕСТИТЬ ВтОбеспечениеУпаковкиНоменклатуры
		|
		|ИЗ 
		|	ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыИУслуги
		|		ПО ВтДанныеПоНоменклатуре.Спецификация = МатериалыИУслуги.Ссылка
		|
		|		%ТекстСоединенияЗаказатьНаСклад%
		|
		|		// Сюда подставляется запрос для получения склада, варианта обеспечения
		|		%ТекстСоединенияПараметрыОбеспечения%
		|
		|ИНДЕКСИРОВАТЬ ПО 
		|	МатериалыИУслуги.Ссылка,
		|	МатериалыИУслуги.НомерСтроки,
		|	ВтДанныеПоНоменклатуре.Идентификатор";
		
		ПолеЗаказатьНаСклад = ПараметрыПодстановкиПоляЗаказатьНаСклад("МатериалыИУслуги",, ПараметрыВыборки.ВариантЗаполненияОбеспечения);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолеЗаказатьНаСклад"       , ПолеЗаказатьНаСклад.ТекстПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстСоединенияЗаказатьНаСклад%", ПолеЗаказатьНаСклад.ТекстСоединения);
		
		ТекстПоляТипИзмеряемойВеличины = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"МатериалыИУслуги.Упаковка",
			"МатериалыИУслуги.Номенклатура");
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаТипИзмеряемойВеличины",
			ТекстПоляТипИзмеряемойВеличины);
		
		ОбеспечениеПроизводства.ВыполнитьПодстановкуПараметровОбеспеченияМатериалов(ТекстЗапроса,
			"МатериалыИУслуги",
			"СпособПолученияМатериала",
			"Этап.Подразделение",
			ПараметрыВыборки.ВариантЗаполненияОбеспечения);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Распоряжение", "ВтДанныеПоНоменклатуре.Распоряжение");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Назначение"  , "ВтДанныеПоНоменклатуре.Назначение");
			
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВтОбеспечениеУпаковкиНоменклатуры");
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	//МатериалыИУслуги_Представления
		|	ВтДанныеПоНоменклатуре.Идентификатор              КАК Идентификатор,
		|	МатериалыИУслуги.НомерСтроки                      КАК НомерСтроки,
		|	МатериалыИУслуги.Номенклатура                     КАК Номенклатура,
		|	МатериалыИУслуги.Характеристика                   КАК Характеристика,
		|	МатериалыИУслуги.Номенклатура.ТипНоменклатуры     КАК ТипНоменклатуры,
		|	ВЫБОР 
		|		КОГДА МатериалыИУслуги.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ЛюбаяХарактеристика,
		|
		|	0                                                         КАК Количество,
		|	МатериалыИУслуги.КоличествоУпаковок                       КАК КоличествоУпаковок,
		|	МатериалыИУслуги.КоличествоУпаковок                       КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
		|	МатериалыИУслуги.Упаковка                                 КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО                                              КАК ДанныеУпаковки,
		|	ВтОбеспечениеУпаковкиНоменклатуры.ЕдиницаИзмеренияШтучная КАК ЕдиницаИзмеренияШтучная,
		|	ВтОбеспечениеУпаковкиНоменклатуры.УпаковкаШтучная         КАК УпаковкаШтучная,
		|
		|
		|	ЕСТЬNULL(ОсновноеВыходноеИзделие.Количество, 0)   КАК КоличествоИзделие,
		|
		|	МатериалыИУслуги.Этап                                                 КАК Этап,
		|	ВтОбеспечениеУпаковкиНоменклатуры.Склад                               КАК Склад,
		|	ВтОбеспечениеУпаковкиНоменклатуры.ВариантОбеспечения                  КАК ВариантОбеспечения,
		|	ВтОбеспечениеУпаковкиНоменклатуры.Подразделение                       КАК ПодразделениеЭтапа,
		|	ВтОбеспечениеУпаковкиНоменклатуры.Подразделение                       КАК Подразделение,
		|	ВтОбеспечениеУпаковкиНоменклатуры.ПроизводствоНаСтороне               КАК ПроизводствоНаСтороне,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)                             КАК ЭтоЦеховаяКладовая,
		|
		|	ВтОбеспечениеУпаковкиНоменклатуры.ЗаказатьНаСклад  КАК ЗаказатьНаСклад,
		|
		|	&ТекстПолеЗапланировать                            КАК Запланировать,
		|
		|	МатериалыИУслуги.СтатьяКалькуляции                 КАК СтатьяКалькуляции,
		|
		|	ВЫБОР 
		|		КОГДА (МатериалыИУслуги.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|				ИЛИ МатериалыИУслуги.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|				И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ИспользуетсяАвтовыбор,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК СведенияАвтовыбора,
		|	МатериалыИУслуги.СпособАвтовыбораНоменклатуры      КАК СпособАвтовыбораНоменклатуры,
		|	МатериалыИУслуги.СпособАвтовыбораХарактеристики    КАК СпособАвтовыбораХарактеристики,
		|	МатериалыИУслуги.СвойствоСодержащееНоменклатуру    КАК СвойствоСодержащееНоменклатуру,
		|	МатериалыИУслуги.АлгоритмАвтовыбораХарактеристики  КАК АлгоритмАвтовыбораХарактеристики,
		|
		|	// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА МатериалыИУслуги.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                              КАК АлгоритмРасчетаКоличества,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК Формула,
		|
		|	// округление:
		|	&ОкруглятьКоличествоШтучныхТоваров
		|		И ВтОбеспечениеУпаковкиНоменклатуры.ЕдиницаИзмеренияШтучная
		|		И ВтОбеспечениеУпаковкиНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		И ВтОбеспечениеУпаковкиНоменклатуры.УпаковкаМерная КАК Округлить,
		|
		|	МатериалыИУслуги.ПроизводитсяВПроцессе КАК Производится,
		|
		|	МатериалыИУслуги.ПроизводитсяВПроцессе          КАК ПроизводитсяВПроцессе,
		|	МатериалыИУслуги.СпособПолученияМатериала       КАК СпособПолученияМатериала,
		|	МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
		//++ Устарело_Производство21
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
		|				И МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации)
		|		КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
		|				И МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПустаяСсылка)
		|	КОНЕЦ КАК СпособПолученияПолуфабриката,
		//-- Устарело_Производство21
		|
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.СпецификацияРемонта <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|			ТОГДА МатериалыИУслуги.СпецификацияРемонта
		|		ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.РесурсныеСпецификации), ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))
		|	КОНЕЦ КАК Спецификация,
		|
		|	МатериалыИУслуги.ПланироватьНеРанее  КАК ПланироватьНеРанее,
		|	МатериалыИУслуги.СпецификацияРемонта КАК СпецификацияРемонта,
		|
		|	ВЫБОР МатериалыИУслуги.Ссылка.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
		|	КОНЕЦ КАК ДнейОтПотребности,
		|
		|	МатериалыИУслуги.ПрименениеМатериала КАК ПрименениеМатериала,
		|	МатериалыИУслуги.Альтернативный      КАК Альтернативный,
		|
		|	МатериалыИУслуги.Вероятность         КАК Вероятность,
		|	ВЫБОР
		|		КОГДА (МатериалыИУслуги.Альтернативный ИЛИ &СпособРасчетаМатериалов = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаМатериалов.ВероятноеПотребление))
		|				И МатериалыИУслуги.Вероятность > 0
		|			ТОГДА МатериалыИУслуги.Вероятность / 100
		|		ИНАЧЕ 1
		|	КОНЕЦ                                КАК КоэффициентВероятности,
		|
		|	ЛОЖЬ                                 КАК ВходящееИзделие,
		|
		|	ВтДанныеПоНоменклатуре.НачалоПроизводства      КАК НачалоПроизводства,
		|	ВтДанныеПоНоменклатуре.ПодразделениеДиспетчер  КАК ПодразделениеДиспетчер,
		|
		|	МатериалыИУслуги.КлючСвязи           КАК КлючСвязи
		|ИЗ
		|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыИУслуги
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
		|		ПО МатериалыИУслуги.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОбеспечениеУпаковкиНоменклатуры
		|		ПО МатериалыИУслуги.Ссылка = ВтОбеспечениеУпаковкиНоменклатуры.Ссылка
		|			И МатериалыИУслуги.НомерСтроки = ВтОбеспечениеУпаковкиНоменклатуры.НомерСтроки
		|			И ВтДанныеПоНоменклатуре.Идентификатор = ВтОбеспечениеУпаковкиНоменклатуры.Идентификатор
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО ВтДанныеПоНоменклатуре.Идентификатор = ОсновноеВыходноеИзделие.Идентификатор
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = МатериалыИУслуги.Этап
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО ВтОбеспечениеУпаковкиНоменклатуры.Склад = СпрСклады.Ссылка
		|
		|		%ТекстСоединенияСпособыОбеспечения%
		|
		|ГДЕ
		|	(НЕ МатериалыИУслуги.Альтернативный ИЛИ &СпособРасчетаМатериалов В (
		|													ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаМатериалов.ВероятноеПотребление),
		|													ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаМатериалов.МаксимальноеПотребление)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор, НомерСтроки";
		
		ПоляСоединения    = "МатериалыИУслуги.Номенклатура, МатериалыИУслуги.Характеристика, СпрСклады.Ссылка";
		ПолеЗапланировать = ПараметрыПодстановкиПоляЗапланировать(ПараметрыВыборки, ПоляСоединения);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолеЗапланировать"            , ПолеЗапланировать.ТекстПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстСоединенияСпособыОбеспечения%", ПолеЗапланировать.ТекстСоединения);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПодразделениеДиспетчер", "ВтДанныеПоНоменклатуре.ПодразделениеДиспетчер");
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "МатериалыИУслуги");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Трудозатраты
	
	Если ПереченьДанных.Найти("Трудозатраты") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВтДанныеПоНоменклатуре.Идентификатор            КАК Идентификатор,
		|	Трудозатраты.НомерСтроки                        КАК НомерСтроки,
		|	Трудозатраты.ВидРабот                           КАК ВидРабот,
		|	Трудозатраты.ВидРабот.ЕдиницаИзмерения          КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ОсновноеВыходноеИзделие.Количество, 0) КАК КоличествоИзделие,
		|	Трудозатраты.СтатьяКалькуляции                  КАК СтатьяКалькуляции,
		|	Трудозатраты.НазначениеРабот                    КАК НазначениеРабот,
		|	Трудозатраты.Этап                               КАК Этап,
		|
		|	Трудозатраты.Количество КАК Количество,
		|	Трудозатраты.Количество КАК КоличествоНаЕдиницуПартииВыпуска,
		|
		|	ВЫБОР Трудозатраты.Ссылка.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
		|	КОНЕЦ КАК ДнейОтПотребности,
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0) КАК ДлительностьЭтапаВДнях,
		|
		|	Трудозатраты.Этап.ДлительностьЭтапа                          КАК ДлительностьЭтапа,
		|	Трудозатраты.Этап.Подразделение                              КАК ПодразделениеЭтапа,
		|	Трудозатраты.Этап.Подразделение                              КАК Подразделение,
		|
		|	// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА Трудозатраты.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                                        КАК АлгоритмРасчетаКоличества,
		|	ПРЕДСТАВЛЕНИЕ("""")                                          КАК Формула
		|
		|ИЗ
		|	Справочник.РесурсныеСпецификации.Трудозатраты КАК Трудозатраты
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
		|		ПО Трудозатраты.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО ВтДанныеПоНоменклатуре.Идентификатор = ОсновноеВыходноеИзделие.Идентификатор
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = Трудозатраты.Этап
		|
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор, НомерСтроки";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "Трудозатраты");
		
	КонецЕсли;
	
	#КонецОбласти
	

	#Область ДанныеУпаковок
	
	ОписаниеТаблиц = Новый Массив;
	ОписаниеТаблиц.Добавить("ВтИзделия");
	Если ПереченьДанных.Найти("МатериалыИУслуги") <> Неопределено Тогда
		ОписаниеТаблиц.Добавить("ВтОбеспечениеУпаковкиНоменклатуры");
	КонецЕсли;
	Если ПереченьДанных.Найти("ВозвратныеОтходы") <> Неопределено Тогда
		ОписаниеВозвратныеОтходы = УправлениеДаннымиОбИзделиях.ОписаниеТаблицыТекстаЗапросаДанныеУпаковок();
		ОписаниеВозвратныеОтходы.ИмяТаблицы = "Справочник.РесурсныеСпецификации.ВозвратныеОтходы";
		ОписаниеВозвратныеОтходы.ТекстСоединения = "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
			|		ПО Т.Ссылка = ВтДанныеПоНоменклатуре.Спецификация";
		ОписаниеТаблиц.Добавить(ОписаниеВозвратныеОтходы);
	КонецЕсли;
		
	ТекстЗапроса = УправлениеДаннымиОбИзделиях.ТекстЗапросаДанныеУпаковок(ОписаниеТаблиц);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ДанныеУпаковок");
	
	#КонецОбласти

	Для каждого Элемент Из ТекстыЗапроса Цикл
		Если ПараметрыВыборки.ПолучитьПредставления Тогда
			ДобавитьПредставленияВЗапрос(Элемент.Значение);
		КонецЕсли;
		Если ПараметрыВыборки.СпособРасчетаМатериалов <> Перечисления.СпособыРасчетаМатериалов.МинимальноеПотребление Тогда
			Элемент.Значение = СтрЗаменить(Элемент.Значение,
				"НормативнаяДлительностьЭтапов.ДнейОтНачала",
				"НормативнаяДлительностьЭтапов.ДнейОтНачалаМакс");
			Элемент.Значение = СтрЗаменить(Элемент.Значение,
				"НормативнаяДлительностьЭтапов.ДнейДоОкончания",
				"НормативнаяДлительностьЭтапов.ДнейДоОкончанияМакс");
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("УчитыватьВероятностьБрака",  ПараметрыВыборки.УчитыватьВероятностьБрака);
	Запрос.УстановитьПараметр("СпособРасчетаМатериалов", ПараметрыВыборки.СпособРасчетаМатериалов);
	Запрос.УстановитьПараметр("ОкруглятьКоличествоШтучныхТоваров", ПараметрыВыборки.ОкруглятьКоличествоШтучныхТоваров);	
	
	Запрос.УстановитьПараметр("СкладПоУмолчанию", Справочники.Склады.СкладПоУмолчанию());
	Запрос.УстановитьПараметр("ИспользоватьПараметризацию", ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций"));
	
	Если ПараметрыВыборки.Свойство("ПереопределениеНастройкиПартииВыпуска")
		И ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.Использовать Тогда
		Запрос.УстановитьПараметр("ПереопределятьНастройкуПартииВыпуска", Истина);
		Запрос.УстановитьПараметр("ВыпускПроизвольнымиПорциями", ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.ВыпускПроизвольнымиПорциями);
	Иначе
		Запрос.УстановитьПараметр("ПереопределятьНастройкуПартииВыпуска", Ложь);
		Запрос.УстановитьПараметр("ВыпускПроизвольнымиПорциями", Ложь);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДоступноОписаниеПартииВыпуска", УправлениеДаннымиОбИзделиях.ДоступноОписаниеПартииВыпуска());
	Запрос.УстановитьПараметр("ВидЦены", ПроизводствоСерверПовтИсп.ВидЦеныПлановойСтоимости());
	Запрос.УстановитьПараметр("ПустойКлючСвязи",  Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	УстановитьПривилегированныйРежим(Истина);
	Таблицы = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса, , Ложь, Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Соответствие;
	
	Для каждого ИмяНабораДанных Из СтрРазделить("ОсновноеИзделие,РеквизитыСпецификации", ",") Цикл
		Таблица = Таблицы[ИмяНабораДанных]; // ТаблицаЗначений
		Таблица.Индексы.Добавить("Идентификатор");
	КонецЦикла;
	Для каждого ИмяНабораДанных Из ПереченьДанных Цикл
		Таблица = Таблицы[ИмяНабораДанных]; // ТаблицаЗначений
		Таблица.Индексы.Добавить("Идентификатор");
	КонецЦикла;
	
	
	ЗаполнитьПараметрыОбеспеченияМатериалов(Запрос, Таблицы, ПараметрыВыборки);
	
	ЗаполнитьПараметрыОбеспеченияВыходныхИзделий(Запрос, Таблицы, ПараметрыВыборки);
	
	
	ТаблицаДанныеПоНоменклатуре = Таблицы.ДанныеПоНоменклатуре; // см. СписокНоменклатуры
	Для каждого Строка Из ТаблицаДанныеПоНоменклатуре Цикл
		
		Идентификатор = Строка.Идентификатор;
		
		СтруктураОтбора = Новый Структура("Идентификатор", Идентификатор);
		
		СтруктураДанных = ДанныеСпецификацииКонструктор();
		
		ДанныеШапки = Таблицы.РеквизитыСпецификации.Найти(Идентификатор, "Идентификатор");
		Если ДанныеШапки <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеШапки);
		КонецЕсли;
		
		СтрокаНабораДанных = Таблицы.ОсновноеИзделие.Найти(Идентификатор, "Идентификатор");
		Если СтрокаНабораДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных.ОсновноеИзделие, СтрокаНабораДанных);
			УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВСтрокеНабораДанных(СтруктураДанных.ОсновноеИзделие, Таблицы.ДанныеУпаковок);
			Если НЕ СтруктураДанных.ОсновноеИзделие.ЭтоОсновноеИзделие Тогда
				ОсновноеИзделиеСпецификации = Новый Структура("Номенклатура,Упаковка,КоличествоУпаковокНаЕдиницуПартииВыпуска,ДанныеУпаковки",
					СтрокаНабораДанных.ОсновноеИзделиеНоменклатура,
					СтрокаНабораДанных.ОсновноеИзделиеУпаковка,
					СтрокаНабораДанных.ОсновноеИзделиеКоличествоУпаковокНаЕдиницуПартииВыпуска);
				УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВСтрокеНабораДанных(ОсновноеИзделиеСпецификации, Таблицы.ДанныеУпаковок);
				УправлениеДаннымиОбИзделиях.ЗаполнитьКоэффициентПересчетаВОсновноеИзделие(СтруктураДанных.ОсновноеИзделие, ОсновноеИзделиеСпецификации);
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ИмяНабораДанных Из ПереченьДанных Цикл
			
			НаборДанных = Таблицы[ИмяНабораДанных].Скопировать(СтруктураОтбора);
			
			Если ИмяНабораДанных = "МатериалыИУслуги" Тогда
				УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(
					НаборДанных,
					Таблицы.ДанныеУпаковок);
				ПрименитьОтборПоПараметрамВыбораДанных(
					НаборДанных,
					ПараметрыВыборки);
				ЗаполнитьИнформациюПоПрименениюМатериала(
					НаборДанных,
					ПараметрыВыборки);
				ВключитьДанныеНаборовВСтруктуруДанныхСпецификации(
					СтруктураДанных,
					Таблицы,
					СтруктураОтбора);
			ИначеЕсли ИмяНабораДанных = "ВходящиеИзделия" Тогда
				УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(
					НаборДанных,
					Таблицы.ДанныеУпаковок);
			ИначеЕсли ИмяНабораДанных = "ВыходныеИзделия" Тогда
				УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(
					НаборДанных,
					Таблицы.ДанныеУпаковок);
			ИначеЕсли ИмяНабораДанных = "ВозвратныеОтходы" Тогда
				УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(
					НаборДанных,
					Таблицы.ДанныеУпаковок);
			КонецЕсли;
			
			СтруктураДанных.Вставить(ИмяНабораДанных, НаборДанных);
			
		КонецЦикла;
		
		
		Результат.Вставить(Идентификатор, СтруктураДанных);
		
	КонецЦикла;
	
	
	Если СписокТаблицДляУдаления.Количество() > 0 Тогда
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, СтрСоединить(СписокТаблицДляУдаления,","));
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПереченьДанных

Функция ПереченьДанныхСпецификации() Экспорт
	
	ПереченьДанных = Новый Массив;
	ПереченьДанных.Добавить("Этапы");
	ПереченьДанных.Добавить("ВыходныеИзделия");
	ПереченьДанных.Добавить("ВозвратныеОтходы");
	ПереченьДанных.Добавить("МатериалыИУслуги");
	ПереченьДанных.Добавить("Трудозатраты");
	
	Возврат ПереченьДанных;
	
КонецФункции

#КонецОбласти

#Область РасчетКоличества

Функция РассчитатьПартиюВыпускаПоНоменклатуре(ДанныеПоНоменклатуре, ДанныеСпецификации) Экспорт
	
	МассивПартий = РазбитьНаОптимальныеПартииВыпуска(
		ДанныеПоНоменклатуре.Количество,
		ДанныеСпецификации);
		
	// Суммирование дробей
	Числитель = 0;
	Знаменатель = ПроизводствоСервер.НаименьшееОбщееКратноеВКоллекции(МассивПартий, "Знаменатель");
	Брак = Неопределено;
	Для каждого Партия Из МассивПартий Цикл
		
		Числитель = Числитель + Партия.Числитель * Знаменатель / Партия.Знаменатель;
		
		Если Партия.Брак <> Неопределено Тогда
			Если Брак = Неопределено Тогда
				Брак = Новый Соответствие;
			КонецЕсли;
			Для каждого КлючИЗначение Из Партия.Брак Цикл
				Если Брак[КлючИЗначение.Ключ] = Неопределено Тогда
					Брак.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				Иначе
					Брак[КлючИЗначение.Ключ] = Брак[КлючИЗначение.Ключ] + КлючИЗначение.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Сокращение дроби
	НаибольшийОбщийДелитель = ПроизводствоСервер.НаибольшийОбщийДелитель(Числитель, Знаменатель);
	Числитель   = Числитель / НаибольшийОбщийДелитель;
	Знаменатель = Знаменатель / НаибольшийОбщийДелитель;
		
	Результат = ПартияВыпуска(Числитель, Знаменатель, Брак, МассивПартий);
	
	Возврат Результат;
	
КонецФункции

Функция РазбитьНаОптимальныеПартииВыпуска(Знач Количество, ДанныеСпецификации)
	
	Результат  = Новый Массив;
	
	ЕстьВыпускПроизвольнымиПорциями = ДанныеСпецификации.ВыпускПроизвольнымиПорциями;
	ЕстьНастройкиРазбивкиНаПартии   = ДанныеСпецификации.ОптимальнаяПартияВыпуска <> 0
										ИЛИ ДанныеСпецификации.МинимальнаяПартияВыпуска <> 0
										ИЛИ ДанныеСпецификации.ДопустимоеПревышениеОптимальнойПартииВыпуска <> 0;
	ЕстьБрак = ДанныеСпецификации.ОсновноеИзделие.КоэффициентБрака <> 0;
	
	ДанныеУпаковки = ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки;
	
	Если (ЕстьВыпускПроизвольнымиПорциями И ЕстьНастройкиРазбивкиНаПартии)
			ИЛИ ЕстьБрак Тогда
		КоличествоПартия = ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
			* ДанныеУпаковки.Числитель / ДанныеУпаковки.Знаменатель;
		ДанныеУпаковки   = УправлениеДаннымиОбИзделиях.СтруктураДанныхУпаковки();
	Иначе
		КоличествоПартия = ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска;
	КонецЕсли;
	
	Если КоличествоПартия = 0 Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПартияВыпуска(0, 1));
	КонецЕсли;
	
	Остаток = ПроверитьОкруглитьДоЦелыхПартий(
					Количество * ДанныеУпаковки.Знаменатель / ДанныеУпаковки.Числитель,
					КоличествоПартия,
					ДанныеСпецификации);
	
	Если НЕ ЕстьБрак 
		И НЕ ЕстьНастройкиРазбивкиНаПартии Тогда
			
		Результат.Добавить(ПартияВыпуска(
					Остаток,
					КоличествоПартия));
	Иначе
		
		Если ЕстьВыпускПроизвольнымиПорциями Тогда
			КоэффициентПересчетаПартииЗапуска = ДанныеСпецификации.ОсновноеИзделие.КоэффициентПересчетаВОсновноеИзделие;
		Иначе
			КоэффициентПересчетаПартииЗапуска = КоличествоПартия;
		КонецЕсли;
		
		ОптимальныйВыпуск    = Окр(ДанныеСпецификации.ОптимальнаяПартияВыпуска * КоэффициентПересчетаПартииЗапуска, 3);
		МинимальныйВыпуск    = Окр(ДанныеСпецификации.МинимальнаяПартияВыпуска * КоэффициентПересчетаПартииЗапуска, 3);
		ДопустимоеПревышение = Окр(ДанныеСпецификации.ДопустимоеПревышениеОптимальнойПартииВыпуска * КоэффициентПересчетаПартииЗапуска, 3);
		
		Если ОптимальныйВыпуск <> 0 И МинимальныйВыпуск > ОптимальныйВыпуск Тогда
			МинимальныйВыпуск = ОптимальныйВыпуск;
		КонецЕсли;
		ДельтаМинимумОптимум = ОптимальныйВыпуск - МинимальныйВыпуск;
		Изделие              = ДанныеСпецификации.ОсновноеИзделие;
		
		Если ОптимальныйВыпуск > 0 Тогда
			
			БракСумма = 0;
			Если Изделие.КоэффициентБрака = 0 Тогда
				ОстатокБрак = 0;
			Иначе
				ОстатокБрак = ПроверитьОкруглитьДоЦелыхПартий(
					Окр(Остаток / (1-Изделие.КоэффициентБрака), ?(Изделие.ЕдиницаИзмеренияШтучная, 0, 3)),
					КоличествоПартия,
					ДанныеСпецификации);
			КонецЕсли;
			
			Пока Остаток >= ОптимальныйВыпуск ИЛИ ОстатокБрак >= ОптимальныйВыпуск Цикл
				
				Результат.Добавить(ОптимальныйВыпуск);
				
				Если Изделие.КоэффициентБрака = 0 Тогда
					Остаток = Остаток - ОптимальныйВыпуск;
				Иначе
					БракСумма = БракСумма + (ОптимальныйВыпуск * Изделие.КоэффициентБрака);
					БракЗачет = Окр(БракСумма, ?(Изделие.ЕдиницаИзмеренияШтучная, 0, 3));
					Если БракЗачет > 0 Тогда
						Остаток   = Остаток - (ОптимальныйВыпуск - БракЗачет);
						БракСумма = БракСумма - БракЗачет;
					Иначе
						Остаток = Остаток - ОптимальныйВыпуск;
					КонецЕсли;
					ОстатокБрак = ПроверитьОкруглитьДоЦелыхПартий(
						Окр((Остаток / (1-Изделие.КоэффициентБрака)) + БракСумма, ?(Изделие.ЕдиницаИзмеренияШтучная, 0, 3)),
						КоличествоПартия,
						ДанныеСпецификации);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОстатокБрак > 0 И ОстатокБрак > Остаток Тогда
				Остаток = ОстатокБрак; // остаток с поправкой на брак
			КонецЕсли;
			
			Если Остаток > 0 Тогда
				
				Если Остаток < МинимальныйВыпуск Тогда
					
					// если можем покрыть остаток за счет допустимого превышения
					Если Остаток <= Результат.Количество() * ДопустимоеПревышение Тогда
						
						Если ДанныеСпецификации.ВыпускПроизвольнымиПорциями Тогда
							
							Для Х = -Результат.ВГраница() По 0 Цикл
								Если Остаток <= 0 Тогда
									Прервать;
								КонецЕсли;
								Результат[-Х] = Результат[-Х] + Мин(ДопустимоеПревышение, Остаток);
								Остаток = Остаток - Мин(ДопустимоеПревышение, Остаток);
							КонецЦикла;
							
						Иначе
							
							ОстатокНаПартию = Цел(Остаток / Результат.Количество());
							Если ОстатокНаПартию > 0 Тогда
								Для Х = 0 По Результат.ВГраница() Цикл
									Результат[Х] = Результат[Х] + ОстатокНаПартию;
								КонецЦикла;
							КонецЕсли;
							
							Остаток = Остаток % Результат.Количество();
							
							Для Х = -Результат.ВГраница() По 0 Цикл
								Если Остаток <= 0 Тогда
									Прервать;
								КонецЕсли;
								Результат[-Х] = Результат[-Х] + Мин(1, Остаток);
								Остаток = Остаток - 1;
							КонецЦикла;
							
						КонецЕсли;
						
					// если можем покрыть остаток за счет сокращения оптимальных партий до минимальных
					Иначе
						
						Для Х = -Результат.ВГраница() По 0 Цикл
							Если Остаток >= МинимальныйВыпуск Тогда
								Прервать;
							КонецЕсли;
							Результат[-Х] = Результат[-Х] - Мин(ДельтаМинимумОптимум, МинимальныйВыпуск - Остаток);
							Остаток = Остаток + Мин(ДельтаМинимумОптимум, МинимальныйВыпуск - Остаток);
						КонецЦикла;
						Результат.Добавить(Макс(Остаток, МинимальныйВыпуск));
						
					КонецЕсли;
					
				Иначе
					Результат.Добавить(Остаток);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Если Изделие.КоэффициентБрака <> 0 Тогда
				Остаток = ПроверитьОкруглитьДоЦелыхПартий(
							Окр(Количество / (1-Изделие.КоэффициентБрака), ?(Изделие.ЕдиницаИзмеренияШтучная, 0, 3)),
							КоличествоПартия,
							ДанныеСпецификации);
			КонецЕсли;
			Результат.Добавить(Макс(Остаток, МинимальныйВыпуск));
		КонецЕсли;
		
		СтрокиБрак = Неопределено;
		Если ДанныеСпецификации.Свойство("ВыходныеИзделия") Тогда
			Для Индекс = 0 По ДанныеСпецификации.ВыходныеИзделия.Количество()-1 Цикл
				Если ДанныеСпецификации.ВыходныеИзделия[Индекс].КоэффициентБрака <> 0 Тогда
					Если СтрокиБрак = Неопределено Тогда
						СтрокиБрак = Новый Соответствие;
					КонецЕсли;
					СтрокиБрак.Вставить(Индекс, 0);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Х = 0 По Результат.ВГраница() Цикл
			
			Если СтрокиБрак = Неопределено Тогда
				Брак = Неопределено;
			Иначе
				
				Брак = Новый Соответствие;
				Для каждого КлючИЗначение Из СтрокиБрак Цикл
					
					Изделие = ДанныеСпецификации.ВыходныеИзделия[КлючИЗначение.Ключ];
					
					СтрокиБрак[КлючИЗначение.Ключ] = СтрокиБрак[КлючИЗначение.Ключ]
						+ (Изделие.КоличествоУпаковокНаЕдиницуПартииВыпуска * Изделие.ДанныеУпаковки.Числитель
							* Результат[Х] / (КоличествоПартия * Изделие.ДанныеУпаковки.Знаменатель) // партия
							* Изделие.КоэффициентБрака);
					
					КоличествоБрак = Окр(СтрокиБрак[КлючИЗначение.Ключ], ?(Изделие.ЕдиницаИзмеренияШтучная, 0, 3));
					
					Если КоличествоБрак > 0 Тогда
						Брак.Вставить(КлючИЗначение.Ключ, КоличествоБрак);
						СтрокиБрак[КлючИЗначение.Ключ] = СтрокиБрак[КлючИЗначение.Ключ] - КоличествоБрак;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Результат[Х] = ПартияВыпуска(Результат[Х], КоличествоПартия, Брак);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьКоличествоНаПартиюВыпуска(ПартияВыпуска, ДанныеСпецификации, ДанныеПоНоменклатуре) Экспорт
	
	ПереченьДанных = ПереченьДанныхСпецификации();
	
	ОбработатьДанныеНаборов(ДанныеСпецификации, "Свернуть");
	
	ДанныеДляРасчета = Неопределено;

	Если ДанныеСпецификации.Свойство("ОсновноеИзделие") Тогда
		РассчитатьКоличествоВСтроке(ПартияВыпуска, ДанныеСпецификации.ОсновноеИзделие, Истина, Ложь, Ложь);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("ВыходныеИзделия")
		И ПереченьДанных.Найти("ВыходныеИзделия") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.ВыходныеИзделия,
			Истина, Ложь, Истина, Истина, Истина, ДанныеДляРасчета);
		Если ПартияВыпуска.Брак <> Неопределено Тогда
			Для каждого КлючИЗначение Из ПартияВыпуска.Брак Цикл
				Строка = ДанныеСпецификации.ВыходныеИзделия[КлючИЗначение.Ключ];
				Строка.Количество = Строка.Количество - КлючИЗначение.Значение;
				Если Строка.ДанныеУпаковки.Числитель <> 0 Тогда
					Строка.КоличествоУпаковок = Строка.Количество * Строка.ДанныеУпаковки.Знаменатель / Строка.ДанныеУпаковки.Числитель;
				Иначе
					Строка.Количество = 0;
					Строка.КоличествоУпаковок = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ДанныеСпецификации.ВыходныеИзделия);
		ПроизводствоКлиентСервер.РассчитатьДолюСтоимостиВКоллекции(ДанныеСпецификации.ВыходныеИзделия, ДанныеСпецификации.СпособРаспределенияЗатратНаВыходныеИзделия);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("МатериалыИУслуги")
		И ПереченьДанных.Найти("МатериалыИУслуги") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.МатериалыИУслуги,
			Истина, Истина, Истина, Ложь, Истина, ДанныеДляРасчета);
		РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ДанныеСпецификации.МатериалыИУслуги);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("ВозвратныеОтходы")
		И ПереченьДанных.Найти("ВозвратныеОтходы") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.ВозвратныеОтходы,
			Истина, Ложь, Истина, Истина, Истина, ДанныеДляРасчета);
		РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ДанныеСпецификации.ВозвратныеОтходы);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("Трудозатраты")
		И ПереченьДанных.Найти("Трудозатраты") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.Трудозатраты,
			Ложь, Ложь, Ложь, Ложь, Истина, ДанныеДляРасчета);
		РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ДанныеСпецификации.Трудозатраты);
	КонецЕсли;
	
	Если ДанныеСпецификации.Свойство("Этапы")
		И ПереченьДанных.Найти("Этапы") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.Этапы,
			Ложь, Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	
	ОбработатьДанныеНаборов(ДанныеСпецификации, "Распаковать");
	
КонецПроцедуры

Процедура РассчитатьКоличество(ПартияВыпуска, Коллекция, ЕстьУпаковки, ЕстьВероятность, Округлить, КонтрольОкругленияВверх, РассчитатьФормулы, ДанныеДляРасчета = Неопределено)
	
	Для каждого Строка Из Коллекция Цикл
		
		РассчитатьКоличествоВСтроке(ПартияВыпуска, Строка, ЕстьУпаковки, ЕстьВероятность, РассчитатьФормулы, ДанныеДляРасчета);
		
		Если Округлить Тогда
			ОкруглитьКоличествоВСтроке(ПартияВыпуска, Строка, ЕстьУпаковки, КонтрольОкругленияВверх);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьКоличествоВСтроке(ПартияВыпуска, Строка, ЕстьУпаковки, ЕстьВероятность, РассчитатьФормулы, ДанныеДляРасчета = Неопределено)
	
	// Расчет количества на партию
		Если ЕстьУпаковки Тогда
			Если Строка.ДанныеУпаковки.Знаменатель <> 0 Тогда
				Строка.Количество = Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска 
					* Строка.ДанныеУпаковки.Числитель * ПартияВыпуска.Числитель 
					/ (Строка.ДанныеУпаковки.Знаменатель * ПартияВыпуска.Знаменатель);
			Иначе
				Строка.Количество = 0;
			КонецЕсли;
		Иначе
			Строка.Количество = Строка.КоличествоНаЕдиницуПартииВыпуска * ПартияВыпуска.Числитель / ПартияВыпуска.Знаменатель;
		КонецЕсли;
	
	// Поправка на вероятность
	Если ЕстьВероятность И Строка.КоэффициентВероятности <> 1 Тогда
		Строка.Количество = Строка.Количество * Строка.КоэффициентВероятности;
	КонецЕсли;
	
	// Пересчет количества упаковок
	Если ЕстьУпаковки Тогда
		Если Строка.ДанныеУпаковки.Числитель <> 0 Тогда
			Строка.КоличествоУпаковок = Строка.Количество * Строка.ДанныеУпаковки.Знаменатель / Строка.ДанныеУпаковки.Числитель;
			Строка.Количество         = ОписаниеТипаКоличественногоРеквизита().ПривестиЗначение(Строка.Количество);
		Иначе
			Строка.КоличествоУпаковок = 0;
			Строка.Количество         = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкруглитьКоличествоВСтроке(ПартияВыпуска, Строка, ЕстьУпаковки, КонтрольОкругленияВверх)
	
	Если НЕ Строка.Округлить 
		ИЛИ Строка.Количество = Цел(Строка.Количество) Тогда
		Возврат;
	КонецЕсли;
	
	Количество = Окр(Строка.Количество);
	
	ДопустимоеОтклонение = ОбщегоНазначенияУТПовтИсп.ДопустимоеОтклонениеПриОкругленииКоличества();
	
	Отклонение = ?(Количество > Строка.Количество,
		(Количество - Строка.Количество)/Строка.Количество * 100,
		(Строка.Количество - Количество)/Строка.Количество * 100);
			
	Если Строка.ЭтоЦеховаяКладовая Тогда
		
		Если Отклонение <= ДопустимоеОтклонение Тогда
			
			Строка.Количество = Количество;
			
			Если ЕстьУпаковки Тогда
				Если Строка.ДанныеУпаковки.Числитель <> 0 Тогда
					Строка.КоличествоУпаковок = Строка.Количество * Строка.ДанныеУпаковки.Знаменатель / Строка.ДанныеУпаковки.Числитель;
				Иначе
					Строка.Количество         = 0;
					Строка.КоличествоУпаковок = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Отклонение > ДопустимоеОтклонение Тогда
			
			Если КонтрольОкругленияВверх
				И Количество > Строка.Количество Тогда
				
				Количество = Количество - 1;
				
			ИначеЕсли НЕ КонтрольОкругленияВверх
				И Количество < Строка.Количество Тогда
				
				Количество = Количество + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Строка.Количество = Количество;
		
		Если ЕстьУпаковки Тогда
			Если Строка.ДанныеУпаковки.Числитель <> 0 Тогда
				Строка.КоличествоУпаковок = Строка.Количество * Строка.ДанныеУпаковки.Знаменатель / Строка.ДанныеУпаковки.Числитель;
			Иначе
				Строка.Количество         = 0;
				Строка.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьОкруглитьДоЦелыхПартий(Количество, КоличествоПартия, ДанныеСпецификации)
	
	Если ДанныеСпецификации.ВыпускПроизвольнымиПорциями Тогда
		
		Возврат Количество;
		
	Иначе
		
		Коэффициент = Количество / КоличествоПартия;
		
		Если Цел(Коэффициент) = Коэффициент Тогда
			Возврат Количество;
		Иначе
			Возврат КоличествоПартия * (Цел(Коэффициент) + 1);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ОписаниеТипаКоличественногоРеквизита()
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный));
	
КонецФункции


Процедура РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ИсходнаяТаблица)

	Если ДанныеПоНоменклатуре <> Неопределено 
		И ДанныеПоНоменклатуре.Свойство("ДнейОтПотребности") Тогда
		
		Если ДанныеПоНоменклатуре.ДнейОтПотребности <> Неопределено Тогда
			Для каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
				СтрокаТаблицы.ДнейОтПотребности = СтрокаТаблицы.ДнейОтПотребности + ДанныеПоНоменклатуре.ДнейОтПотребности;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПартияВыпуска(Числитель, Знаменатель, Брак = Неопределено, Расшифровка = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Числитель",      Числитель);
	Результат.Вставить("Знаменатель",    Знаменатель);
	
	Результат.Вставить("Значение",       Числитель / Знаменатель);
	
	// Неопределено либо Соответствие, где Ключ - индекс ТЧ ВыходныеИзделия, Значение - кол-во бракованных изделий
	Результат.Вставить("Брак",           Брак);
	
	// Неопределено либо Массив, детализирующий данную партию до оптимальных партий (элементы массива также партии выпуска)
	Результат.Вставить("Расшифровка",    Расшифровка);
	
	Возврат Результат;
	
КонецФункции

Функция СравнитьПартииВыпуска(Партия1, Партия2) Экспорт
	
	Если Партия1.Значение > Партия2.Значение Тогда
		Возврат 1;
	ИначеЕсли Партия1.Значение < Партия2.Значение Тогда
		Возврат -1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область Прочее

Процедура ДобавитьПредставленияВЗапрос(ТекстЗапроса)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЭтапыПроизводства_Представления", 	
									"ЕСТЬNULL(ЭтапыПроизводства.Подразделение.Представление, """") КАК ПодразделениеПредставление,
									|	ЕСТЬNULL(ЭтапыПроизводства.МаршрутнаяКарта.Представление, """") КАК МаршрутнаяКартаПредставление,");
									
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ВидыРабочихЦентров_Представления", 	
									"ЕСТЬNULL(ТабличнаяЧасть.ВидРабочегоЦентра.Представление, """") КАК ВидРабочегоЦентраПредставление,");
									
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ВыходныеИзделия_Представления",
									"ЕСТЬNULL(ВтИзделия.Этап.Представление, """") КАК ЭтапПредставление,
									|	ВЫБОР
									|		КОГДА ВтИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
									|			ТОГДА ЕСТЬNULL(ВтИзделия.Упаковка.Представление, """")
									|		ИНАЧЕ ЕСТЬNULL(ВтИзделия.Номенклатура.ЕдиницаИзмерения.Представление, """")
									|	КОНЕЦ КАК ЕдИзм,
									|	ЕСТЬNULL(ВтИзделия.Номенклатура.Представление, """") КАК НоменклатураПредставление,
									|	ЕСТЬNULL(ВтИзделия.Характеристика.Представление, """") КАК ХарактеристикаПредставление,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ВозвратныеОтходы_Представления",
									"ЕСТЬNULL(ВозвратныеОтходы.Этап.Представление, """") КАК ЭтапПредставление,
									|	ВЫБОР
									|		КОГДА ВозвратныеОтходы.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
									|			ТОГДА ЕСТЬNULL(ВозвратныеОтходы.Упаковка.Представление, """")
									|		ИНАЧЕ ЕСТЬNULL(ВозвратныеОтходы.Номенклатура.ЕдиницаИзмерения.Представление, """")
									|	КОНЕЦ КАК ЕдИзм,
									|	ЕСТЬNULL(ВозвратныеОтходы.Номенклатура.Представление, """") КАК НоменклатураПредставление,
									|	ЕСТЬNULL(ВозвратныеОтходы.Характеристика.Представление, """") КАК ХарактеристикаПредставление,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//МатериалыИУслуги_Представления",
									"ЕСТЬNULL(МатериалыИУслуги.Этап.Представление, """") КАК ЭтапПредставление,
									|	ВЫБОР
									|		КОГДА МатериалыИУслуги.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
									|			ТОГДА ЕСТЬNULL(МатериалыИУслуги.Упаковка.Представление, """")
									|		ИНАЧЕ ЕСТЬNULL(МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения.Представление, """")
									|	КОНЕЦ КАК ЕдИзм,
									|	ЕСТЬNULL(МатериалыИУслуги.Номенклатура.Представление, """") КАК НоменклатураПредставление,
									|	ЕСТЬNULL(МатериалыИУслуги.Характеристика.Представление, """") КАК ХарактеристикаПредставление,");

КонецПроцедуры

Процедура ПрименитьОтборПоПараметрамВыбораДанных(МатериалыИУслуги, ПараметрыВыборки)
	
	Если НЕ ПараметрыВыборки.ДоступныРаботы Тогда
		
		Для Х = -МатериалыИУслуги.Количество() + 1 По 0 Цикл
			
			Строка = МатериалыИУслуги[-Х];
			
			Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
				ИЛИ Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара
				ИЛИ Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
				ИЛИ Строка.Номенклатура.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			МатериалыИУслуги.Удалить(-Х);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьПараметрыОбеспеченияМатериалов(Запрос, Таблицы, ПараметрыВыборки)
	
	Таблица = Неопределено; // ТаблицаЗначений
	Если НЕ Таблицы.Свойство("МатериалыИУслуги", Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Таблица.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	
	Ит = 0;
	СтрокиДляОбработки = Новый Массив;
	Для каждого Строка Из Таблица Цикл
		Строка.ИндексСтроки = Ит;
		Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации
				И Строка.Спецификация.Пустая()
			ИЛИ Строка.ИспользуетсяАвтовыбор
			ИЛИ Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
			СтрокиДляОбработки.Добавить(Строка);
		КонецЕсли;
		Ит = Ит + 1;
	КонецЦикла;
	
	Если СтрокиДляОбработки.Количество() > 0 Тогда
		
		ТекстыЗапросов = Новый Массив;
		
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЛОЖЬ                КАК ДанныеНаборов,
		|
		|	Т.Идентификатор     КАК Идентификатор,
		|	Т.ИндексСтроки      КАК ИндексСтроки,
		|	0                   КАК НомерСтроки,
		|	Т.КлючСвязи         КАК КлючСвязи,
		|
		|	Т.Номенклатура               КАК Номенклатура,
		|	Т.Характеристика             КАК Характеристика,
		|	Т.ТипНоменклатуры            КАК ТипНоменклатуры,
		|	ЛОЖЬ                         КАК ХарактеристикиИспользуются,
		|
		|	0                                                          КАК Количество,
		|	0                                                          КАК КоличествоУпаковок,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	0                                                          КАК ДанныеУпаковки,
		|
		|	ЛОЖЬ                                                       КАК ЕдиницаИзмеренияШтучная,
		|	ЛОЖЬ                                                       КАК УпаковкаШтучная,
		|
		|	Т.Этап                       КАК Этап,
		|
		|	Т.СпособПолученияМатериала       КАК СпособПолученияМатериала,
		|	Т.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
		|	Т.ПроизводитсяВПроцессе          КАК ПроизводитсяВПроцессе,
		|
		|	Т.ИспользуетсяАвтовыбор
		|		И НЕ Т.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор) 
		|                                    КАК ПодбиратьОбеспечение,
		|	Т.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
		|			И Т.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|                                    КАК ПодбиратьСпецификацию
		|
		|ПОМЕСТИТЬ ВтМатериалыИУслуги
		|ИЗ
		|	&МатериалыИУслуги КАК Т
		|
		|ГДЕ
		|	%ОтборСтрок%
		|";
		
		Если СтрокиДляОбработки.Количество() / Таблица.Количество() >= 0.7 Тогда
			ОтборСтрок = "
			|	(Т.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
			|		И Т.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))
			|	ИЛИ Т.ИспользуетсяАвтовыбор 
			|	ИЛИ Т.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)";
		Иначе
			ОтборСтрок = "ИСТИНА";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборСтрок%", ОтборСтрок);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ИСТИНА                                          КАК ДанныеНаборов,
		|
		|	ВтМатериалыИУслуги.Идентификатор                КАК Идентификатор,
		|	ВтМатериалыИУслуги.ИндексСтроки                 КАК ИндексСтроки,
		|	Комплектующие.НомерСтроки                       КАК НомерСтроки,
		|	ВтМатериалыИУслуги.КлючСвязи                    КАК КлючСвязи,
		|
		|	Комплектующие.Номенклатура                      КАК Номенклатура,
		|	Комплектующие.Характеристика                    КАК Характеристика,
		|	Комплектующие.Номенклатура.ТипНоменклатуры      КАК ТипНоменклатуры,
	 	|	ВЫБОР 
		|		КОГДА Комплектующие.Номенклатура.ИспользованиеХарактеристик В (
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                           КАК ХарактеристикиИспользуются,
		|
		|	Комплектующие.Количество                        КАК Количество,
		|	Комплектующие.КоличествоУпаковок                КАК КоличествоУпаковок,
		|	Комплектующие.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	Комплектующие.Упаковка                          КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО                                    КАК ДанныеУпаковки,
		|
		|	Комплектующие.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК ЕдиницаИзмеренияШтучная,
		|	ЕСТЬNULL(&ТекстЗапросаТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ)                КАК УпаковкаШтучная,
		|
		|	ВтМатериалыИУслуги.Этап                         КАК Этап,
		|
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПустаяСсылка) КАК СпособПолученияМатериала,
		|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)                     КАК ИсточникПолученияПолуфабриката,
		|	ЛОЖЬ                                                                        КАК ПроизводитсяВПроцессе,
		|
		|	ИСТИНА КАК ПодбиратьОбеспечение,
		|	ЛОЖЬ   КАК ПодбиратьСпецификацию
		|
		|ПОМЕСТИТЬ ВтДанныеНаборов
		|ИЗ
		|	ВтМатериалыИУслуги КАК ВтМатериалыИУслуги
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Комплектующие
		|		ПО ВтМатериалыИУслуги.Номенклатура = Комплектующие.Ссылка.Владелец
		|			И ВтМатериалыИУслуги.Характеристика = Комплектующие.Ссылка.Характеристика
		|			И (Комплектующие.Ссылка.Основной)
		|
		|ГДЕ
		|	ВтМатериалыИУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)
		|	И Комплектующие.Номенклатура.ТипНоменклатуры В 
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|";
		
		ТекстПоляТипИзмеряемойВеличины = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"Комплектующие.Упаковка",
			"Комплектующие.Номенклатура");
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаТипИзмеряемойВеличины",
			ТекстПоляТипИзмеряемойВеличины);
			
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т.*,
		|	Т.ИндексСтроки КАК ИндексДанных
		|ИЗ
		|ВтМатериалыИУслуги КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.*,
		|	NULL
		|ИЗ
		|ВтДанныеНаборов КАК Т
		|
		|";
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т.*,
		|	ВтДанныеПоНоменклатуре.Распоряжение            КАК Распоряжение,
		|	ВтДанныеПоНоменклатуре.Назначение              КАК Назначение,
		|	ВтДанныеПоНоменклатуре.НачалоПроизводства      КАК НачалоПроизводства,
		|	ВтДанныеПоНоменклатуре.ПодразделениеДиспетчер  КАК ПодразделениеДиспетчер,
		|	ВтДанныеПоНоменклатуре.НаправлениеДеятельности КАК НаправлениеДеятельности
		|
		|ПОМЕСТИТЬ ВтСписокНоменклатуры
		|ИЗ ("+ТекстЗапроса+") КАК Т
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
		|	ПО Т.Идентификатор = ВтДанныеПоНоменклатуре.Идентификатор
		|";
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		//
		ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
		
		ПараметрыЗапросаСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыТекстаЗапросаСпецификацийНоменклатуры();
		ПараметрыЗапросаСпецификаций.ИмяВыходнойТаблицы         = "ВтСпецификации";
		ПараметрыЗапросаСпецификаций.ТолькоПриоритетные         = Истина;
		ПараметрыЗапросаСпецификаций.РазделительИтоговогоПакета = Ложь;
		ПараметрыЗапросаСпецификаций.УсловияОтбораВходящихДанных.Добавить("СписокНоменклатуры.ПодбиратьСпецификацию = ИСТИНА");
		
		ТекстыЗапросов.Добавить(УправлениеДаннымиОбИзделиях.ТекстЗапросаСпецификацийНоменклатуры(
																ПараметрыЗапросаСпецификаций,
																ПараметрыВыбораСпецификаций));
		
		// Данные упаковок
		ТекстыЗапросов.Добавить(УправлениеДаннымиОбИзделиях.ТекстЗапросаДанныеУпаковок(
																ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВтДанныеНаборов")));
		
		// Приоритетные спецификации
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.ДанныеНаборов             КАК ДанныеНаборов,
		|	Т.КлючСвязи                 КАК КлючСвязи,
		|	Т.ИндексСтроки              КАК ИндексСтроки,
		|	Т.НомерСтроки               КАК НомерСтроки,
		|
		|	ВТСпецификации.Спецификация КАК Спецификация
		|
		|ИЗ
		|	ВтСписокНоменклатуры КАК Т
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпецификации КАК ВТСпецификации
		|		ПО Т.ИндексДанных = ВТСпецификации.ИндексДанных
		|
		|ГДЕ
		|	Т.ПодбиратьСпецификацию
		|	И НЕ ВТСпецификации.Спецификация ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.ДанныеНаборов,
		|	Т.ИндексСтроки,
		|	Т.НомерСтроки
		|";
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		// Обеспечение
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т.*,
		|	&ТекстПолеЗаказатьНаСклад    КАК ЗаказатьНаСклад,
		|	&ТекстПолеСклад              КАК Склад,
		|	&ТекстПолеВариантОбеспечения КАК ВариантОбеспечения,
		|	&ТекстПолеЗапланировать      КАК Запланировать
		|ИЗ
		|	ВтСписокНоменклатуры КАК Т
		|
		|		%ТекстСоединенияПараметрыОбеспечения%
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
		|
		|		%ТекстСоединенияСпособыОбеспечения%
		|
		|		%ТекстСоединенияЗаказатьНаСклад%
		|
		|ГДЕ
		|	Т.ПодбиратьОбеспечение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.ДанныеНаборов,
		|	Т.ИндексСтроки,
		|	Т.НомерСтроки
		|";
		
		ПоляСоединения       = "Т.Номенклатура, Т.Характеристика, СпрСклады.Ссылка";
		ПолеЗапланировать    = ПараметрыПодстановкиПоляЗапланировать(ПараметрыВыборки, ПоляСоединения);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолеЗапланировать"            , ПолеЗапланировать.ТекстПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстСоединенияСпособыОбеспечения%", ПолеЗапланировать.ТекстСоединения);
		
		ПолеЗаказатьНаСклад = ПараметрыПодстановкиПоляЗаказатьНаСклад("Т",, ПараметрыВыборки.ВариантЗаполненияОбеспечения);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолеЗаказатьНаСклад"       , ПолеЗаказатьНаСклад.ТекстПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстСоединенияЗаказатьНаСклад%", ПолеЗаказатьНаСклад.ТекстСоединения);
		
		ОбеспечениеПроизводства.ВыполнитьПодстановкуПараметровОбеспеченияМатериалов(ТекстЗапроса,
			"Т",,"Этап.Подразделение",
			ПараметрыВыборки.ВариантЗаполненияОбеспечения);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Распоряжение"          , "Т.Распоряжение");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Назначение"            , "Т.Назначение");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПодразделениеДиспетчер", "Т.ПодразделениеДиспетчер");
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		
		Запрос.УстановитьПараметр("МатериалыИУслуги", Таблица);
		
		Запрос.Текст = ТекстЗапроса;
		
		УправлениеДаннымиОбИзделиях.УстановитьПараметрыЗапросаСпецификацийНоменклатуры(
			Запрос,
			ПараметрыВыбораСпецификаций);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		
		ДанныеУпаковок           = РезультатыЗапроса[РезультатыЗапроса.Количество()-3].Выгрузить();
		Спецификации             = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить();
		ОбеспечениеДанныеНаборов = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
		
		ДанныеНаборов = Таблица.СкопироватьКолонки("Идентификатор,"+СписокКолонокСоставаНабора());
		
		Для каждого Строка Из ОбеспечениеДанныеНаборов Цикл
			Если Строка.ДанныеНаборов Тогда
				ЗаполнитьЗначенияСвойств(ДанныеНаборов.Добавить(), Строка);
			Иначе
				ЗаполнитьЗначенияСвойств(Таблица[Строка.ИндексСтроки], Строка, "Склад,ЗаказатьНаСклад,ВариантОбеспечения,Запланировать");
			КонецЕсли;
		КонецЦикла;
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(ДанныеНаборов, ДанныеУпаковок);
		
		ДанныеНаборов.Индексы.Добавить("Идентификатор");
		
		Таблицы.Вставить("ДанныеНаборов", ДанныеНаборов);
		
		Для каждого Строка Из Спецификации Цикл
			
			Таблица[Строка.ИндексСтроки].Спецификация                   = Строка.Спецификация;
			Таблица[Строка.ИндексСтроки].ИсточникПолученияПолуфабриката = Строка.Спецификация;
			
		КонецЦикла;
		
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц,
			"ВтСписокНоменклатуры,ВтСпецификации,ВтМатериалыИУслуги,ВтДанныеНаборов");
		
	КонецЕсли;
	
	Таблица.Колонки.Удалить("ИндексСтроки");
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОбеспеченияВыходныхИзделий(Запрос, Таблицы, ПараметрыВыборки)
	
	РазделительЗапросаВПакете = ОбщегоНазначенияУТ.РазделительЗапросовВПакете();
	
	ИменаНаборовДанных = Новый Массив;
	ТекстыОбъединения  = Новый Массив;
	
	ТекстЗапроса = "";

	Для каждого ИмяНабораДанных Из СтрРазделить("ВыходныеИзделия,ВозвратныеОтходы",",") Цикл
		
		Таблица = Неопределено;
		Если Таблицы.Свойство(ИмяНабораДанных, Таблица) И Таблица.Найти(Истина,"ИспользуетсяАвтовыбор") <> Неопределено Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	""%1""           КАК ИмяНабораДанных,
			|	Т.Идентификатор  КАК Идентификатор,
			|	Т.НомерСтроки    КАК НомерСтроки,
			|
			|	Т.Номенклатура   КАК Номенклатура,
			|	Т.Характеристика КАК Характеристика,
			|
			|	Т.Этап           КАК Этап
			|
			|ПОМЕСТИТЬ %1
			|ИЗ
			|	&%1 КАК Т
			|
			|ГДЕ
			|	Т.ИспользуетсяАвтовыбор
			|" + РазделительЗапросаВПакете;
			
			ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяНабораДанных);
			
			Запрос.УстановитьПараметр(ИмяНабораДанных, Таблица);
			
			ТекстыОбъединения.Добавить(СтрШаблон("ВЫБРАТЬ Т.* ИЗ %1 КАК Т", ИмяНабораДанных));
			
			ИменаНаборовДанных.Добавить(ИмяНабораДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИменаНаборовДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Т.*,
	|	&ТекстПолеСклад КАК Склад
	|
	|ИЗ ("+СтрСоединить(ТекстыОбъединения," ОБЪЕДИНИТЬ ВСЕ ")+") КАК Т
	|
	|	%ТекстСоединенияНастройкиПередачиМатериалов%
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.ИмяНабораДанных,
	|	Т.Идентификатор,
	|	Т.НомерСтроки
	|";
	
	ТекстЗапросаДляПолученияСклада = ОбеспечениеПроизводства.ТекстЗапросаНастройкиПередачиМатериалов(
		"Т",
		"Этап.Подразделение",
		ПараметрыВыборки.ВариантЗаполненияОбеспечения);
		
	ТекстЗапроса = СтрЗаменить(
						ТекстЗапроса, 
						"%ТекстСоединенияНастройкиПередачиМатериалов%",
						ТекстЗапросаДляПолученияСклада.ТекстСоединения);
		
	ТекстЗапроса = СтрЗаменить(
						ТекстЗапроса, 
						"&ТекстПолеСклад",
						ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатОбеспечение = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатОбеспечение.Индексы.Добавить("ИмяНабораДанных,Идентификатор,НомерСтроки");
	
	Отбор = Новый Структура("ИмяНабораДанных,Идентификатор,НомерСтроки");
	Для каждого ИмяНабораДанных Из ИменаНаборовДанных Цикл
		Для каждого Строка Из Таблицы[ИмяНабораДанных] Цикл
			Если Строка.ИспользуетсяАвтовыбор Тогда
				Отбор.ИмяНабораДанных = ИмяНабораДанных;
				ЗаполнитьЗначенияСвойств(Отбор, Строка, "Идентификатор,НомерСтроки");
				
				СтрокиРезультата      = РезультатОбеспечение.НайтиСтроки(Отбор);
				Если СтрокиРезультата <> Неопределено Тогда
					Строка.Склад = СтрокиРезультата[0].Склад;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц,
		СтрСоединить(ИменаНаборовДанных,","));
	
КонецПроцедуры


// Заполняет информацию по применению материала
// 
// Параметры:
// 	МатериалыИУслуги - ТаблицаЗначений - таблица материалов
// 	ПараметрыВыборки - см. ПараметрыВыборкиДанных
Процедура ЗаполнитьИнформациюПоПрименениюМатериала(МатериалыИУслуги, ПараметрыВыборки)
	
	Если ПараметрыВыборки.ПолучитьПредставления Тогда
		
		МатериалыИУслуги.Колонки.Добавить("ПрименениеМатериалаРедактирование");
		
		Для каждого Строка Из МатериалыИУслуги Цикл
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоПрименениюМатериала(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СписокКолонокСоставаНабора()
	
	СписокКолонок = "
		|КлючСвязи,НомерСтроки,ТипНоменклатуры,Номенклатура,Характеристика,ХарактеристикиИспользуются,
		|Количество,ЕдиницаИзмерения,КоличествоУпаковок,Упаковка,ДанныеУпаковки,ЕдиницаИзмеренияШтучная,
		|УпаковкаШтучная,Склад,ВариантОбеспечения,Запланировать,ЗаказатьНаСклад,Спецификация";
	
	Возврат СписокКолонок;
	
КонецФункции

Процедура ВключитьДанныеНаборовВСтруктуруДанныхСпецификации(ДанныеСпецификации, Таблицы, СтруктураОтбора)
	
	Если НЕ Таблицы.Свойство("ДанныеНаборов") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНаборов = Таблицы.ДанныеНаборов.Скопировать(СтруктураОтбора); // ТаблицаЗначений
	
	Если ДанныеНаборов.Количество() > 0 Тогда
		
		ДанныеНаборов.Колонки.Удалить("Идентификатор");
		ДанныеНаборов.Индексы.Добавить("КлючСвязи");
		
		ДанныеСпецификации.Вставить("ДанныеНаборов", ДанныеНаборов);
		ДанныеСпецификации.СостояниеДанныхНаборов = "Свернуты";
		
	КонецЕсли;
	
КонецПроцедуры

// Производит распаковку / свертку данных наборов внутри структуры данных спецификации
// 
// Параметры:
// 	ДанныеСпецификации - см. ДанныеСпецификацииКонструктор
// 	Действие - Строка - действие, которое необходимо произвести: Распаковать, Свернуть
//
Процедура ОбработатьДанныеНаборов(ДанныеСпецификации, Действие)
	
	Если НЕ ДанныеСпецификации.Свойство("МатериалыИУслуги")
		ИЛИ ДанныеСпецификации.СостояниеДанныхНаборов = "Отсутствуют" Тогда
		Возврат;
	КонецЕсли;
	
	МатериалыИУслуги = ДанныеСпецификации.МатериалыИУслуги;
	
	СоставНабораКолонки  = СписокКолонокСоставаНабора();
	
	ТипНоменклатурыНабор = Перечисления.ТипыНоменклатуры.Набор;
	
	ОтборТипНоменклатуры = Новый Структура("ТипНоменклатуры", ТипНоменклатурыНабор);
	ОтборКлючСвязи       = Новый Структура("КлючСвязи");
	
	Если ДанныеСпецификации.СостояниеДанныхНаборов = "Свернуты" И Действие = "Распаковать" Тогда
		
		ДанныеНаборовСохранить = МатериалыИУслуги.Скопировать(ОтборТипНоменклатуры);
		
		ИндексСтроки           = 0;
		КоличествоСтрокТаблицы = МатериалыИУслуги.Количество();
		Пока ИндексСтроки < КоличествоСтрокТаблицы Цикл
			Строка = МатериалыИУслуги[ИндексСтроки];
			Если Строка.ТипНоменклатуры = ТипНоменклатурыНабор Тогда
				
				ОтборКлючСвязи.КлючСвязи = Строка.КлючСвязи;
				СоставНабора = ДанныеСпецификации.ДанныеНаборов.Скопировать(ОтборКлючСвязи);
				
				Если СоставНабора.Количество() > 0 Тогда
					СоставНабора.Сортировать("НомерСтроки");
					Для каждого СтрокаНабора Из СоставНабора Цикл
						НоваяСтрока = МатериалыИУслуги.Вставить(ИндексСтроки);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , СоставНабораКолонки);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабора, СоставНабораКолонки, "Количество, КоличествоУпаковок"); 
						НоваяСтрока.НомерСтроки        = Строка.НомерСтроки;
						НоваяСтрока.Количество         = СтрокаНабора.Количество * Строка.Количество;
						НоваяСтрока.КоличествоУпаковок = СтрокаНабора.КоличествоУпаковок * Строка.Количество;
						ИндексСтроки = ИндексСтроки + 1;
					КонецЦикла;
					МатериалыИУслуги.Удалить(Строка);
					КоличествоСтрокТаблицы = МатериалыИУслуги.Количество();
				Иначе
					Если НЕ ЗначениеЗаполнено(Строка.ПрименениеМатериала) Тогда
						Строка.ПрименениеМатериала = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Строка.Номенклатура, Строка.Характеристика);
					КонецЕсли;
					Строка.Номенклатура   = Справочники.Номенклатура.ПустаяСсылка();
					Строка.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					Строка.СпособАвтовыбораНоменклатуры   = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
					Строка.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЕсли;
				
			Иначе
				ИндексСтроки = ИндексСтроки + 1;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеСпецификации.ДанныеНаборов = ДанныеНаборовСохранить;
		ДанныеСпецификации.СостояниеДанныхНаборов = "Распакованы";
		
	ИначеЕсли ДанныеСпецификации.СостояниеДанныхНаборов = "Распакованы" И Действие = "Свернуть" Тогда
		
		ДанныеНаборовСохранить = МатериалыИУслуги.СкопироватьКолонки(СписокКолонокСоставаНабора());
		
		Для каждого Строка Из ДанныеСпецификации.ДанныеНаборов Цикл
			
			ИндексВставки = МатериалыИУслуги.Количество()-1;
			
			ОтборКлючСвязи.КлючСвязи = Строка.КлючСвязи;
			
			СоставНабора = МатериалыИУслуги.НайтиСтроки(ОтборКлючСвязи);
			Для каждого СтрокаНабора Из СоставНабора Цикл
				ИндексВставки = Мин(ИндексВставки, МатериалыИУслуги.Индекс(СтрокаНабора));
				НоваяСтрока = ДанныеНаборовСохранить.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабора);
				НоваяСтрока.Количество         = НоваяСтрока.Количество / Строка.Количество;
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок / Строка.Количество;
				МатериалыИУслуги.Удалить(СтрокаНабора);
			КонецЦикла;
			НоваяСтрока = МатериалыИУслуги.Вставить(ИндексВставки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЦикла;
		
		ДанныеСпецификации.ДанныеНаборов = ДанныеНаборовСохранить;
		ДанныеСпецификации.СостояниеДанныхНаборов = "Свернуты";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьОтборПоДаннымСпецификации(ДанныеСпецификации, ПараметрыВыборки, Отбор)
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		Для каждого ИмяТаблицы Из ПараметрыВыборки.ПереченьДанных Цикл
			ДанныеСпецификации.Вставить(ИмяТаблицы, ДанныеСпецификации[ИмяТаблицы].Скопировать(Отбор));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьПроизводимыеНаЭтапеПолуфабрикаты(МатериалыИУслуги, ВозвратныеОтходы) Экспорт
	
	Если ВозвратныеОтходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СпособПолученияМатериала",
		Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе);
	СтруктураПоиска.Вставить("СпецификацияРемонта",
		Справочники.РесурсныеСпецификации.ПустаяСсылка());
	
	СтрокиМатериалы = МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаМатериал Из СтрокиМатериалы Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаМатериал.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаМатериал.Характеристика);
		СтруктураПоиска.Вставить("Этап", СтрокаМатериал.ИсточникПолученияПолуфабриката);
		
		СтрокиОтходы = ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
		Остаток = СтрокаМатериал.Количество;
		
		Пока Остаток > 0 И СтрокиОтходы.Количество() > 0 Цикл
			
			Строка = СтрокиОтходы[0];
			Если Остаток >= Строка.Количество Тогда
				Остаток = Остаток - Строка.Количество;
				ВозвратныеОтходы.Удалить(Строка);
				СтрокиОтходы.Удалить(0);
			Иначе
				Строка.Количество = Строка.Количество - Остаток;
				Строка.КоличествоУпаковок = Строка.Количество * Строка.ДанныеУпаковки.Знаменатель / Строка.ДанныеУпаковки.Числитель;
				Остаток = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		МатериалыИУслуги.Удалить(СтрокаМатериал);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьДанныеПолуфабрикатов(ДанныеСпецификацииСводные, СписокНоменклатуры, ПараметрыВыборки)
	
	ПереченьДанных = ПараметрыВыборки.ПереченьДанных;
	
	СписокНоменклатурыНовый = СписокНоменклатуры();
	
	ДанныеСпецификаций = ДанныеСпецификацииПоСпискуНоменклатуры(СписокНоменклатуры, ПараметрыВыборки);
	
	Для Индекс = 0 По ДанныеСпецификаций.ВГраница() Цикл
		
		ДанныеСпецификации = ДанныеСпецификаций[Индекс];
		
		Если ДанныеСпецификации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПереченьДанных.Найти("АльтернативныеВидыРабочихЦентров") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.АльтернативныеВидыРабочихЦентров, ДанныеСпецификацииСводные.АльтернативныеВидыРабочихЦентров);
		КонецЕсли;
		
		Если ПереченьДанных.Найти("ВидыРабочихЦентров") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.ВидыРабочихЦентров, ДанныеСпецификацииСводные.ВидыРабочихЦентров);
		КонецЕсли;
		
		Если ПереченьДанных.Найти("ВыходныеИзделия") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.ВыходныеИзделия, ДанныеСпецификацииСводные.ВыходныеИзделия);
		КонецЕсли;
		
		Если ПереченьДанных.Найти("ВозвратныеОтходы") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.ВозвратныеОтходы, ДанныеСпецификацииСводные.ВозвратныеОтходы);
		КонецЕсли;
		
		Если ПереченьДанных.Найти("МатериалыИУслуги") <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.МатериалыИУслуги, ДанныеСпецификацииСводные.МатериалыИУслуги);
			
			Для Каждого Строка Из ДанныеСпецификации.МатериалыИУслуги Цикл
				Если Строка.ПроизводитсяВПроцессе Тогда
					
					НоваяСтрока = СписокНоменклатурыНовый.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура, Характеристика, Количество, ДнейОтПотребности");
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СписокНоменклатуры[Индекс], "НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности");
					НоваяСтрока.Спецификация = Строка.ИсточникПолученияПолуфабриката;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПереченьДанных.Найти("Трудозатраты") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.Трудозатраты, ДанныеСпецификацииСводные.Трудозатраты);
		КонецЕсли;
		
		Если ПереченьДанных.Найти("Этапы") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.Этапы, ДанныеСпецификацииСводные.Этапы);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокНоменклатурыНовый;
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область СписокРесурсныхСпецификаций

Функция ТекстЗапросаДинамическогоСпискаРесурсныхСпецификаций() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникРесурсныеСпецификации.Ссылка КАК Ссылка,
	|
	|	СправочникРесурсныеСпецификации.Код КАК Код,
	|	СправочникРесурсныеСпецификации.Наименование КАК Наименование,
	|
	|	СправочникРесурсныеСпецификации.Статус КАК Статус,
	|	СправочникРесурсныеСпецификации.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|
	|	СправочникРесурсныеСпецификации.НачалоДействия КАК НачалоДействия,
	|	СправочникРесурсныеСпецификации.КонецДействия КАК КонецДействия,
	|
	|	СправочникРесурсныеСпецификации.Ответственный КАК Ответственный,
	|	СправочникРесурсныеСпецификации.Описание КАК Описание,
	|
	|	ВЫБОР
	|		КОГДА СправочникРесурсныеСпецификации.ВариантНазначения = ЗНАЧЕНИЕ(Перечисление.ВариантыНазначенияСпецификации.ВидНоменклатуры)
	|			ТОГДА СправочникРесурсныеСпецификации.ОсновноеИзделиеВидНоменклатуры
	|		ИНАЧЕ СправочникРесурсныеСпецификации.ОсновноеИзделиеНоменклатура
	|	КОНЕЦ КАК ОсновноеИзделие
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК СправочникРесурсныеСпецификации
	|	
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Условиное оформление списка ресурсных спецификаций
// 
// Параметры:
// 	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление
// 	ИмяВладельцаПолейОтбора - Строка - имя элемента
Процедура УстановитьУсловноеОформлениеСпискаРесурсныхСпецификаций(УсловноеОформление, ИмяВладельцаПолейОтбора = "") Экспорт

	ВладелецПолейОтбора = ?(ИмяВладельцаПолейОтбора = "", "", ИмяВладельцаПолейОтбора + ".");
	
	// Оформление спецификации в разработке
	Элемент = УсловноеОформление.Элементы.Добавить();

	Если ИмяВладельцаПолейОтбора <> "" Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВладельцаПолейОтбора);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВладелецПолейОтбора + "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.ВРазработке;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Оформление закрытой спецификации
	Элемент = УсловноеОформление.Элементы.Добавить();

	Если ИмяВладельцаПолейОтбора <> "" Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВладельцаПолейОтбора);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВладелецПолейОтбора + "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.Закрыта;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
КонецПроцедуры

Функция ТекстЗапросаДинамическогоСпискаДоступныхСпецификаций() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РесурсныеСпецификации.Ссылка         КАК Спецификация,
	|
	|	РесурсныеСпецификации.НачалоДействия КАК НачалоДействия,
	|	РесурсныеСпецификации.КонецДействия  КАК КонецДействия,
	|
	|	РесурсныеСпецификации.Статус         КАК Статус,
	|
	|	ЛОЖЬ                                 КАК Приоритетная
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|	
	|ГДЕ
	|	НЕ РесурсныеСпецификации.ПометкаУдаления
	|	И РесурсныеСпецификации.Ссылка В (&СписокСпецификаций)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Условиное оформление списка доступных спецификаций
// 
// Параметры:
// 	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление
Процедура УстановитьУсловноеОформлениеСпискаДоступныхСпецификаций(УсловноеОформление) Экспорт

	// Оформление спецификации в разработке
	Элемент = УсловноеОформление.Элементы.Добавить();

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.ВРазработке;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Оформление закрытой спецификации
	Элемент = УсловноеОформление.Элементы.Добавить();

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.Закрыта;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
КонецПроцедуры

#КонецОбласти


#Область ТекстыЗапросов

Функция ТекстЗапросаДанныеОсновногоИзделияСпецификации()
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыходныеИзделия.Ссылка                   КАК Спецификация,
	|	ВыходныеИзделия.Ссылка.ВариантНазначения КАК ВариантНазначения,
	|
	|	ВыходныеИзделия.ВидНоменклатуры          КАК ВидНоменклатуры,
	|	&ВыходныеИзделияИсточникНоменклатуры     КАК Номенклатура,
	|	&ВыходныеИзделияИсточникХарактеристики   КАК Характеристика,
	|
	|	ВыходныеИзделия.КоличествоУпаковок       КАК КоличествоУпаковок,
	|
	|	ВЫБОР
	|		КОГДА &УчитыватьВероятностьБрака
	|			ТОГДА ВыходныеИзделия.ПроцентБрака / 100
	|		ИНАЧЕ 0
	|	КОНЕЦ                                    КАК КоэффициентБрака,
	|
	|	ВыходныеИзделия.Упаковка                 КАК Упаковка,
	|	ВыходныеИзделия.Этап КАК Этап,
	|	ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика,
	|	ВыходныеИзделия.НомерСтроки = 1 КАК ЭтоОсновноеИзделие
	|
	|ПОМЕСТИТЬ ВтОсновноеИзделие
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО ВыходныеИзделия.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
	|			И ВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса В (
	|									ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|									ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|			И (ВыходныеИзделия.Номенклатура = ВтДанныеПоНоменклатуре.Номенклатура
	|				ИЛИ ВтДанныеПоНоменклатуре.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВыходныеИзделия.НомерСтроки = 1
	|				ИЛИ ВыходныеИзделия.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВыходныеИзделия.ВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры
	|					И ВыходныеИзделия.НомерСтроки = 1)
	|			И (ВтДанныеПоНоменклатуре.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И ВыходныеИзделия.НомерСтроки = 1
	|				ИЛИ ВыходныеИзделия.Характеристика = ВтДанныеПоНоменклатуре.Характеристика
	|				ИЛИ ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВходныеИзделия.Ссылка,
	|	ВходныеИзделия.ВариантНазначения,
	|	
	|	ВходныеИзделия.ОсновноеИзделиеВидНоменклатуры,
	|	&ВходныеИзделияИсточникНоменклатуры,
	|	&ВходныеИзделияИсточникХарактеристики,
	|
	|	ВходныеИзделия.ОсновноеИзделиеКоличествоУпаковок,
	|
	|	0,
	|
	|	ВходныеИзделия.ОсновноеИзделиеУпаковка,
	|	ВходныеИзделия.ОсновноеИзделиеЭтап,
	|	ВходныеИзделия.ОсновноеИзделиеХарактеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ИСТИНА
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК ВходныеИзделия
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО ВходныеИзделия.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
	|			И ВходныеИзделия.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			И (ВходныеИзделия.ОсновноеИзделиеНоменклатура = ВтДанныеПоНоменклатуре.Номенклатура
	|				ИЛИ ВтДанныеПоНоменклатуре.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ИЛИ ВходныеИзделия.ОсновноеИзделиеНоменклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВходныеИзделия.ОсновноеИзделиеВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры)
	|			И (ВтДанныеПоНоменклатуре.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ИЛИ ВходныеИзделия.ОсновноеИзделиеХарактеристика = ВтДанныеПоНоменклатуре.Характеристика
	|				ИЛИ ВходныеИзделия.ОсновноеИзделиеХарактеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|";
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	ТекстыЗапросов.Добавить(УправлениеДаннымиОбИзделиях.ТекстЗапросаДанныеУпаковок(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВтОсновноеИзделие")));
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.*,
	|	Т.КоличествоУпаковок            КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
	|	Т.Номенклатура.ТипНоменклатуры  КАК ТипНоменклатуры,
	|	Т.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(Т.Номенклатура.ГруппаАналитическогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)) КАК ГруппаАналитическогоУчета,
	|	ВЫБОР
	|		КОГДА Т.Номенклатура.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ЕСТЬNULL(Т.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК ЕдиницаИзмеренияШтучная
	|
	|ИЗ
	|	ВтОсновноеИзделие КАК Т
	|";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ПараметрыПодстановкиВыходныеИзделия = ПараметрыПодстановкиНоменклатураХарактеристикаОсновногоИзделия(
		"ВыходныеИзделия",
		"ВидНоменклатуры",
		"Номенклатура",
		"Характеристика");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникНоменклатуры",   ПараметрыПодстановкиВыходныеИзделия.ИсточникНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникХарактеристики", ПараметрыПодстановкиВыходныеИзделия.ИсточникХарактеристика);
	
	ПараметрыПодстановкиВходныеИзделия  = ПараметрыПодстановкиНоменклатураХарактеристикаОсновногоИзделия(
		"ВходныеИзделия",
		"ОсновноеИзделиеВидНоменклатуры",
		"ОсновноеИзделиеНоменклатура",
		"ОсновноеИзделиеХарактеристика");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВходныеИзделияИсточникНоменклатуры",   ПараметрыПодстановкиВходныеИзделия.ИсточникНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВходныеИзделияИсточникХарактеристики", ПараметрыПодстановкиВходныеИзделия.ИсточникХарактеристика);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПараметрыПодстановкиНоменклатураХарактеристикаОсновногоИзделия(
	ИмяТаблицы,
	ИсточникВидНоменклатуры = "ВидНоменклатуры",
	ИсточникНоменклатура = "Номенклатура",
	ИсточникХарактеристика = "Характеристика")
	
	Результат = Новый Структура;
	
	ТекстПоляНоменклатура = ТекстПоляВыражениеНоменклатураОсновногоИзделия(
		ИмяТаблицы,
		ИсточникВидНоменклатуры,
		ИсточникНоменклатура);
		
	ТекстПоляХарактеристика = ТекстПоляВыражениеХарактеристикаОсновногоИзделия(
		ИмяТаблицы,
		ИсточникВидНоменклатуры,
		ИсточникНоменклатура,
		ИсточникХарактеристика);
		
	Результат.Вставить("ИсточникНоменклатура",   ТекстПоляНоменклатура);
	Результат.Вставить("ИсточникХарактеристика", ТекстПоляХарактеристика);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстПоляВыражениеНоменклатураОсновногоИзделия(
	ИмяТаблицы,
	ИсточникВидНоменклатуры = "ВидНоменклатуры",
	ИсточникНоменклатура = "Номенклатура")

	ТекстПоля = "
	|ВЫБОР
	|	КОГДА ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И ТабличнаяЧасть.ВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры
	|		ТОГДА ВтДанныеПоНоменклатуре.Номенклатура
	|	ИНАЧЕ ТабличнаяЧасть.Номенклатура
	|КОНЕЦ
	|";
	
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.ВидНоменклатуры", ИмяТаблицы + "." + ИсточникВидНоменклатуры);
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.Номенклатура",    ИмяТаблицы + "." + ИсточникНоменклатура);
	
	Возврат ТекстПоля;
	
КонецФункции

Функция ТекстПоляВыражениеХарактеристикаОсновногоИзделия(
	ИмяТаблицы,
	ИсточникВидНоменклатуры = "ВидНоменклатуры",
	ИсточникНоменклатура = "Номенклатура",
	ИсточникХарактеристика = "Характеристика")
	
	ТекстПоля = "
	|ВЫБОР
	|	КОГДА ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И ТабличнаяЧасть.ВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры
	|		ТОГДА ВтДанныеПоНоменклатуре.Характеристика
	|	КОГДА ТабличнаяЧасть.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ТОГДА ТабличнаяЧасть.Характеристика
	|	КОГДА ТабличнаяЧасть.Номенклатура = ВтДанныеПоНоменклатуре.Номенклатура
	|		ТОГДА ВтДанныеПоНоменклатуре.Характеристика
	|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|КОНЕЦ"; 
	
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.ВидНоменклатуры", ИмяТаблицы + "." + ИсточникВидНоменклатуры);
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.Номенклатура",    ИмяТаблицы + "." + ИсточникНоменклатура);
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.Характеристика",  ИмяТаблицы + "." + ИсточникХарактеристика);
	
	Возврат ТекстПоля;
	
КонецФункции

	
Функция ТекстЗапросаМатериалыСпецификацийВключаяСоставНаборов(ИмяТаблицы) Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииМатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	РесурсныеСпецификацииМатериалыИУслуги.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ВариантыКомплектацииНоменклатуры.Ссылка) КАК ВариантКомплектацииНоменклатуры
	|ПОМЕСТИТЬ ВТОсновныеКомплектацииНоменклатуры
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаСпецификаций КАК ТаблицаСпецификаций
	|		ПО (ТаблицаСпецификаций.Спецификация = РесурсныеСпецификацииМатериалыИУслуги.Ссылка)
	|			И (РесурсныеСпецификацииМатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО РесурсныеСпецификацииМатериалыИУслуги.Номенклатура = ВариантыКомплектацииНоменклатуры.Владелец
	|			И РесурсныеСпецификацииМатериалыИУслуги.Характеристика = ВариантыКомплектацииНоменклатуры.Характеристика
	|			И (НЕ ВариантыКомплектацииНоменклатуры.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	РесурсныеСпецификацииМатериалыИУслуги.Номенклатура,
	|	РесурсныеСпецификацииМатериалыИУслуги.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновныеКомплектацииНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВТОсновныеКомплектацииНоменклатуры.Характеристика КАК Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Комплектующая,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК ХарактеристикаКомплектующей,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка КАК Упаковка,
	|	ВариантыКомплектацииНоменклатурыТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВариантыКомплектацииНоменклатурыТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ВТСоставНаборов
	|ИЗ
	|	ВТОсновныеКомплектацииНоменклатуры КАК ВТОсновныеКомплектацииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ПО ВТОсновныеКомплектацииНоменклатуры.ВариантКомплектацииНоменклатуры = ВариантыКомплектацииНоменклатурыТовары.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииМатериалыИУслуги.Ссылка КАК Ссылка,
	|	РесурсныеСпецификацииМатериалыИУслуги.Этап КАК Этап,
	|	ЕСТЬNULL(ВТСоставНаборов.Комплектующая, РесурсныеСпецификацииМатериалыИУслуги.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ВТСоставНаборов.Характеристика, РесурсныеСпецификацииМатериалыИУслуги.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ВТСоставНаборов.Упаковка, РесурсныеСпецификацииМатериалыИУслуги.Упаковка) КАК Упаковка,
	|	РесурсныеСпецификацииМатериалыИУслуги.КоличествоУпаковок
	|		* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|		* ЕСТЬNULL(ВТСоставНаборов.КоличествоУпаковок, 1)                              КАК КоличествоУпаковок,
	|	РесурсныеСпецификацииМатериалыИУслуги.КоличествоУпаковок
	|		* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|		* ЕСТЬNULL(ВТСоставНаборов.Количество, 1)                                      КАК Количество
	|ПОМЕСТИТЬ МатериалыИУслугиСпецификаций
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаСпецификаций КАК ТаблицаСпецификаций
	|		ПО (ТаблицаСпецификаций.Спецификация = РесурсныеСпецификацииМатериалыИУслуги.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоставНаборов КАК ВТСоставНаборов
	|		ПО РесурсныеСпецификацииМатериалыИУслуги.Номенклатура = ВТСоставНаборов.Номенклатура
	|			И РесурсныеСпецификацииМатериалыИУслуги.Характеристика = ВТСоставНаборов.Характеристика
	|			И (РесурсныеСпецификацииМатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОсновныеКомплектацииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСоставНаборов";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"РесурсныеСпецификацииМатериалыИУслуги.Упаковка",
			"РесурсныеСпецификацииМатериалыИУслуги.Номенклатура"));
			
	Возврат СтрЗаменить(ТекстЗапроса, "&ТаблицаСпецификаций", ИмяТаблицы);
	
КонецФункции

Функция ПараметрыПодстановкиПоляЗаказатьНаСклад(ИмяТаблицы = "ТабличнаяЧасть", ИсточникНоменклатуры = "",  ВариантЗаполненияОбеспечения = Неопределено)
	
	ТекстПоля       = "ЛОЖЬ";
	ТекстСоединения = "";
	
	//++ Устарело_Производство21
	Если ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоНастройкамПередачиВПроизводство
		ИЛИ ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоНастройкамПередачиВПроизводствоДляПланов Тогда
		
		ТекстПоля = "
		|	ВЫБОР 
		|		КОГДА ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
		|																	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|			ТОГДА ЛОЖЬ
		|		КОГДА ТабличнаяЧасть.ПроизводитсяВПроцессе ТОГДА
		|			ВЫБОР
		|				КОГДА ТабличнаяЧасть.Этап.Подразделение.СпособПолученияПолуфабрикатов = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияПолуфабрикатовПроизводимыхВПроцессе.Напрямую)
		|					ТОГДА ЛОЖЬ
		|				КОГДА ТабличнаяЧасть.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|						И ВЫРАЗИТЬ(ТабличнаяЧасть.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение = ТабличнаяЧасть.Этап.Подразделение
		|					ТОГДА ЛОЖЬ
		|				КОГДА ТабличнаяЧасть.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|						И ВЫРАЗИТЬ(ТабличнаяЧасть.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение <> ТабличнаяЧасть.Этап.Подразделение
		|					ТОГДА ИСТИНА
		|				КОГДА ТабличнаяЧасть.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
		|						И ПроизводимоеВПроцессеИзделие.Этап.Подразделение <> ТабличнаяЧасть.Этап.Подразделение
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|		КОГДА &ТекстПолеОснование = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
		|				ИЛИ ТабличнаяЧасть.Этап.ПроизводствоНаСтороне 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ";
		
		ТекстСоединения = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ПроизводимоеВПроцессеИзделие
		|		ПО ПроизводимоеВПроцессеИзделие.Ссылка = ТабличнаяЧасть.ИсточникПолученияПолуфабриката
		|			И ТабличнаяЧасть.ПроизводитсяВПроцессе
		|			И ПроизводимоеВПроцессеИзделие.Номенклатура = ТабличнаяЧасть.Номенклатура
		|			И (ПроизводимоеВПроцессеИзделие.Характеристика = ТабличнаяЧасть.Характеристика
		|				ИЛИ ПроизводимоеВПроцессеИзделие.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))";
		
		Если НЕ ПустаяСтрока(ИсточникНоменклатуры) Тогда
			ТекстПоля       = СтрЗаменить(ТекстПоля      , "ТабличнаяЧасть.Номенклатура"  , ИсточникНоменклатуры+".Номенклатура");
			ТекстПоля       = СтрЗаменить(ТекстПоля      , "ТабличнаяЧасть.Характеристика", ИсточникНоменклатуры+".Характеристика");
			ТекстСоединения = СтрЗаменить(ТекстСоединения, "ТабличнаяЧасть.Номенклатура"  , ИсточникНоменклатуры+".Номенклатура");
			ТекстСоединения = СтрЗаменить(ТекстСоединения, "ТабличнаяЧасть.Характеристика", ИсточникНоменклатуры+".Характеристика");
		КонецЕсли;
		
		Если ИмяТаблицы <> "ТабличнаяЧасть" Тогда
			ТекстПоля       = СтрЗаменить(ТекстПоля      , "ТабличнаяЧасть.", ИмяТаблицы+".");
			ТекстСоединения = СтрЗаменить(ТекстСоединения, "ТабличнаяЧасть.", ИмяТаблицы+".");
		КонецЕсли;
	
	КонецЕсли;
	//-- Устарело_Производство21
	
	Возврат Новый Структура("ТекстПоля, ТекстСоединения", ТекстПоля, ТекстСоединения);
	
КонецФункции

Функция ПараметрыПодстановкиПоляЗапланировать(ПараметрыВыборки, ПоляСоединения)
	
	ТекстПоля       = "ЛОЖЬ";
	ТекстСоединения = "";
	
	Если ПараметрыВыборки.РассчитыватьПризнакЗапланироватьПроизводство Тогда
		
		ТекстПоля = "
		|	ВЫБОР 
		|		КОГДА (&ПодразделениеДиспетчер = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) 
		|				ИЛИ ЕСТЬNULL(СпрСпособОбеспечения.ИсточникОбеспеченияПотребностей, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|					В (&ПодразделениеДиспетчер,
		|					   НЕОПРЕДЕЛЕНО,
		|					   ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)))
		|				И ЕСТЬNULL(СпрСпособОбеспечения.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ";
		
		ТекстСоединения = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособОбеспечения
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения";
		
		ТекстСоединения = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
			ТекстСоединения,
			"ПодстановкаОсновногоСпособаОбеспечения",
			ПоляСоединения);
		
	КонецЕсли;
	
	Возврат Новый Структура("ТекстПоля, ТекстСоединения", ТекстПоля, ТекстСоединения);
	
КонецФункции

Функция ТекстЗапросаДоступныеУпаковкиСпецификацииНаВидНоменклатуры(АвтоПодбор = Ложь) Экспорт
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстыЗапроса.Добавить("
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Владелец      КАК НаборУпаковок,
	|	УпаковкиЕдиницыИзмерения.Ссылка        КАК Ссылка,
	|	УпаковкиЕдиницыИзмерения.Представление КАК Представление
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
	|	И %1
	|
	|//УПОРЯДОЧИТЬ ПО
	|//	Представление
	|");
	
	ТекстыЗапроса.Добавить("
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Владелец      КАК НаборУпаковок,
	|	УпаковкиЕдиницыИзмерения.Ссылка        КАК Ссылка,
	|	УпаковкиЕдиницыИзмерения.Представление КАК Представление
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	ВЫРАЗИТЬ(УпаковкиЕдиницыИзмерения.Владелец КАК Справочник.НаборыУпаковок).Предопределенный = ЛОЖЬ
	|	И &ИспользоватьУпаковкиНоменклатуры
	|	И %1
	|	
	|УПОРЯДОЧИТЬ ПО
	|//	НаборУпаковок,
	|//	Ссылка ИЕРАРХИЯ,
	|	Представление
	|//АВТОУПОРЯДОЧИВАНИЕ");
	
	Если АвтоПодбор = Истина Тогда
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, "УпаковкиЕдиницыИзмерения.Наименование ПОДОБНО &СтрокаПоиска");
	Иначе
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Символы.ПС + ";" + Символы.ПС);
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//","");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru='Получение данных спецификации';uk='Отримання даних специфікації'",ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция СтруктураДанныхОсновногоИзделияСпецификации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВидНоменклатуры", ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка"));
	Результат.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	Результат.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	
	Результат.Вставить("Количество", 0);
	Результат.Вставить("КоличествоУпаковок", 0);
	
	Результат.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	Результат.Вставить("ДанныеУпаковки", УправлениеДаннымиОбИзделиях.СтруктураДанныхУпаковки());
	
	Результат.Вставить("ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	Результат.Вставить("ЕдиницаИзмеренияШтучная", Ложь);
	Результат.Вставить("УпаковкаШтучная", Ложь);
	
	Результат.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	Результат.Вставить("ГруппаАналитическогоУчета", ПредопределенноеЗначение("Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка"));
	
	Результат.Вставить("ХарактеристикиИспользуются", Ложь);
	Результат.Вставить("ЛюбаяХарактеристика", Ложь);
	
	Результат.Вставить("Спецификация", ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	Результат.Вставить("ВариантНазначения", ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.ПустаяСсылка"));
	
	Результат.Вставить("КоэффициентБрака", 0);
	
	Результат.Вставить("ЭтоОсновноеИзделие", Ложь);
	
	// служебные реквизиты
	Результат.Вставить("КоличествоУпаковокНаЕдиницуПартииВыпуска", 0);
	Результат.Вставить("КоэффициентПересчетаВОсновноеИзделие", 1);
	
	// реквизиты для совместимости
	Результат.Вставить("Подразделение", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	Результат.Вставить("ПодразделениеДиспетчер", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	Результат.Вставить("НаправлениеДеятельности", ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка"));
	Результат.Вставить("НачалоПроизводства", '00010101');
	Результат.Вставить("ДатаПотребности", '00010101');
	Результат.Вставить("ДнейОтПотребности", 0);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт
	
#Область ОбработатьДанныеДляПереходаНаНовуюВерсию22

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.РесурсныеСпецификации.ОбработатьДанныеДляПереходаНаНовуюВерсию22";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.РесурсныеСпецификации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию22";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a6a868d8-a6dd-49ab-8419-7fb8829649b6");
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.РесурсныеСпецификации,"
		+ "Справочник.ЭтапыПроизводства";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ЭтапыПроизводства,"
		+ "Справочник.РесурсныеСпецификации";
	Обработчик.БлокируемыеОбъекты = "Справочник.ЭтапыПроизводства,"
		+ "Справочник.РесурсныеСпецификации";
	Обработчик.Комментарий = НСтр("ru='Обновляет справочник ""Ресурсные спецификации"":
    |- заполняет новый реквизит ""Способ получения материала"".
    |Пока работа обработчика не завершена формирование заказов на производство и планов производства может быть некорректным.'
    |;uk='Оновлює довідник ""Ресурсні специфікації"":
    |- Заповнює новий реквізит ""Спосіб отримання матеріалу"".
    |Поки робота обробника не завершено формування замовлень на виробництво та планів виробництва може бути некоректним.'");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.НормативнаяДлительностьПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.НормативнаяДлительностьЭтаповПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ЭтапыПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";          
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыВыпускаИзделий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";  

#КонецОбласти

#Область ОбработатьДанныеДляПереходаНаНовуюВерсию24

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.РесурсныеСпецификации.ОбработатьДанныеДляПереходаНаНовуюВерсию24";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("563dbfab-1d15-427c-9767-eb8682689afd");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.РесурсныеСпецификации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию24";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.РесурсныеСпецификации";
	Обработчик.ИзменяемыеОбъекты = "Справочник.РесурсныеСпецификации";
	Обработчик.БлокируемыеОбъекты = "Справочник.РесурсныеСпецификации";
	Обработчик.Комментарий = НСтр("ru='Заполняет ключ строки для табличных частей, переносит отбор по свойству в таб. часть, чистит лишние строки тч соответствия свойств';uk='Заповнює ключ рядка для табличних частин, переносить відбір по властивості у таб. частину, чистить зайві рядки тч відповідності властивостей'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";  
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.РесурсныеСпецификации.ОбработатьДанныеДляПереходаНаНовуюВерсию22";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.РесурсныеСпецификации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("21cbfe76-8bf2-4de9-8861-fae446ec1b1c");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.РесурсныеСпецификации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='В справочнике ""Ресурсные спецификации"" заполняет реквизиты:
|- ВариантНазначения,
|- ОсновноеИзделие* для сборки
|- ВидНоменклатуры'
|;uk='У довіднику ""Ресурсні специфікації"" заповнює реквізити: 
|- Варіант призначення, 
|- Основний виріб * для збирання 
|- Вид номенклатури'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.МоделиФормированияСтоимости.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.РесурсныеСпецификации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ЗначенияПараметровНазначенияСпецификаций.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.РесурсныеСпецификации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ЗначенияПараметровНазначенияСпецификаций.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.РесурсныеСпецификации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.РесурсныеСпецификации.ОбработатьДанныеДляПереходаНаНовуюВерсию22";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.РесурсныеСпецификации.ОбработатьДанныеДляПереходаНаНовуюВерсию24";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";  
	
#КонецОбласти	

КонецПроцедуры

// Регистрирует данные к обработке при переходе на новую версию.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.РесурсныеСпецификации";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ (
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Реквизиты
	|ГДЕ
	|	Реквизиты.ВариантПодбораВДокументы = ЗНАЧЕНИЕ(Перечисление.ВариантыПодбораСпецификацииВДокументы.ПустаяСсылка)
	|	И Не Реквизиты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ПО Реквизиты.Ссылка = ЭтапыПроизводства.Владелец
	|			И НЕ ЭтапыПроизводства.ПометкаУдаления
	|ГДЕ
	|	Реквизиты.ОсновноеИзделиеЭтап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Реквизиты
	|ГДЕ
	|	Реквизиты.ВариантНазначения = ЗНАЧЕНИЕ(Перечисление.ВариантыНазначенияСпецификации.УдалитьХарактеристика)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Реквизиты
	|ГДЕ
	|	Реквизиты.ВыпускПроизвольнымиПорциями
	|		И НЕ Реквизиты.НастройкиПартииЗапускаОбновлены
	|		И НЕ Реквизиты.ВариантНазначения = ЗНАЧЕНИЕ(Перечисление.ВариантыНазначенияСпецификации.ВидНоменклатуры)
	|		И (Реквизиты.МинимальнаяПартияВыпуска <> 0
	|			ИЛИ Реквизиты.ОптимальнаяПартияВыпуска <> 0
	|			ИЛИ Реквизиты.ДопустимоеПревышениеОптимальнойПартииВыпуска <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Таблица
	|ГДЕ
	|	(Таблица.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
	|   	ИЛИ Таблица.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.ПустаяСсылка)
	|   )
	|	И Таблица.ОсновноеИзделиеВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|	И Таблица.ОсновноеИзделиеНоменклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|			ГДЕ
	|				Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|				И ТабличнаяЧасть.НомерСтроки = 1
	|				И (ТабличнаяЧасть.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|					ИЛИ ТабличнаяЧасть.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Таблица
	|ГДЕ
	|	Таблица.ВариантНазначения = ЗНАЧЕНИЕ(Перечисление.ВариантыНазначенияСпецификации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	(Таблица.КлючСвязи = &ПустойКлючСвязи
	|			ИЛИ Таблица.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.ПустаяСсылка)
	|			ИЛИ Таблица.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.Трудозатраты КАК Таблица
	|ГДЕ
	|	Таблица.КлючСвязи = &ПустойКлючСвязи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Таблица
	|ГДЕ
	|	(Таблица.ОсновноеИзделиеНоменклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И Таблица.ОсновноеИзделиеВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))
	|	ИЛИ ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|			ГДЕ
	|				Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|				И ТабличнаяЧасть.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ТабличнаяЧасть.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Таблица
	|ГДЕ
	|	Таблица.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.ВРазработке)
	|	И (
	|		НЕ Таблица.ЕстьУточняемоеОсновноеИзделие И (
	|
	|			ИСТИНА В (
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И ТабличнаяЧасть.ОсновноеИзделиеХарактеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И ВЫБОР
	|						КОГДА ТабличнаяЧасть.ОсновноеИзделиеНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|							ИЛИ ТабличнаяЧасть.ОсновноеИзделиеНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|							ИЛИ ТабличнаяЧасть.ОсновноеИзделиеНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			)
	|		)
	|		ИЛИ НЕ Таблица.ЕстьПараметризацияРесурсов И (
	|		
	|			ИСТИНА В (
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И (
	|						ВЫРАЗИТЬ(ТабличнаяЧасть.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"
	|						ИЛИ ВЫБОР
	|							КОГДА ТабличнаяЧасть.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции)
	|								ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции)
	|								ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ)
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|			
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И (
	|						ВЫРАЗИТЬ(ТабличнаяЧасть.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"
	|						ИЛИ ВЫБОР
	|							КОГДА ТабличнаяЧасть.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции)
	|								ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции)
	|								ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму)
	|									ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ)
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|			
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И (
	|						ВЫРАЗИТЬ(ТабличнаяЧасть.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"
	|						ИЛИ ВЫБОР
	|							КОГДА ТабличнаяЧасть.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции)
	|								ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции)
	|								ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ)
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|			
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.Трудозатраты КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И ВЫРАЗИТЬ(ТабличнаяЧасть.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"
	|				
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|			
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ТабличнаяЧасть
	|					ГДЕ
	|						Таблица.Ссылка = ТабличнаяЧасть.Ссылка.Владелец
	|						И НЕ (ВЫРАЗИТЬ(ТабличнаяЧасть.АлгоритмРасчетаКоличества КАК СТРОКА(100))) = """"
	|						И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|	
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.ЭтапыПроизводства.АльтернативныеВидыРабочихЦентров КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка.Владелец
	|					И НЕ (ВЫРАЗИТЬ(ТабличнаяЧасть.АлгоритмРасчетаКоличества КАК СТРОКА(100))) = """"
	|					И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|			)
	|		)
	|		
	|		ИЛИ НЕ Таблица.ЕстьАвтовыборСпецификацийВПроцессе И (
	|			
	|			ИСТИНА В (
	|	
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И (ТабличнаяЧасть.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
	|                     ИЛИ (ТабличнаяЧасть.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПустаяСсылка) 
	|							И ТабличнаяЧасть.ПроизводитсяВПроцессе 
	|							И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.ИсточникПолученияПолуфабриката) = ТИП(Справочник.РесурсныеСпецификации)
	|					  )
	|                   )
	|					И ТабличнаяЧасть.ИсточникПолученияПолуфабриката В (ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка),
	|																		ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка))
	|			)
	|		)
	|		
	|		ИЛИ НЕ Таблица.ЕстьРасчетВероятности И (
	|			
	|			ИСТИНА В (
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И ТабличнаяЧасть.Вероятность <> 0
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|			
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И ТабличнаяЧасть.ПроцентБрака <> 0
	|			)
	|		)
	|		
	|		ИЛИ НЕ Таблица.ЕстьНекратныйВыпуск И (
	|		
	|			ИСТИНА В (
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И НЕ ((ТабличнаяЧасть.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)) = 1
	|						И ТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук))
	|					И ТабличнаяЧасть.НомерСтроки = 1
	|					И Таблица.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|					И НЕ Таблица.ВыпускПроизвольнымиПорциями
	|			
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|			
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И Таблица.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|				ИМЕЮЩИЕ
	|					СУММА(1) > 1
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|			
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И НЕ ТабличнаяЧасть.ОсновноеИзделиеНоменклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ТабличнаяЧасть.ОсновноеИзделиеКоличествоУпаковок <> 1
	|					И НЕ ((ТабличнаяЧасть.ОсновноеИзделиеКоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1))= 1
	|						И ТабличнаяЧасть.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук))
	|					И Таблица.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|					И НЕ Таблица.ВыпускПроизвольнымиПорциями
	|			)
	|		)
	|		
	|		ИЛИ НЕ Таблица.ЕстьНекратныеНормативыВРЦ И (
	|		
	|			ИСТИНА В (
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.ЭтапыПроизводства КАК ТабличнаяЧасть
	|				ГДЕ
	|					ТабличнаяЧасть.Владелец = Таблица.Ссылка
	|					И НЕ ТабличнаяЧасть.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий В (0, 1)
	|			)
	|		)
	|	)
	|
	|) КАК Таблица
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТабличнаяЧасть.Упаковка",
			"ТабличнаяЧасть.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТабличнаяЧасть.ОсновноеИзделиеУпаковка",
			"ТабличнаяЧасть.ОсновноеИзделиеНоменклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.РесурсныеСпецификации";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	УправлениеПредприятием = Ложь;
	
	ПустойУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Запрос = Новый Запрос(" 
	|ВЫБРАТЬ
	|	ОбновляемыеДанные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСсылкиДляОбработки
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|      
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Ссылка               КАК Спецификация,
	|	ОсновныеСпецификации.Подразделение КАК ПодразделениеДиспетчер
	|ИЗ
	|	РегистрСведений.МоделиФормированияСтоимости КАК ОсновныеСпецификации
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСсылкиДляОбработки КАК ТаблицаСсылок
	|	ПО ОсновныеСпецификации.Спецификация = ТаблицаСсылок.Ссылка
	|
	|ГДЕ
	|	ТаблицаСсылок.Ссылка.ВариантПодбораВДокументы = ЗНАЧЕНИЕ(Перечисление.ВариантыПодбораСпецификацииВДокументы.ПустаяСсылка)
	|;
	|
	|ВЫБРАТЬ
	|	Таблица.ОсновноеИзделиеНоменклатура                 КАК Номенклатура,
	|	Таблица.ОсновноеИзделиеНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСсылкиДляОбработки КАК ТаблицаСсылок
	|		ПО Таблица.Ссылка = ТаблицаСсылок.Ссылка
	|
	|ГДЕ
	|	Таблица.ОсновноеИзделиеНоменклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Таблица.ОсновноеИзделиеВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.ВидНоменклатуры
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСсылкиДляОбработки КАК ТаблицаСсылок
	|		ПО ТабличнаяЧасть.Ссылка = ТаблицаСсылок.Ссылка
	|
	|ГДЕ
	|	ТабличнаяЧасть.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ТабличнаяЧасть.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Ссылка              КАК Ссылка,
	|	ТаблицаСсылок.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВТСсылкиДляОбработки КАК ТаблицаСсылок");
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет(); 
	
	ОсновныеСпецификации = РезультатыЗапроса[1].Выгрузить();
	ОсновныеСпецификации.Индексы.Добавить("Спецификация");
	СтруктураОтбора = Новый Структура("Спецификация");
	
	ВидыНоменклатуры = РезультатыЗапроса[2].Выгрузить();
	ВидыНоменклатуры.Индексы.Добавить("Номенклатура");
	
	
	РеквизитыПартииЗапуска = Новый Массив;
	РеквизитыПартииЗапуска.Добавить("МинимальнаяПартияВыпуска");
	РеквизитыПартииЗапуска.Добавить("ОптимальнаяПартияВыпуска");
	РеквизитыПартииЗапуска.Добавить("ДопустимоеПревышениеОптимальнойПартииВыпуска");
	
	Выборка = РезультатыЗапроса[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			Блокировка.Добавить(ПолноеИмяОбъекта).УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			
			Если Объект <> Неопределено Тогда
				
				ОбъектИзменен = Ложь;
				
				Если Объект.ВариантПодбораВДокументы = Перечисления.ВариантыПодбораСпецификацииВДокументы.ПустаяСсылка() Тогда
					
					Если Объект.Статус = Перечисления.СтатусыСпецификаций.Действует
						И Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка Тогда
						
						СтруктураОтбора.Спецификация = Объект.Ссылка;
						Подразделения = ОсновныеСпецификации.НайтиСтроки(СтруктураОтбора);
						ПодразделенияКоличество = Подразделения.Количество();
						
						Если ПодразделенияКоличество = 0 Тогда
							
							Объект.ВариантПодбораВДокументы = Перечисления.ВариантыПодбораСпецификацииВДокументы.Вручную;
							
						Иначе
							
							Объект.ВариантПодбораВДокументы = Перечисления.ВариантыПодбораСпецификацииВДокументы.Автоматически;
							
							Если ЗначениеЗаполнено(Подразделения[0].ПодразделениеДиспетчер) Тогда
								НаборЗаписей = РегистрыСведений.ЗначенияПараметровНазначенияСпецификаций.СоздатьНаборЗаписей();
								НаборЗаписей.Отбор.Спецификация.Установить(Объект.Ссылка);
								Для Индекс = 1 По ПодразделенияКоличество Цикл
									Запись = НаборЗаписей.Добавить();
									Запись.Спецификация = Объект.Ссылка;
									Запись.ВидПараметра = Перечисления.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер;
									Запись.Значение     = Подразделения[Индекс-1].ПодразделениеДиспетчер;
									Если ПодразделенияКоличество > 1 Тогда
										Запись.Условие  = "ВСписке";
										Запись.НомерВСписке = Индекс;
									Иначе
										Запись.Условие  = "Равно";
									КонецЕсли;
								КонецЦикла;
								ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,,, Истина);
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						Объект.ВариантПодбораВДокументы = Перечисления.ВариантыПодбораСпецификацииВДокументы.Вручную;
					КонецЕсли;
					
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
				Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка 
					И Объект.ОсновноеИзделиеВидНоменклатуры.Пустая()
					И Объект.ОсновноеИзделиеНоменклатура.Пустая() Тогда
						
					СтруктураДанных = Новый Структура("ВидНоменклатуры,Номенклатура,Характеристика,Упаковка,КоличествоУпаковок");
					Если Объект.ВыходныеИзделия.Количество() > 0 Тогда
						ЗаполнитьЗначенияСвойств(СтруктураДанных, Объект.ВыходныеИзделия[0]);
					КонецЕсли;
					
					Для каждого КлючИЗначение Из СтруктураДанных Цикл
						РеквизитОбъекта = "ОсновноеИзделие"+КлючИЗначение.Ключ;
						Если Объект[РеквизитОбъекта] <> КлючИЗначение.Значение Тогда
							Объект[РеквизитОбъекта] = КлючИЗначение.Значение;
							ОбъектИзменен = Истина;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.УдалитьХарактеристика Тогда
					
					Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.Номенклатура;
					ОбъектИзменен = Истина;
					
				ИначеЕсли Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.ПустаяСсылка() Тогда
					
					Если НЕ УправлениеПредприятием ИЛИ (Объект.УдалитьИспользоватьНесколькоВыходныхИзделий 
							И Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка) Тогда
						Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры;
					Иначе
						Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.Номенклатура;
					КонецЕсли;
					
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
				Если Объект.ВыпускПроизвольнымиПорциями
						И НЕ Объект.НастройкиПартииЗапускаОбновлены
						И НЕ Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.ВидНоменклатуры
						И (Объект.МинимальнаяПартияВыпуска <> 0
							ИЛИ Объект.ОптимальнаяПартияВыпуска <> 0
							ИЛИ Объект.ДопустимоеПревышениеОптимальнойПартииВыпуска <> 0) Тогда
						
						ДанныеОсновногоИзделия = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(Объект.Ссылка);
						
						Для каждого ИмяРеквизита Из РеквизитыПартииЗапуска Цикл
							Если Объект[ИмяРеквизита] <> 0 Тогда
								Объект["Удалить"+ИмяРеквизита] = Объект[ИмяРеквизита];
								Объект[ИмяРеквизита] = Окр(Объект[ИмяРеквизита]
									* ДанныеОсновногоИзделия.Количество, ?(ДанныеОсновногоИзделия.ЕдиницаИзмеренияШтучная, 0, 3));
							КонецЕсли;
						КонецЦикла;
						
						Объект.НастройкиПартииЗапускаОбновлены = Истина;
						ОбъектИзменен = Истина;
						
				КонецЕсли;
				
				Если Объект.ОсновноеИзделиеНоменклатура <> Справочники.Номенклатура.ПустаяСсылка()
					И Объект.ОсновноеИзделиеВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка() Тогда 
					
					НайденнаяСтрока = ВидыНоменклатуры.Найти(Объект.ОсновноеИзделиеНоменклатура, "Номенклатура");
					Если НайденнаяСтрока <> Неопределено Тогда
						Объект.ОсновноеИзделиеВидНоменклатуры = НайденнаяСтрока.ВидНоменклатуры;
						ОбъектИзменен = Истина;
					КонецЕсли; 
					
				КонецЕсли;
				
				Если Объект.ВыходныеИзделия.Найти(Справочники.ВидыНоменклатуры.ПустаяСсылка(), "ВидНоменклатуры") <> Неопределено Тогда
					Для каждого Строка Из Объект.ВыходныеИзделия Цикл
						Если Строка.Номенклатура <> Справочники.Номенклатура.ПустаяСсылка()
							И Строка.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка() Тогда
								
							НайденнаяСтрока = ВидыНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
							Если НайденнаяСтрока <> Неопределено Тогда
								Строка.ВидНоменклатуры = НайденнаяСтрока.ВидНоменклатуры;
								ОбъектИзменен = Истина;
							КонецЕсли;
								
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для каждого Строка Из Объект.ВыходныеИзделия Цикл
					Если Строка.КлючСвязи = ПустойУИД Тогда
						Строка.КлючСвязи = Новый УникальныйИдентификатор;
						ОбъектИзменен    = Истина;
					КонецЕсли;
					Если Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ПустаяСсылка() Тогда
						Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ;
						ОбъектИзменен = Истина;
					КонецЕсли;
					Если Строка.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПустаяСсылка() Тогда
						Строка.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ;
						ОбъектИзменен = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Для каждого Строка Из Объект.Трудозатраты Цикл
					Если Строка.КлючСвязи = ПустойУИД Тогда
						Строка.КлючСвязи = Новый УникальныйИдентификатор;
						ОбъектИзменен    = Истина;
					КонецЕсли;
				КонецЦикла;
				
				
				ДанныеДоИзменения = Новый Структура("
					|ЕстьУточняемоеОсновноеИзделие,
					|ЕстьПараметризацияРесурсов,
					|ЕстьАвтовыборСпецификацийВПроцессе,
					|ЕстьРасчетВероятности,
					|ЕстьНекратныйВыпуск,
					|ЕстьНекратныеНормативыВРЦ");
				ЗаполнитьЗначенияСвойств(ДанныеДоИзменения, Объект);
				
				Объект.ЗаполнитьСлужебныеРеквизитыПовтИсп();
				
				Если Объект.ЕстьУточняемоеОсновноеИзделие         <> ДанныеДоИзменения.ЕстьУточняемоеОсновноеИзделие
					ИЛИ Объект.ЕстьПараметризацияРесурсов         <> ДанныеДоИзменения.ЕстьПараметризацияРесурсов
					ИЛИ Объект.ЕстьАвтовыборСпецификацийВПроцессе <> ДанныеДоИзменения.ЕстьАвтовыборСпецификацийВПроцессе
					ИЛИ Объект.ЕстьРасчетВероятности              <> ДанныеДоИзменения.ЕстьРасчетВероятности
					ИЛИ Объект.ЕстьНекратныйВыпуск                <> ДанныеДоИзменения.ЕстьНекратныйВыпуск
					ИЛИ Объект.ЕстьНекратныеНормативыВРЦ          <> ДанныеДоИзменения.ЕстьНекратныеНормативыВРЦ Тогда
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Объект.ОсновноеИзделиеЭтап.Пустая() Тогда
					
					ПервыйЭтап    = Неопределено;
					ПоследнийЭтап = Неопределено;
					Объект.ПолучитьПервыйИПоследнийЭтап(ПервыйЭтап, ПоследнийЭтап);
					Объект.ОсновноеИзделиеЭтап = ПервыйЭтап;
					
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию22(Параметры) Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыВыборкиДанных = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ПараметрыВыборкиДанных.ВыбиратьПорциями = Ложь;
	
	РезультатСпецификации = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, 
		"Справочник.РесурсныеСпецификации", 
		МенеджерВременныхТаблиц, 
		ПараметрыВыборкиДанных
	);
	
	РезультатЭтапыПроизводства = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, 
		"Справочник.ЭтапыПроизводства", 
		МенеджерВременныхТаблиц, 
		ПараметрыВыборкиДанных
	);
		
	ОбработкаЗавершена = НЕ РезультатСпецификации.ЕстьДанныеДляОбработки
		И НЕ РезультатЭтапыПроизводства.ЕстьДанныеДляОбработки;
		
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	Если ОбработкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РезультатСпецификации.ЕстьЗаписиВоВременнойТаблице
		И НЕ РезультатЭтапыПроизводства.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыДляОбработки.Ссылка.Владелец КАК Спецификация,
		|	ЭтапыДляОбработки.Ссылка          КАК Этап
		|ИЗ
		|	" + РезультатЭтапыПроизводства.ИмяВременнойТаблицы + " КАК ЭтапыДляОбработки
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектыДляОбработки.Ссылка КАК Ссылка
		|ИЗ
		|	" + РезультатСпецификации.ИмяВременнойТаблицы + " КАК ОбъектыДляОбработки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыПроизводства.Владелец КАК Ссылка
		|ИЗ
		|	" + РезультатЭтапыПроизводства.ИмяВременнойТаблицы + " КАК ОбъектыДляОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ПО ОбъектыДляОбработки.Ссылка = ЭтапыПроизводства.Ссылка";
	
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.СтатусыСпецификаций.Действует);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ЭтапыДляОбработки = РезультатЗапроса[0].Выгрузить();
	ЭтапыДляОбработки.Индексы.Добавить("Спецификация");
	
	УдалитьОтмененныеЭтапыИзОчередиДляОбработки(ЭтапыДляОбработки);
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.РесурсныеСпецификации");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ЭтапыПроизводства");
			ЭлементБлокировки.УстановитьЗначение("Владелец", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДанныеОбъекта = Выборка.Ссылка.ПолучитьОбъект();
			Если ДанныеОбъекта = Неопределено Тогда
				ОтметитьВыполнениеОбработкиЭтапов(ЭтапыДляОбработки, Выборка.Ссылка);
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОтборСтрок = Новый Структура("СпособПолученияМатериала",Перечисления.СпособыПолученияМатериаловВСпецификации.ПустаяСсылка());
			
			Для Каждого Строка Из ДанныеОбъекта.МатериалыИУслуги.НайтиСтроки(ОтборСтрок) Цикл
				Если Строка.ПроизводитсяВПроцессе Тогда
					Если ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
						Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
					Иначе
						Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе;
					КонецЕсли;
				Иначе
					Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
				КонецЕсли;
			КонецЦикла;
			
			Если ДанныеОбъекта.Статус = Перечисления.СтатусыСпецификаций.Действует Тогда
				
				Справочники.ЭтапыПроизводства.РассчитатьДлительностьПроизводстваДляПереходаНаНовуюВерсию(Выборка.Ссылка);
				
			КонецЕсли;
			
			ОтметитьВыполнениеОбработкиЭтапов(ЭтапыДляОбработки, Выборка.Ссылка);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = НСтр("ru='Не удалось обработать объект: %Ссылка% по причине: %Причина%';uk='Не вдалося обробити об''єкт: %Ссылка% по причині: %Причина%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Ссылка%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), 
				Выборка.Ссылка,
				ТекстОшибки
			);
			
		КонецПопытки;
		
	КонецЦикла;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить("Справочник.РесурсныеСпецификации");
	МассивОбъектов.Добавить("Справочник.ЭтапыПроизводства");
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, МассивОбъектов);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию22(Параметры) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МатериалыИУслуги.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыИУслуги
		|ГДЕ
		|	МатериалыИУслуги.СпособПолученияМатериала = &ПустойСпособПолученияМатериала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭтапыПроизводства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец.Статус = &СтатусДействует
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления
		|	И НЕ ЭтапыПроизводства.ПодходитНовойКонцепции");
	
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.СтатусыСпецификаций.Действует);
	Запрос.УстановитьПараметр("ПустойСпособПолученияМатериала", Перечисления.СпособыПолученияМатериаловВСпецификации.ПустаяСсылка());
	
	СписокСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокСсылок);
	
КонецПроцедуры

Процедура ОтметитьВыполнениеОбработкиЭтапов(ЭтапыДляОбработки, Спецификация)
	
	Отбор = Новый Структура("Спецификация",Спецификация);
	КоллекцияСтрок = ЭтапыДляОбработки.НайтиСтроки(Отбор);
	Для каждого Строка Из КоллекцияСтрок Цикл
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Строка.Этап);
		ЭтапыДляОбработки.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьОтмененныеЭтапыИзОчередиДляОбработки(ЭтапыДляОбработки)
	
	Для каждого Строка Из ЭтапыДляОбработки Цикл
		
		Если ЗначениеЗаполнено(Строка.Спецификация) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Строка.Этап);
			
		Исключение
			
			ТекстСообщения = НСтр("ru='Не удалось обработать объект: %Ссылка% по причине: %Причина%';uk='Не вдалося обробити об''єкт: %Ссылка% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка.Этап);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Строка.Этап.Метаданные(), Строка.Этап, ТекстСообщения);
			
		КонецПопытки;
		ЭтапыДляОбработки.Удалить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию24(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ (
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Реквизиты
	|ГДЕ
	|	Реквизиты.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.ПустаяСсылка)
	|	И Не Реквизиты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Реквизиты
	|ГДЕ
	|	Реквизиты.СпособРаспределенияЗатратНаВыходныеИзделия = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПустаяСсылка)
	|	И Не Реквизиты.ЭтоГруппа
	|
	|) КАК Таблица
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|ГДЕ
	|	(РесурсныеСпецификацииВыходныеИзделия.КлючСвязи = &ПустойКлючСвязи
	|			ИЛИ РесурсныеСпецификацииВыходныеИзделия.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.ПустаяСсылка)
	|			ИЛИ РесурсныеСпецификацииВыходныеИзделия.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК РесурсныеСпецификацииВозвратныеОтходы
	|ГДЕ
	|	(РесурсныеСпецификацииВозвратныеОтходы.КлючСвязи = &ПустойКлючСвязи
	|			ИЛИ РесурсныеСпецификацииВозвратныеОтходы.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.ПустаяСсылка)
	|			ИЛИ РесурсныеСпецификацииВозвратныеОтходы.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РесурсныеСпецификацииМатериалыИУслуги.Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ОтборПоСвойствам КАК РесурсныеСпецификацииОтборПоСвойствам
	|		ПО РесурсныеСпецификацииМатериалыИУслуги.Ссылка = РесурсныеСпецификацииОтборПоСвойствам.Ссылка
	|			И РесурсныеСпецификацииМатериалыИУслуги.УдалитьОтборСвойство = РесурсныеСпецификацииОтборПоСвойствам.Свойство
	|			И РесурсныеСпецификацииМатериалыИУслуги.КлючСвязи = РесурсныеСпецификацииОтборПоСвойствам.КлючСвязи
	|ГДЕ
	|	РесурсныеСпецификацииМатериалыИУслуги.УдалитьОтборСвойство <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
	|	И РесурсныеСпецификацииОтборПоСвойствам.Свойство ЕСТЬ NULL
	|
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РесурсныеСпецификацииСоответствиеСвойств.Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.СоответствиеСвойств КАК РесурсныеСпецификацииСоответствиеСвойств
	|ГДЕ
	|	РесурсныеСпецификацииСоответствиеСвойств.СпособПодбораЗначения = ЗНАЧЕНИЕ(Перечисление.СпособыПодбораЗначенияСвойстваНоменклатуры.ПустаяСсылка)
	|
	|");
	
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию24(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.РесурсныеСпецификации";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВТСсылкиДляОбработки";
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь,
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры
	);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ПустойУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	ИспользоватьУправлениеПроизводством.Значение КАК ИспользоватьНесколькоВыходныхИзделий
	|ИЗ
	|	ВТСсылкиДляОбработки КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьУправлениеПроизводством КАК ИспользоватьУправлениеПроизводством
	|		ПО (ИСТИНА)");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			Блокировка.Добавить(ПолноеИмяОбъекта).УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			
			Если Объект <> Неопределено Тогда
				
				ОбъектИзменен = Ложь;
				
				Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.ПустаяСсылка() Тогда
					Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка;
					Объект.УдалитьИспользоватьНесколькоВыходныхИзделий = Выборка.ИспользоватьНесколькоВыходныхИзделий ИЛИ (Объект.ВыходныеИзделия.Количество() > 1);
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Объект.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПустаяСсылка() Тогда
					Объект.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Для каждого ТабличнаяЧасть Из СтрРазделить("ВыходныеИзделия,ВозвратныеОтходы,МатериалыИУслуги,Трудозатраты",",") Цикл
					Для каждого Строка Из Объект[ТабличнаяЧасть] Цикл
						
						Если Строка.КлючСвязи = ПустойУИД Тогда
							Строка.КлючСвязи = Новый УникальныйИдентификатор;
							ОбъектИзменен    = Истина;
						КонецЕсли;
						
						Если (ТабличнаяЧасть = "МатериалыИУслуги")
							И ЗначениеЗаполнено(Строка.УдалитьОтборСвойство) 
							И Объект.ОтборПоСвойствам.Найти(Строка.КлючСвязи, "КлючСвязи") = Неопределено Тогда
							
							НоваяСтрока = Объект.ОтборПоСвойствам.Добавить();
							НоваяСтрока.КлючСвязи = Строка.КлючСвязи;
							НоваяСтрока.Свойство  = Строка.УдалитьОтборСвойство;
							НоваяСтрока.Условие   = "Равно";
							НоваяСтрока.Значение  = Строка.УдалитьОтборЗначениеСвойства;
							
							ОбъектИзменен = Истина;
							
						КонецЕсли;
						
						Если ТабличнаяЧасть <> "Трудозатраты" Тогда
							Если Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ПустаяСсылка() Тогда
								Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ;
								ОбъектИзменен = Истина;
							КонецЕсли;
							
							Если Строка.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПустаяСсылка() Тогда
								Строка.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ;
								ОбъектИзменен = Истина;
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
				НайденныеСтроки = Объект.СоответствиеСвойств.НайтиСтроки(
					Новый Структура("СпособПодбораЗначения", 
						Перечисления.СпособыПодбораЗначенияСвойстваНоменклатуры.ПустаяСсылка()
					)
				);
					
				Для каждого Строка Из НайденныеСтроки Цикл
					
					Если Объект.МатериалыИУслуги.Найти(Строка.КлючСвязи, "КлючСвязи") = Неопределено Тогда
						Объект.СоответствиеСвойств.Удалить(Строка);
					ИначеЕсли ЗначениеЗаполнено(Строка.СвойствоПродукции) Тогда
						Строка.СпособПодбораЗначения = Перечисления.СпособыПодбораЗначенияСвойстваНоменклатуры.ПоСвойству;
					Иначе
						Объект.СоответствиеСвойств.Удалить(Строка);
					КонецЕсли;
					
					ОбъектИзменен = Истина;
					
				КонецЦикла;
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;

			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли
