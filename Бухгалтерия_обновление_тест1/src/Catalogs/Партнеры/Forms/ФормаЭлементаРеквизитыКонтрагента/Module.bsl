#Область ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ЦветГиперссылки        = ЦветаСтиля.ЦветГиперссылки;
	УпрощенныйВводДоступен = ПартнерыИКонтрагенты.УпрощенныйВводДоступен() ИЛИ ТолькоПросмотр;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.ЮрФизЛицо
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
			|		ПО Контрагенты.Партнер = Партнеры.Ссылка
			|ГДЕ
			|	Партнеры.Ссылка = &ЗначениеЗаполнения";
			
			Запрос.УстановитьПараметр("ЗначениеЗаполнения", Параметры.ЗначениеКопирования);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЮрФизЛицо =  Выборка.ЮрФизЛицо;
			Иначе
				ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			КонецЕсли;
			
		Иначе
			ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;
		
		ПриСозданииИЧтенииНаСервере();
		
	КонецЕсли;
	
	ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Объект.Ссылка);
	
	Если ОтгрузкаЗапрещена Тогда
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаЗапрещена;
	Иначе
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаРазрешена;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Версионирование
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Версионирование
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ДополнительныеПараметрыКИ = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ДополнительныеПараметрыКИ.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	ДополнительныеПараметрыКИ.Вставить("ПоложениеЗаголовкаКИ", ПоложениеЗаголовкаЭлементаФормы.Лево);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметрыКИ);
	
	ДополнительныеПараметрыКИ.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформацияКонтрагента");
	ДополнительныеПараметрыКИ.Вставить("ПоложениеЗаголовкаКИ", ПоложениеЗаголовкаЭлементаФормы.Лево);
	ДополнительныеПараметрыКИ.Вставить("СкрываемыеВиды",  ОбщегоНазначенияУТПовтИсп.МассивИсключаемыхВидовКИКонтрагентаДляВыводаВФормеПартнера());
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, КонтрагентПартнера, ДополнительныеПараметрыКИ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры) 
		ИЛИ ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры) Тогда
		УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ПодготовитьОповещения(ЭтаФорма, Параметры, Ложь);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	
	ЮридическоеФизическоеЛицо = ?(Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания, 
				Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
				Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	
	
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПартнерыИКонтрагенты.ЗаполнитьДанныеКонтрагентаПартнера(ЭтотОбъект, ТекущийОбъект.Ссылка);
	
	ПриСозданииИЧтенииНаСервере();
	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, КонтрагентПартнера, "ГруппаКонтактнаяИнформацияКонтрагента");
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
		ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
		
		ОбновитьЗапретОтгрузки(Объект.Ссылка, ОтгрузкаЗапрещена);
		УстановитьДоступностьЗапретаОтгрузки();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// Обработчик механизма "Контактная информация"
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	ЗаписатьКонтрагентаПартнера();
	УправлениеДоступностью(ЭтаФорма);
	УстановитьЗаголовок();
	
	

	ПартнерыИКонтрагентыЛокализация.ПослеЗаписиНаСервереФормаЭлементаРеквизитыКонтрагента(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ПередЗаписьюКонтрагент(Отказ, ПараметрыЗаписи, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВзаимодействияКлиент.КонтактПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи, "Партнеры");
	Оповестить("Запись_Партнеры", Объект.Ссылка);
	ОповеститьОбИзменении(КонтрагентПартнера);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПартнерыИКонтрагенты.ПроверитьКорректностьЗаполненияКонтрагента(ЭтаФорма, КонтрагентПартнера, Отказ);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	

	УстановитьЗаголовокКодаПоЕДРПОУ();
    Элементы.ДекорацияЗаполнитьПоЕГРПОУ.Видимость=Ложь;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаКаналПервичногоИнтересаПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры 

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаНаименованиеПриИзменении(ЭтаФорма,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагПризнакПартнераПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаФлагПризнакПартнераПриИзменении(ЭтаФорма, Элемент);
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	УстановитьДоступностьЗапретаОтгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаКомментарииНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесРегионПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаБизнесРегионПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	Если ВидКонтрагента = "ОбособленноеПодразделение" Тогда
		
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		ОбособленноеПодразделение = Истина;
		
		Если ГоловнойКонтрагент = КонтрагентПартнера Тогда
			ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо." + ВидКонтрагента);
		ОбособленноеПодразделение = Ложь;
		
		Если ГоловнойКонтрагент <> КонтрагентПартнера Тогда
			ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	Иначе
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания");
	КонецЕсли;
	

	УстановитьЗаголовокКодаПоЕДРПОУ();
	
	УправлениеДоступностью(ЭтотОбъект);
	ОтключитьОтметкуНезаполненного();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ОтключитьОтметкуНезаполненного();
    УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(Объект.Наименование, Объект.НаименованиеПолное);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	Отбор = Новый Структура();
	Отбор.Вставить("Назначение",ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки"));
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ШаблонЭтикетки = Неопределено;

	ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.ФормаВыбора",ПараметрыФормы,,,,, Новый ОписаниеОповещения("ШаблонЭтикеткиНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ШаблонЭтикетки = Результат;
    Если ШаблонЭтикетки=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Объект.ШаблонЭтикетки =  ШаблонЭтикетки;

КонецПроцедуры

&НаКлиенте
Процедура ПереходКИсторииНаименованияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИсторияНаименований" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущееНаименованиеПолное", Объект.НаименованиеПолное);
		ПараметрыФормы.Вставить("ИсторияНаименований", ИсторияНаименований);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыФормы.Вставить("ЮрФизлицо", ЮрФизЛицо);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИсторияНаименованийПослеЗакрытия", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииНаименований", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытии);

	КонецЕсли;
	
КонецПроцедуры





&НаКлиенте
Процедура ПлательщикНДСПриИзменении(Элемент)
	УправлениеДоступностью(ЭтотОбъект);
КонецПроцедуры

#Область УниверсальныеОбработчикиСобытий

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ОкончаниеВводаТекста_Контрагент(Элемент,
		Текст,
		ДанныеВыбора,
		Параметры,
		СтандартнаяОбработка,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент)
	ПартнерыИКонтрагентыЛокализацияКлиент.ПриИзмененииРеквизита_Контрагент(
		Элемент,
		ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиФормы(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ОбработкаНавигационнойСсылкиФормы_Контрагент(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииИзмененияРеквизитаЛокализации(ИмяЭлемента, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;
	
	Если ИмяЭлемента = "ГоловнойКонтрагент" Тогда
		ГоловнойКонтрагентПриИзменении(Элементы.ГоловнойКонтрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ПараметрыОбработки)
	
	ПартнерыИКонтрагентыЛокализация.ПриОкончанииИзмененияРеквизита_Контрагент(ИмяЭлемента, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЕГРПОУ(Команда)
	
	Подключаемый_ВыполнитьКомандуЛокализации(Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

// Обработчик события начало выбора подсистемы "Контактная информация"
// 
// Параметры:
// 	Элемент              - ПолеФормы - элемент формы, в котором произошло событие.
// 	ДанныеВыбора         - Структура - данные, используемые для выбора.
// 	СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", СтранаРегистрации);
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки <> Неопределено
		И ДанныеСтроки.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента") Тогда
			ПараметрыОткрытия.Вставить("РазрешитьВводАдресаВСвободнойФорме", Ложь);
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

// Обработчик очистки контактной информации
// 
// Параметры:
// 	Элемент              - ПолеФормы - элемент формы, содержащей контактную информацию.
// 	СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

// Обработчик выполнения команды подсистемы "Контактная информация"
// 
// Параметры:
// 	Команда - КомандаФормы -выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события обработка выбора подсистемы "Контактная информация"
// 
// Параметры:
// 	Элемент              - ПолеФормы - элемент формы, в котором произошло событие.
// 	ВыбранноеЗначение    - Структура - выбранная контактная информация.
// 	СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЛокализации(Команда)
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ВыполнитьКомандуЛокализации(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыЛокализации(ИмяКоманды, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ПараметрыОбработки)
	
	ПартнерыИКонтрагентыЛокализация.ВыполнитьКомандуЛокализации(ЭтаФорма, ИмяКоманды, ПараметрыОбработки);
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуСегментовЗапретаОтгрузки(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Данные еще не записаны.
|Переход к запрету отгрузки возможен только после записи данных.
|Данные будут записаны.'
|;uk='Дані ще не записані.
|Перехід до заборони відвантаження можливий тільки після запису даних.
|Дані будуть записані.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьФормуСегментовЗапретаОтгрузкиЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСегментовЗапретаОтгрузкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭлементЗаписан = Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Ссылка));
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПартнерыИКонтрагентыЛокализация.УстановитьУсловноеОформлениеКонтрагент(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	ПартнерыИКонтрагентыЛокализацияКлиентСервер.УправлениеЭлементамиЮридическихРеквизитов(Форма);
	ПартнерыИКонтрагентыЛокализацияКлиентСервер.УправлениеДоступностьюКонтрагент(Форма);
	
	ПартнерыИКонтрагентыЛокализацияКлиентСервер.ОбновитьСтрокиИсторииНаименований(Форма.ИсторияНаименований,
		Форма.ПереходКИсторииНаименования,
		Форма.ЦветГиперссылки);
	СамообслуживаниеКлиентСервер.УправлениеСтраницамиЮрФизЛицоПриИзменении(Форма, Форма.ЮрФизЛицо);

	Форма.Элементы.НаименованиеПолноеКомпания.ТолькоПросмотр    = Форма.ИсторияНаименований.Количество() > 1;
	Форма.Элементы.НаименованиеПолноеЧастноеЛицо.ТолькоПросмотр = Форма.ИсторияНаименований.Количество() > 1;
	
	Если Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент")
		И Форма.СтранаРегистрации = ПартнерыИКонтрагентыЛокализацияКлиентСервер.СтранаВеденияУчета() Тогда
		
		Форма.СтранаРегистрации = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтрагентаПартнера()
	
	СоздатьКонтрагента = КонтрагентПартнера.Пустая();
	
	Если СоздатьКонтрагента Тогда
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	Иначе
		КонтрагентОбъект = КонтрагентПартнера.ПолучитьОбъект();
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, КонтрагентОбъект);
	
	КонтрагентОбъект.Наименование = Объект.Наименование;
	КонтрагентОбъект.НаименованиеПолное        = Объект.НаименованиеПолное;
	КонтрагентОбъект.НаименованиеМеждународное = НаименованиеМеждународное;
	КонтрагентОбъект.Партнер                   = Объект.Ссылка;
	КонтрагентОбъект.ЮрФизЛицо                 = ЮрФизЛицо;
	КонтрагентОбъект.ОбособленноеПодразделение = ОбособленноеПодразделение;
    КонтрагентОбъект.СтранаРегистрации         = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, СтранаРегистрации, Справочники.СтраныМира.Украина);
	КонтрагентОбъект.РегистрационныйНомер      = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, РегистрационныйНомер, "");
	КонтрагентОбъект.НалоговыйНомер            = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, НалоговыйНомер, "");
	
	КонтрагентОбъект.ИсторияНаименований.Загрузить(ИсторияНаименований.Выгрузить());
	
	Если Не ЗначениеЗаполнено(ГоловнойКонтрагент) И Не ОбособленноеПодразделение Тогда
		
		Если СоздатьКонтрагента Тогда
			НоваяСсылка = Справочники.Контрагенты.ПолучитьСсылку();
			КонтрагентОбъект.УстановитьСсылкуНового(НоваяСсылка);
			ГоловнойКонтрагент = КонтрагентОбъект.ПолучитьСсылкуНового();
		Иначе
			ГоловнойКонтрагент = КонтрагентПартнера;
		КонецЕсли;
		
	КонецЕсли;
	КонтрагентОбъект.ГоловнойКонтрагент = ГоловнойКонтрагент;
	ПартнерыИКонтрагенты.ЗаполнитьКонтактнуюИнформациюКонтрагентаПартнера(КонтрагентОбъект, ЭтотОбъект, Объект.КонтактнаяИнформация, Ложь);
	ПартнерыИКонтрагентыЛокализация.ПередЗаписьюКонтрагентаПартнера(КонтрагентОбъект, ЭтаФорма);
	КонтрагентОбъект.Записать();
	
	КонтрагентПартнера = КонтрагентОбъект.Ссылка;
	
КонецПроцедуры 

&НаСервере
Процедура ПриСозданииИЧтенииНаСервере()
	
	ПартнерыИКонтрагентыЛокализация.ПриЧтенииСозданииНаСервереКонтрагент(ЭтаФорма);
	ПравоИзмененияОбъекта = ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры);
	
	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		ЮрФизЛицо = ?(Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания, 
				Перечисления.ЮрФизЛицо.ЮрЛицо,
				Перечисления.ЮрФизЛицо.ФизЛицо);
	КонецЕсли;
	
	Если ОбособленноеПодразделение Тогда
		ВидКонтрагента = "ОбособленноеПодразделение";
	ИначеЕсли ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		ВидКонтрагента = ОбщегоНазначения.ИмяЗначенияПеречисления(ЮрФизЛицо);
	КонецЕсли;
	
	УправлениеДоступностью(ЭтаФорма);
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЗапретаОтгрузки()
	
	Если ИспользоватьЗапретОтгрузки И Объект.Клиент Тогда
		Если ОтгрузкаЗапрещена Тогда
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаЗапрещена;
		Иначе
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаРазрешена;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаПустая;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьЗапретОтгрузки(Партнер, ОтгрузкаЗапрещена)
	
	ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Партнер);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()

	Если Объект.Ссылка.Пустая() Тогда
		
		Заголовок = НСтр("ru='Контрагент (создание)';uk='Контрагент (створення)'");
		
	Иначе
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (Контрагент)';uk='%1 (Контрагент)'"), Объект.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПериодическиеРеквизиты

&НаКлиенте
Процедура ИсторияНаименованийПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Перем ТекстСообщения;
	
	ОчиститьСообщения();
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("ИсторияНаименований") Тогда
		
		Модифицированность = Истина;
		НоваяИсторияНаименований = Результат.ИсторияНаименований;
		НоваяИсторияНаименований.Сортировать("Период");
	
		ИсторияНаименований.Очистить();
		Если НоваяИсторияНаименований.Количество() > 1 Тогда
			Для Каждого СтрокаИстории Из НоваяИсторияНаименований Цикл
				ЗаписьИстории = ИсторияНаименований.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, СтрокаИстории);
			КонецЦикла;
		КонецЕсли;
		
		НовоеТекущееНаименование = НоваяИсторияНаименований[НоваяИсторияНаименований.Количество()-1].НаименованиеПолное;
		
		Если НовоеТекущееНаименование <> Объект.НаименованиеПолное Тогда
			
			Объект.НаименованиеПолное = НовоеТекущееНаименование;
			
		КонецЕсли;
		
		УправлениеДоступностью(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область Локализация


// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом


&НаКлиенте
Процедура УстановитьЗаголовокКодаПоЕДРПОУ()
    
    
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") ИЛИ ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		ЗаголовокКода  = НСтр("ru='Код по ЕДРПОУ';uk='Код за ЄДРПОУ'");
		ПодсказкаВвода = НСтр("ru='Введите код ЕДРПОУ 8 цифр';uk='Введіть код ЄДРПОУ 8 цифр'");
	Иначе
		ЗаголовокКода = НСтр("ru='Код по ДРФО';uk='Код за ДРФО'");
        ПодсказкаВвода = НСтр("ru='Введите код ДРФО 10 цифр';uk='Введіть код ДРФО 10 цифр'")
                         + Символы.ПС
                         + НСтр("ru='или серию и номер паспорта старого образца - 2 буквы и 6 цифр, без пробела между серией и номером';uk='або серію та номер паспорта старого зразка - 2 літери і 6 цифр, без пробілу між серією та номером'") 
                         + Символы.ПС
                         + НСтр("ru='или номер паспорта нового образца - 9 цифр.';uk='або номер паспорта нового зразка - 9 цифр.'") 
                         + Символы.ПС
                         ;
	КонецЕсли;
		
	Элементы.КодПоЕДРПОУ.Заголовок      = ЗаголовокКода;
	Элементы.КодПоЕДРПОУ.ПодсказкаВвода = ПодсказкаВвода;
	
КонецПроцедуры

#Область Пактум

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	РезультатВыполнения = Пактум_Сервер.ФоновоеЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		Пактум_Клиент.ВыполнитьЗаполнениеРеквизитовПоЕДРПОУ(ЭтаФорма, РезультатВыполнения.РеквизитыКонтрагента);
        Пактум_Клиент.РазблокироватьФорму(ЭтаФорма);
    Иначе
        Пактум_КоличествоПроверок_ФоновогоЗадания = Пактум_КоличествоПроверок_ФоновогоЗадания + 1;
		Если Пактум_КоличествоПроверок_ФоновогоЗадания >= 21 Тогда 	//3 мин + 30 сек
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
    		    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
    			    НСтр("ru='Заполнить карточку контрагента с ЕДРПОУ %1 не удалось.';uk='Заповнити картку контрагента за ЄДРПОУ %1 не вдалося.'"),
    			    КодПоЕДРПОУ
                ),
                , 
                "КодПоЕДРПОУ"
            );
			Пактум_Клиент.РазблокироватьФорму(ЭтаФорма);
		Иначе
    		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
    		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
        КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
