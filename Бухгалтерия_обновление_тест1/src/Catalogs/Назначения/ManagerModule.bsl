#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ВыборНазначенийВДокументах

// Возвращает структуру параметров для формирования запроса доступных назначений
//
//	Возвращаемое значение:
//		СтруктураПараметров - Структура - текст запроса.
//
Функция ПараметрыФормированияЗапросаДоступныхНазначений() Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("РежимВыбора");
	СтруктураПараметров.Вставить("ВидОперации");	
	СтруктураПараметров.Вставить("УчестьУжеПодобранные", Ложь);
	СтруктураПараметров.Вставить("ПоНесколькимТоварам", Ложь);
	СтруктураПараметров.Вставить("УпорядочитьПоДатеЗаказаНазначения", Ложь);
	СтруктураПараметров.Вставить("Источник");

	Возврат СтруктураПараметров;
	
КонецФункции

// Шаблон настройки формы выбора назначений.
// Для отображения колонок, например "Потребность" или "В наличии" необходимо
// подключить соответствующее описание колонок с помощью метода ДобавитьОписаниеКолонок.
// 
// Возвращаемое значение:
//   - Структура - содержит ключи:
//   	* ОписанияКолонок  - Массив - структуры, определяемые методом МакетОписанияКолонок.
//   	* Заголовок        - Строка - переопределяемый заголовок формы выбора назначений.
//   	* ШаблонНазначения - Массив - структуры отборов по полю элемента справочника Назначения,
//   							несколько шаблонов применяются если есть несколько путей к полю Назначение.
//
// Пример функции встраивающей форму выбора назначений в документ:
// 
// 	Функция МакетФормыВыбораНазначений() Экспорт
// 		МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
// 		ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
// 		
// 		ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.Назначение");
// 		ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии").Пометка = Истина;
// 		ОписаниеКолонок.ПутиКДанным.Номенклатура   = "Объект.Товары.Номенклатура";
// 		ОписаниеКолонок.ПутиКДанным.Характеристика = "Объект.Товары.Характеристика";
// 		ОписаниеКолонок.ПутиКДанным.Склад          = "Объект.Отправитель";
// 		
// 		Возврат МакетФормы;
// 	КонецФункции
// 
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Новый Структура();
	МакетФормы.Вставить("ОписанияКолонок", Новый Массив);
	МакетФормы.Вставить("Заголовок");
	
	МакетФормы.Вставить("ШаблоныНазначений", Новый Массив);
	
	Возврат МакетФормы;
	
КонецФункции

// Возвращает структуру, накладывающую условия на значения
// реквизитов элементов справочника Назначения.
//
// Параметры:
//  МакетФормы - Структура - определена в методе МакетФормыВыбораНазначений. Возвращаемое значение
//  						 текущей функции будет помещено в ключ "ШаблоныНазначений" макета формы.
// 
// Возвращаемое значение:
//   - Структура - 
//   	* ДвиженияПоСкладскимРегистрам - Булево - Искомое значение одноименного реквизита справочника
//   	* НаправлениеДеятельности      - СправочникСсылка.НаправленияДеятельности - Искомое значение одноименного реквизита справочника
//   	* Заказ                        - ДокументСсылка - Искомое значение одноименного реквизита справочника
//   	* Партнер                      - СправочникСсылка.Партнеры - Искомое значение одноименного реквизита справочника
//   	* Договор                      - СправочникСсылка.ДоговорыКонтрагентов - Искомое значение одноименного реквизита справочника
//   	* ТипыНазначений               - Массив - Список типов назначений которые будут показаны
//   	* УсловиеИспользования         - Строка - Выражение, определяющее использовать ли указанные отборы. Может быть указано как булево,
//   	                                          например "ИСТИНА", или "ЛОЖЬ", либо как выражение, например
//   	                                          "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
//   	                                          И Объект.Отправитель ССЫЛКА Справочник.Склады".
//   	* ПутьКПолюНазначение          - Строка - Поле формы Назначение, к которому относятся указанные условия. Если не указано, относится ко всем полям.
//   	* ВидимыеОтборыНаФорме         - Структура - Описание отборов, которые надо вывести на форму в виде флажка
//   	                                             Ключ - Имя отбора, Значение - Заголовок на форме.
//
Функция ДобавитьШаблонНазначений(МакетФормы, ПутьКПолюНазначение = "") Экспорт
	
	ШаблонНазначения = Новый Структура();
	ШаблонНазначения.Вставить("ДвиженияПоСкладскимРегистрам");
	ШаблонНазначения.Вставить("НаправлениеДеятельности");
	ШаблонНазначения.Вставить("Заказ");
	ШаблонНазначения.Вставить("Партнер");
	ШаблонНазначения.Вставить("Договор");
	
	ШаблонНазначения.Вставить("ТипыНазначений", Новый Массив);
	Для каждого Значение Из Перечисления.ТипыНазначений Цикл
		ШаблонНазначения.ТипыНазначений.Добавить(Значение);
	КонецЦикла;
	
	ШаблонНазначения.Вставить("УсловиеИспользования", "ИСТИНА");
	ШаблонНазначения.Вставить("ПутьКПолюНазначение",  ПутьКПолюНазначение);
	ШаблонНазначения.Вставить("ВидимыеОтборыНаФорме", Новый Структура);
	
	МакетФормы.ШаблоныНазначений.Добавить(ШаблонНазначения);
	
	Возврат ШаблонНазначения;
	
КонецФункции

// Возвращает описание колонок, которые могут быть отображены в
// форме выбора назначений. Возвращаемая структура определена
// в методе МакетОписанияКолонок.
//
// Параметры:
//  МакетФормы			 - Структура - определена в методе МакетФормыВыбораНазначений. Возвращаемое значение
//										текущей функции будет помещено в ключ "ОписанияКолонок" макета формы.
//  ИсточникДанных		 - Строка - признак, определяющий по каким правилам заполнять макет описания колонок.
//  ДобавитьСторно		 - Булево - признак, определяющий включать ли в текст запроса сторнирование по регистратору.
//  ПутьКПолюНазначение	 - Строка - путь к полю Назначение, например "Объект.Товары.Назначение".
//  Префикс				 - Строка - если используется одновременно два одинаковых источника данных, необходимо заполнить
//									это поле, т.о. задав возвращаемому значению уникальный идентификатор.
// 
// Возвращаемое значение:
//   - Структура - см. МакетОписанияКолонок
//
Функция ДобавитьОписаниеКолонок(МакетФормы, ИсточникДанных, ДобавитьСторно, ПутьКПолюНазначение, Префикс = "") Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если ИсточникДанных = "ОбеспечениеЗаказов" Тогда
		
		ВозвращаемоеЗначение = ДобавитьОписаниеОбеспечениеЗаказов(МакетФормы, ДобавитьСторно, Префикс);
		
	ИначеЕсли ИсточникДанных = "ОбеспечениеЗаказовРаботами" Тогда
		
		ВозвращаемоеЗначение = ДобавитьОписаниеОбеспечениеЗаказовРаботами(МакетФормы, ДобавитьСторно, Префикс);
		
	ИначеЕсли ИсточникДанных = "ОбеспечениеЗаказовВсеСклады" Тогда
		
		ВозвращаемоеЗначение = ДобавитьОписаниеОбеспечениеЗаказовВсеСклады(МакетФормы, ДобавитьСторно, Префикс);
		
//++ НЕ УТ
	ИначеЕсли ИсточникДанных = "МатериалыИРаботыВПроизводстве" Тогда
		
		ВозвращаемоеЗначение = ДобавитьОписаниеМатериалыИРаботыВПроизводстве(МакетФормы, ДобавитьСторно, Префикс);
		
//-- НЕ УТ
	ИначеЕсли ИсточникДанных = "ДанныеПередачи" Тогда
		
		ВозвращаемоеЗначение = ДобавитьОписаниеДанныеПередачи(МакетФормы, Префикс);
		
	ИначеЕсли ИсточникДанных = "ВсеНазначения" Тогда
		
		ВозвращаемоеЗначение = ДобавитьОписаниеВсеНазначения(МакетФормы);
		
	ИначеЕсли ИсточникДанных = "ДанныеРеализации" Тогда
		
		ВозвращаемоеЗначение = ДобавитьОписаниеДанныеРеализации(МакетФормы, Префикс);
		
	ИначеЕсли ИсточникДанных = "ОбеспечениеЗаказовПоВалюте" Тогда
	
		ВозвращаемоеЗначение = ДобавитьОписаниеОбеспечениеЗаказовПоВалюте(МакетФормы, ДобавитьСторно, Префикс);
	
	ИначеЕсли ИсточникДанных = "ОбеспечениеЗаказовРаботамиПоВалюте" Тогда
	
		ВозвращаемоеЗначение = ДобавитьОписаниеОбеспечениеЗаказовРаботамиПоВалюте(МакетФормы, ДобавитьСторно, Префикс);
	
	Иначе
		ТекстОшибки = НСтр("ru='Источник данных ""%1"" не предусмотрен.';uk='Джерело даних ""%1"" не передбачено.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИсточникДанных);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ПутьКПолюНазначение = ПутьКПолюНазначение;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ФормаДокументаПриСозданииНаСервере(ФормаОбъекта) Экспорт
	
	ИмяОбъекта = Лев(ФормаОбъекта.ИмяФормы, СтрНайти(ФормаОбъекта.ИмяФормы,".Форма") - 1);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОбъекта);
	
	МакетФормыВыбораНазначений = МенеджерОбъекта.МакетФормыВыбораНазначений();
	
	СвязиШаблона = Новый Структура();
	
	Для Каждого ШаблонНазначения Из МакетФормыВыбораНазначений.ШаблоныНазначений Цикл
		
		КлючПутиКПолюНазначение = СтрЗаменить(ШаблонНазначения.ПутьКПолюНазначение, ".", "");
		КлючПутиКПолюНазначение = ?(ПустаяСтрока(КлючПутиКПолюНазначение), "ПустойКлюч", КлючПутиКПолюНазначение);
		
		Если Не СвязиШаблона.Свойство("КлючПутиКПолюНазначение") Тогда
			СвязиШаблона.Вставить(КлючПутиКПолюНазначение, Новый Массив());
		КонецЕсли;
		
		ПутьКТабЧасти = Лев(ШаблонНазначения.ПутьКПолюНазначение, Макс(СтрНайти(ШаблонНазначения.ПутьКПолюНазначение, ".", , , 2) - 1, 0));
		ТаблицаФормы = НайтиЭлементФормы(ФормаОбъекта, ПутьКТабЧасти);
		
		Для Каждого ПолеОтбора Из ШаблонНазначения Цикл
			Если ПолеОтбора.Ключ = "ПутьКПолюНазначение"
				Или ПолеОтбора.Ключ = "ВидимыеОтборыНаФорме" Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПолеОтбора.Значение)
				И (СтрНайти(ПолеОтбора.Значение, "Объект.") <> 0
					Или СтрНайти(ПолеОтбора.Значение, "&") <> 0) Тогда
				
				ПутиКДанным = ПутиКДаннымУсловияИспользования("", ПолеОтбора.Значение, ПутьКТабЧасти, ТаблицаФормы);
				Для Каждого Путь Из ПутиКДанным Цикл
					Связь = Новый СвязьПараметраВыбора(Путь.Ключ, Путь.Значение, РежимИзмененияСвязанногоЗначения.НеИзменять);
					СвязиШаблона[КлючПутиКПолюНазначение].Добавить(Связь);
					Прервать;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	МассивПутейКПолюНазначение = Новый Массив();
	Для Каждого ОписаниеКолонок Из МакетФормыВыбораНазначений.ОписанияКолонок Цикл
		МассивПутейКПолюНазначение.Добавить(ОписаниеКолонок.ПутьКПолюНазначение);
	КонецЦикла;
	МассивПутейКПолюНазначение = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПутейКПолюНазначение);
	
	Для Каждого ПутьКПолюНазначение Из МассивПутейКПолюНазначение Цикл
		
		ПолеНазначение = НайтиЭлементФормы(ФормаОбъекта, ПутьКПолюНазначение);
		
		МассивСвязей = Новый Массив();
		
		ПутьКТабЧасти = Лев(ПутьКПолюНазначение, Макс(СтрНайти(ПутьКПолюНазначение, ".", , , 2) - 1, 0));
		ТаблицаФормы = НайтиЭлементФормы(ФормаОбъекта, ПутьКТабЧасти);
		
		Для Каждого ОписаниеКолонок Из МакетФормыВыбораНазначений.ОписанияКолонок Цикл
			
			Если ОписаниеКолонок.ПутьКПолюНазначение <> ПутьКПолюНазначение Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ПутьКДанным Из ОписаниеКолонок.ПутиКДанным Цикл
				
				УточненныйПутьКДанным = СформироватьПутьКДанным(ПутьКДанным.Значение, ПутьКТабЧасти, ТаблицаФормы);
				
				Имя = ОписаниеКолонок.Префикс + "_" + ПутьКДанным.Ключ;
				
				СвязьПараметровВыбора = Новый СвязьПараметраВыбора(Имя, УточненныйПутьКДанным, РежимИзмененияСвязанногоЗначения.НеИзменять);
				
				МассивСвязей.Добавить(СвязьПараметровВыбора);
				
			КонецЦикла;
			Если ЗначениеЗаполнено(ОписаниеКолонок.УсловиеИспользования) Тогда
				
				ПутиКДаннымУсловияИспользования = ПутиКДаннымУсловияИспользования(
					ОписаниеКолонок.Префикс,
					ОписаниеКолонок.УсловиеИспользования,
					ПутьКТабЧасти,
					ТаблицаФормы);
				
				Для Каждого ПутьКДанным Из ПутиКДаннымУсловияИспользования Цикл
					
					Если МассивСвязей.Найти(ПутьКДанным.Ключ) = Неопределено Тогда
						
						СвязьПараметровВыбора = Новый СвязьПараметраВыбора(ПутьКДанным.Ключ, ПутьКДанным.Значение, РежимИзмененияСвязанногоЗначения.НеИзменять);
						МассивСвязей.Добавить(СвязьПараметровВыбора);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ФормаОбъекта.Объект.Свойство("Ссылка") Тогда
			СвязьПоИсточнику = Новый СвязьПараметраВыбора("Источник", "Объект.Ссылка", РежимИзмененияСвязанногоЗначения.НеИзменять);
			МассивСвязей.Добавить(СвязьПоИсточнику);
		КонецЕсли;
		
		КлючПутиКПолюНазначение = СтрЗаменить(ПутьКПолюНазначение, ".", "");
		Если СвязиШаблона.Свойство(КлючПутиКПолюНазначение) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСвязей, СвязиШаблона[КлючПутиКПолюНазначение]);
		КонецЕсли;
		Если СвязиШаблона.Свойство("ПустойКлюч") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСвязей, СвязиШаблона["ПустойКлюч"]);
		КонецЕсли;
		
		СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
		
		ПараметрВыбора = Новый ПараметрВыбора("ПутьКПолюНазначение", ПутьКПолюНазначение);
		ПараметрыВыбора = Новый Массив();
		ПараметрыВыбора.Добавить(ПараметрВыбора);
		
		ПараметрВыбора = Новый ПараметрВыбора("ИмяОбъекта", ИмяОбъекта);
		ПараметрыВыбора.Добавить(ПараметрВыбора);
		
		ПолеНазначение.СвязиПараметровВыбора = СвязиПараметровВыбора;
		ПолеНазначение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		ПолеНазначение.ФормаВыбора = "Справочник.Назначения.Форма.ФормаВыбораНазначений";
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсДляДоступаКРеквизитамНазначений

// Возвращает направления деятельности переданных назначений
// Параметры:
//  Назначения - Массив - массив назначений.
// Возвращаемое значение:
//  Соответствие - Ключ - назначение,
//                 Значение - направление деятельности.
//
Функция НаправленияДеятельностиНазначений(Назначения) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Назначения.Ссылка                  КАК Ссылка,
		|	Назначения.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Справочник.Назначения КАК Назначения
		|ГДЕ
		|	Назначения.Ссылка В (&Назначения)");
	Запрос.УстановитьПараметр("Назначения", Назначения);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Ссылка, Выборка.НаправлениеДеятельности);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет признаки назначений, исходя из их служебных реквизитов.
//
// Параметры:
//   Назначения - Массив - массив назначений.
//
// Возвращаемое значение:
//   Соответствие - где Ключ - назначение, а Значение - структура со свойствами:
//     * ЭтоНазначениеДавальца - Булево - признак, что назначение является давальческим.
//     * ЭтоНазначениеНаправленияДеятельности - Булево - признак, что назначение является
//               назначением поступления товаров по направлению деятельности.
//     * ЭтоДавальческаяПродукция - Булево
//     * УчитываетсяВСкладскойПодсистеме - Булево
//
Функция СвойстваНазначений(Назначения) Экспорт
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(Назначения) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Таблица.Заказ КАК Заказ,
		|	Таблица.Партнер КАК Партнер,
		|	Таблица.Договор КАК Договор,
		|	Таблица.ТипНазначения КАК ТипНазначения,
		|	Таблица.ДвиженияПоСкладскимРегистрам КАК ДвиженияПоСкладскимРегистрам
		|ИЗ
		|	Справочник.Назначения КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&Ссылки)");
	Запрос.УстановитьПараметр("Ссылки", Назначения);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Значение = Новый Структура();
		Значение.Вставить("ЭтоНазначениеДавальца", Ложь);
		Значение.Вставить("ЭтоНазначениеНаправленияДеятельности", Ложь);
		Значение.Вставить("ЭтоДавальческаяПродукция", Ложь);
		Значение.Вставить("УчитываетсяВСкладскойПодсистеме", Выборка.ДвиженияПоСкладскимРегистрам);
		Значение.Вставить("НаправлениеДеятельности", Выборка.НаправлениеДеятельности);
		Значение.Вставить("Договор", Выборка.Договор);
		
		Если Выборка.ТипНазначения = Перечисления.ТипыНазначений.Давальческое21
			Или Выборка.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалы22
			Или Выборка.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22
			Или Выборка.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеПродукция22 Тогда
			Значение.ЭтоНазначениеДавальца = Истина;
		КонецЕсли;
		
		Если Не Выборка.НаправлениеДеятельности.Пустая() И Выборка.Партнер.Пустая() И Не ЗначениеЗаполнено(Выборка.Заказ) Тогда
			Значение.ЭтоНазначениеНаправленияДеятельности = Истина;
		КонецЕсли;
		
		
		Результат.Вставить(Выборка.Ссылка, Значение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Источник")
		И Параметры.Свойство("ПутьКПолюНазначение") Тогда
		
		НазначенияВызовСервера.НазначенияОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
		
	ИначеЕсли Параметры.Свойство("НаправлениеДеятельности")
		И ЗначениеЗаполнено(Параметры.НаправлениеДеятельности) Тогда
		
		Параметры.Отбор.Вставить("НаправлениеДеятельности", Параметры.НаправлениеДеятельности);
		
	Иначе
		
		НазначенияВызовСервера.ДобавитьОтборИсключенияПартнера(Параметры.Отбор);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Если Параметры.Свойство("ОткрытьСвязанныйОбъект") 
			И Параметры.ОткрытьСвязанныйОбъект Тогда
			
			Назначение = Параметры.Ключ;
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	Назначение.Заказ КАК Заказ,
			|	Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности
			|ИЗ
			|	Справочник.Назначения КАК Назначение
			|ГДЕ
			|	Назначение.Ссылка = &Назначение";
			Запрос.УстановитьПараметр("Назначение", Назначение);
			
			РеквизитыНазначения = Запрос.Выполнить().Выбрать();
			РеквизитыНазначения.Следующий();
			
			Если ЗначениеЗаполнено(РеквизитыНазначения.Заказ) Тогда
				
				СтандартнаяОбработка = Ложь;
				
				Параметры.Ключ = РеквизитыНазначения.Заказ;
				МетаданныеЗаказа = РеквизитыНазначения.Заказ.Метаданные();
				ВыбраннаяФорма = МетаданныеЗаказа.ОсновнаяФормаОбъекта;
				
			ИначеЕсли ЗначениеЗаполнено(РеквизитыНазначения.НаправлениеДеятельности) Тогда
				
				СтандартнаяОбработка = Ложь;
				
				Параметры.Ключ = РеквизитыНазначения.НаправлениеДеятельности;
				ВыбраннаяФорма = Метаданные.Справочники.НаправленияДеятельности.ОсновнаяФормаОбъекта;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ВыборНазначенийВДокументах

#Область Совместимость

// Возвращает текст запроса доступных назначений по остаткам в ячейке
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаДоступныхНазначенийПоОстаткамВЯчейке(ПараметрыФормированияЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеРегистраТоварыВЯчейках.Номенклатура КАК Номенклатура,
	|	ДанныеРегистраТоварыВЯчейках.Характеристика КАК Характеристика,
	|	Назначения.Ссылка КАК Назначение,
	|	СУММА(ДанныеРегистраТоварыВЯчейках.Потребность) КАК Потребность,
	|	СУММА(ДанныеРегистраТоварыВЯчейках.Потребность) - МАКСИМУМ(ЕСТЬNULL(ДанныеДокумента.Количество, 0)) КАК Остаток,
	|	СУММА(0) КАК Обеспечено,
	|	Назначения.ДвиженияПоСкладскимРегистрам КАК ДвиженияПоСкладскимРегистрам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|		ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
	|		ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток КАК Потребность
	|	ИЗ
	|		РегистрНакопления.ТоварыВЯчейках.Остатки(
	|				,
	|				Характеристика = &Характеристика
	|					И Номенклатура В (&Номенклатура)
	|					И Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|					И Ячейка = &Ячейка) КАК ТоварыВЯчейкахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыВЯчейках.Номенклатура,
	|		ТоварыВЯчейках.Характеристика,
	|		ТоварыВЯчейках.Назначение,
	|		ВЫБОР
	|			КОГДА ТоварыВЯчейках.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыВЯчейках.КОтбору
	|			ИНАЧЕ ТоварыВЯчейках.ВНаличии
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ТоварыВЯчейках КАК ТоварыВЯчейках
	|	ГДЕ
	|		ТоварыВЯчейках.Номенклатура В (&Номенклатура)
	|		И ТоварыВЯчейках.Характеристика = &Характеристика
	|		И ТоварыВЯчейках.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ТоварыВЯчейках.Регистратор = &Регистратор) КАК ДанныеРегистраТоварыВЯчейках
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДокументаСгруппированные КАК ДанныеДокумента
	|		ПО ДанныеРегистраТоварыВЯчейках.Номенклатура = ДанныеДокумента.Номенклатура
	|			И ДанныеРегистраТоварыВЯчейках.Характеристика = ДанныеДокумента.Характеристика
	|			И ДанныеРегистраТоварыВЯчейках.Назначение = ДанныеДокумента.Назначение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО ДанныеРегистраТоварыВЯчейках.Назначение = Назначения.Ссылка
	|ГДЕ
	|	ДанныеРегистраТоварыВЯчейках.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ДанныеРегистраТоварыВЯчейках.Назначение.ДвиженияПоСкладскимРегистрам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистраТоварыВЯчейках.Номенклатура,
	|	ДанныеРегистраТоварыВЯчейках.Характеристика,
	|	Назначения.Ссылка";
	
	Если ПараметрыФормированияЗапроса.УчестьУжеПодобранные Тогда
		// Запрос не для динамических списков
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТоварыДокумента.Номенклатура,
		|	ТоварыДокумента.Характеристика,
		|	ТоварыДокумента.Назначение,
		|	ТоварыДокумента.Количество
		|ПОМЕСТИТЬ ТаблицаТоваровДокумента
		|ИЗ
		|	&ТоварыДокумента КАК ТоварыДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваровДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваровДокумента.Характеристика КАК Характеристика,
		|	ТаблицаТоваровДокумента.Назначение КАК Назначение,
		|	СУММА(ТаблицаТоваровДокумента.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыДокументаСгруппированные
		|ИЗ
		|	ТаблицаТоваровДокумента КАК ТаблицаТоваровДокумента
		|ГДЕ
		|	ТаблицаТоваровДокумента.Номенклатура В (&Номенклатура) И ТаблицаТоваровДокумента.Характеристика = &Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТоваровДокумента.Номенклатура,
		|	ТаблицаТоваровДокумента.Характеристика,
		|	ТаблицаТоваровДокумента.Назначение
		|;" + ТекстЗапроса;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТоварыДокументаСгруппированные", "(" +
			"ВЫБРАТЬ
			|	ИСТИНА КАК Номенклатура,
			|	ИСТИНА КАК Характеристика,
			|	ИСТИНА КАК Назначение,
			|	0 КАК Количество" + ")");
	КонецЕсли;

	Если ПараметрыФормированияЗапроса.УпорядочитьПоДатеЗаказаНазначения Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Назначения.Заказ.Дата";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса необеспеченных назначений с количественными характеристиками 
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаНеобеспеченныхНазначенийОбеспечено(ПараметрыФормированияЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Назначения.Ссылка КАК Назначение,
	|	Назначения.ДвиженияПоСкладскимРегистрам КАК ДвиженияПоСкладскимРегистрам,
	|	СУММА(НазначениеОстатки.Потребность) КАК Потребность,
	|	СУММА(НазначениеОстатки.КЗаказу) КАК КЗаказу,
	|	СУММА(НазначениеОстатки.Обеспечено) КАК Обеспечено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДвиженияПоНазначениям.Назначение КАК Назначение,
	|		ДвиженияПоНазначениям.ДвиженияПоСкладскимРегистрам КАК ДвиженияПоСкладскимРегистрам,
	|		ЕСТЬNULL(МАКСИМУМ(ДвиженияПоНазначениям.ПотребностьОстаток), СУММА(ДвиженияПоНазначениям.ДвиженияРаботКОбеспечениюПриход)) КАК Потребность,
	|		ЕСТЬNULL(МАКСИМУМ(ДвиженияПоНазначениям.КЗаказуОстаток), СУММА(ДвиженияПоНазначениям.ДвиженияРаботКОбеспечению)) КАК КЗаказу,
	|		ЕСТЬNULL(МАКСИМУМ(ДвиженияПоНазначениям.НаличиеПодЗаказОстаток), СУММА(ДвиженияПоНазначениям.ДвиженияРаботКОбеспечениюРасход)) КАК Обеспечено
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СправочникНазначения.Ссылка КАК Назначение,
	|			СправочникНазначения.ДвиженияПоСкладскимРегистрам КАК ДвиженияПоСкладскимРегистрам,
	|			ОстаткиТоваров.ПотребностьОстаток КАК ПотребностьОстаток,
	|			ВЫБОР
	|				КОГДА ДвиженияРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА ДвиженияРабот.КОбеспечению
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ДвиженияРаботКОбеспечениюПриход,
	|			ОстаткиТоваров.КЗаказуОстаток КАК КЗаказуОстаток,
	|			ДвиженияРабот.КОбеспечению КАК ДвиженияРаботКОбеспечению,
	|			ОстаткиТоваров.НаличиеПодЗаказОстаток КАК НаличиеПодЗаказОстаток,
	|			ВЫБОР
	|				КОГДА ДвиженияРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА ДвиженияРабот.КОбеспечению
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ДвиженияРаботКОбеспечениюРасход
	|		ИЗ
	|			Справочник.Назначения КАК СправочникНазначения
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(
	|						,
	|						НЕ &ЭтоРабота
	|							И (Номенклатура В (&Номенклатура))
	|							И Склад = &Склад
	|							И Характеристика = &Характеристика) КАК ОстаткиТоваров
	|				ПО СправочникНазначения.Ссылка = ОстаткиТоваров.Назначение
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказовРаботами КАК ДвиженияРабот
	|				ПО (&ЭтоРабота)
	|					И (ДвиженияРабот.Номенклатура В (&Номенклатура))
	|					И (ДвиженияРабот.Подразделение = &Подразделение)
	|					И (ДвиженияРабот.Характеристика = &Характеристика)
	|					И СправочникНазначения.Ссылка = ДвиженияРабот.Назначение
	|		ГДЕ
	|			(СправочникНазначения.Ссылка = &Назначение
	|					ИЛИ ОстаткиТоваров.ПотребностьОстаток <> 0
	|					ИЛИ ОстаткиТоваров.КЗаказуОстаток <> 0
	|					ИЛИ &ЭтоРабота
	|						И ДвиженияРабот.КОбеспечению <> 0)) КАК ДвиженияПоНазначениям
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДвиженияПоНазначениям.Назначение,
	|		ДвиженияПоНазначениям.ДвиженияПоСкладскимРегистрам
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СправочникНазначения.Ссылка,
	|		СправочникНазначения.ДвиженияПоСкладскимРегистрам,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА ОбеспечениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -ОбеспечениеЗаказов.Потребность
	|				ИНАЧЕ ОбеспечениеЗаказов.Потребность
	|			КОНЕЦ, ВЫБОР
	|				КОГДА ДвиженияРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА ДвиженияРабот.КОбеспечению
	|				ИНАЧЕ -ДвиженияРабот.КОбеспечению
	|			КОНЕЦ),
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА ОбеспечениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -ОбеспечениеЗаказов.КЗаказу
	|				ИНАЧЕ ОбеспечениеЗаказов.КЗаказу
	|			КОНЕЦ, ВЫБОР
	|				КОГДА ДвиженияРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -ДвиженияРабот.КОбеспечению
	|				ИНАЧЕ ДвиженияРабот.КОбеспечению
	|			КОНЕЦ),
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА ОбеспечениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -ОбеспечениеЗаказов.НаличиеПодЗаказ
	|				ИНАЧЕ ОбеспечениеЗаказов.НаличиеПодЗаказ
	|			КОНЕЦ, ВЫБОР
	|				КОГДА ДвиженияРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА -ДвиженияРабот.КОбеспечению
	|				ИНАЧЕ ДвиженияРабот.КОбеспечению
	|			КОНЕЦ)
	|	ИЗ
	|		Справочник.Назначения КАК СправочникНазначения
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|			ПО (НЕ &ЭтоРабота)
	|				И (ОбеспечениеЗаказов.Номенклатура В (&Номенклатура))
	|				И (ОбеспечениеЗаказов.Характеристика = &Характеристика)
	|				И (ОбеспечениеЗаказов.Регистратор = &Регистратор)
	|				И СправочникНазначения.Ссылка = ОбеспечениеЗаказов.Назначение
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказовРаботами КАК ДвиженияРабот
	|			ПО (&ЭтоРабота)
	|				И (ДвиженияРабот.Номенклатура В (&Номенклатура))
	|				И (ДвиженияРабот.Характеристика = &Характеристика)
	|				И (ДвиженияРабот.Подразделение = &Подразделение)
	|				И (ОбеспечениеЗаказов.Регистратор = &Регистратор)
	|				И СправочникНазначения.Ссылка = ДвиженияРабот.Назначение
	|	ГДЕ
	|		(ДвиженияРабот.КОбеспечению <> 0
	|				ИЛИ ОбеспечениеЗаказов.Потребность <> 0
	|				ИЛИ ОбеспечениеЗаказов.КЗаказу <> 0
	|				ИЛИ ОбеспечениеЗаказов.НаличиеПодЗаказ <> 0)) КАК НазначениеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО НазначениеОстатки.Назначение = Назначения.Ссылка
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	Назначения.Ссылка,
	|	Назначения.ДвиженияПоСкладскимРегистрам";
	
	Если ПараметрыФормированияЗапроса.УпорядочитьПоДатеЗаказаНазначения Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Назначения.Заказ.Дата";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса остатков обособленного обеспечения на складе-отправителе и складе-получателе.
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаНазначенийРасширенный() Экспорт

	ТекстЗапроса =
		// Остатки назначения товара по распоряжению.
		"ВЫБРАТЬ
		|	СпрНазначения.Ссылка КАК Назначение,
		|
		|	СУММА(Набор.НаличиеПодЗаказ)       КАК ВНаличииОтправитель,
		|	СУММА(Набор.Количество)            КАК Количество,
		|	СУММА(Набор.КЗаказу)               КАК Потребность
		|ИЗ(
		|	ВЫБРАТЬ
		|		Таблица.Назначение             КАК Назначение,
		|		Таблица.КОформлениюОрдеровОстаток КАК Количество,
		|		0                              КАК НаличиеПодЗаказ,
		|		Таблица.КОформлениюОрдеровОстаток КАК Потребность,
		|		Таблица.КОформлениюОрдеровОстаток КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению.Остатки(,
		|			ДокументПоступления = &Распоряжение
		|			И(&ПоВсейНоменклатуре ИЛИ(
		|				Номенклатура     = &Номенклатура
		|				И Характеристика = &Характеристика))
		|			И Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Таблица
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Потребности.
		|	ВЫБРАТЬ
		|		Таблица.Назначение             КАК Назначение,
		|		0                              КАК Количество,
		|		0                              КАК НаличиеПодЗаказ,
		|		Таблица.ПотребностьОстаток     КАК Потребность,
		|		Таблица.КЗаказуОстаток         КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|			НЕ &ПоРаспоряжению
		|			И (&ПоВсейНоменклатуре И НЕ &ТолькоТолкающиеНаправления
		|				ИЛИ &ПоВсейНоменклатуре И Назначение.Заказ = НЕОПРЕДЕЛЕНО
		|				ИЛИ НЕ &ПоВсейНоменклатуре И(
		|				Номенклатура                 = &Номенклатура
		|				И Характеристика             = &Характеристика
		|				И (&ПоВсемСкладам ИЛИ &Склад = Склад)))
		|			И &ПодстановкаОтборПоРеквизитам) КАК Таблица
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Толкающие направления деятельности.
		|	ВЫБРАТЬ
		|		Таблица.Назначение  КАК Назначение,
		|		0                   КАК Количество,
		|		0                   КАК НаличиеПодЗаказ,
		|		0                   КАК Потребность,
		|		0                   КАК КЗаказу
		|	ИЗ
		|		Справочник.НаправленияДеятельности КАК Таблица
		|	ГДЕ
		|		Таблица.УчетЗатрат
		|		И Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНаправленияДеятельности.Используется)
		|		И &ПодстановкаОтборПоРеквизитамВТаблице
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Сторно потребностей по документу.
		|	ВЫБРАТЬ
		|
		|		Таблица.Назначение             КАК Назначение,
		|
		|		ВЫБОР КОГДА &ПоРаспоряжению ТОГДА
		|					Таблица.НаличиеПодЗаказ
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ                      КАК Количество,
		|		0                              КАК НаличиеПодЗаказ,
		|		ВЫБОР КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					-Таблица.Потребность
		|				ИНАЧЕ
		|					Таблица.Потребность
		|			КОНЕЦ                      КАК Потребность,
		|
		|		ВЫБОР КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					-Таблица.КЗаказу
		|				ИНАЧЕ
		|					Таблица.КЗаказу
		|			КОНЕЦ                      КАК КЗаказу
		|
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов КАК Таблица
		|	ГДЕ
		|		Таблица.Регистратор = &Регистратор
		|		И Таблица.Активность
		|
		|		И (&ПоВсейНоменклатуре И НЕ &ТолькоТолкающиеНаправления
		|			ИЛИ &ПоВсейНоменклатуре И Таблица.Назначение.Заказ = НЕОПРЕДЕЛЕНО
		|			ИЛИ НЕ &ПоВсейНоменклатуре И(
		|			Таблица.Номенклатура                 = &Номенклатура
		|			И Таблица.Характеристика            = &Характеристика
		|			И (&ПоВсемСкладам ИЛИ Таблица.Склад = &Склад)))
		|		И &ПодстановкаОтборПоРеквизитамВТаблице
		|
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Потребности в работах.
		|	ВЫБРАТЬ
		|		Таблица.Назначение             КАК Назначение,
		|		0                              КАК Количество,
		|		0                              КАК НаличиеПодЗаказ,
		|		Таблица.КОбеспечениюОстаток    КАК Потребность,
		|		Таблица.КОбеспечениюОстаток    КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказовРаботами.Остатки(,
		|			НЕ &ПоРаспоряжению
		|			И (&ПоВсейНоменклатуре И НЕ &ТолькоТолкающиеНаправления
		|				ИЛИ &ПоВсейНоменклатуре И Назначение.Заказ = НЕОПРЕДЕЛЕНО
		|				ИЛИ НЕ &ПоВсейНоменклатуре И(
		|				Номенклатура                 = &Номенклатура
		|				И Характеристика             = &Характеристика))
		|			И &ПодстановкаОтборПоРеквизитам) КАК Таблица
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Сторно потребностей в работах по документу.
		|	ВЫБРАТЬ
		|
		|		Таблица.Назначение             КАК Назначение,
		|
		|		0                              КАК Количество,
		|		0                              КАК НаличиеПодЗаказ,
		|		ВЫБОР КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					-Таблица.КОбеспечению
		|				ИНАЧЕ
		|					Таблица.КОбеспечению
		|			КОНЕЦ                      КАК Потребность,
		|
		|		ВЫБОР КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					-Таблица.КОбеспечению
		|				ИНАЧЕ
		|					Таблица.КОбеспечению
		|			КОНЕЦ                     КАК КЗаказу
		|
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказовРаботами КАК Таблица
		|	ГДЕ
		|		Таблица.Регистратор = &Регистратор
		|		И Таблица.Активность
		|
		|		И (&ПоВсейНоменклатуре И НЕ &ТолькоТолкающиеНаправления
		|			ИЛИ &ПоВсейНоменклатуре И Таблица.Назначение.Заказ = НЕОПРЕДЕЛЕНО
		|			ИЛИ НЕ &ПоВсейНоменклатуре И(
		|			Таблица.Номенклатура                 = &Номенклатура
		|			И Таблица.Характеристика            = &Характеристика))
		|		И &ПодстановкаОтборПоРеквизитамВТаблице
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Наличие у отправителя.
		|	ВЫБРАТЬ
		|		Таблица.Назначение             КАК Назначение,
		|		0                              КАК Количество,
		|		Таблица.НаличиеПодЗаказОстаток КАК НаличиеПодЗаказ,
		|		0                              КАК Потребность,
		|		0                              КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов.Остатки(, &ПоНаличиюУОтправителя
		|			И Номенклатура = &Номенклатура И Характеристика = &Характеристика И Склад = &СкладОтправитель
		|			И &ПодстановкаОтборПоРеквизитам) КАК Таблица
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Сторно наличия по документу.
		|	ВЫБРАТЬ
		|
		|		Таблица.Назначение             КАК Назначение,
		|
		|		0                              КАК Количество,
		|		ВЫБОР КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					-Таблица.НаличиеПодЗаказ
		|				ИНАЧЕ
		|					Таблица.НаличиеПодЗаказ
		|			КОНЕЦ                      КАК НаличиеПодЗаказ,
		|
		|		0                              КАК Потребность,
		|		0                              КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов КАК Таблица
		|	ГДЕ
		|		&ПоНаличиюУОтправителя
		|		И Таблица.Регистратор = &Регистратор
		|		И Таблица.Активность
		|
		|		И Таблица.Номенклатура   = &Номенклатура
		|		И Таблица.Характеристика = &Характеристика
		|		И Таблица.Склад          = &СкладОтправитель
		|		И &ПодстановкаОтборПоРеквизитамВТаблице
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		&НазначениеДавальца,
		|		0,
		|		0,
		|		0,
		|		1
		|	
		|	ГДЕ
		|		&НазначениеДавальца <> Неопределено
		|		И &ПоВсейНоменклатуре
		|) КАК Набор
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
		|		ПО Набор.Назначение = СпрНазначения.Ссылка
		|		 И (НЕ &ТолькоСкладскиеНазначения ИЛИ СпрНазначения.ДвиженияПоСкладскимРегистрам)
		|ГДЕ
		|	(&НазначениеДавальца <> Неопределено И &ПоВсейНоменклатуре) ИЛИ НЕ СпрНазначения.Ссылка ЕСТЬ NULL
		|СГРУППИРОВАТЬ ПО
		|	СпрНазначения.Ссылка
		|
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0 И &ПоРаспоряжению
		|	ИЛИ СУММА(Набор.КЗаказу) > 0
		|	ИЛИ &ПоВсейНоменклатуре И (
		|		СУММА(Набор.Потребность) <> 0 И НЕ &ТолькоТолкающиеНаправления
		|		ИЛИ СпрНазначения.Заказ = НЕОПРЕДЕЛЕНО)
		|	ИЛИ &ПоНаличиюУОтправителя И СУММА(Набор.НаличиеПодЗаказ) > 0";
		
	Возврат ТекстЗапроса;

КонецФункции

// Возвращает текст запроса всех назначений по данной номенклатуре и характеристике
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаВсехНазначений(ПараметрыФормированияЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНазначения.Ссылка КАК Назначение,
	|	СправочникНазначения.ДвиженияПоСкладскимРегистрам КАК ДвиженияПоСкладскимРегистрам,
	|	СправочникНазначения.ВерсияДанных КАК ВерсияДанных,
	|	СправочникНазначения.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникНазначения.Предопределенный КАК Предопределенный,
	|	СправочникНазначения.Наименование КАК Наименование
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СправочникНазначения
	|		ПО (ОбеспечениеЗаказов.Назначение = СправочникНазначения.Ссылка)
	|			И (ОбеспечениеЗаказов.Номенклатура = &Номенклатура)
	|			И (ОбеспечениеЗаказов.Характеристика = &Характеристика)
	|			И (ОбеспечениеЗаказов.Склад = &Склад)
	|ГДЕ
	|	СправочникНазначения.Ссылка <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
	
	Если ПараметрыФормированияЗапроса.УпорядочитьПоДатеЗаказаНазначения Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	СправочникНазначения.Заказ.Дата";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ВзаимодействиеСФормойВыбораНазначений

Функция ТекстИПараметрыЗапросаУсловияИспользования(Префикс, УсловиеИспользования) Экспорт
	
	ЕстьСпецСимвол = СтрНайти(УсловиеИспользования, "&") <> 0;
	
	ПодстрокиВыражений = ?(ЕстьСпецСимвол,
		СтрРазделить(УсловиеИспользования, "&", Ложь),
		СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УсловиеИспользования, "Объект.", Истина));
	
	НаборУсловийЗапроса = Новый Массив();
	СписокПараметровЗапроса = Новый Массив();
	
	Для Каждого ПодстрокаВыражения Из ПодстрокиВыражений Цикл
		
		Если Не ЕстьСпецСимвол Тогда
			ПодстрокаВыражения = "Объект." + ПодстрокаВыражения;
		КонецЕсли;
		
		ВыражениеОбъекта = Сред(ПодстрокаВыражения, 1, СтрНайти(ПодстрокаВыражения, " ") - 1);
		
		НачалоПоследнегоСлова = СтрНайти(ВыражениеОбъекта, ".", НаправлениеПоиска.СКонца);
		ПоследнееСлово = Сред(ВыражениеОбъекта, НачалоПоследнегоСлова + 1);
		
		ЛеваяЧастьИмениПараметра = ?(ЗначениеЗаполнено(Префикс), Префикс + "_", "");
		ИмяПараметра = ЛеваяЧастьИмениПараметра + ПоследнееСлово;
		ИмяПараметра = СокрЛП(ИмяПараметра);
		
		УсловиеЗапроса = СтрЗаменить(ПодстрокаВыражения, ВыражениеОбъекта, "&" + ИмяПараметра);
		
		НаборУсловийЗапроса.Добавить(УсловиеЗапроса);
		СписокПараметровЗапроса.Добавить(ИмяПараметра);
		
	КонецЦикла;
	
	УсловияЗапроса = СтрСоединить(НаборУсловийЗапроса, Символы.ПС);
	
	Если ПустаяСтрока(УсловияЗапроса) Тогда
		УсловияЗапроса = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ " + УсловияЗапроса + " КАК УсловиеВыполнено";
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТекстЗапроса", ТекстЗапроса);
	СтруктураВозврата.Вставить("ПараметрыЗапроса", СписокПараметровЗапроса);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПутиКДаннымУсловияИспользования(Префикс, УсловиеИспользования, ПутьКТабЧасти, ТаблицаФормы)
	
	ПутиКДанным = Новый Структура();
	
	ВыраженияОбъектов = ВыраженияПутейКДаннымУсловийИспользования(УсловиеИспользования);
	
	Для Каждого ВыражениеОбъекта Из ВыраженияОбъектов Цикл
		
		ВыражениеОбъекта = СокрЛП(ВыражениеОбъекта);
		
		ПутьКДанным = СформироватьПутьКДанным(ВыражениеОбъекта, ПутьКТабЧасти, ТаблицаФормы);
		
		НачалоПоследнегоСловаПути = СтрНайти(ПутьКДанным, ".", НаправлениеПоиска.СКонца);
		ПоследнееСловоПути = Сред(ПутьКДанным, НачалоПоследнегоСловаПути + 1);
		
		ЛеваяЧастьИмениПараметра = ?(ЗначениеЗаполнено(Префикс), Префикс + "_", "");
		ИмяПараметра = ЛеваяЧастьИмениПараметра + ПоследнееСловоПути;
		
		ПутиКДанным.Вставить(ИмяПараметра, ПутьКДанным);
		
	КонецЦикла;
	
	Возврат ПутиКДанным;
	
КонецФункции

Функция ЗаполнитьДанныеВыбора(Параметры) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Параметры.Источник);
	
	МакетФормыВыбораНазначений = МенеджерДокумента.МакетФормыВыбораНазначений();
	
	ПараметрыЗапроса = СформироватьПараметрыЗапросаПоМакетуФормыНазначений(МакетФормыВыбораНазначений, Параметры);
	
	ТекстЗапроса = СформироватьТекстЗапросаДанныеВыбора(МакетФормыВыбораНазначений, ПараметрыЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Источник", Параметры.Источник);
	Запрос.Текст = ТекстЗапроса;
	
	// Установка значений параметров запроса.
	
	Для Каждого ОписаниеКолонок Из МакетФормыВыбораНазначений.ОписанияКолонок Цикл
		
		Если ОписаниеКолонок.ПутьКПолюНазначение <> ПараметрыЗапроса.ПутьКПолюНазначение Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПутьКДанным Из ОписаниеКолонок.ПутиКДанным Цикл
			ИмяПараметра = ОписаниеКолонок.Префикс + "_" + ПутьКДанным.Ключ;
			Значение = ПараметрыЗапроса[ИмяПараметра];
			Запрос.УстановитьПараметр(ИмяПараметра, Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ШаблонНазначения Из МакетФормыВыбораНазначений.ШаблоныНазначений Цикл
		
		Если Не ПроверитьУсловиеИспользования("", ШаблонНазначения.УсловиеИспользования,
			Параметры, ШаблонНазначения.ПутьКПолюНазначение) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПолеОтбора Из ШаблонНазначения Цикл
			Если ПолеОтбора.Ключ = "ПутьКПолюНазначение"
				Или ПолеОтбора.Ключ = "ВидимыеОтборыНаФорме" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПолеОтбора.Значение)
				// не будет работать для выражений из ТЧ и выражений из ИБ
				И (СтрНайти(ПолеОтбора.Значение, "Объект.") <> 0
					Или СтрНайти(ПолеОтбора.Значение, "&") <> 0) Тогда
				
				ПараметрыУсловияИспользования = ТекстИПараметрыЗапросаУсловияИспользования("", ПолеОтбора.Значение);
				Для Каждого ПараметрЗапроса Из ПараметрыУсловияИспользования.ПараметрыЗапроса Цикл
					ЗначениеПараметра = ПараметрыЗапроса[ПараметрЗапроса];
					Запрос.УстановитьПараметр(ПараметрЗапроса, ЗначениеПараметра);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТипыНазначений", ПараметрыЗапроса.ТипыНазначений);
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Параметры.СтрокаПоиска + "%");
	
	ВыбранныеНазначения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Назначение");
	
	ДанныеВыбора.ЗагрузитьЗначения(ВыбранныеНазначения);
	
	Возврат ДанныеВыбора;
	
КонецФункции

Функция ПроверитьУсловиеИспользования(Префикс, УсловиеИспользования, ПараметрыЗапроса, ПутьКПолюНазначение = "") Экспорт
	
	Если Не ПустаяСтрока(ПутьКПолюНазначение)
		И ПутьКПолюНазначение <> ПараметрыЗапроса.ПутьКПолюНазначение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(УсловиеИспользования)
		Или СтрНайти(УсловиеИспользования, "Объект.") = 0
			И СтрНайти(УсловиеИспользования, "&") = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыУсловияИспользования = ТекстИПараметрыЗапросаУсловияИспользования(Префикс, УсловиеИспользования);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПараметрыУсловияИспользования.ТекстЗапроса;
	
	Для Каждого ПараметрЗапроса Из ПараметрыУсловияИспользования.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса, ПараметрыЗапроса[ПараметрЗапроса]);
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.УсловиеВыполнено;
	
КонецФункции

Функция СформироватьПараметрыЗапросаПоМакетуФормыНазначений(МакетФормыНазначений, ИсточникПараметров) Экспорт
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ПутьКПолюНазначение", ИсточникПараметров.ПутьКПолюНазначение);
	
	ИсточникПараметровПолучаемыхИзИБ = Новый Соответствие();
	Для Каждого ОписаниеКолонок Из МакетФормыНазначений.ОписанияКолонок Цикл
		
		Если ОписаниеКолонок.ПутьКПолюНазначение <> ИсточникПараметров.ПутьКПолюНазначение Тогда
			Продолжить;
		КонецЕсли;
		
		ИсточникПараметровПолучаемыхИзИБ(
			ОписаниеКолонок.Префикс,
			ОписаниеКолонок.УсловиеИспользования,
			ОписаниеКолонок.ПутьКПолюНазначение,
			ИсточникПараметровПолучаемыхИзИБ);
		
	КонецЦикла;
	
	ЗаполнитьЗначениеПараметраИзИБ(ИсточникПараметровПолучаемыхИзИБ, ИсточникПараметров);
	
	Для Каждого ОписаниеКолонок Из МакетФормыНазначений.ОписанияКолонок Цикл
		
		Если ОписаниеКолонок.ПутьКПолюНазначение <> ИсточникПараметров.ПутьКПолюНазначение Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПутьКДанным Из ОписаниеКолонок.ПутиКДанным Цикл
			ИмяПараметра = ОписаниеКолонок.Префикс + "_" + ПутьКДанным.Ключ;
			Значение = ИсточникПараметров[ИмяПараметра];
			
			ПараметрыЗапроса.Вставить(ИмяПараметра, Значение);
		КонецЦикла;
		
		ПараметрыУсловияИспользования = ТекстИПараметрыЗапросаУсловияИспользования(ОписаниеКолонок.Префикс, ОписаниеКолонок.УсловиеИспользования);
		Для Каждого ПараметрЗапроса Из ПараметрыУсловияИспользования.ПараметрыЗапроса Цикл
			Если Не ПараметрыЗапроса.Свойство(ПараметрЗапроса) Тогда
				
				ПараметрЗапросаПолученныйИзИБ = ИсточникПараметровПолучаемыхИзИБ.Получить(ПараметрЗапроса);
				Если ПараметрЗапросаПолученныйИзИБ <> Неопределено Тогда
					
					ЗначениеПараметра = ПараметрЗапросаПолученныйИзИБ.Значение;
					
				Иначе
					
					ЗначениеПараметра = ИсточникПараметров[ПараметрЗапроса];
					
				КонецЕсли;
				ПараметрыЗапроса.Вставить(ПараметрЗапроса, ЗначениеПараметра);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ШаблонНазначения Из МакетФормыНазначений.ШаблоныНазначений Цикл
		
		Если Не ПроверитьУсловиеИспользования("", ШаблонНазначения.УсловиеИспользования,
			ИсточникПараметров, ШаблонНазначения.ПутьКПолюНазначение) Тогда
			
			Если Не ПустаяСтрока(ШаблонНазначения.УсловиеИспользования)
				И (СтрНайти(ШаблонНазначения.УсловиеИспользования, "Объект.") <> 0
					Или СтрНайти(ШаблонНазначения.УсловиеИспользования, "&") <> 0) Тогда
				ПараметрыУсловияИспользования = ТекстИПараметрыЗапросаУсловияИспользования("", ШаблонНазначения.УсловиеИспользования);
				Для Каждого ПараметрЗапроса Из ПараметрыУсловияИспользования.ПараметрыЗапроса Цикл
					ПараметрыЗапроса.Вставить(ПараметрЗапроса, ИсточникПараметров[ПараметрЗапроса]);
				КонецЦикла;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПолеОтбора Из ШаблонНазначения Цикл
			Если ПолеОтбора.Ключ = "ПутьКПолюНазначение" Тогда
				Продолжить;
			КонецЕсли;
			Если ПолеОтбора.Ключ = "ТипыНазначений" Тогда
				ПараметрыЗапроса.Вставить("ТипыНазначений", ПолеОтбора.Значение);
			ИначеЕсли ЗначениеЗаполнено(ПолеОтбора.Значение)
				И (СтрНайти(ПолеОтбора.Значение, "Объект.") <> 0
					Или СтрНайти(ПолеОтбора.Значение, "&") <> 0) Тогда
				
				ПараметрыУсловияИспользования = ТекстИПараметрыЗапросаУсловияИспользования("", ПолеОтбора.Значение);
				Для Каждого ПараметрЗапроса Из ПараметрыУсловияИспользования.ПараметрыЗапроса Цикл
					ПараметрыЗапроса.Вставить(ПараметрЗапроса, ИсточникПараметров[ПараметрЗапроса]);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Если в макете нет шаблонов назначений
	Если Не ПараметрыЗапроса.Свойство("ТипыНазначений") Тогда
		ПараметрыЗапроса.Вставить("ТипыНазначений", Новый Массив);
		Для каждого Значение Из Перечисления.ТипыНазначений Цикл
			ПараметрыЗапроса.ТипыНазначений.Добавить(Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура ДобавитьУсловиеИсключенияПартнера(Условия, Источник) Экспорт
	
	ЕстьНазначенияСЗаполненнымПартнером = Ложь;
	
	//++ НЕ УТ
	ЕстьНазначенияСЗаполненнымПартнером = ЕстьНазначенияСЗаполненнымПартнером Или ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне");
	//-- НЕ УТ
	
	
	ЕстьНазначенияСЗаполненнымПартнером = ЕстьНазначенияСЗаполненнымПартнером Или ПолучитьФункциональнуюОпцию("ИспользоватьОказаниеАгентскихУслугПриЗакупке");
	
	Если НЕ ЕстьНазначенияСЗаполненнымПартнером Тогда
			
			Условия.Добавить(Источник + ".Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)");
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОтборИсключенияПартнера(СтруктураОтборов) Экспорт
	
	ЕстьНазначенияСЗаполненнымПартнером = Ложь;
	
	//++ НЕ УТ
	ЕстьНазначенияСЗаполненнымПартнером = ЕстьНазначенияСЗаполненнымПартнером Или ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне");
	//-- НЕ УТ
	
	
	Если Не ЕстьНазначенияСЗаполненнымПартнером Тогда
			
			СтруктураОтборов.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеНазначенийВТабличныхЧастяхДокументов

Функция ШаблоныИзСсылок(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Ссылка                  КАК Ссылка,
		|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Таблица.Партнер                 КАК Партнер,
		|	Таблица.Договор                 КАК Договор,
		|	Таблица.ТипНазначения           КАК ТипНазначения,
		|	Таблица.Заказ                   КАК Заказ
		|ИЗ
		|	Справочник.Назначения КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		
		Шаблон = ШаблонНового();
		ЗаполнитьЗначенияСвойств(Шаблон, Выборка);
		Результат.Вставить(Выборка.Ссылка, Шаблон);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонЕстьЧастныйСлучайШаблона(ШаблонЧастный, ШаблонОбщий) Экспорт
	
	Для Каждого Свойство Из ШаблонОбщий Цикл
		
		Если ЗначениеЗаполнено(Свойство.Значение) И ШаблонЧастный[Свойство.Ключ] <> ШаблонОбщий[Свойство.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьНазначениеОбеспечения(ТабличнаяЧасть, НазначениеШапки, ИмяПоляНазначенияОбеспечения = "НазначениеОбеспечения") Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки - 1 КАК ИндексСтроки,
	|	Товары.Назначение      КАК Назначение
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТовары.ИндексСтроки КАК ИндексСтроки,
	|	ВЫБОР КОГДА ВтТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ИЛИ Назначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное) ТОГДА
	|		&НазначениеШапки
	|	ИНАЧЕ
	|		ВтТовары.Назначение
	|	КОНЕЦ КАК НазначениеОбеспечения
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО ВтТовары.Назначение = Назначения.Ссылка");
	
	Запрос.УстановитьПараметр("Товары", ?(ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений"),
		ТабличнаяЧасть, ТабличнаяЧасть.Выгрузить(, "НомерСтроки, Назначение")));
	Запрос.УстановитьПараметр("НазначениеШапки", НазначениеШапки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТабличнаяЧасть[Выборка.ИндексСтроки][ИмяПоляНазначенияОбеспечения] = Выборка.НазначениеОбеспечения;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СозданиеНазначений

// Проверяет, что назначение в объекте корректное.
// Если назначение некорректное, то исправляет его:
//  - либо ищет корректное назначение в базе,
//  - либо выдает ссылку нового назначения, если поиск не даст результатов.
Функция ПроверитьЗаполнитьПередЗаписью(Назначение, ШаблонНазначения, ЭтотОбъект, РеквизитыПроверки, Отказ, ДляНовыхСоздаватьВсегда = Ложь, Очистить = Ложь) Экспорт
	
	ОбновленоНазначение = Ложь;
	
	// Для нового объекта всегда выполняется обновление назначения.
	Если ЭтотОбъект.ЭтоНовый() Тогда
		
		ОбновленоНазначение = Истина;
		
		// Назначение в объекте не используется, значит нужно его очистить.
		Если Очистить Тогда
			
			Назначение = Неопределено;
			
		// В шаблоне есть ссылка на создаваемый объект, значит искать корректное назначение в базе нет смысла, его там нет.
		// Назначение нужно будет создать при записи объекта.
		ИначеЕсли ДляНовыхСоздаватьВсегда Или СсылкаЕстьВШаблоне(ЭтотОбъект.Ссылка, ШаблонНазначения) Тогда
			
			Назначение = Справочники.Назначения.ПолучитьСсылку();
			
		// Назначением служит назначение, связанное с другим объектом, значит оно есть в базе. Нужно найти его.
		Иначе
			
			// Назначение связанное с партнером и направлением деятельности или договором и направлением деятельности отличным
			// от указанного в договоре создаются только в момент фиксации потребности.
			Если ЗначениеЗаполнено(ШаблонНазначения.Партнер)
				И Не (ШаблонНазначения.НаправлениеДеятельности.Пустая() И ШаблонНазначения.Договор.Пустая()
					И ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.Собственное) Тогда
				
				// Установим блокировку для исключения возможности создания дубля другим объектом, генерирующим в это время такое же назначение.
				УстановитьБлокировкуПоШаблону(ШаблонНазначения);
				
				Назначение = НайтиПоШаблону(ШаблонНазначения);
				
				Если Не ЗначениеЗаполнено(Назначение) Тогда
					
					Назначение = Справочники.Назначения.ПолучитьСсылку();
					
				КонецЕсли;
				
			Иначе
				
				Назначение = НайтиПоШаблону(ШаблонНазначения);
				
				Если Не ЗначениеЗаполнено(Назначение) Тогда
					
					Отказ = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеНетНазначенияВБазе(ШаблонНазначения));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	// Если объект записывается повторно, назначение следует обновлять, если изменились ключевые реквизиты объекта.
	ИначеЕсли РеквизитыПроверки <> "" Тогда
		
		ОбъектВБазе = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотОбъект.Ссылка, РеквизитыПроверки);
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ЭтотОбъект, ОбъектВБазе, РеквизитыПроверки)
				Или Не ЗначениеЗаполнено(Назначение) Тогда // назначение могло очиститься если ключевые реквизиты меняли в форме после переключения опции.
			
			ОбновленоНазначение = Истина;
			
			// Назначение в объекте не используется, значит нужно его очистить.
			Если Очистить Тогда
				
				Назначение = Неопределено;
				
			// Назначение уже могло быть записано в базу если реквизиты объекта меняют "туда-обратно" и такая комбинация уже была в объекте.
			// Если же нет, то его нужно будет создать при записи объекта.
			ИначеЕсли СсылкаЕстьВШаблоне(ЭтотОбъект.Ссылка, ШаблонНазначения) Тогда
				
				Назначение = НайтиПоШаблону(ШаблонНазначения);
				Если Не ЗначениеЗаполнено(Назначение) Тогда
					Назначение = Справочники.Назначения.ПолучитьСсылку(); // это запись объекта с новыми значениями ключевых реквизитов
				КонецЕсли;
				
			// Назначением служит назначение, связанное с другим объектом, значит оно есть в базе. Нужно найти его.
			Иначе
				
				// Назначение связанное с партнером и направлением деятельности или договором и направлением деятельности отличным
				// от указанного в договоре создаются только в момент фиксации потребности.
				Если ЗначениеЗаполнено(ШаблонНазначения.Партнер)
					И Не (ШаблонНазначения.НаправлениеДеятельности.Пустая() И ШаблонНазначения.Договор.Пустая()
						И ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.Собственное) Тогда
						
					// Установим блокировку для исключения возможности создания дубля другим объектом, генерирующим в это время такое же назначение.
					УстановитьБлокировкуПоШаблону(ШаблонНазначения);
					
					Назначение = НайтиПоШаблону(ШаблонНазначения);
					
					Если Не ЗначениеЗаполнено(Назначение) Тогда
						Назначение = Справочники.Назначения.ПолучитьСсылку();
					КонецЕсли;
					
				Иначе
					
					Назначение = НайтиПоШаблону(ШаблонНазначения);
					
					Если Не ЗначениеЗаполнено(Назначение) Тогда
						
						Отказ = Истина;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеНетНазначенияВБазе(ШаблонНазначения));
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбновленоНазначение;
	
КонецФункции

Процедура ПриЗаписиДокумента(Назначение, ШаблонНазначения, ЭтотОбъект, Получатель, НалоговоеНазначение) Экспорт
	
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, ПометкаУдаления");
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ЭтотОбъект);
	РеквизитыДокумента.Вставить("Получатель",         Получатель);
    РеквизитыДокумента.Вставить("НалоговоеНазначение", НалоговоеНазначение);
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Назначение,
        "Наименование, ПометкаУдаления, Заказ, НаправлениеДеятельности, Партнер, Договор, НалоговоеНазначение, ТипНазначения");
	
	Если РеквизитыНазначения.Наименование <> Неопределено Тогда
		
		ПредставлениеНазначения = ПредставлениеНазначенияДляЗаписиВИнформационнуюБазу(
			РеквизитыНазначения,
			РеквизитыДокумента);
		
		ОбновитьПометкуУдаления    = ЗначениеЗаполнено(РеквизитыНазначения.Заказ)
			И РеквизитыНазначения.ПометкаУдаления <> РеквизитыДокумента.ПометкаУдаления;
        ОбновитьНалоговоеНазначение = ЗначениеЗаполнено(РеквизитыНазначения.Заказ)
        	И РеквизитыНазначения.НалоговоеНазначение <> РеквизитыДокумента.НалоговоеНазначение;
		ОбновитьНаименование       = РеквизитыНазначения.Наименование <> ПредставлениеНазначения;
		
        Если ОбновитьПометкуУдаления Или ОбновитьНалоговоеНазначение Или ОбновитьНаименование Тогда
			
			НазначениеОбъект = Назначение.ПолучитьОбъект();
			
			Если ОбновитьПометкуУдаления Тогда
				НазначениеОбъект.ПометкаУдаления = РеквизитыДокумента.ПометкаУдаления;
			КонецЕсли;
			
            Если ОбновитьНалоговоеНазначение Тогда
            	НазначениеОбъект.НалоговоеНазначение = РеквизитыДокумента.НалоговоеНазначение;
            КонецЕсли;
			
			Если ОбновитьНаименование Тогда
				НазначениеОбъект.Наименование = ПредставлениеНазначения;
			КонецЕсли;
			НазначениеОбъект.Записать();
			
		КонецЕсли;
		
	Иначе // Это новое назначение
		
		ПредставлениеНазначения = ПредставлениеНазначенияДляЗаписиВИнформационнуюБазу(
			ШаблонНазначения,
			РеквизитыДокумента);
		
		НазначениеОбъект = Справочники.Назначения.СоздатьЭлемент();
		НазначениеОбъект.УстановитьСсылкуНового(Назначение);
		
		НазначениеОбъект.НаправлениеДеятельности = ШаблонНазначения.НаправлениеДеятельности;
		НазначениеОбъект.Партнер                 = ШаблонНазначения.Партнер;
		НазначениеОбъект.Договор                 = ШаблонНазначения.Договор;
		НазначениеОбъект.Заказ                   = ШаблонНазначения.Заказ;
		НазначениеОбъект.ТипНазначения           = ШаблонНазначения.ТипНазначения;
		НазначениеОбъект.Наименование            = ПредставлениеНазначения;
		Если ЗначениеЗаполнено(ШаблонНазначения.Заказ) Тогда
			НазначениеОбъект.ПометкаУдаления    = РеквизитыДокумента.ПометкаУдаления;
            НазначениеОбъект.НалоговоеНазначение = РеквизитыДокумента.НалоговоеНазначение;
		КонецЕсли;
		НазначениеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиСправочника(Назначение, ШаблонНазначения, ЭтотОбъект, НалоговоеНазначение, ОбновитьНазначение = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Назначение,
        "Наименование, ПометкаУдаления, Заказ, НаправлениеДеятельности, Партнер, Договор, НалоговоеНазначение, ТипНазначения");
	
	Если РеквизитыНазначения.Наименование <> Неопределено Тогда
		
		ПредставлениеНазначения = ПредставлениеНазначенияДляЗаписиВИнформационнуюБазу(
			РеквизитыНазначения,
			Неопределено);
		
		ОбновитьПометкуУдаления    = РеквизитыНазначения.ПометкаУдаления <> ЭтотОбъект.ПометкаУдаления;
        ОбновитьНалоговоеНазначение = РеквизитыНазначения.НалоговоеНазначение <> НалоговоеНазначение;
		ОбновитьНаименование       = РеквизитыНазначения.Наименование <> ПредставлениеНазначения;
		
        Если ОбновитьНазначение Или ОбновитьПометкуУдаления Или ОбновитьНалоговоеНазначение Или ОбновитьНаименование Тогда
			
			НазначениеОбъект = Назначение.ПолучитьОбъект();
			
			Если ОбновитьПометкуУдаления Тогда
				НазначениеОбъект.ПометкаУдаления = ЭтотОбъект.ПометкаУдаления;
			КонецЕсли;
			
            Если ОбновитьНалоговоеНазначение Тогда
            	НазначениеОбъект.НалоговоеНазначение = НалоговоеНазначение;
            КонецЕсли;
			
			Если ОбновитьНаименование Тогда
				НазначениеОбъект.Наименование = ПредставлениеНазначения;
			КонецЕсли;
			НазначениеОбъект.Записать();
			
		КонецЕсли;
		
	Иначе // Это новое назначение
		
		ПредставлениеНазначения = ПредставлениеНазначенияДляЗаписиВИнформационнуюБазу(
			ШаблонНазначения,
			Неопределено);
		
		НазначениеОбъект = Справочники.Назначения.СоздатьЭлемент();
		НазначениеОбъект.УстановитьСсылкуНового(Назначение);
		
		НазначениеОбъект.НаправлениеДеятельности = ШаблонНазначения.НаправлениеДеятельности;
		НазначениеОбъект.Партнер                 = ШаблонНазначения.Партнер;
		НазначениеОбъект.Договор                 = ШаблонНазначения.Договор;
		НазначениеОбъект.Заказ                   = ШаблонНазначения.Заказ;
		НазначениеОбъект.ТипНазначения           = ШаблонНазначения.ТипНазначения;
		НазначениеОбъект.Наименование            = ПредставлениеНазначения;
		НазначениеОбъект.ПометкаУдаления         = ЭтотОбъект.ПометкаУдаления;
        НазначениеОбъект.НалоговоеНазначение      = НалоговоеНазначение;
		
		НазначениеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеНазначенияДляЗаписиВИнформационнуюБазу(КлючевыеПоля, РеквизитыДокумента) Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
	ПредставлениеНазначения = Неопределено;
	ПредставлениеТипаНазначения = Неопределено;
	
	Если ЗначениеЗаполнено(КлючевыеПоля.Заказ) И Не ЗначениеЗаполнено(КлючевыеПоля.Партнер) Тогда
		
		НомерЗаказа = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(РеквизитыДокумента.Номер);
		ДанныеЗаказа = Новый Структура("Представление, Номер", Строка(КлючевыеПоля.Заказ), РеквизитыДокумента.Номер);
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(КлючевыеПоля.Заказ);
		СинонимДляЗаписи = МенеджерОбъекта.ПредставлениеОбъектаНаОсновномЯзыке();
		
		Если ЗначениеЗаполнено(КлючевыеПоля.НаправлениеДеятельности) Тогда
			ПредставлениеНазначения = НСтр("ru='%Получатель%, %Номер%, %Дата% (%ПредставлениеЗаказа%, %НаправлениеДеятельности%)';uk='%Получатель%, %Номер%, %Дата% (%ПредставлениеЗаказа%, %НаправлениеДеятельности%)'");
		Иначе
			ПредставлениеНазначения = НСтр("ru='%Получатель%, %Номер%, %Дата% (%ПредставлениеЗаказа%)';uk='%Получатель%, %Номер%, %Дата% (%ПредставлениеЗаказа%)'");
		КонецЕсли;
		
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Получатель%",              РеквизитыДокумента.Получатель);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%ПредставлениеЗаказа%",     СинонимДляЗаписи);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Номер%",                   НомерЗаказа);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Дата%",                    Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%НаправлениеДеятельности%", КлючевыеПоля.НаправлениеДеятельности);
		
	ИначеЕсли ЗначениеЗаполнено(КлючевыеПоля.Заказ) И ЗначениеЗаполнено(КлючевыеПоля.Партнер) Тогда
		
		НомерЗаказа = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(РеквизитыДокумента.Номер);
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(КлючевыеПоля.Заказ);
		СинонимДляЗаписи = МенеджерОбъекта.ПредставлениеОбъектаНаОсновномЯзыке();
		
		Если ЗначениеЗаполнено(КлючевыеПоля.НаправлениеДеятельности) Тогда
			ПредставлениеНазначения = НСтр("ru='%Получатель%, %Номер%, %Дата% (%ПредставлениеЗаказа%, %НаправлениеДеятельности%, %ПартнерДоговор%)';uk='%Получатель%, %Номер%, %Дата% (%ПредставлениеЗаказа%, %НаправлениеДеятельности%, %ПартнерДоговор%)'");
		Иначе
			ПредставлениеНазначения = НСтр("ru='%Получатель%, %Номер%, %Дата% (%ПредставлениеЗаказа%, %ПартнерДоговор%)';uk='%Получатель%, %Номер%, %Дата% (%ПредставлениеЗаказа%, %ПартнерДоговор%)'");
		КонецЕсли;
		
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Получатель%",              РеквизитыДокумента.Получатель);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%ПредставлениеЗаказа%",     СинонимДляЗаписи);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Номер%",                   НомерЗаказа);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Дата%",                    Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%НаправлениеДеятельности%", КлючевыеПоля.НаправлениеДеятельности);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%ПартнерДоговор%",          ?(ЗначениеЗаполнено(КлючевыеПоля.Договор), КлючевыеПоля.Договор, КлючевыеПоля.Партнер));
		
	ИначеЕсли ЗначениеЗаполнено(КлючевыеПоля.Договор) Тогда
		
		ВыбранТипНазначенияОтличныйОтПоставкиПодПринципала = (ЗначениеЗаполнено(КлючевыеПоля.ТипНазначения) И НЕ КлючевыеПоля.ТипНазначения = Перечисления.ТипыНазначений.ПоставкаПодПринципала);
		Если ЗначениеЗаполнено(КлючевыеПоля.НаправлениеДеятельности) И ВыбранТипНазначенияОтличныйОтПоставкиПодПринципала Тогда 
			ПредставлениеНазначения = НСтр("ru='%ТипНазначения%: %Получатель% (%НаправлениеДеятельности%)';uk='%ТипНазначения%: %Получатель% (%НаправлениеДеятельности%)'");
		ИначеЕсли ЗначениеЗаполнено(КлючевыеПоля.НаправлениеДеятельности) Тогда
			ПредставлениеНазначения = НСтр("ru='%Получатель% (%НаправлениеДеятельности%)';uk='%Получатель% (%НаправлениеДеятельности%)'");
		ИначеЕсли ВыбранТипНазначенияОтличныйОтПоставкиПодПринципала Тогда
			ПредставлениеНазначения = НСтр("ru='%ТипНазначения%: %Получатель%';uk='%ТипНазначения%: %Получатель%'");
		Иначе
			ПредставлениеНазначения = НСтр("ru='%Получатель%';uk='%Получатель%'");
		КонецЕсли;
		
		Если КлючевыеПоля.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалы22 Тогда
			ПредставлениеТипаНазначения = НСтр("ru='Договор с давальцем';uk='Договір з давальцем'",КодОсновногоЯзыка);
		Иначе
			ПредставлениеТипаНазначения = НСтр("ru='Договор с переработчиком';uk='Договір з переробником'",КодОсновногоЯзыка);
		КонецЕсли;
		
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Получатель%",              КлючевыеПоля.Договор);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%НаправлениеДеятельности%", КлючевыеПоля.НаправлениеДеятельности);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%ТипНазначения%",           ПредставлениеТипаНазначения);
		
	ИначеЕсли ЗначениеЗаполнено(КлючевыеПоля.Партнер) Тогда
		
		Если ЗначениеЗаполнено(КлючевыеПоля.НаправлениеДеятельности) И ЗначениеЗаполнено(КлючевыеПоля.ТипНазначения) Тогда
			ПредставлениеНазначения = НСтр("ru='%ТипНазначения%: %Получатель% (%НаправлениеДеятельности%)';uk='%ТипНазначения%: %Получатель% (%НаправлениеДеятельности%)'");
		ИначеЕсли ЗначениеЗаполнено(КлючевыеПоля.НаправлениеДеятельности) Тогда
			ПредставлениеНазначения = НСтр("ru='%Получатель% (%НаправлениеДеятельности%)';uk='%Получатель% (%НаправлениеДеятельности%)'");
		ИначеЕсли ЗначениеЗаполнено(КлючевыеПоля.ТипНазначения) Тогда
			ПредставлениеНазначения = НСтр("ru='%ТипНазначения%: %Получатель%';uk='%ТипНазначения%: %Получатель%'");
		Иначе
			ПредставлениеНазначения = НСтр("ru='%Получатель%';uk='%Получатель%'");
		КонецЕсли;
		
		Если КлючевыеПоля.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалы22 Тогда
			ПредставлениеТипаНазначения = НСтр("ru='Давалец';uk='Давалець'",КодОсновногоЯзыка);
		Иначе
			ПредставлениеТипаНазначения = НСтр("ru='Переработчик';uk='Переробник'",КодОсновногоЯзыка);
		КонецЕсли;
		
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Получатель%",              КлючевыеПоля.Партнер);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%НаправлениеДеятельности%", КлючевыеПоля.НаправлениеДеятельности);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%ТипНазначения%",           ПредставлениеТипаНазначения);
		
	Иначе
		
		ПредставлениеНазначения = Строка(КлючевыеПоля.НаправлениеДеятельности);
		
	КонецЕсли;
	
	Если Лев(ПредставлениеНазначения, 2) = ", " Тогда
		ПредставлениеНазначения = Сред(ПредставлениеНазначения, 3);
	КонецЕсли;
	
	Возврат ПредставлениеНазначения;
	
КонецФункции

// Перед записью заказа давальца и в общей процедуре перед записью
Функция ШаблоныРавны(Шаблон1, Шаблон2) Экспорт
	
	Для Каждого Свойство Из Шаблон1 Цикл
		
		Если Шаблон1[Свойство.Ключ] <> Шаблон2[Свойство.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

// В каждом шаблоне, ШаблоныИзСсылок,  и в общей процедуре перед записью
Функция ШаблонНового() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	Результат.Вставить("Партнер",                 Справочники.Партнеры.ПустаяСсылка());
	Результат.Вставить("Договор",                 Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Результат.Вставить("Заказ",                   Неопределено);
	Результат.Вставить("ТипНазначения",           Перечисления.ТипыНазначений.Собственное);
	
	Возврат Результат;
	
КонецФункции

// При изменении направления деятельности сервер .ШаблонНазначения(
// назначений связанных с давальческим материалом, обновление назначений в форме заказа давальца и в общей процедуре
// перед записью.
Функция НайтиПоШаблону(Шаблон) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Назначения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|ГДЕ
	|	Назначения.НаправлениеДеятельности = &НаправлениеДеятельности
	|	И Назначения.Партнер = &Партнер
	|	И Назначения.Договор = &Договор
	|	И Назначения.Заказ = &Заказ
	|	И Назначения.ТипНазначения = &ТипНазначения";
	
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Шаблон.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("Партнер",                 Шаблон.Партнер);
	Запрос.УстановитьПараметр("Договор",                 Шаблон.Договор);
	Запрос.УстановитьПараметр("Заказ",                   Шаблон.Заказ);
	Запрос.УстановитьПараметр("ТипНазначения",           Шаблон.ТипНазначения);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьБлокировкуПоШаблону(Шаблон) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.Назначения");
	Для каждого ПолеШаблона Из Шаблон Цикл
		ЭлементБлокировки.УстановитьЗначение(ПолеШаблона.Ключ, ПолеШаблона.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыборНазначенийВДокументах


// Макет описания колонок
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * КолонкиНеотключаемые - Массив - неотключаемые колонки
// * КолонкиПоУмолчанию - Массив - колонки по умолчанию
// * Колонки - СписокЗначений - колонки
// * ПутиКДанным - Структура - пути к данным
// * ПутьКПолюНазначение - Строка - путь к полю Назначение
// * Отказ - Булево - отказ
// * УсловиеИспользования - Строка - условие использования
// * ТекстЗапроса - Строка - текст запроса
// * Префикс - Строка - префикс
Функция МакетОписанияКолонок()
	
	ОписаниеКолонок = Новый Структура();
	
	// Уникальное имя источника данных. По умолчанию равен названию источника данных.
	// Если один и тот же источник используется больше одного раза,
	// каждому из них следует указать индивидуальный префикс.
	ОписаниеКолонок.Вставить("Префикс",              "");
	
	// Текст запроса источника данных
	ОписаниеКолонок.Вставить("ТекстЗапроса",         "");
	
	// Выражение, определяющее отображать ли колонки заданные текущим макетом.
	// Например "Объект.Продукция.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)".
	ОписаниеКолонок.Вставить("УсловиеИспользования", "");
	
	// Признак который заполняется по определенным правилам, в методе добавления описания колонок.
	ОписаниеКолонок.Вставить("Отказ",                Ложь);
	
	// Например "Объект.Назначение", или "Объект.Товары.Назначение".
	ОписаниеКолонок.Вставить("ПутьКПолюНазначение",  "");
	
	// Пути к данным - параметры запроса, значения которых будут получены из контекста документа.
	// Ключ - имя параметра запроса, Значение - Источник значения, например "Объект.Склад".
	ОписаниеКолонок.Вставить("ПутиКДанным",          Новый Структура);
	
	// Колонки которые могут быть показаны в списке выбора.
	// Важно - порядок добавления колонок в список должен совпадать с порядком выбираемых полей в запросе.
	ОписаниеКолонок.Вставить("Колонки",              Новый СписокЗначений);
	
	// Массив имен колонок которые необходимо показать пользователю сразу при открытии формы.
	ОписаниеКолонок.Вставить("КолонкиПоУмолчанию",   Новый Массив);
	
	// Массив имен колонок отключение которых не доступно пользователю.
	ОписаниеКолонок.Вставить("КолонкиНеотключаемые", Новый Массив);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ДобавитьОписаниеВсеНазначения(МакетФормы)
	
	Префикс = "ВсеНазначения";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Назначения.Ссылка КАК Назначение
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|ГДЕ
	|	НЕ Назначения.ПометкаУдаления";
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ДобавитьОписаниеОбеспечениеЗаказовПоВалюте(МакетФормы, ДобавитьСторно, Префикс)
	
	Префикс = ?(ПустаяСтрока(Префикс), "ОбеспечениеЗаказовПоВалюте", Префикс);
	
	ТекстЗапроса = 
	"// Запрос метода ""ДобавитьОписаниеОбеспечениеЗаказовПоВалюте""
	|// Префикс
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Назначение             КАК Назначение,
	|	//&ПоляВыбораПредшествующие
	|	ТаблицаОстатки.НаличиеПодЗаказОстаток КАК ПрефиксВНаличии,
	|	ТаблицаОстатки.КЗаказуОстаток         КАК ПрефиксПотребность,
	|	ТаблицаОстатки.ПотребностьОстаток     КАК ПрефиксАрхивное
	|	//&ПоляВыбораПоследующие
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
	|		Номенклатура     = &ПрефиксНоменклатура
	|		И (Назначение.Договор.ВалютаВзаиморасчетов = &ПрефиксВалюта
	|			ИЛИ Назначение.ТипНазначения <> ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПоставкаПодПринципала))
	|		И Склад          = &ПрефиксСклад
	|		{Характеристика  = &ПрефиксХарактеристика}) КАК ТаблицаОстатки";
	
	Если ДобавитьСторно Тогда
		ТекстЗапроса = ДобавитьСторноЗапроса(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Префикс", Префикс + "_");
	
	ПутиКДанным = Новый Структура();
	
	ПутиКДанным.Вставить("Номенклатура");
	ПутиКДанным.Вставить("Характеристика");
	ПутиКДанным.Вставить("Склад");
	ПутиКДанным.Вставить("Валюта");
	
	Если ДобавитьСторно Тогда
		ПутиКДанным.Вставить("Регистратор", "Объект.Ссылка");
	КонецЕсли;
	
	// Формирование списка колонок, которые могут быть выведены в список назначений
	
	ПараметрПредставления = "%" + Префикс + "_Склад%";
	
	ПредставлениеПотребность     = СтрШаблон(НСтр("ru='Потребность на складе ""%1""';uk='Потреба на складі ""%1""'"),   ПараметрПредставления);
	ПредставлениеВНаличии        = СтрШаблон(НСтр("ru='В наличии на складе ""%1""';uk='В наявності на складі ""%1""'"),     ПараметрПредставления);
	ПредставлениеАрхивныеОстатки = СтрШаблон(НСтр("ru='Архивные остатки склада ""%1""';uk='Архівні залишки складу ""%1""'"), ПараметрПредставления);
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("ВНаличии",    ПредставлениеВНаличии,        Ложь);
	Колонки.Добавить("Потребность", ПредставлениеПотребность,     Ложь);
	Колонки.Добавить("Архивное",    ПредставлениеАрхивныеОстатки, Ложь);
	
	КолонкиПоУмолчанию = Новый Массив();
	КолонкиПоУмолчанию.Добавить("Потребность");
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	ОписаниеКолонок.ПутиКДанным           = ПутиКДанным;
	ОписаниеКолонок.Колонки               = Колонки;
	ОписаниеКолонок.КолонкиПоУмолчанию    = КолонкиПоУмолчанию;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ДобавитьОписаниеОбеспечениеЗаказовРаботамиПоВалюте(МакетФормы, ДобавитьСторно, Префикс)
	
	Префикс = ?(ПустаяСтрока(Префикс), "ОбеспечениеЗаказовРаботамиПоВалюте", Префикс);
	
	ТекстЗапроса = 
	"// Запрос метода ""ДобавитьОписаниеОбеспечениеЗаказовРаботамиПоВалюте""
	|// Префикс
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Назначение          КАК Назначение,
	|	//&ПоляВыбораПредшествующие
	|	ТаблицаОстатки.КОбеспечениюОстаток КАК ПрефиксПотребность
	|	//&ПоляВыбораПоследующие
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказовРаботами.Остатки(,
	|		Подразделение    = &ПрефиксПодразделение
	|		И Номенклатура   = &ПрефиксНоменклатура
	|		И (Назначение.Договор.ВалютаВзаиморасчетов = &ПрефиксВалюта
	|			ИЛИ Назначение.ТипНазначения <> ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПоставкаПодПринципала))
	|		{Характеристика  = &ПрефиксХарактеристика}) КАК ТаблицаОстатки";
	
	Если ДобавитьСторно Тогда
		ТекстЗапроса = ДобавитьСторноЗапроса(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Префикс", Префикс + "_");
	
	ПутиКДанным = Новый Структура();
	
	ПутиКДанным.Вставить("Подразделение");
	ПутиКДанным.Вставить("Номенклатура");
	ПутиКДанным.Вставить("Характеристика");
	ПутиКДанным.Вставить("Валюта");
	
	Если ДобавитьСторно Тогда
		ПутиКДанным.Вставить("Регистратор", "Объект.Ссылка");
	КонецЕсли;
	
	// Формирование списка колонок, которые могут быть выведены в список назначений
	
	ПараметрПредставления = "%" + Префикс + "_Подразделение%";
	
	ПредставлениеПотребность = СтрШаблон(НСтр("ru='Потребность в подразделении ""%1""';uk='Потреба в підрозділі ""%1""'"), ПараметрПредставления);
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("Потребность", ПредставлениеПотребность, Ложь);
	
	КолонкиПоУмолчанию = Новый Массив();
	КолонкиПоУмолчанию.Добавить("Потребность");
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	ОписаниеКолонок.ПутиКДанным           = ПутиКДанным;
	ОписаниеКолонок.Колонки               = Колонки;
	ОписаниеКолонок.КолонкиПоУмолчанию    = КолонкиПоУмолчанию;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ДобавитьОписаниеДанныеРеализации(МакетФормы, Префикс)
	
	Префикс = ?(ПустаяСтрока(Префикс), "ДанныеРеализации", Префикс);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Назначение КАК Назначение,
	|	СУММА(ВложенныйЗапрос.Количество) КАК ПрефиксРеализовано
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Назначение КАК Назначение,
	|		ТаблицаТовары.Количество КАК Количество
	|	ИЗ
	|		Документ.КорректировкаРеализации.Товары КАК ТаблицаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|			ПО ТаблицаТовары.Ссылка.МоментВремени < КорректировкаРеализации.МоментВремени
	|				И (КорректировкаРеализации.Проведен)
	|				И (КорректировкаРеализации.ДокументОснование = &ПрефиксДокументРеализации)
	|				И (НЕ КорректировкаРеализации.ВидКорректировки В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара)))
	|	ГДЕ
	|		ТаблицаТовары.Ссылка.Проведен
	|		И ТаблицаТовары.Ссылка.ДокументОснование = &ПрефиксДокументРеализации
	|		И НЕ ТаблицаТовары.Ссылка.ВидКорректировки В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара))
	|		И КорректировкаРеализации.Ссылка ЕСТЬ NULL
	|		И ТаблицаТовары.Номенклатура = &ПрефиксНоменклатура
	|		И ТаблицаТовары.Характеристика = &ПрефиксХарактеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Номенклатура,
	|		ТаблицаТовары.Характеристика,
	|		ТаблицаТовары.Назначение,
	|		ТаблицаТовары.Количество
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|			ПО ТаблицаТовары.Ссылка = КорректировкаРеализации.ДокументОснование
	|				И (КорректировкаРеализации.Проведен)
	|				И (НЕ КорректировкаРеализации.ВидКорректировки В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара)))
	|	ГДЕ
	|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
	|		И ТаблицаТовары.Ссылка = &ПрефиксДокументРеализации
	|		И ТаблицаТовары.Номенклатура = &ПрефиксНоменклатура
	|		И ТаблицаТовары.Характеристика = &ПрефиксХарактеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыДокументаВозврата.Номенклатура,
	|		ТоварыДокументаВозврата.Характеристика,
	|		ТоварыДокументаВозврата.Назначение,
	|		-ТоварыДокументаВозврата.Количество
	|	ИЗ
	|		Документ.ВозвратТоваровОтКлиента.Товары КАК ТоварыДокументаВозврата
	|	ГДЕ
	|		ТоварыДокументаВозврата.Ссылка.Проведен
	|		И ТоварыДокументаВозврата.Ссылка <> &ПрефиксДокументВозврата
	|		И ТоварыДокументаВозврата.ДокументРеализации = &ПрефиксДокументРеализации
	|		И ТоварыДокументаВозврата.Номенклатура = &ПрефиксНоменклатура
	|		И ТоварыДокументаВозврата.Характеристика = &ПрефиксХарактеристика) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Назначение
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Количество) > 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Префикс", Префикс + "_");
	
	ПутиКДанным = Новый Структура();
	
	ПутиКДанным.Вставить("ДокументРеализации");
	ПутиКДанным.Вставить("Номенклатура");
	ПутиКДанным.Вставить("Характеристика");
	ПутиКДанным.Вставить("ДокументВозврата", "Объект.Ссылка");
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("Реализовано", НСтр("ru='Реализовано';uk='Реалізовано'"), Истина);
	
	КолонкиПоУмолчанию = Новый Массив();
	КолонкиПоУмолчанию.Добавить("Реализовано");
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	ОписаниеКолонок.ПутиКДанным           = ПутиКДанным;
	ОписаниеКолонок.Колонки               = Колонки;
	ОписаниеКолонок.КолонкиПоУмолчанию    = КолонкиПоУмолчанию;
	ОписаниеКолонок.КолонкиНеотключаемые  = КолонкиПоУмолчанию;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ДобавитьОписаниеОбеспечениеЗаказов(МакетФормы, ДобавитьСторно, Префикс)
	
	Префикс = ?(ПустаяСтрока(Префикс), "ОбеспечениеЗаказов", Префикс);
	
	ТекстЗапроса = 
	"// Запрос метода ""ДобавитьОписаниеОбеспечениеЗаказов""
	|// Префикс
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Назначение             КАК Назначение,
	|	//&ПоляВыбораПредшествующие
	|	ТаблицаОстатки.НаличиеПодЗаказОстаток КАК ПрефиксВНаличии,
	|	ТаблицаОстатки.КЗаказуОстаток         КАК ПрефиксПотребность,
	|	ТаблицаОстатки.ПотребностьОстаток     КАК ПрефиксАрхивное
	|	//&ПоляВыбораПоследующие
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
	|		Номенклатура     = &ПрефиксНоменклатура
	|		{Характеристика  = &ПрефиксХарактеристика}
	|		И Склад          = &ПрефиксСклад) КАК ТаблицаОстатки";
	
	Если ДобавитьСторно Тогда
		ТекстЗапроса = ДобавитьСторноЗапроса(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Префикс", Префикс + "_");
	
	ПутиКДанным = Новый Структура();
	
	ПутиКДанным.Вставить("Номенклатура");
	ПутиКДанным.Вставить("Характеристика");
	ПутиКДанным.Вставить("Склад");
	
	Если ДобавитьСторно Тогда
		ПутиКДанным.Вставить("Регистратор", "Объект.Ссылка");
	КонецЕсли;
	
	// Формирование списка колонок, которые могут быть выведены в список назначений
	
	ПараметрПредставления = "%" + Префикс + "_Склад%";
	
	ПредставлениеПотребность     = СтрШаблон(НСтр("ru='Потребность на складе ""%1""';uk='Потреба на складі ""%1""'"),   ПараметрПредставления);
	ПредставлениеВНаличии        = СтрШаблон(НСтр("ru='В наличии на складе ""%1""';uk='В наявності на складі ""%1""'"),     ПараметрПредставления);
	ПредставлениеАрхивныеОстатки = СтрШаблон(НСтр("ru='Архивные остатки склада ""%1""';uk='Архівні залишки складу ""%1""'"), ПараметрПредставления);
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("ВНаличии",    ПредставлениеВНаличии,        Ложь);
	Колонки.Добавить("Потребность", ПредставлениеПотребность,     Ложь);
	Колонки.Добавить("Архивное",    ПредставлениеАрхивныеОстатки, Ложь);
	
	КолонкиПоУмолчанию = Новый Массив();
	КолонкиПоУмолчанию.Добавить("Потребность");
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	ОписаниеКолонок.ПутиКДанным           = ПутиКДанным;
	ОписаниеКолонок.Колонки               = Колонки;
	ОписаниеКолонок.КолонкиПоУмолчанию    = КолонкиПоУмолчанию;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ДобавитьОписаниеОбеспечениеЗаказовВсеСклады(МакетФормы, ДобавитьСторно, Префикс)
	
	Префикс = ?(ПустаяСтрока(Префикс), "ОбеспечениеЗаказовВсеСклады", Префикс);
	
	Отказ = Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов")
			Или Не(ПолучитьФункциональнуюОпцию("РазрешитьОбособлениеТоваровСверхПотребности")
					Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности"));
	
	ТекстЗапроса = 
	"// Запрос метода ""ДобавитьОписаниеОбеспечениеЗаказовВсеСклады""
	|// Префикс
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Назначение             КАК Назначение,
	|	//&ПоляВыбораПредшествующие
	|	ТаблицаОстатки.НаличиеПодЗаказОстаток КАК ПрефиксВНаличии,
	|	ТаблицаОстатки.КЗаказуОстаток         КАК ПрефиксПотребность,
	|	ТаблицаОстатки.ПотребностьОстаток     КАК ПрефиксАрхивное
	|	//&ПоляВыбораПоследующие
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
	|		Номенклатура     = &ПрефиксНоменклатура
	|		{Характеристика = &ПрефиксХарактеристика}) КАК ТаблицаОстатки";
	
	Если ДобавитьСторно Тогда
		ТекстЗапроса = ДобавитьСторноЗапроса(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Префикс", Префикс + "_");
	
	ПутиКДанным = Новый Структура();
	
	ПутиКДанным.Вставить("Номенклатура");
	ПутиКДанным.Вставить("Характеристика");
	
	Если ДобавитьСторно Тогда
		ПутиКДанным.Вставить("Регистратор", "Объект.Ссылка");
	КонецЕсли;
	
	// Формирование списка колонок, которые могут быть выведены в список назначений
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("ВНаличии",    НСтр("ru='В наличии на всех складах';uk='В наявності на всіх складах'"), Ложь);
	Колонки.Добавить("Потребность", НСтр("ru='Потребность на всех складах';uk='Потреба на всіх складах'"), Ложь);
	Колонки.Добавить("Архивное",    НСтр("ru='Архивные остатки на всех складах';uk='Архівні залишки на всіх складах'"), Ложь);
	
	КолонкиПоУмолчанию = Новый Массив();
	КолонкиПоУмолчанию.Добавить("Потребность");
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	ОписаниеКолонок.ПутиКДанным           = ПутиКДанным;
	ОписаниеКолонок.Колонки               = Колонки;
	ОписаниеКолонок.КолонкиПоУмолчанию    = КолонкиПоУмолчанию;
	ОписаниеКолонок.Отказ                 = Отказ;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ДобавитьОписаниеОбеспечениеЗаказовРаботами(МакетФормы, ДобавитьСторно, Префикс)
	
	Префикс = ?(ПустаяСтрока(Префикс), "ОбеспечениеЗаказовРаботами", Префикс);
	
	ТекстЗапроса = 
	"// Запрос метода ""ДобавитьОписаниеОбеспечениеЗаказовРаботами""
	|// Префикс
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Назначение          КАК Назначение,
	|	//&ПоляВыбораПредшествующие
	|	ТаблицаОстатки.КОбеспечениюОстаток КАК ПрефиксПотребность
	|	//&ПоляВыбораПоследующие
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказовРаботами.Остатки(,
	|		Подразделение    = &ПрефиксПодразделение
	|		И Номенклатура   = &ПрефиксНоменклатура
	|		{Характеристика  = &ПрефиксХарактеристика}) КАК ТаблицаОстатки";
	
	Если ДобавитьСторно Тогда
		ТекстЗапроса = ДобавитьСторноЗапроса(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Префикс", Префикс + "_");
	
	ПутиКДанным = Новый Структура();
	
	ПутиКДанным.Вставить("Подразделение");
	ПутиКДанным.Вставить("Номенклатура");
	ПутиКДанным.Вставить("Характеристика");
	
	Если ДобавитьСторно Тогда
		ПутиКДанным.Вставить("Регистратор", "Объект.Ссылка");
	КонецЕсли;
	
	// Формирование списка колонок, которые могут быть выведены в список назначений
	
	ПараметрПредставления = "%" + Префикс + "_Подразделение%";
	
	ПредставлениеПотребность = СтрШаблон(НСтр("ru='Потребность в подразделении ""%1""';uk='Потреба в підрозділі ""%1""'"), ПараметрПредставления);
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("Потребность", ПредставлениеПотребность, Ложь);
	
	КолонкиПоУмолчанию = Новый Массив();
	КолонкиПоУмолчанию.Добавить("Потребность");
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	ОписаниеКолонок.ПутиКДанным           = ПутиКДанным;
	ОписаниеКолонок.Колонки               = Колонки;
	ОписаниеКолонок.КолонкиПоУмолчанию    = КолонкиПоУмолчанию;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ДобавитьСторноЗапроса(ТекстЗапроса)
	
	УсловиеПоРегистратору = 
	"
	|ГДЕ
	|	ТаблицаСторно.Регистратор = &ПрефиксРегистратор";
	
	ТекстЗапросаСторно = СтрЗаменить(ТекстЗапроса, "Остатки(,", "Обороты(, , Регистратор,");
	ТекстЗапросаСторно = СтрЗаменить(ТекстЗапросаСторно, "ТаблицаОстатки", "ТаблицаСторно");
	ТекстЗапросаСторно = СтрЗаменить(ТекстЗапросаСторно, "Остаток", "Оборот");
	
	ТекстЗапросаСторно = СтрЗаменить(ТекстЗапросаСторно, "КАК ТаблицаСторно", "КАК ТаблицаСторно" + УсловиеПоРегистратору);
	
	// Добавить знак "-" перед выборкой числовых полей
	ПозицияПоиска = СтрДлина(ТекстЗапросаСторно);
	КонецЧисловойСтроки = СтрНайти(ТекстЗапросаСторно, "КАК Префикс", НаправлениеПоиска.СКонца, ПозицияПоиска);
	
	Пока КонецЧисловойСтроки > 0 Цикл
		НачалоЧисловойСтроки = СтрНайти(ТекстЗапросаСторно, "ТаблицаСторно.", НаправлениеПоиска.СКонца, КонецЧисловойСтроки);
		
		ЛеваяЧасть = Лев(ТекстЗапросаСторно, НачалоЧисловойСтроки - 1);
		ПраваяЧасть = Прав(ТекстЗапросаСторно, СтрДлина(ТекстЗапросаСторно) - НачалоЧисловойСтроки + 1);
		
		ТекстЗапросаСторно = ЛеваяЧасть + "-" + ПраваяЧасть;
		
		ПозицияПоиска = НачалоЧисловойСтроки - 1;
		КонецЧисловойСтроки  = СтрНайти(ТекстЗапросаСторно, "КАК Префикс", НаправлениеПоиска.СКонца, ПозицияПоиска);
	КонецЦикла;
	
	Возврат ТекстЗапроса
		+ ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()
		+ ТекстЗапросаСторно;

КонецФункции

Функция НайтиЭлементФормы(Форма, ПутьКДанным)
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Элемент Из Форма.Элементы Цикл
		Если (ТипЗнч(Элемент) = Тип("ПолеФормы") Или ТипЗнч(Элемент) = Тип("ТаблицаФормы"))
			И Элемент.ПутьКДанным = ПутьКДанным Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	ПутьКДаннымБезОбъекта = СтрЗаменить(ПутьКДанным, "Объект.", "");
	Для каждого Элемент Из Форма.Элементы Цикл
		Если (ТипЗнч(Элемент) = Тип("ПолеФормы") Или ТипЗнч(Элемент) = Тип("ТаблицаФормы"))
			И Элемент.ПутьКДанным = ПутьКДаннымБезОбъекта Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтрШаблон(НСтр("ru='Не найден элемент формы с путем к данным: %1';uk='Не знайдено елемент форми з шляхом до даних: %1'"), ПутьКДанным);
	
КонецФункции

// Преобразует входящий параметр, например:
//  Объект.Склад -> Объект.Склад
//  Объект.Товары.Номенклатура -> Элементы.Товары.ТекущиеДанные.Номенклатура
// Параметры:
//  ВыражениеОбъекта - Строка - 
// 
// Возвращаемое значение:
//   - Строка
//
Функция СформироватьПутьКДанным(ВыражениеОбъекта, ПутьКТабЧасти, ТаблицаФормы)
	
	ЭтоОбращениеКТабличнойЧасти = ?(ПутьКТабЧасти = "", 0, СтрНайти(ВыражениеОбъекта, ПутьКТабЧасти));
	ВыражениеОбъектаБезОбращенияКИБ = СтрРазбитьПоТочкеОбращенияКИБ(ВыражениеОбъекта, ЭтоОбращениеКТабличнойЧасти).ПутьКДанным;
	
	Если ЭтоОбращениеКТабличнойЧасти Тогда
		
		ПутьКДанным = СтрЗаменить(ВыражениеОбъектаБезОбращенияКИБ, ПутьКТабЧасти,
			"Элементы." + ТаблицаФормы.Имя + ".ТекущиеДанные");
		
	Иначе
		
		ПутьКДанным = ВыражениеОбъектаБезОбращенияКИБ;
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ВыраженияПутейКДаннымУсловийИспользования(УсловиеИспользования)
	
	ЕстьСпецСимвол = СтрНайти(УсловиеИспользования, "&") <> 0;
	
	ПодстрокиВыражений = ?(ЕстьСпецСимвол,
		СтрРазделить(УсловиеИспользования, "&", Ложь),
		СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УсловиеИспользования, "Объект.", Истина));
	
	Массив = Новый Массив();
	
	Для Каждого Строка Из ПодстрокиВыражений Цикл
		
		Если Не ЕстьСпецСимвол Тогда
			Строка = "Объект." + Строка;
		КонецЕсли;
		
		Массив.Добавить(Сред(Строка, 1, СтрНайти(Строка, " ") - 1));
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

//++ НЕ УТ

Функция ДобавитьОписаниеМатериалыИРаботыВПроизводстве(МакетФормы, ДобавитьСторно, Префикс)
	
	Префикс = ?(ПустаяСтрока(Префикс), "МатериалыИРаботыВПроизводстве", Префикс);
	
	ТекстЗапроса = 
	"// Запрос метода ""ДобавитьОписаниеМатериалыИРаботыВПроизводстве""
	|// Префикс
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Назначение        КАК Назначение,
	|	//&ПоляВыбораПредшествующие
	|	ТаблицаОстатки.КоличествоОстаток КАК ПрефиксКоличество
	|	//&ПоляВыбораПоследующие
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(,
	|		Назначение       <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Организация    = &ПрефиксОрганизация
	|		{Подразделение   = &ПрефиксПодразделение}
	|		И Номенклатура   = &ПрефиксНоменклатура
	|		{Характеристика  = &ПрефиксХарактеристика}) КАК ТаблицаОстатки";
	
	Если ДобавитьСторно Тогда
		ТекстЗапроса = ТекстЗапроса
		+ ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()
		+ "ВЫБРАТЬ
		|	ТаблицаСторно.Назначение       КАК Назначение,
		|	//&ПоляВыбораПредшествующие
		|	ТаблицаСторно.КоличествоОборот КАК ПрефиксКоличество
		|	//&ПоляВыбораПоследующие
		|ИЗ
		|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Обороты(, , Регистратор,
		|		Назначение       <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И Организация    = &ПрефиксОрганизация
		|		{Подразделение  = &ПрефиксПодразделение}
		|		И Номенклатура   = &ПрефиксНоменклатура
		|		{Характеристика = &ПрефиксХарактеристика}
		|		) КАК ТаблицаСторно
		|ГДЕ
		|	ТаблицаСторно.Регистратор = &ПрефиксРегистратор";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Префикс", Префикс + "_");
	
	ПутиКДанным = Новый Структура();
	
	ПутиКДанным.Вставить("Номенклатура");
	ПутиКДанным.Вставить("Характеристика");
	ПутиКДанным.Вставить("Подразделение");
	ПутиКДанным.Вставить("Организация");
	
	Если ДобавитьСторно Тогда
		ПутиКДанным.Вставить("Регистратор", "Объект.Ссылка");
	КонецЕсли;
	
	// Формирование списка колонок, которые могут быть выведены в список назначений
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("Количество", НСтр("ru='Количество в производстве';uk='Кількість у виробництві'"), Ложь);
	
	КолонкиПоУмолчанию = Новый Массив();
	КолонкиПоУмолчанию.Добавить("Количество");
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	ОписаниеКолонок.ПутиКДанным           = ПутиКДанным;
	ОписаниеКолонок.Колонки               = Колонки;
	ОписаниеКолонок.КолонкиПоУмолчанию    = КолонкиПоУмолчанию;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

//-- НЕ УТ

Функция ДобавитьОписаниеДанныеПередачи(МакетФормы, Префикс)
	
	Префикс = ?(ПустаяСтрока(Префикс), "ДанныеПередачи", Префикс);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Назначение        КАК Назначение,
	|	СУММА(ВложенныйЗапрос.Количество) КАК ПрефиксПередано
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Назначение     КАК Назначение,
	|		ТаблицаТовары.Количество     КАК Количество
	|	ИЗ
	|		Документ.ПередачаТоваровХранителю.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка.Проведен
	|		И ТаблицаТовары.Ссылка.Договор = &ПрефиксДоговор
	|		И ТаблицаТовары.Номенклатура = &ПрефиксНоменклатура
	|		И ТаблицаТовары.Характеристика = &ПрефиксХарактеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Назначение     КАК Назначение,
	|		-ТаблицаТовары.Количество    КАК Количество
	|	ИЗ
	|		Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка.Проведен
	|		И ТаблицаТовары.Ссылка <> &ПрефиксДокументПоступления
	|		И ТаблицаТовары.Ссылка.Договор = &ПрефиксДоговор
	|		И ТаблицаТовары.Номенклатура = &ПрефиксНоменклатура
	|		И ТаблицаТовары.Характеристика = &ПрефиксХарактеристика) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Назначение
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Количество) > 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Префикс", Префикс + "_");
	
	ПутиКДанным = Новый Структура();
	
	ПутиКДанным.Вставить("Номенклатура");
	ПутиКДанным.Вставить("Характеристика");
	ПутиКДанным.Вставить("ДокументПоступления", "Объект.Ссылка");
	ПутиКДанным.Вставить("Договор",             "Объект.Договор");
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("Передано", НСтр("ru='Передано';uk='Передано'"), Истина);
	
	КолонкиПоУмолчанию = Новый Массив();
	КолонкиПоУмолчанию.Добавить("Передано");
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс              = Префикс;
	ОписаниеКолонок.ТекстЗапроса         = ТекстЗапроса;
	ОписаниеКолонок.ПутиКДанным          = ПутиКДанным;
	ОписаниеКолонок.Колонки              = Колонки;
	ОписаниеКолонок.КолонкиПоУмолчанию   = КолонкиПоУмолчанию;
	ОписаниеКолонок.КолонкиНеотключаемые = КолонкиПоУмолчанию;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция СформироватьТекстЗапросаДанныеВыбора(МакетФормыНазначений, ПараметрыЗапроса)
	
	УсловияНазначения = Новый Массив();
	Для Каждого ШаблонНазначения Из МакетФормыНазначений.ШаблоныНазначений Цикл
		
		ВключатьВИтоговыйЗапрос = ПроверитьУсловиеИспользования("",
			ШаблонНазначения.УсловиеИспользования,
			ПараметрыЗапроса,
			ШаблонНазначения.ПутьКПолюНазначение);
		
		Если Не ВключатьВИтоговыйЗапрос Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПолеОтбора Из ШаблонНазначения Цикл
			
			Если ЗначениеЗаполнено(ПолеОтбора.Значение)
				И ПолеОтбора.Ключ <> "УсловиеИспользования"
				И ПолеОтбора.Ключ <> "ВидимыеОтборыНаФорме"
				И ПолеОтбора.Ключ <> "ТипыНазначений"
				И ПолеОтбора.Ключ <> "ПутьКПолюНазначение" Тогда
				
				Если ПолеОтбора.Ключ = "НаправлениеДеятельности"
					И (СтрНайти(ПолеОтбора.Значение, "Объект.") <> 0
						Или СтрНайти(ПолеОтбора.Значение, "&") <> 0) Тогда
					
					Если НЕ ПараметрыЗапроса.Свойство("НаправлениеДеятельности") 
						ИЛИ НЕ НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(ПараметрыЗапроса.НаправлениеДеятельности) Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрНайти(ПолеОтбора.Значение, "Объект.") <> 0
					Или СтрНайти(ПолеОтбора.Значение, "&") <> 0 Тогда
					Условие = "Назначения." + ПолеОтбора.Ключ + " = " + "&" + ПолеОтбора.Ключ
				Иначе
					Условие = "Назначения." + ПолеОтбора.Ключ + " = (" + ПолеОтбора.Значение + ")";
				КонецЕсли;
				УсловияНазначения.Добавить(Условие);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ДобавитьУсловиеИсключенияПартнера(УсловияНазначения, "Назначения");
	
	УсловияНазначения.Добавить("Назначения.ТипНазначения В (&ТипыНазначений)");
	ТекстЗапросаГде = ?(УсловияНазначения.Количество() > 0,
		"И " + СтрСоединить(УсловияНазначения, Символы.ПС + "	И "),
		"");
		
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	Назначения.Ссылка КАК Назначение
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|ГДЕ
	|	НЕ Назначения.ПометкаУдаления
	|		И НЕ Назначения.Заказ = &Источник
	|		И Назначения.Наименование ПОДОБНО &СтрокаПоиска
	|	//&Условия";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Условия", ТекстЗапросаГде);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьЗначениеПараметраИзИБ(ИсточникПараметровПолучаемыхИзИБ, ИсточникПараметров)
	
	Для Каждого Элемент Из ИсточникПараметровПолучаемыхИзИБ Цикл
		
		ЗначениеРеквизита = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникПараметров[Элемент.Значение.ИмяПараметра],
			Элемент.Значение.ОбращениеКИБ);
		
		Элемент.Значение.Значение = ЗначениеРеквизита[Элемент.Значение.ОбращениеКИБ];
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсточникПараметровПолучаемыхИзИБ(Префикс, УсловиеИспользования, ПутьКПолюНазначение, Результат)
	
	ЕстьСпецСимвол = СтрНайти(УсловиеИспользования, "&") <> 0;
	
	ПодстрокиВыражений = ?(ЕстьСпецСимвол,
		СтрРазделить(УсловиеИспользования, "&", Ложь),
		СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УсловиеИспользования, "Объект.", Истина));
	
	Для Каждого ПодстрокаВыражения Из ПодстрокиВыражений Цикл
		
		Если Не ЕстьСпецСимвол Тогда
			ПодстрокаВыражения = "Объект." + ПодстрокаВыражения;
		КонецЕсли;
		
		ВыражениеОбъекта = Сред(ПодстрокаВыражения, 1, СтрНайти(ПодстрокаВыражения, " ") - 1);
		
		ПутьКТабЧасти = Лев(ПутьКПолюНазначение, Макс(СтрНайти(ПутьКПолюНазначение, ".", , , 2) - 1, 0));
		ЭтоОбращениеКТабличнойЧасти = ?(ПутьКТабЧасти = "", 0, СтрНайти(ВыражениеОбъекта, ПутьКТабЧасти));
		РезультатРазбиения = СтрРазбитьПоТочкеОбращенияКИБ(ВыражениеОбъекта, ЭтоОбращениеКТабличнойЧасти);
		
		Если РезультатРазбиения.ОбращениеКИБ <> "" Тогда
			
			НачалоПоследнегоСлова = СтрНайти(ВыражениеОбъекта, ".", НаправлениеПоиска.СКонца);
			ПоследнееСлово = Сред(ВыражениеОбъекта, НачалоПоследнегоСлова + 1);
			
			ЛеваяЧастьИмениПараметра = ?(ЗначениеЗаполнено(Префикс), Префикс + "_", "");
			ИмяПараметраСОбращениемКИБ = ЛеваяЧастьИмениПараметра + ПоследнееСлово;
			ИмяПараметраСОбращениемКИБ = СокрЛП(ИмяПараметраСОбращениемКИБ);
			
			ВыражениеОбъекта = РезультатРазбиения.ПутьКДанным;
			
			НачалоПоследнегоСлова = СтрНайти(ВыражениеОбъекта, ".", НаправлениеПоиска.СКонца);
			ПоследнееСлово = Сред(ВыражениеОбъекта, НачалоПоследнегоСлова + 1);
			ИмяПараметра = ЛеваяЧастьИмениПараметра + ПоследнееСлово;
			ИмяПараметра = СокрЛП(ИмяПараметра);
			
			ПараметрыПолученияЗначения = Новый Структура("ИмяПараметра, ОбращениеКИБ, Значение", ИмяПараметра, РезультатРазбиения.ОбращениеКИБ);
			Результат.Вставить(ИмяПараметраСОбращениемКИБ, ПараметрыПолученияЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтрРазбитьПоТочкеОбращенияКИБ(ПутьКДанным, ЭтоОбращениеКТабличнойЧасти)
	
	РезультатРазбиения = Новый Структура("ПутьКДанным, ОбращениеКИБ", "", "");
	
	// Путь к данным нужно обрезать, чтобы в него не попали обращения через точку от данных к ИБ.
	НомерТочкиОбращенияКИБ = ?(ЭтоОбращениеКТабличнойЧасти, 3, 2);
	НомерСимволаТочкиОбращенияКИБ = СтрНайти(ПутьКДанным, ".", , , НомерТочкиОбращенияКИБ);
	
	Если НомерСимволаТочкиОбращенияКИБ > 0 Тогда
		
		РезультатРазбиения.ПутьКДанным  = Лев(ПутьКДанным, НомерСимволаТочкиОбращенияКИБ - 1);
		РезультатРазбиения.ОбращениеКИБ = Прав(ПутьКДанным, СтрДлина(ПутьКДанным) - НомерСимволаТочкиОбращенияКИБ);
		
	Иначе
		
		РезультатРазбиения.ПутьКДанным = ПутьКДанным;
		
	КонецЕсли;
	
	Возврат РезультатРазбиения;
	
КонецФункции

#КонецОбласти

#Область СозданиеНазначений

Функция СообщениеНетНазначенияВБазе(ШаблонНазначения)
	
	Сообщение = Неопределено;
	Если ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности) Тогда
		
		Сообщение = СтрШаблон(НСтр("ru='В информационной базе не обнаружено назначение для направления деятельности: ""%1""';uk='В інформаційній базі не виявлено призначення для напряму діяльності: ""%1""'"),
			ШаблонНазначения.НаправлениеДеятельности);
		
	ИначеЕсли ЗначениеЗаполнено(ШаблонНазначения.Договор) Тогда
		
		Сообщение = СтрШаблон(НСтр("ru='В информационной базе не обнаружено назначение для договора: ""%1""';uk='В інформаційній базі не виявлено призначення для договору: ""%1""'"),
			ШаблонНазначения.Договор);
		
	ИначеЕсли ЗначениеЗаполнено(ШаблонНазначения.Партнер) Тогда
		
		Сообщение = СтрШаблон(НСтр("ru='В информационной базе не обнаружено назначение для партнера: ""%1""';uk='В інформаційній базі не виявлено призначення для партнера: ""%1""'"),
			ШаблонНазначения.Партнер);
			
	Иначе
		
		Сообщение = СтрШаблон(НСтр("ru='В информационной базе не обнаружено нужное назначение';uk='В інформаційній базі не виявлено потрібне призначення'"));
		
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Функция СсылкаЕстьВШаблоне(Ссылка, Шаблон)
	
	Для Каждого Свойство Из Шаблон Цикл
		
		Если Свойство.Значение = Ссылка Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Блокирует пользовательское изменение спр. Направления деятельности пока не завершились обработчики заполнения назначений.
Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Если Не ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
			Возврат Истина;
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеИОтбор = Неопределено Тогда
		МетаданныеИОтбор = ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным(МетаданныеИОтбор.Данные, Неопределено);
	КонецЕсли;
	
	Если МетаданныеИОтбор.ЭтоНовый Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеОбновлены = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, МетаданныеИОтбор.Метаданные, МетаданныеИОтбор.Отбор);
	
	ЗависимыеДанныеОбновлены = Истина;
	Если ДанныеОбновлены И МетаданныеИОтбор.Метаданные = Метаданные.Справочники.НаправленияДеятельности Тогда
		ЗависимыеДанныеОбновлены = 
				Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, Метаданные.Документы.ЗаказКлиента)
			Или Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, Метаданные.Документы.ЗаказНаВнутреннееПотребление)
			Или Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, Метаданные.Документы.ЗаказНаПеремещение)
			Или Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, Метаданные.Документы.ЗаказНаСборку)
			//++ НЕ УТ
			Или Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, Метаданные.Справочники.ДоговорыКонтрагентов)
			Или Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, Метаданные.Документы.ЗаказПереработчику)
			Или Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, Метаданные.Документы.ЗаказМатериаловВПроизводство)
			//-- НЕ УТ
			Или Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	КонецЕсли;
	
	Возврат ДанныеОбновлены И ЗависимыеДанныеОбновлены;
	
КонецФункции


// Порядок выполнения обработчиков для обновления назначений:
//
// 1. Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений
//    - читаются реквизиты (Заказ, НаправлениеДеятельности, Партнер, Договор) без (Тип назначения),
//    - который будет обработан в обработчике 3
// 2. Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию
//    - читаются реквизиты (Заказ, НаправлениеДеятельности, Партнер, Договор) без (Тип назначения),
//    - который будет обработан в обработчике 3
// 3. Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию
//    - ожидает обработки читаемой ссылки в обработчике 2
// 4. Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений
//    Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений
//    Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляГенерацииНазначений
//    Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений
//    Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений
//    Документы.ЗаказНаРемонт.ОбработатьДанныеДляГенерацииНазначений
//    Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений
//    Документы.ЗаказПереработчику.ОбработатьДанныеДляГенерацииНазначений
//    Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений
//    - ожидают обработки читаемой ссылки в обработчике 2
//    - ожидают полного завершения обработчика 3
// 5. Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию
//    Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию
//    Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию
//    Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию
//    Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию
//    Документы.ЗаказНаРемонт.ОбработатьДанныеДляПереходаНаНовуюВерсию
//    Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию
//    Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию
//    Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию
//    - ожидают обработки читаемой ссылки в обработчике 2
//    - не завершатся пока полностью не завершатся соответствующие обработчики 4 и не синхронизируется РИБ.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("abd4343b-e833-4f07-b416-74d9a0aa9c06");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Назначения.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.Назначения,"
		+ "РегистрНакопления.ОбеспечениеЗаказов,"
		+ "Справочник.НаправленияДеятельности";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Назначения";
	Обработчик.БлокируемыеОбъекты = "Справочник.Назначения";
	Обработчик.Комментарий = НСтр("ru='Заполняет реквизит ""Тип назначения"", ""Контролировать только наличие"" и ""Движение по складским регистрам"".
                                   |Помечает на удаление назначения, ссылающиеся на несуществующие заказы, а так же назначения с незаполненными реквизитами.
                                   |Пока обработчик не выполнен, возможны ошибки в работе документов.'
                                   |;uk='Заповнює реквізит ""Тип призначення"", ""Контролювати лише наявність"" та ""Рух по складським регістрам"".
                                   |Позначає до вилучення призначення, що посилаються на неіснуючі замовлення, а також призначення із незаповненими реквізитами.
                                   |Поки обробник не виконаний, можливі помилки у роботі документів.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеНедостачТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПорчаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПересортицаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ДатыПоступленияТоваровОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлючиАналитикиУчетаНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.МатериалыИРаботыВПроизводстве.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";


	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПрочееОприходованиеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПеремещениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОприходованиеИзлишковТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";


	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаНазначенияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.Закупки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизацийКПередаче.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВнутреннееПотреблениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКОформлениюТаможенныхДеклараций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеОтПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаСырьяПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыпускПродукции.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратСырьяОтПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеЗатратНаВыпуск.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//-- НЕ УТ
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ОбеспечениеЗаказов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	//++ НЕ УТ
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";


	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	НоваяСтрока = Исключения.Добавить();
	НоваяСтрока.ИмяОбъекта = "Справочники.НаправленияДеятельности";
	НоваяСтрока.Порядок    = "После";
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыОбработатьДанныеДляГенерацииНазначений(
		Обработчик.ПриоритетыВыполнения,
		"До",
		Исключения
	);
	
	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритетыСгенерироватьКлючиАналитикиНоменклатуры(
		Обработчик.ПриоритетыВыполнения,
		"До",
		Исключения
	);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Назначения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|ГДЕ
	// Заполнение реквизита ТипНазначения
	|	Назначения.ТипНазначения В (ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка),
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.УдалитьПереработчик))
	// Кэширование реквизита КонтролироватьТолькоНаличие
	|	ИЛИ Назначения.КонтролироватьТолькоНаличие <>
	|		(Назначения.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) И Заказ = НЕОПРЕДЕЛЕНО
	|		ИЛИ Заказ = НЕОПРЕДЕЛЕНО И 
	|  			ВЫБОР 
	|				КОГДА НаправлениеДеятельности.УчетЗатрат 
	|						И НаправлениеДеятельности.УдалитьВариантОбособления = ЗНАЧЕНИЕ(Перечисление.УдалитьВариантыОбособленияПоНаправлениюДеятельности.ПоНаправлениюВЦелом) 
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		)
	// Установка признака ДвиженияПоСкладскимРегистрам для неиспользуемых назначений
	|	ИЛИ НЕ Назначения.ДвиженияПоСкладскимРегистрам
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ОбеспечениеЗаказов КАК Движения
	|			ГДЕ
	|				Движения.Назначение = Назначения.Ссылка)");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ПустыеСсылки = Новый Массив();
	ПустыеСсылки.Добавить(Документы.ЗаказНаПеремещение.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказКлиента.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказНаСборку.ПустаяСсылка());
	
	//++ НЕ УТ
	ПустыеСсылки.Добавить(Документы.ЗаказПереработчику.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказМатериаловВПроизводство.ПустаяСсылка());
	//-- НЕ УТ
	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таб.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.Назначения КАК Таб
	|	ГДЕ
	|		Таб.Заказ = НЕОПРЕДЕЛЕНО
	|		И Таб.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		И Таб.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|		И Таб.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		И НЕ Таб.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таб.Ссылка
	|	ИЗ
	|		Справочник.Назначения КАК Таб
	|	ГДЕ
	|		Таб.Заказ <> НЕОПРЕДЕЛЕНО
	|		И Таб.Заказ.Ссылка ЕСТЬ NULL
	|		И НЕ Таб.Заказ В (&ПустыеСсылки)
	|		И НЕ Таб.ПометкаУдаления) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПустыеСсылки", ПустыеСсылки);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.Назначения";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДопПараметры.ИмяВременнойТаблицы = "ВТСсылкиДляОбработки";
	ДопПараметры.ДополнительныеИсточникиДанных.Вставить("НаправлениеДеятельности");
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, 
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц, 
		ДопПараметры
	);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, "РегистрНакопления.ОбеспечениеЗаказов") Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ЗапросПроверки = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|ГДЕ
	|	ОбеспечениеЗаказов.Назначение = &Назначение");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОбработке.Ссылка КАК Ссылка,
	|   ВЫБОР
	|
	|		КОГДА КОбработке.Ссылка.Заказ = НЕОПРЕДЕЛЕНО
	|			И КОбработке.Ссылка.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			И КОбработке.Ссылка.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			И КОбработке.Ссылка.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			И НЕ КОбработке.Ссылка.ПометкаУдаления
	|
 	|			ТОГДА ИСТИНА
	|
	|		КОГДА КОбработке.Ссылка.Заказ <> НЕОПРЕДЕЛЕНО
	|			И КОбработке.Ссылка.Заказ.Ссылка ЕСТЬ NULL
	|			И НЕ КОбработке.Ссылка.Заказ В (&ПустыеСсылки)
	|			И НЕ КОбработке.Ссылка.ПометкаУдаления
	|
 	|			ТОГДА ИСТИНА
	|
	|		ИНАЧЕ ЛОЖЬ
	|
	|	КОНЕЦ КАК ПометитьНаУдаление, 
	|	КОбработке.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	КОбработке.Ссылка.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	ВТСсылкиДляОбработки КАК КОбработке");
	
	ПустыеСсылки = Новый Массив();
	ПустыеСсылки.Добавить(Документы.ЗаказНаПеремещение.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказКлиента.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказНаСборку.ПустаяСсылка());
	
	//++ НЕ УТ
	ПустыеСсылки.Добавить(Документы.ЗаказПереработчику.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказМатериаловВПроизводство.ПустаяСсылка());
	//-- НЕ УТ
	
	
	Запрос.УстановитьПараметр("ПустыеСсылки", ПустыеСсылки);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Если НЕ Выборка.ПометитьНаУдаление Тогда
				ЭлементБлокировки = Блокировка.Добавить("Справочник.НаправленияДеятельности");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.НаправлениеДеятельности);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОбеспечениеЗаказов");
				ЭлементБлокировки.УстановитьЗначение("Назначение", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			КонецЕсли; 
				
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если Выборка.ПометитьНаУдаление Тогда
				Если Не СправочникОбъект.ПометкаУдаления Тогда
					СправочникОбъект.ПометкаУдаления = Истина;
					ОбъектИзменен = Истина;
				КонецЕсли;
			Иначе
				// Заполнение реквизита ТипНазначения
				Если СправочникОбъект.ТипНазначения = Перечисления.ТипыНазначений.ПустаяСсылка() Тогда
					
					СправочникОбъект.ТипНазначения = Перечисления.ТипыНазначений.Собственное;
					
					
					ОбъектИзменен = Истина;
					
				ИначеЕсли СправочникОбъект.ТипНазначения = Перечисления.ТипыНазначений.УдалитьПереработчик Тогда
					
					СправочникОбъект.ТипНазначения = Перечисления.ТипыНазначений.Собственное;
					
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
				// Кэширование реквизита КонтролироватьТолькоНаличие
				Если СправочникОбъект.КонтролироватьТолькоНаличие <> 
						(НЕ СправочникОбъект.Партнер.Пустая() И НЕ ЗначениеЗаполнено(СправочникОбъект.Заказ)
						ИЛИ НЕ СправочникОбъект.НаправлениеДеятельности.Пустая() И НЕ ЗначениеЗаполнено(СправочникОбъект.Заказ)
							И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.НаправлениеДеятельности, "ДопускаетсяОбособлениеСверхПотребности")) Тогда
					
					СправочникОбъект.КонтролироватьТолькоНаличие = НЕ СправочникОбъект.КонтролироватьТолькоНаличие;
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
				// Установка признака ДвиженияПоСкладскимРегистрам для неиспользуемых назначений
				ЗапросПроверки.УстановитьПараметр("Назначение", СправочникОбъект.Ссылка);
				Если Не СправочникОбъект.ДвиженияПоСкладскимРегистрам И ЗапросПроверки.Выполнить().Пустой() Тогда
					
					СправочникОбъект.ДвиженияПоСкладскимРегистрам = Истина;
					ОбъектИзменен = Истина;
					
				КонецЕсли;
			КонецЕсли;	
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли