#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗапрещенныйСчет      = ЭтоЗапрещенныйСчет(Объект.Ссылка);
	
	Элементы.ВидыСубконтоДобавить.Доступность = НЕ ЗапрещенныйСчет;
	Элементы.ВидыСубконтоИзменить.Доступность = НЕ ЗапрещенныйСчет;
	Элементы.ВидыСубконтоУдалить.Доступность  = НЕ ЗапрещенныйСчет;
	
	Кнопка = Элементы.ВидыСубконто.КонтекстноеМеню.ПодчиненныеЭлементы.Найти("ВидыСубконтоКонтекстноеМенюДобавить");
	Если Кнопка <> Неопределено Тогда
		Кнопка.Доступность = НЕ ЗапрещенныйСчет;
	КонецЕсли;
	Кнопка = Элементы.ВидыСубконто.КонтекстноеМеню.ПодчиненныеЭлементы.Найти("ВидыСубконтоКонтекстноеМенюИзменить");
	Если Кнопка <> Неопределено Тогда
		Кнопка.Доступность = НЕ ЗапрещенныйСчет;
	КонецЕсли;
	Кнопка = Элементы.ВидыСубконто.КонтекстноеМеню.ПодчиненныеЭлементы.Найти("ВидыСубконтоКонтекстноеМенюУдалить");
	Если Кнопка <> Неопределено Тогда
		Кнопка.Доступность = НЕ ЗапрещенныйСчет;
	КонецЕсли;
	
	Элементы.Родитель.ТолькоПросмотр = Объект.Предопределенный;
	
	Элементы.Вид.Доступность            = НЕ Объект.Предопределенный;
	Элементы.Забалансовый.Доступность   = НЕ Объект.Предопределенный;
	Элементы.Количественный.Доступность = НЕ Объект.Предопределенный;
	Элементы.НалоговыйУчет.Доступность  = НЕ Объект.Предопределенный;
	Элементы.УчетПоПодразделениям.Доступность = НЕ Объект.Предопределенный;
	Элементы.УчетПоНаправлениямДеятельности.Доступность = НЕ Объект.Предопределенный;
	Элементы.УчетПоНаправлениямДеятельности.Видимость   = НЕ Объект.Забалансовый;
	Элементы.УчетПоНалоговымНазначениямНДС.Видимость   = НЕ Объект.Предопределенный;
	
	Если Параметры.Ключ.Пустая() И Параметры.ЗначениеКопирования.Пустая() Тогда
		Объект.Валютный       = Ложь;
		Объект.Количественный = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	УправлениеФормой();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Если задан субсчет, то в его коде должна быть точка
	Код      = Объект.Код;
	Родитель = Объект.Родитель;
	
	Если Найти(Код, ".") > 0 Тогда
		
		//Найдем код родителя, для этого найдем последнюю точку в коде счета
		ПозицияТочки = СтрДлина(Код);
		
		Пока Сред(Код, ПозицияТочки, 1) <> "." Цикл
			
			ПозицияТочки = ПозицияТочки - 1;
			
		КонецЦикла;
		
		КодРодителя    = Лев(Код, ПозицияТочки - 1);
		РодительПоКоду = НайтиРодителя(КодРодителя);
		
		Если НЕ ЗначениеЗаполнено(РодительПоКоду) Тогда
			
			ПоказатьПредупреждение( , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='План счетов не содержит счета с кодом %1';uk='План рахунків не містить рахунку з кодом %1'"),
				КодРодителя));
			
		ИначеЕсли РодительПоКоду <> Объект.Ссылка Тогда
			
			СвойстваТекущегоРодителя = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.Родитель);
			
			Объект.Родитель       = РодительПоКоду;
			Объект.Вид            = СвойстваТекущегоРодителя.Вид;
			Объект.Забалансовый   = СвойстваТекущегоРодителя.Забалансовый;
			Объект.Количественный = СвойстваТекущегоРодителя.Количественный;
			Объект.Валютный       = СвойстваТекущегоРодителя.Валютный;
			
			Элементы.ВидыСубконтоВалютный.Видимость       = Объект.Валютный;
			Элементы.ВидыСубконтоКоличественный.Видимость = Объект.Количественный;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Код, ".", ""));
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютныйПриИзменении(Элемент)
	
	ВалютныйПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличественныйПриИзменении(Элемент)
	
	Элементы.ВидыСубконтоКоличественный.Видимость = Объект.Количественный;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗабалансовыйПриИзменении(Элемент)
	
	Элементы.УчетПоНаправлениямДеятельности.Видимость = НЕ Объект.Забалансовый;
	Если Объект.Забалансовый Тогда
		Объект.УчетПоНаправлениямДеятельности = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВидыСубконтоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ЗапрещенныйСчет Тогда
		ПредупреждениеОНевозможностиИзмененияСоставаВидовСубконто(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыСубконтоПередНачаломИзменения(Элемент, Отказ)
	
	Если ЗапрещенныйСчет Тогда
		ПредупреждениеОНевозможностиИзмененияСоставаВидовСубконто(Отказ);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Предопределенное Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыСубконтоПередУдалением(Элемент, Отказ)
	
	Если ЗапрещенныйСчет Тогда
		ПредупреждениеОНевозможностиИзмененияСоставаВидовСубконто(Отказ);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Предопределенное Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыСубконтоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Суммовой       = Истина;
		Элемент.ТекущиеДанные.Валютный       = Истина;
		Элемент.ТекущиеДанные.Количественный = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьПараметрыСчета(Счет)
	
	ПараметрыСчета = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Хозрасчетный.УчетПоПодразделениям), ЛОЖЬ) КАК УчетПоПодразделениям,
	|	ЕСТЬNULL(МАКСИМУМ(Хозрасчетный.УчетПоНаправлениямДеятельности), ЛОЖЬ) КАК УчетПоНаправлениямДеятельности,
	|	ЕСТЬNULL(МАКСИМУМ(Хозрасчетный.УчетПоНалоговымНазначениямНДС), ЛОЖЬ) КАК УчетПоНалоговымНазначениямНДС,
	|	ЕСТЬNULL(МАКСИМУМ(Хозрасчетный.НалоговыйУчет), ЛОЖЬ) КАК НалоговыйУчет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель В ИЕРАРХИИ(&Родитель)";
	Запрос.УстановитьПараметр("Родитель", Счет);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПараметрыСчета.Вставить("УчетПоПодразделениям", Истина);
		ПараметрыСчета.Вставить("УчетПоНаправлениямДеятельности", Ложь);
		ПараметрыСчета.Вставить("НалоговыйУчет"       , Истина);
		ПараметрыСчета.Вставить("УчетПоНалоговымНазначениямНДС"       , Истина);		
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПараметрыСчета.Вставить("УчетПоПодразделениям", НЕ Выборка.УчетПоПодразделениям);
		ПараметрыСчета.Вставить("УчетПоНаправлениямДеятельности", НЕ Выборка.УчетПоНаправлениямДеятельности);
		ПараметрыСчета.Вставить("НалоговыйУчет"       , НЕ Выборка.НалоговыйУчет);
		ПараметрыСчета.Вставить("УчетПоНалоговымНазначениямНДС"       , НЕ Выборка.УчетПоНалоговымНазначениямНДС);
	КонецЕсли;
	
	Возврат ПараметрыСчета;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиРодителя(КодРодителя)
	
	Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду(КодРодителя);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗапрещенныеСчета()
	
	ЗапрещенныеСчета = Новый Массив;
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОсновныхСредств);						// 1521
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеДругихНеоборотныхМатериальныхАктивов);	// 1531
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);	// 20
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.МалоценныеИБыстроизнашивающиесяПредметыНаСкладе);	// 221
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);	// 25
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);	// 26
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.Товары);	// 28
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте);	// 301
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте);	// 302
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.РозничнаяВыручкаВКассахККМ);	// 309
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.СчетаВБанках);	// 31
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты);	// 3333
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты);	// 3342
	
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоОплатеТруда);	// 66
	ЗапрещенныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспечениеВыплатОтпусков);	// 471	
	
	Возврат Новый ФиксированныйМассив(ЗапрещенныеСчета);
	
КонецФункции

&НаКлиенте
Процедура ПредупреждениеОНевозможностиИзмененияСоставаВидовСубконто(Отказ)
	
	ПоказатьПредупреждение( , НСтр("ru='Состав видов субконто на этом счете определяется настройкой параметров учета.';uk='Склад видів субконто на цьому рахунку визначається настройкою параметрів обліку.'"));
	Отказ = Истина;
	
КонецПроцедуры // ПредупреждениеОНевозможностиИзмененияСоставаВидовСубконто()

&НаСервереБезКонтекста
Функция ЭтоЗапрещенныйСчет(Счет)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка"          , Счет);
	Запрос.УстановитьПараметр("СписокСчетов"    , ПолучитьЗапрещенныеСчета());
	Запрос.УстановитьПараметр("СписокИсключений", ПланыСчетов.Хозрасчетный.ПолучитьСчетаИсключения());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка = &Ссылка
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|	И (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СписокИсключений))";
	ЗапрещенныйСчет = НЕ Запрос.Выполнить().Пустой();
	
	Возврат ЗапрещенныйСчет;

КонецФункции // ЭтоЗапрещенныйСчет()

&НаСервере
Процедура УправлениеФормой()
	
	Если НЕ Объект.Предопределенный Тогда
		Если ЗначениеЗаполнено(Объект.Родитель) Тогда
			СвойстваТекущегоРодителя = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.Родитель);
			Элементы.УчетПоПодразделениям.Доступность = СвойстваТекущегоРодителя.УчетПоПодразделениям;
			Элементы.УчетПоНаправлениямДеятельности.Доступность = СвойстваТекущегоРодителя.УчетПоНаправлениямДеятельности;
			Объект.УчетПоНаправлениямДеятельности = СвойстваТекущегоРодителя.УчетПоНаправлениямДеятельности;
			Элементы.НалоговыйУчет.Доступность        = СвойстваТекущегоРодителя.НалоговыйУчет;
			Элементы.УчетПоНалоговымНазначениямНДС.Доступность        = СвойстваТекущегоРодителя.УчетПоНалоговымНазначениямНДС;
		Иначе
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				ПараметрыСчета = ПолучитьПараметрыСчета(Объект.Ссылка);
				Элементы.УчетПоПодразделениям.Доступность = ПараметрыСчета.УчетПоПодразделениям;
				Элементы.УчетПоНаправлениямДеятельности.Доступность = ПараметрыСчета.УчетПоНаправлениямДеятельности;
				Элементы.НалоговыйУчет.Доступность        = ПараметрыСчета.НалоговыйУчет;
				Элементы.УчетПоНалоговымНазначениямНДС.Доступность        = ПараметрыСчета.УчетПоНалоговымНазначениямНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ВидыСубконтоВалютный.Видимость = Объект.Валютный;
	Элементы.ИсключитьСуммуБУИзПереоценкиПоПлануСчетов.Доступность = Объект.Валютный;
	Элементы.ИсключитьСуммуУУИзПереоценкиПоПлануСчетов.Доступность = Объект.Валютный;
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
Процедура ВалютныйПриИзмененииСервер()
	
	Если Не Объект.Валютный Тогда
		Объект.ИсключитьСуммуБУИзПереоценкиПоПлануСчетов = Ложь;
		Объект.ИсключитьСуммуУУИзПереоценкиПоПлануСчетов = Ложь;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти