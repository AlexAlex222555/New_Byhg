#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьДопОбработкуПроводок(Проводки) Экспорт
	
	Регистратор = Проводки.Отбор.Регистратор.Значение;
	ДополнительныеСвойства = Проводки.ДополнительныеСвойства;
	
	РассчитатьСуммыУправленческогоУчета(Проводки, Регистратор, ДополнительныеСвойства);
	ОчиститьНеИспользуемыеСуммы(Проводки);
	ОтразитьЗатратыПо8и9КлассуСчетов(Проводки);
	
	ПривестиПустыеЗначенияСубконтоСоставногоТипа(Проводки);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РассчитатьСуммыУправленческогоУчета(Проводки, Регистратор, ДополнительныеСвойства) 
	
	ЗначениеСвойства = Неопределено;
	ДополнительныеСвойства.Свойство("РассчитатьСуммыУУ", ЗначениеСвойства);
	РассчитатьСуммыУУ = ?(ЗначениеСвойства = Неопределено, Ложь, ЗначениеСвойства);
	РассчитатьСуммыУУ = РассчитатьСуммыУУ И ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный");
	
	
	ЗначениеСвойства = Неопределено;
	ДополнительныеСвойства.Свойство("РассчитатьСуммыФО", ЗначениеСвойства);
	РассчитатьСуммыФО = ?(ЗначениеСвойства = Неопределено, Ложь, ЗначениеСвойства);
	РассчитатьСуммыФО = РассчитатьСуммыФО И ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
	
	Если НЕ РассчитатьСуммыУУ И НЕ РассчитатьСуммыФО Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаУУНаПланеСчетовХозрасчетный = Константы.ДатаНачалаУУНаПланеСчетовХозрасчетный.Получить();
	
	Для Каждого Проводка Из Проводки Цикл
		
		Если РассчитатьСуммыУУ И Проводка.Период >= ДатаНачалаУУНаПланеСчетовХозрасчетный Тогда
			ПараметрыРасчетаСуммыУУ = РеглУчетВыборкиСерверПовтИсп.ПараметрыРасчетаСуммыУУ(Проводка.Период);
			Проводка.СуммаУУ = Проводка[ПараметрыРасчетаСуммыУУ.РесурсИсточник] * ПараметрыРасчетаСуммыУУ.Коэффициент;
		КонецЕсли;
		
		Если РассчитатьСуммыФО Тогда
			ПараметрыРасчетаСуммыФО = РеглУчетВыборкиСерверПовтИсп.ПараметрыРасчетаСуммыФО(Проводка.Период);
			Проводка.СуммаФО = Проводка[ПараметрыРасчетаСуммыФО.РесурсИсточник] * ПараметрыРасчетаСуммыФО.Коэффициент;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСуммуЕслиЗаполнена(Сумма, КорректируемаяСумма = 0)
	
	// Если сумма не заполнена, то не будем ее менять, чтобы не спровоцировать перезапись фактически неизменного набора.
	// Если сумма заполнена, то ее обнулим за счет корректируемой суммы.
	// Например, это используется, когда важно очистить сумму НУ за счет суммы ПР.
	
	Если Не ЗначениеЗаполнено(Сумма) Тогда // Может быть NULL, если набор редактируется вручную
		Возврат;
	КонецЕсли;
	
	КорректируемаяСумма = КорректируемаяСумма + Сумма;
	
	Сумма = 0;
	
КонецПроцедуры


Процедура ОчиститьНеИспользуемыеСуммы(Проводки)
	
	ВестиУУНаПланеСчетовХозрасчетный = ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный");
	ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности = ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
	
	Для Каждого Проводка Из Проводки Цикл
		
		Если НЕ ВестиУУНаПланеСчетовХозрасчетный Тогда
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаУУ);
		КонецЕсли;
		
		Если НЕ ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности Тогда
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаФО);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ПривестиПустыеЗначенияСубконтоСоставногоТипа(Проводки)
	
	КэшВидыСоставныхСубконто = Новый Соответствие;
	
	Для Каждого Проводка Из Проводки Цикл
		
		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			
			Если НЕ ЗначениеЗаполнено(Субконто.Значение) 
				И Субконто.Значение <> Неопределено 
				И СоставнойТипСубконто(Субконто.Ключ, КэшВидыСоставныхСубконто) Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, Неопределено);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			
			Если НЕ ЗначениеЗаполнено(Субконто.Значение) 
				И Субконто.Значение <> Неопределено 
				И СоставнойТипСубконто(Субконто.Ключ, КэшВидыСоставныхСубконто) Тогда
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, Неопределено);
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

Функция СоставнойТипСубконто(ВидСубконто, КэшВидыСоставныхСубконто)
	
	Составной = КэшВидыСоставныхСубконто.Получить(ВидСубконто);
	
	Если Составной = Неопределено Тогда
		Составной = ВидСубконто.ТипЗначения.Типы().Количество() > 1;
		КэшВидыСоставныхСубконто.Вставить(ВидСубконто, Составной);
	КонецЕсли;
	
	Возврат Составной;
	
КонецФункции

Функция ЭтоРучноеОтражение(Проводки, Регистратор, ДополнительныеСвойства)
	
	ТипРегистратора = ТипЗнч(Регистратор);
	
	ЭтоРучноеОтражение = 
		(ТипРегистратора = Тип("ДокументСсылка.РегламентнаяОперация"))
		Или (ТипРегистратора = Тип("ДокументСсылка.ОперацияБух"))
		Или ДополнительныеСвойства.Свойство("РучноеОтражение") И ДополнительныеСвойства.РучноеОтражение
		Или (ОбщегоНазначения.ЕстьРеквизитОбъекта("РучнаяКорректировка", Регистратор.Метаданные()) И Регистратор.РучнаяКорректировка);
		
	Возврат ЭтоРучноеОтражение;
	
КонецФункции

Функция НетЗначашихДвиженийВПроводке(Проводка)
	
	Возврат Проводка.Сумма = 0 И Проводка.СуммаУУ = 0 И Проводка.СуммаФО = 0
			И Проводка.СуммаНУДт = 0 И Проводка.СуммаПРДт = 0 И Проводка.СуммаВРДт = 0
			И Проводка.СуммаНУКт = 0 И Проводка.СуммаПРКт = 0 И Проводка.СуммаВРКт = 0
			И Проводка.ВалютнаяСуммаДт = 0 И Проводка.КоличествоДт = 0
			И Проводка.ВалютнаяСуммаКт = 0 И Проводка.КоличествоКт = 0;
	
КонецФункции

Функция СчетВИерархииВМассиве(Счет, Эталон)

	Результат = Ложь;
	Если ЗначениеЗаполнено(Счет) Тогда
		Если ТипЗнч(Эталон) = Тип("Массив") Тогда
			Для каждого СчетЭталон Из Эталон Цикл
				Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, СчетЭталон) Тогда
					Результат = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		Иначе	
			Результат = БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, Эталон);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция ПровестиПоЗатратам(Проводки, Проводка, Индекс, СтруктураПараметров)
	
	Организация = Проводка.Организация;
	
	Если СтруктураПараметров.Свойство("СоответствиеИспользуемыеКлассыСчетовРасходов") = Истина Тогда
		СоответствиеИспользуемыеКлассыСчетовРасходов = СтруктураПараметров.СоответствиеИспользуемыеКлассыСчетовРасходов;
		ИспользуемыеКлассыСчетовРасходов = СоответствиеИспользуемыеКлассыСчетовРасходов[Организация];
		Если ИспользуемыеКлассыСчетовРасходов = Неопределено Тогда
			ИспользуемыеКлассыСчетовРасходов = УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(Организация, Проводка.Период);
			СоответствиеИспользуемыеКлассыСчетовРасходов.Вставить(Организация, ИспользуемыеКлассыСчетовРасходов);
		КонецЕсли;
	Иначе	
		СтруктураПараметров.Вставить("СоответствиеИспользуемыеКлассыСчетовРасходов", Новый Соответствие);
		СоответствиеИспользуемыеКлассыСчетовРасходов = СтруктураПараметров.СоответствиеИспользуемыеКлассыСчетовРасходов;
		ИспользуемыеКлассыСчетовРасходов = УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(Организация, Проводка.Период);
		СоответствиеИспользуемыеКлассыСчетовРасходов.Вставить(Организация, ИспользуемыеКлассыСчетовРасходов);
	КонецЕсли; 

	Если СтруктураПараметров.Свойство("СоответствиеНужноДелитьПроводку") = Ложь Тогда
		СтруктураПараметров.Вставить("СоответствиеНужноДелитьПроводку", Новый Соответствие);
	КонецЕсли;
	СоответствиеНужноДелитьПроводку = СтруктураПараметров.СоответствиеНужноДелитьПроводку;
	
	Если СтруктураПараметров.Свойство("ИспользоватьКлассыСчетовВКачествеГрупп") = Ложь Тогда
		СтруктураПараметров.Вставить("ИспользоватьКлассыСчетовВКачествеГрупп", Истина);
	КонецЕсли;
	ИспользоватьКлассыСчетовВКачествеГрупп = СтруктураПараметров.ИспользоватьКлассыСчетовВКачествеГрупп;
	
	КлассыСчетов = Перечисления.КлассыСчетовРасходов;
	
	Если ИспользуемыеКлассыСчетовРасходов = КлассыСчетов.Класс9 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СчетДт         = Проводка.СчетДт;
	СчетДтСвойства = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
	
	СчетКт         = Проводка.СчетКт;
	СчетКтСвойства = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	
	Ключ = Строка(СчетДт) + "|" + Строка(СчетКт) + "|" + Строка(ИспользуемыеКлассыСчетовРасходов);
	//Проверм, не определяли ли мы уже для этого сочетания параметров
	СтруктураЗначение = СоответствиеНужноДелитьПроводку[Ключ];
	Если СтруктураЗначение = Неопределено Тогда
	
		СчетЗатратыБудущихПериодов 	= ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов;
		СчетПолуфабрикаты 			= ПланыСчетов.Хозрасчетный.Полуфабрикаты;
		СчетГотоваяПродукция 		= ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
		СчетПроизводство 			= ПланыСчетов.Хозрасчетный.Производство;
		СчетБракВПроизводстве 		= ПланыСчетов.Хозрасчетный.БракВПроизводстве;
		СчетСебестоимостьРеализации = ПланыСчетов.Хозрасчетный.СебестоимостьРеализации;
		СчетСебестоимостьРеализованныхПроизводственныхЗапасов = ПланыСчетов.Хозрасчетный.СебестоимостьРеализованныхПроизводственныхЗапасов;
		
		Если ИспользоватьКлассыСчетовВКачествеГрупп Тогда
			СчетЗатратыПоЭлементам 		= ПланыСчетов.Хозрасчетный.ЗатратыПоЭлементам;
			СчетЗатратыДеятельности 	= ПланыСчетов.Хозрасчетный.ЗатратыДеятельности;
			
		Иначе
			СчетЗатратыПоЭлементам	= Новый Массив;
			СчетЗатратыПоЭлементам.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЗатраты);
			СчетЗатратыПоЭлементам.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаОплатуТруда);
			СчетЗатратыПоЭлементам.Добавить(ПланыСчетов.Хозрасчетный.ОтчисленияНаСоциальныеМероприятия);
			СчетЗатратыПоЭлементам.Добавить(ПланыСчетов.Хозрасчетный.Амортизация);
			СчетЗатратыПоЭлементам.Добавить(ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты);
			СчетЗатратыПоЭлементам.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам);
			
			СчетЗатратыДеятельности	= Новый Массив;
			СчетЗатратыДеятельности.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьРеализации);
			СчетЗатратыДеятельности.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
			СчетЗатратыДеятельности.Добавить(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы);
			СчетЗатратыДеятельности.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаСбыт);
			СчетЗатратыДеятельности.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельностиГруппа);
			СчетЗатратыДеятельности.Добавить(ПланыСчетов.Хозрасчетный.ФинансовыеЗатраты);
			СчетЗатратыДеятельности.Добавить(ПланыСчетов.Хозрасчетный.ПотериОтУчастияВКапитале);
			СчетЗатратыДеятельности.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыДеятельности);
			СчетЗатратыДеятельности.Добавить(ПланыСчетов.Хозрасчетный.НалогНаПрибыль);
		
		КонецЕсли;
		
		
		СчетДругиеЗатратыПоЭлементам = ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам;
		
		Если    // Счет дебета не указан
			    СчетДт.Пустая()
				// Счет кредита не указан
			ИЛИ СчетКт.Пустая()
			    // Списание на затраты будущих периодов
			ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетДт, СчетЗатратыБудущихПериодов)
				// Себестоимость реализации 
			ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетДт, СчетСебестоимостьРеализации)
			ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетДт, СчетСебестоимостьРеализованныхПроизводственныхЗапасов)
				// Списание полуфабриката на затраты 
			ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетКт, СчетПолуфабрикаты)
			    // Списание продукции на затраты
			ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетКт, СчетГотоваяПродукция)
			    // Списание затрат из производства в производство или на брак (перераспределение затрат)
			ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетКт, СчетПроизводство)
			    // Списание затрат на брак в производство или на брак (перераспределение затрат)
			ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетКт, СчетБракВПроизводстве) 
			    // Списание со счета 8 класса
			ИЛИ СчетВИерархииВМассиве(СчетКт, СчетЗатратыПоЭлементам)
			    // Списание со счета 9 класса
			ИЛИ СчетВИерархииВМассиве(СчетКт, СчетЗатратыДеятельности)
			    // проводка только по налоговому учету
			ИЛИ ( БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетКт, ПланыСчетов.Хозрасчетный.Вспомогательный)
			     И Проводка.Сумма = 0) Тогда
			
			ИзменятьПроводку = Ложь;
			ДелитьПроводку   = Ложь;
			
		Иначе
			
			ИзменятьПроводку = Ложь;
			ДелитьПроводку   = Ложь;
			
			Если СчетВИерархииВМассиве(СчетДт, СчетЗатратыДеятельности)
				И (ИспользуемыеКлассыСчетовРасходов = КлассыСчетов.Класс8и9
				  ИЛИ  ИспользуемыеКлассыСчетовРасходов = КлассыСчетов.Класс8)  Тогда
				// Списание на счета 9 класса
				ИзменятьПроводку = Истина;
				ДелитьПроводку   = (ИспользуемыеКлассыСчетовРасходов = КлассыСчетов.Класс8и9);
			КонецЕсли;
			
			Если (БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетДт, СчетПроизводство) ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетДт, СчетБракВПроизводстве))
				И (ИспользуемыеКлассыСчетовРасходов = КлассыСчетов.Класс8и9 ИЛИ  ИспользуемыеКлассыСчетовРасходов = КлассыСчетов.Класс8)  Тогда
				// Списание на счета 23 или 24 и используется 8 класс или 8 и 9 классы одновременно
				ИзменятьПроводку = Истина;
				ДелитьПроводку   = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		//Для того чтобы во второй раз не проверять, запишем в соответсвие результат проверки
		СтруктураЗначение = Новый Структура("ИзменятьПроводку,ДелитьПроводку",ИзменятьПроводку,ДелитьПроводку);
	    СоответствиеНужноДелитьПроводку.Вставить(Ключ, СтруктураЗначение);
		
	КонецЕсли;
	
	ИзменятьПроводку = СтруктураЗначение.ИзменятьПроводку;
	ДелитьПроводку   = СтруктураЗначение.ДелитьПроводку;
	
	Если НЕ ИзменятьПроводку Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипСтатьиРасходов = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов");
	ЕстьСчет8Класса = Ложь;
	
	Для К = 1 По СчетДтСвойства.КоличествоСубконто Цикл
		
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСубконтоСтатьиЗатрат(СчетДтСвойства["ВидСубконто"+К]) Тогда
			//Субконто составного типа
			ЗначениеСубконтоСтатьиРасходов = Проводка.СубконтоДт[СчетДтСвойства["ВидСубконто"+К]];
			Если НЕ ТипЗнч(ЗначениеСубконтоСтатьиРасходов) = ТипСтатьиРасходов Тогда
				ЗначениеСубконтоСтатьиРасходов = Неопределено
			КонецЕсли; 
		КонецЕсли;
		Если СчетДтСвойства["ВидСубконто"+К] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ТипыЗатрат Тогда
			ЗначениеСубконтоТипыЗатрат = Проводка.СубконтоДт[СчетДтСвойства["ВидСубконто"+К]];
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗначениеСубконтоСтатьиРасходов) Тогда
		Счет8Класса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконтоСтатьиРасходов, "СчетУчета8Класс");
	ИначеЕсли ЗначениеЗаполнено(ЗначениеСубконтоТипыЗатрат) Тогда
		Счет8Класса = БухгалтерскийУчетВызовСервераПовтИсп.Счет8КлассаПоТипуЗатрат(ЗначениеСубконтоТипыЗатрат);
	Иначе
		Счет8Класса = Неопределено;
	КонецЕсли;
	
	СчетДругиеЗатратыПоЭлементам = ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам;
	
	Если    НЕ ЗначениеЗаполнено(Счет8Класса)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетКт, СчетДругиеЗатратыПоЭлементам)
		    И ИспользуемыеКлассыСчетовРасходов = КлассыСчетов.Класс8и9 Тогда
		// Счет неопределен или это 85 счет и используются 8 и 9 классы одновременно
		ЕстьСчет8Класса = Ложь;
	Иначе
		ЕстьСчет8Класса = Истина;
		Счет8КлассаСвойства = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет8Класса);
	КонецЕсли;
	
		
	Если НЕ ЕстьСчет8Класса Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДелитьПроводку Тогда
		// новая проводка
		НоваяПроводка = Проводки.Вставить(Индекс);
		
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Проводка);
		Для К = 1 По СчетКтСвойства.КоличествоСубконто Цикл
			НоваяПроводка.СубконтоКт[СчетКтСвойства["ВидСубконто"+К]] = Проводка.СубконтоКт[СчетКтСвойства["ВидСубконто"+К]];
		КонецЦикла;
		НоваяПроводка.СчетДт = Счет8Класса;
		Для К = 1 По Счет8КлассаСвойства.КоличествоСубконто Цикл
			НоваяПроводка.СубконтоДт[Счет8КлассаСвойства["ВидСубконто"+К]] = Проводка.СубконтоДт[Счет8КлассаСвойства["ВидСубконто"+К]];
		КонецЦикла;
		
		// исправим кредитовую сторону проводки
		Проводка.СчетКт             = Счет8Класса;
		Проводка.СубконтоКт.Очистить();
		Для К = 1 По Счет8КлассаСвойства.КоличествоСубконто Цикл
			Проводка.СубконтоКт[Счет8КлассаСвойства["ВидСубконто"+К]] = Проводка.СубконтоДт[Счет8КлассаСвойства["ВидСубконто"+К]];
		КонецЦикла; 		
		Проводка.ВалютаКт        = Проводка.ВалютаДт;
		Проводка.ВалютнаяСуммаКт = Проводка.ВалютнаяСуммаДт;
		Проводка.КоличествоКт    = Проводка.КоличествоДт;
		Проводка.НаправлениеДеятельностиКт = Проводка.НаправлениеДеятельностиДт;
		Проводка.ПодразделениеКт = Проводка.ПодразделениеДт;
		
		Проводка.НалоговоеНазначениеКт = Проводка.НалоговоеНазначениеДт;
		Проводка.СуммаНУКт = Проводка.СуммаНУДт;
		
		
		Возврат Истина;
		
	Иначе
		// исправим дебетовый счет проводки
		Проводка.СчетДт = Счет8Класса;
		СоответсвиеСубконто = Новый Соответствие;
		Для К = 1 По СчетДтСвойства.КоличествоСубконто Цикл
			СоответсвиеСубконто.Вставить(СчетДтСвойства["ВидСубконто"+К], Проводка.СубконтоДт[СчетДтСвойства["ВидСубконто"+К]]);
		КонецЦикла;
		Проводка.СубконтоДт.Очистить();
		Для К = 1 По Счет8КлассаСвойства.КоличествоСубконто Цикл
			Проводка.СубконтоДт[Счет8КлассаСвойства["ВидСубконто"+К]] = СоответсвиеСубконто.Получить(Счет8КлассаСвойства["ВидСубконто"+К]);
		КонецЦикла; 		
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ПровестиПоЗатратам()

Процедура ОтразитьЗатратыПо8и9КлассуСчетов(Проводки) Экспорт

	КвоПроводок    = Проводки.Количество();
	КвоДобавленных = 0;
	
	СтруктураПараметров = Новый Структура;
	
	Для К = 1 По КвоПроводок Цикл
		
		Индекс = К - 1 + КвоДобавленных;
		Проводка = Проводки[Индекс];
		
		Если ПровестиПоЗатратам(Проводки, Проводка, Индекс, СтруктураПараметров) Тогда
			КвоДобавленных = КвоДобавленных + 1;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыБухгалтерии.Хозрасчетный.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.10.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f6ceccf8-07fb-11ed-ee9a-001e62090807");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыБухгалтерии.Хозрасчетный.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Заполняет суммы ""Сумма УУ"", ""Сумма ФО"" в записях регистра бухгалтерии для документа ""Перерасчет пропорционального НДС по товарам и ОС""';uk='Заповнює суми ""Сума УО"", ""Сума ФО"" у записах регістру бухгалтерії для документу ""Перерахунок пропорційного ПДВ за товарами та ОЗ""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
КонецПроцедуры

// Процедура регистрации данных для обработчика обновления ОбработатьДанныеДляПереходаНаВерсию.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрБухгалтерии.Хозрасчетный";

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПерерасчетПропорциональногоНДСпоТоварамИОС КАК ПерерасчетПропорциональногоНДСпоТоварамИОС
	|	ПО
	|		Хозрасчетный.Регистратор = ПерерасчетПропорциональногоНДСпоТоварамИОС.Ссылка
	|ГДЕ
	|	ПерерасчетПропорциональногоНДСпоТоварамИОС.Дата >= &ДатаНачалаУУНаПланеСчетовХозрасчетный
	|   И Хозрасчетный.Сумма <> 0 
	|	И Хозрасчетный.СуммаУУ = 0
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);      
	Запрос.УстановитьПараметр("ДатаНачалаУУНаПланеСчетовХозрасчетный", Константы.ДатаНачалаУУНаПланеСчетовХозрасчетный.Получить());
	
	МассивРегистраторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивРегистраторов),
		ПолноеИмяРегистра
	);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрБухгалтерии.Хозрасчетный";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммыУУ = ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный");
	РассчитатьСуммыФО = ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
	ДатаНачалаУУНаПланеСчетовХозрасчетный = Константы.ДатаНачалаУУНаПланеСчетовХозрасчетный.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбновляемыхДанных", ОбновляемыеДанные);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДанных.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТОбъектыДляОбработки
	|ИЗ
	|	&ТаблицаОбновляемыхДанных КАК ТаблицаДанных 
	|;
	|ВЫБРАТЬ
	|	ВТОбъектыДляОбработки.Регистратор КАК Регистратор
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ВТОбъектыДляОбработки 
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДокументов = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументов.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументов.Регистратор);
			НаборЗаписей.Прочитать();
			
			ТребуетсяЗаписать = Ложь;
			
			Для Каждого Проводка Из НаборЗаписей Цикл
			
				Если РассчитатьСуммыУУ И Проводка.Период >= ДатаНачалаУУНаПланеСчетовХозрасчетный Тогда
					ПараметрыРасчетаСуммыУУ = РеглУчетВыборкиСерверПовтИсп.ПараметрыРасчетаСуммыУУ(Проводка.Период);
					СуммаУУ = Проводка[ПараметрыРасчетаСуммыУУ.РесурсИсточник] * ПараметрыРасчетаСуммыУУ.Коэффициент;
					Если Проводка.СуммаУУ <> СуммаУУ Тогда
						Проводка.СуммаУУ = СуммаУУ;
						ТребуетсяЗаписать = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если РассчитатьСуммыФО Тогда
					ПараметрыРасчетаСуммыФО = РеглУчетВыборкиСерверПовтИсп.ПараметрыРасчетаСуммыФО(Проводка.Период);
					СуммаФО = Проводка[ПараметрыРасчетаСуммыФО.РесурсИсточник] * ПараметрыРасчетаСуммыФО.Коэффициент;
					Если Проводка.СуммаФО <> СуммаФО Тогда
						Проводка.СуммаФО = СуммаФО;
						ТребуетсяЗаписать = Истина;
					КонецЕсли;
				КонецЕсли;
			
			КонецЦикла;
			
			Если ТребуетсяЗаписать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(
				ИнформацияОбОшибке(), 
				ВыборкаДокументов.Регистратор
			);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, 
		ПолноеИмяОбъекта
	);
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли