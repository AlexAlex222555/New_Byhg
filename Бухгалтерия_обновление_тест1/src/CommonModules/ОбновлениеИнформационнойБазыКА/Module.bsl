////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки КомплекснаяАвтоматизация.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "BASКомплексноеУправлениеПредприятием";
	Если Метаданные.Имя = "BASКомплексноеУправлениеПредприятием" Тогда
	    Описание.Версия = "2.5.13.2";
	Иначе
		Описание.Версия = "2.5.13.2";
	КонецЕсли; 
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
    Описание.ИдентификаторИнтернетПоддержки = "BASIntegratedEnterpriseManagement";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Справочники

	Справочники.ВидыБюджетов.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.НефинансовыеПоказателиБюджетов.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ОбъектыЭксплуатации.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ПередачаМатериаловВПроизводствоПрисоединенныеФайлы.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ПравилаЛимитовПоДаннымБюджетирования.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ПравилаПолученияФактаПоПоказателямБюджетов.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.РесурсныеСпецификации.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.СпособыОбеспеченияПотребностей.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.СпособыОтраженияЗарплатыВБухУчете.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.СтатьиКалькуляции.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.Сценарии.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.СценарииТоварногоПланирования.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ШаблоныВводаНефинансовыхПоказателей.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ЭкземплярБюджетаПрисоединенныеФайлы.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ЭлементыФинансовыхОтчетов.ОписаниеОбработчиковОбновления(Обработчики); 

	
	
#КонецОбласти	

#Область ПланыВидовХарактеристик 

	ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ОписаниеОбработчиковОбновления(Обработчики); 
	
	

#КонецОбласти	

#Область РегистрыСведений 

	РегистрыСведений.ДокументыПоНМА.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ДокументыПоОС.ОписаниеОбработчиковОбновления(Обработчики);  
	РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.ОписаниеОбработчиковОбновления(Обработчики);  
	РегистрыСведений.ЗначенияНефинансовыхПоказателей.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.МестонахождениеОС.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.МестоУчетаНМА.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.НормативнаяДлительностьПроизводства.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.НормативнаяДлительностьЭтаповПроизводства.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ОтражениеДокументовВРеглУчете.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ОчередьРасчетаПланаПроизводства.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ПараметрыАмортизацииНМАБУ.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ПараметрыАмортизацииОСБУ.ОписаниеОбработчиковОбновления(Обработчики);  
	РегистрыСведений.ПервоначальныеСведенияНМА.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ПервоначальныеСведенияОС.ОписаниеОбработчиковОбновления(Обработчики);  
	РегистрыСведений.ПорядокОтраженияНаСчетахУчета.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ПорядокУчетаНМА.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ПорядокУчетаНМАБУ.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ПорядокУчетаОС.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ПорядокУчетаОСБУ.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.СвязиПоказателейБюджетов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.СпецификацииИзделий.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.СтатусыПроверкиДокументов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.УчетнаяПолитикаБухУчета.ОписаниеОбработчиковОбновления(Обработчики); 
	
	РегистрыСведений.УдалитьПорядокОтраженияРасходов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.УдалитьПорядокОтраженияНоменклатурыПереданной.ОписаниеОбработчиковОбновления(Обработчики); 
	
		

#КонецОбласти	

#Область РегистрыНакопления 

	РегистрыНакопления.ВыпускПродукции.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДенежныеДокументы.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ЗаказыКлиентов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ЗаказыМатериаловВПроизводство.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ОборотыБюджетов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПартииНезавершенногоПроизводства.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПланыВыпускаИзделий.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПланыЗанятостиТрудовыхРесурсов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПланыПотребленияМатериалов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПланыПроизводства.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.РаспоряженияНаСписаниеПоНормативам.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТоварыПереданныеПереработчику.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТоварыПолученныеОтПереработчика.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТрудозатратыКОформлению.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ОписаниеОбработчиковОбновления(Обработчики); 

	

#КонецОбласти	

#Область РегистрыБухгалтерии 

	РегистрыБухгалтерии.Хозрасчетный.ПриДобавленииОбработчиковОбновления(Обработчики);
	
#КонецОбласти	

#Область Документы 

	Документы.ВводОстатковВнеоборотныхАктивов.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВозвратМатериаловИзПроизводства.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВозвратСырьяОтПереработчика.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВыбытиеДенежныхДокументов.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВыпускПродукции.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВыработкаСотрудников.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЗаказМатериаловВПроизводство.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЗаказПереработчику.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ИнвентаризацияОС.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.КорректировкаНалоговогоНазначенияОС.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОтражениеЗарплатыВФинансовомУчете.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОтчетПереработчика.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПередачаМатериаловВПроизводство.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПередачаСырьяПереработчику.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПеремещениеМатериаловВПроизводстве.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПерерасчетПропорциональногоНДСпоТоварамИОС.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПланПроизводства.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПодготовкаКПередачеОС.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПоступлениеДенежныхДокументов.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПоступлениеОтПереработчика.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.РаспределениеПроизводственныхЗатрат.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.РаспределениеПрочихЗатрат.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.РасходныйОрдерНаТовары.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.СписаниеЗатратНаВыпуск.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.УстановкаЗначенийНефинансовыхПоказателей.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЭкземплярБюджета.ОписаниеОбработчиковОбновления(Обработчики); 
	
	
	

#КонецОбласти	

#Область ОбщиеМодули

	ОбновлениеИнформационнойБазыКА.ОписаниеОбработчиковОбновления(Обработчики);


#КонецОбласти	

	

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	ОбновлениеИнформационнойБазыУТ.ПослеОбновленияИнформационнойБазы(ПредыдущаяВерсия, ТекущаяВерсия,
		ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим);
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "КомплекснаяАвтоматизация";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "BASУправлениеТорговлей";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ОбновлениеУТДоКА";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "BASУправлениеТорговлей";
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
	
	ОбновлениеИнформационнойБазыЛокализация.ПриДобавленииОбработчиковПереходаНаКА(Обработчики);
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеТорговлей" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
		ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
// Подробнее см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
// 
// Параметры:
//   Итог	- Структура - передается в процедуру подсистемой БазоваяФункциональность.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОписаниеПодсистемы = Новый Структура("Имя, Версия, РежимВыполненияОтложенныхОбработчиков, ИдентификаторИнтернетПоддержки");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.19",
		"Роль.РазделПроизводство",
		"Роль.ПодсистемаПроизводство",
		ОписаниеПодсистемы.Имя);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.59",
		"Подсистема.Производство.Подсистема.МежцеховоеУправление",
		"Подсистема.Производство.Подсистема.МежцеховоеУправление2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.59",
		"Подсистема.Производство.Подсистема.ВнутрицеховоеУправление",
		"Подсистема.Производство.Подсистема.ВнутрицеховоеУправление2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.59",
		"Подсистема.Производство.Подсистема.МатериальныйУчет",
		"Подсистема.Производство.Подсистема.МатериальныйУчет2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.72",
		"Подсистема.Производство.Подсистема.ПроизводственныеЗатраты",
		"Подсистема.Производство.Подсистема.ПроизводственныеЗатраты2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.72",
		"Подсистема.Производство.Подсистема.АнализСебестоимости",
		"Подсистема.Производство.Подсистема.АнализСебестоимости2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.5.2.10",
		"Роль.ДобавлениеИзменениеРегистрацийНаработок",
		"Роль.ДобавлениеИзменениеНаработкиОбъектовЭксплуатации",
		ОписаниеПодсистемы.Имя);	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполненияПустойИБ

// Обработчик первого запуска КА.
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьВалютуПлановыхЦен();
	УстановитьВалютуРасценокВидовРабот();
	
	ЗаполнитьКонстантуИспользоватьБюджетирование(); 
	ЗаполнитьКонстантуИспользоватьРеглУчет(); 
	ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗаполнитьПредопределенныеАналитикиСтатейБюджетов();
	Константы.ЗаполненыДвиженияАктивовПассивов.Установить(Истина);
	ЗаполнитьГруппыФинансовогоУчетаРасчетовИНоменклатурыПоУмолчанию();

КонецПроцедуры

Процедура ОбновлениеУТДоКА() Экспорт
	
	ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗаполнитьПредопределенныеАналитикиСтатейБюджетов();
	Константы.ЗаполненыДвиженияАктивовПассивов.Установить(Истина);
	
	ОбновлениеИнформационнойБазыУТ.ЗаполнитьЗначениеРазделенияПоОбластямДанных();
	
	ЗначенияКонстант = Новый Структура;
	ЗначенияКонстант.Вставить("УправлениеТорговлей", Ложь);
	ЗначенияКонстант.Вставить("КомплекснаяАвтоматизация", Истина);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Процедура устанавливает значение валюты плановых цен.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуПлановыхЦен()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаПлановойСебестоимостиПродукции.Получить())
		И Не Константы.ИспользоватьНесколькоВалют.Получить()Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				
				Константы.ВалютаПлановойСебестоимостиПродукции.Установить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение валюты расценок видов работ.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуРасценокВидовРабот()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаРасценокВидовРабот.Получить())
		И Не Константы.ИспользоватьНесколькоВалют.Получить()Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				
				Константы.ВалютаРасценокВидовРабот.Установить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНовыхВерсийИБ

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ПервыйЗапуск";
	Обработчик.Версия = "";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = НСтр("ru='';uk=''");
	
#Область ОбновлениеИнформационнойБазыКА_ЗаполнитьКонстантуИспользоватьРеглУчет

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.300";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ЗаполнитьКонстантуИспользоватьРеглУчет";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5af32345-c84e-4a2f-a70e-88ee4324051f");
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьРеглУчет";
	Обработчик.Комментарий = НСтр("ru='По умолчанию регл. учет ведется в программе.';uk='По умовчанню рег. облік ведеться у програмі.'");
	
#КонецОбласти
	

	
#Область ОбновлениеИнформационнойБазыКА_УстановитьИспользованиеЗарплатаКадрыКорпоративнаяПодсистемы

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.УстановитьИспользованиеЗарплатаКадрыКорпоративнаяПодсистемы";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыКА.ЗарегистрироватьИспользованиеЗарплатаКадрыКорпоративнаяПодсистемы";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("233cf8c4-ebd5-46a9-9c66-01398904a44e");
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Установка служебной константы ""Использовать подсистему зарплата кадры корпоративная"".';uk='Установка службової константи ""Використовувати підсистему зарплата кадри корпоративна"".'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыКА_УстановитьПараметрыНаборовСвойств

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.УстановитьПараметрыНаборовСвойств";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыКА.ЗарегистрироватьКУстановкеПараметровНаборовСвойств";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dfea776a-6b69-4f96-a90f-c7f9daec41c7");
	Обработчик.ЧитаемыеОбъекты = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	Обработчик.ИзменяемыеОбъекты = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	Обработчик.БлокируемыеОбъекты = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	Обработчик.Комментарий = НСтр("ru='Подключение новых документов и справочников к подсистеме дополнительных реквизитов и сведений.';uk='Підключення нових документів та довідників до підсистеми додаткових реквізитів та відомостей.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбработатьНаборыДопСвойств";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбновитьПредставленияПредопределенныхЭлементов";
	НоваяСтрока.Порядок = "Любой";   
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "УправлениеСвойствамиПереопределяемый.УстановитьИспользованиеСвойств_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

	
#Область ОбновлениеИнформационнойБазыКА_ИсточникСуммыДляПересчетаВВалютуФинОтчетности_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ИсточникСуммыДляПересчетаВВалютуФинОтчетности_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cf34cc59-b249-48db-91bf-db734d638bc9");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыКА.ИсточникСуммыДляПересчетаВВалютуФинОтчетности_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = ""
	//++ Локализация
		+ "Константа.ИсточникСуммыДляПересчетаВВалютуФинОтчетности"
	//-- Локализация
	;
	Обработчик.ИзменяемыеОбъекты = ""
	//++ Локализация
		+ "Константа.ИсточникСуммыДляПересчетаВВалютуФинОтчетности"
	//-- Локализация
	;
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение по умолчанию в константе ИсточникСуммыДляПересчетаВВалютуФинОтчетности';uk='Встановлює значення по умовчанню у константі ИсточникСуммыДляПересчетаВВалютуФинОтчетности'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ЗаданияКЗакрытиюМесяца.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти
	



#Область ОбновлениеИнформационнойБазыКА_ИспользуетсяУправлениеПроизводствомВерсии_ОбработатьДанныеДляПереходаНаНовуюВерсиюМонопольно

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.300";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ИспользуетсяУправлениеПроизводствомВерсии_ОбработатьДанныеДляПереходаНаНовуюВерсиюМонопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4c6c6bef-f954-4e93-9b6f-189184558853");
	
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьПроизводство";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьУправлениеПроизводством,"         
		+ "Константа.ИспользуетсяТолькоУправлениеПроизводством21,"
		+ "Константа.ИспользуетсяУправлениеПроизводством21и22,"
		+ "Константа.ИспользуетсяТолькоУправлениеПроизводством22";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение по умолчанию в константах:
    |- ИспользоватьУправлениеПроизводством
    |- МетодикаУправленияПроизводством
    |- ИспользуетсяТолькоУправлениеПроизводством21
    |- ИспользуетсяТолькоУправлениеПроизводством22
    |- ИспользуетсяУправлениеПроизводством21и22'
    |;uk='Встановлює значення по умовчанню у константах:
    |- ИспользоватьУправлениеПроизводством
    |- МетодикаУправленияПроизводством
    |- ИспользуетсяТолькоУправлениеПроизводством21
    |- ИспользуетсяТолькоУправлениеПроизводством22
    |- ИспользуетсяУправлениеПроизводством21и22'"); 
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

#КонецОбласти

#Область ОбновлениеИнформационнойБазыКА_ЗаполнитьКонстантуИспользоватьУчетПрочихДоходовРасходовРегл

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.300";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ЗаполнитьКонстантуИспользоватьУчетПрочихДоходовРасходовРегл";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dc6e2e60-fe52-4975-946a-d55f41c8f525");
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьУчетПрочихДоходовРасходовРегл";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьУчетПрочихДоходовРасходовРегл";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение константы ""Использовать учет прочих доходов и расходов в регл. учете"".';uk='Встановлює значення константи ""Використовувати облік інших доходів та витрат у регл. обліку"".'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыКА_УстановитьВариантыОбособления

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.300";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.УстановитьВариантыОбособления";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d19599dd-17ea-4c3b-846b-cda6e1927441");
	Обработчик.ЧитаемыеОбъекты = "Константа.ВариантОбособленияМатериаловВПереработке,"
		+ "Константа.ВариантОбособленияМатериаловПриПередачеВПроизводство";
	Обработчик.ИзменяемыеОбъекты = "Константа.ВариантОбособленияМатериаловВПереработке,"
		+ "Константа.ВариантОбособленияМатериаловПриПередачеВПроизводство";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение константы ""Вариант обособления материалов в переработке"".';uk='Встановлює значення константи ""Варіант відокремлення матеріалів у переробці"".'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыКА_ЗаполнитьКонстантуИспользоватьЛимитыРасходаДенежныхСредствБюджетирования

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.300";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ЗаполнитьКонстантуИспользоватьЛимитыРасходаДенежныхСредствБюджетирования";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9f30c4f3-aa67-49c6-8407-379d968be628");
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьБюджетирование,"
		+ "Константа.КонтролироватьПревышениеЛимитовРасходаДенежныхСредств";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьЛимитыРасходаДенежныхСредствБюджетирования";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение константы ""Использовать лимиты расхода денежных средств бюджетирования"".';uk='Встановлює значення константи ""Використовувати ліміти витрати коштів бюджетування"".'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыКА_УстановитьИспользованиеВнеоборотныхАктивов

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.300";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.УстановитьИспользованиеВнеоборотныхАктивов";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьВнеоборотныеАктивы2_2,"
		+ "Константа.ПорядокУчетаВНАВУпрУчете,"
		+ "Константа.ИспользоватьВнеоборотныеАктивы2_4,"
		+ "Константа.НомерЗаданияКРасчетуАмортизацииОС,"
		+ "Константа.ОтображатьВнеоборотныеАктивы2_2,"
	;
	Обработчик.Комментарий = НСтр("ru='Заполняет новые константы:
    |- ИспользоватьВнеоборотныеАктивы2_2
    |- ИспользоватьВнеоборотныеАктивы2_4
    |- ПорядокНачисленияАмортизацииУУ
    |- НомерЗаданияКРасчетуАмортизацииОС
    |- НомерЗаданияКРасчетуАмортизацииНМА'
    |;uk='Заповнює нові константи: 
    |- ИспользоватьВнеоборотныеАктивы2_2
    |- ИспользоватьВнеоборотныеАктивы2_4
    |- ПорядокНачисленияАмортизацииУУ
    |- НомерЗаданияКРасчетуАмортизацииОС
    |- НомерЗаданияКРасчетуАмортизацииНМА'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыКА_УстановитьДатуНачалаСписанияРезервовОтпусковДокументомОтражениеЗарплаты

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.300";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.УстановитьДатуНачалаСписанияРезервовОтпусковДокументомОтражениеЗарплаты";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6cac1ba7-0c9d-4cab-b5b4-bda7c9d2100c");
	Обработчик.ЧитаемыеОбъекты = ""
	//++ Локализация
		+ "Константа.ДатаНачалаСписанияРезервовОтпусковДокументомОтражениеЗарплаты"
	//-- Локализация
	;
	Обработчик.ИзменяемыеОбъекты = ""
	//++ Локализация
		+ "Константа.ДатаНачалаСписанияРезервовОтпусковДокументомОтражениеЗарплаты"
	//-- Локализация
	;
	Обработчик.Комментарий = НСтр("ru='Устанавливает дату начала списания резервов отпусков документом ""Отражение зарплаты в финансовом учете"".';uk='Встановлює дату початку списання резервів відпусток документом ""Відображення зарплати у фінансовому обліку"".'");

#КонецОбласти

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.300";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьФамилиюИмяИОтчествоПоДаннымРегистра";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыКА.ЗарегистрироватьЗаполнитьФамилиюИмяИОтчествоПоДаннымРегистра";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1dbd5789-c8c3-450d-afed-3d2d900233ff");
	Обработчик.Комментарий = НСтр("ru='Заполняет реквизиты ""Фамилия"", ""Имя"" и ""Отчество"" справочника ""Физические лица""';uk='Заповнює реквізити ""Прізвище"", ""Ім''я"" та ""По батькові"" довідника ""Фізичні особи""'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.4.300";
	Обработчик.Процедура = "РегистрыСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ПеренестиЛицевыеСчета";
	Обработчик.РежимВыполнения = "Оперативно";
	

КонецПроцедуры

// Обработчик первого запуска КА.
// Включает константу "ИспользоватьБюджетирование".
//
Процедура ЗаполнитьКонстантуИспользоватьБюджетирование() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьБюджетирование.Установить(Истина);
	Константы.ИнтерфейсВерсии82.Установить(Ложь);
	
КонецПроцедуры

//++ Локализация
//-- Локализация

// Обработчик первого запуска КА. 
// Настраивает ФО, создает ГруппыФинансовогоУчета для расчетов в национальной и иностранной валюте
// создает ГруппыФинансовогоУчета для товаров
//
Процедура ЗаполнитьГруппыФинансовогоУчетаРасчетовИНоменклатурыПоУмолчанию() Экспорт
	
	Константы.ИспользоватьНесколькоВалют.Установить(Истина);
	Константы.ИспользоватьГруппыФинансовогоУчета.Установить(Истина);
	
	Справочники.ГруппыФинансовогоУчетаРасчетов.СоздатьГруппыФинансовогоУчетаПоУмолчанию();
	Справочники.ГруппыФинансовогоУчетаНоменклатуры.СоздатьГруппыФинансовогоУчетаПоУмолчанию();
	
КонецПроцедуры



// Обработчик первого запуска КА.
// Включает константу "ИспользоватьРеглУчет".
//
Процедура ЗаполнитьКонстантуИспользоватьРеглУчет() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьРеглУчет.Установить(Истина);
	
КонецПроцедуры



// Обработчик обновления КА 2.5.4
// Установка служебной константы ""Использовать подсистему зарплата кадры корпоративная"".
//
Процедура ЗарегистрироватьИспользованиеЗарплатаКадрыКорпоративнаяПодсистемы(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик обновления КА 2.5.4
// Установка служебной константы ""Использовать подсистему зарплата кадры корпоративная"".
//
Процедура УстановитьИспользованиеЗарплатаКадрыКорпоративнаяПодсистемы(Параметры) Экспорт
	
	Константы.ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы.Установить(Ложь);
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

// Обработчик обновления КА 2.5.4
// Подключение новых документов и справочников к подсистеме дополнительных реквизитов и сведений.
//
Процедура ЗарегистрироватьКУстановкеПараметровНаборовСвойств(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик обновления КА 2.5.4
// Подключение новых документов и справочников к подсистеме дополнительных реквизитов и сведений.
//
Процедура УстановитьПараметрыНаборовСвойств(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьПроизводство");
		Блокировка.Заблокировать();
		
		ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
		
		// объекты, использование которых не зависит от констант
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ОтражениеЗарплатыВФинансовомУчете", ПараметрыНабора);
		
		// объекты, зависимые от константы ИспользоватьПроизводство
		ПараметрыНабора.Используется = Константы.ИспользоватьПроизводство.Получить();
		
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ВыработкаСотрудников", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_РаспределениеПроизводственныхЗатрат", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_РаспределениеПрочихЗатрат", ПараметрыНабора);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОбработкаЗавершена = Ложь;
		
		ОтменитьТранзакцию();
		
		Шаблон = НСтр("ru='Не удалось установить использование свойств по причине: %1';uk='Не вдалося встановити використання властивостей по причині: %1'");
		ТекстСообщения = СтрШаблон(Шаблон, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ТекстСообщения);
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры


#Область УстановкаКонстанты_ИсточникСуммыДляПересчетаВВалютуФинОтчетности

Процедура ИсточникСуммыДляПересчетаВВалютуФинОтчетности_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИсточникСуммыДляПересчетаВВалютуФинОтчетности_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ТекущееЗначение = Константы.ИсточникСуммыДляПересчетаВВалютуФинОтчетности.Получить();
	Если Не ЗначениеЗаполнено(ТекущееЗначение) Тогда
		МенеджерЗначения = Константы.ИсточникСуммыДляПересчетаВВалютуФинОтчетности.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ИсточникиСуммыДляПересчетаВВалютуФинОтчетности.БУ;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Истина
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстант_ИспользуетсяУправлениеПроизводствомВерсии


Процедура ИспользуетсяУправлениеПроизводствомВерсии_ОбработатьДанныеДляПереходаНаНовуюВерсиюМонопольно() Экспорт
	
	ИспользоватьПроизводство = Константы.ИспользоватьПроизводство.Получить();
	ИспользуетсяПроизводство21 = ИспользоватьПроизводство;
	ИспользуетсяПроизводство22 = Ложь;
	
	Константы.ИспользоватьУправлениеПроизводством.Установить(ИспользоватьПроизводство);
	
	
	НастройкиСистемы.УстановитьЗначениеКонстанты(
		Константы.ИспользуетсяТолькоУправлениеПроизводством21,
		ИспользуетсяПроизводство21 И НЕ ИспользуетсяПроизводство22);
	
	НастройкиСистемы.УстановитьЗначениеКонстанты(
		Константы.ИспользуетсяТолькоУправлениеПроизводством22,
		НЕ ИспользуетсяПроизводство21 И ИспользуетсяПроизводство22);
	
	НастройкиСистемы.УстановитьЗначениеКонстанты(
		Константы.ИспользуетсяУправлениеПроизводством21и22,
		ИспользуетсяПроизводство21 И ИспользуетсяПроизводство22);
	
КонецПроцедуры

#КонецОбласти

// Включает константу "ИспользоватьУчетПрочихДоходовРасходовРегл".
//
Процедура ЗаполнитьКонстантуИспользоватьУчетПрочихДоходовРасходовРегл() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьУчетПрочихДоходовРасходовРегл.Получить() Тогда
		МенеджерЗначения = Константы.ИспользоватьУчетПрочихДоходовРасходовРегл.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВариантыОбособления() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ВариантОбособленияМатериаловПриПередачеВПроизводство.Получить()) Тогда
		МенеджерЗначения = Константы.ВариантОбособленияМатериаловПриПередачеВПроизводство.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияМатериаловПриПередачеВПроизводство.НазначениеПолучателя;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ВариантОбособленияМатериаловВПереработке.Получить()) Тогда
		МенеджерЗначения = Константы.ВариантОбособленияМатериаловВПереработке.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияМатериаловВПереработке.ЗаказПереработчику;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает использование подсистемы внеоборотных активов.
//
Процедура УстановитьИспользованиеВнеоборотныхАктивов() Экспорт

	ЗначенияКонстант = Новый Структура;
	
	ОтображатьВнеоборотныеАктивы2_2 = Константы.ОтображатьВнеоборотныеАктивы2_2.Получить();
	ИспользоватьВнеоборотныеАктивы2_4 = Константы.ИспользоватьВнеоборотныеАктивы2_4.Получить();
	
	Если Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить() = Ложь 
		И Константы.ИспользоватьВнеоборотныеАктивы2_4.Получить() = Ложь 
		И (ВнеоборотныеАктивыЛокализация.ЕстьУчетВнеоборотныхАктивов2_2()
			ИЛИ ВнеоборотныеАктивыСлужебный.ЕстьУчетВнеоборотныхАктивов()) Тогда
		
		ЗначенияКонстант.Вставить("ИспользоватьВнеоборотныеАктивы2_2", Истина);
		ЗначенияКонстант.Вставить("ОтображатьВнеоборотныеАктивы2_2", Истина);
		
		ОтображатьВнеоборотныеАктивы2_2 = Истина;
	ИначеЕсли Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить() = Истина 
		И ОтображатьВнеоборотныеАктивы2_2 = Ложь Тогда
		
		ЗначенияКонстант.Вставить("ОтображатьВнеоборотныеАктивы2_2", Истина);
		
		ОтображатьВнеоборотныеАктивы2_2 = Истина;
	КонецЕсли; 
	
	
	
	Если НЕ ЗначениеЗаполнено(Константы.ПорядокУчетаВНАВУпрУчете.Получить()) Тогда
		ЗначенияКонстант.Вставить("ПорядокУчетаВНАВУпрУчете", Перечисления.ПорядокУчетаВНАВУпрУчете.ПоСтандартамМУ);
	КонецЕсли; 
	
	НомерЗаданияКЗакрытиюМесяца = Константы.НомерЗаданияКЗакрытиюМесяца.Получить();
	Если НЕ ЗначениеЗаполнено(Константы.НомерЗаданияКРасчетуАмортизацииОС.Получить()) Тогда
		ЗначенияКонстант.Вставить("НомерЗаданияКРасчетуАмортизацииОС", НомерЗаданияКЗакрытиюМесяца);
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Константы.НомерЗаданияКРасчетуАмортизацииНМА.Получить()) Тогда
		ЗначенияКонстант.Вставить("НомерЗаданияКРасчетуАмортизацииНМА", НомерЗаданияКЗакрытиюМесяца);
	КонецЕсли; 
	
	ОбновлениеИнформационнойБазыУТ.ЗаписатьЗначенияКонстант(ЗначенияКонстант);
	
КонецПроцедуры

// Устанавливает использование контроля лимитов при включенном бюджетировании
//
Процедура ЗаполнитьКонстантуИспользоватьЛимитыРасходаДенежныхСредствБюджетирования() Экспорт

	ЗначенияКонстант = Новый Структура;
	
	Если Константы.ИспользоватьБюджетирование.Получить()
		И Константы.КонтролироватьПревышениеЛимитовРасходаДенежныхСредств.Получить() Тогда
		
		ЗначенияКонстант.Вставить("ИспользоватьЛимитыРасходаДенежныхСредствБюджетирования", Истина);
	КонецЕсли; 
	
	ОбновлениеИнформационнойБазыУТ.ЗаписатьЗначенияКонстант(ЗначенияКонстант);
	
КонецПроцедуры

// Устанавливает дату включения нового механизма учета резервов отпусков
//
Процедура УстановитьДатуНачалаСписанияРезервовОтпусковДокументомОтражениеЗарплаты() Экспорт
	
	ИмяКонстанты = "ДатаНачалаСписанияРезервовОтпусковДокументомОтражениеЗарплаты";
	
	Если Не ЗначениеЗаполнено(Константы[ИмяКонстанты].Получить()) Тогда
		
		ЗначенияКонстант = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(Отпуск.ПериодРегистрации) КАК ПериодРегистрации
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Проведен";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.ПериодРегистрации) Тогда
			ЗначенияКонстант.Вставить(ИмяКонстанты, ДобавитьМесяц(Выборка.ПериодРегистрации, 1));
		Иначе
			ЗначенияКонстант.Вставить(ИмяКонстанты, '1980-01-01');
		КонецЕсли;
		
		ОбновлениеИнформационнойБазыУТ.ЗаписатьЗначенияКонстант(ЗначенияКонстант);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗарегистрироватьЗаполнитьФамилиюИмяИОтчествоПоДаннымРегистра(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
