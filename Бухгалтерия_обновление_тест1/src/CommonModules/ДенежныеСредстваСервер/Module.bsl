
#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма()).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВПути);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваНаличные);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыПоЭквайрингу);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.КнигаДоходовРасходовПоЕдиномуНалогу);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВПути);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваНаличные);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам учета денежных средств.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДенежныеСредстваБезналичные");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДенежныеСредстваВКассахККМ");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДенежныеСредстваВПути");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДенежныеСредстваНаличные");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РасчетыПоЭквайрингу");
	ЗаполнитьНомерПлатежногоДокументаЕдиныйНалог(ТаблицыДляДвижений, Движения);
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "КнигаДоходовРасходовПоЕдиномуНалогу");
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеИнтерфейснымиЭлементами

// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме.
//
Процедура УстановитьВидимостьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭлементовПоМассиву()

// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме
//	ИмяТЧ - Строка - Имя табличной части, текущая строка которой выводится в виде отдельных реквизитов
//	ИмяЗаменыТЧ - Строка - Наименование подстроки замены наименования реквизитов табличной части.
//
Процедура УстановитьВидимостьЭлементовПоМассивуРасширенный(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов,
	Знач ИмяТЧ, Знач ИмяЗаменыТЧ) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(СтрЗаменить(ЭлементМассива, ИмяТЧ, ИмяЗаменыТЧ), ".", "");
		
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
			И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает доступность элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы.
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается доступность.
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть доступны на форме.
//
Процедура УстановитьДоступностьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ДоступностьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		
		ЭлементФормы = Элементы[ИмяРеквизита]; // ПолеФормы
		
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
			И ЭлементФормы.Доступность <> ДоступностьРеквизита Тогда
				ЭлементФормы.Доступность = ДоступностьРеквизита;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает видимость подбора по остаткам расчетов в форме.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Кнопка - КнопкаФормы - Кнопка формы для открытия подбора.
//
Процедура УстановитьВидимостьПодбораПоОстаткамРасчетов(ХозяйственнаяОперация, Кнопка) Экспорт
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	
	Кнопка.Видимость = (МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено);
	
КонецПроцедуры // УстановитьВидимостьПодбораПоОстаткамРасчетов()

Процедура УправлениеЭлементамиФормыПриЧтенииСозданииНаСервере(Форма) Экспорт

	ИмяОбъекта = "";
	Если Форма.Параметры.Свойство("Ключ") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Форма.Параметры.Ключ));
		Если ОбъектМетаданных <> Неопределено Тогда
			ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИмяОбъекта) Тогда
		ВызватьИсключение НСтр("ru='Не удалось выполнить настройку полей формы';uk='Не вдалося виконати настройку полів форми'");
	КонецЕсли;

	НастройкиПолейФормы = ИнициализироватьНастройкиПолейФормы();
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОбъекта);
	Менеджер.ЗаполнитьНастройкиПолейФормы(НастройкиПолейФормы);

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НастройкиПолей") Тогда
		Реквизиты = Новый Массив;
		Реквизиты.Добавить(Новый РеквизитФормы("НастройкиПолей", Новый ОписаниеТипов("ТаблицаЗначений")));
		Реквизиты.Добавить(Новый РеквизитФормы("Поля", Новый ОписаниеТипов(), "НастройкиПолей"));
		Реквизиты.Добавить(Новый РеквизитФормы("Условие", Новый ОписаниеТипов("ОтборКомпоновкиДанных"), "НастройкиПолей"));
		Реквизиты.Добавить(Новый РеквизитФормы("Свойства", Новый ОписаниеТипов(), "НастройкиПолей"));
		Форма.ИзменитьРеквизиты(Реквизиты);
	КонецЕсли;
	Форма.ЗначениеВРеквизитФормы(НастройкиПолейФормы, "НастройкиПолей");

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЗависимостиПолей") Тогда
		Реквизиты = Новый Массив;
		Реквизиты.Добавить(Новый РеквизитФормы("ЗависимостиПолей", Новый ОписаниеТипов("ТаблицаЗначений")));
		Реквизиты.Добавить(Новый РеквизитФормы("ИмяРеквизита", Новый ОписаниеТипов("Строка"), "ЗависимостиПолей"));
		Реквизиты.Добавить(Новый РеквизитФормы("ЗависимыеПоля", Новый ОписаниеТипов(), "ЗависимостиПолей"));
		Форма.ИзменитьРеквизиты(Реквизиты);
	КонецЕсли;
	ЗависимостиПолейФормы = ЗависимостиПолейФормы(НастройкиПолейФормы);
	Форма.ЗначениеВРеквизитФормы(ЗависимостиПолейФормы, "ЗависимостиПолей");

КонецПроцедуры

Функция ЗависимостиПолейФормы(НастройкиПолей) Экспорт
	
	ЗависимостиПолей = ИнициализироватьЗависимостиПолейФормы();
	
	Для каждого СтрокаНастройки Из НастройкиПолей Цикл
		
		Реквизиты = Новый Массив;
		ЗаполнитьРеквизитыПоОтбору(СтрокаНастройки.Условие, Реквизиты);
		
		Для каждого Реквизит Из Реквизиты Цикл
			ПозТочки = СтрНайти(Реквизит, ".");
			Если ПозТочки = 0 Тогда
				ИмяРеквизита = Реквизит;
			Иначе
				ИмяРеквизита = Сред(Реквизит, ПозТочки + 1);
			КонецЕсли;
			СтрокаТаблицы = ЗависимостиПолей.Найти(ИмяРеквизита, "ИмяРеквизита");
			Если СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы = ЗависимостиПолей.Добавить();
				СтрокаТаблицы.ИмяРеквизита = ИмяРеквизита;
			КонецЕсли;
			Для каждого Поле Из СтрокаНастройки.Поля Цикл
				СтрокаТаблицы.ЗависимыеПоля.Добавить(Поле);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗависимостиПолей;
	
КонецФункции

// Дабавляет реквизиты в массив непроверяемых, если свойства элемента не позволяют проверить реквизит
//
// Параметры:
//    СвойстваЭлементов - Массив - свойства элементов
//    МассивНепроверяемыхРеквизитов - Массив - непроверяемые реквизиты
Процедура ОтключитьПроверкуЗаполненияРеквизитовОбъекта(СвойстваЭлементов, МассивНепроверяемыхРеквизитов) Экспорт
	
	Для каждого СвойстваЭлемента Из СвойстваЭлементов Цикл
		Если ЗначениеЗаполнено(СвойстваЭлемента.ИмяЭлемента)
			И (СвойстваЭлемента.Свойство = "Видимость"
				Или СвойстваЭлемента.Свойство = "ТолькоПросмотр"
				Или СвойстваЭлемента.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного"
				Или СвойстваЭлемента.Свойство = "ОтметкаНезаполненного"
				Или СвойстваЭлемента.Свойство = "АвтоОтметкаНезаполненного") Тогда
			
			Если (СвойстваЭлемента.Свойство = "Видимость"
				Или СвойстваЭлемента.Свойство = "ОтметкаНезаполненного"
				Или СвойстваЭлемента.Свойство = "АвтоОтметкаНезаполненного")
					И СвойстваЭлемента.Значение = Ложь
				Или СвойстваЭлемента.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного"
					И СвойстваЭлемента.Значение = Истина
				Или СвойстваЭлемента.Свойство = "ТолькоПросмотр"
					И СвойстваЭлемента.Значение = Истина Тогда
					
				МассивНепроверяемыхРеквизитов.Добавить(СвойстваЭлемента.ИмяЭлемента);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизитыОбъекта(Объект, СвойстваЭлементов, РеквизитыИсключения = Неопределено) Экспорт
	
	Реквизиты = Объект.Метаданные().Реквизиты;
	ТабличныеЧасти = Объект.Метаданные().ТабличныеЧасти;
	
	Для каждого СвойстваЭлемента Из СвойстваЭлементов Цикл
		
		Если РеквизитыИсключения <> Неопределено
			И РеквизитыИсключения.Найти(СвойстваЭлемента.ИмяЭлемента) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвойстваЭлемента.ИмяЭлемента)
			И СвойстваЭлемента.Свойство = "Видимость"
			И Не СвойстваЭлемента.Значение Тогда
		
			Если Реквизиты.Найти(СвойстваЭлемента.ИмяЭлемента) <> Неопределено
				И ЗначениеЗаполнено(Объект[СвойстваЭлемента.ИмяЭлемента]) Тогда
				
				Объект[СвойстваЭлемента.ИмяЭлемента] = Неопределено;
				
			ИначеЕсли ТабличныеЧасти.Найти(СвойстваЭлемента.ИмяЭлемента) <> Неопределено
				И Объект[СвойстваЭлемента.ИмяЭлемента].Количество() Тогда
				
				Объект[СвойстваЭлемента.ИмяЭлемента].Очистить();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пустую таблицу настроек полей формы
// 
// Возвращаемое значение:
//     ТаблицаЗначений - таблица с колонками:
//         * Поля - Массив из Строка - Поля, для которых действует настройка.
//         * Условие - ОтборКомпоновкиДанных - Определяет действительность настройки.
//         * Свойства - Структура - Свойства полей.
//
Функция ИнициализироватьНастройкиПолейФормы() Экспорт
	
	НастройкиПолейФормы = Новый ТаблицаЗначений;
	НастройкиПолейФормы.Колонки.Добавить("Поля", Новый ОписаниеТипов("Массив"));
	НастройкиПолейФормы.Колонки.Добавить("Условие", Новый ОписаниеТипов("ОтборКомпоновкиДанных"));
	НастройкиПолейФормы.Колонки.Добавить("Свойства", Новый ОписаниеТипов("Структура"));
	
	Возврат НастройкиПолейФормы;
	
КонецФункции

// Инициализирует табличную часть для отображения одной строкой или несколькими
// 
// Параметры:
//     Форма - ФормаКлиентскогоПриложения - Форма.
//     ИмяТЧ - Строка - Имя таблично части.
//     Переключатель - Число - Флаг взведения переключателя.
//
Процедура ИнициализироватьТабличнуюЧасть(Форма, ИмяТЧ, Переключатель) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		НоваяСтрока = Объект[ИмяТЧ].Добавить();
		ЭлементФормы = Элементы[ИмяТЧ]; // ТаблицаФормы
		ЭлементФормы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Переключатель = 0;
	ИначеЕсли Объект[ИмяТЧ].Количество() = 1 Тогда
		ЭлементФормы = Элементы[ИмяТЧ]; // ТаблицаФормы
		ЭлементФормы.ТекущаяСтрока = Объект[ИмяТЧ][0].ПолучитьИдентификатор();
		Переключатель = 0;
	Иначе
		Переключатель = 1;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет настройки данные настроек для банковских счетов
//
// Параметры:
//	Настройки - ТаблицаЗначений - таблица с колонками:
//		* Поля - Массив - поля, для которых определяются настройки отображения
//		* Условие - ОтборКомпоновкиДанных - условиия применения настройки
//		* Свойства - Структура - имена и значения свойств
// 
Процедура НастройкиЭлементовБанков(Настройки) Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;
	
	// Банк
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "РучноеИзменениеРеквизитовБанка", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СВИФТБанка");
	Элемент.Поля.Добавить("НаименованиеБанка");
	Элемент.Поля.Добавить("СтранаБанка");
	Элемент.Поля.Добавить("ГородБанка");
	Элемент.Поля.Добавить("ГородБанкаМеждународный");
	Элемент.Поля.Добавить("АдресБанкаМеждународный");
	Финансы.НовыйОтбор(Элемент.Условие, "РучноеИзменениеРеквизитовБанка", Истина);
	Элемент.Свойства.Вставить("Доступность");

	// НаименованиеБанкаМеждународное и НаименованиеБанкаДляРасчетовМеждународное пока не заполняются из классификатора
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НаименованиеБанкаДляРасчетовМеждународное");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользуетсяБанкДляРасчетов", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СчетВБанкеДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользуетсяБанкДляРасчетов", Истина);
	Элемент.Свойства.Вставить("Доступность");

	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерСчета");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Истина);
	Элемент.Свойства.Вставить("Маска", "");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерСчета");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Маска", "!!999999999999999999999999999");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru='МФО';uk='МФО'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Истина);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru='Национальный код банка';uk='Національний код банку'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РучноеИзменениеРеквизитовБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтранаБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтранаБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НаименованиеБанка");
	Элемент.Поля.Добавить("ГородБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НаименованиеБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Видимость", Истина);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НаименованиеБанкаМеждународное");
	Элемент.Поля.Добавить("ГородБанкаМеждународный");
	Элемент.Поля.Добавить("АдресБанкаМеждународный");
	Элемент.Поля.Добавить("НаименованиеБанкаДляРасчетовМеждународное");
	Элемент.Поля.Добавить("АдресБанкаДляРасчетовМеждународный");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
КонецПроцедуры

// Управляет элементами формы в режиме "без разбиения"
// 
// Параметры:
//     Форма - ФормаКлиентскогоПриложения - Форма.
//
Процедура УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.РасшифровкаПлатежа.Количество() Тогда
		
		ТекСтрока = Объект.РасшифровкаПлатежа[0];
		
		ТолькоПросмотрПартнераВалюты = ТекСтрока.Свойство("ОбъектРасчетов") И ЗначениеЗаполнено(ТекСтрока.ОбъектРасчетов)
		//++ НЕ УТ
			Или ТекСтрока.Свойство("ДоговорЛизинга") И ЗначениеЗаполнено(ТекСтрока.ДоговорЛизинга)
		//-- НЕ УТ
			Или ТекСтрока.Свойство("ДоговорКредитаДепозита") И ЗначениеЗаполнено(ТекСтрока.ДоговорКредитаДепозита);
			
		Элементы.РасшифровкаБезРазбиенияПартнер.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.РасшифровкаБезРазбиенияВалютаВзаиморасчетов.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
	КонецЕсли;
	
КонецПроцедуры

#Область ВидимостьОпераций

// Процедура устанавливает видимость выбора оплаты платежной картой в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора формы оплаты.
//
Процедура УстановитьВидимостьОплатыПлатежнойКартой(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПлатежнаяКарта);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению("ПлатежнаяКарта");
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции поступления из другой кассы
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийПередачиМеждуКассами(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
		
		Для каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции перечисления на другой счет
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийПеречисленияНаДругойСчет(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета);
		
		Для каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций с кассами ККМ в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийСКассамиККМ(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций оплаты ДС в другую организацию в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийПередачиМеждуОрганизациями(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
		
		Для каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций внутренней передачи ДС в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийВнутреннейПередачи(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций оплаты ДС по договорам кредитов и депозитов.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаФинансовыхИнструментов);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам);
		
		Для каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииКонвертацияВалютыНаличные(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииКонвертацияВалютыБезналичные(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииКонвертацияВалюты(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций по зарплате в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииПоЗарплате(Поле) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		
		МассивОперацийПоЗарплате = Новый Массив;
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
		
		Для каждого Элемент Из МассивОперацийПоЗарплате Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Элемент);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций эквайринга в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийЭквайринга(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций выдачи и погашения займов сотрудникам в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийЗаймамСотрудникам(Поле) Экспорт
	
	ОперацииПоЗаймамНеДоступны = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");

	Если ОперацииПоЗаймамНеДоступны Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииОплатаЛизингодателю(Поле) Экспорт
	
	ИспользоватьЛизинг = Ложь;
	//++ НЕ УТ
	ИспользоватьЛизинг = ПолучитьФункциональнуюОпцию("ИспользоватьЛизинг");
	//-- НЕ УТ
	Если Не ИспользоватьЛизинг Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "ПрочееПоступлениеДенежныхСредств" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииПрочееПоступлениеДенежныхСредств(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "ПрочаяВыдачаДенежныхСредств" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииПрочаяВыдачаДенежныхСредств(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость статьи декларации по единому налогу в форме.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	Элемент - ПолеВвода - Элемент формы
//
Процедура УстановитьВидимостьСтатьиДекларацииПоЕдиномуНалогу(Объект, Элемент) Экспорт
	
	Элемент.Видимость = Справочники.Организации.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

// Процедура устанавливает видимость суммы дохода по единому налогу в форме.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	Элемент - ПолеВвода - Элемент формы
//
Процедура УправлениеЭлементомСуммаПоЕдиномуНалогу(Объект, Элемент) Экспорт
	
	Элемент.Родитель.Видимость = Справочники.Организации.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата);
	Элемент.КнопкаСпискаВыбора = Справочники.Организации.ПлательщикНДС(Объект.Организация, Объект.Дата)
	
КонецПроцедуры 

#КонецОбласти

// Процедура устанавливает заголовок колонки "Сумма платежа".
//
// Параметры:
//    Валюта - СправочникСсылка.Валюты - Валюта документа
//    ЭлементыФормы - ВсеЭлементыФормы - Коллекция элементов управляемой формы
//    ЭлементыКИзменению - Массив - Имена элементов формы для изменения заголовка
//
Процедура УстановитьЗаголовокСуммыПлатежа(Валюта, Элементы, ЭлементыКИзменению = Неопределено) Экспорт
	
	ЭлементФормы = Элементы.РасшифровкаПлатежаСумма; // ПолеФормы
	ЭлементФормы.Заголовок = СтрШаблон(НСтр("ru='Сумма (%1)';uk='Сума (%1)'"), Строка(Валюта));
	
	Если Элементы.Найти("РасшифровкаПлатежаСуммаНДС") <> Неопределено Тогда
		ЭлементФормы = Элементы.РасшифровкаПлатежаСуммаНДС; // ПолеФормы
		ЭлементФормы.Заголовок = СтрШаблон(НСтр("ru='Сумма НДС (%1)';uk='Сума ПДВ (%1)'"), Строка(Валюта));
	КонецЕсли;
	
	Если ЭлементыКИзменению <> Неопределено И ТипЗнч(ЭлементыКИзменению) = Тип("Массив") Тогда
		Для каждого ЭлементФормы Из ЭлементыКИзменению Цикл
			ЭлементФормы = Элементы[ЭлементФормы]; // ПолеФормы
			ЭлементФормы.Заголовок = СтрШаблон(НСтр("ru='Сумма (%1)';uk='Сума (%1)'"), Строка(Валюта));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для кассы.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементКасса - ПолеФормы - Поле для ввода кассы.
//
Процедура УстановитьПараметрыВыбораКассы(Объект, ЭлементКасса) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда

		Если Не ЗначениеЗаполнено(Объект.Касса) Или УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		ИначеЕсли Объект.Свойство("ЗаявкаНаРасходованиеДенежныхСредств")
			И ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		ЭлементКасса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Иначе
		ЭлементКасса.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
			Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций())));
	КонецЕсли;
	
	ЭлементКасса.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для банковского счета.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчет - ПолеФормы - Поле для ввода банковского счета.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчета(Объект, ЭлементБанковскийСчет) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Или УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		ИначеЕсли Объект.Свойство("ЗаявкаНаРасходованиеДенежныхСредств")
			И ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		ЭлементБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Иначе
		ЭлементБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
			Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций())));
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств",
			Константы.ВалютаРегламентированногоУчета.Получить()));
	КонецЕсли;
	
	ЭлементБанковскийСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчета()

// Процедура устанавливает параметры выбора для банковского счета получателя.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчет - ПолеФормы - Поле для ввода банковского счета.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элемент) Экспорт
	
	МассивСвязиПараметров = Новый Массив;
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаКонвертации"));
	Иначе
		Если Не Объект.Свойство("ПланированиеСуммы")
			Или Объект.Свойство("ПланированиеСуммы") И Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
			МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
		КонецЕсли;
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию) Тогда
		
		Если Объект.Свойство("ОрганизацияПолучатель") И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
			МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ОрганизацияПолучатель"));
		Иначе
			СписокОрганизаций = Новый СписокЗначений;
			ПараметрыВыбораОрганизации = Новый Структура;
			ПараметрыВыбораОрганизации.Вставить("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоНеВзаимосвязанные");
			ПараметрыВыбораОрганизации.Вставить("Организация", Объект.Организация);
			ПараметрыВыбораОрганизации.Вставить("СтрокаПоиска", Неопределено);
			СтандартнаяОбработка = Ложь;
			ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияДанныхВыбора(СписокОрганизаций, ПараметрыВыбораОрганизации, СтандартнаяОбработка);
			
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(СписокОрганизаций.ВыгрузитьЗначения())));
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
			Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация))));
	КонецЕсли;
	
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязиПараметров);
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчетаПолучателя()

// Процедура устанавливает параметры выбора для эквайрингового терминала.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементЭквайринговыйТерминал - ПолеФормы - Поле для ввода эквайрингового терминала.
//
Процедура УстановитьПараметрыВыбораЭквайринговогоТерминала(Объект, ЭлементЭквайринговыйТерминал) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
			ИЛИ ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств)
			ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		Если НуженОтборПоОрганизации Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ДанныеСправочника.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчетаОрганизаций КАК ДанныеСправочника
			|ГДЕ
			|	ДанныеСправочника.Владелец = &Организация
			|	И НЕ ДанныеСправочника.Закрыт
			|	И НЕ ДанныеСправочника.ПометкаУдаления
			|";
			
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
			МассивБанковскихСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.БанковскийСчет", Новый ФиксированныйМассив(МассивБанковскихСчетов));
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(ПараметрВыбора);
			
			ЭлементЭквайринговыйТерминал.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для партнера.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементПартнер - ПолеФормы - Поле для ввода партнера.
//
Процедура УстановитьПараметрыВыбораПартнера(Объект, ЭлементПартнер) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
	Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		
	КонецЕсли;
	
	ЭлементПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораПартнера()

// Процедура устанавливает параметры выбора для банковского счета контрагента.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчетКонтрагента - ПолеФормы - Поле для ввода банковского счета контрагента.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элемент) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПодотчетноеЛицо"));
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
	КонецЕсли;
	
	МассивПараметровВыбора = Новый Массив;
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Закрыт", Ложь);
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для заявки на расходование денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементЗаявка - ПолеФормы - Поле для ввода заявки на расходование денежных средств.
//
Процедура УстановитьПараметрыВыбораЗаявки(Объект, ЭлементЗаявка) Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперацияПоЗарплате", "Объект.ХозяйственнаяОперация",
			РежимИзмененияСвязанногоЗначения.НеИзменять));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком
		Или  Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперацияПоЗарплате",
			Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация",
			РежимИзмененияСвязанногоЗначения.НеИзменять));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
	КонецЕсли;
	
	ЭлементЗаявка.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	ЭлементЗаявка.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораЗаявки()

// Процедура устанавливает параметры выбора для списания денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСписание - ПолеФормы - Поле для ввода списания денежных средств.
//
Процедура УстановитьПараметрыВыбораСписанияДенежныхСредств(Объект, ЭлементСписание) Экспорт
	
	МассивПараметров = Новый Массив;
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Новый ФиксированныйМассив(МассивОпераций));
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.БанковскийСчет", "Объект.БанковскийСчет"));
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Новый ФиксированныйМассив(МассивОпераций));
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.БанковскийСчет", "Объект.БанковскийСчет"));
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	Иначе
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаКонвертации", "Объект.Валюта"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ПодотчетноеЛицо", "Объект.ПодотчетноеЛицо"));
	КонецЕсли;
	
	ЭлементСписание.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	ЭлементСписание.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для статьи движения денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСтатья - ПолеФормы - Поле для ввода статьи движения денежных средств.
//
Процедура УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, ЭлементСтатья) Экспорт
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		МассивПараметров.Добавить(
			Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперацияПоЗарплате",
				РежимИзмененияСвязанногоЗначения.НеИзменять));
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация"));
	КонецЕсли;
	ЭлементСтатья.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для статьи расходов
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСтатья - ПолеФормы - Поле для ввода статьи расходов.
//
Процедура УстановитьПараметрыВыбораСтатьиРасходов(Объект, Элемент) Экспорт
	
	МассивПараметровВыбора = Новый Массив;
	
	Если (ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			Или ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"))
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	Иначе
		
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора договора кредита(депозита, займа)
// и очищает договора кредита (депозита, займа) не соответствующие текущей хозяйственной операции, организации.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//  ЭлементРасшифровкаПлатежаДоговор - ПолеФормы - Поле для ввода договора кредита (депозита)
//  ОчиститьДоговора - Булево - Если истина тогда очищать в таб.части расшифровка платежа договора кредита (депозита) 
//								не соответствующие текущей хозяйственной операции.
//
Процедура УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, ЭлементРасшифровкаПлатежаДоговор, ОчиститьДоговора = Истина) Экспорт
	
	ХарактерДоговора = Справочники.ДоговорыКредитовИДепозитов.ХарактерДоговораПоОперации(Объект.ХозяйственнаяОперация);
	Если ХарактерДоговора = Неопределено Тогда// это не кредитно\депозитная хоз.операция
		Возврат;
	КонецЕсли;
	
	// Определим параметры выбора
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДоговора", ХарактерДоговора));
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	// Определимся с отбором по организации
	Организация = Неопределено;
	Если ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") 
		ИЛИ ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		Если НЕ Объект.БанковскийСчет.Пустая() Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БанковскийСчет,"ВалютаДенежныхСредств,Владелец");
			Организация = Реквизиты.Владелец;
			Валюта = Реквизиты.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если НЕ Объект.Касса.Пустая() Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Касса,"ВалютаДенежныхСредств,Владелец");
			Организация = Реквизиты.Владелец;
			Валюта = Реквизиты.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Объект.Организация) Тогда
		Организация = Объект.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Организация));
	КонецЕсли;
	
	// Определимся с отбором по валюте
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДоговора.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДанныеДоговора
	|ГДЕ
	|	НЕ ДанныеДоговора.ПометкаУдаления
	|	И (ДанныеДоговора.Организация = &Организация ИЛИ &ЛюбаяОрганизация)
	|	И (ДанныеДоговора.Контрагент = &Контрагент ИЛИ &ЛюбойКонтрагент)
	|	И ДанныеДоговора.ХарактерДоговора = &ХарактерДоговора
	|	И ДанныеДоговора.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И (ДанныеДоговора.ВалютаВзаиморасчетов = &ВалютаРегл И ДанныеДоговора.ОплатаВВалюте
	|	ИЛИ ДанныеДоговора.ВалютаВзаиморасчетов <> &ВалютаРегл И НЕ ДанныеДоговора.ОплатаВВалюте)");
	Запрос.УстановитьПараметр("Организация"     , Организация);
	Запрос.УстановитьПараметр("ЛюбаяОрганизация", НЕ ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Контрагент"      , Объект.Контрагент);
	Запрос.УстановитьПараметр("ЛюбойКонтрагент" , НЕ ЗначениеЗаполнено(Объект.Контрагент));
	Запрос.УстановитьПараметр("ХарактерДоговора", ХарактерДоговора);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ИмеютсяРасчетыВВалютеОплатаВРублях = Запрос.Выполнить().Выбрать().Следующий();
	Если НЕ ИмеютсяРасчетыВВалютеОплатаВРублях Тогда
		Если НЕ ЗначениеЗаполнено(Валюта) И ЗначениеЗаполнено(Объект.Валюта) Тогда
			Валюта = Объект.Валюта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Валюта) Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Валюта));
		КонецЕсли;
	КонецЕсли;
	
	// Установим параметры выбора
	ЭлементРасшифровкаПлатежаДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Определим связей параметров выбора
	МассивСвязей = Новый Массив;
	ОчищатьДоговор = РежимИзмененияСвязанногоЗначения.Очищать;
	Если НЕ Объект.Организация.Пустая() Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", ОчищатьДоговор));
	КонецЕсли;
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент","Объект.Контрагент", ОчищатьДоговор));
		Партнеры = Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("Партнер");
		Если Партнеры.Количество() > 0 И ЗначениеЗаполнено(Партнеры[0]) Тогда
			МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Партнер","Элементы.РасшифровкаПлатежа.ТекущиеДанные.Партнер", ОчищатьДоговор));
		КонецЕсли;
	КонецЕсли;
	ЭлементРасшифровкаПлатежаДоговор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);

	// Очистим договора не соответствующие текущей хозяйственной операции
	Если ОчиститьДоговора Тогда
		МассивДоговоров = Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("ДоговорКредитаДепозита");
		РеквизитыДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДоговоров, "Организация,ХарактерДоговора");
		Если РеквизитыДоговоров.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКредитаДепозита) Тогда
					Продолжить;
				КонецЕсли;
				Если РеквизитыДоговоров[СтрокаТаблицы.ДоговорКредитаДепозита].Организация <> Организация
					ИЛИ РеквизитыДоговоров[СтрокаТаблицы.ДоговорКредитаДепозита].ХарактерДоговора <> ХарактерДоговора Тогда
					СтрокаТаблицы.ДоговорКредитаДепозита = Неопределено;
					СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;// есть что очищать
	КонецЕсли;// Необходимо очистить договора кредитов (депозитов)
	
КонецПроцедуры

// Процедура список выбора типов сумм текущей хозяйственной операции.
//
// Параметры:
//	Список - СписокЗначений - список выбора элемента формы
//  ХозОперация - Перечисления.ХозяйственныеОперации - текущая хозяйственная операция.
//
Процедура ЗаполнитьСписокТиповСуммКредитовДепозитов(Список, ХозОперация) Экспорт
	
	ТипыСумм = Перечисления.ТипыСуммГрафикаКредитовИДепозитов;
	Список.Очистить();
	Список.Добавить(ТипыСумм.ОсновнойДолг);
	Список.Добавить(ТипыСумм.Проценты);
	Если ХозОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		Список.Добавить(ТипыСумм.Комиссия);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список периодов возникновения расходов для платежей в бюджет
//
// Параметры:
//    Список - СписокЗначений - список выбора элемента формы
//    Дата - Дата - Дата, к которой относятся периоды.
//
Процедура ЗаполнитьСписокПериодовВозникновенияРасходов(Список, Знач Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Список.Очистить();
	Список.Добавить(НачалоДня(Дата), НСтр("ru='Текущий день';uk='Поточний день'"));
	Список.Добавить(ДобавитьМесяц(НачалоМесяца(Дата), -1), НСтр("ru='Прошлый месяц';uk='Минулий місяць'"));
	Список.Добавить(ДобавитьМесяц(НачалоКвартала(Дата), -1), НСтр("ru='Прошлый квартал';uk='Минулий квартал'"));
	Список.Добавить(ДобавитьМесяц(НачалоГода(Дата), -1), НСтр("ru='Прошлый год';uk='Минулий рік'"));
	Список.Добавить(ДобавитьМесяц(НачалоМесяца(Дата), 1), НСтр("ru='Следующий месяц';uk='Наступний місяць'"));
	Список.Добавить(ДобавитьМесяц(НачалоКвартала(Дата), 3), НСтр("ru='Следующий квартал';uk='Наступний квартал'"));
	Список.Добавить(ДобавитьМесяц(НачалоГода(Дата), 12), НСтр("ru='Следующий год';uk='Наступний рік'"));
	
КонецПроцедуры

// Заполняет организацию владельца объекта расчета в табличной части.
//
// Параметры:
//  ТабличнаяЧасть - ТабличнаяЧасть - Расшифровка платежа, должна содержать поля "Заказ" и "Организация"
//  Организация - СправочникСсылка.Организация - Организация документа
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа
//
Процедура ЗаполнитьОрганизациюВТабличнойЧасти(ТабличнаяЧасть, Организация, ХозяйственнаяОперация) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Организация КАК Организация,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Ссылка В (&МассивОбъектовРасчетов)");
	Запрос.УстановитьПараметр("МассивОбъектовРасчетов", ТабличнаяЧасть.ВыгрузитьКолонку("ОбъектРасчетов"));
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	ТаблицаОрганизаций.Индексы.Добавить("ОбъектРасчетов");
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		СтруктураПоиска = Новый Структура("ОбъектРасчетов", СтрокаТЧ.ОбъектРасчетов);
		
		СтрокиОрганизаций = ТаблицаОрганизаций.НайтиСтроки(СтруктураПоиска);
		Если СтрокиОрганизаций.Количество() = 1 Тогда
			СтрокаТЧ.Организация = СтрокиОрганизаций[0].Организация;
		Иначе
			СтрокаТЧ.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТ

// Процедура устанавливает параметры выбора договора лизинга.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//  ЭлементРасшифровкаПлатежаДоговор - ПолеФормы - Поле для ввода договора лизинга.
//
Процедура УстановитьПараметрыВыбораДоговораЛизинга(Объект, ЭлементРасшифровкаПлатежаДоговор) Экспорт
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю Тогда
		Возврат;
	КонецЕсли;
	
	// Установим параметр выбора
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	Организация = Неопределено;
	Если ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		Если НЕ Объект.БанковскийСчет.Пустая() Тогда
			Организация = Объект.БанковскийСчет.Владелец;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если НЕ Объект.Касса.Пустая() Тогда
			Организация = Объект.Касса.Владелец;
		КонецЕсли;
	КонецЕсли;
	
	Если Организация = Неопределено И НЕ Объект.Организация.Пустая() Тогда
		Организация = Объект.Организация;
	КонецЕсли;
	
	Если Организация <> Неопределено Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Организация));
	КонецЕсли;
	
	ЭлементРасшифровкаПлатежаДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#Область ФункцииЗаполненияДокументов

// Функция определяет партнера, соответствующего выбранному контрагенту.
//
// Возвращает ссылку на партнера или Неопределено, если заданный для контрагента партнер не удовлетворяет условиям отбора.
//
// Параметры:
//    Контрагент - СправочникСсылка.Контрагенты - контрагент, партнера которого нужно найти
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - необязательное ограничение по хозяйственной операции.
//
// Возвращаемое значение:
//    СправочникСсылка.Партнеры - Партнер.
//
Функция ПолучитьПартнераПоКонтрагенту(Контрагент, ХозяйственнаяОперация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|	И (ВЫБОР КОГДА &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту))
	|	ТОГДА
	|		Контрагенты.Партнер.Клиент
	|	КОГДА &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов))
	|	ТОГДА
	|		Контрагенты.Партнер.ПрочиеОтношения
	|	ИНАЧЕ
	|		Контрагенты.Партнер.Поставщик
	|	КОНЕЦ
	|		ИЛИ &ХозяйственнаяОперация = НЕОПРЕДЕЛЕНО
	|		ИЛИ &ИспользоватьПартнеровКакКонтрагентов)
	|";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьПартнеровКакКонтрагентов", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Партнер = Выборка.Партнер;
	Иначе
		Партнер = Неопределено;
	КонецЕсли;
	
	Возврат Партнер;

КонецФункции // ПолучитьПартнераПоКонтрагенту()

// Процедура заполняет значения полей "МФО" и "КоррСчет".
//
// Параметры:
//    Банк - СправочникСсылка.КлассификаторБанков - Банк
//    МФО - Строка - МФО банка
//    КоррСчет - Строка - Корреспондентский счет банка.
//
Процедура ЗаполнитьМФОиКоррСчет(Банк, МФО, Свифт, КоррСчет) Экспорт

	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Код КАК МФО,
	|	СВИФТБИК КАК Свифт,
	|	КоррСчет КАК КоррСчет
	|ИЗ
	|	Справочник.КлассификаторБанков КАК Банки
	|ГДЕ
	|	Банки.Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", Банк);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		МФО = Выборка.МФО;
		Свифт = Выборка.Свифт;
		КоррСчет = Выборка.КоррСчет;
	КонецЕсли;

КонецПроцедуры

// Процедура получает банк по указанному МФО или корреспондентскому счету.
//
// Параметры:
//	Поле - Строка - Имя поля, в котором произведен выбор значения.
//	Значение - Строка - Значение, выбранное в поле.
//	Банк - СправочникСсылка.КлассификаторБанков - Значение поля для указания банка
//	МФО - Строка - МФО банка
//	КоррСчет - Строка - Корреспондентский счет банка.
//
// Возвращаемое значение:
//	СписокЗначений - Список банков для интерактивного выбора.
//
Функция ПолучитьСписокБанковПоРеквизитам(Поле, Значение, Банк, МФО, КоррСчет) Экспорт

	СписокБанков = Новый СписокЗначений;
	
	// Если значение не выбрано, очистим значение банка.
	Если ПустаяСтрока(Значение) Тогда
	
		Банк = Справочники.КлассификаторБанков.ПустаяСсылка();
		МФО = "";
		КоррСчет = "";
		
		Возврат СписокБанков;
		
	КонецЕсли;
		
	ТаблицаБанков = Новый ТаблицаЗначений;
	Колонки = ТаблицаБанков.Колонки;
	Колонки.Добавить("Ссылка");
	Колонки.Добавить("Код");
	Колонки.Добавить("КоррСчет");
	
	ЭтоМФО = Ложь;
	ЭтоКоррСчет = Ложь;
	Если Найти(Поле, "МФО") <> 0 Тогда
		ЭтоМФО = Истина;
	ИначеЕсли СтрНайти(Поле, "КоррСчет") <> 0 Тогда
		ЭтоКоррСчет = Истина;
	КонецЕсли;
	
	Если (ЭтоМФО И СтрДлина(СокрЛП(Значение)) = 6)
	 ИЛИ (ЭтоКоррСчет И СтрДлина(СокрЛП(Значение)) >= 11)
	Тогда
		
		Если ЭтоМФО Тогда
			СтруктураОтбора = Новый Структура("Код", СокрЛП(Значение));
			
		ИначеЕсли ЭтоКоррСчет Тогда
			СтруктураОтбора = Новый Структура("КоррСчет", СокрЛП(Значение));
			
		КонецЕсли;
		
		Выборка = Справочники.КлассификаторБанков.Выбрать(,, СтруктураОтбора, "Код Возр");
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаБанков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
				
	КонецЕсли;
	
	Если ТаблицаБанков.Количество() = 1 Тогда
		ДанныеБанка = ТаблицаБанков[0];
		
		Банк = ДанныеБанка.Ссылка;
		МФО = ДанныеБанка.Код;
		КоррСчет = ДанныеБанка.КоррСчет;
		СписокБанков.Добавить(Банк);
		
	ИначеЕсли ТаблицаБанков.Количество() > 1 Тогда
		МассивБанков = ТаблицаБанков.ВыгрузитьКолонку("Ссылка");
		СписокБанков.ЗагрузитьЗначения(МассивБанков);
		
	КонецЕсли;
	
	Возврат СписокБанков;
	
КонецФункции

// Функция помещает расшифровку платежа во временное хранилище и возвращает адрес.
//
// Параметры:
//    РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть расшифровки
//    УникальныйИдентификатор - Строка - Идентификатор.
//
// Возвращаемое значение:
//    Строка - Адрес временного хранилища.
//
Функция ПоместитьРасшифровкуПлатежаВХранилище(Знач РасшифровкаПлатежа, УникальныйИдентификатор) Экспорт

	АдресПлатежейВХранилище = ПоместитьВоВременноеХранилище(
		РасшифровкаПлатежа.Выгрузить(),
		УникальныйИдентификатор);
		
	Возврат АдресПлатежейВХранилище;
	
КонецФункции // ПоместитьРасшифровкуПлатежаВХранилище()

// Процедура заполняет кассу, банковский счет или эквайринговый терминал в зависимости от формы оплаты документа.
//
// Параметры:
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты заявки
//	ДанныеЗаполнения - Структура - Данные для заполнения документа.
//
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, ВалютаПлатежа = Неопределено) Экспорт
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		
		СтруктураПараметров = ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация = ДанныеЗаполнения.Организация;
		СтруктураПараметров.ФормаОплаты = ФормаОплаты;
		СтруктураПараметров.Касса       = ДанныеЗаполнения.Касса;
		СтруктураПараметров.Валюта      = ВалютаПлатежа;

		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		Если Не ЗначениеЗаполнено(Касса) Тогда
			ТекущаяКасса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяКасса", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.Кассы.ПолучитьРеквизитыКассы(ТекущаяКасса).Организация
				Тогда
					Касса = ТекущаяКасса;
				КонецЕсли;
			Иначе
				Касса = ТекущаяКасса;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Касса) Тогда
			ДанныеЗаполнения.Вставить("Касса", Касса);
			Если Не ЗначениеЗаполнено(ВалютаПлатежа) Тогда
				Валюта = Справочники.Кассы.ПолучитьРеквизитыКассы(Касса).Валюта;
				ДанныеЗаполнения.Вставить("Валюта", Валюта);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		
		СтруктураПараметров = ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    = ДанныеЗаполнения.Организация;
		СтруктураПараметров.ФормаОплаты    = ФормаОплаты;
		СтруктураПараметров.БанковскийСчет = ДанныеЗаполнения.БанковскийСчет;
		СтруктураПараметров.Валюта         = ВалютаПлатежа;
		
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			ТекущийБанковскийСчет = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийБанковскийСчет", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ТекущийБанковскийСчет).Организация
				Тогда
					БанковскийСчет = ТекущийБанковскийСчет;
				КонецЕсли;
			Иначе
				БанковскийСчет = ТекущийБанковскийСчет;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
			РеквизитыБанковскогоСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
			Если Не ЗначениеЗаполнено(ВалютаПлатежа) Тогда
				Валюта = РеквизитыБанковскогоСчета.Валюта;
				ДанныеЗаполнения.Вставить("Валюта", Валюта);
			КонецЕсли;
			Если Не РеквизитыБанковскогоСчета.РазрешитьПлатежиБезУказанияЗаявок
				И ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств") Тогда
				ДанныеЗаполнения.Вставить("ОплатаПоЗаявкам", Истина);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
		
		ЭквайринговыйТерминал =
			Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(ДанныеЗаполнения.Организация);
		Если Не ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ТекущийЭквайринговыйТерминал = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийЭквайринговыйТерминал", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ТекущийЭквайринговыйТерминал).Организация
				Тогда
					ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
				КонецЕсли;
			Иначе
				ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			Реквизиты = Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("Валюта", Реквизиты.Валюта);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет документ на основании заявок на расходование денежных средств.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты (зависит от вводимого документа оплаты).
//
Процедура ЗаполнитьДокументПоЗаявкамНаРасходованиеДенежныхСредств(ДанныеЗаполнения, ТабличнаяЧасть, ФормаОплаты) Экспорт
	
	МассивСсылок = Новый Массив;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		МассивСсылок.Добавить(ДанныеЗаполнения);
		БанковскийСчетКасса = Неопределено;
		СуммаПлатежа = 0;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			МассивСсылок.Добавить(ДанныеЗаполнения.ДокументОснование);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
			МассивСсылок = ДанныеЗаполнения.ДокументОснование;
		КонецЕсли;
		БанковскийСчетКасса = ДанныеЗаполнения.БанковскийСчетКасса;
		Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") И ДанныеЗаполнения.ДокументОснование.Количество() = 1 Тогда
			СуммаПлатежа = ДанныеЗаполнения.ДокументОснование[0].СуммаДокумента;
		Иначе
			СуммаПлатежа = ДанныеЗаполнения.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Заявка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			Заявка.ХозяйственнаяОперацияПоЗарплате
	|		ИНАЧЕ
	|			Заявка.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	Заявка.Валюта КАК Валюта,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	Заявка.БанковскийСчет КАК БанковскийСчет,
	|	Заявка.Касса КАК Касса,
	|	Заявка.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Заявка.Контрагент КАК Контрагент,
	|	ВЫБОР КОГДА НЕ Заявка.БанковскийСчетКонтрагента.Закрыт ТОГДА
	|		Заявка.БанковскийСчетКонтрагента
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	Заявка.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВЫБОР КОГДА НЕ Заявка.БанковскийСчетПолучатель.Закрыт ТОГДА
	|		Заявка.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетПолучатель,
	|	Заявка.КассаПолучатель КАК КассаПолучатель,
	|	Заявка.Подразделение КАК Подразделение,
	|	Заявка.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
	|	Заявка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Заявка.ВалютаКонвертации КАК ВалютаКонвертации,
	|	Заявка.СуммаКонвертации КАК СуммаКонвертации,
	|	Заявка.КурсКонвертации КАК КурсКонвертации,
	|	Заявка.КратностьКурсаКонвертации КАК КратностьКурсаКонвертации,
	|	Заявка.ПланированиеСуммы КАК ПланированиеСуммы,
	|	Заявка.НомерВедомостиНаВыплатуЗарплаты КАК НомерВедомостиНаВыплатуЗарплаты,
	|	Заявка.ДатаВедомостиНаВыплатуЗарплаты КАК ДатаВедомостиНаВыплатуЗарплаты,
	|	Заявка.СтатьяАктивовПассивов КАК СтатьяАктивовПассивов,
	|	Заявка.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	Заявка.ДатаАвансовогоОтчета КАК ДатаАвансовогоОтчета,
	|	Заявка.ТипНалога КАК ТипНалога,
	|	Заявка.НДФЛПоВедомостям КАК НДФЛПоВедомостям,
	//++ НЕ УТ
	|	Заявка.СчетУчета КАК СчетУчета,
	|	Заявка.Субконто1 КАК Субконто1,
	|	Заявка.Субконто2 КАК Субконто2,
	|	Заявка.Субконто3 КАК Субконто3,
	//-- НЕ УТ
	|	Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) КАК ЭтоВыплатаЗарплаты,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику))
	|		ТОГДА
	|			Заявка.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА Заявка.Контрагент.НаименованиеПолное <> """" ТОГДА
	|					Заявка.Контрагент.НаименованиеПолное
	|				ИНАЧЕ
	|					Заявка.Контрагент.Наименование
	|			КОНЕЦ
	|	КОНЕЦ КАК Выдать,
	|	ИСТИНА КАК ОплатаПоЗаявкам,
	|	Заявка.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Заявка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Заявка.Договор КАК Договор,
	|	Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств
	|
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	
	|ГДЕ
	|	Заявка.Ссылка В (&МассивСсылок)
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		ЗаявкаНаРасходованиеДенежныхСредств В (&МассивСсылок)
	|		И (БанковскийСчетКасса В (&БанковскиеСчетаКассы) ИЛИ &НеОграничиватьПоБанковскомуСчетуКассе)
	|	) КАК ДенежныеСредства
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	БанковскиеСчетаКассы = Новый Массив;
	Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
		БанковскиеСчетаКассы.Добавить(БанковскийСчетКасса);
		БанковскиеСчетаКассы.Добавить(Неопределено);
		Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
		Запрос.УстановитьПараметр("НеОграничиватьПоБанковскомуСчетуКассе", Ложь);
	Иначе
		Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
		Запрос.УстановитьПараметр("НеОграничиватьПоБанковскомуСчетуКассе", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ФормаОплатыЗаявки)
		И ФормаОплаты <> Выборка.ФормаОплатыЗаявки Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Форма оплаты ""%1"" вводимого документа отличается от формы оплаты ""%2"" заявки.';uk='Форма оплати ""%1"" документу що вводиться відрізняється від форми оплати ""%2"" заявки.'"),
			ФормаОплаты,
			Выборка.ФормаОплатыЗаявки);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта
		И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		Текст = НСтр("ru='Выбранная операция не соответствует операции возврата оплаты клиенту, для которой предусмотрен эквайринговый платеж.';uk='Вибрана операція не відповідає операції повернення оплати клієнту, для якої передбачений еквайрингової платіж.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
		Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчетКасса);
		ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ДанныеЗаполнения.Вставить("Касса", БанковскийСчетКасса);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.ВалютаКонвертации);
		ДанныеЗаполнения.Вставить("БанковскийСчетПолучатель", БанковскийСчетПолучатель);
		КассаПолучатель = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.ВалютаКонвертации);
		ДанныеЗаполнения.Вставить("КассаПолучатель", КассаПолучатель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СуммаПлатежа) Тогда
		ДанныеЗаполнения.Вставить("СуммаДокумента", СуммаПлатежа);
	Иначе
		ДанныеЗаполнения.Вставить("СуммаДокумента", РезультатЗапроса[1].Выгрузить()[0].Сумма);
	КонецЕсли;
	
	Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(Выборка.ПодотчетноеЛицо).Представление;
		Если Не ЗначениеЗаполнено(ДокументФизическогоЛица) Тогда
			ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(
				Выборка.ПодотчетноеЛицо,
				Справочники.ВидыДокументовФизическихЛиц.Паспорт).Представление;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		ДанныеЗаполнения.Вставить("ПоДокументу", ДокументФизическогоЛица);
	КонецЕсли;
	
	Если Выборка.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов Тогда
		ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения);
	Иначе
		ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, Выборка.Валюта);
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		И ДанныеЗаполнения.КурсКонвертации <> 0
		И ДанныеЗаполнения.СуммаКонвертации = 0 Тогда
		ДанныеЗаполнения.Вставить("СуммаКонвертации", ДанныеЗаполнения.СуммаДокумента / ДанныеЗаполнения.КурсКонвертации);
	КонецЕсли;
	
	//++ Локализация
	//-- Локализация

	Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Выборка.ВалютаЗаявки, ДанныеЗаполнения.Валюта, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыПересчета.Кратность / (КурсВалюты.Кратность * КурсВалютыПересчета.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсВалютыПересчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыПересчета.Курс <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|			СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета
	|		ИНАЧЕ
	|			СУММА(РасшифровкаПлатежа.Сумма)
	|	КОНЕЦ КАК Сумма,
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорЛизинга,
	|	РасшифровкаПлатежа.ТипПлатежаПоЛизингу,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.Подразделение,
	|	РасшифровкаПлатежа.НаправлениеДеятельности,
	|	РасшифровкаПлатежа.Ведомость,
	|	//ДанныеСубконто
	|	РасшифровкаПлатежа.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|			(СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета *
	|					(РасшифровкаПлатежа.СтавкаНДС.Ставка / 100) / ((РасшифровкаПлатежа.СтавкаНДС.Ставка / 100) + 1))
	|	ИНАЧЕ
	|		СУММА(РасшифровкаПлатежа.СуммаНДС)
	|	КОНЕЦ КАК СуммаНДС,
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств
	|
	|ИЗ (
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.ОбъектРасчетов,
	|		ЕСТЬNULL(РасшифровкаДокумента.Сумма, Заявка.СуммаДокумента) КАК Сумма,
	|		ВЫБОР
	|			КОГДА Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|				РасшифровкаДокумента.СуммаВзаиморасчетов
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорЛизинга,
	|		РасшифровкаДокумента.ТипПлатежаПоЛизингу,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ведомость,
	|		//ПоляСубконто
	|		РасшифровкаДокумента.СтавкаНДС,
	|		РасшифровкаДокумента.СуммаНДС КАК СуммаНДС,
	|		Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|		Заявка.ПланированиеСуммы КАК ПланированиеСуммы,
	|		Заявка.Валюта КАК Валюта
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаДокумента
	|		ПО
	|			РасшифровкаДокумента.Ссылка = Заявка.Ссылка
	|		
	|	ГДЕ
	|		Заявка.Ссылка В(&МассивСсылок)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.ОбъектРасчетов,
	|		-РасшифровкаДокумента.Сумма,
	|		ВЫБОР
	|			КОГДА РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|				-РасшифровкаДокумента.СуммаВзаиморасчетов
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорЛизинга,
	|		РасшифровкаДокумента.ТипПлатежаПоЛизингу,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ведомость,
	|		//ПоляСубконто
	|		РасшифровкаДокумента.СтавкаНДС,
	|		-РасшифровкаДокумента.СуммаНДС,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.Валюта
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаДокумента
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|		ПО
	|			ДенежныеСредства.Регистратор = РасшифровкаДокумента.Ссылка
	|			
	|	ГДЕ
	|		ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.ОбъектРасчетов,
	|		-РасшифровкаДокумента.Сумма,
	|		ВЫБОР
	|			КОГДА РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|				-РасшифровкаДокумента.СуммаВзаиморасчетов
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорЛизинга,
	|		РасшифровкаДокумента.ТипПлатежаПоЛизингу,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ссылка.Ведомость,
	|		//ПоляСубконто
	|		РасшифровкаДокумента.СтавкаНДС,
	|		-РасшифровкаДокумента.СуммаНДС,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.Валюта
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаДокумента
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|		ПО
	|			ДенежныеСредства.Регистратор = РасшифровкаДокумента.Ссылка
	|	ГДЕ
	|		ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств В(&МассивСсылок)
	|	)
	|	КАК РасшифровкаПлатежа
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			КурсыВалют КАК КурсыВалют
	|		ПО
	|			РасшифровкаПлатежа.Валюта = КурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.ОбъектРасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорЛизинга,
	|	РасшифровкаПлатежа.ТипПлатежаПоЛизингу,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.Подразделение,
	|	РасшифровкаПлатежа.НаправлениеДеятельности,
	|	РасшифровкаПлатежа.Ведомость,
	|	//ГруппировкаСубконто
	|	РасшифровкаПлатежа.СтавкаНДС,
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств,
	|	РасшифровкаПлатежа.ПланированиеСуммы,
	|	КурсыВалют.КоэффициентПересчета
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов)
	|			ТОГДА СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета
	|		ИНАЧЕ СУММА(РасшифровкаПлатежа.Сумма)
	|	КОНЕЦ > 0
	|	
	|УПОРЯДОЧИТЬ ПО
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств
	|";
	
	//++ НЕ УТ
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГруппировкаСубконто",
		"	РасшифровкаПлатежа.СчетУчета,
		|	РасшифровкаПлатежа.Субконто1,
		|	РасшифровкаПлатежа.Субконто2,
		|	РасшифровкаПлатежа.Субконто3,");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДанныеСубконто",
		"	РасшифровкаПлатежа.СчетУчета КАК СчетУчета,
		|	РасшифровкаПлатежа.Субконто1 КАК Субконто1,
		|	РасшифровкаПлатежа.Субконто2 КАК Субконто2,
		|	РасшифровкаПлатежа.Субконто3 КАК Субконто3,");
		
	ИначеЕсли ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
			И (ДанныеЗаполнения.ТипНалога = Перечисления.ТипыНалогов.НачисленныйЕСВ) Тогда		
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГруппировкаСубконто",
		"	РасшифровкаПлатежа.СчетУчета,
		|	РасшифровкаПлатежа.Субконто1,
		|	РасшифровкаПлатежа.Субконто2,
		|	РасшифровкаПлатежа.Субконто3,");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДанныеСубконто",
		"	РасшифровкаПлатежа.СчетУчета КАК СчетУчета,
		|	РасшифровкаПлатежа.Субконто1 КАК Субконто1,
		|	РасшифровкаПлатежа.Субконто2 КАК Субконто2,
		|	РасшифровкаПлатежа.Субконто3 КАК Субконто3,");
			
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДанныеСубконто",
		"	МИНИМУМ(РасшифровкаПлатежа.СчетУчета) КАК СчетУчета,
		|	МИНИМУМ(РасшифровкаПлатежа.Субконто1) КАК Субконто1,
		|	МИНИМУМ(РасшифровкаПлатежа.Субконто2) КАК Субконто2,
		|	МИНИМУМ(РасшифровкаПлатежа.Субконто3) КАК Субконто3,");
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПоляСубконто",
	"	РасшифровкаДокумента.СчетУчета КАК СчетУчета,
	|	РасшифровкаДокумента.Субконто1 КАК Субконто1,
	|	РасшифровкаДокумента.Субконто2 КАК Субконто2,
	|	РасшифровкаДокумента.Субконто3 КАК Субконто3,");
	//-- НЕ УТ
	
	Запрос.УстановитьПараметр("Валюта", ДанныеЗаполнения.Валюта);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТабличнаяЧасть.Очистить();
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента * Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
	Пока Выборка.Следующий() Цикл
		Сумма = Мин(Выборка.Сумма, СуммаДокумента);
		ПересчитатьНДС = (Сумма <> Выборка.Сумма);
		СуммаДокумента = СуммаДокумента - Сумма;
		Если Сумма > 0 Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Сумма = Сумма;
			
			Если ПересчитатьНДС Тогда
				ПараметрыПересчетаНДС = Новый Структура("ЦенаВключаетНДС", Истина);
				СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", ПараметрыПересчетаНДС);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
			КонецЕсли;
			
			//++ НЕ УТ
			Если Константы.ИспользоватьНачислениеЗарплаты.Получить()
				И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
				И ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу Тогда
				Если ТабличнаяЧасть.Количество() Тогда
					ДанныеЗаполнения.Вставить("Ведомость", Выборка.Ведомость);
					Если ТипЗнч(Выборка.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком") Тогда
						ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком;
						ДанныеЗаполнения.ПодотчетноеЛицо = Выборка.Ведомость.Раздатчик;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//-- НЕ УТ
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.СуммаДокумента <> ТабличнаяЧасть.Итог("СуммаВзаиморасчетов") Тогда
		Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			СтрокаТЧ.СуммаВзаиморасчетов = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если ТабличнаяЧасть.Количество() Тогда
		ДанныеЗаполнения.Вставить("СуммаДокумента", ТабличнаяЧасть.Итог("Сумма"));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу остатками денежных средств к выплате по заявкам
//
// Параметры:
//    ДанныеОтбора - Структура - содержит значения отбора заявок
//    ТабличнаяЧасть - ДанныеФормыКоллекция - заполняемая таблица.
//
Процедура ЗаполнитьПоОстаткамЗаявокНаРасходованиеДенежныхСредств(ДанныеОтбора, ТабличнаяЧасть) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыПересчета.Кратность / (КурсВалюты.Кратность * КурсВалютыПересчета.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДатаСеанса, ) КАК КурсВалюты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДатаСеанса, Валюта = &Валюта) КАК КурсВалютыПересчета
	|	ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыПересчета.Курс <> 0
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	Заявка.Номер  КАК НомерЗаявки,
	|	Заявка.Дата   КАК ДатаЗаявки,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаВВалюте,
	|	ДенежныеСредства.СуммаОстаток * КурсыВалют.КоэффициентПересчета КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		Организация = &Организация
	|		И Получатель = &Получатель
	|		И БанковскийСчетКасса В (&БанковскиеСчетаКассы)) КАК ДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	ПО Заявка.Ссылка = ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|	ПО Заявка.Валюта = КурсыВалют.Валюта
	|	
	|ГДЕ
	|	Заявка.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И Заявка.ХозяйственнаяОперацияПоЗарплате <> &ХозяйственнаяОперация
	|	И (Заявка.ФормаОплатыЗаявки = &ФормаОплаты ИЛИ Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
	|	И (Заявка.Валюта = &Валюта ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов))
	|	И Заявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	Заявка.Номер  КАК НомерЗаявки,
	|	Заявка.Дата   КАК ДатаЗаявки,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаВВалюте,
	|	ДенежныеСредства.СуммаОстаток * КурсыВалют.КоэффициентПересчета КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		Организация = &Организация
	|		И Получатель = &Получатель
	|		И БанковскийСчетКасса В (&БанковскиеСчетаКассы)) КАК ДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	ПО Заявка.Ссылка = ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|	ПО Заявка.Валюта = КурсыВалют.Валюта
	|	
	|ГДЕ
	|	Заявка.ХозяйственнаяОперацияПоЗарплате = &ХозяйственнаяОперация
	|	И Заявка.ХозяйственнаяОперация <> &ХозяйственнаяОперация
	|	И (Заявка.ФормаОплатыЗаявки = &ФормаОплаты ИЛИ Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
	|	И (Заявка.Валюта = &Валюта ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов))
	|	И Заявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|";
	
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Валюта", ДанныеОтбора.Валюта);
	Запрос.УстановитьПараметр("Организация", ДанныеОтбора.Организация);
	Запрос.УстановитьПараметр("ФормаОплаты", ДанныеОтбора.ФормаОплаты);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ДанныеОтбора.ХозяйственнаяОперация);
	
	БанковскиеСчетаКассы = Новый Массив;
	БанковскиеСчетаКассы.Добавить(ДанныеОтбора.БанковскийСчетКасса);
	БанковскиеСчетаКассы.Добавить(Неопределено);
	Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
	
	Получатель = Неопределено;
	Если ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		
		Получатель = ДанныеОтбора.ПодотчетноеЛицо;
		
	ИначеЕсли ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		Если ДанныеОтбора.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтбора.БанковскийСчетПолучатель, "Владелец");
		ИначеЕсли ДанныеОтбора.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтбора.КассаПолучатель, "Владелец");
		КонецЕсли;
	Иначе
		Получатель = ДанныеОтбора.Контрагент;
	КонецЕсли;
	Запрос.УстановитьПараметр("Получатель", Получатель);
	
	ТабличнаяЧасть.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ПредставлениеЗаявки = СтрШаблон(" %1 " + НСтр("ru='от %2';uk='від %2'"), Выборка.НомерЗаявки, Формат(Выборка.ДатаЗаявки, "ДЛФ=D"));
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет документ на основании распоряжения на перемещение денежных средств.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств - Документ - основание
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличныеЧасти - Табличная часть "Расшифровка платежа" документа.
//
Процедура ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств(
	Знач ДокументОснование,
	ДокументОбъект,
	ДанныеЗаполнения,
	РасшифровкаПлатежа = Неопределено
	) Экспорт
	
	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК РаспоряжениеНаПеремещениеДенежныхСредств,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Статус КАК Статус,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
	|		) ТОГДА
	|		ДанныеДокумента.КассаПолучатель
	|	ИНАЧЕ
	|		ДанныеДокумента.Касса
	|	КОНЕЦ КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
	|		) ТОГДА
	|		ДанныеДокумента.КассаПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК КассаПолучатель,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк)
	|		) ТОГДА
	|		ДанныеДокумента.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет) ТОГДА
	|		ДанныеДокумента.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК БанковскийСчетПолучатель,
	//++ Локализация
	//-- Локализация
	|
	|	ДанныеДокумента.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаДокумента
	|ИЗ
	|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|			ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|		) КАК ДенежныеСредства
	|	ПО
	|		ИСТИНА
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (&МассивОпераций)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	МассивОпераций = Новый Массив;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
		ПредставлениеДокумента = НСтр("ru='Приходный кассовый ордер';uk='Прибутковий касовий ордер'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
		ПредставлениеДокумента = НСтр("ru='Расходный кассовый ордер';uk='Видатковий касовий ордер'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
		ПредставлениеДокумента = НСтр("ru='Списание безналичных ДС';uk='Списання безготівкових ГК'");
		
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не требуется вводить %1 на основании документа %2';uk='Не потрібно вводити %1 на підставі документа %2'"),
			ПредставлениеДокумента,
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
			И Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств ТОгда
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка);
		КонецЕсли;
		
		Если Выборка.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате Тогда
			Текст = НСтр("ru='Распоряжение на перемещение денежных средств не утверждено к оплате';uk='Розпорядження на переміщення грошових коштів не затверджено до оплати'");
			ВызватьИсключение Текст;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств()

// Процедура заполняет статью ДДС в шапке документа по хозяйственной операции.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операция.
//
Процедура ЗаполнитьСтатьюДвиженияДенежныхСредств(ДокументОбъект, ДанныеЗаполнения, ХозяйственнаяОперация) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")  И ДанныеЗаполнения.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
		СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
	Иначе
		СтатьяДвиженияДенежныхСредств = ДокументОбъект.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
			
			Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты 
				И ДанныеЗаполнения.Свойство("ХозяйственнаяОперацияПоЗарплате") Тогда
				
				ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",
					ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперацияПоЗарплате));
			Иначе
					
				ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",
					ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация));
			КонецЕсли;
		Иначе
			ДокументОбъект.СтатьяДвиженияДенежныхСредств =
				ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет статью декларации по единому налогу в шапке документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//
Процедура ЗаполнитьСтатьюДекларацииПоЕдиномуНалогу(Объект) Экспорт
	
	Объект.СтатьяДекларацииПоЕдиномуНалогу = Неопределено;
	
	Если НЕ Справочники.Организации.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата) Тогда
		Возврат;
	КонецЕсли;

	ТипДокумента = ТипЗнч(Объект.Ссылка);
	// Типы должны проверяться в начале, т.к. не у всех документов есть реквизит ХозяйственнаяОперация
	Если ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничнойВыручке")
	 ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
	 ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга") Тогда
	 
		Объект.СтатьяДекларацииПоЕдиномуНалогу = Справочники.СтатьиНалоговыхДеклараций.ЕННК_ДоходыРеализация;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		
		Объект.СтатьяДекларацииПоЕдиномуНалогу = Справочники.СтатьиНалоговыхДеклараций.ЕННК_ДоходыРеализация;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			
		Объект.СтатьяДекларацииПоЕдиномуНалогу = Справочники.СтатьиНалоговыхДеклараций.ЕННК_ДоходыВозвраты;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
	      ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
			
		Объект.СтатьяДекларацииПоЕдиномуНалогу = Справочники.СтатьиНалоговыхДеклараций.ЕННК_ЗатратыЗатратыСвязанныеСПриобретением;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СтатьяДекларацииПоЕдиномуНалогу)
	   И Объект.СтатьяДекларацииПоЕдиномуНалогу.ПринадлежитЭлементу(Справочники.СтатьиНалоговыхДеклараций.ЕННК_Затраты)
	   И НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Объект.Организация, Объект.Дата) Тогда
		Объект.СтатьяДекларацииПоЕдиномуНалогу = Неопределено;
	КонецЕсли;
	
КонецПроцедуры 

// Функция возвращает данные расшифровки платежа в разрезе ставок НДС.
//
// Параметры:
// Возвращаемые значение:
//  СуммаДокумента - Число - Общая сумма документа
//  ВалютаДокумента - СправочникСсылка.Валюты - Валюта для пересчета суммы НДС
//  МассивДокументов - Массив - Массив документов для определения суммы НДС
//  ОплатаОтКлиента - Булево - Признак оплаты от клиента
//
// Возвращаемое значение:
//  РасшифровкаПлатежаНДС - Таблица значений - Данные расшифровки платежа в разрезе ставок НДС
//
Функция ПолучитьРасшифровкуПлатежаНДС(СуммаДокумента, ВалютаДокумента, МассивДокументов, ОплатаОтКлиента = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ПОМЕСТИТЬ ТаблицаСуммНДС
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Валюта        КАК Валюта,
	|	ТаблицаДокумента.Дата          КАК Дата
	|
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата             КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата             КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата             КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСуммНДС.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаСуммНДС.Валюта КАК Валюта,
	|	НАЧАЛОПЕРИОДА(ТаблицаСуммНДС.Дата, ДЕНЬ) КАК Дата,
	|	СУММА(ТаблицаСуммНДС.СуммаСНДС) КАК СуммаСНДС,
	|	СУММА(ТаблицаСуммНДС.СуммаНДС) КАК СуммаНДС
	|
	|ИЗ
	|	ТаблицаСуммНДС КАК ТаблицаСуммНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСуммНДС.СтавкаНДС,
	|	ТаблицаСуммНДС.Валюта,
	|	НАЧАЛОПЕРИОДА(ТаблицаСуммНДС.Дата, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС
	|
	|ИТОГИ ПО
	|	Валюта
	|");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ОплатаОтКлиента", ОплатаОтКлиента);
	
	ТаблицаНДС = Новый ТаблицаЗначений;
	ТаблицаНДС.Колонки.Добавить("СтавкаНДС");
	ТаблицаНДС.Колонки.Добавить("СуммаСНДС");
	ТаблицаНДС.Колонки.Добавить("СуммаНДС");
	
	ВыборкаПоВалютам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоВалютам.Следующий() Цикл
		
		Если ВыборкаПоВалютам.Валюта <> ВалютаДокумента Тогда
			КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ВыборкаПоВалютам.Валюта, ВалютаДокумента, ТекущаяДата());
		Иначе
			КоэффициентПересчета = 1;
		КонецЕсли;
		
		Выборка = ВыборкаПоВалютам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаНДС.Добавить();
			НоваяСтрока.СтавкаНДС = Выборка.СтавкаНДС;
			НоваяСтрока.СуммаСНДС = Выборка.СуммаСНДС * КоэффициентПересчета;
			НоваяСтрока.СуммаНДС  = Выборка.СуммаНДС  * КоэффициентПересчета;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНДС.Свернуть("СтавкаНДС", "СуммаСНДС, СуммаНДС");
	СуммаСНДСВсего = ТаблицаНДС.Итог("СуммаСНДС");
	СуммаКРаспределению = СуммаДокумента;
	УчтеноБазыРаспределения = 0;
	УжеРаспределено = 0;
	
	Для Каждого Строка Из ТаблицаНДС Цикл
		
		КоэффициентНДС = ?(Строка.СуммаСНДС <> 0, Строка.СуммаНДС / Строка.СуммаСНДС, 0);
		
		Строка.СуммаСНДС = ?(СуммаСНДСВсего <> 0, Окр(СуммаКРаспределению * (УчтеноБазыРаспределения + Строка.СуммаСНДС) / СуммаСНДСВсего, 2) - УжеРаспределено, 0);
		Строка.СуммаНДС = Строка.СуммаСНДС * КоэффициентНДС;
		
	КонецЦикла;
	
	Возврат ТаблицаНДС;
	
КонецФункции

// Функция формирует текст строки "В том числе НДС" платежа.
//
// Параметры:
//    ВалютаДокумента - Число - Валюта документа
//    РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть Расшифровка платежа
//    ДобавлятьТекстВТомЧисле - Булево - Добавлять строку "В т.ч." в текст платежа.
//
// Возвращаемое значение:
//    Строка - Текст суммы НДС платежа.
//
Функция ТекстСуммаНДСПлатежа(ВалютаДокумента, РасшифровкаПлатежа, ДобавлятьТекстВТомЧисле) Экспорт
	
	Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений") Тогда
		ТаблицаНДС = РасшифровкаПлатежа.Скопировать(, "СтавкаНДС, СуммаНДС");
	Иначе
		ТаблицаНДС = РасшифровкаПлатежа.Выгрузить(, "СтавкаНДС, СуммаНДС");
	КонецЕсли;
	ТаблицаНДС.Свернуть("СтавкаНДС", "СуммаНДС");
	
	Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ПредставлениеВалюты = "грн.";
	Иначе
		ПредставлениеВалюты = СокрЛП(ВалютаДокумента);
	КонецЕсли;
	
	ТекстНазначениеПлатежаНДС = "";
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
		Если СтрокаТаблицы.СтавкаНДС = Справочники.СтавкиНДС.БезНДС
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			Продолжить;
		КонецЕсли;
		ТекстНазначениеПлатежаНДС = ТекстНазначениеПлатежаНДС
			+ ?(ПустаяСтрока(ТекстНазначениеПлатежаНДС), "", ", ")
			+ "ПДВ" + " (" + СтрокаТаблицы.СтавкаНДС + ") "
			+ Формат(СтрокаТаблицы.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=") + " " + ПредставлениеВалюты;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ТекстНазначениеПлатежаНДС) Тогда
		ТекстНазначениеПлатежаНДС = "Без податку (ПДВ)";
	Иначе
		Если ДобавлятьТекстВТомЧисле Тогда
			ТекстНазначениеПлатежаНДС = "В т.ч." + " " + ТекстНазначениеПлатежаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНазначениеПлатежаНДС;
	
КонецФункции

// Процедура заполняет документ на основании договора кредита (депозита).
//
// Параметры:
//	ДоговорКредитаДепозита - СправочникСсылка.ДоговорыКредитовИДепозитов - Договор - основание
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//  ЭтоПоступление - Булево - вид движения денежных средств.
//
Процедура ЗаполнитьПоДоговоруКредитаДепозита(Знач ДоговорКредитаДепозита, ДанныеЗаполнения, РасшифровкаПлатежа, ЭтоПоступление) Экспорт
	
	ДанныеЗаполнения = Справочники.ДоговорыКредитовИДепозитов.ДанныеЗаполненияДокументаДДС(ДоговорКредитаДепозита, ЭтоПоступление);
	РасшифровкаПлатежа.Загрузить(ДанныеЗаполнения.РасшифровкаПлатежа);
	ДанныеЗаполнения.Вставить("СуммаДокумента", РасшифровкаПлатежа.Итог("Сумма"));
	
КонецПроцедуры

// Очищает банковский счет организации, если он принадлежит другой организации.
// Заполняет по умолчанию, если банковский счет не заполнен.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Проверяемый банковский счет
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
//
Процедура ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Знач Организация, БанковскийСчет, ФормаОплаты = Неопределено, НаправлениеДеятельности = Неопределено) Экспорт
	
	ВладелецСчета = Неопределено;
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ВладелецСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Организация <> ВладелецСчета Тогда
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ФормаОплаты = ФормаОплаты;
	СтруктураПараметров.БанковскийСчет = БанковскийСчет;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры

// Очищает кассу организации, если она принадлежит другой организации.
// Заполняет по умолчанию, если касса не заполнена.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	Касса - СправочникСсылка.Кассы - Проверяемая касса
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
//
Процедура ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Знач Организация, Касса, ФормаОплаты = Неопределено, НаправлениеДеятельности = Неопределено) Экспорт
	
	ВладелецКассы = Неопределено;
	Если ЗначениеЗаполнено(Касса) Тогда
		ВладелецКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Организация <> ВладелецКассы Тогда
		Касса = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация 			= Организация;
	СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;
	СтруктураПараметров.Касса 					= Касса;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры

// Процедура пересчитывает сумму дохода по единому налогу при изменении суммы в шапке документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	СуммаДокумента - Число - Сумма документа
//
Процедура ПересчетСуммыПоЕдиномуНалогу(Объект, СуммаДокумента) Экспорт
	
	Если НЕ Справочники.Организации.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата) 
	 ИЛИ Справочники.Организации.ПлательщикНДС(Объект.Организация, Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(Объект.Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничнойВыручке") Тогда
		Объект.СуммаПоЕдиномуНалогу = ?(СуммаДокумента < 0, СуммаДокумента*(-1), СуммаДокумента) - Объект.СуммаОплатыПлатежнымиКартами;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		Объект.СуммаПоЕдиномуНалогу = ?(СуммаДокумента < 0, СуммаДокумента*(-1), СуммаДокумента) - Объект.ОплатаПлатежнымиКартами.Итог("Сумма");
		
	Иначе
		Объект.СуммаПоЕдиномуНалогу = СуммаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры 

// Возвращает валюту платежа по документу
//
// Параметры:
//  ФормаОплаты - Перечисление.ФормыОплаты - Форма оплаты документа.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизации - Банковский счет документа.
//  Касса - СправочникСсылка.Кассы - Касса документа.
//
// Возвращаемое значение:
//  Валюта - СправочникСсылка.Валюты - Валюта платежа.
Функция ПолучитьВалютуОплаты(ФормаОплаты = Неопределено, БанковскийСчет = Неопределено, Касса = Неопределено) Экспорт
	
	Если (ФормаОплаты = Перечисления.ФормыОплаты.Безналичная ИЛИ НЕ ЗначениеЗаполнено(ФормаОплаты))
		И ЗначениеЗаполнено(БанковскийСчет) Тогда
		ВалютаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ВалютаДенежныхСредств");
	ИначеЕсли (ФормаОплаты = Перечисления.ФормыОплаты.Наличная ИЛИ НЕ ЗначениеЗаполнено(ФормаОплаты))
		И ЗначениеЗаполнено(Касса) Тогда
		ВалютаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "ВалютаДенежныхСредств");
	Иначе
		ВалютаОплаты = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВалютаОплаты;
	
КонецФункции

// Создает платежные документы, либо формирует данные заполнения для создания одного платежного документа.
//
// Параметры:
//    СтрокиГрафика - Массив - Ключи записей графика платежей
//    ТипДокумента - Строка - Тип создаваемых документов. Если не задан, будет определен автоматически.
//
// Возвращаемое значение:
//    Структура:
//        ОткрыватьФормуПомощника - Булево - Признак необходимости открытия формы помощника создания документов
//        ДокументКСозданию - Структура - Данные заполнения единственного документа
//        ДлительнаяОперация - Структура - Длительная операция создания нескольких документов
//        АдресСтрокГрафика - Строка - Адрес временного хранилища, в котором содержатся оплачиваемые строки графика.
//
Функция ОплатитьСтрокиГрафика(СтрокиГрафика, ТипДокумента) Экспорт
	
	Результат = ДенежныеСредстваСерверЛокализация.ОплатитьСтрокиГрафика(СтрокиГрафика, ТипДокумента);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Результат = Новый Структура;
	
	ДокументыКСозданию = ДокументыКСозданию(СтрокиГрафика, ТипДокумента);
	
	Если ДокументыКСозданию.Количество() = 1 Тогда
		Результат.Вставить("ОткрыватьФормуПомощника", Ложь);
		Результат.Вставить("ДокументКСозданию", ДокументыКСозданию[0]);
	Иначе
		НаименованиеЗадания = НСтр("ru='Формирование платежных документов';uk='Формування платіжних документів'");
		ВыполняемыйМетод = "ДенежныеСредстваСервер.СоздатьПлатежи";
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументыКСозданию", ДокументыКСозданию);
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, СтруктураПараметров, ПараметрыВыполнения);
		Результат.Вставить("ДлительнаяОперация", ДлительнаяОперация);
		Результат.Вставить("ОткрыватьФормуПомощника", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует данные для создания документов на основании строк графика платежей
//
// Параметры:
//    СтрокиГрафика - Массив - Ключи записей графика платежей
//    ТипДокумента - Строка - Тип создаваемых документов. Если не задан, будет определен автоматически.
//    Группировать - Булево - Признак необходимости группировки строк графика.
//
// Возвращаемое значение:
//    Массив - Структуры с полями "Тип документа" и "Данные заполнения".
//
Функция ДокументыКСозданию(СтрокиГрафика, ТипДокумента, Группировать = Истина) Экспорт
	
	ДокументыКСозданию = Новый Массив;
	ТаблицаОплаты = РегистрыСведений.ГрафикПлатежей.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	Для каждого СтрокаГрафика Из СтрокиГрафика Цикл
		НоваяСтрока = ТаблицаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГрафика);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаОплаты.ОбъектОплаты КАК ОбъектОплаты
	|ПОМЕСТИТЬ ТаблицаОплаты
	|ИЗ
	|	&ТаблицаОплаты КАК ТаблицаОплаты
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ОператорТаблицаОплаты = СхемаЗапроса.ПакетЗапросов[0].Операторы[0]; // ОператорВыбратьСхемыЗапроса
	Для каждого Колонка Из ТаблицаОплаты.Колонки Цикл
		ОператорТаблицаОплаты.ВыбираемыеПоля.Добавить("ТаблицаОплаты." + Колонка.Имя);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("ТаблицаОплаты", ТаблицаОплаты);
	Запрос.Выполнить();
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить("
	|ВЫБРАТЬ
	|	ГрафикПлатежей.ОбъектОплаты КАК ОбъектОплаты,
	|	ГрафикПлатежей.ОбъектОплаты КАК ЗаказКлиента,
	|	ГрафикПлатежей.ОбъектОплаты КАК ЗаказПоставщику,
	|	ГрафикПлатежей.ОбъектОплаты КАК ОснованиеПлатежа,
	|	ГрафикПлатежей.ОбъектОплаты КАК ДоговорКредитаДепозита,
	|	ГрафикПлатежей.ОбъектОплаты КАК ДоговорЛизинга,
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Справочник.ДоговорыКредитовИДепозитов ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).Партнер
	//++ НЕ УТ
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Справочник.ДоговорыЛизинга ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыЛизинга).Партнер
	//-- НЕ УТ
	|	КОНЕЦ КАК Партнер,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК БанковскийСчет,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК Касса,
	|	ГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа,
	|	ГрафикПлатежей.ПлательщикПолучатель КАК ПлательщикПолучатель,
	|	ГрафикПлатежей.ПоступлениеСписание КАК ПоступлениеСписание,
	|	ГрафикПлатежей.ТипСуммы КАК ТипСуммы,
	|	ГрафикПлатежей.ТипСуммы КАК ТипСуммыКредитаДепозита,
	|	ГрафикПлатежей.ТипСуммы КАК ТипПлатежаПоЛизингу,
	|	ГрафикПлатежей.Организация КАК Организация,
	|	ГрафикПлатежей.Подразделение КАК Подразделение,
	|	ГрафикПлатежей.Валюта КАК Валюта,
	|	ГрафикПлатежей.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ХозяйственнаяОперацияПоЗарплате, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)) КАК ХозяйственнаяОперацияПоЗарплате,
	|	ЕСТЬNULL(ГрафикПлатежей.БанковскийСчетКасса.ВалютаДенежныхСредств, ГрафикПлатежей.Валюта) КАК ВалютаДенежныхСредств,
	|	ЕСТЬNULL(ГрафикПлатежей.БанковскийСчетКасса.ВалютаДенежныхСредств, ГрафикПлатежей.Валюта) КАК ВалютаДокумента,
	|	
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).БанковскийСчетКонтрагента
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Справочник.ДоговорыКредитовИДепозитов ТОГДА
	|			ВЫБОР ГрафикПлатежей.ТипСуммы
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг) ТОГДА
	|					ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).БанковскийСчетКонтрагента
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты) ТОГДА
	|					ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).БанковскийСчетПроцентов
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия) ТОГДА
	|					ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).БанковскийСчетКомиссии
	|			КОНЕЦ
	//++ НЕ УТ
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Справочник.ДоговорыЛизинга ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыЛизинга).БанковскийСчетКонтрагента
	//-- НЕ УТ
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	
	|	ГрафикПлатежей.Сумма КАК СуммаКОплате,
	|	ГрафикПлатежей.Сумма КАК Сумма,
	|	
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).СписокФизЛиц
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК СписокФизЛиц,
	|	
	|	ГрафикПлатежей.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|		ИНАЧЕ
	|			ГрафикПлатежей.ФормаОплаты
	|	КОНЕЦ КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|			) ТОГДА
	|			ЛОЖЬ
	|		КОГДА ГрафикПлатежей.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|			) И ЛОЖЬ ТОГДА
	|			ЛОЖЬ
	|		КОГДА ГрафикПлатежей.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|			И ГрафикПлатежей.ОбъектОплаты ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|			И ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).СписокФизЛиц ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК Группируется
	|
	|ПОМЕСТИТЬ ТаблицаОплатыПолная
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ГрафикПлатежей
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОплаты КАК ТаблицаОплаты
	|	ПО
	|		ТаблицаОплаты.ОбъектОплаты = ГрафикПлатежей.ОбъектОплаты
	|		И (ТаблицаОплаты.БанковскийСчетКасса = ГрафикПлатежей.БанковскийСчетКасса
	|			ИЛИ ГрафикПлатежей.БанковскийСчетКасса = НЕОПРЕДЕЛЕНО И ТаблицаОплаты.БанковскийСчетКасса = НЕОПРЕДЕЛЕНО)
	|		И ТаблицаОплаты.ДатаПлатежа = ГрафикПлатежей.ДатаПлатежа
	|		И ТаблицаОплаты.ПоступлениеСписание = ГрафикПлатежей.ПоступлениеСписание
	|		И ТаблицаОплаты.ПлательщикПолучатель = ГрафикПлатежей.ПлательщикПолучатель
	|		И ТаблицаОплаты.Организация = ГрафикПлатежей.Организация
	|		И ТаблицаОплаты.Валюта = ГрафикПлатежей.Валюта
	|		И ТаблицаОплаты.ТипСуммы = ГрафикПлатежей.ТипСуммы
	|;
	|////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ТаблицаОплатыПолная
	|ГДЕ
	|	ТаблицаОплатыПолная.ХозяйственнаяОперацияПоЗарплате <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|	И НЕ ТаблицаОплатыПолная.СписокФизЛиц
	|;
	|////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаОплаты.Организация,
	|	ТаблицаОплаты.Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса,
	|	ТаблицаОплаты.ПлательщикПолучатель,
	|	ТаблицаОплаты.БанковскийСчетКонтрагента,
	|	ТаблицаОплаты.ХозяйственнаяОперация,
	|	ТаблицаОплаты.ПоступлениеСписание,
	|	ТаблицаОплаты.ФормаОплаты,
	|	ТаблицаОплаты.Валюта,
	|	ТаблицаОплаты.Группируется,
	|	СУММА(ТаблицаОплаты.СуммаКОплате) КАК СуммаКОплате
	|	
	|ИЗ
	|	ТаблицаОплатыПолная КАК ТаблицаОплаты
	|ГДЕ
	|	ТаблицаОплаты.Группируется
	|	И ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплаты.Организация,
	|	ТаблицаОплаты.Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса,
	|	ТаблицаОплаты.ПлательщикПолучатель,
	|	ТаблицаОплаты.БанковскийСчетКонтрагента,
	|	ТаблицаОплаты.ХозяйственнаяОперация,
	|	ТаблицаОплаты.ПоступлениеСписание,
	|	ТаблицаОплаты.ФормаОплаты,
	|	ТаблицаОплаты.Валюта,
	|	ТаблицаОплаты.Группируется
	|;
	|////////////////////////////////////
	|");
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ");
	//++ Локализация
	//-- Локализация

	ЧастиЗапроса.Добавить("
	|ВЫБРАТЬ
	|	ТаблицаОплаты.ОбъектОплаты                                                  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ТаблицаОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате
	|		ИНАЧЕ
	|			ТаблицаОплаты.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	
	|	ТаблицаОплаты.Организация                                                   КАК Организация,
	|	ТаблицаОплаты.Подразделение                                                 КАК Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса                                           КАК БанковскийСчет,
	|	ЛицевыеСчета.ФизическоеЛицо                                                 КАК ПодотчетноеЛицо,
	|	ЛицевыеСчета.ЛицевойСчет                                                    КАК БанковскийСчетКонтрагента,
	|	НЕОПРЕДЕЛЕНО                                                                КАК Ведомость,
	|	ТаблицаОплаты.СтатьяДвиженияДенежныхСредств                                 КАК СтатьяДвиженияДенежныхСредств,
	|	ИСТИНА                                                                      КАК ОплатаПоЗаявкам,
	|	ВЫРАЗИТЬ(ТаблицаОплаты.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).НазначениеПлатежа КАК НазначениеПлатежа,
	|	ВЫРАЗИТЬ(ТаблицаОплаты.ОбъектОплаты
	|		КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДатаАвансовогоОтчета  КАК ДатаАвансовогоОтчета,
	|	ЛицевыеСчета.Сумма                                                          КАК Сумма,
	|	ЛицевыеСчета.Сумма                                                          КАК СуммаДокумента,
	|	СУММА(ТаблицаОплаты.СуммаКОплате)                                           КАК СуммаКОплате
	|ИЗ
	|	ТаблицаОплатыПолная КАК ТаблицаОплаты
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ЛицевыеСчетаСотрудников КАК ЛицевыеСчета
	|		ПО ЛицевыеСчета.Ссылка = ТаблицаОплаты.ОбъектОплаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Списания
	|			ПО Списания.Ссылка.ПодотчетноеЛицо = ЛицевыеСчета.ФизическоеЛицо
	|				И Списания.Ссылка.БанковскийСчетКонтрагента = ЛицевыеСчета.ЛицевойСчет
	|				И Списания.ЗаявкаНаРасходованиеДенежныхСредств = ТаблицаОплаты.ОбъектОплаты
	|				И Списания.Ссылка.Проведен
	|ГДЕ
	|	(ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|		И НЕ &ИспользоватьНачислениеЗарплаты
	|	ИЛИ ТаблицаОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|		И ТаблицаОплаты.СписокФизЛиц)
	|	И Списания.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплаты.ОбъектОплаты,
	|	ТаблицаОплаты.Организация,
	|	ТаблицаОплаты.Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса,
	|	ТаблицаОплаты.СтатьяДвиженияДенежныхСредств,
	|	ЛицевыеСчета.ФизическоеЛицо,
	|	ЛицевыеСчета.ЛицевойСчет,
	|	ЛицевыеСчета.Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате
	|		ИНАЧЕ
	|			ТаблицаОплаты.ХозяйственнаяОперация
	|	КОНЕЦ
	|ИТОГИ ПО
	|	ЗаявкаНаРасходованиеДенежныхСредств
	|");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса);
	Запрос.УстановитьПараметр("ИспользоватьНачислениеЗарплаты", ИспользоватьНачислениеЗарплаты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаОплаты = Результат[1].Выгрузить();
	ВыборкаСтроки = Результат[1].Выбрать();
	ВыборкаГруппировки = Результат[2].Выбрать();
	ВыборкаВыплатыПоСписку = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОтборПлатежей = Новый Структура;
	Для Каждого Колонка Из Результат[2].Колонки Цикл
		ОтборПлатежей.Вставить(Колонка.Имя);
	КонецЦикла;
	ОтборПлатежей.Удалить("СуммаКОплате");
	
	Пока ВыборкаГруппировки.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборПлатежей, ВыборкаГруппировки);
		
		ОтобранныеПлатежи = ТаблицаОплаты.НайтиСтроки(ОтборПлатежей);
		
		Если Не ОтобранныеПлатежи.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
			ТипДокумента = ОпределитьТипСоздаваемогоДокумента(ВыборкаГруппировки);
		КонецЕсли;
		
		ДанныеЗаполнения = Неопределено;
		
		Если ТипЗнч(ОтобранныеПлатежи[0].ОбъектОплаты) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств")
			//++ Локализация
			//-- Локализация
			Или ТипЗнч(ОтобранныеПлатежи[0].ОбъектОплаты) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			
			МассивСсылок = Новый Массив;
			Для Каждого СтрокаПлатежа Из ОтобранныеПлатежи Цикл
				МассивСсылок.Добавить(СтрокаПлатежа.ОбъектОплаты);
			КонецЦикла;
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ДокументОснование", МассивСсылок);
			ДанныеЗаполнения.Вставить("БанковскийСчетКасса", ВыборкаГруппировки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("ПлательщикПолучатель", ВыборкаГруппировки.ПлательщикПолучатель);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаГруппировки.ХозяйственнаяОперация);
			ДанныеЗаполнения.Вставить("Сумма", ВыборкаГруппировки.СуммаКОплате);
			ДанныеЗаполнения.Вставить("Валюта", ВыборкаГруппировки.Валюта);
			ДанныеЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств", МассивСсылок.Количество() > 1);
		Иначе
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("БанковскийСчет", ВыборкаГруппировки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("Касса", ВыборкаГруппировки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("Контрагент", ВыборкаГруппировки.ПлательщикПолучатель);
			ДанныеЗаполнения.Вставить("Организация", ВыборкаГруппировки.Организация);
			ДанныеЗаполнения.Вставить("Валюта", ВыборкаГруппировки.Валюта);
			
			Если ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда
				Если ТипДокумента = "ПриходныйКассовыйОрдер" Или ТипДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
					ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
				Иначе
					ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
				КонецЕсли;
			ИначеЕсли ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов
				//++ НЕ УТ
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю
				//-- НЕ УТ
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным Тогда
				
				ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаГруппировки.ХозяйственнаяОперация);
			КонецЕсли;
			ДанныеЗаполнения.Вставить("Основание", ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаОплаты.Скопировать(ОтобранныеПлатежи)));
		КонецЕсли;
		
		ДокументКСозданию = Новый Структура;
		ДокументКСозданию.Вставить("ТипДокумента", ТипДокумента);
		ДокументКСозданию.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		ДокументыКСозданию.Добавить(ДокументКСозданию);
	КонецЦикла;
	
	Пока ВыборкаСтроки.НайтиСледующий(Новый Структура("Группируется", Ложь)) Цикл
		
		ДанныеЗаполнения = Неопределено;
		
		Если ТипЗнч(ВыборкаСтроки.ОбъектОплаты) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств")
			//++ Локализация
			//-- Локализация
			Или ТипЗнч(ВыборкаСтроки.ОбъектОплаты) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(ВыборкаСтроки.ОбъектОплаты);
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ДокументОснование", МассивСсылок);
			ДанныеЗаполнения.Вставить("БанковскийСчетКасса", ВыборкаСтроки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("ПлательщикПолучатель", ВыборкаСтроки.ПлательщикПолучатель);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаСтроки.ХозяйственнаяОперация);
			ДанныеЗаполнения.Вставить("Сумма", ВыборкаСтроки.СуммаКОплате);
			ДанныеЗаполнения.Вставить("Валюта", ВыборкаСтроки.Валюта);
			ДанныеЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств", Ложь);
			ДанныеЗаполнения.Вставить("ТипСуммы", ВыборкаСтроки.ТипСуммы);
			
		Иначе
			
			Если ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("Организация", ВыборкаСтроки.Организация);
				ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаСтроки.ХозяйственнаяОперация);
				ДанныеЗаполнения.Вставить("Валюта", ВыборкаСтроки.Валюта);
				ДанныеЗаполнения.Вставить("СуммаДокумента", ВыборкаСтроки.СуммаКОплате);
				
				ДанныеЗаполнения.Вставить("БанковскийСчетОтправитель", ВыборкаСтроки.ОбъектОплаты);
				ДанныеЗаполнения.Вставить("КассаОтправитель", ВыборкаСтроки.ОбъектОплаты);
				ДанныеЗаполнения.Вставить("Контрагент", ВыборкаСтроки.ОбъектОплаты);
				Если ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка Тогда
					ДанныеЗаполнения.Вставить("БанковскийСчет", ВыборкаСтроки.ОбъектОплаты);
				Иначе
					ДанныеЗаполнения.Вставить("БанковскийСчет", ВыборкаСтроки.БанковскийСчет);
				КонецЕсли;
				ДанныеЗаполнения.Вставить("Касса", ВыборкаСтроки.Касса);
				
			Иначе
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("БанковскийСчет", ВыборкаСтроки.БанковскийСчетКасса);
				ДанныеЗаполнения.Вставить("Касса", ВыборкаСтроки.БанковскийСчетКасса);
				ДанныеЗаполнения.Вставить("Контрагент", ВыборкаСтроки.ПлательщикПолучатель);
				ДанныеЗаполнения.Вставить("Организация", ВыборкаСтроки.Организация);
				ДанныеЗаполнения.Вставить("Валюта", ВыборкаСтроки.Валюта);
				ДанныеЗаполнения.Вставить("Основание", ВыборкаСтроки.ОбъектОплаты);
			КонецЕсли;
		КонецЕсли;
		
		ДокументКСозданию = Новый Структура;
		ДокументКСозданию.Вставить("ТипДокумента", ТипДокумента);
		ДокументКСозданию.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		ДокументыКСозданию.Добавить(ДокументКСозданию);
	КонецЦикла;
	
	Пока ВыборкаВыплатыПоСписку.Следующий() Цикл
		
		СуммаКОплате = ВыборкаВыплатыПоСписку.СуммаКОплате;
		Выборка = ВыборкаВыплатыПоСписку.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Сумма <= СуммаКОплате Тогда
				
				ДанныеЗаполнения = Новый Структура;
				Для каждого Колонка Из Результат[3].Колонки Цикл
					ДанныеЗаполнения.Вставить(Колонка.Имя);
				КонецЦикла;
				ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
				
				ДокументКСозданию = Новый Структура;
				ДокументКСозданию.Вставить("ТипДокумента", ТипДокумента);
				ДокументКСозданию.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
				ДокументыКСозданию.Добавить(ДокументКСозданию);
				
				СуммаКОплате = СуммаКОплате - Выборка.Сумма;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДокументыКСозданию;
	
КонецФункции

// Создает платежные документы
//
// Параметры:
//    Параметры - Структура - Содержит массив подготовленных данных для заполнения документов
//    АдресРезультата - Строка - Адрес временного хранилища, куда будет помещен массив ссылок на созданные документы.
//
Процедура СоздатьПлатежи(Параметры, АдресРезультата) Экспорт
	
	ДокументыКСозданию = Параметры.ДокументыКСозданию;
	КоличествоДокументов = ДокументыКСозданию.Количество();
	Инд = 1;
	
	СозданныеДокументы = Новый Массив;
	Для каждого ДанныеДокумента Из ДокументыКСозданию Цикл
		
		НовыйДокумент = Документы[ДанныеДокумента.ТипДокумента].СоздатьДокумент();
		НовыйДокумент.Дата = ТекущаяДатаСеанса();
		НовыйДокумент.Заполнить(ДанныеДокумента.ДанныеЗаполнения);
		
		Проводить = Ложь;
		
		НовыйДокумент.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		Если НовыйДокумент.ПроверитьЗаполнение() Тогда
			Если Не (НовыйДокумент.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения")
				И НовыйДокумент.ДополнительныеСвойства.ОшибкиЗаполнения <> "") Тогда
				Проводить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать документ.';uk='Не вдалося записати документ.'");
			ЗаписьЖурналаРегистрации(
				ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если Проводить Тогда
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = НСтр("ru='Не удалось провести документ.';uk='Не вдалося провести документ.'");
				ЗаписьЖурналаРегистрации(
					ТекстОшибки,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		Если НовыйДокумент.Ссылка <> Неопределено Тогда
			СозданныеДокументы.Добавить(НовыйДокумент.Ссылка);
		КонецЕсли;
		
		Прогресс = Окр(Инд / КоличествоДокументов * 100);
		ДлительныеОперации.СообщитьПрогресс(Прогресс);
		
		Инд = Инд + 1;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СозданныеДокументы, АдресРезультата);
	
	КлючВременногоХранилища = "ПомощникФормированияПлатежныхДокументов";
	Если Параметры.Свойство("КлючВременногоХранилища") Тогда
		КлючВременногоХранилища = Параметры.КлючВременногоХранилища;
	КонецЕсли;
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, АдресРезультата, КлючВременногоХранилища);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляет платежные документы
//
// Параметры:
//    СсылкиНаУдаление - Массив - Ссылки на удаляемые документы
//    АдресРезультата - Строка - Адрес временного хранилища, куда будут помещены ошибки при их наличии.
//
Процедура УдалитьПлатежи(СсылкиНаУдаление, АдресРезультата) Экспорт
	
	ДокументыКУдалению = Новый Массив;
	ОбъектыРасчетовКУдалению = Новый Массив;
	МассивПомеченныхНаУдаление = Новый Массив;
	СписокОшибок = Неопределено;
	ПрепятствующиеУдалению = Новый ТаблицаЗначений;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектыРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектыРасчетовПоСсылкам(СсылкиНаУдаление);
	
	Для каждого СсылкаНаУдаление Из СсылкиНаУдаление Цикл
		ДокументОбъект = СсылкаНаУдаление.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				СписокОшибок, "Объект.СозданныеДокументы", ОписаниеОшибки(), Неопределено);
			Продолжить;
		КонецПопытки;
		ДокументыКУдалению.Добавить(СсылкаНаУдаление);
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		
		ОбъектРасчетов = ОбъектыРасчетов.Получить(СсылкаНаУдаление);
		Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
			ОбъектРасчетовОбъект = ОбъектРасчетов.ПолучитьОбъект();
			ОбъектРасчетовОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	ТабСсылок = НайтиПоСсылкам(ДокументыКУдалению);
	СтрСообщения = НСтр("ru='Имеются ссылки на объект %1 в %2. Документ не будет удален.';uk='Є посилання на об''єкт %1 в %2. Документ не буде илучений.'");
	Для каждого Ссылка Из ТабСсылок Цикл
		Если ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКРаспределениюРасчетовСКлиентами")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКРаспределениюРасчетовСПоставщиками")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКЗакрытиюМесяца")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.РеестрДокументов")
			Или ТипЗнч(Ссылка[1]) = Тип("СправочникСсылка.ОбъектыРасчетов")
			//++ Локализация
			//-- Локализация
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ГрафикПлатежей")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ДанныеПервичныхДокументов")
			//++ НЕ УТ
			Или ТипЗнч(Ссылка[0]) = ТипЗнч(Ссылка[1])
			//-- НЕ УТ
			Тогда
				Продолжить;
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1]));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			СписокОшибок, "Объект.СозданныеДокументы", ТекстОшибки, Неопределено);
		Индекс = ДокументыКУдалению.Найти(Ссылка[0]);
		Если Индекс <> Неопределено Тогда
			ДокументыКУдалению.Удалить(Индекс);
		КонецЕсли;
		МассивПомеченныхНаУдаление.Добавить(Ссылка[0]);
	КонецЦикла;
	
	Для каждого ДокументКУдалению Из ДокументыКУдалению Цикл
		ОбъектРасчетов = ОбъектыРасчетов.Получить(ДокументКУдалению);
		Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
			ОбъектыРасчетовКУдалению.Добавить(ОбъектРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		УдалитьОбъекты(ОбъектыРасчетовКУдалению, Ложь);
		УдалитьОбъекты(ДокументыКУдалению, Ложь);
	Исключение
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			СписокОшибок, "Объект.СозданныеДокументы", ОписаниеОшибки(), Неопределено);
	КонецПопытки;
	
	Для каждого СсылкаНаУдаление Из МассивПомеченныхНаУдаление Цикл
		ДокументОбъект = СсылкаНаУдаление.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(СписокОшибок, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуПоДаннымРасшифровки(Объект) Экспорт
	
	МассивПартнеры = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(
		Объект.РасшифровкаПлатежа.ВыгрузитьКолонку("Партнер"));
	Если МассивПартнеры.Количество() = 1 Тогда
		Объект.Партнер = МассивПартнеры[0];
	Иначе
		Объект.Партнер = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Определяет строки графика платежей, подлежащие оплате
//
// Параметры:
//    ОбъектыОплаты - Массив, ДокументСсылка - Оплачиваемые объекты
//
// Возвращаемое значение:
//    Массив - Ключи записей регистра График платежей
//
Функция СтрокиГрафикаКОплате(Знач ОбъектыОплаты) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектыОплаты) <> Тип("Массив") Тогда
		ОбъектОплаты = ОбъектыОплаты;
		ОбъектыОплаты = Новый Массив;
		ОбъектыОплаты.Добавить(ОбъектОплаты);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.ОбъектОплаты КАК ОбъектОплаты,
	|	ДанныеРегистра.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ДанныеРегистра.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеРегистра.ПлательщикПолучатель КАК ПлательщикПолучатель,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	ДанныеРегистра.ПоступлениеСписание КАК ПоступлениеСписание,
	|	ДанныеРегистра.Валюта КАК Валюта
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектОплаты В (&ОбъектыОплаты)
	|	И ДанныеРегистра.ДатаПлатежа <= &ТекущаяДата
	|;
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеРегистра.ОбъектОплаты КАК ОбъектОплаты,
	|	ДанныеРегистра.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ДанныеРегистра.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеРегистра.ПлательщикПолучатель КАК ПлательщикПолучатель,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	ДанныеРегистра.ПоступлениеСписание КАК ПоступлениеСписание,
	|	ДанныеРегистра.Валюта КАК Валюта
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектОплаты В (&ОбъектыОплаты)
	|	И ДанныеРегистра.ДатаПлатежа > &ТекущаяДата
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|";
	
	Запрос.УстановитьПараметр("ОбъектыОплаты", ОбъектыОплаты);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		ИндексВыборки = 1;
	Иначе
		ИндексВыборки = 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[ИндексВыборки].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураКлюча = Новый Структура;
		Для каждого Колонка Из РезультатЗапроса[ИндексВыборки].Колонки Цикл
			СтруктураКлюча.Вставить(Колонка.Имя);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтруктураКлюча, Выборка);
		
		КлючЗаписи = РегистрыСведений.ГрафикПлатежей.СоздатьКлючЗаписи(СтруктураКлюча);
		Результат.Добавить(КлючЗаписи);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбменСБанками

// Проверяет принадлежность хозяйственной операции к множеству операций по зарплате.
//
// Параметры:
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операция.
//
// Возвращаемое значение:
//    Булево - Признак принадлежности.
//
Функция ОперацияПоЗарплате(ХозяйственнаяОперация) Экспорт
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
	
	Если МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выделяет в назначении платежа фиксированную часть без служебных символов, слов менее 2 символов, чисел.
//
// Параметры:
//    ВремСтрока - Строка - Преобразуемая строка.
//
// Возвращаемое значение:
//    Строка - Форматированная строка назначения.
//
Функция ФорматироватьНазначениеПлатежа(Знач ВремСтрока) Экспорт
	
	НедопустимыеСимволы = "0123456789""/\[]:;|=?*<>.,-_(){}+-=№@";
	
	Для Позиция = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		ВремСтрока = СтрЗаменить(ВремСтрока, Сред(НедопустимыеСимволы, Позиция, 1), " ");
	КонецЦикла;
	
	МассивСлов = РазложитьСтрокуНазначенияВМассивСлов(ВремСтрока);
	
	СтрокаРезультат = СтрСоединить(МассивСлов, " ");
	
	Возврат СокрЛП(СтрокаРезультат);
	
КонецФункции

#КонецОбласти

#Область ПроверкиЗаполненияДокументов

// Функция формирует запрос по табличной части "Расшифровка платежа".
//
// Параметры:
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//	Организация - СправочникСсылка.Организации - Организация документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//	ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - объект расчетов владельца расшифровки платежа.
//
// Возвращаемое значение:
//	Запрос - запрос по табличной части.
//
Функция ЗапросПоТабличнойЧастиРасшифровкаПлатежа(РасшифровкаПлатежа, Организация, ХозяйственнаяОперация = Неопределено, ОбъектРасчетов = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И &ИспользоватьСчетаНаОплатуКлиентам
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ПроверкаСчетаНаОплату
	|
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.ОбъектРасчетов.Организация НЕ В(&Организация)
	|	//ОтборПоТипу
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	
	ТаблицаДокумента = РасшифровкаПлатежа.Выгрузить();
	Если ТаблицаДокумента.Колонки.Найти("СчетНаОплату") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуКлиенту"));
	КонецЕсли;
	КолонкаЗаказИзДокумента = ТаблицаДокумента.Колонки.Найти("ОбъектРасчетов");
	КолонкаЗаказИзДокумента.Имя = "ЗаказИзДокумента";
	МассивДобавляемыхТипов = Новый Массив;
	МассивДобавляемыхТипов.Добавить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"));
	МассивДобавляемыхТипов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	ТаблицаДокумента.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов(КолонкаЗаказИзДокумента.ТипЗначения, МассивДобавляемыхТипов));
	ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку(КолонкаЗаказИзДокумента), "ОбъектРасчетов");
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьСчетаНаОплатуКлиентам", ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам"));
	
	Если ОбъектРасчетов <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ОтборПоТипу","И ТаблицаДокумента.ОбъектРасчетов <> &ОбъектРасчетов");
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	КонецЕсли;
	
	ДоступныеОрганизации = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		ЗапросПоДоступнымОрганизациям = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		ЗапросПоДоступнымОрганизациям.УстановитьПараметр("Организация", Организация);
		
		ДоступныеОрганизации = ЗапросПоДоступнымОрганизациям.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	ДоступныеОрганизации.Добавить(Организация);
	
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	
	Возврат Запрос;
	
КонецФункции // ЗапросПоТабличнойЧастиРасшифровкаПлатежа()

// Процедура проверяет заполнение табличной части "Расшифровка платежа".
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	СуммаДокумента - Число - Общая сумма документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Отказ - Булево - Признак отказа от продолжения работы
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок.
//
Процедура ПроверитьЗаполнениеРасшифровкиПлатежа(
	ДокументОбъект,
	СуммаДокумента,
	ХозяйственнаяОперация,
	Отказ,
	ОшибкиЗаполнения = ""
	) Экспорт
	
	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	//++ НЕ УТ
	Если Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
		МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
	КонецЕсли; 
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДавальцу);
	//-- НЕ УТ
	
	Если МассивНепроверяемыхОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим соответствие сумм документа и табличной части.
	Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0
		И СуммаДокумента <> ДокументОбъект.РасшифровкаПлатежа.Итог("Сумма")
	Тогда
		Текст = НСтр("ru='Сумма по строкам в табличной части должна равняться сумме документа';uk='Сума за рядками у табличній частині повинна дорівнювати сумі документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст, ДокументОбъект, "РасшифровкаПлатежа[0].Сумма",, Отказ);
	КонецЕсли;
	
	// Проверим соответствие организации в шапке документа и в табличной части.
	Запрос = ЗапросПоТабличнойЧастиРасшифровкаПлатежа(
		ДокументОбъект.РасшифровкаПлатежа,
		ДокументОбъект.Организация,
		ХозяйственнаяОперация,
		ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ДокументОбъект.Ссылка));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ПроверкаСчетаНаОплату Тогда
			ТекстДокумент = НСтр("ru='счете на оплату';uk='рахунку на оплату'");
			ИмяПоля = "СчетНаОПлату";
		Иначе
			ТекстДокумент = НСтр("ru='объекте расчетов';uk='об''єкті розрахунків'");
			ИмяПоля = "ОбъектРасчетов";
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
			Поле = "УменьшенДолгСтрокой";
			КлючДанных = Неопределено;
		Иначе
			Поле = "РасшифровкаПлатежа[" + (Выборка.НомерСтроки - 1) + "]." + ИмяПоля;
			КлючДанных = ДокументОбъект;
		КонецЕсли;
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Организация в %1 в строке %2 списка ""Расшифровка платежа"" не соответствует организации документа %3';uk='Організація в %1 в рядку %2 списку ""Розшифровка платежу"" не відповідає організації документа %3'"),
			ТекстДокумент,
			Выборка.НомерСтроки,
			ДокументОбъект.Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			КлючДанных,
			Поле,
			,
			Отказ);
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРасшифровкиПлатежа()

// Процедура проверки заявки на расходование денежных средств, указанной в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаявкуНаРасходованиеДенежныхСредств(
	ДокументОбъект,
	Отказ
	) Экспорт
	
	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
		И МассивНепроверяемыхОпераций.Найти(ДокументОбъект.ХозяйственнаяОперация) = Неопределено Тогда
		
		Если Не ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") Тогда
			
			Если Не ДокументОбъект.ОплатаПоЗаявкам Тогда
				Возврат;
			КонецЕсли;
		
			МассивЗаявок = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ЗаявкаНаРасходованиеДенежныхСредств");
			
			Если Не МассивЗаявок.Количество() Тогда
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Представление(ДанныеДокумента.Ссылка) КАК Заявка,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.Организация <> &Организация ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЕстьОтличияВОрганизации,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.ПланированиеСуммы В (
			|		ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ПустаяСсылка),
			|		ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа))
			|		И ДанныеДокумента.Валюта <> &Валюта ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЕстьОтличияВалюты,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате) ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЗаявкаНеУтвержденаКОплате
			|	
			|ИЗ
			|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка В (&МассивЗаявок)
			|");
		
			Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
			Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
			Запрос.УстановитьПараметр("Валюта", ДокументОбъект.Валюта);
			Запрос.УстановитьПараметр("ДокументОплатыСсылка", ДокументОбъект.Ссылка);
			
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
				БанковскийСчетКасса = ДокументОбъект.Касса;
			ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
				БанковскийСчетКасса = ДокументОбъект.БанковскийСчет;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("БанковскийСчетКасса", БанковскийСчетКасса);
			
			ТаблицаПроверки = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрокаПроверки Из ТаблицаПроверки Цикл
				
				Если СтрокаПроверки.ЕстьОтличияВОрганизации Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Организация документа %1 не соответствует организации в %2';uk='Організація документа %1 не відповідає організації в %2'"),
						ДокументОбъект.Организация,
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
				Если СтрокаПроверки.ЕстьОтличияВалюты Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Валюта документа %1 не соответствует валюте в %2';uk='Валюта документа %1 не відповідає валюті в %2'"),
						ДокументОбъект.Валюта,
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
				Если СтрокаПроверки.ЗаявкаНеУтвержденаКОплате Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 не утверждена к оплате';uk='%1 не затверджена до оплати'"),
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаявкуНаРасходованиеДенежныхСредств()

// ВыборкаРеквизитыШапки - ВыборкаИзРезультатаЗапроса - Выборка
// Процедура проверки распоряжения на перемещение денежных средств, указанного в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств(
	ДокументОбъект,
	Отказ
	) Экспорт
	
	МассивПроверяемыхОпераций = Новый Массив;
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
	   И МассивПроверяемыхОпераций.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств)
	Тогда
	
		Реквизиты = Документы.РаспоряжениеНаПеремещениеДенежныхСредств.РеквизитыДокумента(ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств);
		Если Реквизиты.Организация <> ДокументОбъект.Организация Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Организация в распоряжении не соответствует организации документа %1';uk='Організація в розпорядженні не відповідає організації документа %1'"),
				ДокументОбъект.Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Подразделение <> ДокументОбъект.Подразделение Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Подразделение в распоряжении не соответствует подразделению документа %1';uk='Підрозділ в розпорядженні не відповідає підрозділу документа %1'"),
				ДокументОбъект.Подразделение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате Тогда
			
			Текст = НСтр("ru='Распоряжение на перемещение денежных средств не утверждено к оплате';uk='Розпорядження на переміщення грошових коштів не затверджено до оплати'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Валюта <> ДокументОбъект.Валюта Тогда
			
			Текст = НСтр("ru='Валюта распоряжения не соответствует валюте документа';uk='Валюта розпорядження не відповідає валюті документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств()

// Процедура проверяет кассу получателя, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьКассуПолучателя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
		И ЗначениеЗаполнено(ДокументОбъект.КассаПолучатель)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
			И ЗначениеЗаполнено(ДокументОбъект.Касса)
			И ДокументОбъект.Касса = ДокументОбъект.КассаПолучатель Тогда
			
			Текст = НСтр("ru='Одна и та же касса не может являться отправителем и получателем одновременно';uk='Одна і та ж каса не може бути відправником і одержувачем одночасно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаПолучатель",
				,
				Отказ);
		Иначе
			
			РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.КассаПолучатель, "Владелец, ВалютаДенежныхСредств");
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И ДокументОбъект.Организация <> РеквизитыКассы.Владелец Тогда
				
				Текст = НСтр("ru='Организация кассы получателя не соответствует организации документа';uk='Організація каси отримувача не відповідає організації документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыКассы.ВалютаДенежныхСредств Тогда
				Текст = НСтр("ru='Валюта кассы получателя не соответствует валюте документа';uk='Валюта каси отримувача не відповідає валюті документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
				И ЗначениеЗаполнено(ДокументОбъект.Касса) И ТипЗнч(ДокументОбъект.КассаПолучатель) <> Тип("СправочникСсылка.КассыККМ") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ПолучателиПлатежейПриПеремещенииДС.ПолучательПлатежа КАК КассаПолучатель
					|ИЗ
					|	Справочник.Кассы.ПолучателиПлатежейПриПеремещенииДС КАК ПолучателиПлатежейПриПеремещенииДС
					|ГДЕ
					|	ПолучателиПлатежейПриПеремещенииДС.Ссылка = &Касса");
				Запрос.УстановитьПараметр("Касса", ДокументОбъект.Касса);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой()
					И РезультатЗапроса.Выгрузить().Найти(ДокументОбъект.КассаПолучатель) = Неопределено Тогда
					
					Текст = НСтр("ru='Касса получатель недоступна для перемещения денежных средств из кассы документа';uk='Каса одержувач недоступна для переміщення грошових коштів з каси документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаПолучатель",
						,
						Отказ);
				КонецЕсли;
			
			КонецЕсли;
			
			// Проверка взаимосвязанности организации кассы получателя с организацией кассы отправителя по организационной структуре.
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.';uk='Організація каси одержувача повинна бути взаємопов''язана з організацією каси відправника за організаційною структурою.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
					
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя не должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.';uk='Організація каси одержувача не повинна бути взаємопов''язана з організацією каси відправника за організаційною структурою.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуПолучателя()

// Процедура проверяет кассу отправителя, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьКассуОтправителя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
		И ЗначениеЗаполнено(ДокументОбъект.КассаОтправитель)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
			И ЗначениеЗаполнено(ДокументОбъект.Касса)
			И ДокументОбъект.Касса = ДокументОбъект.КассаОтправитель Тогда
			
			Текст = НСтр("ru='Одна и та же касса не может являться отправителем и получателем одновременно';uk='Одна і та ж каса не може бути відправником і одержувачем одночасно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаПолучатель",
				,
				Отказ);
		Иначе
			
			РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.КассаОтправитель, "Владелец, ВалютаДенежныхСредств");
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И ДокументОбъект.Организация <> РеквизитыКассы.Владелец Тогда
				
					Текст = НСтр("ru='Организация кассы отправителя не соответствует организации документа';uk='Організація каси відправника не відповідає організації документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаОтправитель",
						,
						Отказ);
			ИначеЕсли (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
				Или ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации)
				И ДокументОбъект.Организация = РеквизитыКассы.Владелец Тогда
				
					Текст = НСтр("ru='Организация кассы отправителя должна отличаться от организации документа';uk='Організація каси відправника повинна відрізнятися від організації документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаОтправитель",
						,
						Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыКассы.ВалютаДенежныхСредств Тогда
				Текст = НСтр("ru='Валюта кассы отправителя не соответствует валюте документа';uk='Валюта каси відправника не відповідає валюті документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
			КонецЕсли;
			
			// Проверка взаимосвязанности организации кассы получателя с организацией кассы отправителя по организационной структуре.
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.';uk='Організація каси одержувача повинна бути взаємопов''язана з організацією каси відправника за організаційною структурою.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
					
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя не должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.';uk='Організація каси одержувача не повинна бути взаємопов''язана з організацією каси відправника за організаційною структурою.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуОтправителя()

// Процедура проверяет кассу ККМ, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьКассуККМ(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.КассаККМ)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(ДокументОбъект.КассаККМ);
		Если ДокументОбъект.Организация <> РеквизитыКассыККМ.Организация Тогда
			Текст = НСтр("ru='Организация кассы ККМ не соответствует организации документа';uk='Організація каси ККМ не відповідає організації документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ);
		КонецЕсли;
		Если ДокументОбъект.Валюта <> РеквизитыКассыККМ.Валюта Тогда
			Текст = НСтр("ru='Валюта кассы ККМ не соответствует валюте документа';uk='Валюта каси ККМ не відповідає валюті документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуККМ()

// Процедура проверяет банковский счет получатель, указанный в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок.
//
Процедура ПроверитьБанковскийСчетПолучатель(ДокументОбъект, Отказ, ОшибкиЗаполнения = "") Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетПолучатель)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет)
		   И ДокументОбъект.БанковскийСчет = ДокументОбъект.БанковскийСчетПолучатель Тогда
		   
			Текст = НСтр("ru='Один и тот же банковский счет не может являться отправителем и получателем одновременно';uk='Один і той же банківський рахунок не може бути відправником і одержувачем одночасно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"БанковскийСчетПолучатель",
				,
				Отказ);
		Иначе
			
			РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ДокументОбъект.БанковскийСчетПолучатель);
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
			 И ДокументОбъект.Организация <> РеквизитыСчета.Организация Тогда
				Текст = НСтр("ru='Организация счета получателя не соответствует организации документа';uk='Організація рахунку отримувача не відповідає організації документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"БанковскийСчетПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыСчета.Валюта Тогда
				Текст = НСтр("ru='Валюта счета получателя не соответствует валюте документа';uk='Валюта рахунку отримувача не відповідає валюті документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"БанковскийСчетПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			// Проверка взаимосвязанности организации счета получателя с организацией кассы отправителя по организационной структуре.
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыСчета.Организация) Тогда
				
				Текст = НСтр("ru='Организация счета получателя должна быть взаимосвязана с организацией счета отправителя по организационной структуре.';uk='Організація рахунку одержувача повинна бути взаємопов''язана з організацією рахунку відправника за організаційною структуоюі.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыСчета.Организация) Тогда
				
				Текст = НСтр("ru='Организация счета получателя не должна быть взаимосвязана с организацией счета отправителя по организационной структуре.';uk='Організація рахунку одержувача не повинна бути взаємопов''язана з організацією рахунку відправника за організаційною структурою.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьБанковскийСчетПолучатель()

// Процедура проверяет валюту конвертации, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок.
//
Процедура ПроверитьВалютуКонвертации(ДокументОбъект, Отказ, ОшибкиЗаполнения = "") Экспорт
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
	   И ЗначениеЗаполнено(ДокументОбъект.Валюта)
	   И ЗначениеЗаполнено(ДокументОбъект.ВалютаКонвертации)
	Тогда
		
		Если ДокументОбъект.Валюта = ДокументОбъект.ВалютаКонвертации Тогда
			
			Текст = НСтр("ru='Валюта конвертации должна отличаться от валюты документа';uk='Валюта конвертації повинна відрізнятися від валюти документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"ВалютаКонвертации",
				,
				Отказ);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет сумму дохода по единому налогу, указанную в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьСуммуПоЕдиномуНалогу(ДокументОбъект, Отказ, СуммаДляКонтроля = 0) Экспорт
	
	Если СуммаДляКонтроля = 0 Тогда
		СуммаДляКонтроля = ДокументОбъект.СуммаДокумента;
	КонецЕсли;
	
	Если СуммаДляКонтроля < 0 Тогда
		СуммаДляКонтроля = (-1) * СуммаДляКонтроля;
	КонецЕсли;
	
	Если ДокументОбъект.СуммаПоЕдиномуНалогу > СуммаДляКонтроля Тогда
		
	    Текст = НСтр("ru='Сумма дохода по единому налогу больше, чем сумма документа';uk='Сума доходу по єдиному податку більше, ніж сума документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"СуммаПоЕдиномуНалогу",
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.СтатьяДекларацииПоЕдиномуНалогу)
	   И ДокументОбъект.СтатьяДекларацииПоЕдиномуНалогу <> Справочники.СтатьиНалоговыхДеклараций.ЕННК_ДоходыДоходомНеПризнается
	   И ДокументОбъект.СуммаПоЕдиномуНалогу = 0 Тогда
	   
	    Текст = НСтр("ru='Указана статья декларации по единому налогу, но не заполнена сумма дохода';uk='Зазначена стаття декларації по єдиному податку, але не заповнена сума доходу'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"СуммаПоЕдиномуНалогу",
			,
			Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет, разрешены ли платежи без указания заявок на расходование денежных средств.
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - документ, для которого выполняется проверка.
//
// Возвращаемое значение:
//    Булево - Разрешены, или нет.
//
Функция РазрешеныПлатежиБезУказанияЗаявок(ДокументОбъект) Экспорт
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Реквизиты = Справочники.Кассы.ПолучитьРеквизитыКассы(ДокументОбъект.Касса);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		Реквизиты =
			Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ДокументОбъект.БанковскийСчет);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		
		Реквизиты =
			Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ДокументОбъект.ЭквайринговыйТерминал);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции // РазрешеныПлатежиБезУказанияЗаявок() 

// Процедура очищает неиспользуемые для хозяйственной операции реквизиты.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	МассивВсехРеквизитов - Массив - Массив всех реквизитов документа, которые необходимо очищать
//	МассивРеквизитовОперации - Массив - Массив реквизитов документа, которые относятся к хозяйственной операции документа.
//
Процедура ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, Знач МассивВсехРеквизитов, Знач МассивРеквизитовОперации) Экспорт
	
	Для каждого ЭлементМассива Из МассивРеквизитовОперации Цикл
		Номер = МассивВсехРеквизитов.Найти(ЭлементМассива);
		Если Номер <> Неопределено Тогда
			МассивВсехРеквизитов.Удалить(Номер);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураТабличныхЧастей = Новый Структура;
	
	Для каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		Позиция = СтрНайти(ЭлементМассива, ".");
		Если Позиция <> 0 Тогда
			
			ИмяТабличнойЧасти = Лев(ЭлементМассива, Позиция - 1);
			РеквизитыТабличнойЧасти = Новый Массив;
			Если Не СтруктураТабличныхЧастей.Свойство(ИмяТабличнойЧасти, РеквизитыТабличнойЧасти) Тогда
				СтруктураТабличныхЧастей.Вставить(ИмяТабличнойЧасти, Новый Массив);
				РеквизитыТабличнойЧасти = СтруктураТабличныхЧастей[ИмяТабличнойЧасти];
			КонецЕсли;
			РеквизитыТабличнойЧасти.Добавить(Сред(ЭлементМассива, Позиция + 1));
			
		ИначеЕсли ЭлементМассива = "РасшифровкаПлатежа" Тогда
			
			ДокументОбъект["РасшифровкаПлатежа"].Очистить();
			
		ИначеЕсли ЭлементМассива = "ЛицевыеСчетаСотрудников"
			Или ЭлементМассива = "ВыплатаЗаработнойПлаты"
			Или ЭлементМассива = "СтрокаФизическиеЛица" Тогда
			Продолжить;
		Иначе
			Если ЗначениеЗаполнено(ДокументОбъект[СокрЛП(ЭлементМассива)]) Тогда
				ДокументОбъект[СокрЛП(ЭлементМассива)] = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураТабличныхЧастей.Количество() > 0 Тогда
		Для каждого ТабличнаяЧасть Из СтруктураТабличныхЧастей Цикл
			Для каждого СтрокаТаблицы Из ДокументОбъект[ТабличнаяЧасть.Ключ] Цикл
				Для каждого ЭлементМассива Из ТабличнаяЧасть.Значение Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы[СокрЛП(ЭлементМассива)]) Тогда
						СтрокаТаблицы[СокрЛП(ЭлементМассива)] = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает неиспользуемые реквизиты для указанной в документе формы оплаты.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	ОчищатьДляПустойФормыОплаты - Булево - очищать реквизиты, если форма оплаты не указана (при любой форме оплаты).
//
Процедура ОчиститьНеиспользуемыеРеквизитыФормыОплаты(ДокументОбъект, ФормаОплаты, ОчищатьДляПустойФормыОплаты = Ложь) Экспорт
	
	Если Не (ЗначениеЗаполнено(ФормаОплаты) Или ОчищатьДляПустойФормыОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов.Добавить("Касса");
	КонецЕсли;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Безналичная Тогда
		МассивРеквизитов.Добавить("БанковскийСчет");
	КонецЕсли;
	
	ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, МассивРеквизитов, Новый Массив);
	
КонецПроцедуры // ОчиститьНеиспользуемыеРеквизитыФормыОплаты()

// В зависимости от хоз. операции, добавляет в массив реквизиты объекта не требующие проверки заполнения.
// Параметры:
//    ДокументОбъект                  - ДокументОбъект - документ, предназначенный для записи или проведения;
//    МассивНепроверяемыхРеквизитов   - Массив - массив реквизитов, не требующих проверки
//                                      при записи и проведении документа;
//    ХозяйственнаяОперацияПоЗарплате - Булево - признак того, что хозяйственная операция, указанная в документе,
//                                      отражает движения по заработной плате.
//
Процедура ДобавитьНепроверяемыеРеквизитыПоВыплатеЗаработнойПлаты(ДокументОбъект, МассивНепроверяемыхРеквизитов, ХозяйственнаяОперацияПоЗарплате = Ложь) Экспорт
	
	Если ОперацияПоЗарплате(ДокументОбъект.ХозяйственнаяОперация) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("АналитикаАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходов");
		
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить()
			И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
		КонецЕсли;
		
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") И Не ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			
		КонецЕсли;
		
		Если ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
			
		ИначеЕсли ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда 
			
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			МассивНепроверяемыхРеквизитов.Добавить("ФизическоеЛицо");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевойСчет");
			
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			
		КонецЕсли;
		
		Если Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку к имеющимся
//
// Параметры:
//    ОшибкиЗаполнения - Строка - Накопленное описание ошибок
//    ТекстОшибки - Строка - Описание очередной ошибки.
//
Процедура ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки) Экспорт
	
	ОшибкиЗаполнения = ОшибкиЗаполнения + "
	|" + ТекстОшибки;
	
КонецПроцедуры

// Выполняет проверку заполнения реквизитов вместо платформы. Ошибки записываются, а не выводятся на экран.
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - Объект документа
//    ПроверяемыеРеквизиты - Массив - Реквизиты, требующие проверки заполненности
//    ОшибкиЗаполнения - Строка - Описание ошибок заполнения.
//
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(ДокументОбъект, ПроверяемыеРеквизиты, ОшибкиЗаполнения) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	РеквизитыДокумента = МетаданныеДокумента.Реквизиты;
	ТабличныеЧасти = МетаданныеДокумента.ТабличныеЧасти;
	
	Для каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
		
		ПозТочки = СтрНайти(ИмяРеквизита, ".");
		Если ПозТочки = 0 Тогда
			Если ИмяРеквизита = "Дата" Тогда
				Реквизит = МетаданныеДокумента.СтандартныеРеквизиты.Дата;
			Иначе
				Реквизит = РеквизитыДокумента.Найти(ИмяРеквизита);
			КонецЕсли;
			
			Если Реквизит <> Неопределено Тогда
				Если Не ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]) Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Поле ""%1"" не заполнено.';uk='Поле ""%1"" не заповнене.'"),
						Реквизит.Синоним);
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ТабЧастьДокумента = ТабличныеЧасти.Найти(ИмяРеквизита);
			Если ТабЧастьДокумента <> Неопределено Тогда
				Если Не ДокументОбъект[ИмяРеквизита].Количество() Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не введено ни одной строки в список ""%1"".';uk='Не введено жодного рядка в список ""%1"".'"),
						ТабЧастьДокумента.Синоним);
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ИмяТабЧасти = Лев(ИмяРеквизита, ПозТочки - 1);
			ИмяРеквизита = Сред(ИмяРеквизита, ПозТочки + 1);
			
			ТабЧастьДокумента = ТабличныеЧасти[ИмяТабЧасти];
			Если ТабЧастьДокумента <> Неопределено Тогда
				Реквизит = ТабЧастьДокумента.Реквизиты.Найти(ИмяРеквизита);
				Если Реквизит <> Неопределено Тогда
					Для каждого СтрокаТабЧасти Из ДокументОбъект[ИмяТабЧасти] Цикл
						Если Не ЗначениеЗаполнено(СтрокаТабЧасти[ИмяРеквизита]) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Не заполнена колонка ""%1"" в строке %2 списка ""%3"".';uk='Не заповнена колонка ""%1"" в рядку %2 списку ""%3"".'"),
								Реквизит.Синоним,
								СтрокаТабЧасти.НомерСтроки,
								ТабЧастьДокумента.Синоним);
							ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку заполнения однострочной расшифровки платежа
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - Проверяемый документ
//    ПроверяемыеРеквизиты - Массив - Проверяемые реквизиты документа
//    ИмяТЧ - Строка - Имя табличной части, текущая строка которой выводится в виде отдельных реквизитов
//    ИмяЗаменыТЧ - Строка - Наименование подстроки замены наименования реквизитов табличной части
//    Отказ - Булево - Признак отказа от операции.
//
Процедура ПроверитьЗаполнениеРасшифровкиБезРазбиения(ДокументОбъект, ПроверяемыеРеквизиты, ИмяТЧ, ИмяЗаменыТЧ, Отказ) Экспорт
	
	Если Не ДокументОбъект[ИмяТЧ].Количество() Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ТабличныеЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти;
	ТабЧастьДокумента = ТабличныеЧасти[ИмяТЧ];
	
	ШаблонОшибки = НСтр("ru='Поле ""%1"" не заполнено';uk='Поле ""%1"" не заповнене'");
	
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		
		Если СтрНайти(ПроверяемыйРеквизит, ИмяТЧ) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозТочки = СтрНайти(ПроверяемыйРеквизит, ".");
		Если ПозТочки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Сред(ПроверяемыйРеквизит, ПозТочки + 1);
		ИмяЭлемента = ИмяЗаменыТЧ + ИмяРеквизита;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект[ИмяТЧ][0][ИмяРеквизита]) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ШаблонОшибки, ТабЧастьДокумента.Реквизиты[ИмяРеквизита].Синоним),
				,
				"Элементы." + ИмяТЧ + ".ТекущиеДанные." + ИмяРеквизита,
				,
				Отказ);
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить(ПроверяемыйРеквизит);
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);

КонецПроцедуры

// Проверяет заполнения реквизита Партнер в ТЧ РасшифровкаПлатежа
//
// Параметры:
//	Объект                - ДокументОбъект - Денежный документ.
//	ХозяйственнаяОперация - Справочник.ХозяйственныеОперация - хозяйственная операция объекта
//	МассивНепроверяемыхРеквизитов - Массив - Непроверяемые реквизиты документа
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаполнениеПартнера(Объект, ХозяйственнаяОперация, МассивНепроверяемыхРеквизитов, РасшифровкаБезРазбиения, Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивНепроверяемыхРеквизитов.Найти("РасшифровкаПлатежа.Партнер") = Неопределено Тогда
		ПредставлениеРеквизитаПартнер = ПартнерыИКонтрагенты.ЗаголовокРеквизитаПартнерВЗависимостиОтХозяйственнойОперации( ХозяйственнаяОперация);
		СинонимРеквизитаПартнера      = Объект.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Партнер.Синоним;
		Если ПредставлениеРеквизитаПартнер <> СинонимРеквизитаПартнера Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Партнер");
			Для каждого СтрокаРасшифровкаПлатежа Из Объект.РасшифровкаПлатежа Цикл
				Если Не ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.Партнер) Тогда
					
					Если РасшифровкаБезРазбиения Тогда
						ИмяПоля = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.Партнер";
						КлючДанных = Неопределено;
					Иначе
						ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", СтрокаРасшифровкаПлатежа.НомерСтроки, "Партнер");
						КлючДанных = Объект;
					КонецЕсли;
					
					ТекстОшибки = НСтр("ru='Поле ""%1"" не заполнено';uk='Поле ""%1"" не заповнене'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПредставлениеРеквизитаПартнер);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, КлючДанных, ИмяПоля, , Отказ);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет соответствие документов закупки авансовому отчету
//
// Параметры:
//    ДокументОбъект - ДокументОбъект.ПриобретениеТоваровУслуг, ДокументОбъект.ПоступлениеДенежныхДокументов - проверяемый объект
//    Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьДокументыЗакупкиАвансовогоОтчета(ДокументОбъект, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.АвансовыйОтчет) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Ссылка) КАК АвансовыйОтчет,
	|	ДанныеДокумента.Организация <> &Организация КАК ОтличаетсяОрганизация,
	|	ДанныеДокумента.ПодотчетноеЛицо <> &ПодотчетноеЛицо КАК ОтличаетсяПодотчетноеЛицо,
	|	ДанныеДокумента.Валюта <> &Валюта И НЕ ДанныеДокумента.Мультивалютный КАК ОтличаетсяВалюта
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.АвансовыйОтчет);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", ДокументОбъект.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Валюта", ДокументОбъект.Валюта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОтличаетсяОрганизация Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Организация %1 не соответствует организации в документе %2';uk='Організація %1 не відповідає організації в документі %2'"),
				ДокументОбъект.Организация, Выборка.АвансовыйОтчет);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "",, Отказ);
		КонецЕсли;
		
		Если Выборка.ОтличаетсяПодотчетноеЛицо Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Подотчетное лицо %1 не соответствует подотчетному лицу в документе %2';uk='Підзвітна особа %1 не відповідає підзвітній особі в документі %2'"),
				ДокументОбъект.ПодотчетноеЛицо, Выборка.АвансовыйОтчет);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "",, Отказ);
		КонецЕсли;
		
		Если Выборка.ОтличаетсяВалюта Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Валюта %1 не соответствует валюте в документе %2';uk='Валюта %1 не відповідає валюті в документі %2'"),
				ДокументОбъект.Валюта, Выборка.АвансовыйОтчет);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "",, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСправочников

// Заполнение общих реквизитов справочников
//
// Параметры:
//    Объект - СправочникОбъект - объект.
Процедура ОбработкаЗаполненияСправочников(Объект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Владелец")
		И Не ЗначениеЗаполнено(Объект.Владелец) Тогда
		Объект.Владелец = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Владелец);
		Если Не ЗначениеЗаполнено(Объект.Владелец) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2 Тогда
				ВызватьИсключение НСтр("ru='Не удалось определить принадлежность элемента к определенной ""Организации"". В информационной базе введено несколько организаций,
|Включите функциональную опцию ""Использовать несколько организаций""!'
|;uk='Не вдалося визначити належність елемента до певної ""Організації"". В інформаційній базі введено кілька організацій,
|Увімкніть функціональну опцію ""Використовувати кілька організацій""!'");
			Иначе
				ВызватьИсключение НСтр("ru='Не удалось определить принадлежность элемента к определенной ""Организации"". Возможно, в информационной базе не введено ни одной организации!';uk='Не вдалося визначити належність елемента до певної ""Організації"". Можливо, в інформаційній базі не введено жодної організації!'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументов

// Функция проверяет возможность формирования документа "Списание безналичных ДС"
// на основании нескольких документов. 
//
// Параметры:
//  МассивСсылок  - Массив - заказы поставщикам, по которым необходимо ввести реализацию.
//
// Возвращаемое значение:
//   Булево   - Истина, если формирование возможно.
//
Функция СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам(МассивСсылок) Экспорт

	Отказ = Ложь;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Контрагент) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Организация) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияОрганизация,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ТипДокумента) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияТип
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПриобретениеТоваровУслуг.Организация КАК Организация,
	|		ПриобретениеТоваровУслуг.Контрагент КАК Контрагент,
	|		""А"" КАК ТипДокумента
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|	ГДЕ
	|		ПриобретениеТоваровУслуг.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриобретениеУслугПрочихАктивов.Организация,
	|		ПриобретениеУслугПрочихАктивов.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ПриобретениеУслугПрочихАктивов КАК ПриобретениеУслугПрочихАктивов
	|	ГДЕ
	|		ПриобретениеУслугПрочихАктивов.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Организация,
	|		ЗаказПоставщику.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитенту.Организация,
	|		ОтчетКомитенту.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ГДЕ
	|		ОтчетКомитенту.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитентуОСписании.Организация,
	|		ОтчетКомитентуОСписании.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|	ГДЕ
	|		ОтчетКомитентуОСписании.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионера.Организация,
	|		ОтчетКомиссионера.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ГДЕ
	|		ОтчетКомиссионера.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПередачаТоваровМеждуОрганизациями.Организация,
	|		NULL,
	|		""А""
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ГДЕ
	|		ПередачаТоваровМеждуОрганизациями.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетПоКомиссииМеждуОрганизациями.Организация,
	|		NULL,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ГДЕ
	|		ОтчетПоКомиссииМеждуОрганизациями.Ссылка В(&МассивСсылок)
	|	
	//++ Локализация
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаможеннаяДекларацияИмпорт.Организация,
	|		ТаможеннаяДекларацияИмпорт.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ГДЕ
	|		ТаможеннаяДекларацияИмпорт.Ссылка В(&МассивСсылок)
	|	
	//-- Локализация
	|
	|	) КАК ВложенныйЗапрос
	|";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат Отказ;
	КонецЕсли;

	Если СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС(Выборка) Тогда
		ТекстОшибки = НСтр("ru='Ввод одного документа Списание безналичных ДС на основании выделенных распоряжений невозможен';uk='Введення одного документа Списання безготівкових ГК на підставі виділених розпоряджень неможливе'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;

	Возврат Не Отказ;
	
КонецФункции // СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам()

// Процедура выполняет пересчет сумм документа в новую валюту.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	ТекущаяВалюта - СправочникСсылка.Валюты - Текущая валюта
//	НоваяВалюта - СправочникСсылка.Валюты - Новая валюта.
//
Процедура ПересчетСуммДокументаВВалюту(Объект, ТекущаяВалюта, НоваяВалюта) Экспорт
	
	КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		ТекущаяВалюта,
		НоваяВалюта,
		Объект.Дата);
	
	// Пересчитаем сумму документа в новую валюту.
	Объект.СуммаДокумента = Окр(КоэффициентПересчета * Объект.СуммаДокумента, 2, 1);
	
	МассивТабличныйЧастей = Новый Массив;
	МассивТабличныйЧастей.Добавить("РасшифровкаПлатежа");
	МассивТабличныйЧастей.Добавить("ДебиторскаяЗадолженность");
	МассивТабличныйЧастей.Добавить("КредиторскаяЗадолженность");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныйЧастей Цикл
		Если Объект.Свойство(ТабличнаяЧасть) Тогда
			
			ИтогСумма = Объект[ТабличнаяЧасть].Итог("Сумма");
			СуммаДокумента = Окр(КоэффициентПересчета * ИтогСумма, 2, 1);
			
			// Пересчитаем суммы в табличной части документа.
			Если ИтогСумма <> 0 Тогда
				Для Каждого СтрокаТаблицы Из Объект[ТабличнаяЧасть] Цикл
					
					Сумма = ?(ИтогСумма <> 0, Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1), 0);
					ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
					СуммаДокумента = СуммаДокумента - Сумма;
					СтрокаТаблицы.Сумма = Сумма;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//    ТекущийДоговор - СправочникСсылка.Договоры - Договор с контрагентом
//    Партнер - СправочникСсылка.Партнеры - Партнер
//    Контрагент - СправочникСсылка.Контрагенты - Контрагент
//    Организация - СправочникСсылка.Организации - Организация
//    ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция.
//
// Возвращаемое значение:
//   СправочникСсылка.Договоры - договор по умолчанию, являющийся объектом расчетов.
//
Функция ДоговорПоУмолчанию(
	ТекущийДоговор,
	Партнер,
	Контрагент,
	Организация,
	ХозяйственныеОперации
	) Экспорт
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Партнер, СписокПартнеров);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	И ДоговорыКонтрагентов.Ссылка = &ТекущийДоговор
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|
	|");
	Запрос.УстановитьПараметр("ТекущийДоговор", ТекущийДоговор);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ЗначениеЗаполнено(ХозяйственныеОперации));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		
		Выборка = МассивРезультатов[0].Выбрать();
		Выборка.Следующий();
		ДоговорПоУмолчанию = Выборка.Ссылка;
		
	Иначе
		Выборка = МассивРезультатов[1].Выбрать();
	
		Если Не Выборка.Следующий() Тогда
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИначеЕсли Выборка.Количество() = 1 Тогда
			ДоговорПоУмолчанию = Выборка.Ссылка;
		Иначе
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Формирует текст запроса для получения указанного реквизита объекта расчетов
//
// Параметры:
//    ИмяДокумента - Строка - Имя документа
//    ТаблицаИсточник - Строка - Таблица источник данных
//    ИмяОбъектаРасчетов - Строка - Имя объекта расчетов
//    ИмяРеквизитаОбъектаРасчетов - Строка - Имя реквизита объекта расчетов.
//
// Возвращаемое значение:
//    Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитаОбъектаРасчетов(ИмяДокумента, ТаблицаИсточник, ИмяОбъектаРасчетов, ИмяРеквизитаОбъектаРасчетов) Экспорт
	
	Возврат ДенежныеСредстваПовтИсп.ТекстЗапросаРеквизитаОбъектаРасчетов(
				ТаблицаИсточник+"."+ИмяОбъектаРасчетов,
				ИмяРеквизитаОбъектаРасчетов,
				"Документы."+ИмяДокумента+".ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты."+ИмяОбъектаРасчетов);
	
КонецФункции

// Возвращает параметры вызова функции ПолучитьБанковскийСчетОрганизацииПоУмолчанию
//	
// Возвращаемое значение
//    Структура - Структура параметров для определения счета
// 		* Организация    		  - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// 		* ФормаОплаты    		  - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// 									получения банковского счета
// 		* БанковскийСчет 		  - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет, который нужно заполнить
//      * Валюта		 		  - СправочникСсылка.Валюты - Валюта счета
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности счета.
//
Функция ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("БанковскийСчет");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	
	Возврат Структура;
	
КонецФункции

// Возвращает параметры вызова функции ПолучитьКассуОрганизацииПоУмолчанию
//	
// Возвращаемое значение
//    Структура - Структура параметров для определения счета
// 		* Организация    		  - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// 		* ФормаОплаты    		  - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// 									получения банковского счета
// 		* Касса					  - СправочникСсылка.Кассы - Касса, которую нужно заполнить
//      * Валюта		 		  - СправочникСсылка.Валюты - Валюта счета
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности счета.
//
Функция ПараметрыЗаполненияКассыОрганизацииПоУмолчанию() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("Касса");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция проверяет наличие заказа в табличной части "Расшифровка платежа" документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект.
//
// Возвращаемое значение:
//	Булево - Истина - заказ указан в строке табличной части.
//
Функция УказанЗаказВРасшифровкеПлатежа(Объект)
	
	ЗаказУказан = Ложь;
	Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
			ЗаказУказан = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗаказУказан;
	
КонецФункции // УказанЗаказВРасшифровкеПлатежа()

// Процедура устанавливает параметры выбора для контрагента, если не включено раздельное ведение партнеров и контрагентов.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	Элемент - ПолеФормы - Поле для ввода контрагента.
//
Процедура УстановитьПараметрыВыбораКонтрагента(Объект, Элемент) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура формирует текст назначения платежа для документа оплаты
//
// Параметры:
//    Объект - ДокументСсылка - Документ оплаты.
//	  Действие - Строка - Идентификатор варианта заполнения.
//
Процедура ЗаполнитьТекстНазначенияПлатежа(Объект, Действие) Экспорт
	
	ТекстНазначение = "";
	
	Если Действие = "СписокДокументов" Тогда
		
		ТекстНазначение = НазначениеПлатежа(Объект);
		
	ИначеЕсли Действие = "НДС20" Тогда
		
		СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.2) * 0.2, 2);
		ТекстНазначение = "ПДВ (20%) " + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=");
			
    ИначеЕсли Действие = "НДС14" Тогда
    	
    		СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.14) * 0.14, 2);
    		ТекстНазначенияПлатежа = "ПДВ (14%) " + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=");
			
	ИначеЕсли Действие = "НДС7" Тогда
		
		СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.07) * 0.07, 2);
		ТекстНазначение = "ПДВ (7%) " + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=");
		
	ИначеЕсли Действие = "НДС0" Тогда
			
		ТекстНазначение = "ПДВ (0%) 0,00 ";
		
	ИначеЕсли Действие = "БезНДС" Тогда
			
		ТекстНазначение = "ПДВ (звільнення від ПДВ) 0,00 ";
			
	ИначеЕсли Действие = "НеНДС" Тогда
		
		ТекстНазначение = "ПДВ (звільнення від ПДВ) 0,00 ";
		
	ИначеЕсли Действие = "ИзСчетаПолучателя" Тогда
						
		ТекстНазначение = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента).ТекстНазначения;
	КонецЕсли;
	

	Объект.НазначениеПлатежа = ТекстНазначение;
	
КонецПроцедуры

// Получает статью ДДС для объекта расчетов
//
// Параметры:
//    ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - операция для подбора статьи ДДС по умолчанию.
//
Функция СтатьяДвиженияДенежныхСредствОбъектаРасчетов(ОбъектРасчетов, ХозяйственнаяОперация) Экспорт
	
	СтатьяДвиженияДенежныхСредств = Неопределено;
	
	ВыбираемыеПоля = Новый Массив;
	Объект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов, "Объект");
	
	Если ЗначениеЗаполнено(Объект) Тогда
	
		ДоступныеРеквизиты = Объект.Метаданные().Реквизиты;
		Если ДоступныеРеквизиты.Найти("Соглашение") <> Неопределено Тогда
			ВыбираемыеПоля.Добавить("Соглашение.СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Если ДоступныеРеквизиты.Найти("Договор") <> Неопределено Тогда
				ВыбираемыеПоля.Добавить("Договор.СтатьяДвиженияДенежныхСредствПолучателя");
			КонецЕсли;
			Если ДоступныеРеквизиты.Найти("СтатьяДвиженияДенежныхСредствПолучателя") <> Неопределено Тогда
				ВыбираемыеПоля.Добавить("СтатьяДвиженияДенежныхСредствПолучателя");
			КонецЕсли;
		Иначе
			Если ДоступныеРеквизиты.Найти("Договор") <> Неопределено Тогда
				ВыбираемыеПоля.Добавить("Договор.СтатьяДвиженияДенежныхСредств");
			КонецЕсли;
			Если ДоступныеРеквизиты.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
				ВыбираемыеПоля.Добавить("СтатьяДвиженияДенежныхСредств");
			КонецЕсли;
		КонецЕсли;
		
		Если ВыбираемыеПоля.Количество() Тогда
			УстановитьПривилегированныйРежим(Истина);
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ВыбираемыеПоля);
			УстановитьПривилегированныйРежим(Ложь);
			Если ЗначенияРеквизитов.Свойство("СоглашениеСтатьяДвиженияДенежныхСредств")
				И ЗначениеЗаполнено(ЗначенияРеквизитов.СоглашениеСтатьяДвиженияДенежныхСредств) Тогда
				СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.СоглашениеСтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			Если ЗначенияРеквизитов.Свойство("ДоговорСтатьяДвиженияДенежныхСредств")
				И ЗначениеЗаполнено(ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредств) Тогда
				СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			Если ЗначенияРеквизитов.Свойство("ДоговорСтатьяДвиженияДенежныхСредствПолучателя")
				И ЗначениеЗаполнено(ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредствПолучателя) Тогда
				СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредствПолучателя;
			КонецЕсли;
			Если ЗначенияРеквизитов.Свойство("СтатьяДвиженияДенежныхСредств")
				И ЗначениеЗаполнено(ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредств) Тогда
				СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			Если ЗначенияРеквизитов.Свойство("СтатьяДвиженияДенежныхСредствПолучателя")
				И ЗначениеЗаполнено(ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредствПолучателя) Тогда
				СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредствПолучателя;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) И ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Возврат СтатьяДвиженияДенежныхСредств;
	
КонецФункции

// Возвращает строку с перечислением документов из расшифровки платежа.
//
// Параметры: Объект - ДокументСсылка - Документ, содержащий расшифровку платежа.
//
// Возвращаемое значение: Строка.
//
Функция НазначениеПлатежа(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить(, "ОбъектРасчетов, Сумма, СтавкаНДС, СуммаНДС");
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	ТаблицаДокументов.Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	Для Сч = 1 По РасшифровкаПлатежа.Количество() Цикл
		ТаблицаДокументов.Добавить();
	КонецЦикла;
	ТаблицаДокументов.ЗагрузитьКолонку(РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), "ОбъектРасчетов");
	ТаблицаДокументов.ЗагрузитьКолонку(РасшифровкаПлатежа.ВыгрузитьКолонку("Сумма"), "Сумма");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.ОбъектРасчетов                КАК ОбъектРасчетов,
	|	ИсходнаяТаблица.Сумма                         КАК Сумма
	|
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ТаблицаДокументов КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов
	|;
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.ОбъектРасчетов.Объект         КАК Документ,
	|	ИсходнаяТаблица.Сумма                         КАК Сумма
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерПоДаннымПоставщика       КАК Номер,
	|	ДанныеДокумента.ДатаПоДаннымПоставщика        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	//++ Локализация
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерГТД.Код                  КАК Номер,
	|	НЕОПРЕДЕЛЕНО                                  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер
	|	
	//-- Локализация
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерПоДаннымПартнера         КАК Номер,
	|	ДанныеДокумента.ДатаПоДаннымПартнера          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетПереработчика КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	//-- НЕ УТ
	|	
	|");
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаКРаспределению = Объект.РасшифровкаПлатежа.Итог("Сумма");
	ТекстНазначенияПлатежа = "";
	ПредставленияДокументов = ПолучитьПредставленияДокументов();
	
	РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Валюта, "Код, Наименование");
	ВалютаДляПечати = СокрЛП(РеквизитыВалюты.Наименование);
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", "
			+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Документ, "НаименованиеДляПечати")
			+ " " + Формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=")
			+ " " + ВалютаДляПечати;
		Иначе
			ВидДокумента = "";
			ВыборкаДокумент = Выборка.Документ; // ДокументСсылка
			ПредставленияДокументов.Свойство(ВыборкаДокумент.Метаданные().Имя, ВидДокумента);
			Если ЗначениеЗаполнено(ВидДокумента) Тогда
				ПредставлениеДляПечати = НСтр("ru='%Вид% №%Номер% от %Дата% %Сумма% %Валюта%';uk='%Вид% №%Номер% від %Дата% %Сумма% %Валюта%'");
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Вид%", ВидДокумента);
				Если Выборка.НомерВходящегоДокумента Тогда
					ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Номер%", СокрЛП(Выборка.Номер));
				Иначе
					ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Номер%",
						ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Ложь, Истина));
				КонецЕсли;
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Дата%", Формат(Выборка.Дата, "ДЛФ=D"));
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Сумма%",
					Формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ="));
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Валюта%", ВалютаДляПечати);
				ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", " + ПредставлениеДляПечати;
			КонецЕсли;
		КонецЕсли;
		СуммаКРаспределению = СуммаКРаспределению - Выборка.Сумма;
	КонецЦикла;
	
	Если СуммаКРаспределению > 0 Тогда
		ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", "
			+ "без вказання призначення"
			+ " " + Формат(СуммаКРаспределению, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=")
			+ " " + ВалютаДляПечати;
	КонецЕсли;
	Если СуммаКРаспределению <= 0 Тогда
		ТекстНазначенияПлатежа = НСтр("ru='Оплата по';uk='Оплата по'") + Сред(ТекстНазначенияПлатежа, 2);
	Иначе
		ТекстНазначенияПлатежа = НСтр("ru='Оплата';uk='Оплата'") + Сред(ТекстНазначенияПлатежа, 2);
	КонецЕсли;
	
	Если Прав(ТекстНазначенияПлатежа, 1) <> "." Тогда
		ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ".";
	КонецЕсли;
	ДлинаТекстаДокументов = СтрДлина(ТекстНазначенияПлатежа);
	
	ТекстСуммаНДС = ТекстСуммаНДСПлатежа(
		Объект.Валюта,
		РасшифровкаПлатежа,
		Истина);
	ДлинаТекстаНДС = СтрДлина(ТекстСуммаНДС);
	
	Если ДлинаТекстаДокументов + ДлинаТекстаНДС > 210 Тогда
		ДлинаТекстаДокументов = 207 - ДлинаТекстаНДС;
		ТекстНазначенияПлатежа = Лев(ТекстНазначенияПлатежа, ДлинаТекстаДокументов);
		ТекстПоискаПоследнегоДокумента = ТекстНазначенияПлатежа;
		ПозицияПоследнейЗапятой = 0;
		ПозицияЗапятой = СтрНайти(ТекстПоискаПоследнегоДокумента, ",");
		Пока НЕ ПозицияЗапятой = 0 Цикл
			ПозицияПоследнейЗапятой = ПозицияПоследнейЗапятой + ПозицияЗапятой;
			ТекстПоискаПоследнегоДокумента = Сред(ТекстПоискаПоследнегоДокумента, ПозицияЗапятой + 1);
			ПозицияЗапятой = СтрНайти(ТекстПоискаПоследнегоДокумента, ",");
		КонецЦикла;
		ТекстНазначенияПлатежа = Лев(ТекстНазначенияПлатежа, ПозицияПоследнейЗапятой - 1) + "...";
	КонецЕсли;
	ТекстНазначенияПлатежа = СокрЛП(ТекстНазначенияПлатежа) + Символы.ПС + СокрЛП(ТекстСуммаНДС);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТекстНазначенияПлатежа;
	
КонецФункции

Процедура ЗаписатьДатуВыгрузкиПлатежей(Платежи, Блокировать = Истина, Перезаписывать = Истина) Экспорт
	
	Для каждого Платеж Из Платежи Цикл
		
		Если Не (ТипЗнч(Платеж) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			Или ТипЗнч(Платеж) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаВыгрузкиДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Платеж, "ДатаВыгрузки");
		
		Если Не Перезаписывать И ЗначениеЗаполнено(ДатаВыгрузкиДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса());
		
		Если ДатаВыгрузкиДокумента = ТекущаяДатаСеанса Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Платеж.ПолучитьОбъект();
		
		Если Блокировать Тогда
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось записать дату выгрузки в банк документа: %1';uk='Не вдалося записати дату вивантаження в банк документа: %1'"), ДокументОбъект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		ДокументОбъект.ДатаВыгрузки = ТекущаяДатаСеанса;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Выполняет переоценку денежных средств у подотчетного лица
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация в которой необходимо переоценить денежные средства
//  Дата - Дата - на которую необходимо выполнить переоценку
//  ПодотчетноеЛицу - СправочникСсылка.ФизическиеЛица - подотчетное лицо.
//
Процедура ПереоценитьДенежныеСредстваУПодотчетныхЛиц(Организация, Дата, ПодотчетноеЛицо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Документы.РасчетКурсовыхРазниц.ПереоценитьДенежныеСредстваУПодотчетныхЛиц(Организация, Дата, ПодотчетноеЛицо);
	
КонецПроцедуры

Функция ИнициализироватьПараметрыКонвертации() Экспорт
	
	ПараметрыКонвертации = Новый Структура;
	ПараметрыКонвертации.Вставить("Валюта");
	ПараметрыКонвертации.Вставить("ВалютаКонвертации");
	ПараметрыКонвертации.Вставить("ВалютаРеглУчета");
	ПараметрыКонвертации.Вставить("СуммаДокумента");
	ПараметрыКонвертации.Вставить("СуммаКонвертации");
	ПараметрыКонвертации.Вставить("КурсКонвертации");
	ПараметрыКонвертации.Вставить("КратностьКурсаКонвертации");
	ПараметрыКонвертации.Вставить("Дата");
	
	Возврат ПараметрыКонвертации;
	
КонецФункции

Процедура РассчитатьПараметрыКонвертации(ПараметрыКонвертации, РеквизитИзменение) Экспорт
	
	Если РеквизитИзменение = "ВалютаКонвертации" Тогда
	
		Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
			
			КурсВалютыКонвертации = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыКонвертации.ВалютаКонвертации, ПараметрыКонвертации.Дата);
			ПараметрыКонвертации.КурсКонвертации = КурсВалютыКонвертации.Курс;
			ПараметрыКонвертации.КратностьКурсаКонвертации = КурсВалютыКонвертации.Кратность;
			ПараметрыКонвертации.СуммаКонвертации = ?(ПараметрыКонвертации.КратностьКурсаКонвертации <> 0,
				ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.КурсКонвертации, 0);
			
		Иначе
			Если ПараметрыКонвертации.ВалютаКонвертации = ПараметрыКонвертации.ВалютаРеглУчета Тогда
				КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыКонвертации.Валюта, ПараметрыКонвертации.Дата);
				ПараметрыКонвертации.КурсКонвертации = КурсВалюты.Курс;
				ПараметрыКонвертации.КратностьКурсаКонвертации = КурсВалюты.Кратность;
			Иначе
				Если ЗначениеЗаполнено(ПараметрыКонвертации.Валюта) И ЗначениеЗаполнено(ПараметрыКонвертации.ВалютаКонвертации) Тогда
					КроссКурс = РаботаСКурсамиВалютУТ.ПолучитьКроссКурсВалют(
						РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыКонвертации.Валюта, ПараметрыКонвертации.Дата),
						РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыКонвертации.ВалютаКонвертации, ПараметрыКонвертации.Дата));
				Иначе
					КроссКурс = Новый Структура("Курс, Кратность", 0, 0);
				КонецЕсли;
				
				ПараметрыКонвертации.КурсКонвертации = КроссКурс.Курс;
				ПараметрыКонвертации.КратностьКурсаКонвертации = КроссКурс.Кратность;
			КонецЕсли;
			
			ПараметрыКонвертации.СуммаКонвертации = ?(ПараметрыКонвертации.КратностьКурсаКонвертации <> 0,
				ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КурсКонвертации / ПараметрыКонвертации.КратностьКурсаКонвертации, 0);
			КонецЕсли;
			
	ИначеЕсли РеквизитИзменение = "КурсКонвертации" Тогда
		
		Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
			Если ПараметрыКонвертации.КурсКонвертации <> 0 Тогда
				ПараметрыКонвертации.СуммаКонвертации =
					ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.КурсКонвертации;
			Иначе
				ПараметрыКонвертации.СуммаКонвертации = 0;
			КонецЕсли;
		Иначе
			Если ПараметрыКонвертации.КратностьКурсаКонвертации <> 0 Тогда
				ПараметрыКонвертации.СуммаКонвертации =
					ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КурсКонвертации / ПараметрыКонвертации.КратностьКурсаКонвертации;
			Иначе
				ПараметрыКонвертации.СуммаКонвертации = 0;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли РеквизитИзменение = "СуммаКонвертации" Тогда
		
		Если ПараметрыКонвертации.СуммаДокумента = 0 Тогда
			Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
				Если ПараметрыКонвертации.КратностьКурсаКонвертации <> 0 Тогда
					ПараметрыКонвертации.СуммаДокумента =
						ПараметрыКонвертации.СуммаКонвертации * ПараметрыКонвертации.КурсКонвертации / ПараметрыКонвертации.КратностьКурсаКонвертации;
				КонецЕсли;
			Иначе
				Если ПараметрыКонвертации.КурсКонвертации <> 0 Тогда
					ПараметрыКонвертации.СуммаДокумента =
						ПараметрыКонвертации.СуммаКонвертации * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.КурсКонвертации;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
				Если ПараметрыКонвертации.СуммаКонвертации <> 0 Тогда
					ПараметрыКонвертации.КурсКонвертации =
						ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.СуммаКонвертации;
				Иначе
					ПараметрыКонвертации.КурсКонвертации = 0;
				КонецЕсли;
			Иначе
				Если ПараметрыКонвертации.СуммаДокумента <> 0 Тогда
					ПараметрыКонвертации.КурсКонвертации =
						ПараметрыКонвертации.СуммаКонвертации * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.СуммаДокумента;
				Иначе
					ПараметрыКонвертации.КурсКонвертации = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовокСуммыКонвертации(ПараметрыКонвертации) Экспорт
	
	Если ПараметрыКонвертации.КратностьКурсаКонвертации > 1 Тогда
		ШаблонКурса = "%1 за %2 %3";
		Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
			КратностьКурсаКонвертацииТекстом = СтрШаблон(
				ШаблонКурса, ПараметрыКонвертации.Валюта, ПараметрыКонвертации.КратностьКурсаКонвертации, ПараметрыКонвертации.ВалютаКонвертации);
		Иначе
			КратностьКурсаКонвертацииТекстом = СтрШаблон(
				ШаблонКурса, ПараметрыКонвертации.ВалютаКонвертации, ПараметрыКонвертации.КратностьКурсаКонвертации, ПараметрыКонвертации.Валюта);
		КонецЕсли;
		Возврат КратностьКурсаКонвертацииТекстом;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает перечень документов с их синонимами для назначения платежа
//
// Возвращаемое значение: Структура, в ключах которой - имена документов, в значениях - синонимы.
//
Функция ПолучитьПредставленияДокументов()

	ВидыДокументовКонтрагента = Новый Структура;
	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента",                         НСтр("ru='заказу';uk='замовлення'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику",                      НСтр("ru='заказу';uk='замовлення'"));
	ВидыДокументовКонтрагента.Вставить("ЗаявкаНаВозвратТоваровОтКлиента",      НСтр("ru='заявке на возврат товаров';uk='заявки на повернення товарів'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",                    НСтр("ru='отчету комитенту';uk='звіту комітенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",                       НСтр("ru='отчету комитенту';uk='звіту комітенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",              НСтр("ru='отчету комитенту';uk='звіту комітенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",    НСтр("ru='отчету комитенту';uk='звіту комітенту'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",    НСтр("ru='накладной';uk='накладної'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",             НСтр("ru='накладной';uk='накладної'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеУслугПрочихАктивов",       НСтр("ru='акту';uk='акту'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг",               НСтр("ru='накладной';uk='накладної'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт",           НСтр("ru='декларации на товары';uk='декларації на товари'"));
	//++ НЕ УТ
	ВидыДокументовКонтрагента.Вставить("ОтчетПереработчика",                   НСтр("ru='отчету переработчика';uk='звіту переробника'"));
	//-- НЕ УТ

	Возврат ВидыДокументовКонтрагента;
	
КонецФункции // ПолучитьПредставленияДокументов()

// Выводит сообщения об ошибках при вводе списания безналичных ДС на основании
// нескольких документов.
//
// Параметры
//  Выборка  - Выборка из результата запроса.
//
// Возвращаемое значение:
//   Булево   - Истина, если отказ от ввода на основании.
//
Функция СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС(Выборка)

	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru='У выделенных документов отличается %ПредставлениеПоля%';uk='У виділених документів відрізняється %ПредставлениеПоля%'");
	
	Если Выборка.ЕстьОтличияКонтрагент Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='поле ""Контрагент""';uk='поле ""Контрагент""'")),,,, Отказ);
	КонецЕсли;

	Если Выборка.ЕстьОтличияОрганизация Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='поле ""Организация""';uk='поле ""Організація""'")),,,, Отказ);
	КонецЕсли;
	
	Если Выборка.ЕстьОтличияТип Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='тип документов';uk='тип документів'")),,,, Отказ);
	КонецЕсли;
	
	Возврат Отказ;


КонецФункции

Функция РазложитьСтрокуНазначенияВМассивСлов(Знач Строка)
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Строка);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		ОчСимвол = Сред(Строка, Позиция, 1);
		Если ОчСимвол = " " Тогда
			Если Позиция <> НачалоСлова И Позиция - НачалоСлова > 2 Тогда
				Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова И Позиция - НачалоСлова > 2 Тогда
		Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

Функция ОпределитьТипСоздаваемогоДокумента(ДанныеОплаты)

	ТипДокумента = Неопределено;

	Если ДанныеОплаты.ПоступлениеСписание = Перечисления.ТипыДвиженияДенежныхСредств.Списание Тогда
		Если ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ТипДокумента = "СписаниеБезналичныхДенежныхСредств";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ТипДокумента = "РасходныйКассовыйОрдер";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			ТипДокумента = "ОперацияПоПлатежнойКарте";
		КонецЕсли;
	ИначеЕсли ДанныеОплаты.ПоступлениеСписание = Перечисления.ТипыДвиженияДенежныхСредств.Поступление Тогда
		Если ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ТипДокумента = "ПоступлениеБезналичныхДенежныхСредств";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ТипДокумента = "ПриходныйКассовыйОрдер";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			ТипДокумента = "ОперацияПоПлатежнойКарте";
		КонецЕсли;
	КонецЕсли;

	Возврат ТипДокумента;

КонецФункции

Функция ИнициализироватьЗависимостиПолейФормы()
	
	ЗависимостьПолейФормы = Новый ТаблицаЗначений;
	ЗависимостьПолейФормы.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ЗависимостьПолейФормы.Колонки.Добавить("ЗависимыеПоля", Новый ОписаниеТипов("Массив"));
	
	Возврат ЗависимостьПолейФормы;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПоОтбору(Отбор, Реквизиты)
	
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Реквизиты.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) = Неопределено Тогда
				Реквизиты.Добавить(Строка(ЭлементОтбора.ЛевоеЗначение));
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаполнитьРеквизитыПоОтбору(ЭлементОтбора, Реквизиты);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция возвращает нераспределенный по объектам расчетов остаток платежа платежного документа.
//
// Параметры:
//	Объект - ФормаКлиентскогоПриложения, ДокументОбъект - Форма или документ по которому нужно рассчитать остаток.
//
// Возвращаемое значение:
//	Число - Сумма нераспределенного платежа.
//
Функция НераспределенныйОстатокПлатежа(Объект, Ссылка = Неопределено) Экспорт
	
	Если Ссылка = Неопределено Тогда
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	ОперацииВзаиморасчетов = Новый Массив;
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	
	Если ОперацииВзаиморасчетов.Найти(Объект.ХозяйственнаяОперация) = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	ДополнительныйКритерий = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
	ДополнительныйКритерий.Вставить("ТолькоОстатки",Ложь);
	
	ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Ссылка,,,ДополнительныйКритерий);
	СуммаНеРаспределено = 0;
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) ИЛИ СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов Тогда
			СуммаНеРаспределено = СуммаНеРаспределено + СтрокаРасшифровки.Сумма;
		КонецЕсли;
	КонецЦикла;
	Возврат СуммаНеРаспределено;
	
КонецФункции

// Процедура формирует надпись гиперссылки нераспределенного платежа. 
// Форма должна содержать элемент типа Декорация - Надпись "ГиперссылкаРеквизитыОбъектаРасчетов".
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения - Форма инициатор заполнения.
//	Объект					- ДанныеФормыСтруктура - Объект формы.
//	ПроверятьРасхождения	- Булево - Нужно ли проверять расхождения договоров расшифровки по ключевым реквизитам.
//								Если проверять расхождения нужно форма должна содержать элемент типа Декорация - Картинка "ДекорацияЕстьРасхождения".
//
Процедура СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов(Форма, Объект, ПроверятьРасхождения = Ложь) Экспорт
	
	ЭлементФормы = Форма.Элементы.ГиперссылкаРеквизитыОбъектаРасчетов; // ПолеФормы
	
	СуммаНеРаспределено = НераспределенныйОстатокПлатежа(Объект);
	
	Если СуммаНеРаспределено = 0 Тогда
		
		Операция = Объект.ХозяйственнаяОперация;
		ЭтоОперацияВозвратаДС = (Операция = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации
			Или Операция = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
			Или Операция = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
			Или Операция = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		
		Если НЕ ЭтоОперацияВозвратаДС Тогда
			ЭлементФормы.Доступность = Ложь;
			Если ПроверятьРасхождения Тогда
				Форма.Элементы.ДекорацияЕстьРасхождения.Видимость = Ложь;
			КонецЕсли;
			
			ЭлементФормы.Заголовок = НСтр("ru='Платеж распределен';uk='Платіж розподілений'");
			
		Иначе
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.Заголовок = НСтр("ru='Аналитика возврата';uk='Аналітика повернення'");
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы, "ДекорацияЕстьРасхождения", "Видимость", Ложь);
		КонецЕсли;
		
	Иначе
		
		ЭлементФормы.Доступность = Истина;
		ЭлементФормы.Заголовок =
			СтрШаблон(НСтр("ru='Нераспределенный остаток: %1 %2';uk='Нерозподілений залишок: %1 %2'"), СуммаНеРаспределено, Объект.Валюта);
			
		Если ПроверятьРасхождения Тогда
			
			СтруктураРеквизитов = Новый Структура();
			СтруктураРеквизитов.Вставить("ГруппаФинансовогоУчета",  Объект.ГруппаФинансовогоУчета);
			СтруктураРеквизитов.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
			СтруктураРеквизитов.Вставить("Договор",                 Объект.Договор);
			СтруктураРеквизитов.Вставить("Подразделение",           Объект.Подразделение);
			СтруктураРеквизитов.Вставить("ДокументСсылка",          Объект["Ссылка"]);
			
			РеквизитыНераспределенногоПлатежа = РеквизитыНераспределенногоПлатежа(Объект.РасшифровкаПлатежа, СтруктураРеквизитов);
			Если РеквизитыНераспределенногоПлатежа.Количество() > 1 Тогда
				Форма.Элементы.ДекорацияЕстьРасхождения.Видимость = Истина;
			Иначе
				Форма.Элементы.ДекорацияЕстьРасхождения.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Функция возвращает таблицу реквизитов договоров с расчетами не по договорам и самого документа платежа.
//
// Параметры:
//	РасшифровкаПлатежа - ТаблицаЗначений - Расшифровка платежа документа.
//	СтруктураРеквизитов - Структура - Структура реквизитов объекта расчетов-платежа.
//		* ГруппаФинансовогоУчета 	- СправочникСсылка.ГруппыФинансовогоУчета 	- ГФУ платежка.
//		* Подразделение 			- СправочникСсылка.Подразделения 			- Подразделение платежа.
//		* НаправлениеДеятельности	- СправочникСсылка.НаправленияДеятельности	- Направление деятельности платежа.
//		* Договор 					- СправочникСсылка.ДоговорыКонтрагентов,СправочникСсылка.ДоговорыМеждуОрганизациями - Договор платежа.
//		* ДокументСсылка			- ДокументСсылка - Ссылка на документ платежа.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица реквизитов договоров из табличной части.
//		* ГруппаФинансовогоУчета 	- СправочникСсылка.ГруппыФинансовогоУчета 	- ГФУ договора/платежки.
//		* Подразделение 			- СправочникСсылка.Подразделения 			- Подразделение договора/платежки.
//		* НаправлениеДеятельности	- СправочникСсылка.НаправленияДеятельности	- Направление деятельности договора/платежки.
//		* Договор 					- СправочникСсылка.ДоговорыКонтрагентов,СправочникСсылка.ДоговорыМеждуОрганизациями - Договоры расшифровки и платежки.
//
Функция РеквизитыНераспределенногоПлатежа(ЗНАЧ РасшифровкаПлатежа, ЗНАЧ СтруктураРеквизитов) Экспорт
	
	МассивДоговоров    = Новый Массив;
	ЕстьПустоеЗначение = Ложь;
	ДополнительныйКритерий = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
	ДополнительныйКритерий.Вставить("ТолькоОстатки",Ложь);
	ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(СтруктураРеквизитов.ДокументСсылка,,,ДополнительныйКритерий);
	
	Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
		Если (НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) ИЛИ СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов) Тогда
			Если ЗначениеЗаполнено(СтрокаРасшифровки.ОснованиеПлатежа) Тогда
				Если МассивДоговоров.Найти(СтрокаРасшифровки.ОснованиеПлатежа) = Неопределено Тогда
					МассивДоговоров.Добавить(СтрокаРасшифровки.ОснованиеПлатежа);
				КонецЕсли;
			Иначе
				ЕстьПустоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВсеДоговоры.ГруппаФинансовогоУчета  КАК ГруппаФинансовогоУчета,
	|	ВсеДоговоры.Подразделение           КАК Подразделение,
	|	ВсеДоговоры.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВсеДоговоры.Ссылка                  КАК Договор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДоговорыКонтрагентов.ГруппаФинансовогоУчета  КАК ГруппаФинансовогоУчета,
	|		ДоговорыКонтрагентов.Подразделение           КАК Подразделение,
	|		ДоговорыКонтрагентов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ДоговорыКонтрагентов.Ссылка                  КАК Ссылка
	|	ИЗ
	|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|	ГДЕ
	|		ДоговорыКонтрагентов.Ссылка В(&СписокДоговоров)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДоговорыМеждуОрганизациями.ГруппаФинансовогоУчета,
	|		ДоговорыМеждуОрганизациями.Подразделение,
	|		ДоговорыМеждуОрганизациями.НаправлениеДеятельности,
	|		ДоговорыМеждуОрганизациями.Ссылка
	|	ИЗ
	|		Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|	ГДЕ
	|		ДоговорыМеждуОрганизациями.Ссылка В(&СписокДоговоров)) КАК ВсеДоговоры";
	Запрос.УстановитьПараметр("СписокДоговоров", МассивДоговоров);
	РеквизитыНераспределенногоПлатежа = Запрос.Выполнить().Выгрузить();
	Если ЕстьПустоеЗначение Тогда
		НовСтр = РеквизитыНераспределенногоПлатежа.Добавить();
		НовСтр.Договор                 = СтруктураРеквизитов.Договор;
		НовСтр.ГруппаФинансовогоУчета  = СтруктураРеквизитов.ГруппаФинансовогоУчета;
		НовСтр.Подразделение           = СтруктураРеквизитов.Подразделение;
		НовСтр.НаправлениеДеятельности = СтруктураРеквизитов.НаправлениеДеятельности;
	КонецЕсли;
	РеквизитыНераспределенногоПлатежа.Свернуть("ГруппаФинансовогоУчета, Подразделение, НаправлениеДеятельности, Договор");
	Возврат РеквизитыНераспределенногоПлатежа;
КонецФункции

// Заполняет список выбора периодов
//
// Параметры:
//     Форма - ФормаКлиентскогоПриложения - Форма.
//     Дата - Дата - Дата отчета.
//
Процедура ЗаполнитьСписокВыбораПериодовАвансовогоОтчета(Форма, Дата) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СписокВыбораПериода = Элементы.ПериодАвансовогоОтчета.СписокВыбора;
	СписокВыбораПериода.Очистить();
	СписокВыбораПериода.Добавить(НСтр("ru='Через неделю';uk='Через тиждень'"),     НСтр("ru='Через неделю';uk='Через тиждень'"));
	СписокВыбораПериода.Добавить(НСтр("ru='Через две недели';uk='Через два тижні'"), НСтр("ru='Через две недели';uk='Через два тижні'"));
	СписокВыбораПериода.Добавить(НСтр("ru='Через месяц';uk='Через місяць'"),      НСтр("ru='Через месяц';uk='Через місяць'"));
	СписокВыбораПериода.Добавить("ДоДаты",                      НСтр("ru='До даты...';uk='До дати...'"));
	
	Если Не ЗначениеЗаполнено(Объект["Ссылка"])
		И Не ЗначениеЗаполнено(Объект.ДатаАвансовогоОтчета) Тогда
		
		Форма.ПериодАвансовогоОтчета = НСтр("ru='Через неделю';uk='Через тиждень'");
		
	Иначе
		Если Объект.ДатаАвансовогоОтчета = НачалоДня(Дата) + 7 * 24 * 3600 Тогда
			Форма.ПериодАвансовогоОтчета = НСтр("ru='Через неделю';uk='Через тиждень'");
		ИначеЕсли Объект.ДатаАвансовогоОтчета = НачалоДня(Дата) + 14 * 24 * 3600 Тогда
			Форма.ПериодАвансовогоОтчета = НСтр("ru='Через две недели';uk='Через два тижні'");
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ДобавитьМесяц(НачалоДня(Дата), 1) Тогда
			Форма.ПериодАвансовогоОтчета = НСтр("ru='Через месяц';uk='Через місяць'");
		Иначе
			Форма.ПериодАвансовогоОтчета = Объект.ДатаАвансовогоОтчета;
			
			Элементы.ПериодАвансовогоОтчета.ОграничениеТипа = Новый ОписаниеТипов("Дата");
			Элементы.ПериодАвансовогоОтчета.КнопкаВыбора = Истина;
			Элементы.ПериодАвансовогоОтчета.РедактированиеТекста = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыИФункцииДляНумерации

// Формирует числовой номер
Процедура СформироватьЧисловойНомерДокумента(СтруктураПараметров, СформированныйНомер) 

	УстановитьПривилегированныйРежим(Истина);

	ПодготовитьСтруктуруПараметров(СтруктураПараметров);

	// автоматическая нумерация
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Нумерация");
		ЭлементБлокировки.УстановитьЗначение("Нумератор", 		СтруктураПараметров.Нумератор);
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации", СтруктураПараметров.ПериодНумерации);
		ЭлементБлокировки.УстановитьЗначение("Организация", 	СтруктураПараметров.Организация);
		ЭлементБлокировки.УстановитьЗначение("БанковскийСчет", 	СтруктураПараметров.БанковскийСчет);
		ЭлементБлокировки.УстановитьЗначение("Валюта", 	        СтруктураПараметров.Валюта);
		ЭлементБлокировки.УстановитьЗначение("ОбособленноеПодразделение", 	СтруктураПараметров.ОбособленноеПодразделение);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураПараметров).ТекущийНомер;
		СформированныйНомер = ТекущийНомер + 1;
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры // СформироватьЧисловойНомерДокумента

// Формирует строковый номер
Процедура СформироватьСтроковыйНомерДокумента(СтруктураПараметров, СформированныйНомер) Экспорт

	Если СформированныйНомер = "" Тогда
		ЧисловойНомер = 0;
	Иначе
		ЧисловойНомер = Число(СформированныйНомер);
	КонецЕсли;

	СформироватьЧисловойНомерДокумента(СтруктураПараметров, ЧисловойНомер);

	СформированныйНомер = Формат(ЧисловойНомер, "ЧГ=0");

КонецПроцедуры 

// Увеличивает очередной номер (при записи документа)
Процедура ЗаписатьОчереднойНомер(СтруктураПараметров, СформированныйНомер) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ПодготовитьСтруктуруПараметров(СтруктураПараметров);

	ЧисловойНомер = Число(СформированныйНомер);

	ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураПараметров).ТекущийНомер;

	Если ЧисловойНомер > ТекущийНомер Тогда
		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Нумератор 		= СтруктураПараметров.Нумератор;
		МенеджерЗаписи.ПериодНумерации 	= СтруктураПараметров.ПериодНумерации;
		МенеджерЗаписи.Организация	 	= СтруктураПараметров.Организация;
		МенеджерЗаписи.БанковскийСчет   = СтруктураПараметров.БанковскийСчет;
		МенеджерЗаписи.Валюта	 	    = СтруктураПараметров.Валюта;
		МенеджерЗаписи.ОбособленноеПодразделение = СтруктураПараметров.ОбособленноеПодразделение;
		МенеджерЗаписи.ТекущийНомер 	= ЧисловойНомер;
		МенеджерЗаписи.Записать();
	КонецЕсли;	

КонецПроцедуры // ЗаписатьОчереднойНомер

Процедура ПодготовитьСтруктуруПараметров(СтруктураПараметров)

	Если НЕ СтруктураПараметров.Свойство("БанковскийСчет") Тогда
		СтруктураПараметров.Вставить("БанковскийСчет", Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("Валюта") Тогда
		СтруктураПараметров.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ОбособленноеПодразделение") Тогда
		СтруктураПараметров.Вставить("ОбособленноеПодразделение", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ПериодНумерации") Тогда
		ПериодНумерации = НачалоПериодаНумерации(СтруктураПараметров.Дата);
		СтруктураПараметров.Вставить("ПериодНумерации", ПериодНумерации);
		СтруктураПараметров.Удалить("Дата");
	КонецЕсли;

КонецПроцедуры

// Вычисляет начало периода нумерации
Функция НачалоПериодаНумерации(Дата) Экспорт

	ПериодНумерации = НачалоГода(Дата);
		
	Возврат ПериодНумерации;

КонецФункции // НачалоПериодаНумерации

Процедура ЗаполнитьНомерПлатежногоДокументаЕдиныйНалог(ТаблицыДляДвижений, Движения)
	
	Перем ТаблицаДляДвижений;
	
	Если НЕ ТаблицыДляДвижений.Свойство("ТаблицаКнигаДоходовРасходовПоЕдиномуНалогу", ТаблицаДляДвижений)
		ИЛИ НЕ ЗначениеЗаполнено(ТаблицыДляДвижений["ТаблицаКнигаДоходовРасходовПоЕдиномуНалогу"]) Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Движения.КнигаДоходовРасходовПоЕдиномуНалогу.Отбор.Регистратор.Значение;
	МетаданныеРегистратора = Регистратор.Метаданные();
	ТипРегистратора = МетаданныеРегистратора.Имя;
	
	ОписаниеДокумента = Новый Структура("Префикс, Номер, НомерПервичногоДокумента", "ПД");
	РеквизитыНумерации = Новый Структура("Номер");
	
	Если ТипРегистратора = "ПриходныйКассовыйОрдер" Тогда
		ОписаниеДокумента.Префикс = "ПКО";
	ИначеЕсли ТипРегистратора = "РасходныйКассовыйОрдер" Тогда
		ОписаниеДокумента.Префикс = "ВКО";
	ИначеЕсли ТипРегистратора = "ОтчетОРозничнойВыручке" 
		ИЛИ ТипРегистратора = "ОтчетОРозничныхПродажах" Тогда 
		ОписаниеДокумента.Префикс = "РП";
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерОрдера", МетаданныеРегистратора) Тогда
		РеквизитыНумерации.Вставить("НомерПервичногоДокумента", "НомерОрдера");
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", МетаданныеРегистратора) Тогда
		РеквизитыНумерации.Вставить("НомерПервичногоДокумента", "НомерВходящегоДокумента");
	КонецЕсли;
	
	ДанныеНумерации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор, РеквизитыНумерации);
	ЗаполнитьЗначенияСвойств(ОписаниеДокумента, ДанныеНумерации);
	
	НомерПД = ОписаниеДокумента.Префикс + " " 
		+ СокрЛП(?(ЗначениеЗаполнено(ОписаниеДокумента.НомерПервичногоДокумента), ОписаниеДокумента.НомерПервичногоДокумента, 
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ОписаниеДокумента.Номер, Истина, Истина)));
		
		
	Если ТаблицаДляДвижений.Колонки.Найти("НомерПлатежногоДокумента") = Неопределено Тогда
		ТаблицаДляДвижений.Колонки.Добавить("НомерПлатежногоДокумента", 
			Метаданные.РегистрыНакопления.КнигаДоходовРасходовПоЕдиномуНалогу.Реквизиты.НомерПлатежногоДокумента.Тип);  		
	КонецЕсли;
	
	Для каждого Запись Из ТаблицаДляДвижений Цикл
		Запись.НомерПлатежногоДокумента = НомерПД;	
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеИнформационнойБазы


#КонецОбласти


#КонецОбласти
