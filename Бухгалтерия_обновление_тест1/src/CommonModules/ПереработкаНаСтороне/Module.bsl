////////////////////////////////////////////////////////////////////////////////
// Подсистема "Переработка на стороне".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ИсправлениеОшибокВИсходныхДанных

Процедура ПроверкаЦеныВозвратныхОтходовВОтчетеПереработчика(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОтчетПереработчика.Организация 	КАК Организация,
	|	ОтчетПереработчика.Ссылка 		КАК Регистратор,
	|	СУММА(1) 						КАК КоличествоСтрок
	|ПОМЕСТИТЬ ОтчетыПереработчикаБезЦенВозвратныхОтходов
	|ИЗ
	|	Документ.ОтчетПереработчика.ВозвратныеОтходы КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика КАК ОтчетПереработчика
	|		ПО ТаблицаПродукции.Ссылка = ОтчетПереработчика.Ссылка
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И ОтчетПереработчика.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетПереработчика.Организация В(&МассивОрганизаций)
	|	И ОтчетПереработчика.Проведен
	|	И ТаблицаПродукции.Цена = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетПереработчика.Организация,
	|	ОтчетПереработчика.Ссылка";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация",		НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Регистратор",		НСтр("ru='Документ';uk='Документ'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("КоличествоСтрок", НСтр("ru='Количество строк с ошибками';uk='Кількість рядків з помилками'",ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ОтчетыПереработчикаБезЦенВозвратныхОтходов",
		НСтр("ru='Обнаружены незаполненные цены возвратных отходов в документах организации ""%1"" за период %2';uk='Виявлено незаповнені ціни зворотних відходів в документах організації ""%1"" за період %2'",ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		"Регистратор");
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма()).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.УслугиПереработчиковКОформлению);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам переработки на стороне.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "УслугиПереработчиковКОформлению");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПредставлениеГруппыЗатрат(Знач ПараметрыГруппыЗатрат, Знач ГруппировкаЗатрат, Знач Продукция, Знач ИмяПоляГруппаЗатрат) Экспорт
	
	ПредставлениеГруппы = "";
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
		ИЛИ ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям Тогда
		
		СтруктураПоиска = Новый Структура(ИмяПоляГруппаЗатрат, ПараметрыГруппыЗатрат[ИмяПоляГруппаЗатрат]);
		СписокСтрок = Продукция.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			Возврат "";
		КонецЕсли;
		СтрокаПродукция = СписокСтрок[0];
		Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции Тогда
			ПредставлениеГруппы = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				Строка(СтрокаПродукция.Номенклатура),
				Строка(СтрокаПродукция.Характеристика),,,
				Строка(СтрокаПродукция.Назначение));
			
		Иначе
			ПредставлениеГруппы = Строка(СтрокаПродукция.Спецификация);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеГруппы;

КонецФункции 

// Проверяет возможность закрытия заказа
//
// Параметры:
//  Объект	 - ДокументОбъект.ЗаказПереработчику - контролируемый документ.
//  Отказ	 - Булево							 - параметр Отказ.
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(Объект, Отказ) Экспорт
	
	Если Объект.Статус <> Перечисления.СтатусыЗаказовПереработчикам.Закрыт Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &Ссылка) КАК ЗаказыКлиентовОстатки
		|ГДЕ
		|	&КонтролироватьПолнуюОтработку
		|	И (ЗаказыКлиентовОстатки.ЗаказаноОстаток > 0
		|			ИЛИ ЗаказыКлиентовОстатки.КОформлениюОстаток > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки = &Ссылка) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	&КонтролироватьПолнуюОтработку
		|	И ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расчеты.Валюта КАК Валюта,
		|	-Расчеты.КОплатеОстаток КАК КОплатеОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, ОбъектРасчетов.Объект = &Ссылка) КАК Расчеты
		|ГДЕ
		|	&КонтролироватьРасчеты
		|	И Расчеты.КОплатеОстаток < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &Ссылка) КАК ЗаказыПоставщикамОстатки
		|ГДЕ
		|	&КонтролироватьПолнуюОтработку
		|	И (ЗаказыПоставщикамОстатки.ЗаказаноОстаток > 0
		|			ИЛИ ЗаказыПоставщикамОстатки.КОформлениюОстаток > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОстатки.ДокументПоступления
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления = &Ссылка) КАК ТоварыКПоступлениюОстатки
		|ГДЕ
		|	&КонтролироватьПолнуюОтработку
		|	И ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток + ТоварыКПоступлениюОстатки.ПринимаетсяОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УслугиПереработчика.СуммаКонечныйОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.УслугиПереработчиковКОформлению.ОстаткиИОбороты(, , , , ЗаказПереработчику = &Ссылка) КАК УслугиПереработчика
		|ГДЕ
		|	ЕСТЬNULL(УслугиПереработчика.СуммаКонечныйОстаток, 0) > 0
		|	И &КонтролироватьПолнуюОтработку";
		
	КонтролироватьПолнуюОтработку = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПереработчикамБезПолнойОтработки");
	КонтролироватьРасчеты = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПереработчикамБезПолнойОплаты")
								И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("КонтролироватьПолнуюОтработку", КонтролироватьПолнуюОтработку);
	Запрос.УстановитьПараметр("КонтролироватьРасчеты", КонтролироватьРасчеты);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаОтгрузка    = Результат[0].Выбрать();
	ВыборкаРасчеты     = Результат[1].Выбрать();
	ВыборкаПоступление = Результат[2].Выбрать();
	ВыборкаОтчеты      = Результат[3].Выбрать();
	
	Если ВыборкаОтгрузка.Следующий() Тогда 
		ТекстОшибки = НСтр("ru='Сырье и материалы по заказу ""%1"" отгружены не полностью.
|Закрытие заказа возможно только с полностью отгруженными/отмененными строками'
|;uk='Сировина і матеріали за замовленням ""%1"" відвантажені не повністю..
|Закриття замовлення можливо тільки з повністю відвантаженими / скасованими рядками'");
							
		ТекстОшибки = СтрШаблон(ТекстОшибки, Объект.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаПоступление.Следующий() Тогда 
		ТекстОшибки = НСтр("ru='Продукция по заказу ""%1"" поступила не полностью.
|Закрытие заказа возможно только с полностью поступившими/отмененными строками'
|;uk='Продукція за замовленням  ""%1"" надійшла не повністю. 
|Закриття замовлення можливо тільки з повністю надійшовшими/скасованими рядками'");
		
		ТекстОшибки = СтрШаблон(ТекстОшибки, Объект.Ссылка);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРасчеты.Следующий() Тогда 
		ТекстОшибки = НСтр("ru='Расчеты по заказу ""%1"" не завершены.
|Для закрытия заказа требуется оплата %2 %3
|Закрытие заказа возможно только с полностью оплаченными/отмененными строками'
|;uk='Розрахунки за замовленням ""%1"" не завершені. 
|Для закриття замовлення потрібна оплата %2 %3 
|Закриття замовлення можливо тільки з повністю оплаченими/скасованими рядками'");
		
		ТекстОшибки = СтрШаблон(ТекстОшибки, 
							Объект.Ссылка, 
							Строка(ВыборкаРасчеты.КОплатеОстаток), 
							Строка(ВыборкаРасчеты.Валюта));
							
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаОтчеты.Следующий() Тогда 
		ТекстОшибки = НСтр("ru='Не все отчеты переработчику сформированы.
|Для закрытия заказа требуется оформление отчетов на %1 %2.
|Закрытие заказа возможно только с откорректированной стоимостью услуг'
|;uk='Не всі звіти переробнику сформовані. 
|Для закриття замовлення порібно оформлення звітів на %1 %2. 
|Закриття замовлення можливо тільки з відкоригованою вартістю послуг'");
		
		ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ВыборкаОтчеты.Сумма), Строка(Объект.Валюта));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
