////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ"
// Серверные процедуры и функции обновления подсистемы регламентированного учета 
// в информационной базе при смене версии конфигурации.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = ОбновлениеИнформационнойБазыБППереопределяемый.ИмяПодсистемы();
	Описание.Версия = "1.0.21.5";
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

 	// Обработчики, выполняемые при заполнении пустой ИБ

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "0.0.0.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПервыйЗапуск";
	Обработчик.НачальноеЗаполнение = Истина; 

	// Обработчики, выполняемые при каждом обновлении ИБ
 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "1.0.14.1";
	Обработчик.Процедура    		= "Справочники.ВидыРегистровУчета.ЗаполнитьВидыРегистровУчета";
	Обработчик.НачальноеЗаполнение 	= Истина; // Надо выполнять при первом запуске
	Обработчик.ОбщиеДанные  		= Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.20.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_1_0_20_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.21.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ПерепровестиРегламентныеОперацииРИ";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.21.3";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_1_0_21_3";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.21.5";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_1_0_21_5";
	Обработчик.НачальноеЗаполнение = Ложь;

	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
// 
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
 
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ИтерацииОбновления - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
// 
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
  Знач ИтерацииОбновления, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
 
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
 
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	

КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик первого запуска.
//
Процедура ПервыйЗапуск() Экспорт
 
	ЗаполнитьПустуюИБ();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Процедура выполняет начальное заполнение информационной базы.
//
Процедура ЗаполнитьПустуюИБ() Экспорт
	
	// Вызов функций заполнения данных для пустой информационной базы

	Если НЕ ЗначениеЗаполнено(Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
		ВалютаРегламентированногоУчета = НайтиСоздатьВалюту(
			"980", 
			"UAH", 
			"Гривня",
			"гривна, гривни, гривен, ж, копейка, копейки, копеек, ж, 2", 
			"гривня, гривні, гривень, ж, копійка, копійки, копійок, ж, 2");
		Константы.ВалютаРегламентированногоУчета.Установить(ВалютаРегламентированногоУчета);
	КонецЕсли;
			
	УстановитьФорматСохраненияРегистровУчета();
	
	// Заполнение реквизита "Запретить использовать в проводках" в планах счетов
	УстановитьПараметрыСчетовБУ();
	// Заполнение кодов быстрого выбора в планах счетов
	ЗаполнениеКодовБыстрогоВыбора();

	УстановитьСуммовойУчетНаСкладах();
	УстановитьСубконтоСтатьиДвиженияДенежныхСредств();
	
	ОбновлениеИнформационнойБазыБППереопределяемый.ЗаполнитьАналитикуНаСчетах();
	ОбновлениеИнформационнойБазыБППереопределяемый.ЗаполнитьСчетаУчетаПоУмолчанию();
	
	ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии();
    	
КонецПроцедуры // ЗаполнитьПустуюИБ()

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  СправочникСсылка.Валюты - Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском, ПараметрыПрописиНаУкраинском) Экспорт

	
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		
		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;
		СправочникОбъект.ПараметрыПрописиНаУкраинском = ПараметрыПрописиНаУкраинском;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
		
		// установим курс и кратность = 1 на 1 января 1980
		РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
		
	Иначе
		
		Если Ссылка.Наименование <> Наименование Тогда
			СправочникОбъект = Ссылка.ПолучитьОбъект();
			СправочникОбъект.Наименование = Наименование;
			
			ЗаписатьСправочникОбъект(СправочникОбъект);
			Ссылка = СправочникОбъект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - СправочникОбъект.* - объект, который требуется записать.
//	Сообщать - Булево - Признак необходимости вывода сообщений.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru='Создана группа справочника ""%1"", код: ""%2"", наименование: ""%3""';uk='Створена група довідника ""%1"", код: ""%2"", назва: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru='Создан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""';uk='Створений елемент довідника ""%1"", код: ""%2"", назва: ""%3""'") ;
		КонецЕсли; 
	Иначе
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru='Обработана группа справочника ""%1"", код: ""%2"", наименование: ""%3""';uk='Оброблена група довідника ""%1"", код: ""%2"", найменування: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru='Обработан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""';uk='Оброблений елемент довідника ""%1"", код: ""%2"", найменування: ""%3""'") ;
		КонецЕсли; 
	КонецЕсли;

	Если СправочникОбъект.Метаданные().ДлинаКода > 0 Тогда
		ПолныйКод = СправочникОбъект.ПолныйКод();
	Иначе
		ПолныйКод = НСтр("ru='<без кода>';uk='<без коду>'");
	КонецЕсли; 
	СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СправочникОбъект.Метаданные().Синоним, ПолныйКод, СправочникОбъект.Наименование);

	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрСообщения, СправочникОбъект);
		КонецЕсли;

	Исключение

		ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1';uk='Не вдалося завершити дію: %1'",ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);

		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

КонецПроцедуры

// Устанавливает флаг "Запретить использовать в проводках"
// хозрасчетным счетам. 
//
Процедура УстановитьПараметрыСчетовБУ()

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется.
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();
	
	Попытка

		ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
		Пока ВыборкаСчетов.Следующий() Цикл

			СсылкаНаРодителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаСчетов.Ссылка, "Родитель");

			Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
				Продолжить;
			КонецЕсли;

			Объект = СсылкаНаРодителя.ПолучитьОбъект();
			Если Объект.ЗапретитьИспользоватьВПроводках Тогда
				Продолжить;
			КонецЕсли;

			Объект.ЗапретитьИспользоватьВПроводках = Истина;
			Объект.Записать();

		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Ошибка при установке параметров счетов бухгалтерского учета';uk='Помилка при встановленні параметрів рахунків бухгалтерського обліку'",ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Заполнение кодов быстрого выбора в планах счетов.
//
// Параметры:
//	ТолькоНезаполненные - Булево - Признак необходимости заполнения только у элементов с пустым кодом.
// 
Процедура ЗаполнениеКодовБыстрогоВыбора(ТолькоНезаполненные = Ложь) Экспорт
	
	МассивПлановСчетов = Новый Массив;
	МассивПлановСчетов.Добавить(ПланыСчетов.Хозрасчетный);
	
	Для Каждого ЭлементПланСчетов Из МассивПлановСчетов Цикл
		Попытка
			ПланСчетов = ЭлементПланСчетов.Выбрать();
			Пока ПланСчетов.Следующий() Цикл
				Объект = ПланСчетов.ПолучитьОбъект();
				
				Если ТолькоНезаполненные Тогда
					Если НЕ ЗначениеЗаполнено(Объект.КодБыстрогоВыбора) Тогда
						Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
					КонецЕсли;
				Иначе
					Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				
			КонецЦикла;
		Исключение
			ШаблонСообщения = НСтр("ru='Не удалось установить код быстрого выбора по счету
|%1'
|;uk='Не вдалося встановити код швидкого вибору за рахунком
|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ПланыСчетов.Хозрасчетный,
				Объект.Ссылка, 
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Заполнение только незаполненных.
//
Процедура ДозаполнениеКодовБыстрогоВыбора() Экспорт
	
	ЗаполнениеКодовБыстрогоВыбора(Истина);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ АНАЛИТИКИ НА СЧЕТАХ УЧЕТА

// Процедура устанавливает признак суммового учета по субконто Склады.
//
Процедура УстановитьСуммовойУчетНаСкладах()

	// Предопределенные элементы обрабатываются только в главном узле РИБ.
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Счета = Новый СписокЗначений();
	Счета.Добавить("МатериалыПереданныеВПереработку");
	Счета.Добавить("ТоварыНаКомиссии");	

	НачатьТранзакцию();

	Попытка

		Для каждого Счет Из Счета Цикл
			УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Истина);
		КонецЦикла;

		Счета = Новый СписокЗначений();
    	Счета.Добавить("ПриобретениеОсновныхСредств");
    	Счета.Добавить("ПриобретениеДругихНеоборотныхМатериальныхАктивов");
    	Счета.Добавить("ПроизводственныеЗапасы");
    	Счета.Добавить("Полуфабрикаты");
    	Счета.Добавить("ГотоваяПродукция");
    	Счета.Добавить("Товары");
    	Счета.Добавить("ТоварыПринятыеНаКомиссиюВсего");
    	Счета.Добавить("МалоценныеИБыстроизнашивающиесяПредметыНаСкладе");

		Для каждого Счет Из Счета Цикл
			УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Ложь);
		КонецЦикла;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Ошибка при установке суммового учета на складах';uk='Помилка при встановленні сумового обліку на складах'",ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры // УправлениеСуммовымУчетомНаСкладах()

// Установка субконто "Статьи движения денежных средств" на 50-55 счетах.
//
Процедура УстановитьСубконтоСтатьиДвиженияДенежныхСредств()

	// Предопределенные элементы обрабатываются только в главном узле РИБ.
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбрабатываемыеСчета = Новый Массив;
	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РозничнаяВыручкаВКассахККМ);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.НаличныеДеньгиПоОперациямРРОВИностраннойВалюте);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте);	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте);	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ДругиеСчетаВБанкеВНациональнойВалюте);	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ДругиеСчетаВБанкеВИностраннойВалюте);	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчетаВНациональнойВалюте);	

	Для Каждого Счет Из ОбрабатываемыеСчета Цикл

		Попытка
			СчетОбъект    = Счет.ПолучитьОбъект();
			Субконто      = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто");
			НетСтатьиДДС = (Субконто = Неопределено);
			ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
			Если НетСтатьиДДС И ВсегоСубконто < 3 Тогда

				НовыйВид = СчетОбъект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
				НовыйВид.Суммовой       = Истина;
				НовыйВид.Валютный       = Истина;
				НовыйВид.Количественный = Истина;
				НовыйВид.ТолькоОбороты  = Истина;

				СчетОбъект.Записать();
			КонецЕсли;
			Если НЕ НетСтатьиДДС И Субконто.ТолькоОбороты = Ложь Тогда
				Субконто.ТолькоОбороты = Истина;
				СчетОбъект.Записать();
			КонецЕсли; 
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru='Установка субконто ""Статьи движения денежных средств"" для счета %1 не выполнена';uk='Встановлення субконто ""Статті руху грошових коштів"" для рахунку %1 не виконано'",ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Счет.Код);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

// Устанавливает субконто "Номенклатура" и "Контрагент" у указанного счета.
//
Процедура УстановитьСубконтоНоменклатура(ИмяСчета, ИмяПланаСчетов, ЕстьКоличество, ЕстьКонтрагент)

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	ВидСубконто = "ВидыСубконтоХозрасчетные";

	Попытка

		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл
			Если (НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВТорговле)) И
				(НЕ (ВыборкаСчетов.Ссылка= ПланыСчетов.Хозрасчетный.ТорговаяНаценка)) И 
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи)) И				
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ДопРасходыТовары)) И 
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ДопРасходыПроизводственныеЗапасы)) И 
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ДопРасходыТовары))
				Тогда
				Счета.Добавить(ВыборкаСчетов.Ссылка);
			КонецЕсли;
		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект = Счет.Значение.ПолучитьОбъект();

			Если ЕстьКонтрагент Тогда

				Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Контрагенты, "ВидСубконто") = Неопределено Тогда

					НовыйВид = Объект.ВидыСубконто.Вставить(0);

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Контрагенты;
					НовыйВид.Суммовой    = Истина;

					Если ЕстьКоличество Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;

					Объект.Записать();

				КонецЕсли;

			КонецЕсли;

			Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Номенклатура, "ВидСубконто") = Неопределено Тогда

				НовыйВид = Объект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Номенклатура;
				НовыйВид.Суммовой    = Истина;

				Если ЕстьКоличество Тогда
					НовыйВид.Количественный = Истина;
				КонецЕсли;

				Объект.Записать();

			КонецЕсли;

		КонецЦикла;

	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'",ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

КонецПроцедуры // УстановитьСубконтоНоменклатура()

// Включает режим разделения итогов для регистров бухгалтерии и регистров накопления.
//
Процедура ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии()
	
	Для Каждого Регистр Из РегистрыНакопления Цикл
		Регистр.УстановитьРежимРазделенияИтогов(Истина);
	КонецЦикла;
	
	Для Каждого Регистр Из РегистрыБухгалтерии Цикл
		Регистр.УстановитьРежимРазделенияИтогов(Истина);
	КонецЦикла;

КонецПроцедуры //ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии

// Записывает константу "Формат сохранения регистров учета" значение по умолчанию.
//
Процедура УстановитьФорматСохраненияРегистровУчета() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ФорматСохраненияРегистровУчета.Получить()) Тогда
		Константы.ФорматСохраненияРегистровУчета.Установить(Перечисления.ФорматыСохраненияОтчетов.PDF);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенные_1_0_20_1() Экспорт
	
	КодЯзыкаЗаполнения = МультиязычностьУкр.КодЯзыкаИнформационнойБазы();
	
	ОбъектСчет = ПланыСчетов.Хозрасчетный.РасчетыСУчастниками.ПолучитьОбъект();
	ОбъектСчет.Наименование = НСтр("ru='Расчеты с участниками и средства клиентов';uk='Розрахунки з учасниками та кошти клієнтів'", КодЯзыкаЗаполнения);
	ОбъектСчет.Записать();

	ОбъектСчет = ПланыСчетов.Хозрасчетный.СредстваКлиентовЮрЛиц.ПолучитьОбъект();
	ОбъектСчет.Наименование = НСтр("ru='Средства клиентов - юридических лиц поставщиков финансовых услуг';uk='Кошти клієнтів - юридичних осіб надавачів фінансових послуг'", КодЯзыкаЗаполнения);
	ОбъектСчет.Записать();

	ОбъектСчет = ПланыСчетов.Хозрасчетный.СредстваКлиентовФизЛиц.ПолучитьОбъект();
	ОбъектСчет.Наименование = НСтр("ru='Средства клиентов - физических лиц поставщиков финансовых услуг';uk='Кошти клієнтів - фізичних осіб надавачів фінансових послуг'", КодЯзыкаЗаполнения);
	ОбъектСчет.Записать();

	ОбъектСчет = ПланыСчетов.Хозрасчетный.ОбязательстваПоЭлектроннымДеньгам.ПолучитьОбъект();
	ОбъектСчет.Наименование = НСтр("ru='Обязательства поставщиков финансовых услуг по выпущенным электронным деньгам';uk='Зобов''язання надавачів фінансових послуг за випущеними електронним грошима'", КодЯзыкаЗаполнения);
	ОбъектСчет.Записать();

	ОбъектСчет = ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам.ПолучитьОбъект();
	ОбъектСчет.Наименование = НСтр("ru='(не используется) Другие затраты';uk='(не використовується) Інші витрати'", КодЯзыкаЗаполнения);
	ОбъектСчет.Записать();
	
КонецПроцедуры

Процедура ПерепровестиРегламентныеОперацииРИ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Проведен
	|	И РегламентнаяОперация.ТипОперации = &ТипОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ТипОперации", Перечисления.ТипыРегламентныхОпераций.РасчетНалоговыхРазницПослеПереходаСЕН);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.РегламентнаяОперация");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
            
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если ДокОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
            КонецЕсли;
			
			ДокОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();		
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенные_1_0_21_3() Экспорт
	
	МассивСчетовПерезаполнения = Новый Массив;
	МассивСчетовПерезаполнения.Добавить("РасчетыПоДолгосрочнымФинансовымИнвестициямУчастиеВКапитале");
	МассивСчетовПерезаполнения.Добавить("РасчетыПоДолгосрочнымФинансовымИнвестициямУчастиеВКапиталеВалюта");
	МассивСчетовПерезаполнения.Добавить("РасчетыПоПрочимДолгосрочнымФинансовымИнвестициям");
	МассивСчетовПерезаполнения.Добавить("РасчетыПоПрочимДолгосрочнымФинансовымИнвестициямВалюта");
	
	МакетXML = ПланыСчетов.Хозрасчетный.ПолучитьМакет("НачальноеЗаполнение").ПолучитьТекст();
	ТаблицаДанныхНачальногоЗаполнения = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетXML).Данные;
	
	Для каждого ПерезаполняемыйСчет Из МассивСчетовПерезаполнения Цикл
		
		СтрокаНачальногоЗаполнения = ТаблицаДанныхНачальногоЗаполнения.Найти(ПерезаполняемыйСчет, "ИмяПредопределенного");
		Если СтрокаНачальногоЗаполнения <> Неопределено Тогда
			
			ОбъектСчет = ПланыСчетов.Хозрасчетный[ПерезаполняемыйСчет].ПолучитьОбъект();
			ОбъектСчет.Наименование = СтрокаНачальногоЗаполнения.Наименование;
			ОбъектСчет.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенные_1_0_21_5() Экспорт
	
	МассивСчетовПерезаполнения = Новый Массив;
	МассивСчетовПерезаполнения.Добавить("РозничнаяВыручкаВКассахККМ");
	МассивСчетовПерезаполнения.Добавить("НаличныеДеньгиПоОперациямРРОВИностраннойВалюте");
	МассивСчетовПерезаполнения.Добавить("РасчетыПоСсудамЧленамКредитныхСоюзов");
	МассивСчетовПерезаполнения.Добавить("РасчетыПоОперациямПредоставленияПлатежныхУслуг");
	МассивСчетовПерезаполнения.Добавить("ДоходПроцентныйОтФинансовыхУслуг");
	МассивСчетовПерезаполнения.Добавить("ДоходКомиссионныйОтФинансовыхПлатежныхУслуг");

	МассивСчетовСтатьяДДС = Новый Массив;
	МассивСчетовСтатьяДДС.Добавить("РозничнаяВыручкаВКассахККМ");
	МассивСчетовСтатьяДДС.Добавить("НаличныеДеньгиПоОперациямРРОВИностраннойВалюте");
	
	МакетXML = ПланыСчетов.Хозрасчетный.ПолучитьМакет("НачальноеЗаполнение").ПолучитьТекст();
	ТаблицаДанныхНачальногоЗаполнения = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетXML).Данные;
	
	Для каждого ПерезаполняемыйСчет Из МассивСчетовПерезаполнения Цикл
		
		СтрокаНачальногоЗаполнения = ТаблицаДанныхНачальногоЗаполнения.Найти(ПерезаполняемыйСчет, "ИмяПредопределенного");
		Если СтрокаНачальногоЗаполнения <> Неопределено Тогда
			
			Попытка
				ОбъектСчет = ПланыСчетов.Хозрасчетный[ПерезаполняемыйСчет].ПолучитьОбъект();
				ОбъектСчет.Наименование = СтрокаНачальногоЗаполнения.Наименование;  
				ОбъектСчет.КодБыстрогоВыбора = "";   

				Если НЕ МассивСчетовСтатьяДДС.Найти(ПерезаполняемыйСчет) = Неопределено Тогда 
					Субконто      = ОбъектСчет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто");
					НетСтатьиДДС = (Субконто = Неопределено);
					ВсегоСубконто = ОбъектСчет.ВидыСубконто.Количество();
					Если НетСтатьиДДС И ВсегоСубконто < 3 Тогда

						НовыйВид = ОбъектСчет.ВидыСубконто.Добавить();

						НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
						НовыйВид.Суммовой       = Истина;
						НовыйВид.Валютный       = Истина;
						НовыйВид.Количественный = Истина;
						НовыйВид.ТолькоОбороты  = Истина;

					КонецЕсли;
					Если НЕ НетСтатьиДДС И Субконто.ТолькоОбороты = Ложь Тогда
						Субконто.ТолькоОбороты = Истина;
					КонецЕсли;
				КонецЕсли;
				
				ОбъектСчет.Записать();
				
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = НСтр("ru='Обновление для счета %1 не выполнено';uk='Оновлення для рахунку %1 не виконано'",ОбщегоНазначения.КодОсновногоЯзыка());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПерезаполняемыйСчет);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
