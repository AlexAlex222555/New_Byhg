#Область СлужебныйПрограммныйИнтерфейс

// Возвращает настройки регламентированного учета.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//		* ДополнительноВедетсяУправленческийУчет - Булево - Истина, если совместно с регламентированным (на одном плане счетов) ведется управленческий учет.
//		* ДатаНачалаВеденияУправленческогоУчета - Дата - Дата, с которой ведется совместный управленческий и регламентированный учет. Если пустая, то с начала ведения учета.
//		* ДополнительноВедетсяУчетВВалютеФинОтчетности - Булево - Истина, если плане счетов регламентированного учета дополнительно ведется учет в валюте финансовой отчетности.
//		* ВалютаФинОтчетности - СправочникСсылка.Валюты - Валюта финансовой отчетности.
//
Функция НастройкиУчета() Экспорт
	
	НастройкиУчета = Новый Структура();
	НастройкиУчета.Вставить("ДополнительноВедетсяУправленческийУчет",       Ложь);
	НастройкиУчета.Вставить("ДатаНачалаВеденияУправленческогоУчета",        Дата(1,1,1));
	НастройкиУчета.Вставить("ДополнительноВедетсяУчетВВалютеФинОтчетности", Ложь);
	НастройкиУчета.Вставить("ВалютаФинОтчетности",                          Справочники.Валюты.ПустаяСсылка());
	НастройкиУчета.Вставить("ИспользоватьРеглУчет",                         Ложь);
	НастройкиУчета.Вставить("ДатаНачалаВеденияРеглУчета",                   Дата(1,1,1));
	
	//++ Локализация
	//++ НЕ УТ
	НастройкиУчета.ДополнительноВедетсяУправленческийУчет = ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный");
	НастройкиУчета.ДатаНачалаВеденияУправленческогоУчета = Константы.ДатаНачалаУУНаПланеСчетовХозрасчетный.Получить();
	НастройкиУчета.ДополнительноВедетсяУчетВВалютеФинОтчетности = ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
	НастройкиУчета.ВалютаФинОтчетности = Константы.ВалютаФинОтчетности.Получить();
	НастройкиУчета.ИспользоватьРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	НастройкиУчета.ДатаНачалаВеденияРеглУчета = Константы.ДатаНачалаВеденияРеглУчета.Получить();
	//-- НЕ УТ
	//-- Локализация
	
	Возврат НастройкиУчета;
	
КонецФункции


// Определяет ведение регл. учета на указанную дату.
// 
// Параметры:
// 	Дата - Дата - Дата, на которую нужно проверить ведение регл. учета.
// 	
// Возвращаемое значение:
// 	Булево - Истина, если ведется регл. учет.
Функция ВедетсяРеглУчет(Дата = '000101010000') Экспорт
	
	НастройкиУчета = НастройкиУчета();
	
	ВедетсяРеглУчет =
		НастройкиУчета.ИспользоватьРеглУчет
		И (Дата >= НастройкиУчета.ДатаНачалаВеденияРеглУчета
			ИЛИ Дата = '000101010000' 
				И ТекущаяДатаСеанса() >= НастройкиУчета.ДатаНачалаВеденияРеглУчета);
	
	Возврат ВедетсяРеглУчет;
	
КонецФункции

// Функция возвращает счет бухгалтерского учета в зависимости от выбранного типа налога. Вызов функции происходит из
// платежных документов.
//
// Параметры:
//   ТипНалога - ПеречислениеСсылка.ТипыНалогов - Типа налогов.
//
// Возвращаемое значение:
//   ПланСчетов.Хозрасчетный - Счет учета по типу налога.
// 
Функция СчетУчетаПоТипуНалога(ТипНалога) Экспорт
	
	СчетУчета = Неопределено;
	//++ Локализация
	//++ НЕ УТ
	Если ТипНалога = Перечисления.ТипыНалогов.ЕдиныйНалог Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЕдиномуНалогу;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоНалогуНаПрибыль;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДС Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДФЛ Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ДругиеНалоги Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДругимНалогам;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.Акциз Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоАкцизу;
	Иначе
		СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	//-- НЕ УТ
	//-- Локализация
	
	Возврат СчетУчета;
	
КонецФункции

// Функция возвращает типа налога в зависимости от выбранного счета бухгалтерского учета. Вызов функции происходит из
// обработчиков обновления.
//
// Параметры:
//   СчетУчета - ПланСчетов.Хозрасчетный - Счет учета по типу налога.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыНалогов - Тип налогов по счету учета.
// 
Функция ТипНалогаПоСчетуУчета(СчетУчета) Экспорт
	
	ТипНалога = Неопределено;
	
	//++ Локализация
	//++ НЕ УТ
	Если СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЕдиномуНалогу Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ЕдиныйНалог;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоНалогуНаПрибыль Тогда
	    ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоНДС Тогда
	    ТипНалога = Перечисления.ТипыНалогов.НДС;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ Тогда
	    ТипНалога = Перечисления.ТипыНалогов.НДФЛ;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДругимНалогам Тогда
		ТипНалога = Перечисления.ТипыНалогов.ДругиеНалоги;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоАкцизу Тогда
	    ТипНалога = Перечисления.ТипыНалогов.Акциз;
	Иначе
		ТипНалога = Перечисления.ТипыНалогов.ПустаяСсылка();
	КонецЕсли;
	//-- НЕ УТ
	//-- Локализация
	
	Возврат ТипНалога;
	
КонецФункции

// Возвращает доступность отражения документов в регл. учете текущему пользователю.
// 
// Возвращаемое значение:
// 	Булево - Наличие прав на отражение документов в регл. учете
//
Функция ЕстьПравоОтраженияДокументовВРеглУчете() Экспорт
	
	Результат = Ложь;
	//++ Локализация
	//++ НЕ УТ
	Результат = ПравоДоступа("Использование", Метаданные.Обработки.ОтражениеДокументовВРеглУчете);
	//-- НЕ УТ
	//-- Локализация
	Возврат Результат;
	
КонецФункции

// Возвращает документы к отражению в регл. учете
//
// Параметры:
// 	ДокументыКОтражению -   ТаблицаЗначений, 
// 							МенеджерВременныхТаблиц - Таблица документов, которые надо вернуть к отражению, 
// 													  или менеджер временных таблиц имеющий таблицу ДокументыКОтражению
// 													  Таблица должна иметь колонки Документ, Организация, ДатаОтражения. 
// 	КоличествоОбработанных - Число - В данном параметр устанавливается количество возвращенных к отражению документов.
// 									 Параметр не является обязательным.
//
Процедура ВернутьДокументыКОтражению(ДокументыКОтражению, КоличествоОбработанных = Неопределено) Экспорт
	
	//++ Локализация
	//++ НЕ УТ
	РеглУчетПроведениеСервер.ВернутьДокументыКОтражению(ДокументыКОтражению, КоличествоОбработанных);
	//-- НЕ УТ
	//-- Локализация
	
КонецПроцедуры

// Регистрирует документы расчетов с партнерами к отражению в регламентированном учете.
//
// Параметры:
//	Расчеты - ТаблицаЗначений - Таблица движений по расчетам с партнерами.
//	                         Таблица должна содержать колонки:
//	                         * Регистратор - ДокументСсылка - Документ-регистратор движений
//	                         * Период - Дата - Период движений
//	                         * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Аналитика учета.
//
Процедура ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВРеглУчете(Расчеты) Экспорт
	
	//++ Локализация
	//++ НЕ УТ
	РеглУчетПроведениеСервер.ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВРеглУчете(Расчеты);
	//-- НЕ УТ
	//-- Локализация
	
КонецПроцедуры

// Процедура вызывается из методов регламентных операций для записи в регистр сведений "ЗаданияКЗакрытиюМесяца"
//	данных о необходимости пересчета признания расходов (если изменяются организации с объектом налогообложения "Доходы минус расходы").
// Параметры:
//	Период - Дата - период пересчета;
//	СписокОрганизаций - Массив - СправочникСсылка.Организации - массив организаций, для которых запущена процедура пересчета.
//	ТолькоРасходы - Булево - Признак выборки подходящих организаций:
//		если Истина - будут выбираться организации на УСН, с объектом налогообложения "Доходы минус расходы",
//		если Ложь - будут выбираться организации на УСН вне зависимости от объекта налогообложения, значение по умолчанию - Истина;
//	КоличествоОбработанныхЭлементов - Число - Количество данных, обработанных данной процедурой (см. общий модуль "Производительность").
//
Процедура ОбновитьЗаданияКЗакрытиюМесяцаПриВыполненииРеглОперации(Период, СписокОрганизаций, ТолькоРасходы = Истина, КоличествоОбработанныхЭлементов = 0) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Возвращает свойства счета регламентированного учета
//
// Параметры:
// 	  Счет - ПланыСчетовСсылка.Хозрасчетный - Счет регламентированного учета
// 
Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт
	
	ДанныеСчета = Неопределено;
	
	//++ Локализация
	//++ НЕ УТ
	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка"                         , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Наименование"                   , "");
	ДанныеСчета.Вставить("Код"                            , "");
	ДанныеСчета.Вставить("КодБыстрогоВыбора"              , "");
	ДанныеСчета.Вставить("Родитель"                       , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Вид"                            , Неопределено);
	ДанныеСчета.Вставить("Забалансовый"                   , Ложь);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Ложь);
	ДанныеСчета.Вставить("Валютный"                       , Ложь);
	ДанныеСчета.Вставить("Количественный"                 , Ложь);
	ДанныеСчета.Вставить("УчетПоПодразделениям"           , Ложь);
	ДанныеСчета.Вставить("УчетПоНаправлениямДеятельности" , Ложь);
	ДанныеСчета.Вставить("НалоговыйУчет"                  , Ложь);
	ДанныеСчета.Вставить("КоличествоСубконто"             , 0);
	ДанныеСчета.Вставить("УчетПоНалоговымНазначениямНДС"  , Ложь);
	
	МаксКоличествоСубконто	= БухгалтерскийУчет.МаксимальноеКоличествоСубконто();
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      Ложь);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", Ложь);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Родитель,
	|	Хозрасчетный.Код,
	|	Хозрасчетный.КодБыстрогоВыбора,
	|	Хозрасчетный.Наименование,
	|	Хозрасчетный.Вид,
	|	Хозрасчетный.Забалансовый,
	|	Хозрасчетный.ЗапретитьИспользоватьВПроводках,
	|	Хозрасчетный.Валютный,
	|	Хозрасчетный.Количественный,
	|	Хозрасчетный.УчетПоПодразделениям,
	|	Хозрасчетный.УчетПоНаправлениямДеятельности,
	|	Хозрасчетный.УчетПоНалоговымНазначениямНДС,
	|	Хозрасчетный.НалоговыйУчет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка = &Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ЕСТЬNULL(ХозрасчетныйВидыСубконто.ВидСубконто.Наименование, """") КАК Наименование,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	ХозрасчетныйВидыСубконто.ТолькоОбороты КАК ТолькоОбороты,
	|	ХозрасчетныйВидыСубконто.Суммовой КАК Суммовой
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйВидыСубконто.НомерСтроки";
	
	МассивРезультатов	= Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
		
	ВыборкаВидыСубконто	= МассивРезультатов[1].Выбрать();
		
	ДанныеСчета.КоличествоСубконто	= ВыборкаВидыСубконто.Количество();
		
	ИндексСубконто	= 0;
		
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		
		ИндексСубконто	= ИндексСубконто + 1;
		ТипСубконто = ?(ВыборкаВидыСубконто.ТипЗначения = NULL, Новый ОписаниеТипов("Неопределено"), ВыборкаВидыСубконто.ТипЗначения);
		
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ТипСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      ВыборкаВидыСубконто.Суммовой);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", ВыборкаВидыСубконто.ТолькоОбороты);
		
	КонецЦикла;
	
	//-- НЕ УТ
	//-- Локализация
	
	Возврат ДанныеСчета;
	
КонецФункции

#КонецОбласти

//++ Локализация
//++ НЕ УТ

#Область СлужебныйПрограммныйИнтерфейс

// см. ОбщийМодуль.ВариантыОтчетовПереопределяемый.ОпределитьОбъектыСКомандамиОтчетов()
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	// Бухгалтерский учет
	Объекты.Добавить(Метаданные.Документы.ОперацияБух);
	Объекты.Добавить(Метаданные.Документы.НачислениеДивидендов);
	Объекты.Добавить(Метаданные.Документы.РегламентнаяОперация);
	Объекты.Добавить(Метаданные.Документы.ИнвентаризацияРасчетов);
    

КонецПроцедуры

// см. ОбщийМодуль.ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов()
// 
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	// Стандартные отчеты БУ
	
	#Область АнализСубконто
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСубконто);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ данных регламентированного учета по выбранным одному или нескольким субконто.';uk='Аналіз даних регламентованого обліку за обраним одним або кількома субконто.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСубконто");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ данных регламентированного учета по выбранным одному или нескольким субконто.';uk='Аналіз даних регламентованого обліку за обраним одним або кількома субконто.'");
	#КонецОбласти
	
	#Область АнализСчета
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ оборотов регламентированного учета
|между выбранным счетом и всеми остальными счетами.'
|;uk='Аналіз оборотів регламентованого обліку
|між вибраним рахунком та всіма іншими рахунками.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСчета");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ оборотов регламентированного учета
|между выбранным счетом и всеми остальными счетами.'
|;uk='Аналіз оборотів регламентованого обліку
|між вибраним рахунком та всіма іншими рахунками.'");
	#КонецОбласти
	
	#Область ОборотноСальдоваяВедомость
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотноСальдоваяВедомость);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сальдо счетов на начало и на конец периода по дебету и кредиту и суммы оборотов за период.';uk='Сальдо рахунків на початок і на кінець періоду за дебетом та кредитом та суми оборотів за період.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотноСальдоваяВедомость");
	ОписаниеВарианта.Описание = НСтр("ru='Сальдо счетов на начало и на конец периода по дебету и кредиту и суммы оборотов за период.';uk='Сальдо рахунків на початок і на кінець періоду за дебетом та кредитом та суми оборотів за період.'");
	#КонецОбласти
	
	#Область ОборотноСальдоваяВедомостьПоСчету
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотноСальдоваяВедомостьПоСчету);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ оборотов и сальдо по счетам регламентированного учета.';uk='Аналіз оборотів і сальдо по рахунках регламентованого обліку.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотноСальдоваяВедомостьПоСчету");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ оборотов и сальдо по счетам регламентированного учета.';uk='Аналіз оборотів і сальдо по рахунках регламентованого обліку.'");
	#КонецОбласти
	
	#Область ОборотыМеждуСубконто
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотыМеждуСубконто);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Обороты между выбранными субконто и корреспондирующими субконто.';uk='Обороти між вибраними субконто і кореспондуючими субконто.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотыМеждуСубконто");
	ОписаниеВарианта.Описание = НСтр("ru='Обороты между выбранными субконто и корреспондирующими субконто.';uk='Обороти між вибраними субконто і кореспондуючими субконто.'");
	#КонецОбласти
	
	#Область ОтчетПоПроводкам
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтчетПоПроводкам);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Детальный анализ корреспонденций счетов.';uk='Детальний аналіз кореспонденцій рахунків.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОтчетПоПроводкам");
	ОписаниеВарианта.Описание = НСтр("ru='Детальный анализ корреспонденций счетов.';uk='Детальний аналіз кореспонденцій рахунків.'");
	#КонецОбласти
	
	#Область ОборотыСчета
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотыСчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Обороты между выбранным счетом и всеми остальными счетами за определенный период.';uk='Обороти між вибраним рахунком та іншими рахунками за певний період.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотыСчета");
	ОписаниеВарианта.Описание = НСтр("ru='Обороты между выбранным счетом и всеми остальными счетами за определенный период.';uk='Обороти між вибраним рахунком та іншими рахунками за певний період.'");
	#КонецОбласти	
	
	#Область СводныеПроводки
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СводныеПроводки);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сводные корреспонденции между счетами за выбранный период.';uk='Зведені кореспонденції між рахунками за вибраний період.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СводныеПроводки");
	ОписаниеВарианта.Описание = НСтр("ru='Сводные корреспонденции между счетами за выбранный период.';uk='Зведені кореспонденції між рахунками за вибраний період.'");
	#КонецОбласти
	
	#Область ШахматнаяВедомость
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ШахматнаяВедомость);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Обобщенные данные синтетического учета в разрезе корреспондирующих счетов.
|Развернутое представление оборотов между счетами.'
|;uk='Узагальнені дані синтетичного обліку в розрізі кореспондуючих рахунків.
|Розгорнуте представлення оборотів між рахунками.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ШахматнаяВедомость");
	ОписаниеВарианта.Описание = НСтр("ru='Обобщенные данные синтетического учета в разрезе корреспондирующих счетов.
|Развернутое представление оборотов между счетами.'
|;uk='Узагальнені дані синтетичного обліку в розрізі кореспондуючих рахунків.
|Розгорнуте представлення оборотів між рахунками.'");
	#КонецОбласти
		
	#Область КарточкаСубконто
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаСубконто);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Корреспонденции счетов за выбранный период,
|в которых был использован выбранный вид  или значение субконто.'
|;uk='Кореспонденції рахунків за вибраний період,
|в яких було використано вибраний вид або значення субконто.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КарточкаСубконто");
	ОписаниеВарианта.Описание = НСтр("ru='Корреспонденции счетов за выбранный период,
|в которых был использован выбранный вид  или значение субконто.'
|;uk='Кореспонденції рахунків за вибраний період,
|в яких було використано вибраний вид або значення субконто.'");
	#КонецОбласти
	
	#Область КарточкаСчета
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаСчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Корреспонденции счетов за выбранный период, в которых был использован выбранный счет.';uk='Кореспонденції рахунків за вибраний період, в яких було використано вибраний рахунок.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КарточкаСчета");
	ОписаниеВарианта.Описание = НСтр("ru='Корреспонденции счетов за выбранный период, в которых был использован выбранный счет.';uk='Кореспонденції рахунків за вибраний період, в яких було використано вибраний рахунок.'");
	#КонецОбласти
	
	#Область ГлавнаяКнига
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ГлавнаяКнига);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сводная информация о сальдо и корреспондирующих оборотах по счетам бухгалтерского учета.';uk='Зведена інформація про сальдо та кореспондуючі обороти по рахунках бухгалтерського обліку.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='Счет
|Начальное сальдо дебет
|Начальное сальдо кредит
|С кредита счета
|Оборот по дебету
|Оборот по кредиту
|Конечное сальдо дебет
|Конечное сальдо кредит'
|;uk='Рахунок
|Початкове сальдо дебет
|Початкове сальдо кредит
|З кредиту рахунку
|Оборот по дебету
|Оборот по кредиту
|Кінцеве сальдо дебет
|Кінцеве сальдо кредит'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru='Период
|Организация
|Периодичность
|По субсчетам
|По субсчетам кор. счетов
|Развернутое сальдо
|Выводить единицу измерения'
|;uk='Період
|Організація
|Періодичність
|По субрахунках
|По субрахунках кор. рахунків
|Розгорнуте сальдо
|Виводити одиницю вимірювання'");	
	#КонецОбласти
	
	// Контрольные отчеты БУ
	
	#Область СверкаДанныхОУиБУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СверкаДанныхОУиБУ);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
	
КонецПроцедуры

// см. ОбщийМодуль.ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения()
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	// Бухгалтерский учет
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрБухгалтерии.Хозрасчетный", "Период" ,"БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ОтражениеДокументовВРеглУчете", "ДатаОтражения" ,"БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачислениеДивидендов", "Дата", "БухгалтерскийУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачислениеДивидендов", "ДатаВыплаты", "БухгалтерскийУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИнвентаризацияРасчетов", "Дата", "БухгалтерскийУчет", "Организация");
	
КонецПроцедуры

// см. ОбщийМодуль.СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании()
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	// Бухгалтерский учет
	Объекты.Добавить(Метаданные.Документы.ОперацияБух);
	Объекты.Добавить(Метаданные.Документы.НачислениеДивидендов);
	Объекты.Добавить(Метаданные.Документы.РегламентнаяОперация);
	
	
КонецПроцедуры

// см. ОбщийМодуль.УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати()
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	// Бухгалтерский учет
	СписокОбъектов.Добавить(Документы.ОперацияБух);
	СписокОбъектов.Добавить(ПланыСчетов.Хозрасчетный);
	СписокОбъектов.Добавить(Документы.НачислениеДивидендов);
	СписокОбъектов.Добавить(Документы.ИнвентаризацияРасчетов);
	
	
КонецПроцедуры


#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ОтражениеДокументовВРегламентированномУчете

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ОтражениеДокументовВРегламентированномУчете(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете,
		Ложь, Истина, Ложь,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеДоходовПоНаправлениямДеятельности);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Отразить';uk='Відобразити'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"РеглУчетСервер.Использование_ОтражениеДокументовВРегламентированномУчете");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"РеглУчетСервер.Выполнить_ОтражениеДокументовВРегламентированномУчете");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.НастройкаОтраженияДокументовВРеглУчете.Формы.ФормаНастройкиОтраженияДокументовВРеглУчете.ПолноеИмя());
КонецПроцедуры

// Обработчики этапа.

Процедура Использование_ОтражениеДокументовВРегламентированномУчете(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = ЗакрытиеМесяцаСервер.ТекстЗапросаСостояниеОтраженияДокументов();
	
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Ложь);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика,
		МассивРезультатов[0].Выгрузить().Количество()
		+ МассивРезультатов[1].Выгрузить().Количество()
		+ МассивРезультатов[2].Выгрузить().Количество()
		+ МассивРезультатов[3].Выгрузить().Количество());
	
	ЕстьОтраженныеВУчете                = НЕ МассивРезультатов[0].Пустой();
	ЕстьОжидающиеОтражения              = НЕ МассивРезультатов[1].Пустой();
	ЕстьНеОтраженныеВУчете              = НЕ МассивРезультатов[2].Пустой();
	ЕстьОжидающиеОтраженияНеПроверенные = НЕ МассивРезультатов[3].Пустой();
	
	Если ЕстьОжидающиеОтражения Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ожидает отражения в бухгалтерском и налоговом учете: %1';uk='Чекає відображення в бухгалтерському та податковому обліку: %1'",ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(МассивРезультатов[1].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
	Если ЕстьНеОтраженныеВУчете Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не отражено в учете документов: %1';uk='Не відображено в обліку документів: %1'",ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(МассивРезультатов[2].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
	Если НЕ ЕстьНеОтраженныеВУчете И НЕ ЕстьОжидающиеОтражения И НЕ ЕстьОтраженныеВУчете И НЕ ЕстьОжидающиеОтраженияНеПроверенные Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет документов для отражения в учете.';uk='Немає документів для відображення в обліку.'",ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
	Если ЕстьОжидающиеОтраженияНеПроверенные Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ожидает проверки для последующего отражения в учете документов: %1.';uk='Чекає перевірки для подальшого відображення в обліку документів: %1.'",ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(МассивРезультатов[3].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ОтражениеДокументовВРегламентированномУчете(ПараметрыОбработчика) Экспорт
	
	Для Каждого ТекущаяОрганизация Из ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций Цикл
		
		ДанныеПоОтражениюВУчете = РеглУчетПроведениеСервер.ИнициализироватьДанныеПоОтражениюВУчете();
	
		Попытка
			РеглУчетПроведениеСервер.ОтразитьВсе(
				КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации), 
				ТекущаяОрганизация,
				ДанныеПоОтражениюВУчете);
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Отражение документов в регламентированном учете за период %1 завершилось с ошибкой:
|%2'
|;uk='Відображення документів в регламентованому обліку за період %1 завершилося з помилкою:
|%2'",ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ТекущаяОрганизация);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеФинансовогоРезультата

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ФормированиеФинансовогоРезультата(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата,
		Ложь, Истина, Ложь,
		Перечисления.ОперацииЗакрытияМесяца.РасчетКурсовыхРазниц);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Сформировать';uk='Сформувати'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"РеглУчетСервер.Использование_ФормированиеФинансовогоРезультата");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"РеглУчетСервер.Выполнить_ФормированиеФинансовогоРезультата");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаЛокализация.ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата);
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности);
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода);
	
КонецПроцедуры

// Обработчики этапа.

Процедура Использование_ФормированиеФинансовогоРезультата(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.Организация,
	|	Таб.ОбособленноеПодразделение,
	|	Таб.ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ (
	// Получим организации без обособленных подразделений и обособленные подразделения
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(ОбособленныеПодразделения.Ссылка, ДД.Ссылка) КАК Организация,
	|		ЕСТЬNULL(ОбособленныеПодразделения.ОбособленноеПодразделение, ЛОЖЬ) КАК ОбособленноеПодразделение,
	|		ЕСТЬNULL(ОбособленныеПодразделения.ГоловнаяОрганизация, ДД.Ссылка) КАК ГоловнаяОрганизация
	|	ИЗ
	|		Справочник.Организации КАК ДД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения
	|		ПО ДД.Ссылка = ОбособленныеПодразделения.ГоловнаяОрганизация
	|			И ОбособленныеПодразделения.ОбособленноеПодразделение
	|	ГДЕ
	|		НЕ ДД.ОбособленноеПодразделение
	|		И (ДД.Ссылка В (&МассивОрганизаций)
	|			ИЛИ ЕСТЬNULL(ОбособленныеПодразделения.Ссылка, ДД.Ссылка) В (&МассивОрганизаций)
	|		) И ДД.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Добавим ссылки на сами головные организации
	|	ВЫБРАТЬ
	|		ДД.Ссылка КАК Организация,
	|		ЛОЖЬ КАК ОбособленноеПодразделение,
	|		ДД.Ссылка КАК ГоловнаяОрганизация
	|	ИЗ
	|		Справочник.Организации КАК ДД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения
	|		ПО ДД.Ссылка = ОбособленныеПодразделения.ГоловнаяОрганизация
	|	ГДЕ
	|		НЕ ДД.ОбособленноеПодразделение
	|		И ОбособленныеПодразделения.ОбособленноеПодразделение
	|		И ДД.Ссылка В (&МассивОрганизаций)
	|		И ДД.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	) КАК Таб
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ 
	|	Т.Организация
	|ИЗ
	|	ВТОрганизации КАК Т
	|ГДЕ
	|	НЕ Т.Организация В (&МассивОрганизаций)
	|	ИЛИ НЕ Т.ОбособленноеПодразделение";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, РезультатЗапроса.Выгрузить().Количество());
	

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.Организация КАК Ссылка,
	|	Таб.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ОрганизацииСОборотами
	|ИЗ (
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Организация КАК Организация
	|	ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода,
	|		 &КонецПериода,
	|		 ,
	|		 ,
	|		 ,
	|		НЕ &ЭтоКонецГода
	|			И Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Организация ИЗ ВТОрганизации КАК Т ГДЕ НЕ Т.ОбособленноеПодразделение)
	|		 ) КАК ХозрасчетныйОбороты
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Организация КАК Организация
	|	ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД),
	|		 КОНЕЦПЕРИОДА(&КонецПериода, ГОД),
	|		 ,
	|		 ,
	|		 ,
	|		&ЭтоКонецГода
	|			И Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Организация ИЗ ВТОрганизации КАК Т)
	|		 ) КАК ХозрасчетныйОбороты
	|	) КАК Таб
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Организация КАК Ссылка
	|ПОМЕСТИТЬ НеОбособленныеПодразделенияСОборотами
	|ИЗ
	|	ВТОрганизации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрганизацииСОборотами КАК ОрганизацииСОборотами
	|		ПО Организации.Организация = ОрганизацииСОборотами.Ссылка
	|ГДЕ
	|	НЕ Организации.ОбособленноеПодразделение
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ ОрганизацииСОстаткамиПоКурсовымРазницам
	|ИЗ (
	|	ВЫБРАТЬ
	|		Остатки.Счет,
	|		Остатки.Организация,
	|		Остатки.Валюта,
	|		Остатки.Подразделение,
	|		Остатки.НаправлениеДеятельности,
	|		ЕСТЬNULL(Остатки.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	|		ЕСТЬNULL(Остатки.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
	|		ЕСТЬNULL(Остатки.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3,
	|		СУММА(Остатки.ВалютнаяСуммаОстаток) КАК ОстатокВалюты,
	|		СУММА(Остатки.СуммаОстаток) КАК ОстатокРегл,
	|		СУММА(Остатки.СуммаУУОстаток) КАК ОстатокУпр,
	|		СУММА(Остатки.СуммаФООстаток) КАК ОстатокФО
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецКвартала,
	|			НЕ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходыИРезультатыДеятельности), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЗатратыПоЭлементам), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЗатратыДеятельности))
	|			И НЕ Счет.Забалансовый,
	|			,
	|			&ЭтоКонецКвартала И Организация В (ВЫБРАТЬ Т.Организация ИЗ ВТОрганизации КАК Т)) КАК Остатки
	|	ГДЕ
	|		&УчетВВалютеФО И Остатки.СуммаФООстаток <> ВЫРАЗИТЬ(&КоэффициентПересчета
	|			* ВЫБОР КОГДА &СуммаУУ ТОГДА Остатки.СуммаУУОстаток ИНАЧЕ Остатки.СуммаОстаток КОНЕЦ КАК ЧИСЛО(31,2))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Остатки.Организация,
	|		Остатки.Счет,
	|		Остатки.Валюта,
	|		Остатки.Подразделение,
	|		Остатки.НаправлениеДеятельности,
	|		ЕСТЬNULL(Остатки.Субконто1, НЕОПРЕДЕЛЕНО),
	|		ЕСТЬNULL(Остатки.Субконто2, НЕОПРЕДЕЛЕНО),
	|		ЕСТЬNULL(Остатки.Субконто3, НЕОПРЕДЕЛЕНО)
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Остатки.СуммаФООстаток) <> СУММА(ВЫРАЗИТЬ(&КоэффициентПересчета * ВЫБОР
	|			КОГДА &СуммаУУ  ТОГДА Остатки.СуммаУУОстаток ИНАЧЕ Остатки.СуммаОстаток КОНЕЦ КАК ЧИСЛО(15, 2)))
	|	) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Организация
	|ИЗ
	|	ОрганизацииСОстаткамиПоКурсовымРазницам КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданияФормированиеФинансовогоРезультата.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ЗаданияФормированиеФинансовогоРезультата
	|ГДЕ
	|	ЗаданияФормированиеФинансовогоРезультата.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата)
	|		И НАЧАЛОПЕРИОДА(ЗаданияФормированиеФинансовогоРезультата.Месяц, МЕСЯЦ) <= &НачалоПериода
	|		И ЗаданияФормированиеФинансовогоРезультата.Организация В (&МассивОрганизаций)
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	УчетВВалютеФО = ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
	Запрос.УстановитьПараметр("УчетВВалютеФО", УчетВВалютеФО);
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если Константы.ИсточникСуммыДляПересчетаВВалютуФинОтчетности.Получить() = Перечисления.ИсточникиСуммыДляПересчетаВВалютуФинОтчетности.УУ Тогда
		ТекущаяВалюта = Константы.ВалютаУправленческогоУчета.Получить();
		Запрос.УстановитьПараметр("СуммаУУ", Истина);
	Иначе
		ТекущаяВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Запрос.УстановитьПараметр("СуммаУУ", Ложь);
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	КоэффициентПересчетаВалютыФО = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		ТекущаяВалюта,
		Константы.ВалютаФинОтчетности.Получить(),
		КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("КоэффициентПересчета", КоэффициентПересчетаВалютыФО);
	
	ЭтоКонецГода = (Месяц(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации) = 12);
	Запрос.УстановитьПараметр("ЭтоКонецГода", ЭтоКонецГода);
	ЭтоКонецКвартала = (Месяц(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)%3 = 0);
	Запрос.УстановитьПараметр("ЭтоКонецКвартала", ЭтоКонецКвартала);
	КонецКвартала = КонецКвартала(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	Запрос.УстановитьПараметр("ГраницаКонецКвартала", Новый Граница(КонецКвартала, ВидГраницы.Включая));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ПредставлениеПериода = РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ОрганизацииСОборотами = 0
//	 И РазмерыВременныхТаблиц.ОрганизацииСОстатками90еСчета = 0
	 И РазмерыВременныхТаблиц.ОрганизацииСОстаткамиПоКурсовымРазницам = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Нет организаций с оборотами по регистру бухгалтерского учета за период %1';uk='Немає організацій з оборотами по регістру бухгалтерського обліку за період %1'",ОбщегоНазначения.КодОсновногоЯзыка()),
				ПредставлениеПериода));
		Возврат;
		
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(
		ПараметрыОбработчика,
		Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата,
		"НеОбособленныеПодразделенияСОборотами",
		Ложь);

	Если УчетВВалютеФО И ЭтоКонецКвартала Тогда
		ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(
			ПараметрыОбработчика,
			Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности,
			"ОрганизацииСОстаткамиПоКурсовымРазницам",
			Ложь);
	КонецЕсли;
	
	Если ЭтоКонецГода Тогда
		ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(
			ПараметрыОбработчика,
			Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода,
			"ОрганизацииСОборотами",
			Ложь);
	КонецЕсли;
	
			
    Выборка = РезультатЗапроса.Получить(РезультатЗапроса.Количество() - 2).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В организации ""%1"" на конец периода %2 есть суммовые остатки по курсовым разницам.';uk='В організації ""%1"" на кінець періоду %2 є сумові залишки за курсовими різницями.'",ОбщегоНазначения.КодОсновногоЯзыка()),
				Выборка.Организация,
				ПредставлениеПериода));
		
	КонецЦикла;
	
    Выборка = РезультатЗапроса.Получить(РезультатЗапроса.Количество() - 1).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В организации ""%1"" за период %2 необходимо выполнить регламентную операцию формирование финансового результата.';uk='В організації ""%1"" за період %2 необхідно виконати регламентну операцію формування фінансового результату.'",ОбщегоНазначения.КодОсновногоЯзыка()),
				Выборка.Организация,
				ПредставлениеПериода));

		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура Выполнить_ФормированиеФинансовогоРезультата(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаЛокализация.РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

//-- НЕ УТ
//-- Локализация
