#Область ПрограммныйИнтерфейс

//++ Локализация
#Область Проведение

//++ НЕ БЗК

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма()).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		
		// Проведение
		Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Для Каждого Регистр Из Документ.Метаданные().Движения Цикл
				Если ЗарплатаКадры.ЭтоОбъектЗарплатноКадровойБиблиотеки(Регистр.ПолноеИмя()) Тогда
					Параметры.ПодчиненныеРегистры.Добавить(Регистр);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

//-- НЕ БЗК

// Процедура формирования движений по подчиненным регистрам БЗКР.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Область ВзаиморасчетыПоЗаймамСотрудникам
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаВзаиморасчетыПоЗаймамСотрудникам")
		И ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаВзаиморасчетыПоЗаймамСотрудникам) Тогда
		
		Регистратор = Движения.ВзаиморасчетыПоЗаймамСотрудникам.Отбор.Регистратор.Значение;
		
		Для Каждого Строка Из ТаблицыДляДвижений.ТаблицаВзаиморасчетыПоЗаймамСотрудникам Цикл
			Если Строка.ЭтоПредоставлениеЗайма Тогда
				ЗаймыСотрудникам.ЗарегистрироватьПредоставлениеЗайма(Движения,
					Строка.ДоговорЗайма, Строка.СуммаЗайма, Строка.Период, Строка.Организация, Строка.ФизическоеЛицо,
					Отказ);
			Иначе
				ЗаймыСотрудникам.ЗарегистрироватьПогашениеЗайма(Движения,
					Строка.ДоговорЗайма, Строка.СуммаЗайма, Строка.Период, Строка.Организация, Строка.ФизическоеЛицо,
					Регистратор, Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОплатаВедомостейНаВыплатуЗарплаты
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаОплатаВедомостейНаВыплатуЗарплаты")
		И ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаОплатаВедомостейНаВыплатуЗарплаты) Тогда
		
		ПлатежныйДокумент = Новый Структура("Ссылка, Движения",
			Движения.ОплатаВедомостейНаВыплатуЗарплаты.Отбор.Регистратор.Значение, Движения);
		
		ДатаПлатежа = ТаблицыДляДвижений.ТаблицаОплатаВедомостейНаВыплатуЗарплаты[0].ДатаПлатежа;
		Организация = ТаблицыДляДвижений.ТаблицаОплатаВедомостейНаВыплатуЗарплаты[0].Организация;
		
		МассивВедомостей = ТаблицыДляДвижений.ТаблицаОплатаВедомостейНаВыплатуЗарплаты.ВыгрузитьКолонку("Ведомость");
		МассивФизическихЛиц = ТаблицыДляДвижений.ТаблицаОплатаВедомостейНаВыплатуЗарплаты.ВыгрузитьКолонку("ФизическоеЛицо");
		
		МассивВедомостей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВедомостей);
		МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивФизическихЛиц);
		
		ЗарплатаКадры.ЗарегистрироватьОплатуВедомостей(ПлатежныйДокумент, Организация, МассивВедомостей,
			МассивФизическихЛиц,  , Отказ);
		
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НевыплатыВедомостей
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаОплатаВедомостей")
		И ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаОплатаВедомостей) Тогда
		
		МассивФизЛиц = ТаблицыДляДвижений.ТаблицаФизическихЛиц.ВыгрузитьКолонку("ФизическоеЛицо");
		ДокументыВыдачи = Новый Массив;
		
		Для Каждого СтрокаТаблицы Из ТаблицыДляДвижений.ТаблицаОплатаВедомостей Цикл
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНевыплатуПоВедомости(Движения, Отказ, СтрокаТаблицы.ДокументВыдачи, МассивФизЛиц);
			Если ДокументыВыдачи.Найти(СтрокаТаблицы.ДокументВыдачи) = Неопределено Тогда
				ДокументыВыдачи.Добавить(СтрокаТаблицы.ДокументВыдачи);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ДокументВыдачи Из ДокументыВыдачи Цикл
			УчетНДФЛ.ЗарегистрироватьНевыплатуДокументом(Движения, Отказ, ДокументВыдачи, МассивФизЛиц);
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	
	#Область НачислениеДивидендов
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаДивиденды")
		И ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаДивиденды) Тогда
		
		Реквизиты = ТаблицыДляДвижений.ТаблицаПараметрыНачисленияДивидендов[0];
		
		УчетНДФЛРасширенный.СформироватьДоходыИНДФЛСДивидендов(
			Движения,
			Отказ,
			Реквизиты.Организация,
			Реквизиты.ДатаВыплаты,
			ТаблицыДляДвижений.ТаблицаДивиденды,
			Реквизиты.Ссылка);
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ТаблицыДляДвижений.ТаблицаДивиденды);
		
		УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(
			Движения,
			Отказ,
			Реквизиты.Организация,
			Реквизиты.ДатаВыплаты,
			ТаблицыДляДвижений.ТаблицаНачисления,
			,
			ТаблицыДляДвижений.ТаблицаДивиденды);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников") Тогда
		
		Реквизиты = ТаблицыДляДвижений.ТаблицаПараметрыСдельногоЗаработка[0];
		
		РасчетЗарплатыРасширенный.ЗарегистрироватьСдельныйЗаработок(Движения, Реквизиты.Организация,
			ТаблицыДляДвижений.ТаблицаЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти
//-- Локализация

#Область ДенежныеСредства

// Процедура выполняет регистрацию оплаты страховых взносов и НДФЛ в контуре учета зарплаты.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, содержащий таблицу ДокументыКОтражению.
//	Объект - ДокументОбъект.СписаниеБезналичныхДенежныхСредств - Документ, если регистрация выполняется при проведении документа.
//	Отказ - Булево - Признак отказа от записи движений.
//
Процедура ЗарегистрироватьПеречислениеНалоговИВзносов(МенеджерВременныхТаблиц = Неопределено, Объект = Неопределено, Отказ = Ложь) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Предназначена для расчета и регистрации НДФЛ удержанного 
// по записанным в учете данным и по переданным данным о выплатах.
//
// Параметры:
//      Объект - ДокументОбъект - Документ-регистратор.
//      Отказ - Булево - Признак отказа от заполнения движений.
//
Процедура РассчитатьИЗарегистрироватьПеречисленныйНДФЛ(Объект, Отказ) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Заполняет итоговую сумму незачисленных платежей по подтверждению банка.
//
// Параметры:
//   Подтверждение - ДокументСсылка.ПодтверждениеЗачисленияЗарплаты - ссылка на подтверждение банка.
//   Сумма - Число - заполняемая сумма незачисленных платежей.
//
Процедура ЗаполнитьСуммуНезачисленныхПлатежейПоПодтверждениюБанка(Подтверждение, Сумма) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Процедура выполняет регистрацию возмещения из ФСС расходов на пособия.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, содержащий таблицу ДокументыКОтражению.
//	Объект - ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств - Документ, если регистрация выполняется при проведении документа.
//	Отказ - Булево - Признак отказа от записи движений.
//
Процедура СформироватьВозмещениеРасходовПоСоциальномуСтрахованию(МенеджерВременныхТаблиц = Неопределено, Объект = Неопределено, Отказ = Ложь) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Проверяет заполнение поступления ДС по возврату неперечисленной зарплаты.
// 
// Параметры:
// 	Объект - ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств - проверяемый документ.
// 	МассивНепроверяемыхРеквизитов - Массив - массив непроверяемых реквизитов обработки проверки заполнения.
// 	Отказ - Булево - признак отказа.
//
Процедура ПроверитьЗаполнениеПоВозвратуНеперечисленнойЗарплаты(Объект, МассивНепроверяемыхРеквизитов, Отказ) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Возвращает дату, соответствующую налоговому периоду, за который произведен платеж.
//
// Параметры:
//    МесяцНалоговогоПериода - Дата - заполняемая дата.
//    ПоказательОснования - Строка - Условное обозначение основания налогового платежа
//    ПоказательПериода - Строка - Условное обозначение периода, за который перечисляется налог
Процедура ЗаполнитьМесяцНалоговогоПериода(МесяцНалоговогоПериода, ПоказательОснования, ПоказательПериода) Экспорт
	МесяцНалоговогоПериода = Дата(1,1,1);
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Функция данные ведомостей для заполнения платежных документов.
//
// Параметры:
//   ПараметрыОтбора - Структура - структура с параметрами отбора ведомостей.
//   МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц.
//
// Возвращаемое значение:
//   Структура   - структура со значениями РеквизитыШапки и МассивОшибок.
//
Функция ДанныеВедомостей(ПараметрыОтбора, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Результат = Новый Структура("РеквизитыШапки, МассивОшибок", Неопределено, Новый Массив);
	//++ Локализация
	ЭтоПеречислениеВБюджет = Ложь;
	//++ НЕ БЗК
	ЭтоПеречислениеВБюджет = ПараметрыОтбора.Свойство("ХозяйственнаяОперация")
		И ПараметрыОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
	//-- НЕ БЗК	
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, ПараметрыОтбора);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеВедомостей.Ведомость,
	|	ДанныеВедомостей.ХозяйственнаяОперация,
	|	ДанныеВедомостей.ФормаОплаты
	|ПОМЕСТИТЬ ВТВедомостиПодробно
	|ИЗ ВТДанныеВедомостейКВыплате КАК ДанныеВедомостей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеВедомостей.Организация)         КАК Организация,
	|	МАКСИМУМ(ДанныеВедомостей.ЗарплатныйПроект)    КАК ЗарплатныйПроект,
	|	МАКСИМУМ(ДанныеВедомостей.Банк)                КАК Банк,
	|	МАКСИМУМ(ДанныеВедомостейПодробно.ФормаОплаты) КАК ФормаОплаты,
	|	МАКСИМУМ(ДанныеВедомостей.Раздатчик)           КАК Раздатчик,
	|	МАКСИМУМ(ДанныеВедомостей.Касса)               КАК Касса,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостей.Организация)      КАК КоличествоОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостей.ЗарплатныйПроект) КАК КоличествоЗарплатныхПроектов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостей.Банк)             КАК КоличествоБанков,
	|	МАКСИМУМ(ДанныеВедомостейПодробно.ХозяйственнаяОперация)             КАК ХозяйственнаяОперация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостейПодробно.ХозяйственнаяОперация) КАК КоличествоХозяйственныхОпераций,
	|	МИНИМУМ(ДанныеВедомостей.Проведен) КАК Проведен
	|ИЗ ВТВедомости КАК ДанныеВедомостей
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВедомостиПодробно КАК ДанныеВедомостейПодробно
	|		ПО ДанныеВедомостей.Ведомость = ДанныеВедомостейПодробно.Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВедомостиПодробно";
	
	РеквизитыШапки = Запрос.Выполнить().Выбрать();
	Если Не РеквизитыШапки.Следующий() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.РеквизитыШапки = РеквизитыШапки;
	
	Если Не РеквизитыШапки.Проведен Тогда
		ТекстОшибки = НСтр("ru='Ввод документа на основании не проведенных ведомостей невозможен.';uk='Введення документа на підставі непроведенних відомостей неможливо.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаВедомость", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru='Различаются организации. Ввод одного документа на основании выделенных ведомостей невозможен.';uk='Розрізняються організації. Введення одного документа на підставі виділених відомостей неможливо.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаФормаОплаты", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если ЭтоПеречислениеВБюджет Тогда
		// Прочие проверки при перечислении НДФЛ не требуются
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоХозяйственныхОпераций > 1 Тогда
		ТекстОшибки = НСтр("ru='Различается форма оплаты. Ввод одного документа на основании выделенных ведомостей невозможен.';uk='Різниться форма оплати. Введення одного документа на підставі виділених відомостей неможливо.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаФормаОплаты", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоЗарплатныхПроектов > 1 Тогда
		ТекстОшибки = НСтр("ru='Различается поле ""Зарплатный проект"". Ввод одного документа на основании выделенных ведомостей невозможен.';uk='Різниться поле ""Зарплатний проєкт"". Введення одного документа на підставі виділених відомостей неможливо.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаЗарплатныеПроекты", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоБанков > 1 Тогда
		ТекстОшибки = НСтр("ru='Различается поле ""Банк"". Ввод одного документа на основании выделенных ведомостей невозможен.';uk='Різниться поле ""Банк"". Введення одного документа на підставі виділених відомостей неможливе.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаБанки", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	//-- Локализация
	Возврат Результат;
	
КонецФункции

// Процедура формирует временную таблицу физических лиц по ведомостям различных типов в соответствии с параметрами.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//	Параметры - Структура - Структура параметров.
//
Процедура ДанныеОбОплатеВедомостей(МенеджерВременныхТаблиц, Параметры) Экспорт
	
	//++ Локализация
Запрос = Новый Запрос;
Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

Запрос.УстановитьПараметр("Организация", Параметры.Организация);

МассивВедомостей = Неопределено;
Параметры.Свойство("МассивВедомостей", МассивВедомостей);

Запрос.УстановитьПараметр("МассивВедомостей", МассивВедомостей);
Запрос.УстановитьПараметр("БезОтбораПоВедомостям", МассивВедомостей = Неопределено Или МассивВедомостей.Количество() = 0);

Работник = Неопределено;
Параметры.Свойство("Работник", Работник);
Запрос.УстановитьПараметр("Работник", Работник);
Запрос.УстановитьПараметр("БезОтбораПоРаботнику", Не ЗначениеЗаполнено(Работник));

ЛицевойСчет = Неопределено;
Параметры.Свойство("ЛицевойСчет", ЛицевойСчет);
Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
Запрос.УстановитьПараметр("БезОтбораПоЛицевомуСчету", Не ЗначениеЗаполнено(ЛицевойСчет));

Если Параметры.Свойство("МассивОпераций") Тогда
	Запрос.УстановитьПараметр("МассивОпераций", Параметры.МассивОпераций);
	Запрос.УстановитьПараметр("БезОтбораПоОперациям", Ложь);
ИначеЕсли Параметры.Свойство("ХозяйственнаяОперация") Тогда
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Параметры.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
	Запрос.УстановитьПараметр("БезОтбораПоОперациям", Ложь);
Иначе
	Запрос.УстановитьПараметр("МассивОпераций", Новый Массив);
	Запрос.УстановитьПараметр("БезОтбораПоОперациям", Истина);
КонецЕсли;

ИсключаемаяЗаявка = Неопределено;
Параметры.Свойство("Заявка", ИсключаемаяЗаявка);
Запрос.УстановитьПараметр("ИсключаемаяЗаявка", ИсключаемаяЗаявка);
Запрос.УстановитьПараметр("БезИсключаемойЗаявки", Не ЗначениеЗаполнено(ИсключаемаяЗаявка));

ИсключаемыйДокументОплаты = Неопределено;
Параметры.Свойство("ИсключаемыйДокументОплаты", ИсключаемыйДокументОплаты);
Запрос.УстановитьПараметр("ИсключаемыйДокументОплаты", ИсключаемыйДокументОплаты);
Запрос.УстановитьПараметр("БезИсключаемогоДокументаОплаты", Не ЗначениеЗаполнено(ИсключаемыйДокументОплаты));

Если Параметры.Свойство("ИсключатьОплаченные") Тогда
	Запрос.УстановитьПараметр("ИсключатьОплаченные", Истина);
Иначе
	Запрос.УстановитьПараметр("ИсключатьОплаченные", Ложь);
КонецЕсли;

Если Параметры.Свойство("ОтображатьДепонированные") Тогда
	Запрос.УстановитьПараметр("ОтображатьДепонированные", Истина);
Иначе
	Запрос.УстановитьПараметр("ОтображатьДепонированные", Ложь);
КонецЕсли;

Если Параметры.Свойство("ИсключатьВключенныеВЗаявки") Тогда
	Запрос.УстановитьПараметр("ИсключатьВключенныеВЗаявки", Истина);
Иначе
	Запрос.УстановитьПараметр("ИсключатьВключенныеВЗаявки", Ложь);
КонецЕсли;

Запрос.Текст = 
"ВЫБРАТЬ
|	ДанныеДокумента.Ссылка КАК Ведомость,
|	ДанныеДокумента.СуммаПоДокументу КАК СуммаПоДокументу
|ПОМЕСТИТЬ ВТВедомости
|ИЗ
|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ДанныеДокумента
|ГДЕ
|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) В (&МассивОпераций)
|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
|			ИЛИ &БезОтбораПоОперациям)
|	И ДанныеДокумента.СуммаПоДокументу <> 0
|	И ДанныеДокумента.Проведен
|	И ДанныеДокумента.Организация = &Организация
|	И (&БезОтбораПоВедомостям
|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ДанныеДокумента.Ссылка,
|	ДанныеДокумента.СуммаПоДокументу
|ИЗ
|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ДанныеДокумента
|ГДЕ
|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу) В (&МассивОпераций)
|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
|			ИЛИ &БезОтбораПоОперациям)
|	И ДанныеДокумента.СуммаПоДокументу <> 0
|	И ДанныеДокумента.Проведен
|	И ДанныеДокумента.Организация = &Организация
|	И (&БезОтбораПоВедомостям
|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ДанныеДокумента.Ссылка,
|	ДанныеДокумента.СуммаПоДокументу
|ИЗ
|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК ДанныеДокумента
|ГДЕ
|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком) В (&МассивОпераций)
|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
|			ИЛИ &БезОтбораПоОперациям)
|	И ДанныеДокумента.СуммаПоДокументу <> 0
|	И ДанныеДокумента.Проведен
|	И ДанныеДокумента.Организация = &Организация
|	И (&БезОтбораПоВедомостям
|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ДанныеДокумента.Ссылка,
|	ДанныеДокумента.СуммаПоДокументу
|ИЗ
|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК ДанныеДокумента
|ГДЕ
|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) В (&МассивОпераций)
|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
|			ИЛИ &БезОтбораПоОперациям)
|	И ДанныеДокумента.СуммаПоДокументу <> 0
|	И ДанныеДокумента.Проведен
|	И ДанныеДокумента.Организация = &Организация
|	И (&БезОтбораПоВедомостям
|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
|
|
|ИНДЕКСИРОВАТЬ ПО
|	Ведомость
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Работники.Ссылка КАК Ведомость,
|	Работники.Сотрудник,
|	Работники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
|	Работники.КВыплате КАК Сумма,
|	Работники.НомерЛицевогоСчета КАК ЛицевойСчет
|ПОМЕСТИТЬ ВТРаботники
|ИЗ
|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК Работники
|ГДЕ
|	Работники.Ссылка В
|			(ВЫБРАТЬ
|				Т.Ведомость
|			ИЗ
|				ВТВедомости КАК Т)
|	И (&БезОтбораПоРаботнику
|			ИЛИ Работники.Сотрудник.ФизическоеЛицо = &Работник)
|   И Работники.КВыплате <> 0
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	Работники.Ссылка,
|	Работники.Сотрудник,
|	Работники.Сотрудник.ФизическоеЛицо,
|	Работники.КВыплате,
|	""""
|ИЗ
|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК Работники
|ГДЕ
|	Работники.Ссылка В
|			(ВЫБРАТЬ
|				Т.Ведомость
|			ИЗ
|				ВТВедомости КАК Т)
|	И (&БезОтбораПоРаботнику
|			ИЛИ Работники.Сотрудник.ФизическоеЛицо = &Работник)
|   И Работники.КВыплате <> 0
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	Работники.Ссылка,
|	Работники.Сотрудник,
|	Работники.Сотрудник.ФизическоеЛицо,
|	Работники.КВыплате,
|	""""
|ИЗ
|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК Работники
|ГДЕ
|	Работники.Ссылка В
|			(ВЫБРАТЬ
|				Т.Ведомость
|			ИЗ
|				ВТВедомости КАК Т)
|	И (&БезОтбораПоРаботнику
|			ИЛИ Работники.Сотрудник.ФизическоеЛицо = &Работник)
|   И Работники.КВыплате <> 0
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	Работники.Ссылка,
|	Работники.Сотрудник,
|	Работники.Сотрудник.ФизическоеЛицо,
|	Работники.КВыплате,
|	Работники.БанковскийСчет
|ИЗ
|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Работники
|ГДЕ
|	Работники.Ссылка В
|			(ВЫБРАТЬ
|				Т.Ведомость
|			ИЗ
|				ВТВедомости КАК Т)
|	И (&БезОтбораПоРаботнику
|			ИЛИ Работники.Сотрудник.ФизическоеЛицо = &Работник)
|   И Работники.КВыплате <> 0
|
|ИНДЕКСИРОВАТЬ ПО
|	Ведомость,
|	ФизическоеЛицо
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗЛИЧНЫЕ
|	Оплата.Ведомость КАК Ведомость,
|	Оплата.ФизическоеЛицо КАК ФизическоеЛицо,
|	ИСТИНА КАК Оплачена,
|	ВЫБОР
|		КОГДА ЕСТЬNULL(Депоненты.Ссылка, ЗНАЧЕНИЕ(Документ.ДепонированиеЗарплаты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ДепонированиеЗарплаты.ПустаяСсылка)
|			ТОГДА ЛОЖЬ
|		ИНАЧЕ ИСТИНА
|	КОНЕЦ КАК Депонирована,
|	Оплата.Регистратор КАК ДокументОплаты
|ПОМЕСТИТЬ ВТСостоянияВедомостей
|ИЗ
|	РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК Оплата
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДепонированиеЗарплаты.Депоненты КАК Депоненты
|		ПО Оплата.Регистратор = Депоненты.Ссылка
|			И Оплата.Ведомость = Депоненты.Ссылка.Ведомость
|			И Оплата.ФизическоеЛицо = Депоненты.ФизическоеЛицо
|ГДЕ
|	Оплата.Ведомость В
|			(ВЫБРАТЬ
|				Т.Ведомость
|			ИЗ
|				ВТВедомости КАК Т)
|	И (&БезОтбораПоРаботнику
|			ИЛИ Оплата.ФизическоеЛицо = &Работник)
|	И Оплата.Организация = &Организация
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТРаботники.Ведомость,
|	ВТРаботники.ФизическоеЛицо,
|	СУММА(ВТРаботники.Сумма) КАК Сумма,
|	ВТРаботники.ЛицевойСчет,
|	ВТВедомости.СуммаПоДокументу,
|	ЕСТЬNULL(ВТСостоянияВедомостей.Оплачена, ЛОЖЬ) КАК Оплачена,
|	ЕСТЬNULL(ВедомостиЗаявки.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)) КАК Заявка
|ПОМЕСТИТЬ ДанныеВедомостейНаОплату
|ИЗ
|	ВТРаботники КАК ВТРаботники
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВедомости КАК ВТВедомости
|		ПО ВТРаботники.Ведомость = ВТВедомости.Ведомость
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ВедомостиЗаявки
|		ПО ВТРаботники.Ведомость = ВедомостиЗаявки.Ведомость
|			И (&БезОтбораПоОперациям
|				ИЛИ ВедомостиЗаявки.Ссылка.ХозяйственнаяОперация В (&МассивОпераций)
|				ИЛИ ВедомостиЗаявки.Ссылка.ХозяйственнаяОперацияПоЗарплате В (&МассивОпераций))
|			И (ВедомостиЗаявки.Ссылка.Проведен)
|			И (&БезИсключаемойЗаявки
|				ИЛИ ВедомостиЗаявки.Ссылка <> &ИсключаемаяЗаявка)
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияВедомостей КАК ВТСостоянияВедомостей
|		ПО ВТРаботники.Ведомость = ВТСостоянияВедомостей.Ведомость
|			И ВТРаботники.ФизическоеЛицо = ВТСостоянияВедомостей.ФизическоеЛицо
|ГДЕ
|	(НЕ &ИсключатьОплаченные
|			ИЛИ НЕ ЕСТЬNULL(ВТСостоянияВедомостей.Оплачена, ЛОЖЬ)
|			ИЛИ ЕСТЬNULL(ВТСостоянияВедомостей.Оплачена, ЛОЖЬ)
|				И НЕ &БезИсключаемогоДокументаОплаты
|				И ВТСостоянияВедомостей.ДокументОплаты = &ИсключаемыйДокументОплаты
|			ИЛИ &ОтображатьДепонированные
|				И ЕСТЬNULL(ВТСостоянияВедомостей.Депонирована, ЛОЖЬ))
|	И (НЕ &ИсключатьВключенныеВЗаявки
|			ИЛИ ЕСТЬNULL(ВедомостиЗаявки.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка))
|	И (&БезОтбораПоЛицевомуСчету
|			ИЛИ ВТРаботники.ЛицевойСчет = &ЛицевойСчет)
|
|СГРУППИРОВАТЬ ПО
|	ВТРаботники.Ведомость,
|	ВТРаботники.ФизическоеЛицо,
|	ВТРаботники.ЛицевойСчет,
|	ВТВедомости.СуммаПоДокументу,
|	ВТСостоянияВедомостей.Оплачена,
|	ВедомостиЗаявки.Ссылка
|
|;
|
|////////////////////////////////////////////////////////////////////////////////
|УНИЧТОЖИТЬ ВТВедомости
|;
|
|////////////////////////////////////////////////////////////////////////////////
|УНИЧТОЖИТЬ ВТРаботники
|;
|
|////////////////////////////////////////////////////////////////////////////////
|УНИЧТОЖИТЬ ВТСостоянияВедомостей
|";

Запрос.Выполнить();
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область УчетныеПолитики

// Устарела. Записывает настройки расчета резервов отпусков по данным учетной политики
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - записываемая организация.
// 	Период - Дата - дата настройки.
// 	УчетнаяПолитика - СправочникОбъект.УчетныеПолитикиОрганизаций - данные учетной политики.
// 	
Процедура ЗаписатьНастройкиРасчетаРезервовОтпусков(Организация, Период, УчетнаяПолитика) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область УчетТрудозатрат

// Преобразовывает переданный массив физических лиц в строку.
// Используется для представления краткого состава документов.
//
// Параметры:
//	ФизическиеЛица - Массив - массив элементов типа СправочникСсылка.ФизическиеЛица,
//	ДатаАктуальности - Дата - дата для получения фамилии, имени и отчества.
//	Состав - Строка - строка вида <Фамилия И.О., Фамилия И.О...>.
//
Процедура ЗаполнитьКраткийСоставФизЛиц(ФизическиеЛица, ДатаАктуальности, Состав) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Заполняет кадровые данные: тарифную ставку, отработанное время в переданной коллекции.
//
// Параметры:
//  Объект - ДокументОбъект.ВыработкаСотрудников, ДанныеФормыСтруктура - Заполняемый документ.
//  ИмяТЧ - Строка - имя табличной части, в которой требуется заполнить поля.
//  ЗаполняемыеПоля - Структура - структура, содержащая перечень полей к заполнению (см. ИнтеграцияБЗК.ПоляКадровыхДанных).
//  МассивСтрок - Массив - строки, в которых выполняется заполнение (если Неопределено, то поля заполняются во всех
//                         строках табличной части).
//
Процедура ЗаполнитьКадровыеДанныеСотрудников(Объект, ИмяТЧ, ЗаполняемыеПоля, МассивСтрок = Неопределено) Экспорт
	//++ Локализация

	Если Объект.Работники.Количество() = 0
		Или Не (ЗаполняемыеПоля.Свойство("ТарифнаяСтавка") И ЗаполняемыеПоля.ТарифнаяСтавка
			Или ЗаполняемыеПоля.Свойство("ОтработаноЧасов") И ЗаполняемыеПоля.ОтработаноЧасов) Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСтрок = Неопределено Тогда
		Коллекция = Объект[ИмяТЧ];
		ФизическиеЛица = Коллекция.Выгрузить(,"Работник").ВыгрузитьКолонку("Работник");
	Иначе
		Коллекция = МассивСтрок;
		ФизическиеЛица = Объект[ИмяТЧ].Выгрузить(МассивСтрок,"Работник").ВыгрузитьКолонку("Работник");
	КонецЕсли;
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапроса.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыЗапроса.Организация = Объект.Организация;
	ПараметрыЗапроса.НачалоПериода = НачалоМесяца(Объект.Дата);
	ПараметрыЗапроса.ОкончаниеПериода = КонецМесяца(Объект.Дата);
	ПараметрыЗапроса.КадровыеДанные = "РазрядКатегория,СовокупнаяТарифнаяСтавка,ВидСовокупнойТарифнойСтавки";
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапроса);
	
	ОтработанноеВремяСотрудников = Новый Соответствие;
	
	// получение данных об отработанном времени
	Если ЗаполняемыеПоля.Свойство("ОтработаноЧасов")
		И ЗаполняемыеПоля.ОтработаноЧасов
		И ЗначениеЗаполнено(Объект.НачалоПериода)
		И ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТаблицаСотрудники = Новый ТаблицаЗначений;
		ТаблицаСотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудники.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудники.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудники.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		
		Для Каждого СтрокаТаблицы Из ДанныеСотрудников Цикл
			СтрокаСотрудники = ТаблицаСотрудники.Добавить();
			СтрокаСотрудники.Сотрудник = СтрокаТаблицы.Сотрудник;
			СтрокаСотрудники.Период = Объект.НачалоПериода;
			СтрокаСотрудники.ДатаНачала = Объект.НачалоПериода;
			СтрокаСотрудники.ДатаОкончания = КонецДня(Объект.КонецПериода);
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСотрудники.Сотрудник,
		|	ТаблицаСотрудники.Период,
		|	ТаблицаСотрудники.ДатаНачала,
		|	ТаблицаСотрудники.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ТаблицаСотрудники КАК ТаблицаСотрудники");
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаСотрудники", ТаблицаСотрудники);
		Запрос.Выполнить();
		
		ПараметрыВТ = УчетРабочегоВремени.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
		ПараметрыВТ.ДатаНачала = Объект.НачалоПериода;
		ПараметрыВТ.ДатаОкончания = КонецДня(Объект.КонецПериода);
		ПараметрыВТ.МесяцДатаНачала = НачалоМесяца(Объект.НачалоПериода);
		ПараметрыВТ.МесяцДатаОкончания = КонецМесяца(Объект.КонецПериода);
		ПараметрыВТ.ДатаАктуальности = Объект.Дата;
		ПараметрыВТ.Организация = Объект.Организация;
		
		УчетРабочегоВремени.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(МенеджерВременныхТаблиц, Истина, ПараметрыВТ);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеУчетаВремени.Сотрудник,
		|	СУММА(ДанныеУчетаВремени.Часы) КАК ОтработаноЧасов
		|ИЗ
		|	ВТДанныеУчетаВремениИСостоянийСотрудников КАК ДанныеУчетаВремени
		|ГДЕ
		|	ДанныеУчетаВремени.ВидУчетаВремени.РабочееВремя = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеУчетаВремени.Сотрудник";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОтработанноеВремяСотрудников.Вставить(Выборка.Сотрудник, Выборка.ОтработаноЧасов);
		КонецЦикла;
		
	КонецЕсли;
	
	Отбор = Новый Структура("ФизическоеЛицо");
	
	Для Каждого Строка Из Коллекция Цикл
		
		Если ЗаполняемыеПоля.Свойство("ТарифнаяСтавка")
			И ЗаполняемыеПоля.ТарифнаяСтавка Тогда
			Строка.ТарифнаяСтавка = Неопределено;
		КонецЕсли;
		Если ЗаполняемыеПоля.Свойство("ОтработаноЧасов")
			И ЗаполняемыеПоля.ОтработаноЧасов Тогда
			Строка.ОтработаноЧасов = Неопределено;
		КонецЕсли;
		
		Отбор.ФизическоеЛицо = Строка.Работник;
		
		НайденныеСтроки = ДанныеСотрудников.НайтиСтроки(Отбор);
		Если Не НайденныеСтроки.Количество() = 0 Тогда
			
			Если ЗаполняемыеПоля.Свойство("ТарифнаяСтавка")
				И ЗаполняемыеПоля.ТарифнаяСтавка
				И НайденныеСтроки[0].ВидСовокупнойТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка
				И Не ЗначениеЗаполнено(Строка.ТарифнаяСтавка) Тогда
				Строка.ТарифнаяСтавка = НайденныеСтроки[0].СовокупнаяТарифнаяСтавка;
			КонецЕсли;
			
			Если ЗаполняемыеПоля.Свойство("ОтработаноЧасов")
				И ЗаполняемыеПоля.ОтработаноЧасов
				И Не ЗначениеЗаполнено(Строка.ОтработаноЧасов) Тогда
				Строка.ОтработаноЧасов = ОтработанноеВремяСотрудников[НайденныеСтроки[0].Сотрудник];
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;

	//-- Локализация
КонецПроцедуры

// Возвращает состав подразделения
// 
// Параметры:
// 	МассивФизЛиц - Массив - массив физлиц.
// 	Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение.
// 	Организация - СправочникСсылка.Организации - организация искомого подразделения. 
//
Процедура ЗаполнитьФизическиеЛицаПодразделения(МассивФизЛиц, Подразделение, Организация = Неопределено) Экспорт
	//++ Локализация
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыЗапроса.Организация = Организация;
	КонецЕсли;
	ПараметрыЗапроса.КадровыеДанные = "МестоВСтруктуреПредприятия";
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапроса);
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивФизЛиц = ДанныеСотрудников.Скопировать(Новый Структура("МестоВСтруктуреПредприятия", Подразделение),"ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо");
	//-- Локализация
КонецПроцедуры

// Определяется настройки отражения в бух. учете по умолчанию для указанного вида работ.
//
// Параметры:
// 	ДанныеРегистра - Структура - Описание полей см. в ресурсах регистра сведений БухучетРаботСотрудников.
//   ВидРабот - СправочникСсылка.ВидыРаботСотрудников - Вид работ.
//
Процедура ЗаполнитьПоДаннымРегистраБухучетВидаРабот(ДанныеРегистра, ВидРабот) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Формирует структуру полей кадровых данных сотрудников к заполнению
//
// Возвращаемое значение:
//  Структура - поля к заполнению.
//
Функция ПоляКадровыхДанныхСотрудниковКЗаполнению() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТарифнаяСтавка",			Ложь);
	Результат.Вставить("ОтработаноЧасов",			Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КадровыйУчет

// Заполняет таблицу значений содержащую поля ФизическоеЛицо и Сотрудник
// 
// Параметры:
//	Таблица				-ТаблицаЗначений - Таблица значений, содержащая поля Сотрудник и соответствующее сотруднику ФизическоеЛицо
//	СписокФизическихЛиц - Массив ссылок на элементы справочника ФизическиеЛица или 
//						- СправочникСсылка.ФизическиеЛица
//						- Неопределено - в таблицу войдут "основные" сотрудники всех
//							физических лиц когда либо работавших в организации.
//	ТолькоРазрешенные	- Булево - признак использования РАЗРЕШЕННЫЕ в запросе.
//	Организация			- СправочникСсылка.Организации - ссылка на организацию.
//	Период				- Дата - дата получения сотрудников.
Процедура ЗаполнитьОсновныхСотрудниковФизическихЛиц(Таблица, СписокФизическихЛиц, ТолькоРазрешенные, Организация, Период) Экспорт
	Таблица = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(
		СписокФизическихЛиц,
		ТолькоРазрешенные,
		Организация,
		Период);
КонецПроцедуры

// Возвращает таблицу значений заполненную данными сотрудников, перечисленными в 
// параметре СписокНеобходимыхДанных.
//
// Параметры:
//	Таблица           - ТаблицаЗначений   - Таблица значений, содержащая запрошенные данные.
//	ТолькоРазрешенные - Булево
//  СписокСотрудников - Массив ссылок на элементы справочника сотрудники или
//						  СправочникСсылка.Сотрудники.
//  КадровыеДанные - 	Строка - список полей данных, перечисленных через запятую 
//						или Массив строк с полями данных, которые необходимо получить.
//	ДатаПолученияДанных	- дата на которую необходимо получить данные сотрудников, 
//						применимо к данным, носящим периодический характер.
//						Если дату не указывать, будут получены самые последние данные.
//  ПоляОтбораПериодическихДанных - Структура, в качестве ключа указывается имя таблицы, содержащей
//									периодические данные (например ФИОФизическихЛиц, ГражданствоФизическихЛиц).
//									В качестве значений коллекция условий отбора, 
//									соединяемых по "И" и применяемых к регистру сведений.
//									Коллекция строки которой имеют поля.
//										* ЛевоеЗначение - строка, имя поля регистра сведений.
//										* ВидСравнения - строка, вид сравнения, допустимый в языке запросов.
//										* ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение.
//
//	Список полей, допустимых в параметре КадровыеДанные см. КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеСотрудников.
//
Процедура ЗаполнитьТаблицуКадровыеДанныеСотрудников(Таблица, ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, ДатаПолученияДанных = '00010101', ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	Таблица = КадровыйУчет.КадровыеДанныеСотрудников(ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, ДатаПолученияДанных, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
КонецПроцедуры

#КонецОбласти

#Область ПрочийПрограммныйИнтерфейс

// Заполняет типа налога в зависимости от операции по зарплате.
//
// Параметры:
//   ВидОперации - ПеречислениеСсылка.ВидыОперацийПоЗарплате - вид операции по зарплате.
//   ТипНалога  - ПеречислениеСсылка.ТипыНалогов - "Типы налогов".
// 
Процедура ЗаполнитьТипНалогаОперацииПоЗарплаты(ТипНалога, ВидОперации) Экспорт
	//++ Локализация

	//++ НЕ БЗК
	Если ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛ Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛ;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоначисленныйПоРезультатамПроверки Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛДоначисленныйПоРезультатамПроверки;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛДоходыКонтрагентов;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПередачаЗадолженностиВНалоговыйОрган Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛПередачаЗадолженностиВНалоговыйОрган;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛПрочиеРасчетыСПерсоналом;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛДоходыКонтрагентов;
    ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивиденды Тогда
        ТипНалога = Перечисления.ТипыНалогов.НФДЛДивиденды;
    ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивидендыСотрудникам Тогда
        ТипНалога = Перечисления.ТипыНалогов.НФДЛДивидендыСотрудникам;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВоенныйСбор Тогда
		ТипНалога = Перечисления.ТипыНалогов.ВоенныйСбор;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВСДоходыКонтрагентов Тогда
		ТипНалога = Перечисления.ТипыНалогов.ВоенныйСбор;	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВСРасчетыСБывшимиСотрудниками Тогда
		ТипНалога = Перечисления.ТипыНалогов.ВоенныйСбор;	
	КонецЕсли;
	//-- НЕ БЗК
	//-- Локализация
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЭтаповЗакрытияМесяца
//++ Локализация
//-- Локализация
#КонецОбласти

//++ Локализация
// Процедура формирует временные таблицы данных ведомостей различных типов в соответствии с параметрами.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//	Параметры - Структура - Структура параметров.
//
Процедура ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФормаОплатыНаличная",    Перечисления.ФормыОплаты.Наличная);
	Запрос.УстановитьПараметр("ФормаОплатыБезналичная", Перечисления.ФормыОплаты.Безналичная);
	
	Организация = Неопределено;
	Параметры.Свойство("Организация", Организация);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("БезОтбораПоОрганизации", Не ЗначениеЗаполнено(Организация));
	
	ПериодРегистрации = Неопределено;
	Параметры.Свойство("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("БезОтбораПоПериодуРегистрации", Не ЗначениеЗаполнено(ПериодРегистрации));
	
	МассивВедомостей = Неопределено;
	Параметры.Свойство("МассивВедомостей", МассивВедомостей);
	Запрос.УстановитьПараметр("МассивВедомостей", МассивВедомостей);
	Запрос.УстановитьПараметр("БезОтбораПоВедомостям", МассивВедомостей = Неопределено Или МассивВедомостей.Количество() = 0);
	
	Если Параметры.Свойство("МассивОпераций") Тогда
		Запрос.УстановитьПараметр("МассивОпераций", Параметры.МассивОпераций);
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Ложь);
	ИначеЕсли Параметры.Свойство("ХозяйственнаяОперация") Тогда
		Запрос.УстановитьПараметр("МассивОпераций",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.ХозяйственнаяОперация));
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Ложь);
	Иначе
		Запрос.УстановитьПараметр("МассивОпераций", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("ФизическиеЛица") Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", Параметры.ФизическиеЛица);
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Ложь);
	ИначеЕсли Параметры.Свойство("Работник") Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Работник));
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("Раздатчик") Тогда
		Запрос.УстановитьПараметр("Раздатчик",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Раздатчик));
			Запрос.УстановитьПараметр("БезОтбораПоРаздатчику", Ложь);
	Иначе
		Запрос.УстановитьПараметр("Раздатчик", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоРаздатчику", Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("Касса") Тогда
		Запрос.УстановитьПараметр("Касса",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Касса));
		Запрос.УстановитьПараметр("БезОтбораПоКассе", Ложь);
	Иначе
		Запрос.УстановитьПараметр("Касса", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоКассе", Истина);
	Конецесли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ведомость.Ссылка КАК Ведомость,
	|	Ведомость.Проведен КАК Проведен,
	|	Ведомость.Организация КАК Организация,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.СпособВыплаты КАК ОбъектВыплаты,
	|	Ведомость.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	NULL КАК Банк,
	|	NULL КАК Касса,
	|	NULL КАК Раздатчик,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу
	|ПОМЕСТИТЬ ВТВедомости
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	NULL,
	|	Ведомость.Банк,
	|	NULL,
	|	NULL,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	NULL,
	|	NULL,
	|	Ведомость.Касса,
	|	NULL,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|	И (&БезОтбораПоКассе
	|		ИЛИ Ведомость.Касса В (&Касса)
	|		ИЛИ Ведомость.Касса = ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Ведомость.Раздатчик,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|	И (&БезОтбораПоРаздатчику
	|		ИЛИ Ведомость.Раздатчик В (&Раздатчик))
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Зарплата.Ссылка КАК Ведомость,
	|	&ФормаОплатыБезналичная КАК ФормаОплаты,
	|	Зарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Зарплата.КВыплате КАК Сумма,
	|	Зарплата.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
	|	Зарплата.ДокументОснование КАК ДокументОснование,
	|	Зарплата.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТДанныеВедомостейКВыплате
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Зарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Зарплата.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Зарплата.ФизическоеЛицо,
	|	Зарплата.КВыплате,
	|	Зарплата.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
	|	Зарплата.ДокументОснование,
	|	Зарплата.СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Зарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Зарплата.Ссылка,
	|	&ФормаОплатыНаличная,
	|	Зарплата.ФизическоеЛицо,
	|	Зарплата.КВыплате,
	|	Зарплата.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,	
	|	Зарплата.ДокументОснование,
	|	Зарплата.СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Зарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Зарплата.Ссылка,
	|	&ФормаОплатыНаличная,
	|	Зарплата.ФизическоеЛицо,
	|	Зарплата.КВыплате,
	|	Зарплата.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
	|	Зарплата.ДокументОснование,
	|	Зарплата.СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Зарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура формирует временные таблицы состояния ведомостей различных типов в соответствии с параметрами.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//	Параметры - Структура - Структура параметров.
//
Процедура ПодготовитьДанныеОСостоянииВедомостей(МенеджерВременныхТаблиц, Параметры) Экспорт
	
	ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, Параметры);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Параметры.Свойство("ДатаАктуальности") Тогда
		Запрос.УстановитьПараметр("ДатаАктуальности", Параметры.ДатаАктуальности);
	Иначе
		Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Параметры.Свойство("ФизическиеЛица") Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", Параметры.ФизическиеЛица);
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Ложь);
	ИначеЕсли Параметры.Свойство("Работник") Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Работник));
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Истина);
	КонецЕсли;
	
	ИсключитьДокументОплаты = Неопределено;
	Параметры.Свойство("ИсключитьДокументОплаты", ИсключитьДокументОплаты);
	Запрос.УстановитьПараметр("ИсключаемыйДокументОплаты", ИсключитьДокументОплаты);
	Запрос.УстановитьПараметр("БезИсключенияДокументаОплаты", Не ЗначениеЗаполнено(ИсключитьДокументОплаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеВедомостей.Ведомость КАК Ведомость,
	|	ДанныеВедомостей.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВедомостей.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ОплатаВедомостей.Регистратор ЕСТЬ NULL ТОГДА ЛОЖЬ
	|		ИНАЧЕ ОплатаВедомостей.Регистратор ССЫЛКА Документ.ДепонированиеЗарплаты
	|	КОНЕЦ КАК Депонирована,
	|	ОплатаВедомостей.Регистратор КАК ДокументВыплаты,
	|	ДанныеВедомостей.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
	|	СУММА(ВЫБОР
	|		КОГДА ОплатаВедомостей.Регистратор ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеВедомостей.Сумма
	|	КОНЕЦ) КАК СуммаОплаты,
	|	СУММА(ДанныеВедомостей.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТВыплатыПоВедомостям
	|ИЗ
	|	ВТДанныеВедомостейКВыплате КАК ДанныеВедомостей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|		ПО ДанныеВедомостей.Ведомость = ОплатаВедомостей.Ведомость
	|			И ДанныеВедомостей.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо
	|			И ДанныеВедомостей.ГруппаУчетаНачислений = ОплатаВедомостей.ГруппаУчетаНачислений
	|			И (&БезИсключенияДокументаОплаты
	|				ИЛИ ОплатаВедомостей.Регистратор <> &ИсключаемыйДокументОплаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВедомостей.Ведомость,
	|	ДанныеВедомостей.ФормаОплаты,
	|	ДанныеВедомостей.ФизическоеЛицо,
	|	ДанныеВедомостей.ГруппаУчетаНачислений,
	|	ДанныеВедомостей.ХозяйственнаяОперация,
	|	ОплатаВедомостей.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведомости.Ведомость КАК Ведомость,
	|	Расшифровка.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИСТИНА КАК Ошибка
	|ПОМЕСТИТЬ ВТОшибкиПеречисления
	|ИЗ
	|	Документ.ПодтверждениеЗачисленияЗарплаты КАК Подтверждение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК Ведомости
	|		ПО Подтверждение.ПервичныйДокумент = Ведомости.Ведомость
	|			И Подтверждение.Проведен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодтверждениеЗачисленияЗарплаты.Сотрудники КАК Расшифровка
	|		ПО Расшифровка.РезультатЗачисленияЗарплаты <> ЗНАЧЕНИЕ(Перечисление.РезультатыЗачисленияЗарплаты.Зачислено)
	|			И Подтверждение.Ссылка = Расшифровка.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомости.Ведомость,
	|	Расшифровка.ФизическоеЛицо,
	|	ИСТИНА
	|ИЗ
	|	Документ.ПодтверждениеЗачисленияЗарплаты КАК Подтверждение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыплатыПоВедомостям КАК Ведомости
	|		ПО Подтверждение.ПервичныйДокумент = Ведомости.ДокументВыплаты
	|			И Подтверждение.Проведен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодтверждениеЗачисленияЗарплаты.Сотрудники КАК Расшифровка
	|		ПО Расшифровка.РезультатЗачисленияЗарплаты <> ЗНАЧЕНИЕ(Перечисление.РезультатыЗачисленияЗарплаты.Зачислено)
	|			И Расшифровка.ФизическоеЛицо = Ведомости.ФизическоеЛицо
	|			И Подтверждение.Ссылка = Расшифровка.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОшибкиПеречисления.Ошибка, ЛОЖЬ) КАК ОшибкаПеречисления,
	|	ВыплатыПоВедомостям.*
	|ПОМЕСТИТЬ ВТСостояниеВыплатыПоВедомостям
	|ИЗ
	|	ВТВыплатыПоВедомостям КАК ВыплатыПоВедомостям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиПеречисления КАК ОшибкиПеречисления
	|		ПО ВыплатыПоВедомостям.Ведомость = ОшибкиПеречисления.Ведомость
	|			И ВыплатыПоВедомостям.ФизическоеЛицо = ОшибкиПеречисления.ФизическоеЛицо
	|ГДЕ
	|   ВыплатыПоВедомостям.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВыплатыПоВедомостям;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расшифровка.Ведомость,
	|	Заявка.ХозяйственнаяОперация,
	|	МАКСИМУМ(Заявка.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаявкиВедомостей
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК Расшифровка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК ДанныеВедомостей
	|		ПО Расшифровка.Ведомость = ДанныеВедомостей.Ведомость
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|		ПО Расшифровка.Ссылка = Заявка.Ссылка
	|			И Заявка.Проведен
	|ГДЕ
	|	Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|	ИЛИ (Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|		И Заявка.НДФЛПоВедомостям)
	|
	|СГРУППИРОВАТЬ ПО
	|	Расшифровка.Ведомость,
	|	Заявка.ХозяйственнаяОперация
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры
//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//++ Локализация
//-- Локализация
#КонецОбласти