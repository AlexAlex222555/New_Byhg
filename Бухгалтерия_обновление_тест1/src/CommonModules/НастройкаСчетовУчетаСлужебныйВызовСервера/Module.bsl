#Область СлужебныеПроцедурыИФункции

//++ Локализация

Функция СсылкаНастройкаСчетовУчета(ОбъектНастройки, РазделУчета = Неопределено) Экспорт
	
	ТекстГиперссылки = НСтр("ru='Настроить счета учета%Детализация%';uk='Настроїти рахунки обліку%Детализация%'");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПорядокОтраженияНаСчетахУчета.Организация КАК Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПорядокОтраженияНаСчетахУчета.МестоУчета) КАК КоличествоНастроек
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтраженияНаСчетахУчета
	|ГДЕ
	|	ПорядокОтраженияНаСчетахУчета.АналитикаУчета = &ОбъектНастройки
	|	И ПорядокОтраженияНаСчетахУчета.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОтраженияНаСчетахУчета.Организация
	|ИТОГИ
	|	СУММА(КоличествоНастроек)
	|ПО
	|	ОБЩИЕ";
	Запрос.УстановитьПараметр("ОбъектНастройки", ОбъектНастройки);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстГиперссылки = СтрЗаменить(НСтр("ru='Изменить настройки счетов учета%Детализация% (%КоличествоНастроек%)';uk='Змінити настройки рахунків обліку%Детализация% (%КоличествоНастроек%)'"), "%КоличествоНастроек%", Выборка.КоличествоНастроек);
	КонецЕсли;
	ТекстДетализации = НСтр("ru='по организациям';uk='по організаціях'");
	Если РазделУчета = Неопределено Тогда
		РазделыУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.РазделыУчетаПоАналитикеУчета(ОбъектНастройки);
		Если РазделыУчета.Количество() Тогда
			РазделУчета = РазделыУчета.Получить(0);
		КонецЕсли;
	КонецЕсли;
	Если РазделУчета <> Неопределено Тогда
		НастройкиМестаУчета = НастройкаСчетовУчета.НастройкиМестаУчетаПоРазделуУчета(РазделУчета);
		ПредставлениеДетализации = НастройкиМестаУчета.ПредставлениеДетализации;
		Если ЗначениеЗаполнено(ПредставлениеДетализации) Тогда
			ТекстДетализации = ПредставлениеДетализации;
		КонецЕсли;
	КонецЕсли;
	
	ТекстГиперссылки = СтрЗаменить(ТекстГиперссылки, "%Детализация%", " " + ТекстДетализации);
	
	Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки, , ЦветаСтиля.ЦветГиперссылки, ,"ОткрытьРабочееМестоНастроекСчетовУчета");
	
КонецФункции

//-- Локализация

#Область НастройкаВыбораСубконто

Функция ОписаниеТипаВсеДокументы() Экспорт
	
	Возврат Документы.ТипВсеСсылки() ;
	
КонецФункции

Функция ОписаниеТиповДоговоров(ТолькоСКонтрагентом = Истина) Экспорт
	
	ТипыДоговоров = Новый Массив;
	ТипыДоговоров.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	ТипыДоговоров.Добавить(Тип("СправочникСсылка.ДоговорыКредитовИДепозитов"));
	
	Если НЕ ТолькоСКонтрагентом Тогда
		ТипыДоговоров.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов(ТипыДоговоров);
	
КонецФункции

Функция ВсеТипыСвязанныхСубконто() Экспорт
	
	СвязанныеСубконто = Новый Соответствие;
	
	УстановитьТипыСвязанныхСубконто(СвязанныеСубконто);
	
	СвязанныеСубконто.Вставить("Организация", НастройкаСчетовУчета.ТипыСвязанныеСОрганизацией());
	
	Возврат СвязанныеСубконто;
	
КонецФункции

Процедура УстановитьТипыСвязанныхСубконто(СвязанныеСубконто) Экспорт
	
	ТипыСубконто =  ОписаниеТиповДоговоров(Истина);
	ТипыСубконто = Новый ОписаниеТипов(ТипыСубконто, Документы.ТипВсеСсылки().Типы());
	ТипыСубконто = Новый ОписаниеТипов(ТипыСубконто,"СправочникСсылка.БанковскиеСчетаКонтрагентов");
	СвязанныеСубконто.Вставить("Контрагент", ТипыСубконто);
	СвязанныеСубконто.Вставить("Партнер", ТипыСубконто);
	
	ТипыСубконто = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов");
	//++ Локализация
	ТипыСубконто = Новый ОписаниеТипов(ТипыСубконто, "СправочникСсылка.ПартииТМЦВЭксплуатации");
	//-- Локализация
	СвязанныеСубконто.Вставить("ФизическоеЛицо", ТипыСубконто);
	
	ТипыСубконто = Новый ОписаниеТипов(Документы.ТипВсеСсылки().Типы());
	СвязанныеСубконто.Вставить("ПодотчетноеЛицо", ТипыСубконто);
	
	
	//++ Локализация
	ТипыСубконто = Новый ОписаниеТипов("СправочникСсылка.ПартииТМЦВЭксплуатации");
	СвязанныеСубконто.Вставить("Номенклатура", ТипыСубконто);
	//-- Локализация
	
	ТипыСубконто = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	СвязанныеСубконто.Вставить("ТипНоменклатуры", ТипыСубконто);
	СвязанныеСубконто.Вставить("ГруппаФинУчетаНоменклатуры", ТипыСубконто);
	СвязанныеСубконто.Вставить("ГруппаАналитическогоУчетаНоменклатуры", ТипыСубконто);
	
КонецПроцедуры

Функция ПолучитьСвойстваСчета(Счет) Экспорт
	
	Если ТипЗнч(Счет) = РеглУчетКлиентСервер.ТипПланСчетов() Тогда
		Возврат РеглУчетСервер.ПолучитьСвойстваСчета(Счет);
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#КонецОбласти
