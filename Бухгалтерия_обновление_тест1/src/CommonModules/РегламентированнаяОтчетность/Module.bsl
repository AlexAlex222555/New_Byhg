
////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие процедуры и функции для форм регламентированной
// отчетности.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
//
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	Если ВидыДоступа.Найти("Организации", "Имя") = Неопределено Тогда
		
		ВидДоступа = ВидыДоступа.Добавить();
		ВидДоступа.Имя = "Организации";
		ВидДоступа.Представление = НСтр("ru='Организации';uk='Організації'");
		ВидДоступа.ТипЗначений = Тип("СправочникСсылка.Организации");
		
	КонецЕсли;
	
КонецПроцедуры


// См.
// ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке.

Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт

	Типы.Добавить(Метаданные.Справочники.РегламентированныеОтчеты);
	
КонецПроцедуры

#КонецОбласти


// Возвращает таблицу, содержащую доступные регламентированные отчеты, ограниченные переданным отбором.
//
// Параметры:
//   Отбор - Массив - массив имен отчетов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - доступные регламентированные отчеты, ограниченные переданным отбором.
//
Функция ТаблицаДоступныеРегламентированныеОтчеты(Отбор) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(РегламентированныеОтчеты.Наименование КАК СТРОКА(255)) КАК НаименованиеОтчета,
	|	РегламентированныеОтчеты.Ссылка КАК СсылкаВидОтчета,
	|	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкрытыеРегламентированныеОтчеты КАК СкрытыеРегламентированныеОтчеты
	|		ПО (СкрытыеРегламентированныеОтчеты.РегламентированныйОтчет = РегламентированныеОтчеты.Ссылка)
	|ГДЕ
	|	СкрытыеРегламентированныеОтчеты.РегламентированныйОтчет ЕСТЬ NULL
	|	И РегламентированныеОтчеты.ИсточникОтчета В(&Отбор)
	|	И НЕ РегламентированныеОтчеты.ЭтоГруппа");
	
	Запрос.УстановитьПараметр("Отбор", Отбор);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	

КонецПроцедуры


// Функция возвращает ссылку на головную организацию.
//
// Возвращаемое значение: ссылка на элемент справочника организаций.
//
// Параметры:
// 	Организация - ссылка на элемент справочника организаций.
//
Функция ГоловнаяОрганизация(Организация) Экспорт
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
	Если НЕ ЗначениеЗаполнено(Организация)
	 ИЛИ НЕ ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
	 
		Возврат Организация;
		
	Иначе
		
		Возврат ГоловнаяОрганизация; 
		
	КонецЕсли;

КонецФункции 

Функция ВерсияПрограммы() Экспорт
	
	Возврат СокрЛП(Метаданные.Версия);
	
КонецФункции

Функция НазваниеПрограммы() Экспорт
	
	Возврат РегламентированнаяОтчетностьПереопределяемый.КраткоеНазваниеПрограммы();
	
КонецФункции

Функция НазваниеИВерсияПрограммы() Экспорт
	
	Возврат ВРЕГ(Лев(НазваниеПрограммы() + " " + ВерсияПрограммы(), 40));
	
КонецФункции

Процедура ВставитьПоказательВСтруктуру(СтруктураПоказателей, ИмяПоказателя, ПризнакАвтозаполнения, ПризнакРасшифровки, ПризнакЗапретаРедактирования = Ложь) Экспорт	
	
	// Вставляем в структуру новый показатель.
	СтруктураПоказателей.Вставить(ИмяПоказателя, Новый Массив(3));	
	
	// Устанавливаем признак автозаполнения показателя.
	СтруктураПоказателей[ИмяПоказателя][0] = ПризнакАвтозаполнения;
	
	// Устанавливаем признак расшифровки показателя.
	СтруктураПоказателей[ИмяПоказателя][1] = ПризнакРасшифровки;
	
	// Устанавливаем признак запрета редактирования показателя.
	СтруктураПоказателей[ИмяПоказателя][2] = ПризнакЗапретаРедактирования;
	
КонецПроцедуры

Функция ПолучитьДокФизЛица(ФизЛицо, ДатаЗначения) Экспорт
	
	Удостоверения = РегистрыСведений.ДокументыФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо));

	Если Удостоверения.Количество() > 0 Тогда
		Возврат Удостоверения[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


Процедура ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(Идентификаторы) Экспорт
	
	 
КонецПроцедуры

Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
#КонецОбласти


#Область ПроцедурыИФункцииВыгрузки

Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено) Экспорт 
	
	Если (СтрНайти(Узел.Тип, "A") <> 0 ИЛИ СтрНайти(Узел.Тип, "А") <> 0)
	   И (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
		Возврат Истина;
	КонецЕсли;
	
	Если Узел.Формат = "N" Тогда
		ОбязательноеНулевоеЗначение = Ложь;
		Если ТипЗнч(Узел.Показатели) = Тип("Структура") Тогда
			ФорматПредставленияНуля = Неопределено;
			Если Узел.Показатели.Свойство("ЧН" + Узел.Ключ, ФорматПредставленияНуля) Тогда
				ОбязательноеНулевоеЗначение = НЕ ПустаяСтрока(Формат(0, ФорматПредставленияНуля));
			КонецЕсли; 
		КонецЕсли;
		ПустойУзел = (Узел.Значение = "0" ИЛИ НЕ ЗначениеЗаполнено(Узел.Значение)) И НЕ ОбязательноеНулевоеЗначение;
	Иначе
		ПустойУзел = НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел) Экспорт 
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр Из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель) Экспорт 
	
	Для Каждого Стр Из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Процедура УдалитьУзел(Узел) Экспорт 
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML(ИмяФормы, ИмяМакета) Экспорт 
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если ТипЗнч(ИмяФормы) = Тип("Строка") Тогда 
		Если Метаданные.Отчеты.Найти(ИмяФормы) = Неопределено Тогда 
			Макет = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакета);
		Иначе
			Макет = Отчеты[ИмяФормы].ПолучитьМакет(ИмяМакета);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИмяФормы) = Тип("ФормаКлиентскогоПриложения") Тогда 
		Макет = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы.ИмяФормы).ПолучитьМакет(ИмяМакета);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Видимость = Макет.Область(НомСтр, 0, НомСтр, 0).Видимость;
			Если Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПолучитьДеревоВыгрузки(Форма, ИмяМакета) Экспорт 
	СтруктураВыгрузки = Неопределено;
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда 
		Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
			Если Нрег(Реквизит.Имя) = Нрег("СтруктураВыгрузки") Тогда 
				СтруктураВыгрузки = Форма.СтруктураВыгрузки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураВыгрузки) = Тип("ДанныеФормыДерево") Тогда 
		Если СтруктураВыгрузки.ПолучитьЭлементы().Количество() > 0 Тогда 
			ДеревоВыгрузки = ДанныеФормыВЗначение(СтруктураВыгрузки, Тип("ДеревоЗначений"));
		Иначе 
			Если ТипЗнч(Форма) = Тип("Структура") И Форма.Свойство("ИмяФормы") Тогда 
				ДеревоВыгрузки = ИзвлечьСтруктуруXML(Форма.ИмяФормы, ИмяМакета);
			Иначе
				ДеревоВыгрузки = ИзвлечьСтруктуруXML(Форма, ИмяМакета);
			КонецЕсли;
			ЗначениеВДанныеФормы(ДеревоВыгрузки, СтруктураВыгрузки);
		КонецЕсли;
		Возврат ДеревоВыгрузки;
	Иначе
		Если ТипЗнч(Форма) = Тип("Структура") И Форма.Свойство("ИмяФормы") Тогда 
			Возврат ИзвлечьСтруктуруXML(Форма.ИмяФормы, ИмяМакета)
		Иначе 
			Возврат ИзвлечьСтруктуруXML(Форма, ИмяМакета)
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ИмеютсяАналогичныеСоседниеУзлыКлючРаздел(Стр) Экспорт 
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ, Раздел", Стр.Ключ, Стр.Раздел), Ложь).Количество() > 1);
	
КонецФункции

Функция ИмеютсяАналогичныеСоседниеУзлыКлюч(Стр) Экспорт 
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Функция СоздатьНовыйПотокXML(Кодировка = "utf-8") Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку(Кодировка);
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

Функция УсловиеВыполнено(Владелец, ПараметрыВыгрузки, Условие, ИмяРаздела = "Титульный", Узел = Неопределено) Экспорт
	
	Попытка
		РезультатВычисленияВыражения = ОбщегоНазначения.ВычислитьВБезопасномРежиме(
			СтрЗаменить(Условие, "&", "Параметры."), ПараметрыВыгрузки);
		
		Если РезультатВычисленияВыражения <> Неопределено Тогда
			Если РезультатВычисленияВыражения = 1 ИЛИ РезультатВычисленияВыражения = 0
			 ИЛИ РезультатВычисленияВыражения = Истина ИЛИ РезультатВычисленияВыражения = Ложь Тогда
				Возврат НЕ (Булево(РезультатВычисленияВыражения) = Ложь);
			Иначе
				СообщитьВТаблицуСообщений(Владелец, "Не удалось вычислить выражение-условие: """ + Условие + """!", ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		СообщитьВТаблицуСообщений(Владелец, "Не удалось вычислить выражение-условие: """ + Условие + """!", ИмяРаздела, "");
		Возврат Истина;
		
	КонецПопытки;
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел) Экспорт 
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(мДанныеОтчета, Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Если ТипЗнч(ПоказателиРаздела) = Тип("Структура") Тогда
				Для Каждого Эл Из ПоказателиРаздела Цикл
					ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел) Экспорт 
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист Из СтрокаДерева.Строки Цикл
				Если Лист.Тип = "А" ИЛИ Лист.Тип = "A" Тогда 
					ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
				КонецЕсли;
			КонецЦикла;
			Для каждого Лист Из СтрокаДерева.Строки Цикл
				Если Не (Лист.Тип = "А" ИЛИ Лист.Тип = "A") Тогда 
					ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
				КонецЕсли;
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ЗначениеСоответствуетФормату(Форма, Стр) Экспорт
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТаблицуСообщений(Форма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТаблицуСообщений(Форма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции 

Функция ПредставлениеПоказателя(Стр) Экспорт 
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции


Функция СформироватьСтруктуруДопАтрибутов(ИмяФормы, ИмяМакета) Экспорт 
	
	ДопАтрибуты = Новый Структура;
	
	Если ТипЗнч(ИмяФормы) = Тип("ФормаКлиентскогоПриложения") Тогда 
		Макет = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы.ИмяФормы).ПолучитьМакет(ИмяМакета);
	Иначе 
		Макет = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
	Для НомСтр = 1 По Макет.ВысотаТаблицы Цикл
		АтрКлюч = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
		Если НЕ ПустаяСтрока(АтрКлюч) Тогда
			АтрКлюч = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(".- ", АтрКлюч, "___");
			ДопАтрибуты.Вставить(АтрКлюч, СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДопАтрибуты;
	
КонецФункции


Процедура ОбработатьУсловныеЭлементы(Форма, Знач ПараметрыВыгрузки, Узел) Экспорт 
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Форма.мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Форма, ПараметрыВыгрузки, ТекСтр.Условие, , Узел) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Форма,ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, Кодировка = "utf-8") Экспорт 
	
	ПотокXML = СоздатьНовыйПотокXML(Кодировка); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииФильтрацииОрганизацийВСтартовойФормеРегламентированногоОтчета

// Процедура возвращает список организаций - юридических лиц.
//
// Параметры:
//  СписокЮрЛиц - СписокЗначений - список организаций, являющихся юридическими лицами
//  Текст       - Строка - подстрока поиска в наименовании организации.
//
Процедура ПолучитьСписокДоступныхЮридическихЛиц(СписокЮрЛиц = Неопределено, Знач Текст = Неопределено) Экспорт
	
	Если СписокЮрЛиц = Неопределено ИЛИ ТипЗнч(СписокЮрЛиц) <> Тип("СписокЗначений") Тогда
		
		СписокЮрЛиц = Новый СписокЗначений;
		
	КонецЕсли;
	
	ДополнитьСтрокуСпециальнымиСимволами(Текст);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	Организации.Ссылка,
				   |	Организации.Наименование
				   |ИЗ
				   |	Справочник.Организации КАК Организации
				   |ГДЕ
				   |	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
				   |	И НЕ Организации.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Запрос.Текст = Запрос.Текст + " И Организации.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""";
		Запрос.УстановитьПараметр("Текст", Текст);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Наименование";
	
	РегламентированнаяОтчетностьПереопределяемый.СформироватьТекстЗапросаДляПолученияДоступныхЮридическихЛиц(
		Запрос.Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокЮрЛиц.Добавить(Выборка.Ссылка, Выборка.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура возвращает список организаций - индивидуальных предпринимателей.
//
// Параметры:
//  СписокФизЛиц - СписокЗначений - список организаций, являющихся индивидуальными предпринимателями
//  Текст        - Строка - подстрока поиска в наименовании организации.
//
Процедура ПолучитьСписокДоступныхИндивидуальныхПредпринимателей(СписокФизЛиц = Неопределено, Знач Текст = Неопределено) Экспорт
	
	Если СписокФизЛиц = Неопределено ИЛИ ТипЗнч(СписокФизЛиц) <> Тип("СписокЗначений") Тогда
		
		СписокФизЛиц = Новый СписокЗначений;
		
	КонецЕсли;
	
	ДополнитьСтрокуСпециальнымиСимволами(Текст);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	Организации.Ссылка,
				   |	Организации.Наименование
				   |ИЗ
				   |	Справочник.Организации КАК Организации
				   |ГДЕ
				   |	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
				   |	И НЕ Организации.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Запрос.Текст = Запрос.Текст + " И Организации.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""";
		Запрос.УстановитьПараметр("Текст", Текст);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Наименование";
	
	РегламентированнаяОтчетностьПереопределяемый.СформироватьТекстЗапросаДляПолученияДоступныхИндивидуальныхПредпринимателей(
		Запрос.Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокФизЛиц.Добавить(Выборка.Ссылка, Выборка.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная процедура, дополняющая передаваемую строку спец. символами.
//
// Параметры:
//  Текст - Строка.
//
Процедура ДополнитьСтрокуСпециальнымиСимволами(Знач Текст = Неопределено)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Текст = СтрЗаменить(Текст, "~", "~~");
		Текст = СтрЗаменить(Текст, "%", "~%");
		Текст = СтрЗаменить(Текст, "_", "~_");
		Текст = СтрЗаменить(Текст, "[", "~[");
		Текст = СтрЗаменить(Текст, "-", "~-");
		Текст = Текст + "%";
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВсеЮрФизЛица(ЮрЛицо) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	
	Результат = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если (ЮрЛицо = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Выборка.Ссылка)) Тогда 
			Результат.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ПоказателиОценкиРискаВыезднойНалоговойПроверки


// Процедура возвращает список организаций - юридических лиц и индивидуальных предпринимателей.
//
// Параметры:
//  СписокЮрФизЛиц - СписокЗначений - список юридических лиц и индивидуальных предпринимателей
//  Текст          - Строка - подстрока поиска в наименовании организации.
//
Процедура ПолучитьСписокДоступныхОрганизаций(СписокЮрФизЛиц = Неопределено, Знач Текст = Неопределено) Экспорт
	
	Если СписокЮрФизЛиц = Неопределено ИЛИ ТипЗнч(СписокЮрФизЛиц) <> Тип("СписокЗначений") Тогда
		
		СписокЮрФизЛиц = Новый СписокЗначений;
		
	КонецЕсли;
	
	ДополнитьСтрокуСпециальнымиСимволами(Текст);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	Организации.Ссылка,
				   |	Организации.Наименование
				   |ИЗ
				   |	Справочник.Организации КАК Организации
				   |ГДЕ
				   |	НЕ Организации.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Запрос.Текст = Запрос.Текст + " И Организации.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""";
		Запрос.УстановитьПараметр("Текст", Текст);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Наименование";
	
	РегламентированнаяОтчетностьПереопределяемый.СформироватьТекстЗапросаДляПолученияДоступныхОрганизаций(
		Запрос.Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокЮрФизЛиц.Добавить(Выборка.Ссылка, Выборка.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции


Процедура ДобавитьОшибкуФормированияРеглОтчета(РезультатВыгрузки, ТекстОшибки) Экспорт
	
	Ошибки = Неопределено;
	
	Если НЕ РезультатВыгрузки.Свойство("Ошибки", Ошибки)
		ИЛИ Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
		РезультатВыгрузки.Вставить("Ошибки", Ошибки);
	КонецЕсли;
	
	Ошибки.Добавить(ТекстОшибки);
	
КонецПроцедуры

Функция НовыйРезультатВыгрузкиРеглОтчета() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТипФайлаВыгрузки", "");
	Результат.Вставить("ТаблицаСообщений", НовыйТаблицаСообщенийОбОшибкахВыгрузки());
	Результат.Вставить("РеглОтчетВыгружен", Ложь);
	Результат.Вставить("ИмяФайлаВыгрузки", "");
	Результат.Вставить("АдресФайлаВыгрузки", "");
	Результат.Вставить("КодировкаФайлаВыгрузки", "");
	Результат.Вставить("Ошибки", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаСообщенийОбОшибкахВыгрузки() Экспорт
	
	ТаблицаСообщений = Новый ТаблицаЗначений;
	
	ТаблицаСообщений.Колонки.Добавить("ОтчетДок");
	ТаблицаСообщений.Колонки.Добавить("Отчет",     Новый ОписаниеТипов("Строка"));
	ТаблицаСообщений.Колонки.Добавить("Раздел",    Новый ОписаниеТипов("Строка"));
	ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки", Новый ОписаниеТипов("Строка"));
	ТаблицаСообщений.Колонки.Добавить("Описание",  Новый ОписаниеТипов("Строка"));
	ТаблицаСообщений.Колонки.Добавить("Страница",  Новый ОписаниеТипов("Строка"));
		
	Возврат ТаблицаСообщений;
	
КонецФункции

Функция ПолучитьПризнакУчетаПоВсемОрганизациям() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт

	Если ВРег(Настройка) = ВРег("ОсновнаяОрганизация") Тогда
		
		ПустоеЗначение = Справочники.Организации.ПустаяСсылка();
		
	ИначеЕсли ВРег(Настройка) = ВРег("ОсновноеПодразделениеОрганизации") Тогда
		
		ПустоеЗначение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();		
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(ВРег(Настройка), , , Пользователь);
	
	Возврат ?(ЗначениеНастройки = Неопределено, ПустоеЗначение, ЗначениеНастройки);
	  
КонецФункции

Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	Организация = ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если НЕ Организация.Пустая() Тогда
		Если Организация.ПолучитьОбъект() = Неопределено Тогда
			// Нарушена ссылочная целостность информационной базы.
			Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля)
	
	ЭлементыОтбора = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы;
		
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементыОтбора.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		
КонецПроцедуры

Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
			
КонецПроцедуры

Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИнформациюДляПеремещенияОМетаданных(Ссылка) Экспорт
	
	Информация = Новый Структура;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	МетаданныеРеквизита = МетаданныеОбъекта.СтандартныеРеквизиты.Код;
	
	Информация.Вставить("ПолноеИмя",    МетаданныеОбъекта.ПолноеИмя());
	
	ЭтоСправочник = Метаданные.Справочники.Содержит(МетаданныеОбъекта);
	ЭтоПВХ        = Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта);
	
	Если ЭтоСправочник ИЛИ ЭтоПВХ Тогда
		
		Информация.Вставить("ЕстьГруппы",
					МетаданныеОбъекта.Иерархический И 
							?(ЭтоПВХ, Истина, МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов));
		
		Информация.Вставить("ДляГрупп",     Истина);
		Информация.Вставить("ДляЭлементов", Истина);
		Информация.Вставить("ЕстьРодитель",  МетаданныеОбъекта.Иерархический);
		Информация.Вставить("ГруппыСверху", ?(НЕ Информация.ЕстьРодитель, Ложь, МетаданныеОбъекта.ГруппыСверху));
		Информация.Вставить("ЕстьВладелец", ?(ЭтоПВХ, Ложь, (МетаданныеОбъекта.Владельцы.Количество() <> 0)));
		
	Иначе
		
		Информация.Вставить("ЕстьГруппы",   Ложь);
		Информация.Вставить("ДляГрупп",     Ложь);
		Информация.Вставить("ДляЭлементов", Истина);
		Информация.Вставить("ЕстьРодитель", Ложь);
		Информация.Вставить("ЕстьВладелец", Ложь);
		Информация.Вставить("ГруппыСверху", Ложь);
		
	КонецЕсли;
	
	Возврат Информация;
	
КонецФункции

// Функция возвращает гарантированно один и тот же элемент справочника РегламентированныеОтчеты
// по значению реквизита для всех пользователей, режимах работы платформы и т.п.
// 
// Параметры:
//		Наим - строка-идентификатор регламентированного отчета.
// Возвращаемое значение:
// 		СправочникСсылка.РегламентированныеОтчеты - найденный элемент справочника
//
Функция ПолучитьРеглОтчетПоУмолчанию(Наим, МассивДублей = Неопределено) Экспорт
	
	МассивДублей = Новый Массив;
	
	// Элемент по умолчанияю - с минимальным значением ссылки (не помеченный на удаление)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегламентированныеОтчеты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|ГДЕ
	|	РегламентированныеОтчеты.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ
	|	И РегламентированныеОтчеты.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
    Запрос.УстановитьПараметр("ИсточникОтчета", Наим);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.РегламентированныеОтчеты.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ОсновнойОтчет = Выборка.Ссылка;
	
	Пока Выборка.Следующий() Цикл
		МассивДублей.Добавить(Выборка.Ссылка)	
	КонецЦикла;
	
	Возврат ОсновнойОтчет;
	
КонецФункции

Функция РеглОтчеты(Наим, НеЗапоминатьВКэше = Ложь, ВыводитьСообщение = Истина) Экспорт
	Перем ВременныйФайл;
	Перем ПараметрыОтчета;
	
	МассивДублей = Неопределено;
	НайденныйЭлемент = ПолучитьРеглОтчетПоУмолчанию(Наим, МассивДублей);
	Если МассивДублей.Количество() > 0 Тогда
		Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В справочнике ""Регламентированные отчеты"" обнаружены дубли для объекта ""%1""';uk='У довіднику ""Регламентовані звіти"" виявлені дублі для об''єкта ""%1""'"), СокрП(Наим)), СтатусСообщения.Информация);
		Для каждого СсылкаДубль Из МассивДублей Цикл
			Попытка
				ОбъектДубль = СсылкаДубль.ПолучитьОбъект();
				ОбъектДубль.ПометкаУдаления = Истина;
				ОбъектДубль.Записать();
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Элемент ""%1"" (%2) помечен на удаление';uk='Елемент ""%1"" (%2) позначений на вилучення'"), Строка(СсылкаДубль), Строка(СсылкаДубль.Код)), СтатусСообщения.БезСтатуса);
			Исключение
			 	// При невозможности записать ничего не предпринимаем 
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		Если Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			Возврат Отчеты[Наим];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(НайденныйЭлемент, НеЗапоминатьВКэше) ИЛИ НайденныйЭлемент.ВнешнийОтчетХранилище = Неопределено Тогда // используется внутренний отчет
		Если Метаданные.Документы.Найти(Наим) <> Неопределено Тогда
			
			Возврат Документы[Наим];
			
		ИначеЕсли Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			
			Возврат Отчеты[Наим];
			
		Иначе
			
			Если ВыводитьСообщение Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден отчет %1!';uk='Не знайдений звіт %1!'"), СокрП(Наим));
				Сообщение.Сообщить();
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецЕсли; 
	Иначе // используется внешний отчет
		Попытка
			ВременныйФайл = ФайлОтчетаСУчетомКэша(НайденныйЭлемент);
			ВнешнийОтчет = ВнешниеОтчеты.Создать(ВременныйФайл, Истина);
			Попытка
				ВнешнийОтчет.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
			Исключение
			КонецПопытки;
			Возврат ВнешнийОтчет;
		Исключение
			
			Если ВыводитьСообщение Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось запустить внешний отчет %1!';uk='Не вдалося запустити зовнішній звіт %1!'"), СокрП(Наим));
				Сообщение.Сообщить();
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецПопытки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет, с учетом кэша, является ли отчет, заданный строкой-идентификатором Наим, внешним.
// Параметры:
//		Наим - строка-идентификатор отчета.
// ВозвращаемоеЗначение:
//		Булево - Истина, если для заданной строки-идентификатора используется внешний отчет.
//				 Ложь - в противном случае.
//				 Неопределено - информация по отчету, заданному строкой-идентификатором 
//  			 отсутствует в справочнике РегламентированныеОтчеты.
Функция ЭтоВнешнийОтчет(Наим) Экспорт
	
	НайденныйЭлемент = ПолучитьРеглОтчетПоУмолчанию(Наим);
	Если НайденныйЭлемент.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(НайденныйЭлемент);
	
КонецФункции

Функция ФормаРеглОтчета(Наим, ВыбраннаяФорма = Неопределено, Владелец = Неопределено, КлючУникальности = Неопределено) Экспорт
	
	Перем ВременныйФайл;
	
	НайденныйЭлемент = ПолучитьРеглОтчетПоУмолчанию(Наим);
	Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(НайденныйЭлемент) ИЛИ НайденныйЭлемент.ВнешнийОтчетХранилище = Неопределено Тогда
		// Используется внутренний отчет.
		Если Метаданные.Документы.Найти(Наим) <> Неопределено Тогда
			Возврат Документы[Наим];
			
		ИначеЕсли Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			Возврат Отчеты[Наим];
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден отчет %1!';uk='Не знайдений звіт %1!'"), СокрП(Наим));
			Сообщение.Сообщить();
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		// Используется внешний отчет.
		Попытка
			ВременныйФайл = ФайлОтчетаСУчетомКэша(НайденныйЭлемент);
			ВнешнийОтчет = ВнешниеОтчеты.Создать(ВременныйФайл, Ложь);
			
			Попытка
				ВнешнийОтчет.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
			Исключение
				
			КонецПопытки;
			
			Возврат ВнешнийОтчет;
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден отчет %1!';uk='Не знайдений звіт %1!'"), СокрП(Наим));
			Сообщение.Сообщить();
			
			Возврат Неопределено;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗаблокироватьДокумент(мСохраненныйДок) Экспорт
	
	Попытка
		
		мСохраненныйДок.Заблокировать();
		
		Возврат Истина;
		
	Исключение
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удается заблокировать документ!%1Возможно, документ уже открыт другим пользователем!';uk='Не вдається заблокувати документ!%1Можливо, документ вже відкритий іншим користувачем!'"), Символы.ПС);

		Сообщение.Сообщить();
        
		Возврат Ложь;
		
	КонецПопытки;
			
КонецФункции

Функция ПродолжитьПриНесоответствииВерсийФорм(Знач ВерсияФормы, Знач мВерсияФормы) Экспорт
	
	ПервыйСлеш = СтрНайти(ВерсияФормы, "/");
	ВторойСлеш = СтрНайти(Лев(ВерсияФормы, ПервыйСлеш - 1) + " " + Сред(ВерсияФормы, ПервыйСлеш + 1), "/");
	Если ПервыйСлеш = Неопределено ИЛИ ВторойСлеш = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	ГодВерсияФормы = Сред(ВерсияФормы, ВторойСлеш + 1);
	МесяцВерсияФормы = Сред(ВерсияФормы, ПервыйСлеш + 1, ВторойСлеш - ПервыйСлеш - 1);
	ДеньВерсияФормы = Сред(ВерсияФормы, 1, ПервыйСлеш - 1);
	Если СтрДлина(ГодВерсияФормы) = 2 Тогда
		ГодВерсияФормы = "20" + ГодВерсияФормы;
	КонецЕсли;
	Если СтрДлина(МесяцВерсияФормы) = 1 Тогда
		МесяцВерсияФормы = "0" + МесяцВерсияФормы;
	КонецЕсли;
	Если СтрДлина(ДеньВерсияФормы) = 1 Тогда
		ДеньВерсияФормы = "0" + ДеньВерсияФормы;
	КонецЕсли;
	ДатаВерсияФормы = Дата(ГодВерсияФормы + МесяцВерсияФормы + ДеньВерсияФормы);
	
	ПервыйСлеш = СтрНайти(мВерсияФормы, "/");
	ВторойСлеш = СтрНайти(Лев(мВерсияФормы, ПервыйСлеш - 1) + " " + Сред(мВерсияФормы, ПервыйСлеш + 1), "/");
	Если ПервыйСлеш = Неопределено ИЛИ ВторойСлеш = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	ГодмВерсияФормы = Сред(мВерсияФормы, ВторойСлеш + 1);
	МесяцмВерсияФормы = Сред(мВерсияФормы, ПервыйСлеш + 1, ВторойСлеш - ПервыйСлеш - 1);
	ДеньмВерсияФормы = Сред(мВерсияФормы, 1, ПервыйСлеш - 1);
	Если СтрДлина(ГодмВерсияФормы) = 2 Тогда
		ГодмВерсияФормы = "20" + ГодмВерсияФормы;
	КонецЕсли;
	Если СтрДлина(МесяцмВерсияФормы) = 1 Тогда
		МесяцмВерсияФормы = "0" + МесяцмВерсияФормы;
	КонецЕсли;
	Если СтрДлина(ДеньмВерсияФормы) = 1 Тогда
		ДеньмВерсияФормы = "0" + ДеньмВерсияФормы;
	КонецЕсли;
	ДатамВерсияФормы = Дата(ГодмВерсияФормы + МесяцмВерсияФормы + ДеньмВерсияФормы);
	
	Если ДатамВерсияФормы < ДатаВерсияФормы Тогда
						
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраненные данные не могут быть открыты текущей версией отчета!%1Версия отчета - от %2Версия данных - от %3';uk='Збережені дані не можуть бути відкриті поточною версією звіту!%1Версия звіту - від %2Версия даних - від %3'"), Символы.ПС, Формат(ДатамВерсияФормы, "ДЛФ=DD; ДП='Пустая дата'") + Символы.ПС, Формат(ДатаВерсияФормы,  "ДЛФ=DD; ДП='Пустая дата'"));
		
		Сообщение.Сообщить();
                  						
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном) Экспорт
	
	стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
	ПозицияРазделителя = СтрНайти(стрВариантЗаполнения, ",");

	// Указан общий вариант заполнения показателя, для всех конфигураций.
	Если ПозицияРазделителя = 0 Тогда
		Возврат стрВариантЗаполнения;
	КонецЕсли;
	
	Если ПозицияРазделителя > 0 Тогда
		
		ВариантыЗаполнения = СтрЗаменить(стрВариантЗаполнения, ",", Символы.ПС);
		ВариантыЗаполнения = СтрЗаменить(ВариантыЗаполнения, " ", "");
		
		ВариантЗаполнения = СтрПолучитьСтроку(ВариантыЗаполнения, 1);
		
		Возврат ВариантЗаполнения;

	КонецЕсли;

КонецФункции

Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(Форма) Экспорт

	Если ТипЗнч(Форма.мСвойстваРазделовДекларации) <> Тип("ДанныеФормыДерево") Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если СтрокаУровня1.ПредставлениеДанных Тогда
			Форма.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(СтрокаУровня1.ИмяСтраницы);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьФИОФизЛица(ФизЛицо, НаДату = Неопределено) Экспорт
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	Если Метаданные.Справочники.Найти("ФизическиеЛица") = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ФизЛицо);
	Иначе
		ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(?(ЗначениеЗаполнено(НаДату), НаДату, ТекущаяДатаСеанса()), Новый Структура("ФизическоеЛицо", ФизЛицо));
		Если ДанныеФЛ.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, ДанныеФЛ[0]);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции




Функция ПриЗаписиРегламентированногоОтчетаНаСервере(Форма, Автосохранение = Ложь, мСохраненныйДок) Экспорт
		
	Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (мСохраненныйДок = Неопределено ИЛИ Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если мСохраненныйДок = Неопределено ИЛИ Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
					
		// создаем новый документ вида РегламентированныйОтчет
					
		мСохраненныйДок = Документы.РегламентированныйОтчет.СоздатьДокумент();
		ЗаблокироватьДокумент(мСохраненныйДок);
		Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = Истина;
		мСохраненныйДок.Дата = Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();
					
	КонецЕсли;

	Возврат Истина;
	
КонецФункции


Функция СуществуетДокументСАналогичнымиРеквизитами(Форма) Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мСохраненныйДок", ?(Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено, Неопределено, Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка));
	Запрос.УстановитьПараметр("ИсточникОтчета", Метаданные.Отчеты[Сред(Лев(СтрЗаменить(Форма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(Форма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя);
	Запрос.УстановитьПараметр("Организация", Форма.СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ДатаНачалаНач", НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачалаКон", КонецДня(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКонцаНач", НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКонцаКон", КонецДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РегламентированныйОтчет.Ссылка)
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.Ссылка <> &мСохраненныйДок
	               |	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	               |	И РегламентированныйОтчет.Организация = &Организация
	               |	И РегламентированныйОтчет.ДатаНачала МЕЖДУ &ДатаНачалаНач И &ДатаНачалаКон
	               |	И РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаКонцаНач И &ДатаКонцаКон
				   |";
			   
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();			   
	Если РезультатЗапроса.Количество() = 0 ИЛИ РезультатЗапроса.Получить(0).Получить(0) = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ОперацииПриВосстановленииРегламентированногоОтчета(Форма) Экспорт


	
	РеквизитыФормы = Форма.ПолучитьРеквизиты("");
	
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
	
		Если РеквизитФормы.Имя = "мДеревоСтраницОтчета"
		   И Форма.мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() > 0 Тогда
			
			Форма.мДеревоСтраницОтчета.ПолучитьЭлементы()[0].ПоказатьСтраницу = 1;
			Форма.мДеревоСтраницОтчета.ПолучитьЭлементы()[0].ВыводНаПечать    = 1;
			
		КонецЕсли;	
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме) Экспорт
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = СтрокаТаблицы[КолонкаИмя];
		Иначе
			Строка1.Области[НазвЯчейки].Текст = СтрокаТаблицы[КолонкаИмя];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


Функция БылиИзмененыКлючевыеРеквизитыОтчета(Форма) Экспорт
	
	Попытка
		Вариант = Форма.СтруктураРеквизитовФормы.ВидДокумента*Форма.НомерКорректировки;
		мСохраненныйДок = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если мСохраненныйДок = Неопределено ИЛИ Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Вариант <> мСохраненныйДок.Вид;
	КонецЕсли;
	
КонецФункции


Функция СкопированнаяСтруктура(Структура1) Экспорт
	
	Структура2 = Новый Структура;
	
	Для Каждого Зап Из Структура1 Цикл
		Структура2.Вставить(Зап.Ключ, Зап.Значение);
	КонецЦикла;
	
	Возврат Структура2;
	
КонецФункции

Процедура СообщитьВТаблицуСообщений(Владелец, Описание, Раздел, ИмяЯчейки = "", ФИО = "") Экспорт
	
	НовСтр = Владелец.ТаблицаСообщений.Добавить();
	НовСтр.Раздел    = Раздел;
	НовСтр.ИмяЯчейки = ИмяЯчейки;
	НовСтр.Описание = Описание;
	НовСтр.Страница  = ФИО;
	
КонецПроцедуры

Функция СтрЗаменитьПробелы(ИсхСтрока) Экспорт
	
	ПромСтр=СокрЛП(ИсхСтрока); 
	
	Если ПустаяСтрока(ПромСтр) Тогда
		ПромСтр = ",,";
		
		Возврат ПромСтр;
	КонецЕсли;

	// Сначала удаляем возможный недопустимый символ '.'.
	ЧП = СтрЧислоВхождений(ПромСтр,".");
	Если ЧП>0 Тогда
		Для К=1 По ЧП Цикл
			РезСтр=СтрЗаменить(ПромСтр,"."," ");
			ПромСтр=РезСтр;
		КонецЦикла; 
	КонецЕсли;
	
	// Число разделительных пробелов.
	ЧП=СтрЧислоВхождений(ПромСтр," ");
	Если ЧП>0 Тогда
		Для К=1 По ЧП Цикл
			РезСтр  = СтрЗаменить(ПромСтр," ",",");
			ПромСтр = РезСтр;
		КонецЦикла; 
	КонецЕсли;
	
	// Проверяем соответствие формату представления.
	КолЗап = СтрЧислоВхождений(ПромСтр,",");
	Если КолЗап < 2 Тогда
		// Дополняем недостающими запятыми.
		Для Ном=(КолЗап+1) По 2 Цикл
			ПромСтр=ПромСтр+",";
		КонецЦикла;
	ИначеЕсли КолЗап > 2 Тогда
		Пока СтрЧислоВхождений(ПромСтр, ",") <> 2 Цикл
			НайденПовтор = 0;
			
			ПозицияЗапятой = СтрНайти(ПромСтр, ",");
			Если Сред(ПромСтр, ПозицияЗапятой + 1, 1) = "," Тогда
				НачПозиция	 = ПозицияЗапятой;
				НайденПовтор = 1;
			Иначе
				ПозицияЗапятой2 = СтрНайти(Сред(ПромСтр, ПозицияЗапятой + 1), ",");
				Если Сред(ПромСтр, ПозицияЗапятой + ПозицияЗапятой2 + 1, 1) = "," Тогда
					НачПозиция	 = ПозицияЗапятой + ПозицияЗапятой2;
					НайденПовтор = 1;
				КонецЕсли;
			КонецЕсли;	
			
			Если НайденПовтор = 1 Тогда
				ПромСтр = Лев(ПромСтр, НачПозиция) + Сред(ПромСтр, НачПозиция + 2);
			Иначе
				Если Прав(ПромСтр, 1) = "," Тогда
					// Лишние хвостовые пробелы удаляем.
					ПромСтр = Лев(ПромСтр, СтрДлина(ПромСтр) - 1);
				Иначе
					// Лишние запятые заменяем пробелами.
					ПромСтр = Лев(ПромСтр, ПозицияЗапятой - 1) + " " + Сред(ПромСтр, ПозицияЗапятой + 1); 
				КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
		
	Возврат ВРег(ПромСтр);         
	
КонецФункции

Функция ПолучитьКоличествоПоказателей(Текст) Экспорт
    
	КоличествоПоказателей = 0;

	Для НомСтр = 1 По Текст.КоличествоСтрок() Цикл

		ТекСтр = СокрЛ(Текст.ПолучитьСтроку(Текст.КоличествоСтрок() - НомСтр + 1));

		Если Лев(ТекСтр, 11) = "КолПокФОтч:" Тогда
			Прервать;
		КонецЕсли;

		Если СтрДлина(ТекСтр)<14 Тогда
			Продолжить;
		КонецЕсли;

		Если (Сред(ТекСтр, 1, 1) = "П") и (Сред(ТекСтр, 14, 1) = ":") Тогда

			ЭтоПоказатель = Ложь;

			Для НСимв = 2 По 13 Цикл

				ТекСимв = Сред(ТекСтр, НСимв, 1);

				Если (ТекСимв = "0") ИЛИ (ТекСимв = "1") ИЛИ (ТекСимв = "2") ИЛИ (ТекСимв = "3") ИЛИ (ТекСимв = "4")
					ИЛИ (ТекСимв = "5") ИЛИ (ТекСимв = "6") ИЛИ (ТекСимв = "7") ИЛИ (ТекСимв = "8") ИЛИ (ТекСимв = "9") Тогда

					ЭтоПоказатель = Истина;

				Иначе

					ЭтоПоказатель = Ложь;
					Прервать;

				КонецЕсли;

			КонецЦикла;

			Если ЭтоПоказатель Тогда
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
    	
	Возврат Формат(КоличествоПоказателей, "ЧН=; ЧГ=0");

КонецФункции

Функция СобратьАдрес(Знач СтруктураАдрес) Экспорт

	Возврат ""+ СтруктураАдрес.Страна + "," + СтруктураАдрес.Индекс + ","+ СтруктураАдрес.Регион + ","
	+ СтруктураАдрес.Район  + "," + СтруктураАдрес.Город  + ","+ СтруктураАдрес.НаселенныйПункт + ","
	+ СтруктураАдрес.Улица  + "," + СтруктураАдрес.Дом    + ","+ СтруктураАдрес.Корпус + "," + СтруктураАдрес.Квартира

КонецФункции

Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции

Процедура ДобавитьПрефиксОрганизации(ДокументОбъект, Префикс) Экспорт
	
	// Если  нет реквизита "Организация" или для нее не задан префикс, то 
	// используем пустой префикс,
	// иначе используем префикс организации.
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ДокументОбъект.Организация.Префикс) Тогда
		Префикс = "";
	Иначе
		Префикс = ДокументОбъект.Организация.Префикс;
	КонецЕсли;
	
КонецПроцедуры
 
Функция ПолучитьОрганизациюДокумента(ДокументСсылка) Экспорт

	Если НЕ ДокументСсылка = Неопределено И Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДокументСсылка)) Тогда
		Возврат ДокументСсылка.Организация
	Иначе	
	    Возврат Неопределено;
	КонецЕсли;

КонецФункции // ()

Функция ПроверитьВозможностьОткрытияОтчета(ИсточникОтчета) Экспорт
	
	ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	
	Если ПравоДоступаКОтчету = Ложь Тогда
		Сообщить(НСтр("ru='Недостаточно прав';uk='Недостатньо прав'"), СтатусСообщения.Важное);
		Сообщить(НСтр("ru='Выгрузка не выполнена!';uk='Вивантаження не виконано!'"), СтатусСообщения.Важное);
		Возврат Ложь
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		Сообщить(НСтр("ru='В справочнике регл. отчетов не зарегистрирован соответствующий отчет';uk='У довіднику регл. звітів не зареєстрований відповідний звіт'"), СтатусСообщения.Важное);
		Сообщить(НСтр("ru='Выгрузка не выполнена!';uk='Вивантаження не виконано!'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Сообщить(НСтр("ru='Не удалось открыть соответсвующий регл. отчет';uk='Не вдалося відкрити відповідний регл. звіт'"), СтатусСообщения.Важное);
		Сообщить(НСтр("ru='Выгрузка не выполнена!';uk='Вивантаження не виконано!'"), СтатусСообщения.Важное);
		Возврат Ложь
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Сообщить(НСтр("ru='Не удалось открыть соответсвующий регл. отчет';uk='Не вдалося відкрити відповідний регл. звіт'"), СтатусСообщения.Важное);
		Сообщить(НСтр("ru='Выгрузка не выполнена!';uk='Вивантаження не виконано!'"), СтатусСообщения.Важное);
		Возврат Ложь
	КонецЕсли;

	Возврат Истина;
	
КонецФункции // ()

Процедура УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов) Экспорт
	
	Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
				
		// перед удалением реквизита из массива необходимо проверить, что он там есть
		// (не был удален ранее платформой или в коде).
		ПорядковыйНомер = МассивРеквизитов.Найти(ЭлементМассива);
		Если ПорядковыйНомер <> Неопределено Тогда
			МассивРеквизитов.Удалить(ПорядковыйНомер);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиОбласти(СписокВыводимыхНаПечатьОбластей, ТабличноеПоле, ПечатнаяФорма)
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		// В том случае, если в имени области не встречается строка "ПустаяСтрока", то
		// выводим область в результирующую таблицу и удаляем из списка.
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), ВРег("ПустаяСтрока")) = 0 Тогда
			
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
			
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
				
		// Создаем массив выводимых областей.
		ВыводимыеОбласти = Новый Массив();
		
		// Добавляем в массив выводимые области таблицы для того, 
		// чтобы проверить: поместятся ли они на текущий лист.
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		ОбластьОграничителиУмещаетсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ОбластьОграничители, Ложь);
		
		Пока ОбластьОграничителиУмещаетсяНаСтраницу Цикл
			
			// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
			ВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ВыводимыеОбласти, Ложь);
			
			Если ВыводимыеОбластиУмещаютсяНаСтраницу Тогда
				ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
			Иначе
				ПечатнаяФорма.Вывести(ОбластьОграничители);
				ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;		
	
КонецПроцедуры

Функция ВывестиНаПечатьЛистРаздела(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле)
	Перем ИмяЛиста;           
	Перем Ориентация;         
	Перем ИмяТабличногоПоля;  
	Перем ИмяОбластиТаблПоля; 
	Перем ВидПечати;          
	Перем ИмяОбластиМногострочнойЧасти;
	Перем ИмяРаздела;
	Перем МногострочныеЧасти;
	Перем Верх;
	Перем Низ;
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("ИмяРаздела",         ИмяРаздела);
	СтруктураПараметровЛиста.Свойство("МногострочнаяЧасть", ИмяОбластиМногострочнойЧасти);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
			
	Если ИмяОбластиМногострочнойЧасти = Неопределено Тогда
		СписокПечатныхФорм.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(
			ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле));
		Возврат СписокПечатныхФорм;
	КонецЕсли;

    // Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для Каждого Область Из ТабличноеПоле.Области Цикл
							
		Если НЕ ТипЗнч(Область) = Тип("РисунокТабличногоДокумента")
		   И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда	
			
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ВРЕГ(Область.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				СписокВыводимыхНаПечатьОбластей.Добавить(ПолучитьНизМногоСтрочнойЧасти(ТабличноеПоле, Область.Имя), Область.Имя);
			Иначе
				СписокВыводимыхНаПечатьОбластей.Добавить(Область.Низ, Область.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочныеЧасти = Новый Структура;
	Если ТипЗнч(ИмяОбластиМногострочнойЧасти) = Тип("Строка") Тогда
		МногострочныеЧасти.Вставить(ИмяОбластиМногострочнойЧасти, ПолучитьОбластиМногоСтрочнойЧасти(ТабличноеПоле, ИмяОбластиМногострочнойЧасти));
	Иначе
		Для Каждого Эл Из ИмяОбластиМногострочнойЧасти Цикл
			МногострочныеЧасти.Вставить(Эл, ПолучитьОбластиМногоСтрочнойЧасти(ТабличноеПоле, Эл));
		КонецЦикла;
	КонецЕсли;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	КоличествоСтрок = 0;
	
	Строки = Новый Массив;
	
	ПустойТабличныйДокумент = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ПустойТабличныйДокумент, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	ПустыеСтрокиМногострочныхЧастей = Новый Массив(МногострочныеЧасти.Количество());
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		ПустыеСтрокиМногострочныхЧастей[НомСтр] = ПолучитьПустуюСтрокуМногострочнойЧасти(Эл, 0);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Если Эл.Значение.Количество() = 0 Тогда
			Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	КолВоЛистов = 0;
	Пока МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Цикл
		
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
		ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
		
		НомСтр = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Если Эл.Значение.Количество() = 0 Тогда
				Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 Тогда
				ОбластьОграничители = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				ОбластьПустаяСтрока = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;                                                                                   
			Если МногострочныеЧасти.Свойство(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление) Тогда
				Продолжить;
			КонецЕсли;
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
		КонецЦикла;
		
		Строки.Очистить();
		Инд = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Попытка
				Строки.Добавить(Эл.Значение.Получить(0).Значение);
			Исключение
				Строки.Добавить(ПустыеСтрокиМногострочныхЧастей[Инд]);
			КонецПопытки;
			Инд = Инд + 1;
		КонецЦикла;
		Строки.Добавить(ОбластьПустаяСтрока);
		Строки.Добавить(ОбластьОграничители);
		
		Ном = 1;
		Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма, Строки, Ложь) Цикл
			Ном = Ном + 1;
			НомерЭлементаТабличнойЧасти = 0;
			Для Каждого Эл Из МногострочныеЧасти Цикл
				Если Эл.Значение.Количество() > 0 Тогда
					ПечатнаяФорма.Вывести(Строки[НомерЭлементаТабличнойЧасти]);				
					НомерЭлементаТабличнойЧасти = НомерЭлементаТабличнойЧасти + 1;
				КонецЕсли;
			КонецЦикла;

			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) >= Ном Тогда
				НомерМнЧ = 0;
				Для Каждого Эл Из МногострочныеЧасти Цикл
					Попытка
						Строки[НомерМнЧ] = Эл.Значение.Получить(Ном - 1).Значение;
					Исключение
						Строки[НомерМнЧ] = ПустойТабличныйДокумент;
					КонецПопытки;
					НомерМнЧ = НомерМнЧ + 1;
				КонецЦикла;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		КоличествоВыводимыхСтрок = Ном - 1;
		// Защита против частей разделов, которые не помещаются на лист, если даже
		// выводить по одной строке из каждой многострочной части.
		Если КоличествоВыводимыхСтрок = 0 Тогда
			КоличествоВыводимыхСтрок = 1;
		КонецЕсли;
		
		ИтоговыйТаблДок = Новый ТабличныйДокумент;
		ИтоговыйТаблДок.ОтображатьЗаголовки = Ложь;
		ИтоговыйТаблДок.ОтображатьСетку     = Ложь;
		ИтоговыйТаблДок.ЧерноБелыйПросмотр  = Истина;
		ИтоговыйТаблДок.ЧерноБелаяПечать    = Истина;
		ИтоговыйТаблДок.Автомасштаб         = Истина;
		ИтоговыйТаблДок.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		ЗаполнитьЗначенияСвойств(ИтоговыйТаблДок, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

		КолвоЛистов = КолвоЛистов + 1;
		
		НомерМногострочнойЧасти = -1;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 
				  ИЛИ СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			Рез = ЭтоОднаИзМногострочныхЧастей(СписокВыводимыхНаПечатьОбластей.Получить(Сч), МногострочныеЧасти, ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление)));
			Если Рез <> Ложь ИЛИ СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				НомерМногострочнойЧасти = НомерМногострочнойЧасти + 1;
				ТаблЧастьВыведена = Истина;
				Если Рез = Ложь Тогда
					НомМнЧ = -1;
					Для Каждого ЭлСтр Из МногострочныеЧасти Цикл
						НомМнЧ = НомМнЧ + 1;
						Если НомМнЧ = НомерМногострочнойЧасти Тогда
							ИтоговыйТаблДок.Вывести(ЭлСтр.Значение.Получить(0).Значение);
							ЭлСтр.Значение.Удалить(0);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() >= Инд + 1 Тогда
							ИтоговыйТаблДок.Вывести(Рез.Получить(Инд).Значение);
						КонецЕсли;
					КонецЦикла;
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() > 0 Тогда
							Рез.Удалить(0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ИтоговыйТаблДок.Вывести(ОбластьВыводимаяНаПечать);				
		КонецЦикла;
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		ОбластьОграничителиУмещаетсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти, Ложь);
		
		// Поиск "Правого присоединения" - секции с ИНН, КПП, номером страницы, находящейся справа.
		ТаблПоле = ТабличноеПоле.ПолучитьОбласть(Верх, , Низ, );
		ПравоеПрисоединение = Неопределено;
		Для НомерПравогоПрисоединения = 0 По 10 Цикл
			ПравоеПрисоединение = ТаблПоле.Области.Найти("ПравоеПрисоединение" + Формат(НомерПравогоПрисоединения, ""));
			Если ПравоеПрисоединение <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбластьОграничителиУмещаетсяНаСтраницу Тогда
			
			ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
			
			Пока ОбластьОграничителиУмещаетсяНаСтраницу Цикл
				
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				ВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти);
				
				Если ВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ИтоговыйТаблДок.Вывести(ОбластьПустаяСтрока);
				Иначе
					ИтоговыйТаблДок.Вывести(ОбластьОграничители);
					Если ПравоеПрисоединение <> Неопределено Тогда
						ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
					КонецЕсли;
					ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
					
					Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
						ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
					КонецЕсли;
					Если КолВоЛистов <> 1 Тогда
						ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
					КонецЕсли;
					
					Если ВидПечати = "ПоказатьБланк" Тогда
						ИтоговыйТаблДок.Показать(СокрП(ЗаголовокФормы) + " (" + СокрП(ИмяЛиста) + ")");
					ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
						ИтоговыйТаблДок.Напечатать();
					Иначе
						СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ИтоговыйТаблДок.Вывести(ОбластьОграничители);
			Если ПравоеПрисоединение <> Неопределено Тогда
				ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
			КонецЕсли;
			ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
				ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
			КонецЕсли;

			Если КолВоЛистов <> 1 Тогда
				ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
			КонецЕсли;

			Если ВидПечати = "ПоказатьБланк" Тогда
				ИтоговыйТаблДок.Показать(СокрП(ЗаголовокФормы) + " (" + СокрП(ИмяЛиста) + ")");
			ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
				ИтоговыйТаблДок.Напечатать();
			Иначе
				СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
		
	Возврат СписокПечатныхФорм;
	
КонецФункции

Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле)
	Перем ИмяЛиста;           
	Перем Ориентация;         
	Перем ИмяТабличногоПоля;  
	Перем ИмяОбластиТаблПоля; 
	Перем ВидПечати;          
	Перем Верх;
	Перем Низ;
	Перем Секции;

	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста", ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",   Ориентация);
	СтруктураПараметровЛиста.Свойство("ВидПечати",         ВидПечати);
	СтруктураПараметровЛиста.Свойство("Верх",              Верх);
	СтруктураПараметровЛиста.Свойство("Низ",               Низ);
	СтруктураПараметровЛиста.Свойство("Секции",            Секции);

	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	// Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	Если Секции = Неопределено Тогда
		
		// Перебираем все области таблицы и добавляем в список 
		// только те области, которые являются секциями таблицы.
		Для каждого Область Из ТабличноеПоле.Области Цикл
			
			Если НЕ ТипЗнч(Область) = Тип("РисунокТабличногоДокумента")
				И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				// Добавляем в список имя области и ее верхнюю координату.
				Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
					Продолжить;
				КонецЕсли;
				
				СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Секция Из Секции Цикл
			
			ОбластьСекции = ТабличноеПоле.Области.Найти(Секция);
			
			Если ОбластьСекции = Неопределено
			 ИЛИ ОбластьСекции.Верх < Верх
			 ИЛИ ОбластьСекции.Низ > Низ Тогда
				
				Продолжить
				
			КонецЕсли;
						
			СписокВыводимыхНаПечатьОбластей.Добавить(ОбластьСекции.Верх, ОбластьСекции.Имя);
			
		КонецЦикла
		
	КонецЕсли;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	ВывестиОбласти(СписокВыводимыхНаПечатьОбластей, ТабличноеПоле, ПечатнаяФорма);
		
	Если ВидПечати = "ПоказатьБланк" Тогда
		ПечатнаяФорма.Показать(СокрП(ЗаголовокФормы) + " (" + СокрП(ИмяЛиста) + ")");
	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
		ПечатнаяФорма.Напечатать();
	КонецЕсли;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ПолучитьНизМногострочнойЧасти(ТаблПоле, ИмяОбласти)
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(ТаблПоле);
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	Низ = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(Низ, ГруппыСтрок) Цикл
		Низ = Низ + 1;
	КонецЦикла;
	Возврат Низ - 1;
КонецФункции

Функция ПолучитьКартуИменованныхГруппСтрок(ТаблПоле)
	
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	
	Для Каждого Обл Из ТаблПоле.Области Цикл
		Если НЕ ТипЗнч(Обл) = Тип("РисунокТабличногоДокумента") И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = Обл.Верх;
			НовСтр.Низ = Обл.Низ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Карта;
	
КонецФункции

Функция ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок)
	Для Каждого ГруппаСтрок Из ГруппыСтрок Цикл
		Если ГруппаСтрок.Верх <= СледСтрока И ГруппаСтрок.Низ >= СледСтрока Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПолучитьОбластиМногострочнойЧасти(ТаблПоле, ИмяОбласти)
	
	ОбластиМногострочнойЧасти = Новый СписокЗначений;
	Если ИмяОбласти = Неопределено Тогда
		Возврат ОбластиМногострочнойЧасти;
	КонецЕсли;
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(ТаблПоле);
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	
	Шаг = ПолучитьШагСтрокиДляТабличногоПоля(Обл);
	
	Для Сч = 1 По Обл.ВысотаТаблицы / Шаг Цикл
		ОблВрем = Обл.ПолучитьОбласть((Сч - 1) * Шаг + 1, 0, Сч * Шаг, 0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, ТаблПоле.Области.Найти(ИмяОбласти).Верх + (Сч - 1) * Шаг);
	КонецЦикла;
	СледСтрока = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок) Цикл
		ОблВрем = ТаблПоле.ПолучитьОбласть(СледСтрока,0,СледСтрока + Шаг - 1,0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, СледСтрока);
		СледСтрока = СледСтрока + Шаг;
	КонецЦикла;
	Возврат ОбластиМногострочнойЧасти;
	
КонецФункции

Функция ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле)
	
	Для Инд = 0 По 9 Цикл
		ОблОпределениеВысоты = ТабличноеПоле.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, ""));
		Если ОблОпределениеВысоты <> Неопределено Тогда
			Возврат ТабличноеПоле.ПолучитьОбласть("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, "")).ВысотаТаблицы;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
	
КонецФункции

Функция ПолучитьПустуюСтрокуМногострочнойЧасти(МногострочныеЧасти, НомСтр)
	ПерваяСтрока = МногострочныеЧасти.Значение.Получить(НомСтр).Значение;
	ИтоговыйТабличныйДокумент = Новый ТабличныйДокумент;
	ИтоговыйТабличныйДокумент.Вывести(ПерваяСтрока);
	Для Каждого Область Из ИтоговыйТабличныйДокумент.Области Цикл
		Если (ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") ИЛИ Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) И Область.СодержитЗначение Тогда //И НЕ Область.Защита Тогда
			Область.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговыйТабличныйДокумент;
КонецФункции

Функция МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти)
	Максимум = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Максимум = Макс(Максимум, Эл.Значение.Количество());
	КонецЦикла;
	Возврат Максимум;
КонецФункции

Функция ЭтоОднаИзМногострочныхЧастей(ЭлСпКоорд, МногострочныеЧасти, ШагСтроки = 1)
	Коорд = ЭлСпКоорд.Значение;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Для Каждого ЭлСп Из Эл.Значение Цикл
			Если Число(ЭлСп.Представление) + ШагСтроки - 1 = Коорд Тогда
				Возврат Эл.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Процедура ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если (ТипЗнч(ТекОбл) = Тип("РисунокТабличногоДокумента") ИЛИ ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбнулитьФиксированныеЧастиНаЛистах(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ФиксируетсяНаПервомЛисте" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если (ТипЗнч(ТекОбл) = Тип("РисунокТабличногоДокумента") ИЛИ ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиНаПечатьЛистОбщая(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле, мПечатныеФормы) Экспорт
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ЕстьДуплекс;		  // поддержка дуплексной печати принтером
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ЕстьДуплекс", 		ЕстьДуплекс);

	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	
	// приведем этот параметр к "нормальному виду"
	Если    Ориентация = ОриентацияСтраницы.Портрет
		ИЛИ Ориентация = ОриентацияСтраницы.Ландшафт Тогда
	    ПечатнаяФорма.ОриентацияСтраницы  =  Ориентация;
	Иначе	
		ПечатнаяФорма.ОриентацияСтраницы  = ?(ВРЕГ(Ориентация) = ВРЕГ("Портрет"), ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	КонецЕсли;

	СтруктураПараметровЛиста.Вставить("ОриентацияЛиста", ПечатнаяФорма.ОриентацияСтраницы);
	
	Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
	Иначе
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	РазбитьПечатнуюФорму(ПечатнаяФорма, СтруктураПараметровЛиста, ИмяЛиста, мПечатныеФормы);
		
КонецПроцедуры

Процедура РазбитьПечатнуюФорму(ПечФорма, СтруктураПараметровЛиста, ИмяФормы = "", мПечатныеФормы)
	
	АвтоМасштаб = Неопределено;
	Если СтруктураПараметровЛиста.Свойство("АвтоМасштаб") Тогда
		АвтоМасштаб = СтруктураПараметровЛиста.АвтоМасштаб;	
	КонецЕсли;
	Если АвтоМасштаб = Неопределено Тогда
		АвтоМасштаб = Ложь;	
	КонецЕсли;
	
	МасштабПечати = Неопределено;
	Если СтруктураПараметровЛиста.Свойство("МасштабПечати") Тогда
		МасштабПечати = СтруктураПараметровЛиста.МасштабПечати;	
	КонецЕсли;
	Если МасштабПечати = Неопределено ИЛИ АвтоМасштаб = Истина Тогда
		МасштабПечати  = 100;	
	КонецЕсли;

	ЕстьДуплекс = Неопределено;
	Если СтруктураПараметровЛиста.Свойство("ЕстьДуплекс") Тогда
		ЕстьДуплекс = СтруктураПараметровЛиста.ЕстьДуплекс;	
	КонецЕсли;
	Если ЕстьДуплекс = Неопределено Тогда
		ЕстьДуплекс = Ложь;	
	КонецЕсли;
	
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = АвтоМасштаб;
	ПустойТаблДок.МасштабПечати = МасштабПечати;
	ПустойТаблДок.ОриентацияСтраницы = СтруктураПараметровЛиста.ОриентацияЛиста;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Если ЕстьДуплекс Тогда
		НовТаблДок = Новый ТабличныйДокумент();
	КонецЕсли;
	
	Сч = 0;
	Пока Сч < ПечФорма.ВысотаТаблицы Цикл
		 Сч = Сч + 1;
		 
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
			  Сч = Сч - 1;
			КонецЦикла; 
			
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = АвтоМасштаб;
			НовТаблДок.МасштабПечати = МасштабПечати;
			НовТаблДок.ОриентацияСтраницы = СтруктураПараметровЛиста.ОриентацияЛиста;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = АвтоМасштаб;
			НовТаблДок.МасштабПечати = МасштабПечати;
			НовТаблДок.ОриентацияСтраницы = СтруктураПараметровЛиста.ОриентацияЛиста;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			
			ПослВерх = Сч + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		
		Если НЕ ЕстьДуплекс Тогда
			НовТаблДок = Новый ТабличныйДокумент();
		КонецЕсли;
		
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = АвтоМасштаб;
		НовТаблДок.МасштабПечати = МасштабПечати;
		НовТаблДок.ОриентацияСтраницы = СтруктураПараметровЛиста.ОриентацияЛиста;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		
		Если НЕ ЕстьДуплекс Тогда
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДуплекс Тогда
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

Функция ПечататьРаздел(Форма, СтрокаРаздела, ЧтоИскать = Неопределено) Экспорт
	Перем КлючФизЛица;
	
	Если ЧтоИскать <> Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	
	// Если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим.
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		Форма.СтруктураРеквизитовФормы.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции


Процедура ВывестиПоказатель(Текст, ЗначениеЯчейки, ИмяЯчейки, ПризнакФормата, ФорматВыгрузки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗначениеЯчейки) И ПризнакФормата <> "Д" Тогда
		Текст.ДобавитьСтроку(ИмяЯчейки + ":")
	Иначе
		Если ПризнакФормата = "Е" Тогда
			ТекстЯчейкиКакЧисло = Число(СокрЛ(ЗначениеЯчейки));
			Если ТекстЯчейкиКакЧисло = 0 Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":")
			Иначе
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,ФорматВыгрузки)));
			КонецЕсли;
		ИначеЕсли ПризнакФормата = "Д" Тогда 
			Если НЕ ЗначениеЗаполнено(Дата(ЗначениеЯчейки)) = 1 Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":");
			Иначе
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,"ДФ=dd.MM.yyyy; ДЛФ=D")));
			КонецЕсли;	
		Иначе
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда
				Знч = Формат(ЗначениеЯчейки, "ЧРД=.; ЧГ=0");
			Иначе
				Знч = ЗначениеЯчейки;
			КонецЕсли;
			Если ЗначениеЯчейки = "0" Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":")
			Иначе	
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + ВРЕГ(СокрЛП(Знч)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры


Процедура ПриЗакрытииРегламентированногоОтчета(Форма) Экспорт
		
	Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено И Форма.СтруктураРеквизитовФормы.мСохраненныйДок <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Форма.СтруктураРеквизитовФормы.мСохраненныйДок)) И Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект().Заблокирован() Тогда
		Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект().Разблокировать();
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено
	   И Форма.СтруктураРеквизитовФормы.мСохраненныйДок <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Форма.СтруктураРеквизитовФормы.мСохраненныйДок)) Тогда
	
		РазблокироватьДанныеДляРедактирования(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПослеВставкиДополнительнойСтраницыНаСервере(Форма, ИмяВставляемойСтраницы, ПерейтиНаВставленныйЛист = Истина) Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеВставкиДополнительнойСтраницы(Форма, ИмяВставляемойСтраницы, ПерейтиНаВставленныйЛист);

КонецПроцедуры

Процедура УдалитьДополнительнуюСтраницуНаСервере(Форма, ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	Перем ТаблицаСтраницРаздела;
        	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	// Если одна страница в разделе, то ее удалять нельзя.
	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = Форма[ИмяТекТабличногоПоля];

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);
		
		// Очищаем редактируемые ячейки удаляемой страницы.
		Форма.ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
				
		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();

		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];

			// Для страниц многостраничного раздела, содержащих многострочную часть,
			// восстанавливаем структуру дополнительных строк.
			//
			// Предварительно проверим, содержит ли страница многострочные части.

			КолвоМногострочныхБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе").Количество();
			
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "СохранятьМногострКакТЗ");

			Если КолвоМногострочныхБлоков > 0 Тогда
				
				ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок;
				
				Если (ТипЗнч(ДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
					И (ДанныеДопСтрокРаздела.Количество() > 0)
					И (ДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
					
					ДанныеДопСтрокРаздела = ДанныеДопСтрокРаздела[0].Значение;
					
				Иначе
					
					ДанныеДопСтрокРаздела = Неопределено;
					
				КонецЕсли;
				
			Иначе
				ДанныеДопСтрокРаздела = Неопределено;
			КонецЕсли;

			Если ДанныеДопСтрокРаздела <> Неопределено Тогда

				Если (КолвоМногострочныхБлоков > 0) И (НЕ СохранятьМногострКакТЗ) Тогда

					Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
						ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
						ДанныеГруппыСтрок = ГруппаСтрок.Значение;
						
						ПромТаблицаГруппыСтрок = Форма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
						
						КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);

						// Заменяем таблицу значений с данными текущей страницы.
						КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, Форма[ИмяГруппыДопСтрок]);
						
						// Выводим в табличный документ строки многострочной группы.
						Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
						
					КонецЦикла;

				ИначеЕсли (КолвоМногострочныхБлоков > 0) И (СохранятьМногострКакТЗ) Тогда

					ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
					
					ПромТаблицаДопСтрокРаздела = Форма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
						
					КопироватьДанныеФормы(ДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, Форма[ИмяГруппыДопСтрок]);
					
					// Выводим строки многострочной группы замещающей страницы.
					Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

				КонецЕсли;
				
			КонецЕсли;

			ПредставлениеДанных = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "ПредставлениеДанных");
			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные[0].Значение;

			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл
				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;

				Если ПредставлениеДанных Тогда
					
					Если Форма.ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Тогда
						Продолжить;
					КонецЕсли;

				КонецЕсли;

				Попытка
					ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;

			КонецЦикла;
			
			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
			
		КонецЕсли;
        				
		Форма.РасчетНаСервере(ИмяТекущейСтраницыПанели);
		
		Форма.Модифицированность = Истина;

	КонецЕсли;
   	
КонецПроцедуры

Процедура ВставитьДополнительнуюСтраницуНаСервере(Форма, ИмяТекущейСтраницыПанели = Неопределено, СохранятьДанныеТекущейСтраницы = Истина) Экспорт

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;
   	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз=РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз<>0 И Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';uk='В розділі ""%1"" максимальна кількість екземплярів сторінок дорівнює 
|%2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			
			Сообщение.Сообщить();
                
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = Форма[ИмяТекТабличногоПоля];
	
	Если СохранятьДанныеТекущейСтраницы Тогда
		// Сначала сохраним данные текущей страницы.
		// Если на листе есть многострочность, то удалим ее.
		РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Истина);
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
	КонецЕсли;

	// Найдем активную страницу.
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы.
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
        						                                   
	КонецЕсли;
	
	// Добавляем новую страницу.
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию.
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы.
	СтрНоваяСтраница.АктивнаяСтраница   = Истина;
	
	КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе").Количество();
	
	Если КолМногострочныхЧастей = 0 Тогда
		Форма.ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	Если КолМногострочныхЧастей = 0 Тогда
		Форма.РасчетНаСервере(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
    		
КонецПроцедуры

Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование  КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.Ссылка <> &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	СписокОП = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		СписокОП.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОП;

КонецФункции


Функция ЗначениеИнтервалаНапоминанийРегламентированнойОтчетности() Экспорт

	ИнтервалНапоминанийРегламентированнойОтчетности = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностьюФормаНастройки", "ИнтервалНапоминанийРегламентированнойОтчетности");
	Если ИнтервалНапоминанийРегламентированнойОтчетности = Неопределено Тогда
		ИнтервалНапоминаний = 3;
	Иначе
		ИнтервалНапоминаний = ИнтервалНапоминанийРегламентированнойОтчетности;
	КонецЕсли;
	Возврат ИнтервалНапоминаний;

КонецФункции

Функция ПолучитьСтруктуруТаблицыРО(ТаблицаИсточник) Экспорт

	Результат = Новый ТаблицаЗначений;
	Для каждого Стр Из ТаблицаИсточник.Колонки Цикл
		Результат.Колонки.Добавить(Стр.Имя, Стр.ТипЗначения);
	КонецЦикла;
	Возврат Результат;

КонецФункции

Функция ПринтерДоступен() Экспорт
	
	ТаблДок = Новый ТабличныйДокумент;
	Возврат ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТаблДок, ТаблДок, Ложь);
	
КонецФункции

// Процедура заполняет структуру данных раздела регламентированного отчета
// значениями из данных дополнительных строк.
//
// Параметры:
//  СтруктураДанных - Структура - структура данных раздела рег. отчета.
//  ДанныеДопСтрок  - ДанныеФормыКоллекция или Массив элементов ДанныеФормыКоллекция - данные
//                    дополнительных строк раздела рег. отчета.
//
Процедура ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(СтруктураДанных, ДанныеДопСтрок) Экспорт
	
	Если ТипЗнч(ДанныеДопСтрок) <> Тип("Массив") Тогда
		
		МассивДанныхДопСтрок = Новый Массив;
		МассивДанныхДопСтрок.Добавить(ДанныеДопСтрок);
		
	Иначе
		
		МассивДанныхДопСтрок = ДанныеДопСтрок;
		
	КонецЕсли;
	
	Для Каждого ДопСтроки Из МассивДанныхДопСтрок Цикл
		
		Если НЕ ТипЗнч(ДопСтроки) = Тип("ТаблицаЗначений") Тогда
			
			ТЗ = ДанныеФормыВЗначение(ДопСтроки, Тип("ТаблицаЗначений"));
			
		Иначе
			
			ТЗ = ДопСтроки;
			
		КонецЕсли;
		
		Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
			
			Для ИндексТЗ = 0 По ТЗ.Количество() - 1 Цикл
				
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					
					СтруктураДанных.Вставить(
						КолонкаТЗ.Имя + "_" + Формат(ИндексТЗ + 1, "ЧГ="), ТЗ[ИндексТЗ][КолонкаТЗ.Имя]);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает результат сравнения значений из данных дополнительных строк
// со значениями структуры данных раздела регламентированного отчета.
//
// Параметры:
//  СтруктураДанных - Структура - структура данных раздела рег. отчета.
//  ДанныеДопСтрок  - ДанныеФормыКоллекция или Массив элементов ДанныеФормыКоллекция - данные
//                    дополнительных строк раздела рег. отчета.
//
// Возвращаемое значение:
//  Истина - значения из данных доп. строк равны соотв. значениям структуры данных раздела;
//   Ложь  - хотя бы одно значение из данных доп. строк не равно соотв. значению структуры данных раздела.
//
Функция ЗначенияИзДопСтрокСоответствуютСтруктуреДанныхРаздела(СтруктураДанных, ДанныеДопСтрок) Экспорт
	
	Если ТипЗнч(ДанныеДопСтрок) <> Тип("Массив") Тогда
		
		МассивДанныхДопСтрок = Новый Массив;
		МассивДанныхДопСтрок.Добавить(ДанныеДопСтрок);
		
	Иначе
		
		МассивДанныхДопСтрок = ДанныеДопСтрок;
		
	КонецЕсли;
	
	Для Каждого ДопСтроки Из МассивДанныхДопСтрок Цикл
		
		ТЗ = ДанныеФормыВЗначение(ДопСтроки, Тип("ТаблицаЗначений"));
		
		Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
			
			Для ИндексТЗ = 0 По ТЗ.Количество() - 1 Цикл
				
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					
					ТекЗначение = Неопределено;
					
					Если СтруктураДанных.Свойство(КолонкаТЗ.Имя + "_" + Формат(ИндексТЗ + 1, "ЧГ="), ТекЗначение) Тогда
						
						Если ТекЗначение = ТЗ[ИндексТЗ][КолонкаТЗ.Имя] Тогда
							
							Продолжить;
							
						Иначе
							
							Возврат Ложь;
							
						КонецЕсли;
						
					Иначе
						
						Возврат Ложь;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


Процедура ПолучитьСведенияОПоказателяхОтчета(Форма, ПараметрыОтчета = Неопределено) Экспорт
	
	Форма_ИмяФормы = СтрЗаменить(Форма.ИмяФормы, "Внешний", "");
	АвтозаполняемыеПоказателиОтчета = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(Сред(Лев(Форма_ИмяФормы, СтрНайти(Форма_ИмяФормы, ".Форма.") - 1), 7), Сред(Форма_ИмяФормы, СтрНайти(Форма_ИмяФормы, ".Форма.") + 7), ПараметрыОтчета);
	
	Если ТипЗнч(ПараметрыОтчета) = Тип("Структура") Тогда
		Если ПараметрыОтчета.Свойство("АвтозаполняемыеПоказатели") Тогда
			ПараметрыОтчета.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказателиОтчета);
		КонецЕсли;
	КонецЕсли;
	
	Если АвтозаполняемыеПоказателиОтчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого АвтозаполняемыйПоказательОтчета Из АвтозаполняемыеПоказателиОтчета Цикл
		
		Если АвтозаполняемыйПоказательОтчета.Значение[0] Тогда
			
			Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			
			Если Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
											
		КонецЕсли;	
		
		Если АвтозаполняемыйПоказательОтчета.Значение[1] Тогда
			
			Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Истина;
			
			Если Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
								
		КонецЕсли;	
			
	КонецЦикла;
	
	ОбновитьТаблицыВариантовЗаполнения(Форма, АвтозаполняемыеПоказателиОтчета);
			
КонецПроцедуры

Процедура ОбновитьТаблицыВариантовЗаполнения(Форма, АвтозаполняемыеПоказателиОтчета) Экспорт
	
	Для Каждого АвтозаполняемыйПоказатель Из АвтозаполняемыеПоказателиОтчета Цикл
		
		Если АвтозаполняемыйПоказатель.Значение[0] Тогда
			
			НайденноеЗначение = Новый Массив;
			
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
				Форма, "мТаблицаСоставПоказателей") Тогда
				
				ТаблицаСоставПоказателей = Форма.мТаблицаСоставПоказателей;
				
			ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
				Форма.СтруктураРеквизитовФормы, "АдресВоВремХранилищеТаблицаСоставПоказателей") Тогда
				
				ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
				
			КонецЕсли;
			
			НайденноеЗначение = ТаблицаСоставПоказателей.НайтиСтроки(
				Новый Структура("КодПоказателяПоСоставу", АвтозаполняемыйПоказатель.Ключ));
			
			Если НайденноеЗначение.Количество() > 0 Тогда
				
				Для Каждого Элемент Из НайденноеЗначение Цикл
					
					Для Каждого ТаблВариантовЗаполн Из Форма["ТаблицаВариантыЗаполнения" + Элемент.ИмяПоляТаблДокумента] Цикл
						
						ТаблицаВариантыЗаполнения = ТаблВариантовЗаполн.ТаблицаВариантовЗаполнения;
						
						НайденныеПоказатели = ТаблицаВариантыЗаполнения.НайтиСтроки(
						Новый Структура("КодПоказателя", АвтозаполняемыйПоказатель.Ключ));
						
						Если НайденныеПоказатели.Количество() = 0 Тогда
							
							СтрТабл = ТаблицаВариантыЗаполнения.Добавить();
							СтрТабл.КодПоказателя = АвтозаполняемыйПоказатель.Ключ;
							СтрТабл.ВариантЗаполнения = ?(АвтозаполняемыйПоказатель.Значение[2], 7, 3);
							
						ИначеЕсли НЕ (НайденныеПоказатели[0].ВариантЗаполнения = 1
							ИЛИ НайденныеПоказатели[0].ВариантЗаполнения = 2
							ИЛИ НайденныеПоказатели[0].ВариантЗаполнения = 4) Тогда
							
							НайденныйПоказатель = НайденныеПоказатели[0];
							
							НайденныйПоказатель.ВариантЗаполнения = ?(АвтозаполняемыйПоказатель.Значение[2], 7, 3);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры обновления информационной базы.


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "РегламентированнаяОтчетность.ВыполнитьОбновлениеИнформационнойБазы";
	Обработчик.НачальноеЗаполнение = Истина;
	
КонецПроцедуры


Процедура ЗаполнитьСписокОбработчиковОбновленияИнформационнойБазы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "РегламентированнаяОтчетность.ВыполнитьОбновлениеИнформационнойБазы";
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	// Заполнение списка регламентированных отчетов.
	ЗаполнитьСписокРегламентированныхОтчетов(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьСписокРегламентированныхОтчетов(ПервоеЗаполнение = Истина, ИзменятьПризнакИспользованияВнешнегоОтчета = Истина) Экспорт

	Перем ДеревоОтчетов;
	Перем ОбработкаОбновлениеОтчетов;

	Если ИзменятьПризнакИспользованияВнешнегоОтчета И НЕ ПервоеЗаполнение Тогда

		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
							  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
		                      |ИЗ
		                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		                      |ГДЕ
		                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");
		Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Метаданные.Документы.Найти(Выборка.ИсточникОтчета) <> Неопределено ИЛИ	Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
				ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
				ОбъектРеглОтчет.Записать();
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// Заполнением списка отчетов выполняется путем вызова экспортных процедур
	// основной формы обработки ОбновлениеРегламентированнойОтчетности.
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать();

	// Получаем список регламентированных отчетов в виде дерева.
	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		// нет обновлений
		Возврат;
	КонецЕсли;

	// Заполняем списком отчетов.
	ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов, ПервоеЗаполнение);
	
КонецПроцедуры


// При обновлении конфигурации с редакции 2.0 на редакцию 3.0 необходимо заполнить значениями реквизиты "ПредставлениеВида",
// "ПредставлениеПериода" документа "РегламентированныйОтчет" и реквизит "ПредставлениеПериода" документа
// "ВыгрузкаРегламентированныхОтчетов".
//	
Процедура ЗаполнитьПредставлениеПериодаИВидаРеглОтчета() Экспорт

	 //Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 //|	РегламентированныйОтчет.Ссылка
	 //|ИЗ
	 //|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	 //|ГДЕ
	 //|	(РегламентированныйОтчет.ПредставлениеВида = """"
	 //|			ИЛИ РегламентированныйОтчет.ПредставлениеПериода = """")");

	 //ТаблицаРеглОтч = Запрос.Выполнить().Выгрузить();

	 //Если ТаблицаРеглОтч.Количество() > 0 Тогда

	 //    НачатьТранзакцию();
	 //    
	 //    Попытка
	 //   	 
	 //   	 Для Каждого Элемент Из ТаблицаРеглОтч Цикл
	 //   		 
	 //   		 Док = Элемент.Ссылка.ПолучитьОбъект();
	 //   		 
	 //   		 Док.Заблокировать();
	 //   		 
	 //   		 Док.ПредставлениеВида    = ПредставлениеВидаДокумента(Док.Вид);
	 //   		 Док.ПредставлениеПериода = ПредставлениеПериода(Док.ДатаНачала, КонецДня(Док.ДатаОкончания));
	 //   		 
	 //   		 ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док, , Истина);
	 //   		 
	 //   		 Док.Разблокировать();
	 //   		 
	 //   	 КонецЦикла;
	 //   	 
	 //   	 ЗафиксироватьТранзакцию();
	 //   	 
	 //    Исключение
	 //   	 
	 //   	 ОтменитьТранзакцию();
	 //   	 
	 //    КонецПопытки;

	 //КонецЕсли;

	 //Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 //|	ВыгрузкаРегламентированныхОтчетов.Ссылка
	 //|ИЗ
	 //|	Документ.ВыгрузкаРегламентированныхОтчетов КАК ВыгрузкаРегламентированныхОтчетов
	 //|ГДЕ
	 //|	ВыгрузкаРегламентированныхОтчетов.ПредставлениеПериода = """"");

	 //ТаблицаРеглОтч = Запрос.Выполнить().Выгрузить();

	 //Если ТаблицаРеглОтч.Количество() > 0 Тогда

	 //    НачатьТранзакцию();
	 //    
	 //    Попытка
	 //   	 
	 //   	 Для Каждого Элемент Из ТаблицаРеглОтч Цикл
	 //   		 
	 //   		 Док = Элемент.Ссылка.ПолучитьОбъект();
	 //   		 
	 //   		 Док.Заблокировать();
	 //   		 
	 //   		 Док.ПредставлениеПериода = ПредставлениеПериодаДокументаВыгрузкаРегламентированныхОтчетов(Док.Ссылка);
	 //   		 
	 //   		 ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док, , Истина);
	 //   		 
	 //   		 Док.Разблокировать();
	 //   		 
	 //   	 КонецЦикла;
	 //   	 
	 //   	 ЗафиксироватьТранзакцию();
	 //   	 
	 //    Исключение
	 //   	 
	 //   	 ОтменитьТранзакцию();
	 //   	 
	 //    КонецПопытки

	 //КонецЕсли;

КонецПроцедуры

Процедура ЗаменитьСсылкиРазделенныйСпрУдалитьРеглОтчетыНаНеРазделенныйСпрРеглОтчеты() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ТипУдалитьРегламентированныеОтчеты = Тип("СправочникСсылка.УдалитьРегламентированныеОтчеты");
		
		// Регистр сведений "СкрытыеРегламентированныеОтчеты".
		//
		
		ВыборкаРегистрСведенийСкрытыеРегламентированныеОтчеты = РегистрыСведений.СкрытыеРегламентированныеОтчеты.Выбрать();
		
		Пока ВыборкаРегистрСведенийСкрытыеРегламентированныеОтчеты.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаРегистрСведенийСкрытыеРегламентированныеОтчеты.УдалитьРегламентированныйОтчет) Тогда
				
				РеглОтчет = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ВыборкаРегистрСведенийСкрытыеРегламентированныеОтчеты.УдалитьРегламентированныйОтчет.ИсточникОтчета);
				
				Если НЕ РеглОтчет.Пустая() Тогда
					
					ЗаписьРегистрСведенийСкрытыеРегламентированныеОтчеты = ВыборкаРегистрСведенийСкрытыеРегламентированныеОтчеты.ПолучитьМенеджерЗаписи();
					ЗаписьРегистрСведенийСкрытыеРегламентированныеОтчеты.УдалитьРегламентированныйОтчет = ВыборкаРегистрСведенийСкрытыеРегламентированныеОтчеты.УдалитьРегламентированныйОтчет.Ссылка;
					ЗаписьРегистрСведенийСкрытыеРегламентированныеОтчеты.Прочитать();
					ЗаписьРегистрСведенийСкрытыеРегламентированныеОтчеты.РегламентированныйОтчет = РеглОтчет.Ссылка;
					ЗаписьРегистрСведенийСкрытыеРегламентированныеОтчеты.Записать();
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции для обновления.

Функция ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов)
	
	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(Ссылка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СоответствиеКонвертированныхОбъектовПоТипу.Получить(Ссылка);
	КонецЕсли;
	
КонецФункции

Процедура ВставитьСсылкуНаКонвертированныйОбъект(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта, СоответствиеКонвертированныхОбъектов)
	
	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(СсылкаИсходногоОбъетка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		СоответствиеКонвертированныхОбъектовПоТипу = Новый Соответствие;
		СоответствиеКонвертированныхОбъектов.Вставить(ТипЗнч(СсылкаИсходногоОбъетка), СоответствиеКонвертированныхОбъектовПоТипу);
	КонецЕсли;
	
	СоответствиеКонвертированныхОбъектовПоТипу.Вставить(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта);
	
КонецПроцедуры	

Функция НеПроизводитьКонвертациюЗначения(Тип)
	
	Если Тип = Тип("Число") 
		Или Тип = Тип("Строка")
		Или Тип = Тип("Дата") 
		Или Тип = Тип("Булево")
		Или Тип = Тип("УникальныйИдентификатор") 
		Или Тип = Тип("ХранилищаНастроекМенеджер") 
		Или Тип = Тип("Null") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Протоколирование хода обновления.

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru='Обновление информационной базы';uk='Оновлення інформаційної бази'");
	
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с механизмом проверки контрольных соотношений.
//

Функция СоздатьСписокРасшифровкиПоказателей() Экспорт 
	
	СписокРасшифровкиПоказателей = Новый ТаблицаЗначений;
	СписокРасшифровкиПоказателей.Колонки.Добавить("Номер"); // ссылка на формулу
	СписокРасшифровкиПоказателей.Колонки.Добавить("ИмяПоказателя");
	СписокРасшифровкиПоказателей.Колонки.Добавить("ПредставлениеПоказателя");
	СписокРасшифровкиПоказателей.Колонки.Добавить("ЗначениеПоказателя");
	СписокРасшифровкиПоказателей.Колонки.Добавить("ФормулаПоказателя");
	СписокРасшифровкиПоказателей.Колонки.Добавить("СсылкаНаДокументРО"); // ссылка на декларацию
	СписокРасшифровкиПоказателей.Колонки.Добавить("ИмяСтраницы");
	СписокРасшифровкиПоказателей.Колонки.Добавить("Страница"); // Номер страницы для многостраничных разделов, для остальных "".
	СписокРасшифровкиПоказателей.Колонки.Добавить("ДополнительныеВозможности"); // Для вывода сообщений в расшифровках, например, если показатель отсутствует.
	
	Возврат СписокРасшифровкиПоказателей;
	
КонецФункции

Процедура ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя, ПредставлениеПоказателя,
	ЗначениеПоказателя, ФормулаПоказателя, СсылкаНаДокументРО, ИмяСтраницы, ДополнительныеВозможности,
	НомерСтраницыДляМногостраничныхРазделов, СчетчикФормулДляРасшифровок) Экспорт
	
	НовСтр = СписокРасшифровкиПоказателей.Добавить();
	НовСтр.Номер = СчетчикФормулДляРасшифровок;
	НовСтр.ИмяПоказателя = ИмяПоказателя;
	НовСтр.ПредставлениеПоказателя = ПредставлениеПоказателя;
	НовСтр.ЗначениеПоказателя = ЗначениеПоказателя;
	НовСтр.ФормулаПоказателя = ФормулаПоказателя;
	НовСтр.СсылкаНаДокументРО = СсылкаНаДокументРО;
	НовСтр.ИмяСтраницы = ИмяСтраницы;
	НовСтр.Страница = ?(НомерСтраницыДляМногостраничныхРазделов = Неопределено, "", НомерСтраницыДляМногостраничныхРазделов);
	НовСтр.ДополнительныеВозможности = ДополнительныеВозможности;

КонецПроцедуры

Функция СоздатьСписокРасшифровкиформулы() Экспорт 
	
	СписокРасшифровкиформулы = Новый ТаблицаЗначений;
	СписокРасшифровкиформулы.Колонки.Добавить("Номер");
	СписокРасшифровкиформулы.Колонки.Добавить("ТекстовоеПредставлениеФормулы");
	
	Возврат СписокРасшифровкиформулы;
	
КонецФункции

Процедура ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ТекстовоеПредставлениеФормулы, 
	ТребуемыйНомерДляСоставныхФормул, СчетчикФормулДляРасшифровок) Экспорт
	
	НовСтр = СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы = ТекстовоеПредставлениеФормулы;
	НовСтр.Номер = ?(ТребуемыйНомерДляСоставныхФормул = Неопределено, СчетчикФормулДляРасшифровок, ТребуемыйНомерДляСоставныхФормул);
	
КонецПроцедуры

// Функция возвращает структуру с данными регламентированного отчета.
//
// Возвращаемое значение: структура с данными регл. отчета.
//
// Параметры:
//  СсылкаНаСохрРегОтчет - ссылка на сохраненный регламентированный отчет, данные которого нужно получить.
//
Функция ПолучитьДанныеСохрРегОтчета(СсылкаНаСохрРегОтчет) Экспорт
	
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногострочныхРазделов;
	Перем ПоказателиРеглОтчета;
	
	ДанныеСохрРегОтчета = Новый Структура;
	
	ДанныеРазделовРеглОтчета = Новый Структура;
	
	СписокСохранения = СсылкаНаСохрРегОтчет.ДанныеОтчета.Получить();
	
	Если СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиРеглОтчета) Тогда
		
		Для Каждого ЭлементСтруктуры Из ПоказателиРеглОтчета Цикл
			
			ДанныеРазделовРеглОтчета.Вставить(СтрЗаменить(ЭлементСтруктуры.Ключ, "ПолеТабличногоДокумента", ""), ЭлементСтруктуры.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			ДанныеРазделовРеглОтчета.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			Для Каждого РазделРеглОтчета Из ПоказателиРеглОтчета Цикл
				
				Для Каждого ПоказательРеглОтчета Из РазделРеглОтчета.Значение Цикл
					
					Если Лев(ПоказательРеглОтчета.Ключ, 11) = ЭлементСтруктуры.Ключ Тогда
						
						ДанныеРазделовРеглОтчета.Вставить(СтрЗаменить(РазделРеглОтчета.Ключ, "ПолеТабличногоДокумента", "") + "_ДанныеДопСтрок",
							ЭлементСтруктуры.Значение);
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеСохрРегОтчета.Вставить("ДанныеРазделовРеглОтчета", ДанныеРазделовРеглОтчета);
	
	Возврат ДанныеСохрРегОтчета;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции механизма поддержки внешних регламентированных отчетов.

Функция ЗакэшироватьСтруктуруОписанияОтчета(РеглОтч)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать,
	                      |	РегламентированныеОтчеты.ИсточникОтчета,
	                      |	ВЫБОР
	                      |		КОГДА РегламентированныеОтчеты.ВнешнийОтчетИспользовать
	                      |			ТОГДА РегламентированныеОтчеты.ВнешнийОтчетХранилище
	                      |		ИНАЧЕ NULL
	                      |	КОНЕЦ КАК ВнешнийОтчетХранилище
	                      |ИЗ
	                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	                      |ГДЕ
	                      |	РегламентированныеОтчеты.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", РеглОтч);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ПризнакИспользованияВнешнегоОтчета = Выборка.ВнешнийОтчетИспользовать;
	СтруктураПараметровОтчета = Новый Структура("Признак", ПризнакИспользованияВнешнегоОтчета);
	Если ПризнакИспользованияВнешнегоОтчета Тогда
		//АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Выборка.ВнешнийОтчетХранилище.Получить());
		//ИмяОбработки = ВнешниеОтчеты.Подключить(АдресВоВременномХранилище, , Ложь,
		//		ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
		//СтруктураПараметровОтчета.Вставить("Файл", ИмяОбработки);
		#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Выборка.ВнешнийОтчетХранилище.Получить());
			ИмяОбработки = ВнешниеОтчеты.Подключить(АдресВоВременномХранилище, , Ложь);
		#Иначе	
			ИмяВременогоФайла = ПолучитьИмяВременногоФайла();
			Выборка.ВнешнийОтчетХранилище.Получить().Записать(ИмяВременогоФайла);
			ИмяОбработки = ИмяВременогоФайла;
		#КонецЕсли 
		СтруктураПараметровОтчета.Вставить("Файл", ИмяОбработки);
	КонецЕсли;
	
	СоответствиеПараметров = Новый Соответствие;
	Если ТипЗнч(ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов) = Тип("ФиксированноеСоответствие") И ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов.Количество() > 0 Тогда 
		Для Каждого ЭлементСоответствия Из ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов Цикл 
			СоответствиеПараметров.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
	КонецЕсли;
	
	СоответствиеПараметров[Выборка.ИсточникОтчета] = Новый ФиксированнаяСтруктура(СтруктураПараметровОтчета);
	ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов = Новый ФиксированноеСоответствие(СоответствиеПараметров);
	
	Возврат СтруктураПараметровОтчета;
	
КонецФункции

// Возвращает двоичные данные с файлом - внешним отчетом с учетом кэша (реквизит ВнешнийОтчетХранилище), 
// для переданного в качестве параметра элемента справочника РегламентированныеОтчеты.
// Параметры:
//		РеглОтч - ссылка на элемент справочника РегламентированныеОтчеты.
// Возвращаемое значение:
//		Содержимое реквизита ВнешнийОтчетХранилище элемента справочника с учетом кэша.
Функция ФайлОтчетаСУчетомКэша(РеглОтч, НеЗапоминатьВКэше = Ложь)
	Перем ПараметрыОтчета;
	
	ПараметрыОтчета = ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов.Получить(РеглОтч.ИсточникОтчета);
	Если ПараметрыОтчета <> Неопределено Тогда
		Возврат ПараметрыОтчета.Файл;
	Иначе
		Если НеЗапоминатьВКэше Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(РеглОтч.ВнешнийОтчетХранилище.Получить());
			ВременныйФайл = ВнешниеОтчеты.Подключить(АдресВоВременномХранилище, , Ложь,
				ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
			Возврат ВременныйФайл;
		Иначе
			Возврат ЗакэшироватьСтруктуруОписанияОтчета(РеглОтч).Файл;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает признак использования внешнего отчета с учетом кэша (реквизит ВнешнийОтчетИспользовать), 
// для переданного в качестве параметра элемента справочника РегламентированныеОтчеты.
// Параметры:
//		РеглОтч - ссылка на элемент справочника РегламентированныеОтчеты.
// Возвращаемое значение:
//		Признак использования внешнего отчета для заданного элемента справочника с учетом кэша.
Функция ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(РеглОтч, НеЗапоминатьВКэше = Ложь)
	Перем ПараметрыОтчета;
	
	ПараметрыОтчета = ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов.Получить(РеглОтч.ИсточникОтчета);
	Если ПараметрыОтчета <> Неопределено Тогда
		Возврат ПараметрыОтчета.Признак;
	Иначе
		Если НеЗапоминатьВКэше Тогда
			Возврат РеглОтч.ВнешнийОтчетИспользовать;
		Иначе
			Возврат ЗакэшироватьСтруктуруОписанияОтчета(РеглОтч).Признак;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ВидКонтактнойИнформации(НаимВидаКИ) Экспорт
	
	ВидКИ = Неопределено;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьВидКонтактнойИнформации(ВидКИ, НаимВидаКИ);
	
	Если ВидКИ = Неопределено Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации[НаимВидаКИ];
		
	КонецЕсли;	
	
	Возврат ВидКИ;
	
КонецФункции


Функция ВыборкаРегламентированныхОтчетов(Организация, ДатаНачала, ДатаОкончания, ВидыОтчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныеОтчеты.Ссылка КАК РегламентированныйОтчет,
	               |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета,
	               |	РегламентированныеОтчеты.ВыбраннаяФорма КАК ВыбраннаяФорма,
	               |	РегламентированныеОтчеты.Период КАК ПериодДокумента,
	               |	РегламентированныеОтчеты.КодНалоговогоОргана КАК КодНалоговогоОргана,
	               |	РегламентированныеОтчеты.Вид КАК Вид,
	               |	РегламентированныеОтчеты.МоментВремени КАК МоментВремени,
	               |	РегламентированныеОтчеты.Дата КАК ДатаОтчета,
	               |	РегламентированныеОтчеты.ДатаНачала КАК ОтчетныйПериод,
	               |	РегламентированныеОтчеты.Периодичность КАК Периодичность,
	               |	РегламентированныеОтчеты.ДатаНачала КАК ДатаНачала,
	               |	РегламентированныеОтчеты.ДатаОкончания КАК ДатаОкончания
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныеОтчеты
	               |ГДЕ
	               |	НЕ РегламентированныеОтчеты.ПометкаУдаления
	               |	И РегламентированныеОтчеты.Организация = &Организация
	               |	И РегламентированныеОтчеты.ДатаНачала >= &ДатаНачала
	               |	И РегламентированныеОтчеты.ДатаОкончания <= &ДатаОкончания
	               |	И РегламентированныеОтчеты.ИсточникОтчета В(&ВидыОтчетов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МоментВремени";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ВидыОтчетов", ВидыОтчетов);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции



Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
			ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "") Экспорт 
	
	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции


#КонецОбласти


#Область ПроцессыОбработкиДокументов

Процедура ПриИнициализации(Форма, Объект) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ПроцессыОбработкиДокументов") Тогда
	
		Если ЗначениеЗаполнено(Объект) Тогда
	
			ПриЧтенииНаСервере(Форма, Объект);
	
		Иначе
	
			ПриСозданииНаСервере(Форма, Объект);
	
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ПроцессыОбработкиДокументов") Тогда
	
		МодульПроцессыОбработкиДокументов = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументов");
	
		МодульПроцессыОбработкиДокументов.ПередЗаписьюНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ПроцессыОбработкиДокументов") Тогда
	
		МодульПроцессыОбработкиДокументов = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументов");
	
		МодульПроцессыОбработкиДокументов.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗадачу(Форма, Контекст, Источник) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ПроцессыОбработкиДокументов") Тогда
	
		МодульПроцессыОбработкиДокументов = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументов");
	
		МодульПроцессыОбработкиДокументов.ВыполнитьЗадачу(Форма, Контекст, Источник);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеДоступностьюРеквизитов(Форма, БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ПроцессыОбработкиДокументов") Тогда
		
		Если НЕ Форма.Элементы.Найти("ГруппаКнопокЗаписатьЗакрыть") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ГруппаКнопокЗаписатьЗакрыть");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ГруппаКнопок1") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ГруппаКнопок1");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ГруппаКнопокСохранитьИЗаписать") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ГруппаКнопокСохранитьИЗаписать");
		КонецЕсли;
	
		Если НЕ Форма.Элементы.Найти("ФормаЗаписатьИЗакрыть") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ФормаЗаписатьИЗакрыть");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("Сохранить") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("Сохранить");
		КонецЕсли;
	
		Если НЕ Форма.Элементы.Найти("Заполнить") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("Заполнить");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ЗаполнитьВсе") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ЗаполнитьВсе");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ЗаполнитьТекущий") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ЗаполнитьТекущий");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ПодменюОчистить") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ПодменюОчистить");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ОчиститьОтчет") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ОчиститьОтчет");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ОчиститьТекущуюСтраницу") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ОчиститьТекущуюСтраницу");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ОчиститьТекущийРаздел") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ОчиститьТекущийРаздел");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("Загрузить") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("Загрузить");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("Импортировать") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("Импортировать");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ФормаЗагрузитьИзФайла") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ФормаЗагрузитьИзФайла");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ФормаОбрезатьПустыеСимволы") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ФормаОбрезатьПустыеСимволы");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("Обновить") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("Обновить");
		КонецЕсли;
		
		
		Если НЕ Форма.Элементы.Найти("ТабличныйДокумент") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ТабличныйДокумент");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчета") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ПолеТабличногоДокументаФормаОтчета");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ТабличныйДокументКонтекстноеМенюГруппаСтроки") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ТабличныйДокументКонтекстноеМенюГруппаСтроки");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ТабличныйДокументКонтекстноеМенюДобавитьСтроку") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ТабличныйДокументКонтекстноеМенюДобавитьСтроку");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ТабличныйДокументКонтекстноеМенюУдалитьСтроку") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ТабличныйДокументКонтекстноеМенюУдалитьСтроку");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчетаКонтекстноеМенюГруппаСтроки") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ПолеТабличногоДокументаФормаОтчетаКонтекстноеМенюГруппаСтроки");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчетаКонтекстноеМенюДобавитьСтроку") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ПолеТабличногоДокументаФормаОтчетаКонтекстноеМенюДобавитьСтроку");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчетаКонтекстноеМенюУдалитьСтроку") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ПолеТабличногоДокументаФормаОтчетаКонтекстноеМенюУдалитьСтроку");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ТабличныйДокументКонтекстноеМенюДобавитьСтрокуКопированием") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ТабличныйДокументКонтекстноеМенюДобавитьСтрокуКопированием");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчетаКонтекстноеМенюДобавитьСтрокуКопированием") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ПолеТабличногоДокументаФормаОтчетаКонтекстноеМенюДобавитьСтрокуКопированием");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("РазделыОтчетаКонтекстноеМенюДобавитьСтраницу") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("РазделыОтчетаКонтекстноеМенюДобавитьСтраницу");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("РазделыОтчетаКонтекстноеМенюУдалитьСтраницу") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("РазделыОтчетаКонтекстноеМенюУдалитьСтраницу");
		КонецЕсли;
	
		Если НЕ Форма.Элементы.Найти("ДобавитьСтраницу") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("ДобавитьСтраницу");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("УдалитьСтраницу") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("УдалитьСтраницу");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("СобратьДанные") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("СобратьДанные");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("Комментарий") = Неопределено Тогда
			БлокируемыеЭлементы.Добавить("Комментарий");
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ТабличныйДокумент") = Неопределено Тогда
			Форма.Элементы["ТабличныйДокумент"].ЧерноБелыйПросмотр = ТолькоПросмотр;
		КонецЕсли;
		
		Если НЕ Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчета") = Неопределено Тогда
			Форма.Элементы["ПолеТабличногоДокументаФормаОтчета"].ЧерноБелыйПросмотр = ТолькоПросмотр;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, Объект)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ПроцессыОбработкиДокументов") Тогда
	
		МодульПроцессыОбработкиДокументов = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументов");
	
		МодульПроцессыОбработкиДокументов.ПриЧтенииНаСервере(Форма, Объект, , Форма.КоманднаяПанель);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Объект)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ПроцессыОбработкиДокументов") Тогда
	
		МодульПроцессыОбработкиДокументов = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументов");
	
		МодульПроцессыОбработкиДокументов.ПриСозданииНаСервере(Форма, Объект, , Форма.КоманднаяПанель);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда

// Пытается проставить номер страницы НомерЛиста в соответствующие ячейки табличного документа ТаблДок.
// Возвращает Истина, если удалось проставить номер. В противном случае возвращает Ложь.
Функция УдалосьПроставитьНомерСтраницы(ТаблДок,Знач НомерЛиста)
	ОбластиСНомерамиЛистов = Новый СписокЗначений;
	Для Каждого Обл Из ТаблДок.Значение.Области Цикл
		Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ Обл.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		Если Лев(ВРЕГ(Обл.Имя), 6) = "НОМСТР" И (Прав(Обл.Имя, 1) = "1" ИЛИ Прав(Обл.Имя, 1) = "2" ИЛИ Прав(Обл.Имя, 1) = "3" ИЛИ Прав(Обл.Имя, 1) = "4" ИЛИ Прав(Обл.Имя, 1) = "5" ИЛИ Прав(Обл.Имя, 1) = "6")Тогда
			ОбластиСНомерамиЛистов.Добавить(Обл);
		КонецЕсли;
		//Если ОбластиСНомерамиЛистов.Количество() = 3 Тогда
		//	Прервать;
		//КонецЕсли;
	КонецЦикла;
	
	Если ОбластиСНомерамиЛистов.Количество() < 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПервоеЧисло = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
	НомерЛиста = Цел(НомерЛиста / 10);
	ВтороеЧисло = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
	НомерЛиста = Цел(НомерЛиста / 10);
	ТретьеЧисло = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
	НомерЛиста = Цел(НомерЛиста / 10);
	ЧетвертоеЧисло = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
	НомерЛиста = Цел(НомерЛиста / 10);
	ПятоеЧисло = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
	НомерЛиста = Цел(НомерЛиста / 10);
	ШестоеЧисло = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
	
	Если ОбластиСНомерамиЛистов.Количество() = 3 Тогда
		ОбластиСНомерамиЛистов.Получить(0).Значение.Значение = ТретьеЧисло;
		ОбластиСНомерамиЛистов.Получить(1).Значение.Значение = ВтороеЧисло;
		ОбластиСНомерамиЛистов.Получить(2).Значение.Значение = ПервоеЧисло;
	Иначе
		ОбластиСНомерамиЛистов.Получить(0).Значение.Значение = ШестоеЧисло;
		ОбластиСНомерамиЛистов.Получить(1).Значение.Значение = ПятоеЧисло;
		ОбластиСНомерамиЛистов.Получить(2).Значение.Значение = ЧетвертоеЧисло;
		ОбластиСНомерамиЛистов.Получить(3).Значение.Значение = ТретьеЧисло;
		ОбластиСНомерамиЛистов.Получить(4).Значение.Значение = ВтороеЧисло;
		ОбластиСНомерамиЛистов.Получить(5).Значение.Значение = ПервоеЧисло;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // УдалосьПроставитьНомерСтраницы()
	
// Проставляет номера листов на каждом листе и общее количество листов на титульном;
// после нумерации выводит листыв в общую форму ПечатьРегламентированныхОтчетов.
// Параметры:
// Форма - объект типа Форма, из которого была вызвана печать.
// ВидПечати - строка, задающая действие, которое следует произвести с печатными формами: 
// непосредственная печать или предварительный просмотр.
// ПризнакНумеруемыхФорм - данный параметр следует установить в Ложь для тех
// печатных форм, в которых не предусмотрены области для нумерации листов и 
// указания общего количества листов (например, форма 4ФСС и т.п.).
Процедура ПроставитьНомераЛистов(Форма, ВидПечати, ПризнакНумеруемыхФорм = Истина) Экспорт;
	
	Если ПризнакНумеруемыхФорм Тогда
		Если Форма.мСчетчикСтраниц <> Истина Тогда
			НомерЛиста = 1;
			Для Каждого Эл Из Форма.мПечатныеФормы Цикл
				Если НЕ УдалосьПроставитьНомерСтраницы(Эл.Значение, НомерЛиста) Тогда
					Сообщить(НСтр("ru='Не удалось проставить номер страницы для ';uk='Не вдалося проставити номер сторінки для '") + Эл.Представление);
					Продолжить;
				КонецЕсли;
				НомерЛиста = НомерЛиста + 1;
			КонецЦикла;
			
			Если Форма.мПечатныеФормы.Количество() <> 0 Тогда
				ТаблДок = Форма.мПечатныеФормы.Получить(0).Значение.Значение;
				Если ТаблДок.Области.Найти("СоставленаНа6") <> Неопределено Тогда
					ВсегоЛистов = Формат(НомерЛиста - 1, "ЧЦ=6; ЧН=0; ЧВН=; ЧГ=");
					Попытка
						ТаблДок.Области.СоставленаНа1.Значение = Сред(ВсегоЛистов, 1, 1);
						ТаблДок.Области.СоставленаНа2.Значение = Сред(ВсегоЛистов, 2, 1);
						ТаблДок.Области.СоставленаНа3.Значение = Сред(ВсегоЛистов, 3, 1);
						ТаблДок.Области.СоставленаНа4.Значение = Сред(ВсегоЛистов, 4, 1);
						ТаблДок.Области.СоставленаНа5.Значение = Сред(ВсегоЛистов, 5, 1);
						ТаблДок.Области.СоставленаНа6.Значение = Сред(ВсегоЛистов, 6, 1);
					Исключение
						//Сообщить("Не удалось проставить общее количество листов на титульном листе отчета!", СтатусСообщения.Внимание);
					КонецПопытки;
				Иначе
					ВсегоЛистов = Формат(НомерЛиста - 1, "ЧЦ=3; ЧН=0; ЧВН=; ЧГ=");
					Попытка
						ТаблДок.Области.СоставленаНа1.Значение = Сред(ВсегоЛистов, 1, 1);
						ТаблДок.Области.СоставленаНа2.Значение = Сред(ВсегоЛистов, 2, 1);
						ТаблДок.Области.СоставленаНа3.Значение = Сред(ВсегоЛистов, 3, 1);
					Исключение
						//Сообщить("Не удалось проставить общее количество листов на титульном листе отчета!", СтатусСообщения.Внимание);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Если НЕ НаложитьДвухмерныйШтрихКод(Форма) Тогда
	//	Сообщить(НСтр("ru='Не удалось сгенерировать двухмерный штрих-код.';uk='Не вдалося згенерувати двомірний штрих-код.'"), СтатусСообщения.Внимание);
	//	Возврат;
	//КонецЕсли;
	
	НомераЛистов = Новый СписокЗначений;
	
	ПредПросмотр = ПолучитьОбщуюФорму("ПечатьРегламентированныхОтчетов", , Форма);
	Если ПредПросмотр.Открыта() Тогда
		ПредПросмотр.Закрыть();
		ПредПросмотр = ПолучитьОбщуюФорму("ПечатьРегламентированныхОтчетов", , Форма);
	КонецЕсли;
	НомерЛиста = 1;
	Для Каждого Эл Из Форма.мПечатныеФормы Цикл
		НовСтр = ПредПросмотр.СписокПечатаемыхЛистов.Добавить();
		НомЛиста = НомераЛистов.НайтиПоЗначению(Эл.Представление);
		Если НомЛиста = Неопределено Тогда
			НомЛиста = НомераЛистов.Добавить(Эл.Представление, "1");
			НЛиста = 1;
		Иначе
			НЛиста = Число(НомЛиста.Представление) + 1;
			НомЛиста.Представление = Строка(Число(НомЛиста.Представление) + 1);
		КонецЕсли;
		НовСтр.Наименование = Эл.Представление + НСтр("ru='. Лист №';uk='. Аркуш №'") + НЛиста;
		Если ТипЗнч(Эл.Значение) <> Тип("ТабличныйДокумент") Тогда
			НовСтр.ТабличныйДокумент = Эл.Значение.Значение;
		Иначе
			НовСтр.ТабличныйДокумент = Эл.Значение;
		КонецЕсли;
		НомерЛиста = НомерЛиста + 1;
	КонецЦикла;
	ПредПросмотр.ВидПечати = ВидПечати;
	ПредПросмотр.Открыть();
	
КонецПроцедуры // ПроставитьНомераЛистов()

//Предлагает пользователю указать каталог для выгрузки декларации в электронном виде
Функция ПолучитьПутьВыгрузки(ПутьДляВыгрузки = Неопределено) Экспорт

	ФормаПараметровСохранения = ПолучитьОбщуюФорму("НастройкаПараметровСохраненияРегламентированногоОтчета");
	ФормаПараметровСохранения.ПутьДляВыгрузки = ПутьДляВыгрузки;

	РезВыбора = ФормаПараметровСохранения.ОткрытьМодально();
	Если РезВыбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ РезВыбора Тогда
		Возврат Ложь;
	Иначе
		Возврат ФормаПараметровСохранения.ПутьДляВыгрузки;
	КонецЕсли;

КонецФункции
#КонецЕсли

