#Область ПрограммныйИнтерфейс

#Область НастройкаСчетовУчетаПрочихОпераций

// Очищает статью и аналитику в строке таблицы, если они не доступны в строке ТЧ.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта.
// 	СтрокаТаблицы - ДанныеФормыЭлементКоллекции - Строка таблицы.
// 	ПутьКДаннымТаблицы - Строка - Путь к данным таблицы формы, например "Объект.Товары".
//
Процедура ПриИзмененииРеквизитаДоступностиСчетаУчетаВСтроке(Форма, СтрокаТаблицы, ПутьКДаннымТаблицы) Экспорт
	
	//++ Локализация
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	
	Если ДанныеНастройкиСчетовУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Параметры Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		Если Параметры.ПутьКДанным = ПутьКДаннымТаблицы Тогда
			ДоступностьВСтроке = Истина;
			Для каждого КлючИЗначение Из Параметры.УсловияДоступностиСчетаУчетаВСтроках Цикл
				Если СтрокаТаблицы[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
					ДоступностьВСтроке = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ДоступностьВСтроке Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы[Параметры.СчетУчета]) Тогда
					СтрокаТаблицы[Параметры.СчетУчета] = Неопределено;
					СтрокаТаблицы[Параметры.Субконто1] = Неопределено;
					СтрокаТаблицы[Параметры.Субконто2] = Неопределено;
					СтрокаТаблицы[Параметры.Субконто3] = Неопределено;
					Если ДанныеНастройкиСчетовУчета.ДоступнаНастройкиСчетовУчета Тогда
						СтрокаТаблицы[Параметры.Представление] = ПредставлениеНастройкиОтражения(СтрокаТаблицы, Параметры);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//-- Локализация
КонецПроцедуры

// Устанавливает видимость настройки счетов учета при изменении типа статьи.
// Вызывается из механизма выбора статей и аналитик (См. ДоходыИРасходыСервер).
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта.
// 	ПутьКДанным - Строка - Значение поля "ПутьКДанным" параметров выбора статей и аналитик (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики).
// 	ТипСтатьи - Строка - Значение поля "ТипСтатьи" параметров выбора статей и аналитик (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики).
// 	ИдентификаторыСтрок - Число, Массив, Неопределено - Идентификаторы строк таблицы, в которых изменился тип статьи.
//
Процедура ПриИзмененииТипаСтатьи(Форма, ПутьКДанным, ТипСтатьи, ИдентификаторыСтрок = Неопределено) Экспорт
	
	//++ Локализация
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	
	Если ДанныеНастройкиСчетовУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеНастройкиСчетовУчета.ДоступнаНастройкиСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторыСтрок <> Неопределено И ТипЗнч(ИдентификаторыСтрок) <> Тип("Массив") Тогда
		ИдентификаторыСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыСтрок);
	КонецЕсли;
	
	Для каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		
		Если ПутьКДанным = ПараметрыНастройки.ПутьКДанным И ТипСтатьи = ПараметрыНастройки.ТипСтатьи Тогда
			ДоступнаНастройкиСчетовУчета = ДанныеНастройкиСчетовУчета.ДоступнаНастройкиСчетовУчета;
			УстановитьВидимостьЭлементовПоПараметрам(Форма, ПараметрыНастройки, ДоступнаНастройкиСчетовУчета);
			ЗаполнитьПредставлениеНастройкиПоПараметрам(Форма, ПараметрыНастройки, ИдентификаторыСтрок);
		КонецЕсли;
		
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

// Выполняет обработку изменения реквизитов аналитики учета, влияющих на настройку счетов учета.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
// 	ИмяЭлемента - Строка - Имя элемента реквизита
//
Процедура ПриИзмененииРеквизита(Форма, ИмяЭлемента = Неопределено) Экспорт
	//++ Локализация
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если ДанныеНастройкиСчетовУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//++ НЕ УТ
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьРеквизитыНастройкиСчетовУчетаПоДаннымОбъектаАналитики(Форма, Форма.Объект);
	НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваЭлементовНастройкиСчетовУчета(Форма);
	//-- НЕ УТ
	//-- Локализация
КонецПроцедуры

#Область НастройкаВыбораСубконто

// Изменяет параметры выбора полей субконто.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, на которой расположены поля субконто.
//	Объект - ДанныеФормыСтруктура - Объект, форма которого отображается.
//	ШаблонИмяПоляОбъекта - Строка - Шаблон имени поля объекта, содержащего субконто.
//	ШаблонИмяЭлементаФормы - Строка - Шаблон имени поля формы, в который выводится субконто.
//	СписокПараметров - Структура - Содержит ключи со значениями отборов.
//
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект, ШаблонИмяПоляОбъекта, ШаблонИмяЭлементаФормы, СписокПараметров) Экспорт
	
	ВидыПараметров = Новый Соответствие;
	ВидыПараметров.Вставить(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"), 	"БанковскийСчетОрганизации");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов"), 	"БанковскийСчетКонтрагента");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.СтруктураПредприятия"), 			"Подразделение");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"), 			"Договор");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.ДоговорыКредитовИДепозитов"), 	"Договор");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Партнеры"), 						"Партнер");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Субконто"), 						"Субконто");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Номенклатура"), 					"Номенклатура");
	
	//++ Локализация
	ВидыПараметров.Вставить(Тип("СправочникСсылка.ПартииТМЦВЭксплуатации"), 		"ПартииТМЦВЭксплуатации");
	//-- Локализация
	
	ОписаниеТипаВсеДокументы = НастройкаСчетовУчетаСлужебныйВызовСервера.ОписаниеТипаВсеДокументы();
	
	ОчищатьСвязанныеСубконто = Ложь;
	ТипыСвязанныхСубконто    = Неопределено;
	Если ТипЗнч(Форма.ТекущийЭлемент) = Тип("ТаблицаФормы") Тогда
		ТекущийЭлемент = Форма.ТекущийЭлемент.ТекущийЭлемент;
	Иначе
		ТекущийЭлемент = Форма.ТекущийЭлемент;
	КонецЕсли;
	ИмяТекущегоЭлемента = ?(ТипЗнч(ТекущийЭлемент) = Тип("ПолеФормы"), ТекущийЭлемент.Имя, "");
	
	Для Индекс = 1 По 3 Цикл
		ИмяЭлементаФормы = СтрЗаменить(ШаблонИмяЭлементаФормы, "%Индекс%", Индекс);
		ИмяПоляОбъекта   = СтрЗаменить(ШаблонИмяПоляОбъекта  , "%Индекс%", Индекс);
		ТипПоляОбъекта   = ТипЗнч(Объект[ИмяПоляОбъекта]);

		МассивПараметров = Новый Массив();
		
		ВидПараметра = ВидыПараметров[ТипПоляОбъекта];
		
		Если ВидПараметра <> Неопределено Тогда
			
			Если ВидПараметра = "Договор" Тогда
				
				Если СписокПараметров.Свойство("Организация") Тогда     
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", СписокПараметров.Организация));
				КонецЕсли;
				Если СписокПараметров.Свойство("Контрагент") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", СписокПараметров.Контрагент));
				КонецЕсли;
				Если СписокПараметров.Свойство("Партнер") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Партнер", СписокПараметров.Партнер));
				КонецЕсли;
				
			ИначеЕсли ВидПараметра = "БанковскийСчетОрганизации" Тогда
				
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.Организация));
				
			ИначеЕсли ВидПараметра = "БанковскийСчетКонтрагента" Тогда
				
				Если СписокПараметров.Свойство("Контрагент") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.Контрагент));
				ИначеЕсли СписокПараметров.Свойство("ФизическоеЛицо") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.ФизическоеЛицо));
				КонецЕсли;
					
				
			ИначеЕсли ВидПараметра = "Номенклатура" Тогда
					
				Если СписокПараметров.Свойство("ГруппаАналитическогоУчетаНоменклатуры") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ГруппаАналитическогоУчета", СписокПараметров.ГруппаАналитическогоУчетаНоменклатуры));
				КонецЕсли;
				Если СписокПараметров.Свойство("ГруппаФинУчетаНоменклатуры") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ГруппаФинансовогоУчета", СписокПараметров.ГруппаФинУчетаНоменклатуры));
				КонецЕсли;
				Если СписокПараметров.Свойство("ТипНоменклатуры") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", СписокПараметров.ТипНоменклатуры));
				КонецЕсли;
			
			ИначеЕсли ВидПараметра = "Субконто"
				И СписокПараметров.Свойство("СчетУчета") Тогда
				
				СвойстваСчета = НастройкаСчетовУчетаСлужебныйВызовСервера.ПолучитьСвойстваСчета(СписокПараметров.СчетУчета);
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СвойстваСчета["ВидСубконто" + Индекс]));
			
			//++ Локализация
				
			ИначеЕсли ВидПараметра = "ПартииТМЦВЭксплуатации" Тогда
				
				ОграничениеВыбора = Ложь;
				Если СписокПараметров.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Организация", СписокПараметров.Организация));
					ОграничениеВыбора = Истина;
				КонецЕсли;
				Если СписокПараметров.Свойство("Номенклатура") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Номенклатура", СписокПараметров.Номенклатура));
					ОграничениеВыбора = Истина;
				КонецЕсли;
				Если СписокПараметров.Свойство("ФизическоеЛицо") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("ФизическоеЛицо", СписокПараметров.ФизическоеЛицо));
					ОграничениеВыбора = Истина;
				КонецЕсли;
				Если ОграничениеВыбора Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("ОграничениеВыбора", Истина));
				КонецЕсли;  
			//-- Локализация
			КонецЕсли;
			
		КонецЕсли; 
		
		Если МассивПараметров.Количество()  = 0 И ОписаниеТипаВсеДокументы.СодержитТип(ТипПоляОбъекта)  Тогда
			
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", СписокПараметров.Организация));
			Если СписокПараметров.Свойство("Контрагент")  Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", СписокПараметров.Контрагент));
			КонецЕсли;
			Если СписокПараметров.Свойство("Партнер")  Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Партнер", СписокПараметров.Партнер));
			КонецЕсли;
			Если СписокПараметров.Свойство("ФизическоеЛицо")  Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПодотчетноеЛицо", СписокПараметров.ФизическоеЛицо));
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивПараметров.Количество() > 0 Тогда
			ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
			Форма.Элементы[ИмяЭлементаФормы].ПараметрыВыбора = ПараметрыВыбора;
		КонецЕсли;
		
		Если ОчищатьСвязанныеСубконто 
			И ЗначениеЗаполнено(Объект[ИмяПоляОбъекта]) Тогда
		
			Если ТипыСвязанныхСубконто = Неопределено Тогда
				ВсеТипыСвязанныхСубконто = НастройкаСчетовУчетаСлужебныйВызовСервера.ВсеТипыСвязанныхСубконто();
				ТипыСвязанныхСубконто    = Новый ОписаниеТипов(Новый Массив);
				Для каждого Параметр Из СписокПараметров Цикл
					Если ВсеТипыСвязанныхСубконто[Параметр.Ключ] <> Неопределено Тогда
						ТипыСвязанныхСубконто = Новый ОписаниеТипов(ТипыСвязанныхСубконто, 
							ВсеТипыСвязанныхСубконто[Параметр.Ключ].Типы());
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ТипыСвязанныхСубконто.СодержитТип(ТипПоляОбъекта) Тогда
				Объект[ИмяПоляОбъекта] = Новый (ТипПоляОбъекта);
			КонецЕсли;
		
		КонецЕсли;
		
		Если ИмяТекущегоЭлемента = ИмяЭлементаФормы Тогда
			ОчищатьСвязанныеСубконто = Истина; // Очищаются только субконто с номером больше текущего
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

// Функция формирует структуру ключей со значениями отбора для субконто.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для который выполняется настройка субконто.
//	ТекущиеДанные - РегистрБухгалтерииЗаписьИмяРегистраБухгалтерии - Запись, для которой настраиваются параметры выбора.
//	ШаблонИмяПоляОбъекта - Строка - Шаблон имени поля объекта, содержащего субконто.
//	ИмяПоляСчетУчета - Строка - Шаблон имени поля формы, в который выводится счет.
//
//Возвращаемое значение:
//   Структура - Содержит ключи со значениями отборов.
//
Функция ПараметрыВыбораСубконто(Организация, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)   Экспорт

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация",    Организация);
	СписокПараметров.Вставить("СчетУчета",      ТекущиеДанные[ИмяПоляСчетУчета]);
	
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		
		Если ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Партнеры") Тогда
			СписокПараметров.Вставить("Партнер", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Организации") Тогда
			МассивОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокПараметров.Организация);
			МассивОрганизаций.Добавить(ТекущиеДанные[ИмяПоля]);
			СписокПараметров.Вставить("Организация", Новый ФиксированныйМассив(МассивОрганизаций));
		ИначеЕсли НастройкаСчетовУчетаСлужебныйВызовСервера.ОписаниеТиповДоговоров(Истина).СодержитТип(ТипЗнч(ТекущиеДанные[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СписокПараметров.Вставить("ФизическоеЛицо", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры") Тогда
			СписокПараметров.Вставить("ГруппаАналитическогоУчетаНоменклатуры", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры") Тогда
			СписокПараметров.Вставить("ГруппаФинУчетаНоменклатуры", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
			СписокПараметров.Вставить("ТипНоменклатуры", ТекущиеДанные[ИмяПоля]);
		КонецЕсли;
		
	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

#КонецОбласти

#КонецОбласти

//++ Локализация

#Область СлужебныйПрограммныйИнтерфейс

#Область НастройкаСчетовУчетаПрочихОпераций

// Описание
// 
// Параметры:
// 	ФормаОбъект - ФормаКлиентскогоПриложения, ДанныеФормыСтруктура -
// 	ПутьКДанным - Строка -
// 	ИдентификаторСтроки - Неопределено, Число -
// Возвращаемое значение:
// 	ДанныеФормыКоллекция, Произвольный, Неопределено - Описание
Функция ДанныеПоПути(ФормаОбъект, Знач ПутьКДанным, Знач ИдентификаторСтроки = Неопределено) Экспорт
	
	ЧастиПутиКДанным = СтрРазделить(ПутьКДанным, ".", Ложь);
	Если ТипЗнч(ФормаОбъект) <> Тип("ФормаКлиентскогоПриложения") 
		И ЧастиПутиКДанным[0] = "Объект" Тогда
		ЧастиПутиКДанным.Удалить(0);
	КонецЕсли;
	
	Если ЧастиПутиКДанным.Количество() > 1 Тогда
		Данные = ФормаОбъект[ЧастиПутиКДанным[0]][ЧастиПутиКДанным[1]];
		Если ИдентификаторСтроки <> Неопределено И ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
			Данные = Данные.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если ЧастиПутиКДанным.Количество() = 3 Тогда
				Данные = Данные[ЧастиПутиКДанным[2]];
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЧастиПутиКДанным.Количество() = 1 Тогда
		Данные = ФормаОбъект[ЧастиПутиКДанным[0]];
	Иначе
		Данные = ФормаОбъект;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция КонтекстНастройки(Форма, ПараметрыНастройки, ВыбраннаяСтрока = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Организация = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыНастройки.Организация) Тогда
		Организация = ДанныеПоПути(Форма, ПараметрыНастройки.Организация, ВыбраннаяСтрока);
	КонецЕсли;
	Результат.Вставить("Организация", Организация);
	
	АналитикаАктивовПассивов = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыНастройки.АналитикаАктивовПассивов) Тогда
		АналитикаАктивовПассивов = ДанныеПоПути(Форма, ПараметрыНастройки.АналитикаАктивовПассивов, ВыбраннаяСтрока);
	КонецЕсли;
	Результат.Вставить("АналитикаАктивовПассивов", АналитикаАктивовПассивов);
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеНастройкиОтражения(ДанныеНастройки, ПараметрыНастройки) Экспорт
	
	Результат = НСтр("ru='Настроить';uk='Настроїти'");
	
	Если Не ЗначениеЗаполнено(ДанныеНастройки[ПараметрыНастройки.СчетУчета]) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить(Строка(ДанныеНастройки[ПараметрыНастройки.СчетУчета]));
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеНастройки[ПараметрыНастройки.СчетУчета]);
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		ЗначениеСубконто = ДанныеНастройки[ПараметрыНастройки["Субконто" + НомерСубконто]];
		
		Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
			МассивПолей.Добавить(Строка(ЗначениеСубконто));
		Иначе
			ОписаниеТиповСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
			ПредставлениеЗаполнено = Ложь;
			Для Каждого Источник Из ПараметрыНастройки.ИсточникиПодбораСубконто Цикл
				Если ОписаниеТиповСубконто.СодержитТип(Источник.Значение) Тогда
					ПредставлениеЗаполнено = Истина;
					МассивПолей.Добавить(НСтр("ru='<авто>';uk='<авто>'"));
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ПредставлениеЗаполнено Тогда
				МассивПолей.Добавить("<...>");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = СтрСоединить(МассивПолей, ", ");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПредставлениеНастройки(Форма, МассивПараметровНастройки, ПутьКДанным = Неопределено, ИдентификаторыСтрок = Неопределено) Экспорт
	
	Если ИдентификаторыСтрок <> Неопределено И ТипЗнч(ИдентификаторыСтрок) <> Тип("Массив") Тогда
		ИдентификаторыСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыСтрок);
	КонецЕсли;
	
	Для каждого ПараметрыНастройки Из МассивПараметровНастройки Цикл
		Если ПутьКДанным <> Неопределено И ПараметрыНастройки.ПутьКДанным <> ПутьКДанным Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьПредставлениеНастройкиПоПараметрам(Форма, ПараметрыНастройки, ИдентификаторыСтрок);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеНастройкиПоПараметрам(Форма, ПараметрыНастройки, ИдентификаторыСтрок = Неопределено) Экспорт
	
	ДанныеНастройки = ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным);
	Если ТипЗнч(ДанныеНастройки) = Тип("ДанныеФормыКоллекция") Тогда
		Если ИдентификаторыСтрок <> Неопределено Тогда
			// Обновим только по переданным строкам
			Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
				СтрокаТаблицы = ДанныеНастройки.НайтиПоИдентификатору(ИдентификаторСтроки);
				Представление = ПредставлениеНастройкиОтражения(СтрокаТаблицы, ПараметрыНастройки);
				СтрокаТаблицы[ПараметрыНастройки.Представление] = Представление;
			КонецЦикла
		Иначе
			// Обновим все строки таблицы
			Для каждого СтрокаТаблицы Из ДанныеНастройки Цикл
				Представление = ПредставлениеНастройкиОтражения(СтрокаТаблицы, ПараметрыНастройки);
				СтрокаТаблицы[ПараметрыНастройки.Представление] = Представление;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Представление = ПредставлениеНастройкиОтражения(ДанныеНастройки, ПараметрыНастройки);
		Форма[ПараметрыНастройки.Представление] = Представление;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементовФормы(Форма, ДанныеНастройкиСчетовУчета) Экспорт
	
	ДоступнаНастройкиСчетовУчета = ДанныеНастройкиСчетовУчета.ДоступнаНастройкиСчетовУчета;
	
	Для каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		УстановитьВидимостьЭлементовПоПараметрам(Форма, ПараметрыНастройки, ДоступнаНастройкиСчетовУчета);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементовПоПараметрам(Форма, ПараметрыНастройки, ДоступнаНастройкиСчетовУчета)
	
	Данные = ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным);
	
	Для каждого ИмяЭлемента Из ПараметрыНастройки.ЭлементыФормы Цикл
		
		ДоступностьПоТипуСтатьи = Истина;
		ЭлементФормы = Форма.Элементы[ИмяЭлемента];
		ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(ЭлементФормы);
		Если ЗначениеЗаполнено(ПараметрыНастройки.ТипСтатьи) И ТаблицаФормы = Неопределено Тогда
			ДанныеСлужебныхРеквизитов = Неопределено;
			Если ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") И Данные.Количество() > 0 Тогда
				// Редактируем таблицу в режиме "Без разбиения"
				ДанныеСлужебныхРеквизитов = Данные[0];
			ИначеЕсли ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") Тогда
				ДанныеСлужебныхРеквизитов = Форма;
			КонецЕсли;
			Если ДанныеСлужебныхРеквизитов <> Неопределено Тогда
				ДоступностьПоТипуСтатьи = (ДанныеСлужебныхРеквизитов[ПараметрыНастройки.ТипСтатьи] = 3);
			КонецЕсли;
		КонецЕсли;
		
		ЭлементФормы.Видимость = ДоступнаНастройкиСчетовУчета И ПараметрыНастройки.ДоступностьПоОперации И ДоступностьПоТипуСтатьи;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


// Устанавливает свойства измерений на форме
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	РазделУчета - Неопределено, Произвольный -
Процедура УстановитьСвойстваИзмеренийНаФорме(Форма, РазделУчета = Неопределено) Экспорт
	
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	Если РазделУчета = Неопределено Тогда
		// Сбрасываем все предыдущие настройки элементов формы для последующего их определения на основании разделов:
		УстановитьСвойствоЭлементаИзмерения(Форма.Элементы[ИмяЭлементаНаФорме(Настройка, , "АналитикаУчета", "Реквизит")]);
		УстановитьСвойствоЭлементаИзмерения(Форма.Элементы[ИмяЭлементаНаФорме(Настройка, , "МестоУчета", "Реквизит")]);
		УстановитьСвойствоЭлементаИзмерения(Форма.Элементы[ИмяЭлементаНаФорме(Настройка, , "Организация", "Реквизит")]);
	Иначе
		ИмяЭлемента = ИмяЭлементаНаФорме(Настройка, РазделУчета, "АналитикаУчета", "Реквизит");
		СвойстваИзмерения = Настройка.НастройкиРазделов.Получить(РазделУчета).СвойстваАналитики;
		УстановитьСвойствоЭлементаИзмерения(Форма.Элементы[ИмяЭлемента], СвойстваИзмерения);
		ИмяЭлемента = ИмяЭлементаНаФорме(Настройка, РазделУчета, "МестоУчета", "Реквизит");
		СвойстваИзмерения = Настройка.НастройкиРазделов.Получить(РазделУчета).СвойстваМестаУчета;
		УстановитьСвойствоЭлементаИзмерения(Форма.Элементы[ИмяЭлемента], СвойстваИзмерения);
		ИмяЭлемента = ИмяЭлементаНаФорме(Настройка, РазделУчета, "Организация", "Реквизит");
		СвойстваИзмерения = Настройка.НастройкиРазделов.Получить(РазделУчета).СвойстваОрганизации;
		ОтмеченныеРазделы = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Настройка.СписокРазделовУчета);
		УстановитьСвойствоЭлементаИзмерения(Форма.Элементы[ИмяЭлемента], СвойстваИзмерения);
		Если ОтмеченныеРазделы.Количество() = 1 И ОтмеченныеРазделы.Получить(0) = "ДенежныеСредства" Тогда
			Форма.Элементы[ИмяЭлемента].ТолькоПросмотр = Истина;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвойстваСчетовНаФорме(Форма, ИмяЭлементаНастройки, ПараметрыСоздания = Неопределено) Экспорт
	
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	Раздел = ?(ПараметрыСоздания = Неопределено, РазделУчетаПоНастройкам(Настройка), ПараметрыСоздания.РазделУчета);
	
	
	
	
	
    Если ИмяЭлементаНастройки = "СтатьяДоходов" Тогда
    	
    	ИмяЭлементаНаФорме = ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки, "Субконто");
    	
		Если Не Настройка.РедактированиеВСписке Тогда
    		Форма.Элементы[ИмяЭлементаНаФорме].Доступность = Истина;
    		ИмяРеквизита = ИмяРеквизитаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки, "Субконто");
    		ЗначениеРеквизита = ?(Настройка.Свойство("НастройкаПоОдному"), Форма.Запись[ИмяРеквизита], Форма[ИмяРеквизита]);
    		Форма.Элементы[ИмяЭлементаНаФорме].ОтметкаНезаполненного = Не ЗначениеЗаполнено(ЗначениеРеквизита);
    		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
    			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
    		КонецЕсли;
    	КонецЕсли;
    	
    	Если ПараметрыСоздания <> Неопределено И ПараметрыСоздания.ГруппаДляДобавления <> Неопределено И Раздел = "НоменклатураСобственная" И Настройка.РедактированиеВСписке Тогда
            Форма.Элементы[ИмяЭлементаНаФорме].Заголовок = НСтр("ru='Статья доходов';uk='Стаття доходів'");
    	КонецЕсли;
    	
    КонецЕсли;
	
    Если ИмяЭлементаНастройки = "СтатьяЗатрат" Тогда
    	
    	ИмяЭлементаНаФорме = ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки, "Субконто");
    	
		Если Не Настройка.РедактированиеВСписке Тогда
    		Форма.Элементы[ИмяЭлементаНаФорме].Доступность = Истина;
    		ИмяРеквизита = ИмяРеквизитаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки, "Субконто");
    		ЗначениеРеквизита = ?(Настройка.Свойство("НастройкаПоОдному"), Форма.Запись[ИмяРеквизита], Форма[ИмяРеквизита]);
    		Форма.Элементы[ИмяЭлементаНаФорме].ОтметкаНезаполненного = Не ЗначениеЗаполнено(ЗначениеРеквизита);
    		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
    			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
    		КонецЕсли;
    	КонецЕсли;
    	Если ПараметрыСоздания <> Неопределено И ПараметрыСоздания.ГруппаДляДобавления <> Неопределено И Раздел = "НоменклатураСобственная" И Настройка.РедактированиеВСписке Тогда
			Форма.Элементы[ИмяЭлементаНаФорме].Заголовок = НСтр("ru='Статья расходов';uk='Стаття витрат'");
    	КонецЕсли;
    	
    КонецЕсли;

	
	Если ИмяЭлементаНастройки = "Резервы" И Не Настройка.РедактированиеВСписке Тогда
		Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки)].Видимость = Настройка.ОбщиеРеквизиты.ФормироватьРезервыПредстоящихРасходов 
			И Настройка.РеквизитыАналитики.ВидРезервов <> ПредопределенноеЗначение("Справочник.Резервы.РезервЕжегодныхОтпусков");
		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяЭлементаНастройки = "ВыбытиеВНА" И Не Настройка.РедактированиеВСписке Тогда
		Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки)].Видимость = 
			Настройка.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство")
			Или Настройка.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ИнвестиционноеИмущество");
		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяЭлементаНастройки = "АмортизацияВНА" И Не Настройка.РедактированиеВСписке Тогда
		Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки)].Видимость = 
			Настройка.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство")
			Или Настройка.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ИнвестиционноеИмущество")
			Или Настройка.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НМА");
		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяЭлементаНастройки = "ЗабалансовыйУчетВНА" И Не Настройка.РедактированиеВСписке Тогда
		Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки)].Видимость = 
			Настройка.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство")
			Или Настройка.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ИнвестиционноеИмущество");
		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяЭлементаНастройки = "АмортизацияВНА_ЦФ" И Не Настройка.РедактированиеВСписке Тогда
		Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки)].Видимость = 
			Настройка.РеквизитыАналитики.ВидАктива <> ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НИОКР");
		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяЭлементаНастройки = "РезервДооценкиВНА" И Не Настройка.РедактированиеВСписке Тогда
		Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки)].Видимость = 
			Настройка.РеквизитыАналитики.ВидАктива <> ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НИОКР");
		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьРаздела(Форма, РазделыСчетовУчета) Экспорт
	
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	
	Если Не Настройка.РазбитьПоРазделамЭлементы Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОтмеченных = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(РазделыСчетовУчета).Количество();
	Для каждого Раздел Из РазделыСчетовУчета Цикл
		Если ОбщийРазделУчетаПоИмениТекущегоРаздела(Раздел.Значение) = "Номенклатура" И Не Настройка.РедактированиеВСписке Тогда
			СтруктураВидимости = Новый Структура;
			Для каждого НастройкаРазделаУчета Из Настройка.НастройкиРазделов Цикл
				Если НастройкаРазделаУчета.Ключ = Раздел.Значение Тогда
					Для каждого СчетУчета Из ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(НастройкаРазделаУчета.Значение.СчетаУчета) Цикл
						ИмяЭлемента = ИмяЭлементаНаФорме(Настройка, Раздел.Значение, СчетУчета);
						Если СтруктураВидимости.Свойство(ИмяЭлемента) Тогда
							СтруктураВидимости.Вставить(ИмяЭлемента, СтруктураВидимости[ИмяЭлемента] Или Раздел.Пометка);
						Иначе
							СтруктураВидимости.Вставить(ИмяЭлемента, Раздел.Пометка);
						КонецЕсли;
					КонецЦикла;
					Для каждого Субконто Из ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(НастройкаРазделаУчета.Значение.Субконто) Цикл
						ИмяЭлемента = ИмяЭлементаНаФорме(Настройка, Раздел.Значение, Субконто, "Субконто");
						Если СтруктураВидимости.Свойство(ИмяЭлемента) Тогда
							СтруктураВидимости.Вставить(ИмяЭлемента, СтруктураВидимости[ИмяЭлемента] Или Раздел.Пометка);
						Иначе
							СтруктураВидимости.Вставить(ИмяЭлемента, Раздел.Пометка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Для каждого ВидимостьЭлемента Из СтруктураВидимости Цикл
				Форма.Элементы[ВидимостьЭлемента.Ключ].Видимость = ВидимостьЭлемента.Значение;
			КонецЦикла;
		Иначе
			ИмяЭлементаНаФорме = ИмяЭлементаНаФорме(Настройка, Раздел.Значение, "", "Группа");
			Форма.Элементы[ИмяЭлементаНаФорме].Видимость = Раздел.Пометка;
			Если Настройка.РедактированиеВСписке Тогда
				Форма.Элементы[ИмяЭлементаНаФорме].ОтображатьВШапке = КоличествоОтмеченных > 1;
			Иначе
				Форма.Элементы[ИмяЭлементаНаФорме].ОтображатьЗаголовок = КоличествоОтмеченных > 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыВыбораСчетаУчета(ИмяВидаСчета, Настройки, Реквизиты = Неопределено, РазделУчета = Неопределено) Экспорт
	
	Если Реквизиты = Неопределено Тогда
		Реквизиты = Настройки.РеквизитыАналитики;
	КонецЕсли;
	
	Если РазделУчета = Неопределено Тогда
		РазделУчета = РазделУчетаПоНастройкам(Настройки);
	КонецЕсли;
    
	СоответствиеИменДоступныхСчетовИменамВидаСчета = Новый Соответствие;
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("Доходы", "СчетаПрочихДоходов");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("НаСкладе", "СчетаУчетаНаСкладе");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("НоменклатураПереданная", "СчетаУчетаПередачиНаКомиссию");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ПередачаВПереработку", "СчетаУчетаПередачиВПереработку");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ЗатратыНаПриобретениеТМЦ", "СчетаУчетаЗатратыНаПриобретение");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ВыручкаОтПродаж", "СчетаУчетаВыручкиОтПродаж");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ВычетыИзДоходов", "СчетаУчетаВычетовИзДоходов");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("СебестоимостьПродаж", "СчетаУчетаСебестоимостиПродаж");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТМЦНаСкладах", "СчетаУчетаТоваровПринятыхНаОтветственноеХранение");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТМЦВПроизводстве", "СчетаУчетаТоваровПринятыхНаОтветственноеХранение");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТМЦУХранителей", "СчетаУчетаТоваровПринятыхНаОтветственноеХранение");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТМЦКСписанию", "СчетаУчетаТоваровПринятыхНаОтветственноеХранение");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("МатериалыПринятыеВПереработку", "СчетаУчетаМатериаловПринятыхВПереработку");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("МатериалыПринятыеВПереработкуВПроизводстве", "СчетаУчетаМатериаловПринятыхВПереработку");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТоварыНаСкладе", "СчетаУчетаТоваровПринятыхНаКомиссию");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТоварыПереданныеНаКомиссию", "СчетаУчетаТоваровПринятыхНаКомиссию");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("Производство", "СчетаУчетаНЗП");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("Резервы", "СчетаРезервов");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТМЦВЭксплуатации", "СчетаУчетаТМЦВЭксплуатации");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТМЦВЭксплуатацииАмортизация", "СчетаУчетаТМЦВЭксплуатацииАмортизация");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыПоПодарочнымСертификатам", "СчетаРасчетовПоАвансаПолученным");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("АвансыПолученные", "СчетаРасчетовПоАвансаПолученным");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("АвансыВыданные", "СчетаРасчетовПоАвансаВыданным");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ОбеспечительныйПлатежПоЛизингу", "СчетаРасчетовПоАвансаВыданным");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСКлиентами", "СчетаРасчетовСКлиентами");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСКлиентамиТара", "СчетаРасчетовСКлиентами");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСПоставщиками", "СчетаРасчетовСПоставщиками");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСПоставщикамиТара", "СчетаРасчетовСПоставщиками");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("НеотфактурованныеПоставки", "СчетаРасчетовСПоставщиками");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ВыкупПредметаЛизинга", "СчетаРасчетовСПоставщиками");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("АрендныеОбязательстваПоЛизингу", "СчетаРасчетовСПоставщиками");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ЛизинговыеУслуги", "СчетаРасчетовСПоставщиками");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСКредиторамиОсновнойДолг", "СчетаРасчетовСКредиторамиОсновнойДолг");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСКредиторамиПроценты", "СчетаРасчетовСКредиторамиПроценты");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСКредиторамиКомиссия", "СчетаРасчетовСКредиторамиКомиссия");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСДебиторамиОсновнойДолг", "СчетаРасчетовСДебиторамиОсновнойДолг");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСДебиторамиПроценты", "СчетаРасчетовСДебиторамиПроценты");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСДебиторамиКомиссия", "СчетаРасчетовСДебиторамиПроценты");
	
	Если РазделУчета = "Расходы" Тогда
		МассивДоступныхСчетов = МассивДоступныхСчетовРасходов(ИмяВидаСчета, Реквизиты, Настройки.ДоступныеСчетаУчета);
		Если Настройки.СчетаСДинамическимиПараметрамиВыбора.Найти(ИмяВидаСчета) = Неопределено Тогда
			Настройки.СчетаСДинамическимиПараметрамиВыбора.Добавить(ИмяВидаСчета);
		КонецЕсли;
	ИначеЕсли РазделУчета = "ДенежныеСредства" Тогда
		МассивДоступныхСчетов = МассивДоступныхСчетовДенежныхСредств(Настройки.ОбщиеРеквизиты, Реквизиты, Настройки.ДоступныеСчетаУчета);
		Если Настройки.СчетаСДинамическимиПараметрамиВыбора.Найти(ИмяВидаСчета) = Неопределено Тогда
			Настройки.СчетаСДинамическимиПараметрамиВыбора.Добавить(ИмяВидаСчета);
		КонецЕсли;
	ИначеЕсли РазделУчета = "ВнеоборотныеАктивы" Тогда
		МассивДоступныхСчетов = МассивДоступныхСчетовВнеоборотныхАктивов(ИмяВидаСчета, Реквизиты, Настройки.ДоступныеСчетаУчета);
		Если Настройки.СчетаСДинамическимиПараметрамиВыбора.Найти(ИмяВидаСчета) = Неопределено Тогда
			Настройки.СчетаСДинамическимиПараметрамиВыбора.Добавить(ИмяВидаСчета);
		КонецЕсли;
	Иначе
		ИмяДоступныхСчетов = СоответствиеИменДоступныхСчетовИменамВидаСчета.Получить(ИмяВидаСчета);
		Если ИмяДоступныхСчетов = Неопределено Тогда
			Настройки.ДоступныеСчетаУчета.Свойство(ИмяВидаСчета, МассивДоступныхСчетов);
		Иначе
			Настройки.ДоступныеСчетаУчета.Свойство(ИмяДоступныхСчетов, МассивДоступныхСчетов);
		КонецЕсли;
	КонецЕсли;
	МассивПараметровВыбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый ПараметрВыбора("Отбор.Ссылка", МассивДоступныхСчетов));
	Возврат Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецФункции

Процедура ОбработкаЗаполнения(Форма) Экспорт
	
	РазделУчета = РазделУчетаПоНастройкам(Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета);
	
	Если РазделУчета = "ВнеоборотныеАктивы" Тогда
		ЗаполнитьСчетаУчетаПоУмолчаниюВнеоборотныеАктивы(Форма);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяСубконтоСчета(ИмяСчета) Экспорт
	
	МассивИменСубконто = Новый Массив;
    МассивИменСубконто.Добавить("СтатьяДоходов");
    МассивИменСубконто.Добавить("СтатьяЗатрат");
	
	Для каждого ИмяСубконто Из МассивИменСубконто Цикл
		Если СчетаИспользующиеСубконто(ИмяСубконто).Найти(ИмяСчета) <> Неопределено Тогда
			Возврат ИмяСубконто;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТипСубконтоПоИмени(ИмяСубконто) Экспорт
	
	МассивИменСубконто = Новый Массив;
    МассивИменСубконто.Добавить("СтатьяДоходов");
	
	Если МассивИменСубконто.Найти(ИмяСубконто) <> Неопределено Тогда
		Возврат Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов");
	КонецЕсли;

	МассивИменСубконто = Новый Массив;
    МассивИменСубконто.Добавить("СтатьяЗатрат");
	
	Если МассивИменСубконто.Найти(ИмяСубконто) <> Неопределено Тогда
        Возврат Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СчетаИспользующиеСубконто(ИмяСубконто) Экспорт
	
	СчетаИмеющиеСубконто = Новый Массив;
	
    Если ИмяСубконто = "СтатьяДоходов" Тогда
    	СчетаИмеющиеСубконто.Добавить("ВыручкаОтПродаж");
    	СчетаИмеющиеСубконто.Добавить("ВычетыИзДоходов");
    КонецЕсли;
    
	
    Если ИмяСубконто = "СтатьяЗатрат" Тогда
    	СчетаИмеющиеСубконто.Добавить("СебестоимостьПродаж");
	КонецЕсли;
	
	Возврат СчетаИмеющиеСубконто;
	
КонецФункции

Функция ИмяЭлементаНаФорме(Настройка, РазделУчета = Неопределено, ИмяЭлементаНастройки = "", ТипЭлементаНастройки = "СчетУчета") Экспорт
	
	МассивСтрокИмениЭлемента = Новый Массив;
	Если ЗначениеЗаполнено(Настройка.ПрефиксЭлементовФормы) Тогда
		МассивСтрокИмениЭлемента.Добавить(Настройка.ПрефиксЭлементовФормы);
	КонецЕсли;
	
	Если ТипЭлементаНастройки = "Группа" Тогда
		МассивСтрокИмениЭлемента.Добавить(ТипЭлементаНастройки);
	КонецЕсли;
	Если Настройка.РазбитьПоРазделамЭлементы И (Не ТипЭлементаНастройки = "Реквизит" Или Настройка.РазбитьПоРазделам) Тогда
		Если РазделУчета = Неопределено Тогда
			РазделУчета = РазделУчетаПоНастройкам(Настройка);
		КонецЕсли;
		Если Настройка.РазбитьПоРазделам И (ТипЭлементаНастройки = "Реквизит" Или ТипЭлементаНастройки = "Группа") И РазделУчета <> ИмяЭлементаНастройки Тогда
			ПрефиксРаздела = ОбщийРазделУчетаПоИмениТекущегоРаздела(РазделУчета);
		Иначе
			ПрефиксРаздела = РазделУчета;
		КонецЕсли;
		МассивСтрокИмениЭлемента.Добавить(ПрефиксРаздела);
	КонецЕсли;
	Если ТипЭлементаНастройки = "СчетУчета" Или ТипЭлементаНастройки = "Субконто" Тогда
		МассивСтрокИмениЭлемента.Добавить(ТипЭлементаНастройки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяЭлементаНастройки)
		И (РазделУчета <> ИмяЭлементаНастройки Или ТипЭлементаНастройки <> "Группа")
		И (Не Настройка.Свойство("НастройкаПоОдному") Или ТипЭлементаНастройки = "Реквизит") Тогда
		МассивСтрокИмениЭлемента.Добавить(ИмяЭлементаНастройки);
	КонецЕсли;
	ИмяЭлемента = СтрСоединить(МассивСтрокИмениЭлемента, "_");
	
	Возврат ИмяЭлемента;
	
КонецФункции

Функция ИмяЭлементаНастройкиПоИмениЭлементаФормы(ИмяЭлементаФормы, ОставлятьПрефиксТипа = Ложь) Экспорт
	
	МассивСтрокИмениЭлементаФормы = СтрРазделить(ИмяЭлементаФормы, "_");
	МассивСтрокВозврата = Новый Массив;
	ЧислоЧастейИмениЭлемента = ?(ОставлятьПрефиксТипа, 1, 0) + ?(СтрЗаканчиваетсяНа(ИмяЭлементаФормы, "_ЦФ"), 2, 1);
	Для Итератор = 1 По ЧислоЧастейИмениЭлемента Цикл
		МассивСтрокВозврата.Вставить(0, МассивСтрокИмениЭлементаФормы.Получить(МассивСтрокИмениЭлементаФормы.Количество()-Итератор));
	КонецЦикла;
	Возврат СтрСоединить(МассивСтрокВозврата, "_");
	
КонецФункции

Функция ИмяРеквизитаНаФорме(Настройка, РазделУчета = Неопределено, ИмяЭлементаНастройки = "", ТипЭлементаНастройки = "СчетУчета") Экспорт
	
	МассивСтрокИменРеквизита = Новый Массив;
	
	Если ТипЭлементаНастройки = "Реквизит" Тогда
		МассивСтрокИменРеквизита.Добавить(Настройка.ПрефиксПутиКДаннымРеквизитов);
	Иначе
		МассивСтрокИменРеквизита.Добавить(Настройка.ПрефиксПутиКДанным);
	КонецЕсли;
	
	Если Настройка.РазбитьПоРазделам Тогда
		Если РазделУчета = Неопределено Тогда
			РазделУчета = РазделУчетаПоНастройкам(Настройка);
		КонецЕсли;
		МассивСтрокИменРеквизита.Добавить(ОбщийРазделУчетаПоИмениТекущегоРаздела(РазделУчета) + ".");
	КонецЕсли;
	
	Если Не ТипЭлементаНастройки = "Реквизит" Тогда
		МассивСтрокИменРеквизита.Добавить(ТипЭлементаНастройки);
		Если Не Настройка.Свойство("НастройкаПоОдному") Тогда
			МассивСтрокИменРеквизита.Добавить("_");
			МассивСтрокИменРеквизита.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	Иначе
		МассивСтрокИменРеквизита.Добавить(ИмяЭлементаНастройки);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрокИменРеквизита);
	
КонецФункции

Функция РазделыУчетаНеЗависящиеОтОрганизации() Экспорт
	
	МассивВозврата = Новый Массив;
	
	МассивВозврата.Добавить("ВнеоборотныеАктивы");
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ВидыРасчетовСПартнерами() Экспорт
	
	ВидыРасчетов = Новый Массив;
	ВидыРасчетов.Добавить("РасчетыСКлиентами");
	ВидыРасчетов.Добавить("РасчетыСПоставщиками");
	ВидыРасчетов.Добавить("РасчетыСКомиссионерами");
	ВидыРасчетов.Добавить("РасчетыСКомитентами");
	ВидыРасчетов.Добавить("РасчетыСКомитентамиПоЗакупке");
	ВидыРасчетов.Добавить("РасчетыСКредиторами");
	ВидыРасчетов.Добавить("РасчетыСДебиторами");
		
	Возврат ВидыРасчетов;
		
КонецФункции

Функция СписокРазделовСчетовУчета() Экспорт
	
	СписокВозврата = Новый СписокЗначений;
	
	СписокВозврата.Добавить("НоменклатураСобственная", НСтр("ru='номенклатуры';uk='номенклатури'"));
	СписокВозврата.Добавить("НоменклатураПереданная", НСтр("ru='номенклатуры переданной';uk='номенклатури переданої'"));
	СписокВозврата.Добавить("НоменклатураПринятая", НСтр("ru='номенклатуры принятой';uk='номенклатури прийнятої'"));
	СписокВозврата.Добавить("ТМЦВЭксплуатации", НСтр("ru='ТМЦ в эксплуатации';uk='ТМЦ в експлуатації'"));
	СписокВозврата.Добавить("ДенежныеСредства", НСтр("ru='денежных средств';uk='грошових коштів'"));
	СписокВозврата.Добавить("ПодарочныеСертификаты", НСтр("ru='подарочных сертификатов';uk='подарункових сертифікатів'"));
	СписокВозврата.Добавить("РасчетыСКлиентами", НСтр("ru='расчетов с клиентами';uk='розрахунків з клієнтами'"));
	СписокВозврата.Добавить("РасчетыСПоставщиками", НСтр("ru='расчетов с поставщиками';uk='розрахунків з постачальниками'"));
	СписокВозврата.Добавить("РасчетыСКомиссионерами", НСтр("ru='расчетов с комиссионерами';uk='розрахунків з комісіонерами'"));
	СписокВозврата.Добавить("РасчетыСКомитентами", НСтр("ru='расчетов с комитентами по продаже';uk='розрахунків з комітентами з продажу'"));
	СписокВозврата.Добавить("РасчетыСКомитентамиПоЗакупке", НСтр("ru='расчетов с комитентами по закупке';uk='розрахунків з комітентами з купівлі'"));
	СписокВозврата.Добавить("РасчетыСКредиторами", НСтр("ru='расчетов с кредиторами';uk='розрахунків з кредиторами'"));
	СписокВозврата.Добавить("РасчетыСДебиторами", НСтр("ru='расчетов с дебиторами';uk='розрахунків з дебіторами'"));
	СписокВозврата.Добавить("Производство", НСтр("ru='Производства';uk='Виробництва'"));
	СписокВозврата.Добавить("ВнеоборотныеАктивы", НСтр("ru='необоротных активов';uk='необоротних активів'"));
	СписокВозврата.Добавить("Расходы", НСтр("ru='прочих расходов';uk='інших витрат'"));
	СписокВозврата.Добавить("Доходы", НСтр("ru='прочих доходов';uk='інших доходів'"));
	СписокВозврата.Добавить("Резервы", НСтр("ru='резервов (оценочных обязательств)';uk='резервів (оціночних зобов''язань)'"));
	
	Возврат СписокВозврата;
	
КонецФункции

Функция РазделыУчетаДляКоторыхНастраиваютсяИсключения() Экспорт
	
	МассивВозврата = Новый Массив;
	
	МассивВозврата.Добавить("Доходы");
	МассивВозврата.Добавить("НоменклатураСобственная");
	МассивВозврата.Добавить("НоменклатураПереданная");
	МассивВозврата.Добавить("НоменклатураПринятая");
	МассивВозврата.Добавить("ПодарочныеСертификаты");
	МассивВозврата.Добавить("Производство");
	МассивВозврата.Добавить("Расходы");
	МассивВозврата.Добавить("РасчетыСКлиентами");
	МассивВозврата.Добавить("РасчетыСПоставщиками");
	МассивВозврата.Добавить("РасчетыСКомиссионерами");
	МассивВозврата.Добавить("РасчетыСКомитентами");
	МассивВозврата.Добавить("РасчетыСКомитентамиПоЗакупке");
	МассивВозврата.Добавить("РасчетыСКредиторами");
	МассивВозврата.Добавить("РасчетыСДебиторами");
	МассивВозврата.Добавить("Резервы");
	МассивВозврата.Добавить("ТМЦВЭксплуатации");
	
	Возврат МассивВозврата;
КонецФункции

Функция ЗаголовокПоРазделамУчета(РазделыУчета) Экспорт
	
	Если ТипЗнч(РазделыУчета) = Тип("Массив") Тогда
		СписокРазделов = СписокРазделовСчетовУчета();
	КонецЕсли;
	МассивЗаголовка = Новый Массив;
	
	Для каждого Раздел Из РазделыУчета Цикл
		Пометка = ?(ТипЗнч(РазделыУчета) = Тип("Массив"), СписокРазделов.НайтиПоЗначению(Раздел) <> Неопределено, Раздел.Пометка);
		Если Пометка Тогда
			Представление = ?(ТипЗнч(РазделыУчета) = Тип("Массив"), СписокРазделов.НайтиПоЗначению(Раздел).Представление, Раздел.Представление);
			МассивЗаголовка.Добавить(Представление);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаголовка.Количество() Тогда
		Возврат СтрСоединить(МассивЗаголовка, ", ");
	Иначе
		Возврат НСтр("ru='< не указаны >';uk='< не вказані >'");
	КонецЕсли;
	
КонецФункции

// Проверяет корректность выбранных счетов учета, а также настраивает элементы управления по переданным параметрам.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
//
Процедура УстановитьСвойстваЭлементовНастройкиСчетовУчета(Форма) Экспорт
	
	Настройки = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	Для каждого ИмяСчета Из Настройки.СчетаСДинамическимиПараметрамиВыбора Цикл
		ЭлементФормы = Форма.Элементы[ИмяЭлементаНаФорме(Настройки, Неопределено, ИмяСчета)];
		ЭлементФормы.ПараметрыВыбора = ПараметрыВыбораСчетаУчета(ИмяСчета, Настройки);
	КонецЦикла;
	Для каждого ИмяСчета Из Настройки.СчетаСДинамическимиСвойствами Цикл
		УстановитьСвойстваСчетовНаФорме(Форма, ИмяСчета);
	КонецЦикла;
	Если Настройки.ОбщиеРеквизиты.Свойство("СписокРазделовУчета") Тогда
		УстановитьВидимостьРаздела(Форма, Настройки.СписокРазделовУчета);
	КонецЕсли;
	ОбработкаЗаполнения(Форма);
	
КонецПроцедуры

// Заполняет реквизиты параметров настройки счетов учета, которые влияют на настройку
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	АналитикаУчета - ОпределяемыйТип.НастройкаСчетовУчетаАналитикаУчета - аналитика учета порядка отражения
//
Процедура ЗаполнитьРеквизитыНастройкиСчетовУчетаПоДаннымОбъектаАналитики(Форма, АналитикаУчета) Экспорт
	
	ПутиКРеквизитамАналитики = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета.ПутиКРеквизитамАналитики;
	Реквизиты = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета.РеквизитыАналитики;
	
	Для каждого ЭлементСоответствияИменРеквизитовИПути Из ПутиКРеквизитамАналитики Цикл
		Если Реквизиты.Свойство(ЭлементСоответствияИменРеквизитовИПути.Ключ) И ЗначениеЗаполнено(ЭлементСоответствияИменРеквизитовИПути.Значение) Тогда
			Реквизиты[ЭлементСоответствияИменРеквизитовИПути.Ключ] = АналитикаУчета[ЭлементСоответствияИменРеквизитовИПути.Значение];
		КонецЕсли;
	КонецЦикла;
	Если АналитикаУчета <> Неопределено И ТипЗнч(АналитикаУчета.Ссылка) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов") Тогда
		МассивВидовРасчетов = Новый Массив;
		Для каждого РеквизитВидаРасчетов Из ПутиКРеквизитамАналитики Цикл
			Если АналитикаУчета[РеквизитВидаРасчетов.Значение] Тогда
				МассивВидовРасчетов.Добавить(РеквизитВидаРасчетов.Ключ);
			КонецЕсли;
		КонецЦикла;
		Если МассивВидовРасчетов.Количество() <> 1 Тогда
			МассивВидовРасчетов = СтрРазделить("РасчетыСКлиентами,РасчетыСПоставщиками,РасчетыСДебиторами,РасчетыСКредиторами,РасчетыСЛизингодателями", ",");
		КонецЕсли;
		Для каждого ЭлементСписка Из Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета.СписокРазделовУчета Цикл
			ЭлементСписка.Пометка = МассивВидовРасчетов.Найти(ЭлементСписка.Значение) <> Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция РазделыУчетаСОбязательнойАналитикой() Экспорт
	
	МассивВозврата = Новый Массив;
	
	МассивВозврата.Добавить("ПодарочныеСертификаты");
	МассивВозврата.Добавить("Расходы");
	МассивВозврата.Добавить("Доходы");
	МассивВозврата.Добавить("ДенежныеСредства");
	МассивВозврата.Добавить("ВнеоборотныеАктивы");
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ГруппаСчетаУчета(ИмяСчета, РазделУчета, ЭтоСписок) Экспорт
	
	СоответствиеСчетовУчетаГруппам = Новый Соответствие;
	
	Если РазделУчета = "Номенклатура" Или РазделУчета = "НоменклатураСобственная" Или РазделУчета = "НоменклатураПереданная" Тогда
		
		Если Не ЭтоСписок Тогда
			
			ГруппаСтоимость = Новый Структура("ИмяГруппы, Заголовок", "Стоимость", НСтр("ru='Счета учета стоимости номенклатуры';uk='Рахунки обліку вартості номенклатури'"));
			Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаСтоимость.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаСтоимость);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭтоСписок И (РазделУчета = "Номенклатура" Или РазделУчета = "НоменклатураСобственная") Тогда
			ГруппаВыручка = Новый Структура("ИмяГруппы, Заголовок", "Выручка", НСтр("ru='Выручка от продаж';uk='Виторг від продажів'"));
			Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаВыручка.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаВыручка);
			КонецЦикла;
			
			ГруппаСебестоимость = Новый Структура("ИмяГруппы, Заголовок", "Себестоимость", НСтр("ru='Себестоимость продаж';uk='Собівартість продажів'"));
			Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаСебестоимость.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаСебестоимость);
			КонецЦикла;
			
			ГруппаСтатьяДоходов = Новый Структура("ИмяГруппы, Заголовок", "СтатьяДоходов", НСтр("ru='Статьи доходов';uk='Статті доходів'"));
			Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаСтатьяДоходов.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаСтатьяДоходов);
			КонецЦикла;
			
			ГруппаСтатьяЗатрат = Новый Структура("ИмяГруппы, Заголовок", "СтатьяЗатрат", НСтр("ru='Статьи затрат';uk='Статті витрат'"));
			Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаСтатьяЗатрат.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаСтатьяЗатрат);
			КонецЦикла;
			
		ИначеЕсли Не ЭтоСписок Тогда
			ГруппаПродажи = Новый Структура("ИмяГруппы, Заголовок", "Продажи", НСтр("ru='Счета учета продаж';uk='Рахунки обліку продажів'"));
			Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаПродажи.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаПродажи);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РазделУчета = "Номенклатура" Или РазделУчета = "НоменклатураПринятая" Тогда
		
		ГруппаТМЦПринятыеНаОтветственноеХранение = Новый Структура("ИмяГруппы, Заголовок", "ТМЦПринятыеНаОтветственноеХранение", НСтр("ru='ТМЦ, принятые на ответственное хранение';uk='ТМЦ, прийняті на відповідальне зберігання'"));
		Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТМЦПринятыеНаОтветственноеХранение.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТМЦПринятыеНаОтветственноеХранение);
		КонецЦикла;
		
		ГруппаМатериалыПринятыеВПереработку = Новый Структура("ИмяГруппы, Заголовок", "МатериалыПринятыеВПереработку", НСтр("ru='Материалы, принятые в переработку';uk='Матеріали, прийняті в переробку'"));
		Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаМатериалыПринятыеВПереработку.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаМатериалыПринятыеВПереработку);
		КонецЦикла;
		
		ГруппаТоварыПринятыеНаКомиссию = Новый Структура("ИмяГруппы, Заголовок", "ТоварыПринятыеНаКомиссию", НСтр("ru='Товары, принятые на комиссию';uk='Товари, прийняті на комісію'"));
		Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТоварыПринятыеНаКомиссию.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТоварыПринятыеНаКомиссию);
		КонецЦикла;
		
	КонецЕсли;
	
	Если РазделУчета = "РасчетыСКомиссионерами" Тогда
		ГруппаТовары = Новый Структура("ИмяГруппы, Заголовок", "Товары", НСтр("ru='Товары';uk='Товари'"));
		Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТовары.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТовары);
		КонецЦикла;
		
		ГруппаВознаграждение = Новый Структура("ИмяГруппы, Заголовок", "Вознаграждение", НСтр("ru='Вознаграждение';uk='Винагорода'"));
		Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаВознаграждение.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаВознаграждение);
		КонецЦикла;
	КонецЕсли;
	
	Если РазделУчета = "РасчетыСКомитентами" Тогда
		ГруппаТовары = Новый Структура("ИмяГруппы, Заголовок", "Товары", НСтр("ru='Товары';uk='Товари'"));
		Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТовары.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТовары);
		КонецЦикла;
		
		ГруппаВознаграждение = Новый Структура("ИмяГруппы, Заголовок", "Вознаграждение", НСтр("ru='Вознаграждение';uk='Винагорода'"));
		Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаВознаграждение.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаВознаграждение);
		КонецЦикла;
		
		ГруппаТоварыКОформлению = Новый Структура("ИмяГруппы, Заголовок", "ТоварыКОформлению", НСтр("ru='Товары к оформлению';uk='Товари до оформлення'"));
		Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТоварыКОформлению.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТоварыКОформлению);
		КонецЦикла;
	КонецЕсли;
	
	Если РазделУчета = "РасчетыСКомитентамиПоЗакупке" Тогда
		ГруппаТоварыВознаграждение = Новый Структура("ИмяГруппы, Заголовок", "ТоварыВознаграждение", НСтр("ru='Расчеты за товары (услуги), вознаграждение';uk='Розрахунки за товари (послуги), винагорода'"));
		Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТоварыВознаграждение.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТоварыВознаграждение);
		КонецЦикла;
		
		ГруппаТоварыКОформлению = Новый Структура("ИмяГруппы, Заголовок", "ТоварыКОформлению", НСтр("ru='Товары к оформлению';uk='Товари до оформлення'"));
		Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТоварыКОформлению.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТоварыКОформлению);
		КонецЦикла;
	КонецЕсли;
	
	Если РазделУчета = "ВнеоборотныеАктивы" Тогда
		ГруппаЦелевоеФинансирование = Новый Структура("ИмяГруппы, Заголовок", "ЦелевоеФинансирование", НСтр("ru='Целевое финансирование';uk='Цільове фінансування'"));
		Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаЦелевоеФинансирование.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаЦелевоеФинансирование);
		КонецЦикла;
		
		ГруппаЗабалансовыйУчет = Новый Структура("ИмяГруппы, Заголовок", "ЗабалансовыйУчет", НСтр("ru='Забалансовый учет';uk='Позабалансовий облік'"));
		Для каждого СчетУчета Из СчетаУчетаГруппы(ГруппаЗабалансовыйУчет.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаЗабалансовыйУчет);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеСчетовУчетаГруппам.Получить(ИмяСчета);
	
КонецФункции

Функция СчетаУчетаГруппы(ИмяГруппы, РазделУчета = Неопределено) Экспорт
	
	МассивСчетов = Новый Массив;
	
	Если ИмяГруппы = "Стоимость" Тогда
		
		МассивСчетов.Добавить("НаСкладе");
		МассивСчетов.Добавить("ЗатратыНаПриобретениеТМЦ");
		МассивСчетов.Добавить("НоменклатураПереданная");
		МассивСчетов.Добавить("ПередачаВПереработку");
		
	КонецЕсли;
	
	Если ИмяГруппы = "Выручка" Или ИмяГруппы = "Продажи" Тогда
		
		МассивСчетов.Добавить("ВыручкаОтПродаж");
		МассивСчетов.Добавить("ВычетыИзДоходов");
        МассивСчетов.Добавить("СтатьяДоходов");

	КонецЕсли;
	
	Если ИмяГруппы = "Себестоимость" Или ИмяГруппы = "Продажи" Тогда
		
		МассивСчетов.Добавить("СебестоимостьПродаж");
        МассивСчетов.Добавить("СтатьяЗатрат");

	КонецЕсли;

	
	Если ИмяГруппы = "ТМЦПринятыеНаОтветственноеХранение" Тогда
		
		МассивСчетов.Добавить("ТМЦНаСкладах");
		МассивСчетов.Добавить("ТМЦВПроизводстве");
		МассивСчетов.Добавить("ТМЦУХранителей");
		МассивСчетов.Добавить("ТМЦКСписанию");
		
	КонецЕсли;
	
	Если ИмяГруппы = "МатериалыПринятыеВПереработку" Тогда
		
		МассивСчетов.Добавить("МатериалыПринятыеВПереработку");
		МассивСчетов.Добавить("МатериалыПринятыеВПереработкуВПроизводстве");
		
	КонецЕсли;
	
	Если ИмяГруппы = "ТоварыПринятыеНаКомиссию" Тогда
		
		МассивСчетов.Добавить("ТоварыНаСкладе");
		МассивСчетов.Добавить("ТоварыПереданныеНаКомиссию");
		
	КонецЕсли;

	Если РазделУчета = "РасчетыСКомиссионерами" И ИмяГруппы = "Товары" Или РазделУчета = "РасчетыСКомитентами" И ИмяГруппы = "Вознаграждение"
		Или РазделУчета = "РасчетыСКомитентамиПоЗакупке" И ИмяГруппы = "ТоварыВознаграждение" Тогда
		МассивСчетов.Добавить("РасчетыСКлиентами");
		МассивСчетов.Добавить("АвансыПолученные");
	КонецЕсли;
	
	Если РазделУчета = "РасчетыСКомиссионерами" И ИмяГруппы = "Вознаграждение" Или РазделУчета = "РасчетыСКомитентами" И ИмяГруппы = "Товары" Тогда
		МассивСчетов.Добавить("РасчетыСПоставщиками");
		МассивСчетов.Добавить("АвансыВыданные");
	КонецЕсли;
	
	Если РазделУчета = "РасчетыСКомитентами" И ИмяГруппы = "ТоварыКОформлению" Тогда
		МассивСчетов.Добавить("ТоварыКомитентовКОформлениюПоПродаже");
	КонецЕсли;
	
	Если РазделУчета = "РасчетыСКомитентамиПоЗакупке" И ИмяГруппы = "ТоварыКОформлению" Тогда
		МассивСчетов.Добавить("ТоварыКомитентовКОформлениюПоЗакупке");
	КонецЕсли;
	
	Если ИмяГруппы = "ЦелевоеФинансирование" Тогда
		
		МассивСчетов.Добавить("СтоимостьВНА_ЦФ");
		МассивСчетов.Добавить("АмортизацияВНА_ЦФ");
		
	КонецЕсли;
	
	Если ИмяГруппы = "ЗабалансовыйУчет" Тогда
		
		МассивСчетов.Добавить("ЗабалансовыйУчетВНА");
		
	КонецЕсли;
	
	Возврат МассивСчетов;
	
КонецФункции

Функция ДопПредставлениеГруппы(Форма, ИмяГруппы) Экспорт
	
	СчетаУчетаГруппы = СчетаУчетаГруппы(ИмяГруппы);
	ЗначенияСчетов = Новый Массив;
	Для каждого СчетУчета Из СчетаУчетаГруппы Цикл
		Если СтрНачинаетсяС(СчетУчета, "СтатьяДоходов") ИЛИ СтрНачинаетсяС(СчетУчета, "СтатьяЗатрат") Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеСчета = Форма[ИмяРеквизитаНаФорме(Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета,, СчетУчета)];
		Если ЗначениеЗаполнено(ЗначениеСчета) Тогда
			ЗначенияСчетов.Добавить(ЗначениеСчета);
		КонецЕсли;
	КонецЦикла;
	
	Возврат " (" + ?(ЗначенияСчетов.Количество(), СтрСоединить(ЗначенияСчетов, ", "), НСтр("ru='не указаны';uk='не зазначені'")) + ")";
	
КонецФункции

Функция РазделУчетаПоИмениСчета(ИмяВидаСчета) Экспорт
	
	СоответствиеИменВидовСчетовРазделамУчета = Новый Соответствие;
	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("Расходы", "Расходы");
	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("Доходы", "Доходы");
	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ДенежныеСредства", "ДенежныеСредства");
	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("НаСкладе", "НоменклатураСобственная");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ВыручкаОтПродаж", "Номенклатура");	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ВычетыИзДоходов", "Номенклатура");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("СебестоимостьПродаж", "Номенклатура");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ЗатратыНаПриобретениеТМЦ", "НоменклатураПереданная");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ПередачаВПереработку", "НоменклатураПереданная");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("НоменклатураПереданная", "НоменклатураПереданная");
	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТМЦНаСкладах", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТМЦВПроизводстве", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТМЦУХранителей", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТМЦКСписанию", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("МатериалыПринятыеВПереработку", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("МатериалыПринятыеВПереработкуВПроизводстве", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТоварыНаСкладе", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТоварыПереданныеНаКомиссию", "НоменклатураПринятая");
	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСКлиентами", "РасчетыСПартнерами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("АвансыПолученные", "РасчетыСПартнерами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСПоставщиками", "РасчетыСПартнерами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("АвансыВыданные", "РасчетыСПартнерами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСКлиентамиТара", "РасчетыСКлиентами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСПоставщикамиТара", "РасчетыСПоставщиками");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("НеотфактурованныеПоставки", "РасчетыСПоставщиками");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТоварыКомитентовКОформлениюПоПродаже", "РасчетыСКомитентами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТоварыКомитентовКОформлениюПоЗакупке", "РасчетыСКомитентамиПоЗакупке");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСКредиторамиОсновнойДолг", "РасчетыСКредиторами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСКредиторамиПроценты", "РасчетыСКредиторами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСКредиторамиКомиссия", "РасчетыСКредиторами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСДебиторамиОсновнойДолг", "РасчетыСДебиторами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСДебиторамиПроценты", "РасчетыСДебиторами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСДебиторамиКомиссия", "РасчетыСДебиторами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ОбеспечительныйПлатежПоЛизингу", "РасчетыСЛизингодателями");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("АрендныеОбязательстваПоЛизингу", "РасчетыСЛизингодателями");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ЛизинговыеУслуги", "РасчетыСЛизингодателями");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ВыкупПредметаЛизинга", "РасчетыСЛизингодателями");
	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("Производство", "Производство");
	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("Резервы", "Резервы");
	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТМЦВЭксплуатации", "ТМЦВЭксплуатации");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТМЦВЭксплуатацииАмортизация", "ТМЦВЭксплуатации");
	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыПоПодарочнымСертификатам", "ПодарочныеСертификаты");
	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("СтоимостьВНА", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("АмортизацияВНА", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РезервДооценкиВНА", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ВыбытиеВНА", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("СтоимостьВНА_ЦФ", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("АмортизацияВНА_ЦФ", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ЗабалансовыйУчетВНА", "ВнеоборотныеАктивы");
	
	Возврат СоответствиеИменВидовСчетовРазделамУчета.Получить(ИмяВидаСчета);
	
КонецФункции

Процедура ЗаполнитьСчетаУчетаНастройкамиРаздела(Раздел, СтруктураЗаполнения, НастройкиСчетовУчета, Источник) Экспорт
	
	НастройкаРаздела = НастройкиСчетовУчета.НастройкиРазделов.Получить(Раздел);
	
	СчетаРаздела = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(НастройкаРаздела.СчетаУчета);
	Для каждого СчетРаздела Из СчетаРаздела Цикл
		ИмяРеквизитаНаФорме = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(НастройкиСчетовУчета, Раздел, СчетРаздела);
		ИмяИсточника = ?(НастройкиСчетовУчета.РедактированиеВСписке, СтрЗаменить(ИмяРеквизитаНаФорме, НастройкиСчетовУчета.ПрефиксПутиКДанным, ""), ИмяРеквизитаНаФорме);
		СтруктураЗаполнения.Вставить("СчетУчета_" + СчетРаздела, Источник[ИмяИсточника]);
	КонецЦикла;
	
	СубконтоРаздела = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(НастройкаРаздела.Субконто);
	Для каждого Субконто Из СубконтоРаздела Цикл
		ИмяРеквизитаНаФорме = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(НастройкиСчетовУчета, Раздел, Субконто, "Субконто");
		ИмяИсточника = ?(НастройкиСчетовУчета.РедактированиеВСписке, СтрЗаменить(ИмяРеквизитаНаФорме, НастройкиСчетовУчета.ПрефиксПутиКДанным, ""), ИмяРеквизитаНаФорме);
		СтруктураЗаполнения.Вставить("Субконто_" + Субконто, Источник[ИмяИсточника]);
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализироватьСтруктуруИзмеренийРегистра() Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	СтруктураВозврата.Вставить("АналитикаУчета", Неопределено);
	СтруктураВозврата.Вставить("МестоУчета", Неопределено);
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПодразделыОбщегоРаздела(ИмяРаздела) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Если ИмяРаздела = "РасчетыСПартнерами" Тогда
		МассивВозврата.Добавить("РасчетыСКлиентами");
		МассивВозврата.Добавить("РасчетыСПоставщиками");
		МассивВозврата.Добавить("РасчетыСКомиссионерами");
		МассивВозврата.Добавить("РасчетыСКомитентами");
		МассивВозврата.Добавить("РасчетыСКомитентамиПоЗакупке");
		МассивВозврата.Добавить("РасчетыСКредиторами");
		МассивВозврата.Добавить("РасчетыСДебиторами");
	КонецЕсли;
	
	Если ИмяРаздела = "Номенклатура" Тогда
		МассивВозврата.Добавить("НоменклатураСобственная");
		МассивВозврата.Добавить("НоменклатураПереданная");
		МассивВозврата.Добавить("НоменклатураПринятая");
	КонецЕсли;
	
	Если МассивВозврата.Количество() = 0 Тогда
		МассивВозврата.Добавить(ИмяРаздела);
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ОбщийРазделУчетаПоИмениТекущегоРаздела(ИмяРаздела) Экспорт
	
	СоответствиеРазделовУчетаИменамТаблиц = Новый Соответствие;
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСКлиентами", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСПоставщиками", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСКомиссионерами", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСКомитентами", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСКомитентамиПоЗакупке", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСКредиторами", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСДебиторами", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("НоменклатураСобственная", "Номенклатура");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("НоменклатураПереданная", "Номенклатура");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("НоменклатураПринятая", "Номенклатура");
	
	СтрокаВозврата = СоответствиеРазделовУчетаИменамТаблиц.Получить(ИмяРаздела);
	Если СтрокаВозврата = Неопределено Тогда
		СтрокаВозврата = ИмяРаздела;
	КонецЕсли;
	
	Возврат СтрокаВозврата;
	
КонецФункции

Функция ЭтоПодраздел(ИмяРаздела) Экспорт
	
	Возврат ИмяРаздела <> ОбщийРазделУчетаПоИмениТекущегоРаздела(ИмяРаздела);
	
КонецФункции

Функция РазделУчетаПоНастройкам(Настройки) Экспорт
	
	ОтмеченныеРазделы = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Настройки.СписокРазделовУчета);
	Если ОтмеченныеРазделы.Количество() Тогда
		Возврат ОтмеченныеРазделы.Получить(0);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция РазделУчетаПоАналитикеУчета(АналитикаУчета) Экспорт
	
	СоответствиеТиповАналитикУчетаРазделамУчета = Новый Соответствие;

	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"), "Расходы");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов"), "Доходы");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"), "ДенежныеСредства");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.Кассы"), "ДенежныеСредства");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры"), "Номенклатура");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов"), "РасчетыСПартнерами");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.Резервы"), "Резервы");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.КатегорииЭксплуатации"), "ТМЦВЭксплуатации");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов"), "ВнеоборотныеАктивы");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.ВидыПодарочныхСертификатов"), "ПодарочныеСертификаты");
	
	РазделУчета = СоответствиеТиповАналитикУчетаРазделамУчета.Получить(ТипЗнч(АналитикаУчета));
	
	Возврат РазделУчета;
	
КонецФункции

Функция ЭтоНеРеквизитАналитики(ИмяРеквизита) Экспорт
	Возврат СтрНачинаетсяС(ИмяРеквизита, "СчетУчета_") Или СтрНачинаетсяС(ИмяРеквизита, "Субконто_") Или ИмяРеквизита = "Организация";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


// Устанавливает свойство элемента измерения
// 
// Параметры:
// 	ЭлементНаФорме - ПолеФормы, ГруппаФормы, ТаблицаФормы, КомандаФормы -
// 	СвойстваИзмерения - Структура, Неопределено -
Процедура УстановитьСвойствоЭлементаИзмерения(ЭлементНаФорме, СвойстваИзмерения = Неопределено)
	
	Если СвойстваИзмерения = Неопределено Тогда
		ЭлементНаФорме.Видимость = Ложь;
		ЭлементНаФорме.АвтоОтметкаНезаполненного = Ложь;
		ЭлементНаФорме.Заголовок = "";
		ЭлементНаФорме.Подсказка = "";
		ЭлементНаФорме.ПодсказкаВвода = "";
		ЭлементНаФорме.ОграничениеТипа = Новый ОписаниеТипов;
	Иначе
		ЭлементНаФорме.Видимость = ЭлементНаФорме.Видимость Или СвойстваИзмерения.Используется;
		Если СвойстваИзмерения.Используется Тогда
			Если СвойстваИзмерения.Свойство("Заголовок") Тогда
				Если Не ЗначениеЗаполнено(ЭлементНаФорме.Заголовок) И Не ЗначениеЗаполнено(ЭлементНаФорме.Подсказка) Тогда
					ЭлементНаФорме.Заголовок = СвойстваИзмерения.Заголовок;
				ИначеЕсли ЗначениеЗаполнено(ЭлементНаФорме.Заголовок) И ЭлементНаФорме.Заголовок <> СвойстваИзмерения.Заголовок И Не ЗначениеЗаполнено(ЭлементНаФорме.Подсказка) Тогда
					ЭлементНаФорме.Подсказка = ЭлементНаФорме.Заголовок + " / " + СвойстваИзмерения.Заголовок;
					ЭлементНаФорме.Заголовок = "";
				ИначеЕсли Не ЗначениеЗаполнено(ЭлементНаФорме.Заголовок) И ЗначениеЗаполнено(ЭлементНаФорме.Подсказка) И СтрНайти(ЭлементНаФорме.Подсказка, СвойстваИзмерения.Заголовок) = 0 Тогда
					ЭлементНаФорме.Подсказка = ЭлементНаФорме.Подсказка + " / " + СвойстваИзмерения.Заголовок;
				КонецЕсли;
			КонецЕсли;
			Если СвойстваИзмерения.Свойство("ПредставлениеПустого") Тогда
				ИзмерениеОбязательно = Не ЗначениеЗаполнено(СвойстваИзмерения.ПредставлениеПустого);
				ЭлементНаФорме.АвтоОтметкаНезаполненного = ЭлементНаФорме.АвтоОтметкаНезаполненного Или ИзмерениеОбязательно;
				Если Не ИзмерениеОбязательно Тогда
					Если Не ЗначениеЗаполнено(ЭлементНаФорме.ПодсказкаВвода) Тогда
						ЭлементНаФорме.ПодсказкаВвода = СвойстваИзмерения.ПредставлениеПустого;
					ИначеЕсли ЗначениеЗаполнено(ЭлементНаФорме.ПодсказкаВвода) И ЭлементНаФорме.ПодсказкаВвода <> СвойстваИзмерения.ПредставлениеПустого Тогда
						Если СвойстваИзмерения.ПредставлениеПустого = НСтр("ru='не указан';uk='не зазначений'") Тогда
							// Это аналитика, ничего не делаем
						Иначе
							ЭлементНаФорме.ПодсказкаВвода = НСтр("ru='Для всех мест учета';uk='Для всіх місць обліку'");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СвойстваИзмерения.Свойство("ТипЗначения") Тогда
				ЭлементНаФорме.ОграничениеТипа = Новый ОписаниеТипов(ЭлементНаФорме.ОграничениеТипа, СвойстваИзмерения.ТипЗначения.Типы());
			КонецЕсли;
			Если ЭлементНаФорме.ОграничениеТипа.Типы().Количество() > 1 Тогда
				ЭлементНаФорме.ПодсказкаВвода = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область НастройкаСчетовУчетаРасходов

Функция МассивДоступныхСчетовРасходов(ИмяСчета, Реквизиты, ДоступныеСчетаУчета)
	
	МассивВозврата = Новый Массив;
	
	Если ИмяСчета <> "Расходы" И Реквизиты <> Неопределено Тогда
		Возврат МассивВозврата;
	КонецЕсли;
	
	РаспределениеНаВнеоборотныеАктивы = (Реквизиты.ВариантРаспределенияРасходовРегл = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы"));
	Если Реквизиты = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаОС);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаОбъектыСтроительства);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаНМА);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаРасходов);
	ИначеЕсли РаспределениеНаВнеоборотныеАктивы И Реквизиты.РасходыНаОбъектыЭксплуатации И Реквизиты.РасходыНаРемонтОС Тогда
		МассивВозврата = ДоступныеСчетаУчета.СчетаРемонтаОС;
	ИначеЕсли РаспределениеНаВнеоборотныеАктивы И Реквизиты.РасходыНаОбъектыЭксплуатации Тогда
		МассивВозврата = ДоступныеСчетаУчета.СчетаОС;
	ИначеЕсли РаспределениеНаВнеоборотныеАктивы И Реквизиты.РасходыНаОбъектыСтроительства Тогда
		МассивВозврата = ДоступныеСчетаУчета.СчетаОбъектыСтроительства;
	ИначеЕсли РаспределениеНаВнеоборотныеАктивы И Реквизиты.РасходыНаНМАиНИОКР Тогда
		МассивВозврата = ДоступныеСчетаУчета.СчетаНМА;
	ИначеЕсли Реквизиты.СебестоимостьРеализации Тогда
		МассивВозврата = ДоступныеСчетаУчета.СчетаСебестоимостиРеализации;
	ИначеЕсли Реквизиты.ВидДеятельностиРасходов = ПредопределенноеЗначение("Перечисление.ВидыДеятельностиРасходов.ОсновнаяДеятельность") Тогда
		МассивВозврата = ДоступныеСчетаУчета.СчетаРасходов;
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаРасходов);
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область НастройкаСчетовУчетаДенежныхСредств

Функция МассивДоступныхСчетовДенежныхСредств(ОбщиеРеквизиты, Реквизиты, ДоступныеСчетаУчета)
    
	МассивВозврата = Новый Массив;
	
	Если Реквизиты = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаВалютныхБезналичныхДенежныхСредств);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаБезналичныхДенежныхСредств);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаВалютныхНаличныхДенежныхСредств);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаНаличныхДенежныхСредств);
	ИначеЕсли ТипЗнч(Реквизиты.АналитикаДенежныхСредств) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
		Если Не ЗначениеЗаполнено(Реквизиты.ВалютаДенежныхСредств) Или Реквизиты.ВалютаДенежныхСредств <> ОбщиеРеквизиты.ВалютаРеглУчета Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаВалютныхБезналичныхДенежныхСредств);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Реквизиты.ВалютаДенежныхСредств) Или Реквизиты.ВалютаДенежныхСредств = ОбщиеРеквизиты.ВалютаРеглУчета Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаБезналичныхДенежныхСредств);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Реквизиты.АналитикаДенежныхСредств) = Тип("СправочникСсылка.Кассы") Тогда
		Если Не ЗначениеЗаполнено(Реквизиты.ВалютаДенежныхСредств) Или Реквизиты.ВалютаДенежныхСредств <> ОбщиеРеквизиты.ВалютаРеглУчета Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаВалютныхНаличныхДенежныхСредств);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Реквизиты.ВалютаДенежныхСредств) Или Реквизиты.ВалютаДенежныхСредств = ОбщиеРеквизиты.ВалютаРеглУчета Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаНаличныхДенежныхСредств);
		КонецЕсли;
	КонецЕсли;
	
	Если МассивВозврата.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаВалютныхБезналичныхДенежныхСредств);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаБезналичныхДенежныхСредств);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаВалютныхНаличныхДенежныхСредств);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаНаличныхДенежныхСредств);
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область НастройкаСчетовУчетаВнеоборотныхАктивов

Функция МассивДоступныхСчетовВнеоборотныхАктивов(ИмяСчета, Реквизиты, ДоступныеСчетаУчета)
	МассивВозврата = Новый Массив;
	
	ВидАктиваНМА = Реквизиты = Неопределено Или Реквизиты.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НМА");
	ВидАктиваОС = Реквизиты = Неопределено Или Реквизиты.ВидАктива <> ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НМА");
		
	Если ИмяСчета = "СтоимостьВНА" И ВидАктиваНМА Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаСтоимость_НМА);
	КонецЕсли;
	Если ИмяСчета = "СтоимостьВНА" И ВидАктиваОС Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаСтоимость_ОС);
	КонецЕсли;
		
	Если ИмяСчета = "СтоимостьВНА_ЦФ" И ВидАктиваНМА Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаСтоимость_НМА_ЦФ);
	КонецЕсли;
	Если ИмяСчета = "СтоимостьВНА_ЦФ" И ВидАктиваОС Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаСтоимость_ОС_ЦФ);
	КонецЕсли;
		
	Если ИмяСчета = "АмортизацияВНА" И ВидАктиваНМА Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаАмортизация_НМА);
	КонецЕсли;
	Если ИмяСчета = "АмортизацияВНА" И ВидАктиваОС Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаАмортизация_ОС);
	КонецЕсли;
		
	Если ИмяСчета = "АмортизацияВНА_ЦФ" И ВидАктиваНМА Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаАмортизация_НМА_ЦФ);
	КонецЕсли;
	Если ИмяСчета = "АмортизацияВНА_ЦФ" И ВидАктиваОС Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаАмортизация_ОС_ЦФ);
	КонецЕсли;
		
	Если ИмяСчета = "ВыбытиеВНА" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаВыбытие_ОС);
	КонецЕсли;
		
	Если ИмяСчета = "РезервДооценкиВНА" И ВидАктиваНМА Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаРезервДооценки_НМА);
	КонецЕсли;
	Если ИмяСчета = "РезервДооценкиВНА" И ВидАктиваОС Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаРезервДооценки_ОС);
	КонецЕсли;
		
	Если ИмяСчета = "ЗабалансовыйУчетВНА" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаЗабалансовогоУчета_ОС);
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

Процедура ЗаполнитьСчетаУчетаПоУмолчаниюВнеоборотныеАктивы(Форма)
	Настройки = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	
	Если Настройки.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство") 
		ИЛИ Настройки.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ИнвестиционноеИмущество") Тогда
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "СтоимостьВНА")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "СтоимостьВНА_ЦФ")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "АмортизацияВНА")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ИзносОсновныхСредств");
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "ВыбытиеВНА")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи");
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "РезервДооценкиВНА")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДооценкаОсновныхСредств");
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "ЗабалансовыйУчетВНА")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	ИначеЕсли Настройки.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НМА") Тогда
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "СтоимостьВНА")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "АмортизацияВНА")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НакопленнаяАмортизацияНематериальныхАктивов");
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "СтоимостьВНА_ЦФ")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "АмортизацияВНА_ЦФ")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "ВыбытиеВНА")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "РезервДооценкиВНА")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДооценкаНематериальныхАктивов");
		Форма[ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", "ЗабалансовыйУчетВНА")] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//-- Локализация
