////////////////////////////////////////////////////////////////////////////////
// Процедуры, используемые для локализации справочника "Нематериальные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Параметры - см. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - см. ПроведениеДокументов.СвойстваДокумента
//
Процедура ДополнитьПараметрыДляПроведенияДокумента(Параметры, Документ, Свойства) Экспорт
	
	//++ Локализация
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПереоценкаНМАБухгалтерскийУчет);
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ПараметрыАмортизацииНМАБУ);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ);
		
	КонецЕсли;

	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыСведений.ПараметрыАмортизацииНМАБУ);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Процедура формирования движений по подчиненным регистрам нематериальных активов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПереоценкаНМАБухгалтерскийУчет");
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПараметрыАмортизацииНМАБУ");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПорядокУчетаНМАБУ");
	//-- Локализация
	
КонецПроцедуры

// Процедура формирования движений по независимым регистрам нематериальных активов.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, Отказ) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика справочника
//
// Параметры:
//  Объект - СправочникОбъект.НематериальныеАктивы - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПередЗаписью(Объект, Отказ) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Добавляет команды печати.
// 
// Параметры:
// 	КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ФормаЭлемента

Процедура УстановитьВидимостьКомандВводаНаОсновании(Форма, ТаблицаКоманд) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчете(Форма, СведенияОбУчете, ПредставлениеСведений) Экспорт

	//++ Локализация
	Элементы = Форма.Элементы;
	
	Форма.ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОбУчете.Организация, ТекущаяДатаСеанса());
	
	//-- Локализация
	
КонецПроцедуры

Процедура ЗаполнитьСтоимостьИАмортизацию(Форма, СтоимостьИАмортизация) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура НастроитьЗависимыеЭлементыФормы(Форма, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры
 
#КонецОбласти

#Область ФормаСписка

Процедура ДополнитьСведения2_4(ВнеоборотныйАктив, СведенияОбУчете, СтоимостьИАмортизация, МассивСумм, Сведения2_4) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Функция ПолучитьСведения2_2(ВнеоборотныйАктив) Экспорт
	
	Сведения2_2 = Новый Массив;
	
	//++ Локализация
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("СтоимостьБУ", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьНУ", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияБУ", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияНУ", 0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнеоборотныйАктив", ВнеоборотныйАктив);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка КАК ОбъектУчета,
	|	ПорядокУчетаНМА.СчетУчета КАК СчетУчета,                     
	|	ПорядокУчетаНМА.СчетНачисленияАмортизации КАК СчетАмортизации
	|ПОМЕСТИТЬ втАктивыИСчетаУчета
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(, НематериальныйАктив = &ВнеоборотныйАктив) КАК МестоУчетаНМА
	|		ПО НематериальныеАктивы.Ссылка = МестоУчетаНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМА.СрезПоследних(, НематериальныйАктив = &ВнеоборотныйАктив) КАК ПорядокУчетаНМА
	|		ПО МестоУчетаНМА.НематериальныйАктив = ПорядокУчетаНМА.НематериальныйАктив
	|			И МестоУчетаНМА.Организация = ПорядокУчетаНМА.Организация 
	|ГДЕ
	|	НематериальныеАктивы.Ссылка = &ВнеоборотныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетУчета КАК Счет
	|ПОМЕСТИТЬ втСчетаОстатков
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетАмортизации
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|                                            
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОбъектУчета,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаБУ, 
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Т.Счет
	|				ИЗ
	|					втСчетаОстатков КАК Т),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Субконто1 В (&ВнеоборотныйАктив)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ  
	|	ЕСТЬNULL(Стоимость.СуммаБУ, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(Стоимость.СуммаНУ, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(-Амортизация.СуммаБУ, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(-Амортизация.СуммаНУ, 0) КАК АмортизацияНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0) КАК ПервоначальнаяСтоимостьБУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ
	|ИЗ
	|	втАктивыИСчетаУчета КАК втАктивыИСчетаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(, НематериальныйАктив В (&ВнеоборотныйАктив)) КАК ПервоначальныеСведенияНМА
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = ПервоначальныеСведенияНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Стоимость
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = Стоимость.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетУчета = Стоимость.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Амортизация
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = Амортизация.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетАмортизации = Амортизация.Счет 
	|	"; 
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЗначенияПоУмолчанию, Выборка);
	КонецЕсли;
	
	ЗаголовокВалюты = Строка(Константы.ВалютаРегламентированногоУчета.Получить());
	
	Поля = "Представление, СуммаБУ, СуммаНУ";

	Заголовок = НСтр("ru='Первоначальная стоимость (%1):';uk='Первісна вартість (%1):'");
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.СтоимостьБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.СтоимостьНУ;
	Сведения2_2.Добавить(Строка);
	
	Заголовок = НСтр("ru='Накопленная амортизация (%1):';uk='Накопичена амортизація (%1):'");
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.АмортизацияБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.АмортизацияНУ;
	Сведения2_2.Добавить(Строка);
	
	Заголовок = НСтр("ru='Остаточная стоимость (%1):';uk='Залишкова вартість (%1):'");
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.СтоимостьБУ-ЗначенияПоУмолчанию.АмортизацияБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.СтоимостьНУ-ЗначенияПоУмолчанию.АмортизацияНУ;
	Сведения2_2.Добавить(Строка);
	
	//-- Локализация
	
	Возврат Сведения2_2;
	
КонецФункции

Функция ТекстЗапросаФормыСписка() Экспорт

	ТекстЗапроса = Неопределено;
	
	//++ Локализация
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СправочникНематериальныеАктивы.Ссылка,
	|	СправочникНематериальныеАктивы.ПометкаУдаления,
	|	СправочникНематериальныеАктивы.Родитель,
	|	СправочникНематериальныеАктивы.ЭтоГруппа,
	|	СправочникНематериальныеАктивы.Код,
	|	СправочникНематериальныеАктивы.Наименование,
	|	СправочникНематериальныеАктивы.НаименованиеПолное,
	|	СправочникНематериальныеАктивы.ВидНМА,
	|	СправочникНематериальныеАктивы.ПрочиеСведения,
	|	СправочникНематериальныеАктивы.Предопределенный,
	|	СправочникНематериальныеАктивы.ИмяПредопределенныхДанных,
	|	ЕСТЬNULL(МестоУчетаНМА.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(ПорядокУчетаНМАБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеРегл,
	|	ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеУпр,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМА.ДатаПринятияКУчетуБУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПринятияКУчетуРегл,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМА.ДатаПринятияКУчетуУУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПринятияКУчетуУпр,
	|	ВЫБОР
	|		КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL ТОГДА 0
	|		КОГДА НаличиеФайлов.ЕстьФайлы ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьФайлы
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК СправочникНематериальныеАктивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
	|		ПО СправочникНематериальныеАктивы.Ссылка = НаличиеФайлов.ОбъектСФайлами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних КАК МестоУчетаНМА
	|		ПО (МестоУчетаНМА.НематериальныйАктив = СправочникНематериальныеАктивы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних КАК ПервоначальныеСведенияНМА
	|		ПО ПервоначальныеСведенияНМА.НематериальныйАктив = СправочникНематериальныеАктивы.Ссылка
	|			И ПервоначальныеСведенияНМА.Организация = МестоУчетаНМА.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних КАК ПорядокУчетаНМАБУ
	|		ПО (ПорядокУчетаНМАБУ.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
	|			И (ПорядокУчетаНМАБУ.Организация = МестоУчетаНМА.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних КАК ПорядокУчетаНМАУУ
	|		ПО (ПорядокУчетаНМАУУ.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
	|			И (ПорядокУчетаНМАУУ.Организация = МестоУчетаНМА.Организация)
	|ГДЕ
	|	(&Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПустаяСсылка)
	|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) = &Состояние
	|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) = &Состояние
	|				И &ИспользуетсяУправлениеВНА_2_4)";

	//-- Локализация
	
	Возврат ТекстЗапроса;

КонецФункции
 
#КонецОбласти

#Область ФормаСпискаСоСведениями

Процедура ПриСозданииНаСервере_ФормаСпискаСоСведениями(Форма) Экспорт
	
	//++ Локализация 
	Форма.Список.Параметры.УстановитьЗначениеПараметра("ИспользуетсяУправлениеВНА_2_4", Форма.ИспользоватьУчет2_4);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция СведенияОбУчете(НематериальныйАктив) Экспорт

	СведенияОбУчете = Неопределено;
	
	//++ Локализация
	//-- Локализация
	
	Возврат СведенияОбУчете;

КонецФункции

Функция ЕстьПраваНаЧтениеСведений() Экспорт

	//++ Локализация 
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//-- Локализация
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеЗапросаДляВыбора(Параметры, УстановитьВсеОтборы = Ложь) Экспорт

	ОписаниеЗапросаДляВыбора = Неопределено;
	
	//++ Локализация
	//-- Локализация
	
	Возврат ОписаниеЗапросаДляВыбора;
	
КонецФункции

Функция ПервоначальныеСведения(НематериальныйАктив, Период) Экспорт

	ПервоначальныеСведения = Неопределено;
	
	//++ Локализация
	//-- Локализация

	Возврат ПервоначальныеСведения;
	
КонецФункции
 
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация
//-- Локализация

#КонецОбласти
