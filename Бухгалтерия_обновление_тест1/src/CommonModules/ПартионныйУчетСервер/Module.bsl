#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма()).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
		
		//++ Локализация
		//++ НЕ УТ
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииНезавершенногоПроизводства);
		//-- НЕ УТ
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию);
		
        Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДС);
        Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДС2_4);
		//-- Локализация
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
		
		//++ Локализация
		//++ НЕ УТ
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПартииНезавершенногоПроизводства);
		//-- НЕ УТ
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию);
		
        Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДС);
        Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДС2_4);
		//-- Локализация
		
	КонецЕсли;
	
	Параметры.Производный = Документ.Движения.Найти(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя) <> Неопределено;
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным партионного учета.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПартииПрочихРасходов");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "СебестоимостьТоваров");
	
	//++ Локализация
	// Отключим удаление движений у регистров ПУ 2.1 для некоторых типов документов
	ТипДокумента = ТипЗнч(Движения[0].Отбор.Регистратор.Значение);
	ЭтоОфлайн = ТипДокумента <> Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		И ТипДокумента <> Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов")
		И ТипДокумента <> Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
		И ТипДокумента <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		И ТипДокумента <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		//++ НЕ УТ
		И ТипДокумента <> Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов")
		И ТипДокумента <> Тип("ДокументСсылка.ПередачаМатериаловВПроизводство")
		И ТипДокумента <> Тип("ДокументСсылка.ВыпускПродукции")
		//-- НЕ УТ
		И ТипДокумента <> Тип("ДокументСсылка.КорректировкаРеализации")
		И ТипДокумента <> Тип("ДокументСсылка.КорректировкаПриобретения");
	
	//++ НЕ УТ
	#Область ПартииНезавершенногоПроизводства
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаПартииНезавершенногоПроизводства")
		И ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаПартииНезавершенногоПроизводства) Тогда
		
		Движения.ПартииНезавершенногоПроизводства.Записывать = Истина;
		Движения.ПартииНезавершенногоПроизводства.Загрузить(
			ТаблицыДляДвижений.ТаблицаПартииНезавершенногоПроизводства);
		
	ИначеЕсли Движения.Найти("ПартииНезавершенногоПроизводства") <> Неопределено
		И Движения.ПартииНезавершенногоПроизводства.Записывать И ЭтоОфлайн Тогда
		
		Движения.ПартииНезавершенногоПроизводства.Записывать = Ложь;
		
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	
	#Область ПартииПроизводственныхЗатрат
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаПартииПроизводственныхЗатрат")
		И ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаПартииПроизводственныхЗатрат) Тогда
		
		Движения.ПартииПроизводственныхЗатрат.Записывать = Истина;
		Движения.ПартииПроизводственныхЗатрат.Загрузить(ТаблицыДляДвижений.ТаблицаПартииПроизводственныхЗатрат);
		
	ИначеЕсли Движения.Найти("ПартииПроизводственныхЗатрат") <> Неопределено
		И Движения.ПартииПроизводственныхЗатрат.Записывать И ЭтоОфлайн
		И Не (Движения.Найти("МатериалыИРаботыВПроизводстве") <> Неопределено
			И Движения.МатериалыИРаботыВПроизводстве.Количество() = 0
			И Движения.МатериалыИРаботыВПроизводстве.Записывать) Тогда
		
		Движения.ПартииПроизводственныхЗатрат.Записывать = Ложь;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПартииРасходовНаСебестоимостьТоваров
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаПартииРасходовНаСебестоимостьТоваров")
		И ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаПартииРасходовНаСебестоимостьТоваров) Тогда
		
		Движения.ПартииРасходовНаСебестоимостьТоваров.Записывать = Истина;
		Движения.ПартииРасходовНаСебестоимостьТоваров.Загрузить(
			ТаблицыДляДвижений.ТаблицаПартииРасходовНаСебестоимостьТоваров);
		
	ИначеЕсли Движения.Найти("ПартииРасходовНаСебестоимостьТоваров") <> Неопределено
		И Движения.ПартииРасходовНаСебестоимостьТоваров.Записывать И ЭтоОфлайн Тогда
		
		Движения.ПартииРасходовНаСебестоимостьТоваров.Записывать = Ложь;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПартииТоваровОрганизаций
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаПартииТоваровОрганизаций")
		И ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаПартииТоваровОрганизаций) Тогда
		
		Движения.ПартииТоваровОрганизаций.Записывать = Истина;
		Движения.ПартииТоваровОрганизаций.Загрузить(ТаблицыДляДвижений.ТаблицаПартииТоваровОрганизаций);
		
	ИначеЕсли Движения.Найти("ПартииТоваровОрганизаций") <> Неопределено
		И Движения.ПартииТоваровОрганизаций.Записывать И ЭтоОфлайн Тогда
		
		Движения.ПартииТоваровОрганизаций.Записывать = Ложь;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПартииТоваровПереданныеНаКомиссию
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаПартииТоваровПереданныеНаКомиссию")
		И ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаПартииТоваровПереданныеНаКомиссию) Тогда
		
		Движения.ПартииТоваровПереданныеНаКомиссию.Записывать = Истина;
		Движения.ПартииТоваровПереданныеНаКомиссию.Загрузить(
			ТаблицыДляДвижений.ТаблицаПартииТоваровПереданныеНаКомиссию);
		
	ИначеЕсли Движения.Найти("ПартииТоваровПереданныеНаКомиссию") <> Неопределено
		И Движения.ПартииТоваровПереданныеНаКомиссию.Записывать И ЭтоОфлайн Тогда
		
		Движения.ПартииТоваровПереданныеНаКомиссию.Записывать = Ложь;
		
	КонецЕсли;
	
	#КонецОбласти
	
    ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДетализацияПартийТоваровДляНДС");
    ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДетализацияПартийТоваровДляНДС2_4");
	//-- Локализация
	
КонецПроцедуры

// Возникает перед выполнением записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	РегистрыНакопления.СебестоимостьТоваров.ИнициализироватьСохранениеДвиженийНабораЗаписейЗаПериод(
		Документ.Движения.СебестоимостьТоваров, Документ.ДополнительныеСвойства);
	
КонецПроцедуры

// Возникает после выполнения записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаписьДвиженийВРегистры

// Формирует записи в регистр заданий к расчету себестоимости, при изменении записей в регистрах.
//
// Параметры:
//  Документ - ДокументОбъект - регистратор движений регистров
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицы изменений регистров.
//
Процедура ОтразитьЗаданияКРасчетуСебестоимости(Документ, МенеджерВременныхТаблиц) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // задания устанавливаются только в главном узле.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	СоответствиеЗапросов = СоответствиеЗапросовКонтрольнымРегистрам(Запрос);
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц        КАК Месяц,
	|	Таблица.Организация  КАК Организация,
	|	Таблица.Документ     КАК Документ,
	|	Таблица.ИзмененыДанныеДляПартионногоУчетаВерсии21 КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|;
	|";
		
	ТекстВложенногоЗапроса = "";
	ТекстЗапросаВременныхТаблиц = "";
	ИменаВременныхТаблиц = "";
		
	Для Каждого ЭлементСоответствия Из СоответствиеЗапросов Цикл
		ДополнитьТекстЗапросаЗаданий(ЭлементСоответствия.Ключ,
			ЭлементСоответствия.Значение,
			МенеджерВременныхТаблиц.Таблицы,
			ТекстВложенногоЗапроса,
			ТекстЗапросаВременныхТаблиц,
			ИменаВременныхТаблиц);
	КонецЦикла;
	
	ТекстУничтожитьВт = ТестЗапросаУничтоженияВременныхТаблиц(ИменаВременныхТаблиц);
	
	Если ЗначениеЗаполнено(ТекстВложенногоЗапроса) Тогда // есть хотя бы один контрольный регистр.
		ТекстЗапроса = ТекстЗапросаВременныхТаблиц
			+ СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", "(" + ТекстВложенногоЗапроса + ")")
			+ ТекстУничтожитьВт;
			
		Запрос.Текст = ТекстЗапроса;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат; // нет данных к записи
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		НомерЗадания = Константы.НомерЗаданияКРасчетуСебестоимости.Получить();
		Пока Выборка.Следующий() Цикл
			РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(
				Выборка.Месяц,
				Выборка.Документ,
				Выборка.Организация,
				НомерЗадания,
				Выборка.ИзмененыДанныеДляПартионногоУчетаВерсии21);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеМетодыРегистраЗаданий

Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос)
	
	СоответствиеЗаданий = Новый Соответствие();
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийВыпускПродукции", ТекстЗапросаВыпускПродукции(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийВыручкаИСебестоимостьПродаж", ТекстЗапросаВыручкаИСебестоимостьПродаж(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийМатериалыИРаботыВПроизводстве", ТекстЗапросаМатериалыИРаботыВПроизводстве(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийПартииНезавершенногоПроизводства", ТекстЗапросаПартииНезавершенногоПроизводства(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийПартииПроизводственныхЗатрат", ТекстЗапросаПартииПроизводственныхЗатрат(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийПартииПрочихРасходов", ТекстЗапросаПартииПрочихРасходов(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийПартииРасходовНаСебестоимостьТоваров", ТекстЗапросаПартииРасходовНаСебестоимостьТоваров(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийПартииТоваровОрганизаций", ТекстЗапросаПартииТоваровОрганизаций(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийПартииТоваровПереданныеНаКомиссию", ТекстЗапросаПартииТоваровПереданныеНаКомиссию(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийПрочиеРасходы", ТекстЗапросаПрочиеРасходы(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийПрочиеРасходыНезавершенногоПроизводства", ТекстЗапросаПрочиеРасходыНезавершенногоПроизводства(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийСебестоимостьТоваров", ТекстЗапросаСебестоимостьТоваров(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийТоварыКОформлениюОтчетовКомитенту", ТекстЗапросаТоварыКОформлениюОтчетовКомитенту(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийТоварыОрганизаций", ТекстЗапросаТоварыОрганизаций(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийТоварыОрганизацийКПередаче", ТекстЗапросаТоварыОрганизацийКПередаче(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийТоварыПереданныеНаКомиссию", ТекстЗапросаТоварыПереданныеНаКомиссию(Запрос));
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийТрудозатратыНезавершенногоПроизводства", ТекстЗапросаТрудозатратыНезавершенногоПроизводства(Запрос));
    СоответствиеЗаданий.Вставить("ТаблицаИзмененийДетализацияПартийТоваровДляНДС", ТекстЗапросаДетализацияПартийТоваровДляНДС(Запрос));
    СоответствиеЗаданий.Вставить("ТаблицаИзмененийДетализацияПартийТоваровДляНДС2_4", ТекстЗапросаДетализацияПартийТоваровДляНДС2_4(Запрос));
	//++ НЕ УТ
	СоответствиеЗаданий.Вставить("ТаблицаИзмененийРезервыПредстоящихРасходов", ТекстЗапросаРезервыПредстоящихРасходов(Запрос));
	//-- НЕ УТ
	
	Возврат СоответствиеЗаданий;

КонецФункции

// Дополняет текст запроса по формированию заданий.
// 
// Параметры:
// 	ИмяТаблицы - Строка - имя таблица для поиска в менеджере временных таблиц.
// 	ТекстыЗапросов - Структура - (См. ИнициализироватьСтруктуруТекстовЗапросов()).
// 	Таблицы - МенеджерВременныхТаблиц - менеджер временных таблиц запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
//
Процедура ДополнитьТекстЗапросаЗаданий(ИмяТаблицы, ТекстыЗапросов, Таблицы, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц) Экспорт
	Если Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстыЗапросов.ТекстЗапроса;
		ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц + ТекстыЗапросов.ТекстЗапросаВременныхТаблиц;
		Если ЗначениеЗаполнено(ТекстыЗапросов.ИменаВременныхТаблиц) Тогда
			ИменаВременныхТаблиц = ИменаВременныхТаблиц + ", " + ТекстыЗапросов.ИменаВременныхТаблиц;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Формирует текст запроса по уничтожению временных таблиц.
// 
// Параметры:
// 	ИменаВременныхТаблиц - Строка - имена уничтожаемых временных таблиц, разделенных запятой.
//
// Возвращаемое значение:
// 	Строка - текст запроса.
//
Функция ТестЗапросаУничтоженияВременныхТаблиц(ИменаВременныхТаблиц) Экспорт
	
	МассивУничтожаемыхВременныхТаблиц= СтрРазделить(ИменаВременныхТаблиц, ",", Ложь);
	
	ТестЗапроса = "";
	ШаблонЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ %1;
	|";
	
	Для каждого ИмяТаблицы Из МассивУничтожаемыхВременныхТаблиц Цикл
		ИмяТаблицы = СокрЛП(ИмяТаблицы);
		Если СтрНайти(ТестЗапроса, ИмяТаблицы) = 0 Тогда
			ТестЗапроса = ТестЗапроса + СтрШаблон(ШаблонЗапроса, ИмяТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТестЗапроса;
	
КонецФункции

// Инициализирует структуру текстов запросов
// 
// Параметры:
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстЗапроса - Строка - строка с текстом запроса.
// * ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// * ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
//
Функция ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса, ТекстЗапросаВременныхТаблиц = "", ИменаВременныхТаблиц = "") Экспорт
	СтруктураТекстовЗапросов = Новый Структура("ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц",
		ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц,
		ИменаВременныхТаблиц);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаЗаданийУниверсальный(ИмяТаблицыИзменений, ИзмененыДанныеДляПартионногоУчетаВерсии21 = Ложь, ЕстьКорОрганизация = Ложь) Экспорт
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК Месяц,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Регистратор КАК Документ,
	|	&ИзмененыДанныеДляПартионногоУчетаВерсии21 КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	&ИмяТаблицыИзменений КАК Таблица
	|";
	
	Если ЕстьКорОрганизация Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК Месяц,
		|	Таблица.КорОрганизация КАК Организация,
		|	Таблица.Регистратор КАК Документ,
		|	&ИзмененыДанныеДляПартионногоУчетаВерсии21 КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
		|ИЗ
		|	&ИмяТаблицыИзменений КАК Таблица
		|ГДЕ
		|	Таблица.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыИзменений", ИмяТаблицыИзменений);
	Если ИзмененыДанныеДляПартионногоУчетаВерсии21 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИзмененыДанныеДляПартионногоУчетаВерсии21", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИзмененыДанныеДляПартионногоУчетаВерсии21", "ЛОЖЬ");
	КонецЕсли;
	СтруктураТекстовЗапросов = ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

#Область ТекстыЗапросовЗаданийКРасчетуСебестоимости

Функция ТекстЗапросаВыпускПродукции(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийВыпускПродукции");
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаВыручкаИСебестоимостьПродаж(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	КлючиАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ТаблицаИзменений.Регистратор КАК Документ,
	|	ЛОЖЬ КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	ТаблицаИзмененийВыручкаИСебестоимостьПродаж КАК ТаблицаИзменений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|	ПО
	|		ТаблицаИзменений.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики";
	
	СтруктураТекстовЗапросов = ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаМатериалыИРаботыВПроизводстве(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийМатериалыИРаботыВПроизводстве");
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаПартииНезавершенногоПроизводства(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийПартииНезавершенногоПроизводства", Истина);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаПартииПроизводственныхЗатрат(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийПартииПроизводственныхЗатрат");
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаПартииПрочихРасходов(Запрос)
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК МЕСЯЦ,
	|	Таблица.Организация                  КАК Организация,
	|	Таблица.Регистратор                  КАК Документ,
	|	ЛОЖЬ                                 КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	ТаблицаИзмененийПартииПрочихРасходов КАК Таблица
	|ГДЕ
	|	Таблица.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	ИЛИ Таблица.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|";
	СтруктураТекстовЗапросов = ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаПартииРасходовНаСебестоимостьТоваров(Запрос)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК МЕСЯЦ,
	|	Таблица.Организация                  КАК Организация,
	|	Таблица.Регистратор                  КАК Документ,
	|	ИСТИНА                               КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	ТаблицаИзмененийПартииРасходовНаСебестоимостьТоваров КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаПартииТоваровОрганизаций(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийПартииТоваровОрганизаций", Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаПартииТоваровПереданныеНаКомиссию(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийПартииТоваровПереданныеНаКомиссию", Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаПрочиеРасходы(Запрос)
	
	ТекстЗапросаВременныхТаблиц = "";
	ТекстУничтожитьВт = "";
	
	//++ НЕ УТ
	ТекстЗапросаВременныхТаблиц = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ДД.Период, Месяц)) КАК НачалоПериода,
	|	МАКСИМУМ(КОНЕЦПЕРИОДА(ДД.Период, Месяц)) КАК ОкончаниеПериода
	|ПОМЕСТИТЬ
	|	ВтДатыТаблицаИзмененийПрочиеРасходы
	|ИЗ
	|	ТаблицаИзмененийПрочиеРасходы КАК ДД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1 Служебная
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Резервы.Организация КАК Организация,
	|	Резервы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Резервы.ОбъектУчетаРезервов КАК ОбъектУчетаРезервов
	|ПОМЕСТИТЬ ВтДвижениеРезервов
	|ИЗ
	|	РегистрНакопления.РезервыПредстоящихРасходов КАК Резервы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИзмененийПрочиеРасходы КАК ТаблицаПрочиеРасходы
	|		ПО ТаблицаПрочиеРасходы.Организация = Резервы.Организация
	|			И ТаблицаПрочиеРасходы.НаправлениеДеятельности = Резервы.НаправлениеДеятельности,
	|	ВтДатыТаблицаИзмененийПрочиеРасходы КАК ВтДаты
	|ГДЕ
	|	Резервы.Период МЕЖДУ ВтДаты.НачалоПериода И ВтДаты.ОкончаниеПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2 Служебная
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиРасходов.СтатьяРасходов КАК СтатьяРасходов,
	|	СтатьиРасходов.АналитикаРасходов КАК АналитикаРасходов,
	|	СтатьиРасходов.ЛюбаяАналитикаРасходов КАК ЛюбаяАналитикаРасходов,
	|	ВтДвижениеРезервов.Организация КАК Организация,
	|	ВтДвижениеРезервов.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ СтатьиРезервов
	|ИЗ
	|	ВтДвижениеРезервов КАК ВтДвижениеРезервов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыУчетаРезервовПредстоящихРасходов.ИспользованиеРезерва КАК СтатьиРасходов
	|		ПО ВтДвижениеРезервов.ОбъектУчетаРезервов = СтатьиРасходов.Ссылка
	|
	|;";
	
	ТекстУничтожитьВт = "ВтДатыТаблицаИзмененийПрочиеРасходы, ВтДвижениеРезервов, СтатьиРезервов";
	//-- НЕ УТ
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	ТаблицаИзменений.Организация                  КАК Организация,
	|	ТаблицаИзменений.Регистратор                  КАК Документ,
	|	ЛОЖЬ                                          КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	ТаблицаИзмененийПрочиеРасходы КАК ТаблицаИзменений
	//++ НЕ УТ
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРезервов КАК СтатьиРезервов
	|		ПО ТаблицаИзменений.Организация = СтатьиРезервов.Организация
	|		И ТаблицаИзменений.НаправлениеДеятельности = СтатьиРезервов.НаправлениеДеятельности
	|		И ТаблицаИзменений.СтатьяРасходов = СтатьиРезервов.СтатьяРасходов
	|		И (ТаблицаИзменений.АналитикаРасходов = СтатьиРезервов.АналитикаРасходов ИЛИ СтатьиРезервов.ЛюбаяАналитикаРасходов)
	//-- НЕ УТ
	|ГДЕ
	|	(ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр
	|		= ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|	ИЛИ ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл
	|		= ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	//++ НЕ УТ
	|	ИЛИ НЕ СтатьиРезервов.СтатьяРасходов ЕСТЬ NULL
	//-- НЕ УТ
	|	)
	|	И НЕ ТаблицаИзменений.Регистратор ССЫЛКА Документ.РаспределениеДоходовПоНаправлениямДеятельности
	|	И (НЕ ТаблицаИзменений.Регистратор ССЫЛКА Документ.РаспределениеПрочихЗатрат
	|		ИЛИ (ТаблицаИзменений.Регистратор ССЫЛКА Документ.РаспределениеПрочихЗатрат
	|			И ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.РаспределениеПрочихЗатрат).НазначениеНастройкиРаспределения = 
	|				ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства)))
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ),
	|	ТаблицаИзменений.Регистратор,
	|	ТаблицаИзменений.Период,
	|	ТаблицаИзменений.Организация,
	|	ТаблицаИзменений.Подразделение,
	|	ТаблицаИзменений.СтатьяРасходов,
	|	ТаблицаИзменений.АналитикаРасходов,
	|	ТаблицаИзменений.НаправлениеДеятельности,
	|	ТаблицаИзменений.ХозяйственнаяОперация,
	|	ТаблицаИзменений.АналитикаУчетаНоменклатуры
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаИзменений.Сумма) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.СуммаБезНДС) <> 0
    |	ИЛИ СУММА(ТаблицаИзменений.СуммаРегл) <> 0
    |	ИЛИ СУММА(ТаблицаИзменений.СуммаРеглБезНДС) <> 0
    |	ИЛИ СУММА(ТаблицаИзменений.НДСРегл) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.ПостояннаяРазница) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.ВременнаяРазница) <> 0";
	

	СтруктураТекстовЗапросов = ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ТекстУничтожитьВт);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаПрочиеРасходыНезавершенногоПроизводства(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийПрочиеРасходыНезавершенногоПроизводства");
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаСебестоимостьТоваров(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийСебестоимостьТоваров", Ложь, Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаТоварыКОформлениюОтчетовКомитенту(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийТоварыКОформлениюОтчетовКомитенту", Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийТоварыОрганизаций", Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаТоварыОрганизацийКПередаче(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийТоварыОрганизацийКПередаче", Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаТоварыПереданныеНаКомиссию(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийТоварыПереданныеНаКомиссию", Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаТрудозатратыНезавершенногоПроизводства(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийТрудозатратыНезавершенногоПроизводства");
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаДетализацияПартийТоваровДляНДС(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийДетализацияПартийТоваровДляНДС");
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаДетализацияПартийТоваровДляНДС2_4(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийДетализацияПартийТоваровДляНДС2_4");
	Возврат СтруктураТекстовЗапросов;
КонецФункции

//++ НЕ УТ
Функция ТекстЗапросаРезервыПредстоящихРасходов(Запрос)
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	ТаблицаИзменений.Организация                  КАК Организация,
	|	ТаблицаИзменений.Регистратор                  КАК Документ,
	|	ЛОЖЬ                                          КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	ТаблицаИзмененийРезервыПредстоящихРасходов КАК ТаблицаИзменений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыУчетаРезервовПредстоящихРасходов.ИспользованиеРезерва КАК Таблица
	|			ПО ТаблицаИзменений.ОбъектУчетаРезервов = Таблица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов Статьи
	|			ПО Таблица.СтатьяРасходов = Статьи.Ссылка
	|ГДЕ
	|	(Статьи.ВариантРаспределенияРасходовУпр
	|		= ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|	ИЛИ Статьи.ВариантРаспределенияРасходовРегл
	|		= ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты))
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ),
	|	ТаблицаИзменений.Регистратор,
	|	ТаблицаИзменений.Период,
	|	ТаблицаИзменений.Организация,
	|	ТаблицаИзменений.ВидРезервов,
	|	ТаблицаИзменений.НаправлениеДеятельности,
	|	ТаблицаИзменений.ОбъектУчетаРезервов
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаИзменений.СуммаУпр) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.СуммаРегл) <> 0
	|";
	СтруктураТекстовЗапросов = ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов;
КонецФункции
//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#Область Проверки

// Возвращает месяц первых движений по регистру себестоимости.
// Можно считать, что эта дата соответствует началу ведения учета в ИБ.
//
Функция ПериодПервыхДвиженийРегистраСебестоимость() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Период КАК Период
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = НачалоМесяца(Выборка.Период);
	Иначе
		Результат = Дата(1,1,1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает месяц первых движений, сформированных в партионном учете версии 2.2
//
Функция ПериодПервыхДвиженийПартионныйУчетВерсии22() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА Т.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.СлужебноеПереходНаПартионныйУчет22)
	|			ТОГДА ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Т.Период, МЕСЯЦ), СЕКУНДА, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ)
	|	КОНЕЦ КАК Период
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
    |	Т.НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Период;
	Иначе
		Результат = Дата(1,1,1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПересчетПрошлыхПериодов

// Создает задания к расчету себестоимости при включении/выключении учета себестоимости по назначениям или
// при изменении периода включения учета себестоимости по назначениям.
//
Процедура ЗапланироватьПересчетСебестоимостиПриИзмененииУчетаСебестоимостиПоНазначениям() Экспорт
	
	// Для каждой организации определяется период, начиная с которого необходимо пересчитать себестоимость.
	// 1) При включении учета по назначениям или изменении даты включения берется минимальный период из двух:
	//	- период первого движения себестоимости, в котором ранее уже учитывались назначения
	//	- период первого движения себестоимости, после даты включения учета по назначениям
	// 2) При выключении учета по назначениям берется период первых движений себестоимости,
	//	в котором ранее уже учитывались назначения
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ключи.Ссылка
	|ПОМЕСТИТЬ АналитикаСНазначениями
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|ГДЕ
	|	Ключи.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|;
	|ВЫБРАТЬ
	|	Периоды.Организация КАК Организация,
	|	МИНИМУМ(Периоды.Месяц) КАК Месяц
	|ПОМЕСТИТЬ ВТПересчетСебестоимости
	|ИЗ (
	// При включении учета по назначениям или изменении даты определяем минимальный период до периода включения,
	// в котором есть движения с назначениями.
	|	ВЫБРАТЬ
	|		СебестоимостьТоваров.Организация КАК Организация,
	|		МИНИМУМ(НАЧАЛОПЕРИОДА(СебестоимостьТоваров.Период, МЕСЯЦ)) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикаСНазначениями КАК АналитикаСНазначениями
	|			ПО АналитикаСНазначениями.Ссылка = СебестоимостьТоваров.АналитикаУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		Константы.УчитыватьСебестоимостьТоваровПоНазначениям
	|		И СебестоимостьТоваров.Период < НАЧАЛОПЕРИОДА(Константы.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям, МЕСЯЦ)	
	|	СГРУППИРОВАТЬ ПО
	|		СебестоимостьТоваров.Организация
	|
	// При включении учета по назначениям или изменении даты определяем минимальный период, в которым есть движения после периода включения.
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		СебестоимостьТоваров.Организация КАК Организация,
	|		МИНИМУМ(НАЧАЛОПЕРИОДА(СебестоимостьТоваров.Период, МЕСЯЦ)) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		Константы.УчитыватьСебестоимостьТоваровПоНазначениям
	|		И СебестоимостьТоваров.Период >= НАЧАЛОПЕРИОДА(Константы.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям, МЕСЯЦ)
	|	СГРУППИРОВАТЬ ПО
	|		СебестоимостьТоваров.Организация
	|
	// При выключении учета по назначениям определяем минимальный период, в котором есть движения с назначениями.
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		СебестоимостьТоваров.Организация КАК Организация,
	|		МИНИМУМ(НАЧАЛОПЕРИОДА(СебестоимостьТоваров.Период, МЕСЯЦ)) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикаСНазначениями КАК АналитикаСНазначениями
	|			ПО АналитикаСНазначениями.Ссылка = СебестоимостьТоваров.АналитикаУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		НЕ Константы.УчитыватьСебестоимостьТоваровПоНазначениям
	|	СГРУППИРОВАТЬ ПО
	|		СебестоимостьТоваров.Организация
	| 	) КАК Периоды
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|";
	
	СформироватьЗаданияКПересчетуСебестоимости(Запрос);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц, "АналитикаСНазначениями, ВТПересчетСебестоимости");
	
КонецПроцедуры

Процедура СформироватьЗаданияКПересчетуСебестоимости(Запрос) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Организация КАК Организация,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ)) КАК Месяц
	|ПОМЕСТИТЬ ВТЗаданияКРасчету
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПересчетСебестоимости КАК Пересчеты
	|		ПО Задания.Организация = Пересчеты.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пересчеты.Организация,
	|	Пересчеты.Месяц
	|ИЗ
	|	ВТПересчетСебестоимости КАК Пересчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаданияКРасчету КАК Задания
	|		ПО Пересчеты.Организация = Задания.Организация
	|ГДЕ
	|	(Задания.Месяц ЕСТЬ NULL 
	|			ИЛИ Задания.Месяц > Пересчеты.Месяц)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
