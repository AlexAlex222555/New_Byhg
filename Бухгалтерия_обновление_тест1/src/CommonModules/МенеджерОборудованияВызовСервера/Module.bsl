
#Область ПрограммныйИнтерфейс     

// Возвращает номер версии библиотеки подключаемого оборудования.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.1.3.9";
	
КонецФункции

// Получает ревизию требований для драйверов подключаемого оборудования.
//
Функция РевизияИнтерфейсаДрайверов() Экспорт
	
	РевизияИнтерфейса = 3002;
	Возврат РевизияИнтерфейса;
	
КонецФункции

// Получает текущую дату сервера, приведенную к часовому поясу сеанса.
// Предназначена для использования вместо функции ТекущаяДатаСеанса.
//
// Возвращаемое значение:
//  Результат - текущая дата сеанса.
//
Функция ПолучитьДатаСеанса() Экспорт
	
#Если МобильноеПриложениеСервер Тогда
	Возврат ТекущаяДата();
#Иначе
	Возврат ТекущаяДатаСеанса();
#КонецЕсли

КонецФункции

// Функция возвращает список подключенного в справочнике ПО
//
//  Параметры:
// 	ТипыПО - Неопределено - Описание
// 	Идентификатор - Неопределено - Описание
// 	РабочееМесто - Неопределено - Описание
// Возвращаемое значение:
// 	Массив из Структура:
// 	* Наименование - Строка
// 	* Ссылка - СправочникСсылка.ПодключаемоеОборудование
//
Функция ОборудованиеПоПараметрам(ТипыПО = Неопределено, Идентификатор = Неопределено, РабочееМесто = Неопределено) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ОборудованиеПоПараметрам(ТипыПО, Идентификатор, РабочееМесто);
	
КонецФункции

// Функция возвращает по идентификатору устройства его параметры.
//
Функция ПолучитьПараметрыУстройства(Идентификатор) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(Идентификатор);
	
КонецФункции

// Функция возвращает по идентификатору устройства параметры регистрации.
//
Функция ПолучитьПараметрыРегистрацииУстройства(Идентификатор) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыРегистрацииУстройства(Идентификатор);
	
КонецФункции

// Процедура предназначена для сохранения параметров устройства
// в реквизит Параметры типа хранилище значения в элементе справочника.
//
Функция СохранитьПараметрыУстройства(Идентификатор, Параметры) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыУстройства(Идентификатор, Параметры);
	
КонецФункции

// Процедура предназначена для сохранения параметров регистрации устройства
//
Функция СохранитьПараметрыРегистрацииУстройства(Идентификатор, ПараметрыРегистрации) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыРегистрацииУстройства(Идентификатор, ПараметрыРегистрации); 
	
КонецФункции

// Функция возвращает структуру с данными устройства.
//
// Параметры:
// 	Идентификатор - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
// Возвращаемое значение:
// 	Структура - Описание:
// *ОбработчикДрайвераИмя - Строка - имя драйвера.
// *ОбработчикДрайвера - Строка - обработчик драйвера. 
// *ИмяКомпьютера - Строка - наименование компьютера. 
// *РабочееМесто - СправочникСсылка.РабочиеМеста - рабочее место.
// *Параметры - Структура - структура с полями:
// **ДатаНачала - Дата - .
// **ДатаОкончания - Дата - .
// **ПериодВыгрузки - Структура - структура с полями:
// ***ДатаНачала - Дата - дата начала загрузки.
// ***ДатаОкончания - Дата - дата окончания загрузки. 
// *ИмяФайлаДрайвера - Строка - имя файла драйвера.
// *ИмяМакетаДрайвера - Строка - имя макета драйвера.
// *ПоставляетсяДистрибутивом - Булево - признак поставки дистрибутивом.
// *ИдентификаторОбъекта - Строка - идентификатор объекта строкой.
// *ВСоставеКонфигурации - Булево - признак поставке в составе конфигурации.
// *ДрайверОборудованияИмя - Строка - драйвер оборудования строкой.
// *ДрайверОборудования - СправочникСсылка.ДрайверОборудования - драйвер оборудования.
// *ТипОборудованияИмя - Строка - тип опоборудования строкой.
// *ТипОборудования - ПеречислениеСсылка.ТипыПодключаемогоОборудования - тип оборудования.
// *Наименование - Строка - наименование оборудования.
// *ИдентификаторУстройства - Строка - идентификатор устройства.
// *Ссылка - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
//
Функция ПолучитьДанныеУстройства(Идентификатор) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьДанныеУстройства(Идентификатор);

КонецФункции

// Функция возвращает структуру с данными драйвера.
// 
// Параметры:
// 	Идентификатор - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
// Возвращаемое значение:
// 	Структура - Описание:
// * ВерсияДрайвера 
// * ИмяФайлаДрайвера 
// * ИмяМакетаДрайвера 
// * ПоставляетсяДистрибутивом 
// * ОбработчикДрайвера 
// * ИдентификаторОбъекта 
// * ВСоставеКонфигурации 
// * ТипОборудования 
// * ДрайверОборудованияИмя 
// * ДрайверОборудования
// 
Функция ПолучитьДанныеДрайвера(Идентификатор) Экспорт

	Возврат Справочники.ДрайверыОборудования.ПолучитьДанныеДрайвера(Идентификатор);
 
КонецФункции

// Функция возвращает параметры драйвера по наименованию обработчика.
//
Функция ПараметрыДрайвераПоОбработчику(НаименованиеОбработчикаДрайвера) Экспорт

	Результат = Новый Структура;
	
	Для каждого ИмяПеречисления Из Метаданные.Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ЗначенияПеречисления Цикл
		Если НаименованиеОбработчикаДрайвера = ИмяПеречисления.Синоним Тогда
			Результат.Вставить("Имя"            , ИмяПеречисления.Имя);
			Результат.Вставить("Наименование"   , ИмяПеречисления.Синоним);
			Результат.Вставить("ТипОборудования", Перечисления["ТипыПодключаемогоОборудования"][ИмяПеречисления.Комментарий]);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция возвращает из переменной сеанса имя компьютера клиента.
//
Функция ПолучитьРабочееМестоКлиента() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.РабочееМестоКлиента;

КонецФункции

// Функция возвращает список рабочих мест, соответствующих указанному имени компьютера.
//
Функция НайтиРабочиеМестаПоИД(ИдентификаторКлиента) Экспорт
	
	Если Не МенеджерОборудованияВызовСервераПереопределяемый.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РабочиеМеста.Ссылка
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.Код = &Код
	|	И РабочиеМеста.ПометкаУдаления = ЛОЖЬ
	|");
	
	Запрос.УстановитьПараметр("Код", ИдентификаторКлиента);
	СписокКомпьютеров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат СписокКомпьютеров;
	
КонецФункции

// Функция устанавливает в переменную сеанса имя компьютера клиента.
//
Процедура УстановитьРабочееМестоКлиента(РабочееМестоКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.РабочееМестоКлиента = РабочееМестоКлиента;
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Функция получает макет драйвера и сохраняет его во временное хранилище,
// возвращая ссылку на временное хранилище.
Функция ПолучитьМакетССервера(ИмяМакета) Экспорт

	Ссылка = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет(ИмяМакета));
	Возврат Ссылка;

КонецФункции

// Получает ссылку предопределенного элемента по его полному имени.
//
// Параметры:
// 	ПолноеИмяПредопределенного - Строка - имя предопределенного элемента.
// Возвращаемое значение:
// 	СправочникСсылка.ПодключаемоеОборудование - Описание.
//
Функция ПредопределенныйЭлемент(Знач ПолноеИмяПредопределенного) Экспорт
	
	ИмяПредопределенного = ВРег(ПолноеИмяПредопределенного);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяКоллекции = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяТаблицы = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка ИЗ &ПолноеИмяТаблицы ГДЕ ИмяПредопределенныхДанных = &ИмяПредопределенного";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяТаблицы", ИмяКоллекции + "." + ИмяТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяПредопределенного", ИмяПредопределенного);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецФункции

// Функция возвращает доступность сохранение данных пользователя.
//
Функция ПравоДоступаСохранениеДанныхПользователя() Экспорт
	
	Возврат ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
КонецФункции

// Функция возвращает имя перечисления из его метаданных.
//
Функция ПолучитьИмяТипаОборудования(ТипОборудования) Экспорт

	Результат = Неопределено;
	
	МетаОбъект = ТипОборудования.Метаданные(); //ОбъектМетаданных
	Индекс = Перечисления.ТипыПодключаемогоОборудования.Индекс(ТипОборудования);
	Результат = МетаОбъект.ЗначенияПеречисления[Индекс].Имя;

	Возврат Результат;

КонецФункции

// Функция возвращает перечисление по имени.
//
Функция ПолучитьТипОборудования(ТипОборудованияИмя) Экспорт
	
	Попытка
		Результат = Перечисления["ТипыПодключаемогоОборудования"][ТипОборудованияИмя]; 
	Исключение
		Результат = Перечисления.ТипыПодключаемогоОборудования.ПустаяСсылка();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает Тип подключаемого оборудования по ссылке.
//
Функция ПолучитьТипПодключаемогоОборудования(ПодключаемоеОборудование) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодключаемоеОборудование, "ТипОборудования");
	
КонецФункции

// Функция возвращает созданное рабочее место клиента.
//
Функция СоздатьРабочееМестоКлиента(Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	РабочееМесто = Справочники.РабочиеМеста.СоздатьЭлемент();

	РабочееМесто.Код           = Параметры.ИдентификаторКлиента;
	РабочееМесто.ИмяКомпьютера = Параметры.ИмяКомпьютера;


	МенеджерОборудованияКлиентСервер.ЗаполнитьНаименованиеРабочегоМеста(РабочееМесто, ПользователиИнформационнойБазы.ТекущийПользователь());

	РабочееМесто.Записать();

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РабочееМесто.Ссылка;

КонецФункции // СоздатьРабочееМестоКлиентаПоИД()

// Процедура устанавливает значения параметров сеанса, относящихся к подключаемому оборудованию.
//
Процедура УстановитьПараметрыСеансаПодключаемогоОборудования(ИмяПараметра, УстановленныеПараметры) Экспорт

	Если ИмяПараметра = "РабочееМестоКлиента" Тогда
		
		// Если с идентификатором клиента текущего сеанса связано одно рабочее место,
		// то его сразу и запишем в параметры сеанса.
		ТекущееРМ           = Справочники.РабочиеМеста.ПустаяСсылка();
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		СписокРМ = НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если СписокРМ.Количество() = 0 Тогда
			// Будет создано с клиента.
		Иначе
			ТекущееРМ = СписокРМ[0];
		КонецЕсли;
		
		УстановитьРабочееМестоКлиента(ТекущееРМ);
		
		Если ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить("РабочееМестоКлиента");
		Иначе
			УстановленныеПараметры.Добавить("РабочееМестоКлиента");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список оборудования для которого необходима переустановка компоненты.
//
// Параметр:
//  РабочееМесто - СправочникСсылка.РабочиеМеста
// 
// Возвращаемое значение
//  Массив
//
Функция ДрайвераДляПереустановки(РабочееМесто) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Список = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПодключаемоеОборудование.ДрайверОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто 
	|	И ПодключаемоеОборудование.ТребуетсяПереустановка");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура("ДрайверОборудования, ДанныеДрайвера", Выборка.ДрайверОборудования, ПолучитьДанныеДрайвера(Выборка.ДрайверОборудования)); 
		Список.Добавить(Строка);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Возвращает список оборудования для которого необходима установка компоненты.
//
// Параметр:
//  РабочееМесто - СправочникСсылка.РабочиеМеста
// 
// Возвращаемое значение
//  Массив
//
Функция ДрайвераДляУстановки(РабочееМесто) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Список = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПодключаемоеОборудование.ДрайверОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто 
	|	И ПодключаемоеОборудование.ТребуетсяУстановка");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура("ДрайверОборудования, ДанныеДрайвера", Выборка.ДрайверОборудования, ПолучитьДанныеДрайвера(Выборка.ДрайверОборудования)); 
		Список.Добавить(Строка);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
КонецПроцедуры

// Устанавливает признак необходимости переустановки оборудования для подключаемого оборудования на рабочем месте.
//
Процедура УстановитьПризнакПереустановкиДрайвера(РабочееМесто, ДрайверОборудования, Признак) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ  
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.ДрайверОборудования = &ДрайверОборудования
	|	И НЕ ПодключаемоеОборудование.ТребуетсяПереустановка = &ТребуетсяПереустановка"); 
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДрайверОборудования", ДрайверОборудования);
	Запрос.УстановитьПараметр("ТребуетсяПереустановка", Признак);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяПереустановка = Признак;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак необходимости переустановки оборудования для подключаемого оборудования.
//
Процедура УстановитьПризнакПереустановкиДрайвераДляОборудования(ПодключаемоеОборудование, Признак) Экспорт
	
	УстановитьПризнакПереустановкиДрайвера(ПодключаемоеОборудование.РабочееМесто, ПодключаемоеОборудование.ДрайверОборудования, Признак);
	
КонецПроцедуры

// Обновить установленные драйвера по справочнику подключаемого оборудования.
//
Процедура ОбновитьУстановленныеДрайвера(ТипОборудования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
							|	ПодключаемоеОборудование.Ссылка
							|ИЗ
							|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
							|ГДЕ
							|	(ПодключаемоеОборудование.ТипОборудования = &ТипОборудования)");
							
	Запрос.УстановитьПараметр("ТипОборудования", ТипОборудования);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяПереустановка = Истина;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак необходимости установки оборудования для подключаемого оборудования на рабочем месте.
//
Процедура УстановитьПризнакУстановкиДрайвера(РабочееМесто, ДрайверОборудования, Признак) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ  
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.ДрайверОборудования = &ДрайверОборудования
	|	И НЕ ПодключаемоеОборудование.ТребуетсяУстановка = &ТребуетсяУстановка"); 
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДрайверОборудования", ДрайверОборудования);
	Запрос.УстановитьПараметр("ТребуетсяУстановка", Признак);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяУстановка = Признак;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет пользовательские настройки подключаемого оборудования.
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт
		
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Элемент Из СписокНастроек Цикл
		ХранилищеОбщихНастроек.Сохранить("ПользовательскиеНастройкиПодключаемогоОборудования", Элемент.Ключ, Элемент.Значение);
	КонецЦикла;  
		
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Функция возвращает типы используемого оборудования для текущего рабочего места.
// 
Функция ТипыИспользуемогоОборудованияТекущегоРабочегоМеста()  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.УстройствоИспользуется
		|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто");
		
		Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
		
		Результат = Запрос.Выполнить();
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("ТипОборудования");
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Производит разложение данных дорожек магнитной карты по шаблонам.
// На входе:
// ДанныеДорожек - массив строк. Значения полученные из дорожек.
// ПараметрыДорожек - массив структур содержащих параметры настройки устройства.
//  * Использовать, булево - признак использования дорожки.
//  * НомерДорожки, число - порядковый номер дорожки 1-3.
//
// На выходе:
// Массив структур содержащих расшифрованные данные по всем подходящим шаблонам со ссылкой на них.
// * Массив - шаблоны
//   * Структура - данные шаблона.
//     - Шаблон, СправочникСсылка.ШаблоныМагнитныхКарт
//     - ДанныеДорожек, массив полей всех дорожек.
//       * Структура - данные поля.
//         - Поле
//         - ЗначениеПоля
Функция РасшифроватьКодМагнитнойКарты(ДанныеДорожек, ПараметрыДорожек) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.СчитывателиМагнитныхКарт") Тогда
		ИмяМодуля = "Справочники.ШаблоныМагнитныхКарт";
		МодульШаблоныМагнитныхКарт = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
		Возврат МодульШаблоныМагнитныхКарт.РасшифроватьКодМагнитнойКарты(ДанныеДорожек, ПараметрыДорожек);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистема ""СчитывателиМагнитныхКарт"" недоступна.';uk='Виконання команди неможливе, оскільки підсистема ""СчитывателиМагнитныхКарт"" недоступна.'");
	КонецЕсли;
	
КонецФункции

// Получить описание драйвера XML пакета.
//
Функция ПолучитьОписаниеДрайвера(Данные) Экспорт
	
	Параметры = Новый Структура();
	
	Если Не ПустаяСтрока(Данные) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "DriverDescription" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НаименованиеДрайвера      = ЧтениеXML.ЗначениеАтрибута("Name");
			ОписаниеДрайвера          = ЧтениеXML.ЗначениеАтрибута("Description");
			ТипОборудования           = ЧтениеXML.ЗначениеАтрибута("EquipmentType");
			ВерсияДрайвера            = ЧтениеXML.ЗначениеАтрибута("DriverVersion");
			ВерсияИнтеграционногоКомпонента = ЧтениеXML.ЗначениеАтрибута("IntegrationComponentVersion");
			ИнтеграционныйКомпонент   = ВРег(ЧтениеXML.ЗначениеАтрибута("IntegrationComponent")) = "TRUE";
			ОсновнойДрайверУстановлен = ВРег(ЧтениеXML.ЗначениеАтрибута("MainDriverInstalled")) = "TRUE";
			URLЗагрузкиДрайвера       = ЧтениеXML.ЗначениеАтрибута("DownloadURL");
			Параметры.Вставить("НаименованиеДрайвера", НаименованиеДрайвера);
			Параметры.Вставить("ОписаниеДрайвера", ОписаниеДрайвера);
			Параметры.Вставить("ТипОборудования", ТипОборудования);
			Параметры.Вставить("ВерсияДрайвера", ВерсияДрайвера);
			Параметры.Вставить("ВерсияИнтеграционногоКомпонента", ВерсияИнтеграционногоКомпонента);
			Параметры.Вставить("ИнтеграционныйКомпонент", ИнтеграционныйКомпонент);
			Параметры.Вставить("ОсновнойДрайверУстановлен", ОсновнойДрайверУстановлен);
			Параметры.Вставить("URLЗагрузкиДрайвера", URLЗагрузкиДрайвера);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

#Область ПрограммныйИнтерфейсТСД   

// Получить таблицу товаров из XML структуры для ТСД.
//
// Возвращаемое значение
//  Массив
//
Функция ТоварыТСД(ДанныеЗагрузки, АлкогольнаяПродукция) Экспорт
	
	Результат = Новый Массив();
	
	АлкогольнаяПродукция = Ложь;
	
	Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Record" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					ПозицияДанных = Новый Структура();
					ПозицияДанных.Вставить("Штрихкод"  , ЧтениеXML.ЗначениеАтрибута("BarCode"));
					ПозицияДанных.Вставить("Количество", ЧтениеXML.ЗначениеАтрибута("Quantity"));
					// Атрибуты для поддержки интеграции с ЕГАИС.
					ШтрихкодМаркиАлкогольнойПродукции = ЧтениеXML.ЗначениеАтрибута("AlcoholExciseStamp");
					Если Не ПустаяСтрока(ШтрихкодМаркиАлкогольнойПродукции) Тогда
						АлкогольнаяПродукция = Истина;
					КонецЕсли;
					ПозицияДанных.Вставить("ШтрихкодУпаковки"           , ЧтениеXML.ЗначениеАтрибута("ContainerBarcode"));
					ПозицияДанных.Вставить("ШтрихкодМаркиАлкогольнойПродукции", ШтрихкодМаркиАлкогольнойПродукции);
					ПозицияДанных.Вставить("НаименованиеАлкогольнойПродукции" , ЧтениеXML.ЗначениеАтрибута("AlcoholName"));
					ПозицияДанных.Вставить("СерийныйНомерАлкогольнойПродукции", ЧтениеXML.ЗначениеАтрибута("AlcoholSerialNumber"));
					ПозицияДанных.Вставить("КодВидаАлкогольнойПродукции", ЧтениеXML.ЗначениеАтрибута("AlcoholKindCode"));
					ПозицияДанных.Вставить("КодАлкогольнойПродукции"    , ЧтениеXML.ЗначениеАтрибута("AlcoholCode"));
					ПозицияДанных.Вставить("ЕмкостьТары"                , ЧтениеXML.ЗначениеАтрибута("AlcoholContainerSize"));
					ПозицияДанных.Вставить("Крепость"                   , ЧтениеXML.ЗначениеАтрибута("AlcoholStrength"));
					ПозицияДанных.Вставить("ИННПроизводителя"           , ЧтениеXML.ЗначениеАтрибута("VendorINNCode"));
					ПозицияДанных.Вставить("КПППроизводителя"           , ЧтениеXML.ЗначениеАтрибута("VendorKPPCode"));
					Результат.Добавить(ПозицияДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сформировать таблицу товаров в XML структуре для ТСД.
//
Функция СформироватьТаблицуТоваровТСД(ДанныеЗагрузки, ПолнаяВыгрузка) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	ЗаписьXML.ЗаписатьАтрибут("FullLoad", XMLСтрока(ПолнаяВыгрузка));
	
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("BarCode"                      , XMLСтрока(Позиция[0].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Name"                         , XMLСтрока(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("UnitOfMeasurement"            , XMLСтрока(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("CharacteristicOfNomenclature" , XMLСтрока(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("SeriesOfNomenclature"         , XMLСтрока(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quality"                      , XMLСтрока(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price"                        , XMLСтрока(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quantity"                     , XMLСтрока(Позиция[7].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Article"                      , XMLСтрока(Позиция[8].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Alcohol"                      , XMLСтрока(Позиция[9].Значение));
		Если Позиция[9].Значение = Истина Тогда
			ЗаписьXML.ЗаписатьАтрибут("AlcoholExcisable"     , XMLСтрока(Позиция[10].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholKindCode"      , XMLСтрока(Позиция[11].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholCode"          , XMLСтрока(Позиция[12].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholContainerSize" , XMLСтрока(Позиция[13].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholStrength"      , XMLСтрока(Позиция[14].Значение));
			ЗаписьXML.ЗаписатьАтрибут("VendorINNCode"        , XMLСтрока(Позиция[15].Значение));
			ЗаписьXML.ЗаписатьАтрибут("VendorKPPCode"        , XMLСтрока(Позиция[16].Значение));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholExciseStamp"   , XMLСтрока(Позиция[17].Значение));
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("ContainerBarcode"   , XMLСтрока(Позиция[18].Значение));
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//
Функция ПодготовитьПакетыДляЗагрузкиТСД(ТаблицаВыгрузки, РазмерПакета, ПолнаяВыгрузка) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();
	МассивТоваров = Новый Массив;
	
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		МассивТоваров.Добавить(Позиция);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьТаблицуТоваровТСД(МассивТоваров, ПолнаяВыгрузка);
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсВесыСПечатьюЭтикеток  

// Сформировать таблицу товаров в XML структуре для весов с печатью этикеток.
//
Функция СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(ДанныеЗагрузки) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("PLU"          , XMLСтрока(Позиция[0].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Code"         , XMLСтрока(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Name"         , XMLСтрока(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price"        , XMLСтрока(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Description"  , XMLСтрока(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("ShelfLife"    , XMLСтрока(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("IsWeightGoods", XMLСтрока(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//      
Функция ПодготовитьПакетыДляЗагрузкиВВесыСПечатьюЭтикеток(ТаблицаВыгрузки, РазмерПакета) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();
	МассивТоваров = Новый Массив;
	
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		ВремНаименование = ?(Позиция.Свойство("Номенклатура"), Позиция.Номенклатура, "");
		ВремНаименование = ?(Позиция.Свойство("Наименование"), Позиция.Наименование, ВремНаименование);
		Если Позиция.Свойство("НаименованиеПолное") И Не ПустаяСтрока(Позиция.НаименованиеПолное) Тогда
			ВремНаименование = Позиция.НаименованиеПолное;
		КонецЕсли;
		
		СтрокаМассиваТоваров = Новый СписокЗначений; 
		СтрокаМассиваТоваров.Добавить(Число(Позиция.PLU));
		СтрокаМассиваТоваров.Добавить(Число(Позиция.Код));
		СтрокаМассиваТоваров.Добавить(ВремНаименование);
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("Цена"), Позиция.Цена, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ОписаниеТовара"), Позиция.ОписаниеТовара, ""));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("СрокХранения"), Позиция.СрокХранения, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ВесовойТовар"), Позиция.ВесовойТовар, Истина));
		МассивТоваров.Добавить(СтрокаМассиваТоваров);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(МассивТоваров);
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

#КонецОбласти

// Получить таблицу меток RFID.
//
// Возвращаемое значение
//  Массив
// 
Функция МеткиRFID(ДанныеМеток) Экспорт
	
	Результат = Новый Массив();
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(ДанныеМеток);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Пока ЧтениеXML.Прочитать() Цикл  
			Если ЧтениеXML.Имя = "Tag" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				
				// Получение банков памяти считанной метки.
				TID = ЧтениеXML.ЗначениеАтрибута("TID");
				EPC = ЧтениеXML.ЗначениеАтрибута("EPC");
				USER = ЧтениеXML.ЗначениеАтрибута("USER");
				// Декодирование банка EPC по формату SGTIN.  
				ПозицияДанных = МенеджерОборудованияКлиентСервер.ДекодированиеДанныхSGTIN(EPC);
				ПозицияДанных.Вставить("TID" , TID);  // Добавляем в структура значения TID чипа метки.
				ПозицияДанных.Вставить("USER", USER); // Добавляем в структура значения банка USER.
				ПозицияДанных.Вставить("UserMemory", МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВСтроку(USER));
				
				Результат.Добавить(ПозицияДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция получает значение атрибута текущего элемента.
//
Функция ПрочитатьАтрибут(ЧтениеXML, ИмяАтрибута, ЗначениеАтрибута)
	
	Значение = ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута);
	
	Если Значение = Неопределено Тогда
		ЗначениеАтрибута = Неопределено;
		Возврат Ложь;
	Иначе
		ЗначениеАтрибута = XMLЗначение(Тип("Строка"), Значение);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке)
	
	Попытка
		Результат = ЧтениеXML.Прочитать();
	Исключение
		ТекстСообщенияОбОшибке = НСтр("ru='При чтении XML-описания макета произошла ошибка.';uk='При читанні XML-опису макету сталася помилка.'");
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Процедура записывает значение атрибута текущего элемента.
//
Процедура ЗаписатьАтрибутЭлемента(ЗаписьXML, ИмяАтрибута, ЗначениеАтрибута, ФорматнаяСтрока="ЧРД=.; ЧН=0; ЧГ=0; БЛ=false; БИ=true")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) ИЛИ ТипЗнч(ЗначениеАтрибута)=Тип("Число") ИЛИ ИмяАтрибута="Value" Тогда
		ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута, XMLСтрока(Формат(ЗначениеАтрибута, ФорматнаяСтрока)));
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует структуру с описанием макета.
//
// Параметры:
//  Источник - Строка - источник события.
//  СообщениеОбОшибке - Строка - сообщение пользователю об ошибке
//  Результат - см. СоздатьОписаниеМакета
// Возвращаемое значение:
// 	Булево - результат выполнения операции.
//
Функция ПолучитьОписаниеМакета(Источник, СообщениеОбОшибке, Результат) Экспорт
	
	Результат = СоздатьОписаниеМакета();

	ЧтениеXML = Новый ЧтениеXML();
	ПараметрыЧтения = Новый ПараметрыЧтенияXML("1.0");
	ЧтениеXML.УстановитьСтроку(Источник, ПараметрыЧтения);

	ТекстСообщенияОбОшибке = "";
	
	Пока ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке) Цикл

		ЗначениеАтрибута = Неопределено;

		Если ЧтениеXML.Имя="Formatting" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда			

			Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда				
				Результат.Ширина = Число(ЗначениеАтрибута);
			Иначе
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Width элемента Formatting произошла ошибка.';uk='При читанні файлу атрибуту Width елемента Formatting сталася помилка.'");
				Возврат Ложь;
			КонецЕсли;

			Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда				
				Результат.Вставить("Высота", Число(ЗначениеАтрибута));				
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Height элемента Formatting произошла ошибка.';uk='При читанні файлу атрибут Height елемента Formatting сталася помилка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда				
				Результат.Вставить("Ориентация", Число(ЗначениеАтрибута));				
			Иначе				
				Результат.Вставить("Ориентация", 0);				
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Scale", ЗначениеАтрибута) Тогда
				Результат.Вставить("Масштаб", Число(ЗначениеАтрибута));
			Иначе
				Результат.Вставить("Масштаб", 1);
			КонецЕсли;
			
		ИначеЕсли (ЧтениеXML.Имя="Text" ИЛИ ЧтениеXML.Имя="Barcode" ИЛИ ЧтениеXML.Имя="Image" ИЛИ ЧтениеXML.Имя="UserData") И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда

			НовоеПоле = Новый Структура;			
			НовоеПоле.Вставить("Тип", ЧтениеXML.Имя);			

			Если ПрочитатьАтрибут(ЧтениеXML, "FieldName", ЗначениеАтрибута) Тогда				
				НовоеПоле.Вставить("Наименование", ЗначениеАтрибута);				
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FieldName элемента UserData произошла ошибка.';uk='При читанні файлу атрибута FieldName елемента UserData сталася помилка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если ПрочитатьАтрибут(ЧтениеXML, "TypeFill", ЗначениеАтрибута) Тогда

				Если ЗначениеАтрибута=Неопределено Тогда					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута TypeFill элемента UserData произошла ошибка.';uk='При читанні файлу атрибута TypeFill елемента UserData сталася помилка.'");
					Возврат Ложь;					
				КонецЕсли;

				НовоеПоле.Вставить("ТипЗаполнения", ЗначениеАтрибута);

				Если ЗначениеАтрибута="Parameter" Тогда					
					Если ПрочитатьАтрибут(ЧтениеXML, "ValueDefault", ЗначениеАтрибута) Тогда						
						НовоеПоле.Вставить("ЗначениеПоУмолчанию", ЗначениеАтрибута);						
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда

						Если ЗначениеАтрибута=Неопределено Тогда							
							СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Value элемента UserData произошла ошибка.';uk='При читанні файлу атрибута Value елемента UserData сталася помилка.'");
							Возврат Ложь;							
						Иначе							
							НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
						КонецЕсли;

					Иначе						
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Value элемента UserData произошла ошибка.';uk='При читанні файлу атрибута Value елемента UserData сталася помилка.'");
						Возврат Ложь;						
					КонецЕсли;

				Иначе

					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
					КонецЕсли;

				КонецЕсли;
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута TypeFill элемента UserData произошла ошибка.';uk='При читанні файлу атрибута TypeFill елемента UserData сталася помилка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если НовоеПоле.Тип<>"UserData" Тогда				

				Если ПрочитатьАтрибут(ЧтениеXML, "Left", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Лево", Число(ЗначениеАтрибута));					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Left элемента Text произошла ошибка.';uk='При читанні файлу атрибута Left елемента Text сталася помилка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Top", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Верх", Число(ЗначениеАтрибута));					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Top элемента Text произошла ошибка.';uk='При читанні файлу атрибута Top елемента Text сталася помилка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Право", НовоеПоле.Лево + Число(ЗначениеАтрибута) - 1);					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Width элемента Text произошла ошибка.';uk='При читанні файлу атрибуту Width елемента Text сталася помилка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Низ", НовоеПоле.Верх + Число(ЗначениеАтрибута) - 1);					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Height элемента Text произошла ошибка.';uk='При читанні файлу атрибуту Height елемента Text сталася помилка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Ориентация", Число(ЗначениеАтрибута));					
				КонецЕсли;				

				Если НовоеПоле.Тип="Text" Тогда

					Если ПрочитатьАтрибут(ЧтениеXML, "FontName", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ИмяШрифта", ЗначениеАтрибута);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("РазмерШрифта", Число(ЗначениеАтрибута));
					Иначе
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FontSize элемента Text произошла ошибка.';uk='При читанні файлу атрибута FontSize елемента Text сталася помилка.'");
						Возврат Ложь;
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "FontStyle", ЗначениеАтрибута) Тогда
						ЗначениеСтильШрифта = ЗначениеАтрибута;
						НовоеПоле.Вставить("Жирный", Найти(ЗначениеСтильШрифта, "Bold")>0);
						НовоеПоле.Вставить("Наклонный", Найти(ЗначениеСтильШрифта, "Italic")>0);
						НовоеПоле.Вставить("Подчеркивание",  Найти(ЗначениеСтильШрифта, "Underline")>0);
						НовоеПоле.Вставить("Зачеркивание", Найти(ЗначениеСтильШрифта, "Strikeout")>0);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "Align", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоГоризонтали", ЗначениеАтрибута);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "VAlign", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоВертикали", ЗначениеАтрибута);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "Multiline", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Многострочность", ЗначениеАтрибута);
					КонецЕсли;

				ИначеЕсли НовоеПоле.Тип="Barcode" Тогда

					Если ПрочитатьАтрибут(ЧтениеXML, "Type", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ТипШтрихкода", ЗначениеАтрибута);
					Иначе
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Type элемента Barcode произошла ошибка.';uk='При читанні файлу атрибута Type елемента Barcode сталася помилка.'");
						Возврат Ложь;
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "PrintHRI", ЗначениеАтрибута) Тогда						
						НовоеПоле.Вставить("ПодписьШтрихкода", ЗначениеАтрибута);
						ПодписьШтрихкода = ЗначениеАтрибута;						
					Иначе						
						ПодписьШтрихкода = Истина;						
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда

						Если ПодписьШтрихкода И ЗначениеАтрибута=Неопределено Тогда							
							СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FontSize элемента Barcode произошла ошибка. При значении атрибута PrintHRI = True указание значения атрибута FontSize обязательно.';uk='При читанні файлу атрибута FontSize елемента Barcode сталася помилка. При значенні атрибуту PrintHRI = True зазначення значення атрибута FontSize обов''язково.'");
							Возврат Ложь;							
						КонецЕсли;

						НовоеПоле.Вставить("РазмерШрифтаПодписи", Число(ЗначениеАтрибута));

					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "CheckSymbol", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("КонтрольныйСимвол", ЗначениеАтрибута);
					КонецЕсли;

				КонецЕсли;

				Если НовоеПоле.Тип = "Text" ИЛИ НовоеПоле.Тип = "Image" Тогда

					Если ПрочитатьАтрибут(ЧтениеXML, "Border", ЗначениеАтрибута) Тогда
						ЗначениеBorder = ЗначениеАтрибута;
						НовоеПоле.Вставить("РамкаСлева", Найти(ЗначениеBorder, "Left")>0);
						НовоеПоле.Вставить("РамкаСверху", Найти(ЗначениеBorder, "Top")>0);
						НовоеПоле.Вставить("РамкаСправа",  Найти(ЗначениеBorder, "Right")>0);
						НовоеПоле.Вставить("РамкаСнизу", Найти(ЗначениеBorder, "Bottom")>0);

						Если ЗначениеЗаполнено(ЗначениеBorder) Тогда							

							Если ПрочитатьАтрибут(ЧтениеXML, "BorderStyle", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТипРамки", ЗначениеАтрибута);
							КонецЕсли;

							Если ПрочитатьАтрибут(ЧтениеXML, "BorderWidth", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТолщинаРамки", Число(ЗначениеАтрибута));
							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			Если НовоеПоле.Тип="UserData" ИЛИ НовоеПоле.Тип="Text" Тогда
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Format", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Формат", ЗначениеАтрибута);
				КонецЕсли;
				
			КонецЕсли;
			
			Результат.Поля.Добавить(НовоеПоле);

		КонецЕсли;

	КонецЦикла;

	Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
		СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Создает описание макета.
// 
// Возвращаемое значение:
// Структура - структура с полями:
// 	* Поля - Массив - массив полей.
// 	* Ширина - Число - ширина макета.
// 	* Высота - Число - высота макета.
// 	* Ориентация - Число - ориентация макета.
// 	* Масштаб - Число - масштаб.
Функция СоздатьОписаниеМакета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Поля", Новый Массив);
	Результат.Вставить("Ширина", 0);
	Результат.Вставить("Высота", 0);
	Результат.Вставить("Ориентация", 0);
	Результат.Вставить("Масштаб", 0);
	
	Возврат Результат;
	
КонецФункции

// Функция формирует текст XML для передачи его принтеру этикеток.
//
Функция СформироватьДанныеДляПринтераЭтикеток(МассивЭтикеток, МакетЭтикетки) Экспорт
	
	ФорматыПолей = Новый Структура;
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");

	Если ЗначениеЗаполнено(МакетЭтикетки) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");

		Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Ширина);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Высота);
		Иначе
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Высота);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Ширина);
		КонецЕсли;

		Для Каждого ТекЭлемент Из МакетЭтикетки.Поля Цикл

			ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);

			Если ТекЭлемент.Тип <> "UserData" Тогда
				
				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Верх-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Ширина - ТекЭлемент.Право);
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Высота - ТекЭлемент.Низ);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Ширина - ТекЭлемент.Право);
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Высота - ТекЭлемент.Низ);
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Лево-1);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево+1);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Право - ТекЭлемент.Лево+1);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация <> 0 Тогда

					Если ТекЭлемент.Свойство("Ориентация") Тогда

						Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
							ОриентацияПоля = Число(ТекЭлемент.Ориентация);
						Иначе
							ОриентацияПоля = 0;
						КонецЕсли;

					Иначе
						ОриентацияПоля = 0;
					КонецЕсли;

					НовоеЗначениеОриентации = ОриентацияПоля + Число(МакетЭтикетки.Ориентация);
					НовоеЗначениеОриентации = Формат(?(НовоеЗначениеОриентации>270, НовоеЗначениеОриентации-360, НовоеЗначениеОриентации), "ЧГ=0");
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", НовоеЗначениеОриентации);

				Иначе

					Если ТекЭлемент.Свойство("Ориентация") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекЭлемент.ТипЗаполнения = "Parameter" Тогда

				Если ТекЭлемент.Свойство("ЗначениеПоУмолчанию") Тогда
					
					Если ТекЭлемент.Тип = "Text" И ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию, ТекЭлемент.Формат);
					Иначе
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию);
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Static", Истина);
				Если ТекЭлемент.Тип = "Text" И ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение, ТекЭлемент.Формат);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);
				КонецЕсли;
			КонецЕсли;
			
			Если ТекЭлемент.Тип = "Text" Тогда
				
				Если ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
					ФорматыПолей.Вставить("Формат" + СтрЗаменить(ТекЭлемент.Наименование, "-", ""), ТекЭлемент.Формат);
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("ИмяШрифта") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
				КонецЕсли;

				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);

				СтильШрифта = "";
				
				Если ТекЭлемент.Свойство("Жирный") Тогда
					Если ТекЭлемент.Жирный Тогда
						СтильШрифта = "Bold";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Наклонный") Тогда
					Если ТекЭлемент.Наклонный Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Italic";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Подчеркивание") Тогда
					Если ТекЭлемент.Подчеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Underline";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Зачеркивание") Тогда
					Если ТекЭлемент.Зачеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "StrikeOut";
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);

				ВыравниваниеГоризонтальное = "Left";

				Если ТекЭлемент.Свойство("ПоложениеПоГоризонтали") Тогда

					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоГоризонтали) Тогда
						ВыравниваниеГоризонтальное = ТекЭлемент.ПоложениеПоГоризонтали;
					КонецЕсли;

				КонецЕсли;

				ВыравниваниеВертикальное = "Top";

				Если ТекЭлемент.Свойство("ПоложениеПоВертикали") Тогда

					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоВертикали) Тогда
						ВыравниваниеВертикальное = ТекЭлемент.ПоложениеПоВертикали;
					КонецЕсли;

				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ВыравниваниеГоризонтальное);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ВыравниваниеВертикальное);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					КонецЕсли;

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;

				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;

				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					КонецЕсли;

				КонецЕсли;

				Если ТекЭлемент.Свойство("Многострочность") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
				КонецЕсли;

			ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда

				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);

				Если ТекЭлемент.Свойство("ПодписьШтрихкода") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);

					Если ТекЭлемент.ПодписьШтрихкода Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
					КонецЕсли;

				КонецЕсли;

				Если ТекЭлемент.Свойство("КонтрольныйСимвол") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
				КонецЕсли;	

			КонецЕсли;

			Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда

				Рамка = "";
				
				Если ТекЭлемент.Свойство("РамкаСлева") Тогда
					Если ТекЭлемент.РамкаСлева Тогда
						Рамка = "Left";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСверху") Тогда
					Если ТекЭлемент.РамкаСверху Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Top";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСправа") Тогда
					Если ТекЭлемент.РамкаСправа Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Right";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСнизу") Тогда
					Если ТекЭлемент.РамкаСнизу Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Bottom";
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Рамка) Тогда
					
					Если МакетЭтикетки.Ориентация = 0 Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Top", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Right", "T1op");
						Рамка=СтрЗаменить(Рамка, "Bottom", "R1ight");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Top", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Right", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Bottom", "T1op");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "T1op");
						Рамка=СтрЗаменить(Рамка, "Top", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Right", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Bottom", "L1eft");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТипРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТолщинаРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
					КонецЕсли;
					
				КонецЕсли;

			КонецЕсли;

			ЗаписьXML.ЗаписатьКонецЭлемента();		

		КонецЦикла;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента("Labels");

	Для Каждого ТекЭтикетка Из МассивЭтикеток Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента("Label");

		Если ТекЭтикетка.Свойство("Количество") Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Quantity", ТекЭтикетка.Количество);
		КонецЕсли;

		Для Каждого ТекПоле Из ТекЭтикетка.Поля Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекПоле.ИмяПоля);
			Если ФорматыПолей.Свойство("Формат" + СтрЗаменить(ТекПоле.ИмяПоля, "-", "")) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение, ФорматыПолей["Формат" + СтрЗаменить(ТекПоле.ИмяПоля, "-", "")]);
			Иначе
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение);
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();

		КонецЦикла;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//
Функция ПодготовитьПакетыДляПринтераЭтикеток(МассивЭтикеток, РазмерПакета, МакетЭтикетки = Неопределено) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();  
	МассивТоваров = Новый Массив;
	
	ПервыйПакет      = Истина;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = МассивЭтикеток.Количество();
	
	Для Каждого Позиция Из МассивЭтикеток Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		МассивТоваров.Добавить(Позиция);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьДанныеДляПринтераЭтикеток(МассивТоваров, ?(ПервыйПакет, МакетЭтикетки, Неопределено));
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
			ПервыйПакет   = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Функция формирует XML-описание макета.
//
Функция СохранитьXMLФайл(ШиринаЭтикетки, ВысотаЭтикетки, Ориентация, Поля) Экспорт

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");

	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ШиринаЭтикетки);
	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ВысотаЭтикетки);

	Если ЗначениеЗаполнено(Ориентация) Тогда
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", Ориентация);
	КонецЕсли;

	Для Каждого ТекЭлемент Из Поля Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);

		Если ТекЭлемент.Тип <> "UserData" Тогда
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево + 1);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх + 1);

			Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
			КонецЕсли;
			
		Иначе
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);

		КонецЕсли;

		Если ТекЭлемент.Тип = "Text" Тогда

			Если ЗначениеЗаполнено(ТекЭлемент.ИмяШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);
			СтильШрифта = "";

			Если ТекЭлемент.Жирный Тогда
				СтильШрифта = "Bold";
			КонецЕсли;

			Если ТекЭлемент.Наклонный Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Italic";
			КонецЕсли;

			Если ТекЭлемент.Подчеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Underline";
			КонецЕсли;

			Если ТекЭлемент.Зачеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Strikeout";
			КонецЕсли;

			Если ЗначениеЗаполнено(СтильШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ТекЭлемент.ПоложениеПоГоризонтали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ТекЭлемент.ПоложениеПоВертикали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);

		ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда

			Если ТекЭлемент.Тип = "Barcode" Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);

			Если ТекЭлемент.ПодписьШтрихкода Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
			КонецЕсли;

		КонецЕсли;

		Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда

			Рамка = "";

			Если ТекЭлемент.РамкаСверху Тогда
				Рамка = "Top";
			КонецЕсли;

			Если ТекЭлемент.РамкаСлева Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Left";
			КонецЕсли;

			Если ТекЭлемент.РамкаСправа Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Right";
			КонецЕсли;

			Если ТекЭлемент.РамкаСнизу Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Bottom";
			КонецЕсли;

			Если ЗначениеЗаполнено(Рамка) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
			КонецЕсли;

		КонецЕсли;

		ЗаписатьАтрибутЭлемента(ЗаписьXML, "TypeFill", ТекЭлемент.ТипЗаполнения);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);

		Если ТекЭлемент.ТипЗаполнения<>"Constant" И ЗначениеЗаполнено(ТекЭлемент.ЗначениеПоУмолчанию) Тогда			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueDefault", ТекЭлемент.ЗначениеПоУмолчанию);
		КонецЕсли;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Функция определяет тип штрихкода по значение кода.
// 
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	Возврат МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
КонецФункции

// Функция выполняет подключение внешней компоненты и ее первоначальную настройку.
// Возвращаемое значение: AddIn, НЕОПРЕДЕЛЕНО - компоненту не удалось загрузить.
//
Функция ПодключитьВнешнююКомпонентуПечатиШтрихкода() Экспорт
	
#Если НЕ МобильноеПриложениеСервер Тогда  
	УстановитьОтключениеБезопасногоРежима(Истина);
#КонецЕсли
	ВнешняяКомпонента = Неопределено;
	
	Попытка
		ВнешниеКомпонентыСерверМодуль = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
		РезультатПодключения = ВнешниеКомпонентыСерверМодуль.ПодключитьКомпоненту("Barcode");
	Исключение
		РезультатПодключения = Новый Структура("Подключено", Ложь);
	КонецПопытки;
	
	Если Не РезультатПодключения.Подключено Тогда
		ВнешняяКомпонента = ОбщегоНазначения.ПодключитьКомпонентуИзМакета("Barcode", "ОбщийМакет.КомпонентаПечатиШтрихкодов");
	Иначе
		ВнешняяКомпонента = РезультатПодключения.ПодключаемыйМодуль;
	КонецЕсли;
	
	Если ВнешняяКомпонента = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;

	// Если нет возможности рисовать.
	Если НЕ ВнешняяКомпонента.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем.
		Возврат Неопределено;
	Иначе
		// Установим основные параметры компоненты.
		// Если в системе установлен шрифт Tahoma.
		Если ВнешняяКомпонента.НайтиШрифт("Tahoma") Тогда
			// Выбираем его как шрифт для формирования картинки.
			ВнешняяКомпонента.Шрифт = "Tahoma";
		Иначе
			// Шрифт Tahoma в системе отсутствует.
			// Обойдем все доступные компоненте шрифты.
			Для Сч = 0 По ВнешняяКомпонента.КоличествоШрифтов -1 Цикл
				// Получим очередной шрифт, доступный компоненте.
				ТекущийШрифт = ВнешняяКомпонента.ШрифтПоИндексу(Сч);
				// Если шрифт доступен
				Если ТекущийШрифт <> Неопределено Тогда
					// Они и будет шрифтом для формирования штрихкода.
					ВнешняяКомпонента.Шрифт = ТекущийШрифт;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Установим размер шрифта
		ВнешняяКомпонента.РазмерШрифта = 12;
		
		Возврат ВнешняяКомпонента;
	КонецЕсли;
	
КонецФункции

// Функция выполняет формирование изображения штрихкода.
// Параметры: 
//   ПараметрыШтрихкода - Структура - структура параметров, где:
//    Ширина - Число - .
//    Высота - Число - .
// Возвращаемое значение: 
//   Картинка - Картинка со сформированным штрихкодом или НЕОПРЕДЕЛЕНО.
//
Функция ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода) Экспорт
	
	ВнешняяКомпонента = МенеджерОборудованияСерверПовтИсп.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Ошибка подключения внешней компоненты печати штрихкода.';uk='Помилка підключення зовнішньої компоненти друку штрихкоду.'");
	КонецЕсли;
	
	// Зададим размер формируемой картинки.
	ВнешняяКомпонента.Ширина = Окр(ПараметрыШтрихкода.Ширина);
	ВнешняяКомпонента.Высота = Окр(ПараметрыШтрихкода.Высота);
	ВнешняяКомпонента.АвтоТип = Ложь;
	
	ШтрихкодВрем = Строка(ПараметрыШтрихкода.Штрихкод); // Преобразуем явно в строку.
	
	Если ПараметрыШтрихкода.ТипКода = 99 Тогда
		ТипШтрихкодаВрем = ОпределитьТипШтрихкода(ШтрихкодВрем);
		Если ТипШтрихкодаВрем = "EAN8" Тогда
			ВнешняяКомпонента.ТипКода = 0;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
			ВнешняяКомпонента.ТипКода = 1;
			// Если код содержит контрольный символ, обязательно указываем.
			ВнешняяКомпонента.СодержитКС = СтрДлина(ШтрихкодВрем) = 13;
		ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
			ВнешняяКомпонента.ТипКода = 2;
		ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
			ВнешняяКомпонента.ТипКода = 3;
		ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
			ВнешняяКомпонента.ТипКода = 4;
		ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
			ВнешняяКомпонента.ТипКода = 11;
		ИначеЕсли ТипШтрихкодаВрем = "QR" Тогда
			ВнешняяКомпонента.ТипКода = 16;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13Addon2" Тогда
			ВнешняяКомпонента.ТипКода = 14;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13Addon5" Тогда
			ВнешняяКомпонента.ТипКода = 15;
		Иначе
			ВнешняяКомпонента.АвтоТип = Истина;
		КонецЕсли;
	Иначе
		ВнешняяКомпонента.АвтоТип = Ложь;
		ВнешняяКомпонента.ТипКода = ПараметрыШтрихкода.ТипКода;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ПрозрачныйФон") Тогда
		ВнешняяКомпонента.ПрозрачныйФон = ПараметрыШтрихкода.ПрозрачныйФон;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ТипВходныхДанных") Тогда
		ВнешняяКомпонента.ТипВходныхДанных = ПараметрыШтрихкода.ТипВходныхДанных;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("GS1DatabarКоличествоСтрок") Тогда
		ВнешняяКомпонента.GS1DatabarКоличествоСтрок = ПараметрыШтрихкода.GS1DatabarКоличествоСтрок;
	КонецЕсли;
	
	ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихкода.ОтображатьТекст;
	// Формируем картинку штрихкода.
	ВнешняяКомпонента.ЗначениеКода = ШтрихкодВрем;
	// Угол поворота штрихкода.
	ВнешняяКомпонента.УголПоворота = ?(ПараметрыШтрихкода.Свойство("УголПоворота"), ПараметрыШтрихкода.УголПоворота, 0);
	// Уровень коррекции QR кода (L=0, M=1, Q=2, H=3).
	ВнешняяКомпонента.УровеньКоррекцииQR = ?(ПараметрыШтрихкода.Свойство("УровеньКоррекцииQR"), ПараметрыШтрихкода.УровеньКоррекцииQR, 1);
	
	// Для обеспечения совместимости с предыдущими версиями БПО.
	Если Не ПараметрыШтрихкода.Свойство("Масштабировать")
		Или (ПараметрыШтрихкода.Свойство("Масштабировать") И ПараметрыШтрихкода.Масштабировать) Тогда
		
		Если Не ПараметрыШтрихкода.Свойство("СохранятьПропорции")
				Или (ПараметрыШтрихкода.Свойство("СохранятьПропорции") И Не ПараметрыШтрихкода.СохранятьПропорции) Тогда
			
			// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
			Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
				ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
			КонецЕсли;
			
			// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
			Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
				ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
			КонецЕсли;
			
		ИначеЕсли ПараметрыШтрихкода.Свойство("СохранятьПропорции") И ПараметрыШтрихкода.СохранятьПропорции Тогда
			
			Пока ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода 
				Или ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Цикл
				
				// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
				Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
					ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
					ВнешняяКомпонента.Высота = (ВнешняяКомпонента.МинимальнаяШиринаКода / Окр(ПараметрыШтрихкода.Ширина)) * Окр(ПараметрыШтрихкода.Высота);
				КонецЕсли;
				
				// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
				Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
					ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
					ВнешняяКомпонента.Ширина = (ВнешняяКомпонента.МинимальнаяВысотаКода / Окр(ПараметрыШтрихкода.Высота)) * Окр(ПараметрыШтрихкода.Ширина);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	// ВертикальноеВыравниваниеКода: 1 - по верхнему краю, 2 - по центру, 3 - по нижнему краю.
	Если ПараметрыШтрихкода.Свойство("ВертикальноеВыравнивание") И (ПараметрыШтрихкода.ВертикальноеВыравнивание > 0) Тогда
		ВнешняяКомпонента.ВертикальноеВыравниваниеКода = ПараметрыШтрихкода.ВертикальноеВыравнивание;
	КонецЕсли;

	Если ПараметрыШтрихкода.Свойство("РазмерШрифта") И (ПараметрыШтрихкода.РазмерШрифта > 0) 
		И (ПараметрыШтрихкода.ОтображатьТекст) И (ВнешняяКомпонента.РазмерШрифта <> ПараметрыШтрихкода.РазмерШрифта) Тогда
		ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихкода.РазмерШрифта;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("РазмерШрифта") И ПараметрыШтрихкода.РазмерШрифта > 0
		И ПараметрыШтрихкода.Свойство("МонохромныйШрифт") Тогда
		
		Если ПараметрыШтрихкода.МонохромныйШрифт Тогда
			ВнешняяКомпонента.МаксимальныйРазмерШрифтаДляПринтеровНизкогоРазрешения = ПараметрыШтрихкода.РазмерШрифта + 1;
		Иначе
			ВнешняяКомпонента.МаксимальныйРазмерШрифтаДляПринтеровНизкогоРазрешения = -1;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	
	// Если картинка сформировалась.
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		// Формируем из двоичных данных.
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

// Процедура получения содержания текстовых файлов.
// Параметры:
//  ИменаФайлов  - Строка, Массив - имя файла или массив с именами файлов.
//  ОписаниеОповещенияПриЗавершении  - ОписаниеОповещения - вызывается после завершения чтения файлов.
//  Кодировка - КодировкаТекста - кодировка при чтении текстового файла, по умолчанию КодировкаТекста.UTF8.
//
Функция ПолучитьПомещаемыеФайлы(ИменаФайлов, Кодировка = Неопределено) Экспорт
	
	ПомещаемыеФайлы = Новый Массив; //Массив из ОписаниеПередаваемогоФайла
	
	Если Кодировка = Неопределено ИЛИ Кодировка = "UTF8" Тогда
		Кодировка = КодировкаТекста.UTF8;
	ИначеЕсли Кодировка = "ANSI" Тогда
		Кодировка = КодировкаТекста.ANSI;
	ИначеЕсли Кодировка = "OEM" Тогда
		Кодировка = КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "UTF16" Тогда
		Кодировка = КодировкаТекста.UTF16;
	КонецЕсли;
	
	Если ТипЗнч(ИменаФайлов) = Тип("Строка") Тогда
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ИменаФайлов);
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	ИначеЕсли ТипЗнч(ИменаФайлов) = Тип("Массив") Тогда
		Если ИменаФайлов.Количество() = 0 Тогда
			РезультатЧтенияФайлов = Новый Структура;
			РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Новый Массив);
			РезультатЧтенияФайлов.Вставить("Успешно", Истина);
			РезультатЧтенияФайлов.Вставить("ТекстОшибки","");
		Иначе
			Для Каждого ИмяФайла Из ИменаФайлов Цикл
				ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПомещаемыеФайлы;
	
КонецФункции

// Процедура получения содержания текстовых файлов.
// Параметры:
//  ПомещаемыеФайлы  - Массив - имя файла или массив с именами файлов.
//  Кодировка - КодировкаТекста - кодировка при чтении текстового файла, по умолчанию КодировкаТекста.UTF8.
//
Функция ПолучитьСодержаниеТекстовыхФайлов(ПомещаемыеФайлы, Кодировка = Неопределено) Экспорт
	
	СодержаниеФайлов = Новый Массив;
	РезультатЧтенияФайлов = Новый Структура;
	РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Неопределено);
	РезультатЧтенияФайлов.Вставить("Успешно", Ложь);
	РезультатЧтенияФайлов.Вставить("ТекстОшибки", "");
	
	Для Каждого Файл Из ПомещаемыеФайлы Цикл
		
		СтруктураСодержанияФайла = Новый Структура;
		
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(Файл.Имя, Кодировка);
			ТекстСодержания = ЧтениеТекста.Прочитать();
		Исключение
			
			ТекстСообщения =  НСтр("ru='При чтении файла %ИмяФайла% произошла ошибка';uk='При читанні файлу %ИмяФайла% сталася помилка'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", Файл.Имя);
			
			РезультатЧтенияФайлов.ТекстОшибки = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
			Возврат РезультатЧтенияФайлов;
			
		КонецПопытки;
		
		СтруктураСодержанияФайла.Вставить("ОписаниеПереданногоФайла", Файл);
		СтруктураСодержанияФайла.Вставить("ТекстСодержания",          ТекстСодержания);
		
		СодержаниеФайлов.Добавить(СтруктураСодержанияФайла);
		ЧтениеТекста.Закрыть();
		
	КонецЦикла;
	
	РезультатЧтенияФайлов.Успешно = Истина;
	РезультатЧтенияФайлов.СодержаниеФайлов = СодержаниеФайлов;
	
	Возврат РезультатЧтенияФайлов;
	
КонецФункции

// Функция получает содержание текстовых файлов из временного хранилища.
// Параметры: 
//   ПомещенныеФайлы - массив содержащий элементы типа ОписаниеПередаваемогоФайла, из которых читается содержание.
// Возвращаемое значение: 
//   РезультатЧтения - структура с ключами:
//    - Успешно - булево.
//    - СодержаниеФайлов - массив структур, с ключами ОписаниеПереданногоФайла и ТекстСодержания.
//      или Неопределено, в случае Успешно = Ложь.
//    - ТекстОшибки - строка.
//
Функция ПолучитьСодержаниеТекстовыхФайловИзХранилища(ПомещенныеФайлы, Кодировка) Экспорт
	
	РезультатЧтения = Новый Структура;
	
	РезультатЧтения.Вставить("Успешно", Ложь);
	РезультатЧтения.Вставить("СодержаниеФайлов", Неопределено);
	РезультатЧтения.Вставить("ТекстОшибки", "");
	
	СодержаниеФайлов = Новый Массив;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Для Каждого Файл Из ПомещенныеФайлы Цикл
		
		СтруктураСодержанияФайла = Новый Структура;
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Файл.Хранение); //ТекстовыйДокумент
		
		Попытка
			
			ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
			
			ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, Кодировка);
			ТекстСодержания = ЧтениеТекста.Прочитать();
			
			ЧтениеТекста.Закрыть();
			
			СтруктураСодержанияФайла.Вставить("ОписаниеПереданногоФайла", Файл);
			СтруктураСодержанияФайла.Вставить("ТекстСодержания",          ТекстСодержания);
			
			СодержаниеФайлов.Добавить(СтруктураСодержанияФайла);
			
		Исключение
			
			РезультатЧтения.ТекстОшибки = ОписаниеОшибки();
			Возврат РезультатЧтения;
			
		КонецПопытки;
		
	КонецЦикла;
	
	РезультатЧтения.Успешно = Истина;
	РезультатЧтения.СодержаниеФайлов = СодержаниеФайлов;
	
	Возврат РезультатЧтения;
	
КонецФункции

// Функция выполняет проверку дублирования кодов в массивах групп товаров и товаров подготавливаемых для ККМ-Offline.
// Параметры: 
//   РасширеннаяВыгрузка  - булево, признак расширенной выгрузки.
//   ГруппыТоваров  - массив, список групп товаров.
//   Товары  - массив, список товаров.
//   Коды  - строка, строка в которую через ", " будут перечислены дублирующиеся коды.
// Возвращаемое значение: 
//   Булево - если есть дублирование, возвращает Истина, иначе Ложь.
//
Функция ПроверитьДублированиеКодов(РасширеннаяВыгрузка, ГруппыТоваров, Товары, Коды) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Количество");
	
	Если РасширеннаяВыгрузка Тогда
		
		Для Каждого ТекГруппа Из ГруппыТоваров Цикл
			ДобавитьЭлементВКоллекцию(ТекГруппа, ТЗ);
		КонецЦикла;
		
		Для Каждого ТекТовар Из Товары Цикл
			ДобавитьКодыТоваров(ТЗ, ТекТовар, "Товар");
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекТовар Из Товары Цикл
			ДобавитьЭлементВКоллекцию(ТекТовар, ТЗ);
		КонецЦикла;
		
	КонецЕсли;
	
	ТЗ.Свернуть("Код", "Количество");
	
	ЕстьДублированиеКодов = Ложь;
	
	ДублирующиесяКоды = "";
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		
		Если ТекСтрока.Количество > 1 Тогда
			
			Если НЕ ЕстьДублированиеКодов Тогда
				ЕстьДублированиеКодов = Истина;
				Коды = Формат(ТекСтрока.Код, "ЧН=0; ЧГ=0");
			Иначе
				Коды = Коды + ", " + Формат(ТекСтрока.Код, "ЧН=0; ЧГ=0");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьДублированиеКодов Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Получить таблицу товаров из XML структуры для ТСД
//
Функция ПолучитьТаблицуТоваров(ДанныеЗагрузки) Экспорт
	
	Результат = Новый Массив();
	
	Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "Table" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Record" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("BarCode"));
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("Quantity"));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сформировать таблицу товаров в XML структуре для ТСД
//
Функция СформироватьТаблицуТоваров(ДанныеЗагрузки) Экспорт
	
	Результат = Новый Массив();
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("BarCode", Позиция[0].Значение);
		ЗаписьXML.ЗаписатьАтрибут("Name", Строка(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("UnitOfMeasurement", Строка(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("CharacteristicOfNomenclature", Строка(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("SeriesOfNomenclature", Строка(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quality", Строка(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price", Строка(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quantity", Строка(Позиция[7].Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
    	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать таблицу доп.реквизитов для реализации
//
Функция СформироватьТаблицуДопРеквизитов(ДанныеЗагрузки) Экспорт
	
	Результат = Новый Массив();
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("VAT", Позиция[0]);
		ЗаписьXML.ЗаписатьАтрибут("IsExcisable", Строка(Формат(Позиция[1], "БЛ=False; БИ=True")));
		ЗаписьXML.ЗаписатьАтрибут("UKTZED" , Позиция[2]);
		ЗаписьXML.ЗаписатьАтрибут("ExciseStampBarcode",Позиция[3]); 
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
    	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Получить таблицу доп.реквизитов из XML структуры
//
Функция ПолучитьТаблицуДопРеквизитов(ДанныеЗагрузки) Экспорт
	
	Результат = Новый Массив();
	
	Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "Table" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Record" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("VAT"));
					Результат.Добавить(Булево(ЧтениеXML.ЗначениеАтрибута("IsExcisable")));
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("UKTZED"));
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("ExciseStampBarcode"));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьПараметрыПО() Экспорт
	
	времНалоговаяГруппа0           = Неопределено;
	времНалоговаяГруппа7           = Неопределено;
    времНалоговаяГруппа14          = Неопределено;
	времНалоговаяГруппа20          = Неопределено;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка,
	|	ПодключаемоеОборудование.ИдентификаторУстройства,
	|	ПодключаемоеОборудование.Наименование КАК Наименование,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования,
	|	ПодключаемоеОборудование.Параметры КАК Параметры
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	(НЕ ПодключаемоеОборудование.УстройствоОтключено)
	|	И (ПодключаемоеОборудование.ТипОборудования = &ТипОборудования)
	|	И (НЕ ПодключаемоеОборудование.ПометкаУдаления)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Параметры = Выборка.Параметры.Получить();
		
		Параметры.Свойство("НалоговаяГруппа0"          , времНалоговаяГруппа0);
		Параметры.Свойство("НалоговаяГруппа7"          , времНалоговаяГруппа7);
        Параметры.Свойство("НалоговаяГруппа14"         , времНалоговаяГруппа14);
		Параметры.Свойство("НалоговаяГруппа20"         , времНалоговаяГруппа20);
		
		НужноПерезаписать = Ложь;
		ТаблицаСоответствий = Новый Массив;
		
		Если времНалоговаяГруппа20 <> Неопределено Тогда
			
			Элемент = Новый Массив(3);
			
			Элемент[0] = времНалоговаяГруппа20;
			Элемент[1] = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(Перечисления.СтавкиНДС.НДС20);
			Элемент[2] = Ложь;
			
			ТаблицаСоответствий.Добавить(Элемент);
			
			НужноПерезаписать = Истина;
			
		КонецЕсли;
        
        Если времНалоговаяГруппа14 <> Неопределено Тогда
        	
        	Элемент = Новый Массив(3);
        	
        	Элемент[0] = времНалоговаяГруппа14;
        	Элемент[1] = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(Перечисления.СтавкиНДС.НДС14);
        	Элемент[2] = Ложь;
        	
        	ТаблицаСоответствий.Добавить(Элемент);
        	
        	НужноПерезаписать = Истина;
        	
        КонецЕсли;
        
		Если времНалоговаяГруппа7 <> Неопределено Тогда
			
			Элемент = Новый Массив(3);
			
			Элемент[0] = времНалоговаяГруппа7;
			Элемент[1] = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(Перечисления.СтавкиНДС.НДС7);
			Элемент[2] = Ложь;
			
			ТаблицаСоответствий.Добавить(Элемент);
			
			НужноПерезаписать = Истина;
			
		КонецЕсли;
		
		Если времНалоговаяГруппа0 <> Неопределено Тогда
			
			Элемент = Новый Массив(3);
			
			Элемент[0] = времНалоговаяГруппа0;
			Элемент[1] = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(Перечисления.СтавкиНДС.НДС0);
			Элемент[2] = Ложь;
			
			ТаблицаСоответствий.Добавить(Элемент);
			
			НужноПерезаписать = Истина;
			
		КонецЕсли;
		
		Если НужноПерезаписать Тогда
			
			Параметры.Вставить("ТаблицаСоответствийНалоговыхГрупп", ТаблицаСоответствий);
		
			ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектСправочника.Параметры = Новый ХранилищеЗначения(Параметры);
			ОбъектСправочника.Записать();
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьXMLПакетДляТекста(СтрокаТекста, РевизияИнтерфейса = 0) Экспорт
	
	Результат = Новый Массив();
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
	                              
	Если НЕ ПустаяСтрока(СтрокаТекста) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
			
			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
			
			Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
				 
				// Завершаем запись текущего пакета. 
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				Текст = ЗаписьXML.Закрыть();
				Результат.Добавить(Текст);
				
				// Новый пакет.
				ЗаписьXML = Новый ЗаписьXML();
				ЗаписьXML.УстановитьСтроку("UTF-8");
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
				
			ИначеЕсли (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
				ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
				ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
	 			ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
					ЗаписьXML.ЗаписатьАтрибут("Type", XMLСтрока(ВремТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ВремШтрихКод));
				Иначе
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ВремТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
				ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Текст = ЗаписьXML.Закрыть();
	
	Результат.Добавить(Текст);
	
	Возврат Результат;

КонецФункции   

Функция ПолучитьXMLПакетДляТекстовогоДокумента(НефискальныеДокументы, ВыходныеПараметры, ШиринаСтроки = 32, РевизияИнтерфейса = 0) Экспорт
	
	Результат = Новый Массив();
	
	Для Каждого ПозицииЧека Из НефискальныеДокументы Цикл
		
		// Пакетная печать чека. Подготовка пакета.
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
		
		// Табличная часть
		Если ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ПозицииЧека[ИндексМассива]; //см. МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
						ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ТекущаяПозиция.Наименование));
						ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
						ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
						ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
						ЗаписьXML.ЗаписатьАтрибут("Department", XMLСтрока(ТекущаяПозиция.НомерСекции));
						Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
							ЗаписьXML.ЗаписатьАтрибут("Tax"   , XMLСтрока(ТекущаяПозиция.СтавкаНДС));
						Иначе
							ЗаписьXML.ЗаписатьАтрибут("Tax"   , "none");
						КонецЕсли;
						ЗаписьXML.ЗаписатьКонецЭлемента();
					ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
						Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
							ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
						Иначе
							ТекстовыеСтроки = ТекущаяПозиция.Текст;
						КонецЕсли;
						Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
						Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
							ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
							ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
							ЗаписьXML.ЗаписатьКонецЭлемента();  
						КонецЦикла;
					ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
						Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
							ЗаписьXML.ЗаписатьАтрибут("Type", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
							ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ТекущаяПозиция.ШтрихКод));
						Иначе
							ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
							ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
						КонецЕсли;
						ЗаписьXML.ЗаписатьКонецЭлемента();
					Иначе
						ТекстОшибки = НСтр("ru='Не определен тип позиции чека.';uk='Не визначений тип позиції чека.'"); 
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
						Результат = Ложь;  
						Возврат Результат;
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Текст = ЗаписьXML.Закрыть();
		Результат.Добавить(Текст);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции  

Функция ПолучитьXMLПакетДляОперации(ОбщиеПараметры, РевизияИнтерфейса = 0) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("InputParameters");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		ЗаписьXML.ЗаписатьАтрибут("CashierName", ?(ОбщиеПараметры.Свойство("Кассир"), XMLСтрока(ОбщиеПараметры.Кассир), НСтр("ru='Администратор';uk='Адміністратор'")));
		ЗаписьXML.ЗаписатьАтрибут("CashierINN" , ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
		Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
			ЗаписьXML.ЗаписатьАтрибут("SaleAddress", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("SaleLocation", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
		КонецЕсли;
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , ?(ОбщиеПараметры.Свойство("Кассир"), XMLСтрока(ОбщиеПараметры.Кассир), НСтр("ru='Администратор';uk='Адміністратор'")));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

#КонецОбласти


// Возвращает Истина, если "функциональная" подсистема существует в конфигурации.
// Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//
// У "функциональной" подсистемы снят флажок "Включать в командный интерфейс".
//
// Параметры:
//  ПолноеИмяПодсистемы - Строка - полное имя объекта метаданных подсистема
//                        без слов "Подсистема." и с учетом регистра символов.
//                        Например: "СтандартныеПодсистемы.ВариантыОтчетов".
//
// Пример:
//
//  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
//  	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
//  	МодульВариантыОтчетов.<Имя метода>();
//  КонецЕсли;
//
// Возвращаемое значение:
//  Булево.
//
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	ИменаПодсистем = СтандартныеПодсистемыПовтИсп.ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции

// Возвращает Истина, если используется подсистемы фискальных устройств и эти подсистемы существует в конфигурации.
// Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//
// У хотя бы одной "функциональной" подсистемы включен флажок "Включать в командный интерфейс".
//
// Возвращаемое значение:
//  Булево.
//
Функция ИспользуетсяПодсистемыФискальныхУстройств() Экспорт
	
	Результат = ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.ККТ")
		Или ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.ФискальныеРегистраторы")
		Или ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.ПринтерЧеков");
	Возврат Результат;
	
КонецФункции



#Область ИнтерфейсныйПроцедурыИФункции

Процедура ПодготовитьЭлементУправления(ЭлементУправления) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	МенеджерОборудованияВызовСервераПереопределяемый.ПодготовитьЭлементУправления(ЭлементУправления, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда    
		Если ОбщегоНазначенияКлиентСервер.ЭтоМобильныйКлиент() Тогда
			Если ЭлементУправления.Вид <> ВидПоляФормы.ПолеФлажка Тогда
				ЭлементУправления.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			КонецЕсли;
			ЭлементУправления.ШрифтЗаголовка = ШрифтыСтиля.МелкийШрифтТекста;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКодыТоваров(ТЗ, Элемент, Уровень = "Товар")
	
	Если Уровень = "Товар" Тогда
		
		Если Элемент.ИмеетХарактеристики Тогда
			
			Для Каждого ТекХарактеристика Из Элемент.Характеристики Цикл
				ДобавитьКодыТоваров(ТЗ, ТекХарактеристика, "Характеристика");
			КонецЦикла;
			
		ИначеЕсли Элемент.ИмеетУпаковки Тогда
			
			Для Каждого ТекУпаковка Из Элемент.Упаковки Цикл
				ДобавитьКодыТоваров(ТЗ, ТекУпаковка, "Упаковка");
			КонецЦикла;
			
		Иначе
			
			ДобавитьЭлементВКоллекцию(Элемент, ТЗ);
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Характеристика" Тогда
		
		Если Элемент.ИмеетУпаковки Тогда
			
			Для Каждого ТекУпаковка Из Элемент.Упаковки Цикл
				ДобавитьКодыТоваров(ТЗ, ТекУпаковка, "Упаковка");
			КонецЦикла;
			
		Иначе
			
			ДобавитьЭлементВКоллекцию(Элемент, ТЗ);
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Упаковка" Тогда
		
		ДобавитьЭлементВКоллекцию(Элемент, ТЗ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЭлементВКоллекцию(Элемент, Коллекция)
	
	НоваяСтрока = Коллекция.Добавить();
	
	Попытка
		НоваяСтрока.Код = Число(Элемент.Код);
	Исключение
		НоваяСтрока.Код = 0;
	КонецПопытки;;
	
	НоваяСтрока.Количество = 1;
	
КонецПроцедуры

// Для внутреннего использования
//
Функция ПолучитьСтатусПоследнейСмены(ИдентификаторУстройства) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		Возврат МодульКассовыеСменыВызовСервера.СтатусПоследнейСмены(ИдентификаторУстройства);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.';uk='Виконання команди неможливо, оскільки підсистеми ККТ, ФР, Принтер чеків недоступні.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
///
Функция ТребуетсяЗакрытиеСмены(ИдентификаторУстройства) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
			МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
			Если МодульКассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ИдентификаторУстройства) = Неопределено
				И ПолучитьТипПодключаемогоОборудования(ИдентификаторУстройства) = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
				Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.';uk='Виконання команди неможливо, оскільки підсистеми ККТ, ФР, Принтер чеків недоступні.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
///
Функция НоваяКассоваяСмена(ФискальноеУстройство) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		Возврат МодульКассовыеСменыВызовСервера.НоваяКассоваяСмена(ФискальноеУстройство);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.';uk='Виконання команди неможливо, оскільки підсистеми ККТ, ФР, Принтер чеків недоступні.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
///
Функция ОписаниеПоследнейКассовойСмены(ФискальноеУстройство) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		Возврат МодульКассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ФискальноеУстройство);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.';uk='Виконання команди неможливо, оскільки підсистеми ККТ, ФР, Принтер чеків недоступні.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
///
Функция ИнкрементироватьТекущийНомерЧекаККТ(ФискальноеУстройство, КассоваяСмена) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		МодульКассовыеСменыВызовСервера.ИнкрементироватьТекущийНомерЧекаККТ(ФискальноеУстройство, КассоваяСмена);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.';uk='Виконання команди неможливо, оскільки підсистеми ККТ, ФР, Принтер чеків недоступні.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
Процедура ПослеВыполненияКомандыФискальнымУстройством(ПараметрыКоманды) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
			МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
			МодульКассовыеСменыВызовСервера.ПослеВыполненияКомандыФискальнымУстройством(ПараметрыКоманды);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.';uk='Виконання команди неможливо, оскільки підсистеми ККТ, ФР, Принтер чеків недоступні.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти