
#Область ПрограммныйИнтерфейс

#Область ОбменЧерезУниверсальныйФормат

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписью(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник        - ДокументОбъект - источник события.
//  Отказ           - Булево - флаг отказа от выполнения обработчика.
//  РежимЗаписи     - РежимЗаписиДокумента - см. в синтаксис-помощнике РежимЗаписиДокумента.
//  РежимПроведения - РежимПроведенияДокумента - см. в синтаксис-помощнике РежимПроведенияДокумента.
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник       - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередУдалением(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник       - НаборЗаписейРегистра - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
//  Замещение      - Булево - признак замещения существующего набора записей.
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписьюНабораЗаписей(Источник, Отказ, Замещение) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ, Замещение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПравилРегистрации

// Параметры обработчиков правил регистрации "ПриОбработке" и "ПриОбработкеДополнительный"
//
// Возвращает: ПараметрыОбработки - Структура
//    РазделыУчетаСтрокой - Строка - Список через запятую, разделов учета, по которым необходимо произвести фильтрацию
//    ТекстЗапроса - Строка - Текст запроса к ИБ для вычисления массива узлов получателей
//    ПараметрыЗапроса - Структура - Структура с заполненными параметрами запроса к ИБ, для вычисления узлов получателей
//    ИспользоватьКэш - Булево - Флаг использования кэша
//    Отказ - Булево - флаг отказа от выполнения обработчика
//    Объект - ЛюбойОбъект - Объект, для которого выполняются правила регистрации
//    Выгрузка - Булево - Флаг, определяющий происходит запись объекта или выгрузка.
//
Функция ИнициализироватьПараметрыОбработкиПРО() Экспорт
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("РазделыУчетаСтрокой", "");
	ПараметрыОбработки.Вставить("ТекстЗапроса",        "");
	ПараметрыОбработки.Вставить("ПараметрыЗапроса",    Новый Структура());
	ПараметрыОбработки.Вставить("ИспользоватьКэш",     Ложь);
	ПараметрыОбработки.Вставить("Отказ",               Ложь);
	ПараметрыОбработки.Вставить("Объект",              Неопределено);
	ПараметрыОбработки.Вставить("Выгрузка",            Ложь);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

// Процедура-обработчик события "ПриОбработке".
// Вызывается из правил регистрации плана обмена СинхронизацияДанныхЧерезУниверсальныйФормат.
//
// Параметры:
//  ПараметрыОбработкиПРО – Структура – см. ИнициализироватьПараметрыОбработкиПРО.
// Возвращает:
//  ПараметрыОбработкиПРО – Структура – см. ИнициализироватьПараметрыОбработкиПРО.
//
Функция ПриОбработкеПРО(ПараметрыОбработкиПРО) Экспорт
	
	// Адаптируем текст запроса с учета разделов учета.
	ПодзапросРазделыУчета = "";
	МассивРазделовУчета   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыОбработкиПРО.РазделыУчетаСтрокой,,Истина);
	
	Если МассивРазделовУчета.Количество() = 0 Тогда
		//Если разделы учета не указаны, то адаптация запроса не имеет смысла.
		Возврат ПараметрыОбработкиПРО;
	КонецЕсли;
	
	ПараметрыОбработкиПРО.ИспользоватьКэш = Ложь;
	ТекстЗапроса                          = ПараметрыОбработкиПРО.ТекстЗапроса;
	
	НомерРаздела = 1;
	Для Каждого РазделУчета Из МассивРазделовУчета Цикл
		
		ПараметрыОбработкиПРО.ПараметрыЗапроса.Вставить("РазделУчета"+НомерРаздела, СокрЛП(РазделУчета));
		ПодзапросРазделыУчета = ПодзапросРазделыУчета + ?(ПодзапросРазделыУчета = "", "", Символы.ПС + "ИЛИ ")
			+ "ПланОбменаРазделыУчета.РазделУчета = &СвойствоОбъекта_РазделУчета" + НомерРаздела;
		НомерРаздела = НомерРаздела + 1;
		
	КонецЦикла;
	
	Если МассивРазделовУчета.Количество() > 1 Тогда
		ПодзапросРазделыУчета = "(" + ПодзапросРазделыУчета + ")";
	КонецЕсли;
	
	ТекстЛевогоСоединения = "КАК ПланОбменаОсновнаяТаблица
		|ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.РазделыУчета КАК ПланОбменаРазделыУчета
		|ПО ПланОбменаОсновнаяТаблица.Ссылка = ПланОбменаРазделыУчета.Ссылка
		|	И " + ПодзапросРазделыУчета + "
		|	И ПланОбменаРазделыУчета.Выгружать";
	
	ТекстУсловияРазделовУчета = "	И ЕстьNULL(ПланОбменаРазделыУчета.Выгружать, ЛОЖЬ)
		|[ОбязательныеУсловия]";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ПланОбменаОсновнаяТаблица", ТекстЛевогоСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ОбязательныеУсловия]", ТекстУсловияРазделовУчета);
	
	ПараметрыОбработкиПРО.ТекстЗапроса = ТекстЗапроса;
	
	Возврат ПараметрыОбработкиПРО;
	
КонецФункции

Процедура ДокументАвансовыйОтчетПередОбработкойПРО(Объект, Отказ) Экспорт
	
	Если Объект.ОплатаПоставщикам.Количество() = 0 
		И Объект.ПрочиеРасходы.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Метод выполняет регистрацию документа ВзаимозачетЗадолженности после выполения обработчиков ПРО.
//
// Параметры:
//  Объект - ДокументОбъект.ВзаимозачетЗадолженности - регистрируемый объект.
//  Выгрузка - Булево - Флаг, указывающий на то, что осуществляется выгрузка объекта.
//  Получатели - Массив - Массив ссылок на узлы планов обмена, на которых необходимо зарегистрировать объекта
//  ИмяПланаОбмена - Строка - Имя плана обмена, для которого выполняется ПРО.
//
Процедура ДокументВзаимозачетЗадолженностиПослеОбработкиПРО(Объект, Выгрузка, Получатели, ИмяПланаОбмена) Экспорт
	
	
КонецПроцедуры

Процедура ДокументОтчетКомиссионераКомитентуПриОбработкеПРО(Объект, Отказ) Экспорт
	ЕстьТовары = Ложь;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ТипНоменклатуры = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Номенклатура, "ТипНоменклатуры");
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			ЕстьТовары = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	Если НЕ ЕстьТовары Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти