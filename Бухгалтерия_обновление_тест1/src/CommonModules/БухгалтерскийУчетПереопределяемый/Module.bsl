#Область ПрограммныйИнтерфейс

#Область ПроверкаНеобходимостиПроведенияДокументов

//++ НЕ УТ

// Функция возвращает 1, если ведется кадровый учет, иначе 0.
//
// Возвращаемое значение:
//	Число - Признак ведения кадрового учета.
//
Функция ВедетсяКадровыйУчет() Экспорт
	
	Возврат 0;

КонецФункции // ВедетсяКадровыйУчет()

// Процедура устанавливает настройки для ведения кадрового учета
//
// Параметры:
//	ВестиКадровыйУчет - Булево - Признак ведения кадрового учета.
//	УчетЗарплатыИКадровСредствамиБухгалтерии - Булево - Признак учета зарплаты в программе.
//
Процедура УстановитьНастройкиКадровогоУчета(ВестиКадровыйУчет, УчетЗарплатыИКадровСредствамиБухгалтерии) Экспорт

	// В БРУ ничего не делаем
	
КонецПроцедуры // УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме()

// Функция возвращает 1, если используется учет зарплаты ведется во внешней программе, иначе 0.
//
// Возвращаемое значение:
//	Число - Признак учета зарплаты и кадров во внешней программе.
//
Функция УчетЗарплатыИКадровВоВнешнейПрограмме() Экспорт
	
	Возврат ?(Константы.ИспользоватьНачислениеЗарплаты.Получить(), 0, 1);

КонецФункции // УчетЗарплатыИКадровВоВнешнейПрограмме()

// Процедура устанавливает настройки для ведения учета зарплаты во внешней программе.
//
// Параметры:
//	ВестиУчетЗарплатыИКадровВоВнешнейПрограмме - Булево - Признак ведения учета зарплаты во внешней программе.
//
Процедура УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт

	// В БРУ ничего не делаем

КонецПроцедуры // УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме()

// Функция возвращает Истина, если используется учет зарплаты ведется сводно, иначе Ложь.
//
// Возвращаемое значение:
//	Булево - Признак ведения расчетов по зарплате без субконто работники.
//
Функция ВедетсяУчетРасчетовПоЗарплатеСводно() Экспорт
	
	БУ = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	Возврат БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") <> Неопределено;

КонецФункции // ВедетсяУчетРасчетовПоЗарплатеСводно()

// Процедура устанавливает настройки для ведения учета зарплаты во внешней программе.
//
// Параметры:
//	ВедетсяУчетРасчетовПоЗарплатеСводно - Булево - Признак ведения расчетов по зарплате сводно.
//
Процедура УстановитьПараметрыУчетаРасчетовПоЗарплате(ВедетсяУчетРасчетовПоЗарплатеСводно) Экспорт

	// в БРУ ничего не выполняем.

КонецПроцедуры // УстановитьПараметрыУчетаРасчетовПоЗарплате()

// Функция возвращает Истина, если в конфигурации ведется учет по валютам.
//
// Возвращаемое значение:
//	Булево - Признак использования валютного учета.
//
Функция ИспользоватьВалютныйУчет() Экспорт

	Возврат Истина;

КонецФункции // ИспользоватьВалютныйУчет()

// Функция возвращает ИСТИНА, если документ считается проведенным.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.* - Ссылка на документ.
//
// Возвращаемое значение:
//	Булево - Истина, если документ проведен.
//
Функция ДокументПроведен(ДокументСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияБух") Тогда
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ПометкаУдаления");
		Возврат НЕ РеквизитыДокумента.ПометкаУдаления;

	Иначе
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Проведен");
		Возврат РеквизитыДокумента.Проведен;
	
	КонецЕсли;	
	
КонецФункции // ДокументПроведен()

//-- НЕ УТ

// Функция возвращает ИСТИНА, если в конфигурации поддерживается учет по подразделениями.
//
// Возвращаемое значение:
//	Булево - Признак ведения учета по подразделениям.
//
Функция ВестиУчетПоПодразделениям() Экспорт

	Возврат Истина;

КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации поддерживается учет по договорам.
//
// Возвращаемое значение:
//	Булево - Признак учета по договорам.
//
Функция ВестиУчетПоДоговорам() Экспорт

	Возврат Истина;

КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации используются подразделения.
//
// Возвращаемое значение:
//	Булево - Признак использования подразделений.
//
Функция ИспользоватьПодразделения() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");

КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации используется управленческая организация.
//
// Возвращаемое значение:
//	Булево - Признак использования управленческой организации.
//
Функция ИспользоватьУправленческуюОрганизацию() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию");

КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации используются направления деятельности.
//
// Возвращаемое значение:
//	Булево - Истина, если направления деятельности используются.
//
Функция ИспользоватьНаправленияДеятельности() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат")
		И (ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности")
//++ НЕ УТ
		Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетВнеоборотныхАктивовПоНаправлениямДеятельности")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетДСпоНаправлениямДеятельностиПоКорреспонденции")
//-- НЕ УТ
		Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетДСпоНаправлениямДеятельностиРаздельно")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности"));

КонецФункции

// Функция возвращает признак использования одной номенклатурной группы.
//
// Возвращаемое значение:
//	Булево - Признак использования одной номенклатурной группы.
//
Функция ИспользоватьОднуНоменклатурнуюГруппу() Экспорт

	// Совместимость с БП.
	Возврат Ложь;

КонецФункции

// Функция возвращает признак использования в базе комиссионных схем в хозяйственной деятельности.
//
// Возвращаемое значение:
//	Булево - Истина, если комиссионные схемы используются.
//
Функция ИспользуютсяКомиссионныеСхемы() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах");

КонецФункции

#КонецОбласти

//++ НЕ УТ

#Область АналитикаПланаСчетов

// Установка типов значений субконто, связанных с именами реквизитов.
//
// Параметры:
//  СвязанныеСубконто  - Соответствие - ключ - имя реквизита, значение - описание типов связанных значений субконто.
//
Процедура УстановитьТипыСвязанныхСубконто(СвязанныеСубконто) Экспорт
	
	ТипыСубконто = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора();
	ТипыСубконто = Новый ОписаниеТипов(ТипыСубконто, Документы.ТипВсеСсылки().Типы());
	СвязанныеСубконто.Вставить("Контрагент", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("ДоговорКонтрагента", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("Номенклатура", ТипыСубконто);
	
КонецПроцедуры

// Возвращает настройки учета для переданного счета плана счетов.
//
// Параметры:
//	Счет - ПланСчетовСсылка.Хозрасчетный - Счет, для которого получаются настройки.
//
Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт
	
	Возврат РеглУчетСервер.ПолучитьСвойстваСчета(Счет);
	
КонецФункции

#КонецОбласти

#Область СообщенияПользователю

// Процедура формирует сообщение пользователю при возникновении ошибок 
// в процессе проведения регламентированных операций.
//
// Параметры:
//	ТекстСообщения - Строка - Текст сообщения пользователю.
//	СсылкаНаОшибочныйОбъект - Произвольный - Ссылка на объект, содержащий ошибку.
//	Отказ - Булево - Признак отказа.
//	РегОперация - ДокументСсылка.РегламентнаяОперация - Документ, связанный с ошибкой.
//
Процедура СообщитьОбОшибкеРегОперацииСНавигацией(Знач ТекстСообщения, СсылкаНаОшибочныйОбъект = Неопределено, Отказ = Истина, РегОперация = Неопределено) Экспорт
	
	Отказ = Истина;
	Если ТипЗнч(СсылкаНаОшибочныйОбъект) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОшибочныйОбъект,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры // СообщитьОбОшибкеРегОперацииСНавигацией()

#КонецОбласти

#Область СвойстваДоговора

// Функция возвращает организацию по договору.
//
// Параметры:
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на договор.
//
// Возвращаемое значение:
//	СправочникСсылка.Организации - Организация, заключившая договор.
//
Функция ПолучитьОрганизациюПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Организация");
	
КонецФункции // ПолучитьОрганизациюПоДоговору()

// Функция возвращает контрагента по договору.
//
// Параметры:
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на договор.
//
// Возвращаемое значение:
//	СправочникСсылка.Контрагенты - Контрагент договора.
//
Функция ПолучитьКонтрагентаПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, 
		БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора());
	
КонецФункции // ПолучитьКонтрагентаПоДоговору()

// Функция возвращает валюту договора.
//
// Параметры:
// 	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на договор.
//
// Возвращаемое значение:
// СправочникСсылка.Валюты - Валюта договора.
//
Функция ВалютаВзаиморасчетов(ДоговорКонтрагента) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
КонецФункции // ВалютаВзаиморасчетов()

// Функция возвращает признак расчетов в условных единицах.
//
// Параметры:
//	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на договор.
//
// Возвращаемое значение
// Булево - ИСТИНА, если расчеты ведутся в условных единицах.
//
Функция РасчетыВУсловныхЕдиницах(ДоговорКонтрагента) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов,ОплатаВВалюте");
	
	Возврат ВалютаРегламентированногоУчета <> ДанныеДоговора.ВалютаВзаиморасчетов И НЕ ДанныеДоговора.ОплатаВВалюте;
	
КонецФункции // РасчетыВУсловныхЕдиницах()

// Функция возвращает пустое значение договора.
//
// Возвращаемое значение:
//	СправочникСсылка.ДоговорКонтрагентов - Пустой договор.
//
Функция ПолучитьПустоеЗначениеДоговора() Экспорт
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции // ПолучитьПустоеЗначениеДоговора()

// Функция возвращает текст, для получения свойства ВидДоговора в запросе.
//
// Параметры:
//	ИмяПоля - Строка - Выражение для получения ссылки на договор.
//
// Возвращаемое значение:
//	Строка - Выражение для получения вида договора.
//
Функция ТекстЗапросаВидДоговора(ИмяПоля) Экспорт
	
	ИмяРеквизитаВидДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	Возврат СтрЗаменить("ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов)." + ИмяРеквизитаВидДоговора, "ПолеДоговор", ИмяПоля); 
	
КонецФункции // ТекстЗапросаВидДоговора()

// Функция возвращает текст, для получения свойства РасчетыВУсловныхЕдиницах в запросе.
//
// Параметры:
//	ИмяПоля - Строка - Выражение для получения ссылки на договор.
//
// Возвращаемое значение:
//	Строка - Выражение для получения признака расчетов по договору в условных единицах.
//
Функция ТекстЗапросаРасчетыВУЕ(ИмяПоля) Экспорт
	
	Возврат СтрЗаменить("ВЫБОР 
						|	КОГДА ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов).ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях)
						|		ТОГДА ИСТИНА
						|	ИНАЧЕ ЛОЖЬ
						|КОНЕЦ", "ПолеДоговор", ИмяПоля);
	
КонецФункции // ТекстЗапросаРасчетыВУЕ()

// Функция ТекстЗапросаУчетАгентскогоНДС возвращает текст для получения свойства 
// УчетАгентскогоНДС для договора.
//
// Параметры:
//	ИмяПоля - Строка - Выражение для получения ссылки на договор.
//
// Возвращаемое значение:
//	Строка - Выражение для получения признака учет агентского НДС по договору.
//
Функция ТекстЗапросаУчетАгентскогоНДС(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.ДоговорыКонтрагентов).УчетАгентскогоНДС";

КонецФункции // ТекстЗапросаУчетАгентскогоНДС()

// Функция ТекстЗапросаВидАгентскогоДоговора возвращает текст запроса для получения
// свойства договора ВидАгентскогоДоговора.
//
// Параметры:
//	ИмяПоля - Строка - Выражение для получения ссылки на договор.
//
// Возвращаемое значение:
//	Строка - Выражение для получения вида агентского договора.
//
Функция ТекстЗапросаВидАгентскогоДоговора(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.ДоговорыКонтрагентов).ВидАгентскогоДоговора";

КонецФункции // ТекстЗапросаВидАгентскогоДоговора()

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка.
//
// Параметры:
//  ВладелецДоговора	-	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить.
//  ОрганизацияДоговора	-	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить.
//  СписокВидовДоговора	-	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ТипыДоговоров> 
//							Нужные виды договора.
//  СтруктураПараметров	-	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура.
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно.
//
// Возвращаемое значение:
//   Булево - Истина, если договор был установлен, иначе Ложь.
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Ссылка = &ОсновнойДоговорКонтрагента 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	ГоловнаяОрганизацияДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ОрганизацияДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ГоловнаяОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	Запрос.УстановитьПараметр("ОсновнойДоговорКонтрагента", ДоговорКонтрагента); // В УП у контрагентов нет реквизита ОсновнойДоговорКонтрагента.
	
	ИмяРеквизитаКонтрагент = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
	ИмяРеквизитаВидДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов." + ИмяРеквизитаКонтрагент + " = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов." + ИмяРеквизитаВидДоговора + " В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			ВидСравненияЗапроса = "";

			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыДоговора = ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)
	 ИЛИ РеквизитыДоговора[ИмяРеквизитаКонтрагент] <> ВладелецДоговора
	 ИЛИ РеквизитыДоговора.Организация <> ГоловнаяОрганизацияДоговора Тогда
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()

// Функция ЭтоВидДоговораСПоставщиком возвращает ИСТИНА, 
// если договор с таким видом является договором с поставщиком.
//
// Параметры:
//	ВидДоговораХозОперация - ПеречисленияСсылка.ХозяйственныеОперации - Характер операции по договору.
//
// Возвращаемое значение:
//	Булево - Истина, если договор является договором с поставщиком.
//
Функция ЭтоВидДоговораСПоставщиком(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
				ИЛИ ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
				;

КонецФункции // ЭтоВидДоговораСПоставщиком()

// Функция ЭтоВидДоговораСПокупателем возвращает ИСТИНА, 
// если договор с таким видом является договором с покупателем.
//
// Параметры:
//	ВидДоговораХозОперация - ПеречисленияСсылка.ХозяйственныеОперации - Характер операции по договору.
//
// Возвращаемое значение:
//	Булево - Истина, если договор является договором с покупателем.
//
Функция ЭтоВидДоговораСПокупателем(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ТипыДоговоров.СПокупателем;

КонецФункции // ЭтоВидДоговораСПокупателем()

// Функция ЭтоВидДоговораСКомитентом возвращает ИСТИНА, 
// если договор с таким видом является договором с комитентом.
//
// Параметры:
//	ВидДоговораХозОперация - ПеречисленияСсылка.ХозяйственныеОперации - Характер операции по договору.
//
// Возвращаемое значение:
//	Булево - Истина, если договор является договором с комитентом.
//
Функция ЭтоВидДоговораСКомитентом(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;

КонецФункции // ЭтоВидДоговораСКомитентом()

// Функция ЭтоВидДоговораСКомиссионером возвращает ИСТИНА, 
// если договор с таким видом является договором с комиссионером.
//
// Параметры:
//	ВидДоговораХозОперация - ПеречисленияСсылка.ХозяйственныеОперации - Характер операции по договору.
//
// Возвращаемое значение:
//	Булево - Истина, если договор является договором с комиссионером.
//
Функция ЭтоВидДоговораСКомиссионером(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;

КонецФункции // ЭтоВидДоговораСКомиссионером()

// Функция ПолучитьВидДоговораСПоставщиком возвращает значение вида договоров, 
// которые используются при расчетах с поставщиками.
//
// Возвращаемое значение:
//	ПеречисленияСсылка.ХозяйственныеОперации - Значение вида договора.
//
Функция ПолучитьВидДоговораСПоставщиком() Экспорт

	Возврат Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;

КонецФункции // ПолучитьВидДоговораСПоставщиком()

// Функция ПолучитьВидДоговораСПокупателем возвращает значение вида договоров, 
// которые используются при расчетах с покупателями.
//
// Возвращаемое значение:
//	ПеречисленияСсылка.ХозяйственныеОперации - Значение вида договора.
//
Функция ПолучитьВидДоговораСПокупателем() Экспорт

	Возврат Перечисления.ХозяйственныеОперации.РеализацияКлиенту;

КонецФункции // ПолучитьВидДоговораСПокупателем()

// Функция ПолучитьВидДоговораСКомиссионером возвращает значение вида договоров, 
// которые используются при расчетах с комиссионерами.
//
// Возвращаемое значение:
//	ПеречисленияСсылка.ХозяйственныеОперации - Значение вида договора.
//
Функция ПолучитьВидДоговораСКомиссионером() Экспорт

	Возврат Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;

КонецФункции // ПолучитьВидДоговораСКомиссионером()

// Функция ПолучитьВидДоговораСКомитентом возвращает значение вида договоров, 
// которые используются при расчетах с комитентами.
//
// Возвращаемое значение:
//	ПеречисленияСсылка.ХозяйственныеОперации - Значение вида договора.
//
Функция ПолучитьВидДоговораСКомитентом() Экспорт

	Возврат Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;

КонецФункции // ПолучитьВидДоговораСКомитентом()

// Функция ПолучитьРеквизитыДоговора() возвращает структуру со реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - Договор, реквизиты которого
//		требуется получить.
//
// Возвращаемое значение:
//  Структура с ключами:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты, валюта взаиморасчетов по договору
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор
//		ВидДоговора 		 - ПеречислениеСсылка.ТипыДоговоров  (УП)
//							   или ПеречислениеСсылка.ХозяйственныеОперации (УП) 
//		ТипЦен				 - СправочникСсылка.ТипыЦенНоменклатуры (БП)
//							   или НЕОПРЕДЕЛЕНО (УП)
//		УчетАгентскогоНДС	 - Булево
//		ВидАгентскогоДоговора- ПеречислениеСсылка.ВидыАгентскихДоговоров
//		РасчетыВУсловныхЕдиницах - Булево
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента) Экспорт

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
																		"Ссылка,
																		|ВалютаВзаиморасчетов,
																		|Контрагент,
																		|Организация,
																		|ХозяйственнаяОперация,
																		|УчетАгентскогоНДС,
																		|ВидАгентскогоДоговора");
																		
		СтруктураРеквизиты.Вставить("РасчетыВУсловныхЕдиницах",	РасчетыВУсловныхЕдиницах(ДоговорКонтрагента));
		СтруктураРеквизиты.Вставить("Владелец", 				СтруктураРеквизиты.Контрагент);
		СтруктураРеквизиты.Вставить("ВидДоговора", 				СтруктураРеквизиты.ХозяйственнаяОперация);
		СтруктураРеквизиты.Вставить("НДСПоСтавкам4и2",			Ложь);
		
	Иначе
		
		СтруктураРеквизиты = Новый Структура;
		СтруктураРеквизиты.Вставить("Ссылка",  					Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("ВалютаВзаиморасчетов",		Справочники.Валюты.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("Владелец",					Справочники.Контрагенты.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("Организация",				Справочники.Организации.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("ВидДоговора",				Перечисления.ХозяйственныеОперации.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("УчетАгентскогоНДС",		Ложь);
		СтруктураРеквизиты.Вставить("НДСПоСтавкам4и2",			Ложь);
		СтруктураРеквизиты.Вставить("ВидАгентскогоДоговора",	Неопределено);
		СтруктураРеквизиты.Вставить("РасчетыВУсловныхЕдиницах",	Ложь);
		
	КонецЕсли;
	
	СтруктураРеквизиты.Вставить("ТипЦен", Неопределено);
	
	Возврат СтруктураРеквизиты;

КонецФункции // ПолучитьРеквизитыДоговора()

#КонецОбласти

//-- НЕ УТ

#Область ОпределенияТипов

// Функция возвращает типы значений, для которых имеет смысл отбор по организации
//
// Возвращаемое значение:
//	ОписаниеТипов - Описание типов справочников, которые зависят от организации.
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	СтрокаТипов = "СправочникСсылка.БанковскиеСчетаОрганизаций,
		|СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.РегистрацииВНалоговомОргане";
	
	Возврат Новый ОписаниеТипов(Документы.ТипВсеСсылки(), СтрокаТипов);
	
КонецФункции // ТипыСвязанныеСОрганизацией()

// Возвращает описание типов для суммового показателя.
//
// Возвращаемое значение:
//	ОписаниеТипов - Описание типов для суммового показателя.
//
Функция ТипСумма() Экспорт
	
	Возврат РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля();
	
КонецФункции

#КонецОбласти

#Область СвойстваОрганизации

//++ НЕ УТ

// Функция возвращает значение головной организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Исходная организация.
//
// Возвращаемое значение:
//	СправочникСсылка.Организации - Ссылка на головную организацию.
//
Функция ГоловнаяОрганизация(Организация) Экспорт
	
	РеквизитГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
	Возврат ?(ЗначениеЗаполнено(РеквизитГоловнаяОрганизация), РеквизитГоловнаяОрганизация, Организация);
	
КонецФункции // ГоловнаяОрганизация()

// Функция возвращает признак того, что организация является обособленным
// подразделением выделенным на отдельный баланс
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, которая может быть обособленным подразделением
// 
// Возвращаемое значение:
//  Булево - Истина, если запись справочника предназначена для учета операций филиала
//           (обособленного подразделения, выделенного на отдельный баланс)
//
Функция ОбособленноеПодразделение(Организация) Экспорт
	
	ЭтоОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОбособленноеПодразделение");
	
	Если ЭтоОбособленноеПодразделение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭтоОбособленноеПодразделение;
	
КонецФункции // ОбособленноеПодразделение()

// Формирует список головных организаций предприятия
//
// Возвращаемое значение:
//	СписокЗначений - Список головных организаций в справочнике.
//
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка,
	                      |	Организации.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
						  |ГДЕ
						  |	Организации.ГоловнаяОрганизация = Организации.Ссылка
						  | ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Наименование");

	СписокОрганизаций = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

// Формирует список обособленных структурных подразделений организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой формируется список.
//
// Возвращаемое значение:
//	СписокЗначений - Список обособленных подразделений организации, выделенных на отдельный баланс.
//
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование  КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.Ссылка <> &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	СписокОП = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		СписокОП.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОП;

КонецФункции // ПолучитьСписокОбособленныхПодразделенийОрганизации()

// Функция ПолучитьБанковскийСчетПоУмолчанию возвращает ссылку на 
// банковский счет организации или контрагента по умолчанию.
//
// Параметры:
//	ЮрФизЛицо 	- СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Лицо, 
//					для которого возвращается банковский счет.
//	Валюта 		- СправочникСсылка.Валюты - Требуется для единообразия с БРУ и УП.
//
// Возвращаемое значение:
// 	СправочникСсылка.БанковскиеСчетаОрганизаций, СправочникСсылка.БанковскиеСчетаКонтрагентов - Основной банковский счет.
//
Функция ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо, Валюта = Неопределено) Экспорт

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрФизЛицо, Валюта);
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо, Валюта);
	Иначе
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	Возврат БанковскийСчет;

КонецФункции // ПолучитьБанковскийСчетПоУмолчанию()

// Функция СтруктураОрганизации возвращает структуру с реквизитами организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Проверяемая организация.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* Тип - Строка - Содержит значение "ОП", если организация является обособленным подразделением
//						 другой организации, или "Простая", если организация является самостоятельным юр.лицом.
//		* Организация - СписокЗначений - Список обособленных подразделений.
//		* ГоловнаяОрганизация - СписокЗначений - Ссылка на головную организацию.
//
Функция СтруктураОрганизации(Организация) Экспорт

	СписокОП = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация).Скопировать();
	СписокОП.Добавить(Организация.Ссылка);

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ГоловнаяОрганизация, ОбособленноеПодразделение");
	
	СписокГО = Новый СписокЗначений;
	СписокГО.Добавить(РеквизитыОрганизации.ГоловнаяОрганизация);
	
	Если РеквизитыОрганизации.ОбособленноеПодразделение Тогда
		ТипОрганизации = "ОП";
	Иначе
		ТипОрганизации = "Простая";
	КонецЕсли;
		
	СвойстваОрганизации = Новый Структура("Тип, Организация, ГоловнаяОрганизация", ТипОрганизации, СписокОП, СписокГО);
	
	Возврат СвойстваОрганизации;
	
КонецФункции // СтруктураОрганизации()

//-- НЕ УТ

// Возвращает перечень (массив) всех структурных частей переданной головной организации, имеющих отдельный баланс.
// В перечень входит головная организация и все ее обособленные подразделения на выделенном балансе.
// В перечень входят только те организации, данные по которым доступны текущему пользователю.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Исходная организация.
//
// Возвращаемое значение:
//	Массив - Головная организация и все ее обособленные подразделения, выделенные на отдельный баланс.
//
Функция ВсяОрганизация(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");

КонецФункции

// Функция строит текст запроса для получения наименования организации для печатных форм.
//
// Параметры:
//	ПолеОрганизация - Строка - Выражение языка запросов для выбора ссылки на организацию.
//
// Возвращаемое значение:
//	Строка - Выражение для получения полного наименования организации.
//
Функция ТекстЗапросаВариантНаименованияОрганизацииДляПечатныхФорм(ПолеОрганизация) Экспорт

	Возврат СтрЗаменить("Организация.НаименованиеПолное",
						"Организация",
						ПолеОрганизация);

КонецФункции // ТекстЗапросаВариантНаименованияОрганизацииДляПечатныхФорм()

//++ НЕ УТ

// Функция возвращает ставку налога на прибыль.
// 
// Параметры:
//	СтруктураШапкиДокумента - Структура - Содержит ключи:
//		* Организация - СправочникСсылка.Организации - Организация.
//		* Дата - Дата - Дата, на которую получается ставка.
//	ИФНС - СправочникСсылка.РегистрацииВНалоговомОргане - Налоговый орган.
//	СтавкаФБ - Число - Возвращается доля ставки (%) налога в федеральный бюджет.
//	СтавкаРФ - Число - Возвращается доля ставки (%) налога в бюджет субъекта федерации.
//	СтавкаМестный- Число - Возвращается доля ставки (%) налога в местный бюджет.
//
// Возвращаемое значение:
//	Число - Суммарная ставка налога на прибыль.
//
Функция ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента, ИФНС = Неопределено, СтавкаФБ = 0, СтавкаРФ = 0, СтавкаМестный = 0) Экспорт

	СтавкаНалога = 0;
	
	Возврат СтавкаНалога;

КонецФункции // ПолучитьСтавкуНалогаНаПрибыль()

//-- НЕ УТ

#КонецОбласти

#Область СведенияОбОрганизацииИлиКонтрагенте

// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Лицо, о котором собираются сведения.
//  Период - Дата - Дата, на которую выбираются сведения о ЮрФизЛице.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций, СправочникСсылка.БанковскиеСчетаКонтрагентов - счет, 
//					реквизиты которого выводятся.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, Период = '20200101', Знач БанковскийСчет = Неопределено) Экспорт

	Возврат ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ЮрФизЛицо, Период, Истина, БанковскийСчет);

КонецФункции // СведенияОЮрФизЛице()

// Функция возвращает ссылку на вид контактной информации EMAILКонтрагента.
//
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации - ссылка на вид контактной информации EMAILКонтрагента.
//
Функция ВидКонтактнойИнформацииEMAILКонтрагента() Экспорт
	
	Возврат Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	
КонецФункции

#КонецОбласти

#Область СвойстваПодразделения

// Возвращает структуру данных со сводным описанием контрагента.
//
// Параметры:
//  СписокСведений - СписокЗначений - Список значений со значениями параметров организации.
//   СписокСведений формируется функцией СведенияОЮрФизЛице.
//  Список         - Строка - Список запрашиваемых параметров организации.
//  СПрефиксом     - Булево - Признак выводить или нет префикс параметра организации.
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Возврат ФормированиеПечатныхФорм.ОписаниеОрганизации(СписокСведений, Список, СПрефиксом);
	
КонецФункции // ОписаниеОрганизации()

// Функция возвращает ссылку на пустое подразделение.
//
// Возвращаемое значение:
//	СправочникСсылка.СтруктураПредприятия - пустая ссылка подразделения.
//
Функция ПустоеПодразделение() Экспорт

	Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();

КонецФункции // ПустоеПодразделение()

//++ НЕ УТ

// Функция возвращает Истина, если переданное подразделение может быть выбрано для 
// указанной организации.
//
// Параметры:
//	Подразделение - СправочникСсылка.СтруктураПредприятия - Проверяемое подразделение.
//	Организация - СправочникСсылка.Организации - Проверяемая организация.
//
// Возвращаемое значение:
//	Булево - Результат проверки.
//                         
Функция ПодразделениеПринадлежитОрганизации(Подразделение, Организация) Экспорт

	Результат = Ложь;

	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Организация) Тогда
	
		ИмяРеквизитаВладелец = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
		Если ЗначениеЗаполнено(ИмяРеквизитаВладелец) Тогда
			РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаВладелец);
			Результат = (РеквизитыПодразделения[ИмяРеквизитаВладелец] = Организация);
		Иначе
			// Если для подразделения нет явно указанного владельца, то считаем, что любое подразделение может 
			// принадлежать любой организации.
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПодразделениеПринадлежитОрганизации()

// Функция возвращает организацию, соответствующую переданному подразделению.
// Если передан параметр ТекущаяВыбраннаяОрганизация и его значение не противоречит 
// соответствию подразделения и организации, то возвращает значение параметра ТекущаяВыбраннаяОрганизация.
//
// Параметры:
//	Подразделение - СправочникСсылка.СтруктураПредприятия - Проверяемое подразделение.
//	ТекущаяВыбраннаяОрганизация - СправочникСсылка.Организация - Проверяемая организация.
//
// Возвращаемое значение:
//	СправочникСсылка.Организации - Найденная организация для подразделения.
//
Функция ОрганизацияПодразделения(Подразделение, ТекущаяВыбраннаяОрганизация = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
		// Если нет явно заданного владельца, то оставляем текущую организацию.
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаОрганизации);
	Если ЗначениеЗаполнено(ТекущаяВыбраннаяОрганизация) 
		И РеквизитыПодразделения[ИмяРеквизитаОрганизации] = ТекущаяВыбраннаяОрганизация Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыПодразделения[ИмяРеквизитаОрганизации]) Тогда
		Возврат РеквизитыПодразделения[ИмяРеквизитаОрганизации];
	Иначе
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;

КонецФункции // ОрганизацияПодразделения()

// Функция строит текст запроса для получения полного наименования подразделения.
//
// Параметры:
//	ПолеПодразделение - Строка - Имя поля со ссылкой на подразделение.
//
// Возвращаемое значение:
//	Строка - Выражение для получения полного наименования подразделения.
// 
Функция ТекстЗапросаПолноеНаименованиеПодразделения(ПолеПодразделение) Экспорт

	Возврат ПолеПодразделение + ".Наименование";

КонецФункции

//-- НЕ УТ

#КонецОбласти
//++ НЕ УТ



//-- НЕ УТ

#Область НастройкиПользователей

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки, значение по умолчанию которой необходимо получить.
//  Пользователь - СправочникСсылка.Пользователи - пользователь программы, настройка которого
//				   запрашивается, если параметр не передается настройка возвращается для текущего пользователя.
//
// Возвращаемое значение:
//  Произвольный - Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт

	НастройкаВРег = ВРег(Настройка);
	НастройкаТипаСсылка = Ложь;

	Если НастройкаВРег = ВРег("ОсновнаяОрганизация") Тогда
		Возврат Справочники.Организации.ОрганизацияПоУмолчанию();
	ИначеЕсли НастройкаВРег = ВРег("ОсновноеПодразделениеОрганизации") Тогда
		ПустоеЗначение = ПустоеПодразделение();
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("ОсновнойСклад") Тогда
		ПустоеЗначение = Справочники.Склады.ПустаяСсылка();
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("РабочаяДата") Тогда
		// Для совместимости с предыдущими версиями.
		Возврат ОбщегоНазначения.РабочаяДатаПользователя(Пользователь);
	ИначеЕсли НастройкаВРег = ВРег("Подпись") Тогда
		ПустоеЗначение = НоваяПодпись();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(НастройкаВРег,,, Пользователь);

	Если ТипЗнч(ЗначениеНастройки) = ТипЗнч(ПустоеЗначение) Тогда
		Если НастройкаТипаСсылка Тогда
			Если НЕ ОбщегоНазначения.СсылкаСуществует(ЗначениеНастройки) Тогда
				ЗначениеНастройки = ПустоеЗначение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначениеНастройки = ПустоеЗначение;
	КонецЕсли;
	
	Возврат ?(ЗначениеНастройки = Неопределено, ПустоеЗначение, ЗначениеНастройки);

КонецФункции // ПолучитьЗначениеПоУмолчанию()

//++ НЕ УТ

// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - Вид настройки.
//  Значение     - Произвольный - Значение настройки.
//  Пользователь - СправочникСсылка.Пользователи - текущий пользователь программы, для которого устанавливается настройка.
//
Процедура УстановитьЗначениеПоУмолчанию(Настройка, Значение, Пользователь = Неопределено) Экспорт

	Если ВРег(Настройка) = ВРег("ОсновнаяОрганизация")
		ИЛИ ВРег(Настройка) = ВРег("ОсновноеПодразделениеОрганизации")
		ИЛИ ВРег(Настройка) = ВРег("ОсновнойСклад") Тогда

		ХранилищеОбщихНастроек.Сохранить(ВРег(Настройка),, Значение,, Пользователь);

	КонецЕсли;

КонецПроцедуры // УстановитьЗначениеПоУмолчанию()

//-- НЕ УТ

#КонецОбласти

#Область ПервичныеДокументы

// Определяет в целом для сеанса работы, может ли потребоваться рассчитывать,
// заполнять и отображать пользователю суммы НУ в проводках.
// 
// Обращение к функции следует выполнять через кеш повтоно используемых значений -
// см. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
// Она единообразно работает и с ПР/ВР, и с НУ.
// 
// Возвращаемое значение:
//  Булево - Истина, если может потребоваться использовать суммы НУ в проводках.
//
Функция ПользователюДоступныСуммыНУ() Экспорт
	
	Результат = Ложь;
	Возврат Результат;

КонецФункции

//++ НЕ УТ

// Определяет в контексте отдельных операций, отчетов и т.п., нужно ли рассчитывать,
// заполнять и отображать пользователю суммы разниц в проводках.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Период      - Дата - дата, на которую проверяется значение настройки;
//                если не заполнена, то проверяется наиболее поздняя
//  ДоступныйВидИспользованияСумм - Строка - максимально возможный.
//                                  См. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
// 
// Возвращаемое значение:
//   Строка - варианты использования разниц. См. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
//
Функция ИспользоватьСуммыНалогНаПрибыль(Организация, Период, ДоступныйВидИспользованияСумм = "") Экспорт
	
	// Никакие суммы кроме БУ не нужны ни одной организации из базы согласно типу учета.
	Если Не ПолучитьФункциональнуюОпцию("ПлательщикНалогаНаПрибыль") Тогда
		Возврат "НеИспользовать";
	КонецЕсли;
	
	Если ПустаяСтрока(ДоступныйВидИспользованияСумм) Тогда
		ДоступныйВидИспользованияСумм = БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль();
	КонецЕсли;
	Если Не БухгалтерскийУчетКлиентСервер.ИспользоватьСуммуНУ(ДоступныйВидИспользованияСумм) Тогда
		// Никакие суммы кроме БУ не нужны ни одной организации из базы согласно системе налогообложения.
		Возврат "НеИспользовать";
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период) Тогда
		// Никакие суммы кроме БУ не нужны данной организации согласно ее системе налогообложения.
		Возврат "НеИспользовать";
	КонецЕсли;

КонецФункции
//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяПодпись()
	
	Подпись = НСтр("ru='С уважением%1';uk='З повагою%1'");
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	ДанныеПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АвторизованныйПользователь, "Наименование, Служебный");
	Если ДанныеПользователя.Служебный Тогда
		ПредставлениеПользователя = ".";
		
	Иначе
		ПредставлениеПользователя = ", " + ДанныеПользователя.Наименование + ".";
		
	КонецЕсли;
	
	Подпись = СтрШаблон(Подпись, ПредставлениеПользователя);
	
	Возврат Подпись;
	
КонецФункции

#КонецОбласти

