////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки УправлениеТорговлей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "BASУправлениеТорговлей" + ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "Базовая", "");
	Если Метаданные.Имя = "BASУправлениеТорговлей" Тогда
	    Описание.Версия = "<<НомерВерсииBASУТ32>>";
	Иначе
		Описание.Версия = "3.5.13.2";
	КонецЕсли; 
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
    Описание.ИдентификаторИнтернетПоддержки = ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "BASTradeBase", "BASTrade");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт


#Область Справочники 

	Справочники.ВариантыАнализаЦелевыхПоказателей.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ВидыЗапасов.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ВидыНоменклатуры.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ВидыПланов.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ВидыЦен.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ГруппыФинансовогоУчетаНоменклатуры.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ГруппыФинансовогоУчетаРасчетов.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ДоговорыКонтрагентов.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ДоговорыКредитовИДепозитов.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ДоговорыМеждуОрганизациями.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.КлючиАналитикиУчетаНоменклатуры.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.КлючиАналитикиУчетаПартий.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.КлючиАналитикиУчетаПоПартнерам.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.КлючиРеестраДокументов.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.Контрагенты.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.Назначения.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.НаправленияДеятельности.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.НастройкиХозяйственныхОпераций.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.Номенклатура.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.Организации.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.Партнеры.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ПравилаИнтеграцииС1СДокументооборотом.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ПравилаРаспределенияРасходов.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ПриоритетыОплаты.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ПричиныОтменыЗаказовПоставщикам.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ПроверкиСостоянияСистемы.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.РолиИсполнителей.ОписаниеОбработчиковОбновления(Обработчики);
	Справочники.СоглашенияСКлиентами.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.СоглашенияСПоставщиками.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.СтавкиНДС.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.СтатьиДвиженияДенежныхСредств.ОписаниеОбработчиковОбновления(Обработчики);
	Справочники.СтатьиНалоговыхДеклараций.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.СтруктураПредприятия.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.СтруктураЦелей.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.УпаковкиЕдиницыИзмерения.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.ХарактеристикиНоменклатуры.ОписаниеОбработчиковОбновления(Обработчики); 
	Справочники.НаборыСтатейНалоговыхДеклараций.ОписаниеОбработчиковОбновления(Обработчики); 
	

	
#КонецОбласти	

#Область ПланыВидовХарактеристик 
	
	ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОписаниеОбработчиковОбновления(Обработчики); 
	ПланыВидовХарактеристик.СтатьиРасходов.ОписаниеОбработчиковОбновления(Обработчики); 

#КонецОбласти	

#Область РегистрыСведений 

	РегистрыСведений.АналитикаУчетаПартий.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.АналитикаУчетаПоПартнерам.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ВариантыПереупаковки.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ГрафикОплатКредитовИДепозитов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ГрафикПлатежей.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ГрафикТраншейКредитовИДепозитов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ДатыПоступленияТоваровОрганизаций.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ЗаданияКФормированиюИсходящихНалоговыхДокументов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ЗамещениеПланов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.НастройкаКонтроляОбеспечения.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.НастройкаПередачиТоваровМеждуОрганизациями.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.НастройкиАдресныхСкладов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.НастройкиСистемыНалогообложения.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.НастройкиУчетаЕН.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.НастройкиУчетаНДС.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.РеестрДокументов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.СостоянияИРеквизитыДоставки.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.СтоимостьТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.СуммыДокументовВВалютахУчета.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ТоварныеОграничения.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.УстаревшиеВидыЗапасовСОстатками.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.УчетнаяПолитикаФинансовогоУчета.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.ЦеныНоменклатурыПоставщиков.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыСведений.НаборыСтатейНалоговыхДеклараций.ОписаниеОбработчиковОбновления(Обработчики);
	

		
#КонецОбласти	
	
#Область РегистрыНакопления 

	РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ГрафикПоступленияТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДвижениеТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДвиженияДенежныхСредств.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДвиженияСерийТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДенежныеСредстваБезналичные.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДенежныеСредстваВКассахККМ.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДенежныеСредстваВПути.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДенежныеСредстваКВыплате.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДенежныеСредстваНаличные.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ЗаказыНаПеремещение.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ЗаказыНаСборку.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ЗаказыПоставщикам.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.Закупки.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.КнигаДоходовРасходовПоЕдиномуНалогу.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.КорректировкиНДСПартий.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ЛимитыРасходаДенежныхСредств.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.МатериалыИРаботыВПроизводстве.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.НДСНоменклатурныйСоставДляНалоговыхНакладных.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.НДСРасчетНалоговогоКредита.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.НДСРасчетНалоговыхОбязательств.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.НДСРеестрПолученныхНалоговыхДокументов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.НДСУсловныеПродажи.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ОбеспечениеЗаказов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ОбеспечениеЗаказовРаботами.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПартииЗатратНаВыпуск.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПартииПроизводственныхЗатрат.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПартииПрочихРасходов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПартииТоваровОрганизаций.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПланыЗакупок.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПланыОплатКлиентов.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПланыОплатПоставщикам.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПланыПотребленияКомплектующих.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПланыПродаж.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПланыПродажПоКатегориям.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПланыСборкиРазборки.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПрочиеАктивыПассивы.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПрочиеДоходы.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ПрочиеРасходы.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.РасчетыПоФинансовымИнструментам.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.РасчетыПоЭквайрингу.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.РасчетыСКлиентами.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.РасчетыСПоставщиками.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.СвободныеОстатки.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.СебестоимостьТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТоварыВЯчейках.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТоварыКОтбору.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТоварыКОтгрузке.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТоварыКОформлениюИзлишковНедостач.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТоварыКОформлениюТаможенныхДеклараций.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТоварыКПоступлению.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТоварыНаСкладах.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТоварыОрганизаций.ОписаниеОбработчиковОбновления(Обработчики); 
	РегистрыНакопления.ТоварыОрганизацийКПередаче.ОписаниеОбработчиковОбновления(Обработчики); 
	
	
	
	
	
#КонецОбласти	
	
#Область Документы 
	
	Документы.АвансовыйОтчет.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.АктВыполненныхРабот.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.АктОРасхожденияхПослеОтгрузки.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.АктОРасхожденияхПослеПеремещения.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.АктОРасхожденияхПослеПриемки.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВводОстатков.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВзаимозачетЗадолженности.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВнесениеДенежныхСредствВКассуККМ.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВнутреннееПотреблениеТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВозвратПодарочныхСертификатов.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВозвратТоваровМеждуОрганизациями.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВозвратТоваровОтКлиента.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВозвратТоваровПоставщику.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВыемкаДенежныхСредствИзКассыККМ.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВыкупВозвратнойТарыКлиентом.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ВыкупВозвратнойТарыУПоставщика.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ГрафикИсполненияДоговора.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ДоверенностьВыданная.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЗаданиеТорговомуПредставителю.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЗаданиеНаПеревозку.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЗаказКлиента.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЗаказНаВнутреннееПотребление.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЗаказНаПеремещение.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЗаказНаСборку.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЗаказПоставщику.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.КорректировкаНазначенияТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.КорректировкаНалоговогоНазначенияЗапасов.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.КорректировкаОбособленногоУчетаЗапасов.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.КорректировкаРегистров.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.НалоговаяНакладная.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.НачисленияКредитовИДепозитов.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОперацияПоПлатежнойКарте.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОприходованиеИзлишковТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОрдерНаОтражениеПорчиТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОтчетКомиссионера.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОтчетКомиссионераОСписании.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОтчетКомитенту.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОтчетКомитентуОСписании.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОтчетОРозничнойВыручке.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОтчетОРозничныхПродажах.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОтчетПоКомиссииМеждуОрганизациями.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПервичныйДокумент.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПередачаТоваровМеждуОрганизациями.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПеремещениеТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПересортицаТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПланЗакупок.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПланПродаж.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПланПродажПоКатегориям.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПланСборкиРазборки.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПоручениеЭкспедитору.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПорчаТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПоступлениеБезналичныхДенежныхСредств.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.Приложение2КНалоговойНакладной.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПриобретениеТоваровУслуг.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПриобретениеУслугПрочихАктивов.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПриходныйКассовыйОрдер.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПриходныйОрдерНаТовары.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ПрочееОприходованиеТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.РаспределениеРасходовБудущихПериодов.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.РасходныйКассовыйОрдер.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.РеализацияПодарочныхСертификатов.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.РеализацияТоваровУслуг.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.РеализацияУслугПрочихАктивов.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.РегистрацияВходящегоНалоговогоДокумента.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.СборкаТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.СверкаВзаиморасчетов.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.СписаниеБезналичныхДенежныхСредств.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.СписаниеЗадолженности.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.СписаниеНедостачТоваров.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ТаможеннаяДекларацияИмпорт.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ТранспортнаяНакладная.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.УдалитьКассоваяСмена.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЧекККМ.ОписаниеОбработчиковОбновления(Обработчики); 
	Документы.ЧекККМВозврат.ОписаниеОбработчиковОбновления(Обработчики); 
	
	
	
	
	
	
#КонецОбласти	

#Область ОбщиеМодули

	КоммерческиеПредложенияДокументыУТ.ОписаниеОбработчиковОбновления(Обработчики); 
	ОбновлениеИнформационнойБазыУТ.ОписаниеОбработчиковОбновления(Обработчики); 
	УправлениеДоступомУТ.ОписаниеОбработчиковОбновления(Обработчики); 
	РегламентированнаяОтчетность.ОписаниеОбработчиковОбновления(Обработчики); 

	Если Метаданные.ОбщиеМодули.Найти("ОбновлениеИнформационнойБазыУТПереопределяемый") <> Неопределено Тогда      
	    МодульУТ = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыУТПереопределяемый");
		МодульУТ.ОписаниеОбработчиковОбновления(Обработчики);
	КонецЕсли;

#КонецОбласти	


КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
// Подробнее см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
// 
// Параметры:
//   Итог	- Структура - передается в процедуру подсистемой БазоваяФункциональность.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОписаниеПодсистемы = Новый Структура("Имя, Версия, РежимВыполненияОтложенныхОбработчиков, ИдентификаторИнтернетПоддержки");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.5.4.400",
		"Роль.ОтчетыИОбработкиСупервайзераТорговыхПредставлителей",
		"Роль.ОтчетыИОбработкиСупервайзераТорговыхПредставителей",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.5.4.400",
		"Роль.РазделФинансовыйРезультатИКонтроллинг",
		"Роль.ПодсистемаФинансовыйРезультатИКонтроллинг",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.5.4.400",
		"Роль.ДобавлениеИзменениеАссортиментаИЦенПартнеров",
		"Роль.ДобавлениеИзменениеЦенПартнеров",
		ОписаниеПодсистемы.Имя);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.5.4.400",
		"Роль.ПропускКонтроляТоваровОрганизацийПриОтменеПриходов",
		"Роль.РазрешитьОтключениеКонтроляТоваровОрганизацийНаВремяСеанса",
		ОписаниеПодсистемы.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеПроцедурыОбновления

// Используется для записи движений
//
// Параметры:
//   МенеджерРегистра - РегистрыСведенийМенеджер - 
//   ИмяРегистра - Строка - имя регистра.
//   Ссылка  - ДокументСсылка - ссылка на документ.
//   ТаблицыДляДвижений - Массив - массив, содержащий таблицы значений с движениями, которые необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
//
Процедура ЗаписатьНаборЗаписей(МенеджерРегистра, ИмяРегистра, Ссылка, ТаблицыДляДвижений = Неопределено, РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт

	НаборЗаписей = МенеджерРегистра[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей - 
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	Если ТаблицыДляДвижений <> Неопределено Тогда
		НаборЗаписей.Загрузить(ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
	КонецЕсли; 
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, РегистрироватьНаУзлахПлановОбмена);
	
КонецПроцедуры

// Используется для записи движений
//
// Параметры:
//   МенеджерРегистров                 - Менеджер регистра .
//   ИменаРегистров                    - Массив - массив, содержащий имена регистров.
//   Ссылка                      	   - Ссылка - ссылка на документ.
//   ТаблицыДляДвижений                - Массив - массив, содержащий таблицы значений с движениями, которые необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
// 
Процедура ЗаписатьНаборыЗаписей(МенеджерРегистров, ИменаРегистров, Ссылка, ТаблицыДляДвижений = Неопределено, РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт

	Регистры = Новый Структура(ИменаРегистров);
	
	Для Каждого Регистр Из Регистры Цикл
		ЗаписатьНаборЗаписей(МенеджерРегистров, Регистр.Ключ, Ссылка, ТаблицыДляДвижений, РегистрироватьНаУзлахПлановОбмена);
	КонецЦикла;
	
КонецПроцедуры

/// Дополнительные параметры функции ПерезаписатьДвиженияИзОчереди()
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//      * ЭтоНезависимыйРегистрСведений - Булево - в параметре Данные функции передана таблица со значениями измерений,
//                                                 по которым нужно обновлять данные, Значение по умолчанию - ЛОЖЬ
//      * ИмяИзмеренияДляОтбора - Строка - имя измерения независимого регистра сведений, по которому будет установлен
//                                          отбор для перезаписи набора записей по документу (аналог регистратора для
//                                          регистров, подчиненных регистраторам).
//      * ОбновляемыеДанные - ТаблицаЗначений - данные, которые необходимо обновить.
//
Функция ДополнительныеПараметрыПерезаписиДвиженийИзОчереди() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений",Ложь);
	ДополнительныеПараметры.Вставить("ИмяИзмеренияДляОтбора","");
	ДополнительныеПараметры.Вставить("ПоляУпорядочивания", Новый Массив);
	ДополнительныеПараметры.Вставить("Менеджер", Неопределено);
	ДополнительныеПараметры.Вставить("НужнаДополнительнаяОбработкаЗаписей", Ложь);
	ДополнительныеПараметры.Вставить("ЗаписыватьВОднойТранзакции", Ложь);
	ДополнительныеПараметры.Вставить("ОбновляемыеДанные");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// На основе данных о необходимости переформирования движений перезаписывает движения документа.
//	Для работы функции необходимо, чтобы процедура ИнициализироватьДанныеДокумента модуля менеджера документа, поддерживала параметр Регистры.
//	см. например, Документ.ПриходныйОрдерНаТовары.ИнициализироватьДанныеДокумента.
//
// Параметры:
//  ПолныеИменаДокументов				 - Строка, Массив, Неопределено - имя документа, по которому нужно переформировать движения. Например, "Документ.ПриходныйОрдерНаТовары"
//																Если документов несколько, то нужно передать их имена в массиве.
//																При обработке независимого регистра сведений нужно передать Неопределено.
//  ПолныеИменаРегистров				 - Строка, Массив - имя регистра, по которому нужно переформировать движения. Например, "РегистрНакопления.ТоварыНаСкладах"
//																Если регистров несколько, то их имена нужно передать в массиве.
//  Очередь								 - Число - очередь отложенной обработки данных для контроля данных на предмет блокировки другими обработчиками
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди().
// 
// Возвращаемое значение:
//  Булево - ИСТИНА, если обработка всех движений завершена.
//
Функция ПерезаписатьДвиженияИзОчереди(ПолныеИменаДокументов, ПолныеИменаРегистров, Очередь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	КонецЕсли;
	
	ЕстьЕщеРабота = Ложь;
	ЭтоНезависимыйРегистрСведений = ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений;
	ОбновляемыеДанные = ДополнительныеПараметры.ОбновляемыеДанные;
	ЕстьОбновляемыеДанные = ОбновляемыеДанные <> Неопределено;
	ИмяПоляРегистратор = ?(ЭтоНезависимыйРегистрСведений, ДополнительныеПараметры.ИмяИзмеренияДляОтбора, "Регистратор");
	Регистры = ИменаРегистровВМассив(ПолныеИменаРегистров);
	СписокДокументов = ИменаДокументовВМассив(ПолныеИменаДокументов,
		ЭтоНезависимыйРегистрСведений,
		ЕстьОбновляемыеДанные);
	
	Для Каждого ПолноеИмяДокумента Из СписокДокументов Цикл
		Если Не ЭтоНезависимыйРегистрСведений И Не ЕстьОбновляемыеДанные Тогда
			Если ДополнительныеПараметры.Менеджер = Неопределено Тогда
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяДокумента);
			Иначе
				МенеджерДокумента = ДополнительныеПараметры.Менеджер;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ПолноеИмяРегистра Из Регистры Цикл
			ИмяРегистра = СтрРазделить(ПолноеИмяРегистра,".",Ложь)[1];
			МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра); // РегистрСведенийМенеджер - 
			
			Если ЕстьОбновляемыеДанные Тогда
				ВыборкаПоРегистраторам = Неопределено;
			Иначе
				ДополнительныеПараметрыДляОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
				
				Если ЭтоНезависимыйРегистрСведений Тогда
					ДополнительныеИсточникиДанных = Новый Соответствие;
					ДополнительныеИсточникиДанных.Вставить(ИмяПоляРегистратор);
					ДополнительныеПараметрыДляОбработки.ДополнительныеИсточникиДанных = ДополнительныеИсточникиДанных;
					ДополнительныеПараметрыДляОбработки.ПоляУпорядочивания = ДополнительныеПараметры.ПоляУпорядочивания;
					ВыборкаПоРегистраторам = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
						Очередь,
						ПолноеИмяРегистра,
						ДополнительныеПараметрыДляОбработки);
				Иначе
					Источники = МенеджерДокумента.ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра);
					ДополнительныеПараметрыДляОбработки.ДополнительныеИсточникиДанных = Источники;
					ВыборкаПоРегистраторам = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
						Очередь,
						ПолноеИмяДокумента,
						ПолноеИмяРегистра,
						ДополнительныеПараметрыДляОбработки);
				КонецЕсли;
			КонецЕсли;
			
			Если ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			ПараметрыВыборки = НовыеПараметрыВыборки();
			
			Пока СледующаяВыборкаИлиСтрокаТаблицыЗначений(ВыборкаПоРегистраторам, ОбновляемыеДанные, ПараметрыВыборки) Цикл
				
				Если Не ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
					НачатьТранзакцию();
				КонецЕсли;
				
				Попытка
					
					// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
					Блокировка = Новый БлокировкаДанных;
					
					ЭлементБлокировки = Блокировка.Добавить(ВыборкаПоРегистраторам[ИмяПоляРегистратор].Метаданные().ПолноеИмя());
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					
					Блокировка.Заблокировать();
					
					НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей - 
					НаборЗаписей.Отбор[ИмяПоляРегистратор].Установить(ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					
					Если ЭтоНезависимыйРегистрСведений Или ЕстьОбновляемыеДанные Тогда
						МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					КонецЕсли;
					
					Если ЭтоНезависимыйРегистрСведений Тогда
						ЗаписатьДвижения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоРегистраторам[ИмяПоляРегистратор], ИмяПоляРегистратор) <> Неопределено;
					Иначе
						ЗаписатьДвижения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоРегистраторам[ИмяПоляРегистратор], "Проведен"); //ответственное чтение реквизита "Проведен"
					КонецЕсли;
					
					Если ТипЗнч(ЗаписатьДвижения) <> Тип("Булево") Тогда
						ЗаписатьДвижения = Ложь;
					КонецЕсли;
					
					Если ЗаписатьДвижения Тогда
						
						ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(
							ВыборкаПоРегистраторам[ИмяПоляРегистратор], ИмяРегистра);
						ТаблицаДанных = ТаблицыДляДвижений["Таблица" + ИмяРегистра];
						
						Если ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей Тогда
							НаборЗаписей.ЗагрузитьСОбработкой(ТаблицаДанных);
						Иначе
							НаборЗаписей.Загрузить(ТаблицаДанных);
						КонецЕсли;
						
					КонецЕсли;
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
					
					Если Не ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
						ЗафиксироватьТранзакцию();
					КонецЕсли;	
					
				Исключение
					
					ОтменитьТранзакцию();
					
					ТекстСообщения = НСтр("ru='Не удалось перезаписать движения в регистр %ИмяРегистра% по документу %Ссылка% по причине: %Причина%';uk='Не вдалося перезаписати рухи в регістр %ИмяРегистра% по документу %Ссылка% по причині: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						ВыборкаПоРегистраторам[ИмяПоляРегистратор].Метаданные(), ВыборкаПоРегистраторам[ИмяПоляРегистратор], ТекстСообщения);
						
					Если ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
						Возврат Ложь;
					КонецЕсли;
					
				КонецПопытки;
			
			КонецЦикла;
			
			Если ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
				Попытка
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					ТекстСообщения = НСтр("ru='Не удалось зафиксировать транзакцию записи движения в регистр %ИмяРегистра% по причине: %Причина%';uk='Не вдалося зафіксувати транзакцію записи руху в регістр% ІмяРегістра% через:% Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
												УровеньЖурналаРегистрации.Предупреждение,
												Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра),
												,
												ТекстСообщения);
						
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;	
			
			
			Если Не ЕстьЕщеРабота
				И ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Очередь, ПолноеИмяРегистра) Тогда 
				ЕстьЕщеРабота = Истина;
			КонецЕсли;
			Если ЭтоНезависимыйРегистрСведений Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ВсеСделано = Не ЕстьЕщеРабота;
	Возврат ВсеСделано;
	
КонецФункции

// Адаптирует запрос механизма проведения для использования в функции ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения,
// делая его запросом для всех проведенных документов.
// Параметры:
//  ИзначальныйТекстЗапроса - Строка - текст запроса механизма проведения, который или формирует таблицу движений, или
//                                     создает временные таблицы,
//												используемые в запросах формирующих таблицы движений
//												Требования к тексту запроса:
//												- все объединяемые таблицы запроса, формирующего таблицу движений имеют один синоним;
//												- если есть соединения с другими таблицами, то оно реализовано таким образом, что будет
//													корректно работать, если не установлен отбор по ссылке;
//												- не используются временные таблицы;
//												- не используются вложенные запросы и группировки;
//												- нет упорядочивания;
//												- параметры запроса рассчитываются или по данным шапки, или являются значениями констант;
// 												- для всех полей непримитивных типов заполнены значения по умолчанию, как они хранятся в регистре.
//													Это или пустая ссылка типа, или НЕОПРЕДЕЛЕНО (для полей составного типа), то НЕ должно быть NULL
//												- параметр, устанавливающий отбор по ссылке называется &Ссылка
//												- в конце запроса не должно быть знака ";"
// 												- в тексте запроса, формирующим таблицу движения, должны выбираться только ЗНАЧИМЫЕ
//													для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.);
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  СинонимТаблицыДокумента			 - Строка - синоним таблицы документа, используемый в запросе
//  ПереопределениеРасчетаПараметров - Структура - по умолчанию все параметры, которые есть в запросе заменяются на <СинонимТаблицыДокумента>.Ссылка.<ИмяПараметра>
//  												Для параметра &Период по умолчанию подставляется <СинонимТаблицыДокумента>.Ссылка.Дата
//  												Если параметры рассчитываются иначе, то в этой структуре в ключе передается имя параметра, в значении
//													- выражение для его расчета
//  ТекстыЗапросаВременныхТаблиц     - Соответствие - тексты запросов временных таблиц, используемых в тексте запроса
//                                                    механизма проведения.
//													  Ключ соответствия - имя временной таблицы, Значение - текст запроса временной таблицы.
//													  Параметр необходимо использовать когда механизм формирования движений опирается не на
//													  физическую таблицу документа, а на предварительно созданную временную таблицу.
//													  Поля выборки временной таблицы должны содержать поле "Ссылка" - ссылку на физическую таблицу проводимого документа.
//													  Вложенные временные таблицы не поддерживаются.
//
// Возвращаемое значение:
//  ИзначальныйТекстЗапроса - строка - адаптированный текст запроса.
//
Функция АдаптироватьЗапросМеханизмаПроведения(Знач ИзначальныйТекстЗапроса,
														ПолноеИмяДокумента,
														СинонимТаблицыДокумента,
														ПереопределениеРасчетаПараметров = Неопределено,
														ТекстыЗапросаВременныхТаблиц = Неопределено) Экспорт
														
	Если ПереопределениеРасчетаПараметров = Неопределено Тогда
		ПереопределениеРасчетаПараметров = Новый Структура;
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	ТаблицаДокументаОбновлениеИБ.Ссылка КАК Регистратор,");
				
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
										"ГДЕ",
										"
										|ГДЕ
										|	ТаблицаДокументаОбновлениеИБ.Ссылка.Проведен
										|	И ");
	
	Если ТекстыЗапросаВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			Для Каждого ДругойЭлемент Из ТекстыЗапросаВременныхТаблиц Цикл
				
				Если Элемент.Ключ <> ДругойЭлемент.Ключ Тогда
					
					Если СтрНайти(ДругойЭлемент.Значение, Элемент.Ключ) <> 0 Тогда
						ВызватьИсключение НСтр("ru='Адаптированный текст запроса. Вложенные временные таблицы не поддерживаются.';uk='Адаптований текст запиту. Вкладені тимчасові таблиці не підтримуються.'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			ПервыйСимвол = СтрНайти(Элемент.Значение, "ПОМЕСТИТЬ");
			ПоследнийСимвол = СтрНайти(Элемент.Значение, Элемент.Ключ, НаправлениеПоиска.СНачала, ПервыйСимвол) + СтрДлина(Элемент.Ключ);
			ПодстановкаПоиска = Сред(Элемент.Значение, ПервыйСимвол, ПоследнийСимвол - ПервыйСимвол);
			ПодстановкаВременнойТаблицы = СтрЗаменить(Элемент.Значение, ПодстановкаПоиска, "");
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса, Элемент.Ключ, "(" + ПодстановкаВременнойТаблицы + ")");
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,СинонимТаблицыДокумента,"ТаблицаДокументаОбновлениеИБ");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Ссылка = &Ссылка","ИСТИНА");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИзначальныйТекстЗапроса;
	
	// Параметры запроса нужно упорядочить по наименованию в обратном порядке,
	// т.к. их имена могут начинаться одинаково, например, "Номер", "НомерНаПечать".
	ПараметрыЗапроса = Новый СписокЗначений;
	Для каждого ПараметрЗапроса Из Запрос.НайтиПараметры() Цикл
		ПараметрыЗапроса.Добавить(ПараметрЗапроса.Имя);
	КонецЦикла; 
	ПараметрыЗапроса.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		
		ТекстЗамены = Неопределено;
		
		Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Значение) Тогда
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Значение];
			ТекстЗамены = СтрЗаменить(ТекстЗамены, СинонимТаблицыДокумента, "ТаблицаДокументаОбновлениеИБ");
		ИначеЕсли Параметр.Значение = "Ссылка" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка";
		ИначеЕсли Параметр.Значение = "Период" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка.Дата";
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Значение) <> Неопределено
			ИЛИ Параметр.Значение = "Проведен"
			ИЛИ Параметр.Значение = "ПометкаУдаления"
			ИЛИ Параметр.Значение = "Номер"
			ИЛИ Параметр.Значение = "Дата" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка." + Параметр.Значение;
		КонецЕсли;	
		
		Если ТекстЗамены <> Неопределено Тогда
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"&" + Параметр.Значение, ТекстЗамены);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ИзначальныйТекстЗапроса;
	
КонецФункции

// Адаптирует запрос механизма проведения по независимому регистру.
// Результат функции используется в ДанныеНезависимогоРегистраДляПерепроведения().
//
// Параметры:
//  ИзначальныйТекстЗапроса			 - Строка - текст запроса механизма проведения, который формирует таблицу движений.
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  СинонимТаблицыДокумента			 - Строка - синоним таблицы документа, используемый в запросе
//  ВЗапросеЕстьИсточник			 - Булево - Истина, если в запросе описан источник
//  ПереопределениеРасчетаПараметров - Структура - по умолчанию все параметры, которые есть в запросе заменяются на <СинонимТаблицыДокумента>.Ссылка.<ИмяПараметра>
//  												Для параметра &Период по умолчанию подставляется <СинонимТаблицыДокумента>.Ссылка.Дата
//  												Если параметры рассчитываются иначе, то в этой структуре в ключе передается имя параметра, в значении - выражение для его расчета.
//  ТекстыЗапросаВременныхТаблиц     - Соответствие - тексты запросов временных таблиц, используемых в тексте запроса
//                                                    механизма проведения.
//													  Ключ соответствия - имя временной таблицы, Значение - текст запроса временной таблицы.
//													  Параметр необходимо использовать когда механизм формирования движений опирается не на
//													  физическую таблицу документа, а на предварительно созданную временную таблицу.
//													  Поля выборки временной таблицы должны содержать поле "Ссылка" - ссылку на физическую таблицу проводимого документа.
//													  Вложенные временные таблицы не поддерживаются.
// 
// Возвращаемое значение:
//  Строка - адаптированный текст запроса, который может выполняться для всех документов.
//
Функция АдаптироватьЗапросПроведенияПоНезависимомуРегистру(Знач ИзначальныйТекстЗапроса,
														ПолноеИмяДокумента,
														СинонимТаблицыДокумента,
														ВЗапросеЕстьИсточник,
														ПереопределениеРасчетаПараметров = Неопределено,
														ТекстыЗапросаВременныхТаблиц = Неопределено) Экспорт
	
	Если ПереопределениеРасчетаПараметров = Неопределено Тогда
		ПереопределениеРасчетаПараметров = Новый Структура;
	КонецЕсли;
	
	Если НЕ ВЗапросеЕстьИсточник Тогда                   
		
		ИзначальныйТекстЗапроса = ИзначальныйТекстЗапроса + "
		|ИЗ
		|	" + ПолноеИмяДокумента + " КАК ТаблицаДокументаОбновлениеИБ";
		
	КонецЕсли;
	
	Если ТекстыЗапросаВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			Для Каждого ДругойЭлемент Из ТекстыЗапросаВременныхТаблиц Цикл
				
				Если Элемент.Ключ <> ДругойЭлемент.Ключ Тогда
					
					Если СтрНайти(ДругойЭлемент.Значение, Элемент.Ключ) <> 0 Тогда
						ВызватьИсключение НСтр("ru='Адаптированный текст запроса. Вложенные временные таблицы не поддерживаются.';uk='Адаптований текст запиту. Вкладені тимчасові таблиці не підтримуються.'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			ПервыйСимвол 				= СтрНайти(Элемент.Значение, "ПОМЕСТИТЬ");
			ПоследнийСимвол 			= СтрНайти(Элемент.Значение, Элемент.Ключ, НаправлениеПоиска.СНачала, ПервыйСимвол)
											+ СтрДлина(Элемент.Ключ);
			ПодстановкаПоиска 			= Сред(Элемент.Значение, ПервыйСимвол, ПоследнийСимвол - ПервыйСимвол);
			ПодстановкаВременнойТаблицы = СтрЗаменить(Элемент.Значение, ПодстановкаПоиска, "");
			ИзначальныйТекстЗапроса 	= СтрЗаменить(ИзначальныйТекстЗапроса,
														Элемент.Ключ,
														"(" + ПодстановкаВременнойТаблицы + ")");
		КонецЦикла;
		
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,СинонимТаблицыДокумента,"ТаблицаДокументаОбновлениеИБ");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Ссылка = &Ссылка","ИСТИНА");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Комментарий",
		"ВЫРАЗИТЬ(ТаблицаДокументаОбновлениеИБ.Ссылка.Комментарий КАК Строка (100))");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИзначальныйТекстЗапроса;
	
	// Параметры запроса нужно упорядочить по наименованию в обратном порядке,
	// т.к. их имена могут начинаться одинаково, например, "Номер", "НомерНаПечать".
	ПараметрыЗапроса = Новый СписокЗначений;
	Для каждого ПараметрЗапроса Из Запрос.НайтиПараметры() Цикл
		ПараметрыЗапроса.Добавить(ПараметрЗапроса.Имя);
	КонецЦикла; 
	ПараметрыЗапроса.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		
		ТекстЗамены = Неопределено;
		
		Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Значение) Тогда
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Значение];
			ТекстЗамены = СтрЗаменить(ТекстЗамены, СинонимТаблицыДокумента, "ТаблицаДокументаОбновлениеИБ");
		ИначеЕсли Параметр.Значение = "НомерНаПечать" Тогда
			ТекстЗамены = """""";
		ИначеЕсли Параметр.Значение = "Ссылка" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка";
		ИначеЕсли Параметр.Значение = "Комментарий" Тогда
			ТекстЗамены = "ВЫРАЗИТЬ(ТаблицаДокументаОбновлениеИБ.Ссылка.Комментарий КАК Строка (100))";
		ИначеЕсли Параметр.Значение = "Период" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка.Дата";
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Значение) <> Неопределено 
			ИЛИ Параметр.Значение = "Проведен"
			ИЛИ Параметр.Значение = "ПометкаУдаления"
			ИЛИ Параметр.Значение = "Номер"
			ИЛИ Параметр.Значение = "Дата" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка." + Параметр.Значение;
		КонецЕсли;	
		
		Если ТекстЗамены <> Неопределено Тогда
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"&" + Параметр.Значение, ТекстЗамены);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзначальныйТекстЗапроса;
	
КонецФункции

// Результат адаптации запроса для функции ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения.
// 
// Возвращаемое значение:
//  Структура - поля:
//	* ТекстЗапроса - Строка - должен быть объявлен обязательно, адаптированный текст запроса
//	* ЗначенияПараметров - Структура - значения параметров запроса, которые вычисляются из констант
//										(не зависят от конкретного документа).
//
Функция РезультатАдаптацииЗапроса() Экспорт
	
	РезультатАдаптацииЗапроса = Новый Структура;
	РезультатАдаптацииЗапроса.Вставить("ТекстЗапроса");
	РезультатАдаптацииЗапроса.Вставить("ЗначенияПараметров", Новый Структура);
	
	Возврат РезультатАдаптацииЗапроса;
КонецФункции

// Выбирает регистраторы, по которым движения записанные в регистр отличаются от тех, которые формируются запросом
// механизма проведения Параметры:
//  РезультатАдаптацииЗапроса - Структура - см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса 
// 												Требования к запросам:
// 												- текст не должен содержать обращения к временным таблицам
//												- все запросы должны быть адаптированы для выборки без отбора по ссылке.
//													это можно сделать  с помощью функции ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения, 
//													 если текст запроса удовлетворяет ее условиям. Если нет - можно попробовать адаптировать текст самостоятельно
// 												- в тексте запроса, формирующим таблицу движения, должны выбираться только ЗНАЧИМЫЕ
//													для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.);
// 												- нет упорядочивания; 
// 												- есть поле "Регистратор"; 
//  ПолноеИмяРегистра				 - Строка - полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков).
//
// Возвращаемое значение:
//  Регистраторы - Массив - массив ссылок на документы, по которым нужно переформировать движения по регистру.
//
Функция РегистраторыДляПерепроведения(РезультатАдаптацииЗапроса,
										ПолноеИмяРегистра,
										ПолноеИмяДокумента) Экспорт
	
	Очередь = Неопределено;
	ТекстЗапросаФормированияДвижений = РезультатАдаптацииЗапроса.ТекстЗапроса;
	ЗначенияПараметров = РезультатАдаптацииЗапроса.ЗначенияПараметров;
	
	ТекстРезультирующегоЗапроса	= "";
	
	ЧастиИмениРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь);
	
	ТипРегистра = ЧастиИмениРегистра[0];
	ИмяРегистра = ЧастиИмениРегистра[1];
	
	Если ТипРегистра = "РегистрНакопления"
		Или ТипРегистра = "РегистрСведений" Тогда
		МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
	Иначе
		ТекстИсключения = НСтр("ru='Функция пока не поддерживает работу с регистрами типа %ТипРегистра%.';uk='Функція поки не підтримує роботу з регістрами типу %ТипРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ТипРегистра%", ТипРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	ТекстРегистра = 
	"ВЫБРАТЬ";
	
	ТекстВыборкиСуммирующегоЗапроса =
	"ВЫБРАТЬ";
	ТекстГруппировкиСуммирующегоЗапроса = "
	|СГРУППИРОВАТЬ ПО";	
	ТекстУсловияСуммирующегоЗапроса = "
	|ИМЕЮЩИЕ
	|	ЛОЖЬ";	
	
	Если ТипРегистра = "РегистрСведений" Тогда
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ВЫБРАТЬ",
											"ВЫБРАТЬ
											|	1 КАК КонтрольноеПолеОбновлениеИБ,");
		ТекстРегистра = СтрЗаменить(ТекстРегистра,
											"ВЫБРАТЬ",
											"ВЫБРАТЬ
											|	-1,");
		ТекстВыборкиСуммирующегоЗапроса = СтрЗаменить(ТекстВыборкиСуммирующегоЗапроса,
											"ВЫБРАТЬ",
											"ВЫБРАТЬ
											|	СУММА(КонтрольноеПолеОбновлениеИБ) КАК КонтрольноеПолеОбновлениеИБ,");
		ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
		| ИЛИ СУММА(КонтрольноеПолеОбновлениеИБ) <> 0";
	КонецЕсли;				
	
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаФормированияДвижений);
	
	Запрос = СхемаЗапроса.ПакетЗапросов[0];
	
	ВсеКолонки = Новый Массив;
	
	Для каждого Колонка Из Запрос.Колонки Цикл
		
		ВсеКолонки.Добавить(Колонка.Псевдоним);
		
		Если ТипРегистра = "РегистрНакопления"
			И МетаданныеРегистра.Ресурсы.Найти(Колонка.Псевдоним) <> Неопределено Тогда		
			
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Колонка.Псевдоним + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	СУММА(ВложенныйЗапрос." + Колонка.Псевдоним + ") КАК " + Колонка.Псевдоним + ",";
			
			ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
			|	ИЛИ СУММА(ВложенныйЗапрос." + Колонка.Псевдоним + ") <> 0";
			
		ИначеЕсли Не Колонка.Псевдоним = "КонтрольноеПолеОбновлениеИБ" Тогда
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Колонка.Псевдоним + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	ВложенныйЗапрос." + Колонка.Псевдоним + " КАК " + Колонка.Псевдоним + ",";
			
			ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
			|	ВложенныйЗапрос." + Колонка.Псевдоним + ",";
		КонецЕсли;
				
	КонецЦикла;
	
	ТекстВставкиЗапросФормирующийДвижения = "";
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл		
		
		Если ВсеКолонки.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Измерение.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
		|	ВложенныйЗапрос." + Измерение.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл		
		
		Если ВсеКолонки.Найти(Ресурс.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") КАК " + Ресурс.Имя + ",";
			
			ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
			|	ИЛИ СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") <> 0";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	0 КАК " + Ресурс.Имя + ",";
		Иначе	
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	ВложенныйЗапрос." + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
			|	ВложенныйЗапрос." + Ресурс.Имя + ",";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	&ПустоеЗначение" + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ЗначенияПараметров.Вставить("ПустоеЗначение" + Ресурс.Имя, Ресурс.Тип.ПривестиЗначение());
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл		
		
		Если ВсеКолонки.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Реквизит.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
		|	ВложенныйЗапрос." + Реквизит.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	ТекстРегистра = Лев(ТекстРегистра, СтрДлина(ТекстРегистра) - 1);
	ТекстВыборкиСуммирующегоЗапроса = Лев(ТекстВыборкиСуммирующегоЗапроса, СтрДлина(ТекстВыборкиСуммирующегоЗапроса) - 1);
	ТекстГруппировкиСуммирующегоЗапроса = Лев(ТекстГруппировкиСуммирующегоЗапроса, СтрДлина(ТекстГруппировкиСуммирующегоЗапроса) - 1);
	
	Если Не ПустаяСтрока(ТекстВставкиЗапросФормирующийДвижения) Тогда
		ТекстВставкиЗапросФормирующийДвижения = Лев(ТекстВставкиЗапросФормирующийДвижения, СтрДлина(ТекстВставкиЗапросФормирующийДвижения) - 1);
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ИЗ",
											",
											|" +ТекстВставкиЗапросФормирующийДвижения + "
											|ИЗ");
	КонецЕсли;
			
	ТекстРегистра = ТекстРегистра + "
	|ИЗ
	|	" + ПолноеИмяРегистра + " КАК ТаблицаРегистра";
	
	Если Очередь <> Неопределено Тогда
		ТекстРегистра = ТекстРегистра + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПолноеИмяРегистра + ".Изменения КАК РегистраторыКОбработке
		|		ПО ТаблицаРегистра.Регистратор = РегистраторыКОбработке.Регистратор
		|			И (РегистраторыКОбработке.Узел = &ТекущаяОчередь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
		|		ПО ТаблицаРегистра.Регистратор = ВТЗаблокированоРегистратор.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
		|		ПО ТаблицаРегистра.Регистратор = ВТЗаблокированоСсылка.Ссылка";
	КонецЕсли;
	
	ТекстРегистра = ТекстРегистра + "
	|ГДЕ
	|	ТаблицаРегистра.Регистратор ССЫЛКА " + ПолноеИмяДокумента;
	
	Если Очередь <> Неопределено Тогда
		ТекстРегистра = ТекстРегистра + "
		|	И ВТЗаблокированоРегистратор.Регистратор ЕСТЬ NULL 
		|	И ВТЗаблокированоСсылка.Ссылка ЕСТЬ NULL ";
	КонецЕсли;
	
	ТекстРезультирующегоЗапроса = ТекстРезультирующегоЗапроса + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Регистратор КАК Регистратор
	|ИЗ
	|(" + ТекстВыборкиСуммирующегоЗапроса + "
	|ИЗ
	|	("
	+ ТекстЗапросаФормированияДвижений 
	+ "
	|ОБЪЕДИНИТЬ ВСЕ
	|" 
	+ ТекстРегистра
	+ ") КАК ВложенныйЗапрос "
	+ ТекстГруппировкиСуммирующегоЗапроса
	+ ТекстУсловияСуммирующегоЗапроса + ") КАК НеправильныеДвижения";
	
	ЗапросВыборки = Новый Запрос;
	
	Для Каждого Параметр Из ЗначенияПараметров Цикл
		
		ЗапросВыборки.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	Если Очередь <> Неопределено Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяДокумента, МенеджерВременныхТаблиц);
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяРегистра, МенеджерВременныхТаблиц);
	
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВТЗаблокированоРегистратор","ВТЗаблокировано" + ИмяРегистра);
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВТЗаблокированоСсылка","ВТЗаблокировано" + СтрРазделить(ПолноеИмяДокумента,".")[1]);
	
		ЗапросВыборки.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ЗапросВыборки.УстановитьПараметр("ТекущаяОчередь", ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь));
		
	КонецЕсли;
	
	ЗапросВыборки.Текст = ТекстРезультирующегоЗапроса;
	
	Регистраторы = ЗапросВыборки.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Возврат Регистраторы;
КонецФункции

// Выбирает документы, по которым движения записанные в регистр отличаются от тех, которые формируются запросом
// механизма проведения. Используется для независимых регистров сведений, например, РеестрДокументов, ДокументыПоОС, ДокументыПоНМА.
//
// Параметры:
//  РезультатАдаптацииЗапроса	 - Структура - см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса.
//  ПолноеИмяРегистра			 - Строка	 - полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//  ПолноеИмяДокумента			 - Строка	 - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  НеиспользуемыеПоля			 - Массив	 - Список полей, по которым не требуется проверять совпадение данных.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Содержит колонку "Ссылка".
//
Функция ДанныеНезависимогоРегистраДляПерепроведения(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля = Неопределено) Экспорт
	
	ЗапросВыборки = ЗапросРазличийОтраженияДокументовВНезависимомРегистре(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля);
	
	ТекстЗапроса = ЗапросВыборки.Текст;
	
	ТекстЗапроса = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Ссылка КАК Ссылка
	|ИЗ
	|(" + ТекстЗапроса + ") КАК НеправильныеДвижения";

	ЗапросВыборки.Текст = ТекстЗапроса;
	
	ДанныеРегистра = ЗапросВыборки.Выполнить().Выгрузить();
	
	Возврат ДанныеРегистра;

КонецФункции

// Сообщает пользователю, работа с формой временно ограничена, т.к. не завершен переход на новую версию программы.
//
Процедура СообщитьЧтоРаботаСФормойВременноОграничена() Экспорт

	ТекстСообщения = НСтр("ru='Работа с формой временно ограничена, так как выполняется переход на новую версию программы. Это плановый процесс, он не мешает работе в информационной базе и скоро завершится. Если у вас возникли сложности - обратитесь к администратору или в службу поддержки.';uk='Робота з формою тимчасово обмежена, так як виконується перехід на нову версію програми. Це плановий процес, він не заважає роботі в інформаційній базі і скоро завершиться. Якщо у вас виникли складності - зверніться до адміністратора або в службу підтримки.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	
КонецПроцедуры

// Сообщает пользователю, что работа с формой временно ограниченна, т.к. не завершены процедуры обновления ИБ по объекту
// метаданных.
//
// Параметры:
//  ПолноеИмяМетаданныхОбъекта	 - Строка	 - полное имя объекта метаданных, по которому обновление ИБ должно быть завершено. 
//
Процедура ПроверитьВозможностьОткрытияФормы(ПолноеИмяМетаданныхОбъекта) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ПолноеИмяМетаданныхОбъекта) Тогда
		СообщитьЧтоРаботаСФормойВременноОграничена();
	КонецЕсли;

КонецПроцедуры

// Сообщает пользователю, что работа с журналом документов временно ограниченна, т.к. не завершена процедура обновления
// РС РеестрДокументов в разрезе используемых документов журнала.
//
// Параметры:
//  ТипыДокументов - Массив - список типов документов, по которым обновление РС должно быть завершено.
//
Процедура ПроверитьВозможностьОткрытияЖурналаДокументов(ТипыДокументов) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
		Если Не ЭтоПодчиненныйУзелРИБ Тогда
			Возврат;
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.РеестрДокументов.Изменения КАК ТаблицаИзменений
		|ГДЕ
		|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
		|	И ТИПЗНАЧЕНИЯ(ТаблицаИзменений.Ссылка) В (&ТипыДокументов)");
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СообщитьЧтоРаботаСФормойВременноОграничена();
	КонецЕсли;
	
КонецПроцедуры

// Записывает значения констант с помощью ОбновлениеИнформационнойБазы.ЗаписатьДанные().
//
// Параметры:
//  ЗначенияКонстант - Структура - Ключ описывает имя константы.
//
Процедура ЗаписатьЗначенияКонстант(ЗначенияКонстант) Экспорт

	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		
		МенеджерЗначения = Константы[КлючИЗначение.Ключ].СоздатьМенеджерЗначения();
		
		МенеджерЗначения.Значение = КлючИЗначение.Значение;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения, Ложь);
			
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Сообщить о неудачной обработке
//
// Параметры:
//  ИнформацияОбОшибке	 - ИнформацияОбОшибке - результат функции ИнформацияОбОшибке()
//  Ссылка				 - ЛюбаяСсылка - обрабатываемый объект.
//
Процедура СообщитьОНеудачнойОбработке(ИнформацияОбОшибке, Ссылка) Экспорт
	ТекстСообщения = НСтр("ru='Не удалось обработать объект: %Объект% по причине: %Причина%';uk='Не вдалося обробити об''єкт: %Объект% по причині: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Ссылка);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение,
							Ссылка.Метаданные(),
							Ссылка,
							ТекстСообщения);
КонецПроцедуры

// Выполняет проверку корректности данных ссылки на объект информационной базы.
// В случае успешной проверки возвращает объект информационной базы.
//
// Параметры:
//	Ссылка			- ЛюбаяСсылка	 - ссылка на объект информационной базы.
//	ВерсияДанных	- Строка		 - текущая версия данных объекта.
//	Очередь			- Число			 - очередь отложенной обработки данных для контроля данных на предмет блокировки
//										другими обработчиками.
//
// Возвращаемое значение:
//	Объект, Неопределено - объект информационной базы.
//
Функция ПроверитьПолучитьОбъект(Ссылка,ВерсияДанных,Очередь) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
		Возврат Неопределено;
	КонецЕсли;
	Если Объект.ВерсияДанных <> ВерсияДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Объект;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапросРазличийОтраженияДокументовВНезависимомРегистре(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля = Неопределено) Экспорт

	ТекстЗапросаФормированияДвижений = РезультатАдаптацииЗапроса.ТекстЗапроса;
	ЗначенияПараметров = РезультатАдаптацииЗапроса.ЗначенияПараметров;
	
	ТекстРезультирующегоЗапроса	= "";
	
	МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра); // ОбъектМетаданныхРегистрСведений - 
		
	ТекстРегистра = 
	"ВЫБРАТЬ";
	
	ТекстВыборкиСуммирующегоЗапроса =
	"ВЫБРАТЬ";
	ТекстГруппировкиСуммирующегоЗапроса = "
	|СГРУППИРОВАТЬ ПО";	
	ТекстУсловияСуммирующегоЗапроса = "
	|ИМЕЮЩИЕ
	|	ЛОЖЬ";	
	
	ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	1 КАК КонтрольноеПолеОбновлениеИБ,");
	ТекстРегистра = СтрЗаменить(ТекстРегистра,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	-1,");
	ТекстВыборкиСуммирующегоЗапроса = СтрЗаменить(ТекстВыборкиСуммирующегоЗапроса,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	СУММА(КонтрольноеПолеОбновлениеИБ) КАК КонтрольноеПолеОбновлениеИБ,");
	ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
	| ИЛИ СУММА(КонтрольноеПолеОбновлениеИБ) <> 0";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаФормированияДвижений);
	
	Запрос = СхемаЗапроса.ПакетЗапросов[0];
	
	ВсеКолонки = Новый Массив;
	
	// Поля по которым не требуется проверять совпадение данных в ИБ с данными запроса.
	Если НеиспользуемыеПоля = Неопределено Тогда
		НеиспользуемыеПоля = Новый Массив;
	КонецЕсли; 
	
	Для каждого Колонка Из Запрос.Колонки Цикл
		
		ВсеКолонки.Добавить(Колонка.Псевдоним);
		
		Если Колонка.Псевдоним = "КонтрольноеПолеОбновлениеИБ" Тогда
			Продолжить;
		КонецЕсли;
		
		Поле = МетаданныеРегистра.Измерения.Найти(Колонка.Псевдоним); 
		
		Если Поле <> Неопределено Тогда
			ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Поле);
		Иначе
			Поле = МетаданныеРегистра.Ресурсы.Найти(Колонка.Псевдоним); 
			Если Поле <> Неопределено Тогда
				ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Поле);
			Иначе
				Поле = МетаданныеРегистра.Реквизиты.Найти(Колонка.Псевдоним); 
				Если Поле <> Неопределено Тогда
					ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Поле);
				Иначе
					ТекстИсключения = НСтр("ru='В запросе выборки данных документа %ПолноеИмяДокумента% для формирования движений по регистру %ПолноеИмяРегистра% присутствует поле, которого нет в регистре.';uk='У запиті вибірки даних документа %ПолноеИмяДокумента% для формування рухів за регістром %ПолноеИмяРегистра% присутній поле, якого немає в регістрі.'");
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяРегистра%", ПолноеИмяРегистра);
					
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НеиспользуемыеПоля.Найти(Колонка.Псевдоним) = Неопределено Тогда
			ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Поле);
			ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Поле);
		КонецЕсли;
				
	КонецЦикла;
	
	ТекстВставкиЗапросФормирующийДвижения = "";
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл		
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
		
		Если ВсеКолонки.Найти(Измерение.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Измерение);
		ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Измерение);
		ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Измерение);
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
	КонецЦикла;
	
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл		
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Ресурс.Имя, Ресурс.Тип.ПривестиЗначение());
		
		Если ВсеКолонки.Найти(Ресурс.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Ресурс.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Ресурс);
		ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Ресурс);
		ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Ресурс);
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
		
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл		
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());
		
		Если ВсеКолонки.Найти(Реквизит.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Реквизит);
		ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Реквизит);
		ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Реквизит);
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
	КонецЦикла;
	
	ТекстРегистра = Лев(ТекстРегистра, СтрДлина(ТекстРегистра) - 1);
	ТекстВыборкиСуммирующегоЗапроса = Лев(ТекстВыборкиСуммирующегоЗапроса, СтрДлина(ТекстВыборкиСуммирующегоЗапроса) - 1);
	ТекстГруппировкиСуммирующегоЗапроса = Лев(ТекстГруппировкиСуммирующегоЗапроса, СтрДлина(ТекстГруппировкиСуммирующегоЗапроса) - 1);
	
	Если Не ПустаяСтрока(ТекстВставкиЗапросФормирующийДвижения) Тогда
		ТекстВставкиЗапросФормирующийДвижения = Лев(ТекстВставкиЗапросФормирующийДвижения, СтрДлина(ТекстВставкиЗапросФормирующийДвижения) - 1);
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ИЗ",
											",
											|" +ТекстВставкиЗапросФормирующийДвижения + "
											|ИЗ");
	КонецЕсли;
			
	ТекстРегистра = ТекстРегистра + "
	|ИЗ
	|	" + ПолноеИмяРегистра + " КАК ТаблицаРегистра";
	
	
	ТекстРегистра = ТекстРегистра + "
	|ГДЕ
	|	ТаблицаРегистра.Ссылка ССЫЛКА " + ПолноеИмяДокумента;
	
	ТекстРезультирующегоЗапроса = ТекстРезультирующегоЗапроса + 
	ТекстВыборкиСуммирующегоЗапроса + "
	|ИЗ
	|	("
	+ ТекстЗапросаФормированияДвижений 
	+ "
	|ОБЪЕДИНИТЬ ВСЕ
	|" 
	+ ТекстРегистра
	+ ") КАК ВложенныйЗапрос "
	+ ТекстГруппировкиСуммирующегоЗапроса
	+ ТекстУсловияСуммирующегоЗапроса;
	
	ЗапросВыборки = Новый Запрос;
	
	Для Каждого Параметр Из ЗначенияПараметров Цикл
		
		ЗапросВыборки.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	ЗапросВыборки.Текст = ТекстРезультирующегоЗапроса;
	
	Возврат ЗапросВыборки;
	
КонецФункции

Процедура ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Поле)
	
	Если Поле.Имя = "Комментарий" Тогда
		ТекстРегистра = ТекстРегистра + "
		|	ВЫРАЗИТЬ(ТаблицаРегистра." + Поле.Имя + " КАК Строка (1000)),";
	ИначеЕсли Поле.Тип.СодержитТип(Тип("СправочникСсылка.КлючиРеестраДокументов")) Тогда
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Поле.Имя + ".Ключ,";
	Иначе	
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Поле.Имя + ",";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Поле)
	
	ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВЫБОР КОГДА ВложенныйЗапрос." + Поле.Имя + " ЕСТЬ NULL ИЛИ ВложенныйЗапрос." + Поле.Имя + " = НЕОПРЕДЕЛЕНО ТОГДА &ПустоеЗначение" + Поле.Имя + " ИНАЧЕ ВложенныйЗапрос." + Поле.Имя + " КОНЕЦ  КАК " + Поле.Имя + ",";
		
КонецПроцедуры

Процедура ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Поле)
	
	ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + "
		|	ВЫБОР КОГДА ВложенныйЗапрос." + Поле.Имя + " ЕСТЬ NULL ИЛИ ВложенныйЗапрос." + Поле.Имя + " = НЕОПРЕДЕЛЕНО ТОГДА &ПустоеЗначение" + Поле.Имя + " ИНАЧЕ ВложенныйЗапрос." + Поле.Имя + " КОНЕЦ,";
		
КонецПроцедуры

#Область ЗаполненияПустойИБ

// Обработчик первого запуска BAS УТ 3.
//
Процедура ПервыйЗапуск() Экспорт
	
    
	// Заполнение предопределенных объектов с макетом НачальноеЗаполнение
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьВсеОбъекты();
	
	Справочники.Валюты.ЗаполнитьВалютыПоУмолчанию();
	Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора("0101,0134,0301,2009,0123,0306"); // Метр, Кубический метр, Килограмм, Штука, Квадратный метр, Метрическая тонна
	
	ЗаполнитьКонстантыПоУмолчанию();
	
	БизнесПроцессы.СогласованиеПродажи.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЗакупки.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЦенНоменклатуры.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЗаявкиНаВозвратТоваровОтКлиента.ИнициализироватьРолиИсполнителей();
	
	Справочники.Партнеры.ЗаполнитьПредопределенныхПартнеров();
	Справочники.Контрагенты.ЗаполнитьПредопределенныхКонтрагентов();

	Справочники.СкидкиНаценки.ЗаполнитьПредопределенныеЭлементы();
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьПредопределенныеСтатьиДвиженияДенежныхСредств();
	ЗаполнитьСвойстваВидовКонтактнойИнформации();
	Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций();
	Справочники.Приоритеты.СоздатьПриоритетыПоУмолчанию();
	Справочники.ПриоритетыОплаты.СоздатьПриоритетыПоУмолчанию();
	Справочники.ПричиныОтменыЗаказовПоставщикам.ЗаполнитьПредопределенныеЭлементы();
	Справочники.СтавкиНДС.СоздатьЭлементыПервоначальногоЗаполнения();
    
	// АудитСостоянияСистемы.ЗаполнитьСправочникПроверокСостоянияСистемы();
	
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПредопределенныеСтатьиДоходов();
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПредопределенныеСтатьиРасходов();
	ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗаполнитьНастройкиПредопределенныхЭлементов();
	
	КалендарныеГрафики.ОбновитьИспользованиеНесколькихПроизводственныхКалендарей();
	Справочники.ВариантыКлассификацииЗадолженности.СоздатьВариантКлассификацииЗадолженностиПоУмолчаниюМонопольно();
	МониторингЦелевыхПоказателей.ЗаполнитьСтруктуруЦелейИВариантыАнализа();
    
	
	РегистрыСведений.ШтрихкодыНоменклатуры.ЗаполнитьКонстантыПодсистемыШтрихкодирования();
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновитьПоставляемыеДрайвера();
	
	
КонецПроцедуры

// Заполняет константы значениями по умолчанию.
// Вызывается при первоначальном заполнении ИБ после заполнения следующих данных
//	- Справочник.УпаковкиЕдиницыИзмерения.
//
Процедура ЗаполнитьКонстантыПоУмолчанию()
	
	УстановитьВалютуРегламентированногоУчета();
	УстановитьВалютуУправленческогоУчета();
	УстановитьЕдиницыИзмерения();
	
	ЗначенияКонстант = НастройкиСистемыПовтИсп.ПолучитьЗначенияКонстантПоУмолчанию();
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Заполняет служебные константы-идентификаторы конфигурации.
//
Процедура УстановитьСлужебныеКонстанты() Экспорт
	
	// Определим правильные значения служебных констант (функциональных опций).
	ЗначенияКонстант = Новый Структура("УправлениеТорговлей, КомплекснаяАвтоматизация, УправлениеПредприятием", Ложь, Ложь, Ложь);
	
	МодулиПодсистем = Новый Массив;
	ПодсистемыКонфигурацииПереопределяемый.ПриДобавленииПодсистем(МодулиПодсистем);
	
	МодулиПодсистем = ОбщегоНазначенияУТКлиентСервер.ПреобразоватьМассивВСтруктуруИлиСоответствие(МодулиПодсистем, Истина);
	
	Если МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыУП") Тогда
		ЗначенияКонстант.УправлениеПредприятием = Истина;
	ИначеЕсли МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыКА") Тогда
		ЗначенияКонстант.КомплекснаяАвтоматизация = Истина;
	ИначеЕсли МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыУТ") Тогда
		ЗначенияКонстант.УправлениеТорговлей = Истина;
	Иначе
		ВызватьИсключение НСтр("ru='Не удалось определить служебный идентификатор конфигурации.';uk='Не вдалося визначити службовий ідентифікатор конфігурації.'");
	КонецЕсли;
	
	// Установим эти значения.
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		
		Если Константы[КлючИЗначение.Ключ].Получить() <> КлючИЗначение.Значение Тогда
			
			// Текущее значение константы в ИБ не соответствует правильному - исправим
			МенеджерЗначения = Константы[КлючИЗначение.Ключ].СоздатьМенеджерЗначения();
			
			МенеджерЗначения.Значение = КлючИЗначение.Значение;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура устанавливает значение валюты регламентированного учета.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуРегламентированногоУчета()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
		
		КодВалюты = НастройкиСистемы.КодВалютыПоУмолчанию();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления
			|	И Валюты.Код = &КодВалюты");
		Запрос.УстановитьПараметр("КодВалюты", КодВалюты);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Коды = Новый Массив;
			Коды.Добавить(КодВалюты);
			НоваяВалюта = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(Коды);
			Если НоваяВалюта.Количество() > 0 Тогда
				Константы.ВалютаРегламентированногоУчета.Установить(НоваяВалюта[0]);
			КонецЕсли;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Константы.ВалютаРегламентированногоУчета.Установить(Выборка.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает значение валюты управленческого учета.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуУправленческогоУчета()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаУправленческогоУчета.Получить())
		И Не Константы.ИспользоватьНесколькоВалют.Получить()Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				
				Константы.ВалютаУправленческогоУчета.Установить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значения констант, связанных с единицами измерения
//
Процедура УстановитьЕдиницыИзмерения()
	
	БазоваяЕдиницаИзмеренияДлины   = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("0101"); // Метр
	БазоваяЕдиницаИзмеренияВеса    = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("0301"); // Килограмм
	БазоваяЕдиницаИзмеренияОбъема  = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("0134"); // Кубический метр
	БазоваяЕдиницаИзмеренияПлощади = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("0123"); // Квадратный метр
	БазоваяЕдиницаИзмеренияШтук    = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("2009"); // Штука

	Константы.ЕдиницаИзмеренияДлины.Установить(БазоваяЕдиницаИзмеренияДлины);
	Константы.ЕдиницаИзмеренияВеса.Установить(БазоваяЕдиницаИзмеренияВеса);
	Константы.ЕдиницаИзмеренияОбъема.Установить(БазоваяЕдиницаИзмеренияОбъема);
	Константы.ЕдиницаИзмеренияПлощади.Установить(БазоваяЕдиницаИзмеренияПлощади);
	Константы.ЕдиницаИзмеренияКоличестваШтук.Установить(БазоваяЕдиницаИзмеренияШтук);
	
КонецПроцедуры


#КонецОбласти


#Область ОбновлениеНовыхВерсийИБ

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт

#Область Монопольно
	
#Область ОбновлениеИнформационнойБазыУТ_ПервыйЗапуск

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ПервыйЗапуск";
	Обработчик.Версия = "";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = НСтр("ru='';uk=''");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_УстановитьКонстантуИспользоватьУчетСебестоимости

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуИспользоватьУчетСебестоимости";
	Обработчик.Версия = "3.5.4.300";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cd9c0f60-6108-496d-a0f1-0f19ce0887f3");
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение константы ""Использовать учет себестоимости"".';uk='Встановлює значення константи ""Використовувати облік собівартості"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьУчетСебестоимости.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьУчетСебестоимости.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ЗаполнитьВариантПриемкиТоваров

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.300";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("24ec0e8f-e2a4-4d95-b894-ddc8417e95d9");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ЗаполнитьВариантПриемкиТоваров";
	Обработчик.ЧитаемыеОбъекты = "";
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ВариантПриемкиТоваров.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	Обработчик.Комментарий = НСтр("ru='Заполняет вариант приемки товаров по умолчанию.';uk='Заповнює варіант приймання товарів по умовчанню.'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ЗаполнитьЗначениеРазделенияПоОбластямДанных

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.300";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dbdce397-7e6a-453d-90d9-c06ca20470f8");	
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ЗаполнитьЗначениеРазделенияПоОбластямДанных";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.ЧитаемыеОбъекты = "Константа.НеИспользоватьРазделениеПоОбластямДанных";
	Обработчик.ИзменяемыеОбъекты = "Константа.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА,"
		+ "Константа.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ";
	Обработчик.Комментарий = НСтр("ru='Заполнение значений разделения по областям данных';uk='Заповнення значень поділу за областями даних'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ЗаполнитьВидКонтактнойИнформацииМеждународныйАдрес

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.300";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ЗаполнитьВидКонтактнойИнформацииМеждународныйАдрес";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("74b81bd6-64cc-4da5-83fe-3d4d6a5a1771");
	Обработчик.ЧитаемыеОбъекты = ""
	//++ Локализация
		+ "Справочник.ВидыКонтактнойИнформации"
	//-- Локализация
	;
	Обработчик.ИзменяемыеОбъекты = ""
	//++ Локализация
		+ "Справочник.ВидыКонтактнойИнформации"
	//-- Локализация
	;
	Обработчик.Комментарий = НСтр("ru='Заполняет тип нового предопределенного значения ""Виды контактной информации"".';uk='Заповнює тип нового напередвизначеного значення ""Види контактної інформації"".'");

	
#КонецОбласти



#КонецОбласти

#Область Отложенно

#Область ОбновлениеИнформационнойБазыУТ_ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f6e16347-fc1c-4f17-a825-3d334c032c0d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ЗаполнитьСписокВидовКонтактнойИнформацииКОбработке";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Установка наименований видов КИ на других языках.';uk='Встановлення найменувань видів КІ на інших мовах.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыКонтактнойИнформации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ОбновитьПредставленияПредопределенныхЭлементов

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбновитьПредставленияПредопределенныхЭлементов";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("94e5615a-ca4f-4c3f-a877-17aea49a7905");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "МультиязычностьСервер.ЗарегистрироватьПредопределенныеЭлементыДляОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Обновление наименований предопределенных элементов.
|До завершения обработки наименования этих элементов в ряде случаев будет отображаться некорректно.'
|;uk='Оновлення найменувань визначених елементів. 
|До завершення обробки найменування цих елементів в ряді випадків буде відображатися некоректно.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиДоходов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.Контрагенты.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.НаборыУпаковок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.Организации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.Партнеры.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПолитикиУчетаСерий.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПричиныОтменыЗаказовКлиентов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПричиныОтменыЗаказовПоставщикам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПричиныПроигрышаСделок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.РолиПартнеровВСделкахИПроектах.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СезонныеГруппыБизнесРегионов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СкидкиНаценки.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СостоянияПроцессов.ПолноеИмя());
	//++ НЕ УТ
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтатьиКалькуляции.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.Сценарии.ПолноеИмя());
	//-- НЕ УТ
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиДоходов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.Контрагенты.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.НаборыУпаковок.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.Организации.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.Партнеры.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.ПолитикиУчетаСерий.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.ПричиныОтменыЗаказовКлиентов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.ПричиныОтменыЗаказовПоставщикам.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.ПричиныПроигрышаСделок.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.РолиПартнеровВСделкахИПроектах.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.СезонныеГруппыБизнесРегионов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.СкидкиНаценки.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.СостоянияПроцессов.ПолноеИмя());
	//++ НЕ УТ
	Изменяемые.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.СтатьиКалькуляции.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.Сценарии.ПолноеИмя());
	//-- НЕ УТ
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиДоходов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.Контрагенты.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.НаборыУпаковок.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.Организации.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.Партнеры.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ПолитикиУчетаСерий.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ПричиныОтменыЗаказовКлиентов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ПричиныОтменыЗаказовПоставщикам.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ПричиныПроигрышаСделок.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.РолиПартнеровВСделкахИПроектах.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.СезонныеГруппыБизнесРегионов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.СкидкиНаценки.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.СостоянияПроцессов.ПолноеИмя());
	//++ НЕ УТ
	Блокируемые.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.СтатьиКалькуляции.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.Сценарии.ПолноеИмя());
	//-- НЕ УТ
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.СтатьиРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Организации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	//++ Локализация
	//-- Локализация
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	//-- НЕ УТ

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_УстановитьИспользованиеНачислениеЗарплаты

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьИспользованиеНачислениеЗарплаты";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ЗарегистрироватьУстановкуИспользованияНачисленияЗарплаты";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("68f74d8f-8802-40da-a585-05ee73bf1553");
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.УправлениеТорговлей,"
		+ "Константа.ИспользоватьНачислениеЗарплаты";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьНачислениеЗарплаты";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Установка служебной константы использования расчета зарплаты.';uk='Встановлення службової константи використання розрахунку зарплати.'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_УстановитьИспользоватьСбалансированностьПлановУТ

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьИспользоватьСбалансированностьПлановУТ";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b600dfd5-7dde-4471-95c9-5d0953a2c498");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ЗарегистрироватьУстановкуИспользоватьСбалансированностьПлановУТ";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.УправлениеТорговлей,"
		+ "Константа.ИспользоватьПланированиеПродажПоКатегориям,"
		+ "Константа.ИспользоватьСбалансированностьПлановУТ,"
		+ "Константа.ИспользоватьПланированиеПродаж,"
		+ "Константа.ИспользоватьПланированиеСборкиРазборки,"
		+ "Константа.ИспользоватьПланированиеЗакупок";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьСбалансированностьПлановУТ";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Устанавливает константу ""Использовать сбалансированность планов УТ"" в значение Истина, если используется планирование продаж, закупок или сборки(разборки)';uk='Встановлює константу ""Використовувати збалансованість планів УТ"" у значення Істина, якщо використовується планування продажів, купівель або збирання(розбирання)'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбработатьДанныеДляПереходаНаНовуюВерсию22";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию22";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("130a9ee9-576c-4cf1-acc9-f6f2a1974e72");
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ШаблоныСообщений";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ШаблоныСообщений,"
		+ "Константа.ИспользоватьШаблоныСообщений";
	Обработчик.БлокируемыеОбъекты = "Справочник.ШаблоныСообщений";
	Обработчик.Комментарий = НСтр("ru='Перенос параметров и печатных форм в справочнике шаблонов сообщений. Пока работа обработчика не завершена формирование шаблонов сообщений невозможно.';uk='Перенесення параметрів та друкованих форм у довіднику шаблонів повідомлень. Поки робота обробника не завершена, формування шаблонів повідомлень неможливе.'");

#КонецОбласти

#Область РозничныеПродажи_ОбработатьДанныеДляПереходаНаНовуюВерсию_ВидыКонтактнойИнформации

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РозничныеПродажи.ОбработатьДанныеДляПереходаНаНовуюВерсию_ВидыКонтактнойИнформации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2b2a3916-6b76-42e2-9c76-c9f32270ab1d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РозничныеПродажи.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_ВидыКонтактнойИнформации";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВидыКонтактнойИнформации";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ВидыКонтактнойИнформации";
	Обработчик.БлокируемыеОбъекты = "Справочник.ВидыКонтактнойИнформации";
	Обработчик.Комментарий = НСтр("ru='Включает возможность ввода нескольких значений.';uk='Включає можливість введення кількох значень.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыКонтактнойИнформации.ОбновитьВидПоляДругое";
	НоваяСтрока.Порядок = "После";       
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыКонтактнойИнформации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";       
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации";
	НоваяСтрока.Порядок = "После";       

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ОбработатьНаборыДопСвойств

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбработатьНаборыДопСвойств";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ЗарегистироватьКОбработкеНаборыДопСвойств";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e23ea340-efa5-48bc-bea7-d2c452cbfe3d");
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	Обработчик.ИзменяемыеОбъекты = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	Обработчик.БлокируемыеОбъекты = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	Обработчик.Комментарий = НСтр("ru='Устанавливает для предопределенных наборов дополнительных свойств реквизит ""Используется"" в значение Истина.';uk='Встановлює для напередвизначених наборів додаткових властивостей реквізит ""Використовується"" у значення Істина.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыКА.УстановитьПараметрыНаборовСвойств";
	НоваяСтрока.Порядок = "До";
	//-- НЕ УТ   
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбновитьПредставленияПредопределенныхЭлементов";
	НоваяСтрока.Порядок = "Любой";   

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ИспользоватьУправлениеПеремещениемОбособленныхТоваровОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользоватьУправлениеПеремещениемОбособленныхТоваровОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ИспользоватьУправлениеПеремещениемОбособленныхТоваровЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("099e8891-bfbd-44c5-b28b-38995eb3b4f8");
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = ""
		+ "Справочник.НаправленияДеятельности,"
		+ "Константа.РазрешитьОбособлениеТоваровСверхПотребности,"
		+ "Константа.ИспользоватьУправлениеПеремещениемОбособленныхТоваров";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьУправлениеПеремещениемОбособленныхТоваров";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Устанавливает константу ""Использовать управление перемещением обособленных товаров при необходимости';uk='Встановлює константу ""Використовувати управління переміщенням відокремлених товарів"" за необхідності'");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";        

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ИнициализироватьПорядокОформленияВыкупаПриСписанииТоваров

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ИнициализироватьПорядокОформленияВыкупаПриСписанииТоваров";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c67f9a6a-272c-4471-8550-55c1ca9ebc33");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ИнициализироватьПорядокОформленияВыкупаПриСписанииТоваров_ОтметитьКОбработке";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.УдалитьПорядокОформленияВыкупаПриСписанииТоваров";
	Обработчик.ИзменяемыеОбъекты = "Константа.УдалитьПорядокОформленияВыкупаПриСписанииТоваров";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Задается значение по умолчанию для константы УдалитьПорядокОформленияВыкупаПриСписанииТоваров.';uk='Задається значення по умовчанню для константи УдалитьПорядокОформленияВыкупаПриСписанииТоваров.'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ВалютыУпрИРеглУчетаСовпадают_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ВалютыУпрИРеглУчетаСовпадают_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("33fea1cf-f828-4600-885a-fcc4f8176657");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ВалютыУпрИРеглУчетаСовпадают_ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ВалютаРегламентированногоУчета,"
		+ "Константа.ВалютаУправленческогоУчета";
	Обработчик.ИзменяемыеОбъекты = "Константа.ВалютыУпрИРеглУчетаСовпадают";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение в константе ВалютыУпрИРеглУчетаСовпадают';uk='Встановлює значення в константі ВалютыУпрИРеглУчетаСовпадают'");

#КонецОбласти


#Область ЗапасыСервер_УстановитьИспользованиеРегламентногоЗаданияСверткиРезервов

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ЗапасыСервер.УстановитьИспользованиеРегламентногоЗаданияСверткиРезервов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("662b7707-5d36-463d-9120-fa2e9e0b2003");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЗапасыСервер.ЗарегистрироватьДанныеДляУстановкиИспользованияРегламентногоЗаданияСверткиРезервов";
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьУправлениеПроизводством2_2,"
		+ "Константа.ИспользоватьОтветственноеХранениеВПроцессеЗакупки,"
		+ "Константа.ИспользоватьПередачиТоваровМеждуОрганизациями";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Во время работы обработчика обновления устанавливается использование регламентного задания ""Свертка резервов товаров организаций"". До завершения обработки не будет работать свертка резервов товаров организаций.';uk='Під час роботи обробника оновлення встановлюється використання регламентного завдання ""Згортка резервів товарів організацій"". До завершення обробки не буде працювати згортка резервів товарів організацій.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "УправлениеСвойствамиПереопределяемый.УстановитьИспользованиеСвойств_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- Локализация
	
	//++ НЕ УТ
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыКА.ИспользуетсяУправлениеПроизводствомВерсии_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользоватьОтчетВедомостьРасчетовМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользоватьОтчетРасчетыМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
	//++ НЕ УТ
	//-- НЕ УТ

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ПериодыРезервовТоваровОрганизацийАктуальны_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ПериодыРезервовТоваровОрганизацийАктуальны_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("33186868-e85a-44b2-b4f1-d8776b747b50");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ПериодыРезервовТоваровОрганизацийАктуальны_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "Константа.ПериодыРезервовТоваровОрганизацийАктуальны";
	Обработчик.ИзменяемыеОбъекты = "Константа.ПериодыРезервовТоваровОрганизацийАктуальны";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Сбрасывает константу ""Периоды резервов товаров организаций актуальны"" для корректного переноса резервов при следующем использовании рабочего места ""Передачи товаров к оформлению""';uk='Скидає константу ""Періоди резервів товарів організацій актуальні"" для коректного перенесення резервів під час наступного використання робочого місця ""Передачі товарів до оформлення""'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ИспользоватьУчетНДС_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользоватьУчетНДС_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7e0377c7-d1f7-40fc-a493-da2a4644d3e9");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ИспользоватьУчетНДС_ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьУчетНДС";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьУчетНДС";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение в технологической константе ""Использовать учет НДС"".';uk='Встановлює значення у технологічній константі ""Використовувати облік ПДВ"".'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_УстановитьВариантУчетаСезонныхКолебаний

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьВариантУчетаСезонныхКолебаний";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2ecd6bb2-91f7-4c40-a28d-ffc3f53d241a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ОтметитьКонстантыКОбработке";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ВариантУчетаСезонныхКолебаний";
	Обработчик.ИзменяемыеОбъекты = "Константа.ВариантУчетаСезонныхКолебаний";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение константы ""Вариант учета сезонных колебаний"".';uk='Встановлює значення константи ""Варіант обліку сезонних коливань"".'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_НеНоваяАрхитектураВзаиморасчетов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.НеНоваяАрхитектураВзаиморасчетов_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2ab2d5a3-f6dc-48f6-9867-d55e4fcf0327");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.НеНоваяАрхитектураВзаиморасчетов_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.НоваяАрхитектураВзаиморасчетов,"
		+ "Константа.НеНоваяАрхитектураВзаиморасчетов";
	Обработчик.ИзменяемыеОбъекты = "Константа.НеНоваяАрхитектураВзаиморасчетов";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Заполняет константу НеНоваяАрхитектураВзаиморасчетов';uk='Заповнює константу НеНоваяАрхитектураВзаиморасчетов'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользоватьОтчетРасчетыМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ИспользоватьОтчетРасчетыМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользоватьОтчетРасчетыМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e1f649be-9662-412e-a334-e4571bf9fb88");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ИспользоватьОтчетРасчетыМеждуОрганизациями_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьПередачиТоваровМеждуОрганизациями,"
		+ "Константа.НеНоваяАрхитектураВзаиморасчетов";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьОтчетРасчетыМеждуОрганизациями";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Заполняет константу ИспользоватьОтчетРасчетыМеждуОрганизациями';uk='Заповнює константу ИспользоватьОтчетРасчетыМеждуОрганизациями'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.НеНоваяАрхитектураВзаиморасчетов_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ЗапасыСервер.УстановитьИспользованиеРегламентногоЗаданияСверткиРезервов";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ИспользоватьОтчетВедомостьРасчетовМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользоватьОтчетВедомостьРасчетовМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a62174b6-f219-449d-a152-ca4d83848bba");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ИспользоватьОтчетВедомостьРасчетовМеждуОрганизациями_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьПередачиТоваровМеждуОрганизациями,"
		+ "Константа.НоваяАрхитектураВзаиморасчетов";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьОтчетВедомостьРасчетовМеждуОрганизациями";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Заполняет константу ИспользоватьОтчетВедомостьРасчетовМеждуОрганизациями';uk='Заповнює константу ИспользоватьОтчетВедомостьРасчетовМеждуОрганизациями'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ЗапасыСервер.УстановитьИспользованиеРегламентногоЗаданияСверткиРезервов";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область РасчетСебестоимости_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РасчетСебестоимости.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("694157d3-f445-4990-a026-6924a05f00ee");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РасчетСебестоимости.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегламентноеЗадание.РасчетСебестоимости";
	Обработчик.ИзменяемыеОбъекты = "РегламентноеЗадание.РасчетСебестоимости";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Заполняет расписание по умолчанию для регламентного задания РасчетСебестоимости.';uk='Заповнює розклад по умовчанню для регламентного завдання РасчетСебестоимости.'");

#КонецОбласти


#Область ОбновлениеИнформационнойБазыУТ_ДатаНачалаПечатиЕдиногоАвансовогоОтчета_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ДатаНачалаПечатиЕдиногоАвансовогоОтчета_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7f8edb47-1c53-4809-abb0-d8f726cbcefa");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ДатаНачалаПечатиЕдиногоАвансовогоОтчета_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ДатаНачалаПечатиЕдиногоАвансовогоОтчета";
	Обработчик.ИзменяемыеОбъекты = "Константа.ДатаНачалаПечатиЕдиногоАвансовогоОтчета";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение константы ДатаНачалаПечатиЕдиногоАвансовогоОтчета';uk='Встановлює значення константи ДатаНачалаПечатиЕдиногоАвансовогоОтчета'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2e6a0b39-1538-4b8b-a055-5362724346fc");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета";
	Обработчик.ИзменяемыеОбъекты = "Константа.ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение константы ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета';uk='Встановлює значення константи ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета'");

#КонецОбласти

#Область УправлениеСвойствамиПереопределяемый_УстановитьИспользованиеСвойств_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "УправлениеСвойствамиПереопределяемый.УстановитьИспользованиеСвойств_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d5d3d243-3bb1-4c30-82ff-a6bb3171bc42");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "УправлениеСвойствамиПереопределяемый.УстановитьИспользованиеСвойств_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьВнутреннееПотребление,"
	//++ НЕ УТ
		+ "Константа.ИспользоватьУправлениеРемонтами,"
		+ "Константа.ИспользоватьВнеоборотныеАктивы2_4,"
	//-- НЕ УТ
		+ "Константа.ИспользоватьУправлениеПроизводством2_2,"
		+ "Константа.ИспользоватьЗаказыНаСборку,"
		+ "Константа.ИспользоватьСертификатыНоменклатуры,"
		+ "Константа.ИспользоватьЗаказыНаВнутреннееПотребление,"
		+ "Константа.ИспользоватьПередачиТоваровМеждуОрганизациями,"
		+ "Константа.ИспользоватьЗаказыНаПеремещение,"
		+ "Константа.ИспользоватьПроизводство,"
	//++ Локализация
		+ "Справочник.НаборыДополнительныхРеквизитовИСведений"
	//-- Локализация
	;
	Обработчик.ИзменяемыеОбъекты = ""
	//++ Локализация
		+ "Справочник.НаборыДополнительныхРеквизитовИСведений"
	//-- Локализация
	;
	Обработчик.БлокируемыеОбъекты = ""
	//++ Локализация
		+ "Справочник.НаборыДополнительныхРеквизитовИСведений"
	//-- Локализация
	;
	Обработчик.Комментарий = НСтр("ru='Устанавливает использование свойств в объектах.';uk='Встановлює використання властивостей у об''єктах.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДополнительныеСвойстваИНаборыСвойств";
	НоваяСтрока.Порядок = "Любой";
	
	
	//++ НЕ УТ
	//-- НЕ УТ

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ЗапасыСервер.УстановитьИспользованиеРегламентногоЗаданияСверткиРезервов";
	НоваяСтрока.Порядок = "До";   
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбновитьПредставленияПредопределенныхЭлементов";
	НоваяСтрока.Порядок = "Любой";   
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбработатьНаборыДопСвойств";
	НоваяСтрока.Порядок = "После";   

#КонецОбласти


#КонецОбласти

#Область Оперативно

#Область ОбновлениеИнформационнойБазыУТ_ОбновлениеПодсистемПодключаемоеОборудование

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбновлениеПодсистемПодключаемоеОборудование";
	Обработчик.Версия = "3.5.4.350";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3f1bdd4b-d87b-4a14-9982-65f60851a2cc");
	Обработчик.Комментарий = НСтр("ru='Удаление дублей в имени подсистемы БПО: удаляется имя ""ПодключаемоеОборудование"".';uk='Вилучення дублів в імені підсистеми БПО: вилучяється ім''я ""ПодключаемоеОборудование"".'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ВерсииПодсистем.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область Обработки_ПлатежныйКалендарь_УдалитьМакетыДереваПлатежейИзХранилища

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.351";  
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "Обработки.ПлатежныйКалендарь.УдалитьМакетыДереваПлатежейИзХранилища";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Удаляет кэш макетов платежного календаря.';uk='Видаляє кеш макетів платіжного календаря.'");

#КонецОбласти

#Область ПланыОбмена_СинхронизацияДанныхЧерезУниверсальныйФормат_ЗаполнитьРазделыУчетаВНастройкахОбмена

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.352";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЗаполнитьРазделыУчетаВНастройкахОбмена";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("674a9ea3-c4a8-4a16-b98b-89406cdd4ee9");
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru='Заполняет табличную часть ""Разделы учета"" значениями по умолчанию.';uk='Заповнює табличну частину розділів обліку значеннями по умовчанню.'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_УстановитьВариантыОбособления

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.353";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьВариантыОбособления";
	Обработчик.ЧитаемыеОбъекты = "Константа.ВариантОбособленияТоваровВПродажах,"
		+ "Константа.ВариантОбособленияТоваровВоВнутреннемПотреблении,"
		+ "Константа.ВариантОбособленияТоваровВПеремещении,"
		+ "Константа.ВариантОбособленияТоваровВСборке";
	Обработчик.ИзменяемыеОбъекты = "Константа.ВариантОбособленияТоваровВПродажах,"
		+ "Константа.ВариантОбособленияТоваровВоВнутреннемПотреблении,"
		+ "Константа.ВариантОбособленияТоваровВПеремещении,"
		+ "Константа.ВариантОбособленияТоваровВСборке";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение констант ""Вариант обособления товаров во внутреннем потреблении"", ""Вариант обособления товаров в перемещении"", ""Вариант обособления товаров в продажах"" и ""Вариант обособления товаров в сборке"".';uk='Встановлює значення констант ""Варіант відокремлення товарів у внутрішньому споживанні"", ""Варіант відокремлення товарів у переміщенні"", ""Варіант відокремлення товарів у продажах"" та ""Варіант відокремлення товарів у збиранні"".'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_УстановитьИспользоватьРасширенноеОбеспечениеПотребностей

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.354";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьИспользоватьРасширенноеОбеспечениеПотребностей";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьРасширенноеОбеспечениеПотребностей,"
		+ "Константа.НеИспользоватьРасширенноеОбеспечениеПотребностей";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьРасширенноеОбеспечениеПотребностей,"
		+ "Константа.НеИспользоватьРасширенноеОбеспечениеПотребностей";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение константы ""Использовать расширенное обеспечение потребностей"" для базовой версии.';uk='Встановлює константи ""Використовувати розширене забезпечення потреб"" для базової версії.'");

#КонецОбласти


#Область ОбменДаннымиУТ_ЗаменитьПрикладныеРолиДоступаКПланамОбменов

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.355";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбменДаннымиУТ.ЗаменитьПрикладныеРолиДоступаКПланамОбменов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c44aa90d-18f0-49e4-a208-ea1ab469bca5");
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = ""
	//++ Локализация
		+ "Справочник.ПрофилиГруппДоступа"
	//-- Локализация
	;
	Обработчик.ИзменяемыеОбъекты = ""
	//++ Локализация
		+ "Справочник.ПрофилиГруппДоступа"
	//-- Локализация
	;
	Обработчик.Комментарий = НСтр("ru='Заменяет прикладные роли, используемые при синхронизации данных: ""ДобавлениеИзменениеУзловПлановОбмена"", ""ЧтениеУзловПлановОбмена"" на роль БСП ""ВыполнениеСинхронизацииДанных""';uk='Замінює прикладні ролі, що використовуються при синхронізації даних: ""ДобавлениеИзменениеУзловПлановОбмена"", ""ЧтениеУзловПлановОбмена"" на роль БСП ""ВыполнениеСинхронизацииДанных""'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУТ_ОбновлениеПодсистемБИД

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбновлениеПодсистемБИД";
	Обработчик.Версия = "3.5.4.437";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("49e0798f-fcca-4ab7-b8fd-5b8928483b9c");
	Обработчик.Комментарий = НСтр("ru='Удаление дублей в имени подсистемы БИД.';uk='Видалення дублів у імені підсистеми БІД.'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ВерсииПодсистем.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#КонецОбласти

КонецПроцедуры

Процедура ОбновитьПредставленияПредопределенныхЭлементов(Параметры, ОбъектМетаданных = Неопределено) Экспорт

	МультиязычностьСервер.ОбновитьПредставленияПредопределенныхЭлементов(Параметры, ОбъектМетаданных);

КонецПроцедуры

Процедура ОбновитьКонтактнуюИнформациюДляСписков(Параметры) Экспорт
	
	ОбъектыМетаданных = МассивОбъектовМетаданныхДляОбработки();
	
	Для каждого Объект Из ОбъектыМетаданных Цикл
	
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, Объект.ПолноеИмя());
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
					
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(Объект.ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
								
				СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				Если СпрОбъект = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформациюДляСписков(СпрОбъект);
				
				Если Объект = Метаданные.Справочники.Контрагенты 
					И СпрОбъект.СтранаРегистрации.Пустая()
					И НЕ СпрОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
					
					СпрОбъект.СтранаРегистрации = Справочники.СтраныМира.Украина;
					
				КонецЕсли;

				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru='Не удалось заполнить вид контактной информации для списка у элемента: %Ссылка% по причине: %Причина%';uk='Не вдалося заповнити вид контактної інформації для списку у елемента: %Ссылка% по причині: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Объект,
				Выборка.Ссылка,
				ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
	
	КонецЦикла;
	
	МассивИмен = Новый Массив;
	Для каждого Объект Из ОбъектыМетаданных Цикл
		МассивИмен.Добавить(Объект.ПолноеИмя());
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, МассивИмен);		
	
КонецПроцедуры

Функция МассивОбъектовМетаданныхДляОбработки()
	
	ОбъектыМетаданных = Новый Массив;
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.КонтактныеЛицаПартнеров);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Контрагенты);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Организации);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Партнеры);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Пользователи);
	//++ Локализация
	//-- Локализация
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Склады);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.ФизическиеЛица);
		
	Возврат ОбъектыМетаданных;
	
КонецФункции

// Заполняет пустое поле объекта значением реквизита по умолчанию. 
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ЗначениеРеквизита	 - Любой тип - значение заполняемого реквизита. При обработке проверяется - если значение реквизита в объекте
//							не равно пустому, то объект отмечается обработанным без изменения реквизита.
//
Процедура ЗаполнитьПустойРеквизитЗначениемПоУмолчанию(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ПустоеЗначение = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита).Тип.ПривестиЗначение();
	
	ЗаменитьЗначениеРеквизита(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ПустоеЗначение, ЗначениеРеквизита);
	
КонецПроцедуры

// Регистрирует к обработке объекты с пустым значением реквизита
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита.
//
Процедура ЗаполнитьПустойРеквизитЗначениемПоУмолчаниюЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита) Экспорт
  
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ПустоеЗначение = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита).Тип.ПривестиЗначение();
	
	ЗаменитьЗначениеРеквизитаЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ПустоеЗначение);
КонецПроцедуры

// Заполняет пустое поле объекта значением реквизита по умолчанию. 
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ИсходноеЗначение	 - Любой тип - исходное значение реквизита. Если на момент обработки в объекте будет другое значение -
//										то он будет отмечен обработанным без изменения реквизита 
//  КонечноеЗначение	 - Любой тип - новое значение реквизита, которое будет присвоено при обработке.
//
Процедура ЗаменитьЗначениеРеквизита(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ИсходноеЗначение, КонечноеЗначение) Экспорт
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Если Объект[ИмяРеквизита] <> ИсходноеЗначение Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
			Иначе
				Объект[ИмяРеквизита] = КонечноеЗначение;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			КонецЕсли;
			
		    ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%';uk='Не вдалося обробити %ИмяОбъекта%: %Ссылка% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Регистрирует к обработке объекты, у которых реквизит имеет переданное значение.
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ИсходноеЗначение	 - Любой тип - к обработке будут отмечены реквизиты.
//
Процедура ЗаменитьЗначениеРеквизитаЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ИсходноеЗначение) Экспорт
  
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОбъекта.Ссылка КАК Ссылка 
	|ИЗ
	|	#ПолноеИмяОбъекта КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.#ИмяРеквизита = &ИсходноеЗначение";
		
	Запрос.УстановитьПараметр("ИсходноеЗначение", ИсходноеЗначение);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРеквизита", ИмяРеквизита);
	
	Запрос.Текст = ТекстЗапроса;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Регистрация объектов для изменения
//
Процедура ЗаполнитьСписокВидовКонтактнойИнформацииКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ВидыКОбработке = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ВидыКОбработке);
	
КонецПроцедуры

// Установка наименований видов КИ на других языках 
//
Процедура ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации(Параметры) Экспорт
	
	ВидКИ = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Справочник.ВидыКонтактнойИнформации");
	Наименования = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.НаименованияВидовКонтактнойИнформации();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока ВидКИ.Следующий() Цикл
		Попытка
		
			ВидКИОбъект = ВидКИ.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ВидыКонтактнойИнформации - 
			
			Для каждого Язык Из Метаданные.Языки Цикл
				Если Язык = Метаданные.ОсновнойЯзык Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяВида = ?(ЗначениеЗаполнено(ВидКИОбъект.ИмяПредопределенногоВида), ВидКИОбъект.ИмяПредопределенногоВида, ВидКИОбъект.ИмяПредопределенныхДанных);
				Представление = Наименования[Язык.КодЯзыка][ИмяВида];
				Если ЗначениеЗаполнено(Представление) Тогда
					
					Если ВидКИОбъект.Представления.Найти(Язык.КодЯзыка, "КодЯзыка") = Неопределено Тогда
						НоваяСтрока = ВидКИОбъект.Представления.Добавить();
						НоваяСтрока.КодЯзыка     = Язык.КодЯзыка;
						НоваяСтрока.Наименование = Представление;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКИОбъект);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать страну мира, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось обработать вид контактной информации: %1 по причине: %2';uk='Не вдалося обробити вид контактною інформацією: %1 з причини: %2'"),
					ВидКИ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ВидыКонтактнойИнформации, ВидКИ.Ссылка, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Справочник.ВидыКонтактнойИнформации");
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Процедуре ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации не удалось обработать некоторые виды контактной информации (пропущены): %1';uk='Процедурі ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации не вдалося обробити деякі види контактної інформації (пропущені): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.ВидыКонтактнойИнформации,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Процедура ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации обработала очередную порцию видов КИ: %1';uk='Процедура ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации опрацювала чергову порцію видів КІ: %1'"),
					ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОНеудачнойБлокировке(Ссылка) Экспорт
	ТекстСообщения = НСтр("ru='Не удалось заблокировать объект: %Объект% по причине: %Причина%';uk='Не вдалося заблокувати об''єкт: %Объект% через: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Ссылка);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение,
							Ссылка.Метаданные(),
							Ссылка,
							ТекстСообщения);
КонецПроцедуры

Процедура ЗаполнитьЗначениеРазделенияПоОбластямДанных() Экспорт
	
	Если Константы.НеИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Установить(Константы.КомплекснаяАвтоматизация.Получить());
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Установить(Константы.УправлениеТорговлей.Получить());
	Иначе
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Установить(Ложь);
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область УстановкаКонстанты_ИспользоватьУчетСебестоимости

Процедура УстановитьКонстантуИспользоватьУчетСебестоимости() Экспорт
	
	Если Константы.ИспользоватьУчетСебестоимости.Получить() Тогда
		Возврат; // уже установлена
	КонецЕсли;
	Константы.ИспользоватьУчетСебестоимости.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

// Процедура обновления ИБ для справочника видов контактной информации.
//
// Инструкция:
// Для каждого объекта, владельца КИ, для каждого соответствующего ему вида КИ добавить 
// строчку вида: ОбновитьВидКИ(.....). При этом,
// важен порядок в котором будут осуществляться эти вызовы, чем раньше вызов для вида КИ,
// тем выше этот вид КИ будет располагаться на форме объекта.
//
// Параметры функции УправлениеКонтактнойИнформацией.ОбновитьВидКИ:
// 1. Вид КИ - Ссылка на предопределенный вид КИ.
// 2. Тип КИ - Ссылка на перечисление
// 3. МожноИзменятьСпособРедактирования  - Определяет, можно ли в режиме Предприятие изменить способ редактирования,
//                                         например, для адресов, которые попадают в регл. отчетность, нужно
//                                         запретить возможность изменения.
// 4. РедактированиеТолькоВДиалоге       - Если установить Истина, то будет значение вида КИ можно будет
//                                         редактировать только в форме ввода (имеет смысл только для
//                                         адресов, телефонов и факсов).
// 5. АдресТолькоРоссийский              - Если установить Истина, то для адресов можно будет ввести 
//                                         только российский адрес (имеет смысл только для адресов).
// 6. Порядок                            - Определяет порядок элемента, для сортировки относительно других
//
//
Процедура ЗаполнитьСвойстваВидовКонтактнойИнформации() Экспорт
	
	// СтандартныеПодсистемы 
	// СтандартныеПодсистемы.Пользователи
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПользователя,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 1);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 2);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.Организации
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь, Истина, 12);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь,   Ложь, 13);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                	Истина, Ложь,   Ложь, 14);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь,   Ложь, 15);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Факс,                  	Истина, Ложь,   Ложь, 16);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь,   Ложь, 17);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь,   Ложь, 18);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Другое,                	Истина, Ложь,   Ложь, 19);
	// Конец СтандартныеПодсистемы.Организации
	// Конец СтандартныеПодсистемы 
	
	// Справочник "Контрагенты"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 3);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 4);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 5);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 6);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Телефон, 					Истина, Ложь, Ложь, 7);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты,
		Перечисления.ТипыКонтактнойИнформации.Факс, 					Истина, Ложь, Ложь, 8);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 9);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты,
		Перечисления.ТипыКонтактнойИнформации.Другое, 					Истина, Ложь, Ложь, 10);
	
	// Справочник "Партнеры"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресПартнера,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь, Ложь, 6);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 7);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПартнера,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 8);
	
	// Справочник "Контактные лица партнеров"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 9);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 10);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 11);
	
	// Справочник "Физические лица"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина, Ложь, Ложь, 19);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 20);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 22);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 23);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 24);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиУкраиныФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 25);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 26);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 27);
	
	// Справочник "Склады"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресСклада,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                   	Истина, Ложь, Ложь, 28);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонСклада,
		Перечисления.ТипыКонтактнойИнформации.Телефон,                 	Истина, Ложь, Ложь, 29);
		
	
КонецПроцедуры

Процедура ОбновитьВидКИ(ВидКИ, Тип, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге, ТолькоНациональныйАдрес, Порядок = Неопределено, МеждународныйФорматАдреса = Ложь)

	НастройкиПроверки = Новый Структура;
	НастройкиПроверки.Вставить("ТолькоНациональныйАдрес", 		ТолькоНациональныйАдрес);
	НастройкиПроверки.Вставить("ПроверятьКорректность", 		Ложь);
	НастройкиПроверки.Вставить("ЗапрещатьВводНекорректного", 	Ложь);
	НастройкиПроверки.Вставить("СкрыватьНеактуальныеАдреса", 	Ложь);
	НастройкиПроверки.Вставить("ВключатьСтрануВПредставление", 	Ложь);
	НастройкиПроверки.Вставить("ТелефонCДобавочнымНомером", 	Истина);
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Тип);
	ПараметрыВида.Вид = ВидКИ;
	ПараметрыВида.Тип = Тип;
	ПараметрыВида.Порядок = Порядок;
	ПараметрыВида.МожноИзменятьСпособРедактирования = МожноИзменятьСпособРедактирования;
	ПараметрыВида.РедактированиеТолькоВДиалоге = РедактированиеТолькоВДиалоге;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.НастройкиПроверки = НастройкиПроверки;
	ПараметрыВида.МеждународныйФорматАдреса = МеждународныйФорматАдреса;
	
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

//Заполняет добавленный предопределенный вид контактной информации
Процедура ЗаполнитьВидКонтактнойИнформацииМеждународныйАдрес() Экспорт
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации;
	ТипКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидКИ, "Тип");
	
	МожноИзменятьСпособРедактирования = Истина;
	РедактированиеТолькоВДиалоге      = Ложь;
	ТолькоНациональныйАдрес           = Ложь;
	МеждународныйФорматАдреса         = Истина;
	
	ОбновитьВидКИ(
		ВидКИ,
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		МожноИзменятьСпособРедактирования,
		РедактированиеТолькоВДиалоге,
		ТолькоНациональныйАдрес,
		50,
		МеждународныйФорматАдреса);
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента;
	ТипКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидКИ, "Тип");
	
	МожноИзменятьСпособРедактирования = Истина;
	РедактированиеТолькоВДиалоге      = Ложь;
	ТолькоНациональныйАдрес           = Ложь;
	МеждународныйФорматАдреса         = Истина;
	
	ОбновитьВидКИ(
		ВидКИ,
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		МожноИзменятьСпособРедактирования,
		РедактированиеТолькоВДиалоге,
		ТолькоНациональныйАдрес,
		50,
		МеждународныйФорматАдреса);
	
КонецПроцедуры

#КонецОбласти

// Возвращает параметры выборки для СледующаяВыборкаИлиСтрокаТаблицыЗначений().
//
// Возвращаемое значение:
//  Структура - индексы для обхода таблиц с данными для обновления:
//   * ИндексПорции - Число - индекс строки в таблице порций;
//   * ИндексСтрокиВПорции - Число - индекс строки данных в порции.
//
Функция НовыеПараметрыВыборки()
	
	ПараметрыВыборки = Новый Структура;
	ПараметрыВыборки.Вставить("ИндексПорции", 0);
	ПараметрыВыборки.Вставить("ИндексСтрокиВПорции", 0);
	
	Возврат ПараметрыВыборки;
	
КонецФункции

// Итератор по выборке запроса или таблице значений.
//
// Если параметр Выборка имеет тип "ВыборкаИзРезультатаЗапроса", то в этом параметре будут данные из выборки.
// Иначе выборка выполняется из параметра Таблица, но данные для обработки все равно помещаются в параметр Выборка.
// Применим для выборки из запроса или таблицы значений в одном цикле.
//
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - выборка запроса.
//          - СтрокаТаблицыЗначений - возвращаемое значение, если выборка выполняется из таблицы значений.
//  ОбновляемыеДанные - ТаблицаЗначений - (см. ОбновлениеИнформационнойБазыСлужебный.НовыйНаборДанныхДляОбновления()).
//                      Используется, если Выборка не задана (равна Неопределено).
//  ПараметрыВыборки - Структура - см. НовыеПараметрыВыборки().
//
// Возвращаемое значение:
//  Булево - Истина, если Выборка (возвращаемое значение) содержит данные для обработки.
//
Функция СледующаяВыборкаИлиСтрокаТаблицыЗначений(Выборка, ОбновляемыеДанные, ПараметрыВыборки)
	
	Если ТипЗнч(Выборка) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Возврат Выборка.Следующий();
	Иначе
		ИндексПорции = ПараметрыВыборки.ИндексПорции;
		
		Если ИндексПорции >= ОбновляемыеДанные.НаборДанных.Количество() Или ИндексПорции < 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ИндексСтрокиВПорции = ПараметрыВыборки.ИндексСтрокиВПорции;
		Порция = ОбновляемыеДанные.НаборДанных[ИндексПорции].Данные;
		РазмерПорции = Порция.Количество();
		
		Если ИндексСтрокиВПорции >= РазмерПорции Или ИндексСтрокиВПорции < 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Выборка = Порция[ИндексСтрокиВПорции];
		ПараметрыВыборки.ИндексСтрокиВПорции = ПараметрыВыборки.ИндексСтрокиВПорции + 1;
		
		Если ПараметрыВыборки.ИндексСтрокиВПорции >= РазмерПорции Тогда
			ПараметрыВыборки.ИндексПорции = ПараметрыВыборки.ИндексПорции + 1;
			ПараметрыВыборки.ИндексСтрокиВПорции = 0;
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Получить имена документов в виде массива.
//
// Параметры:
//  ПолныеИменаДокументов - Строка, Массив, Неопределено - имя документа, по которому нужно переформировать движения.
//                          Например, "Документ.ПриходныйОрдерНаТовары".
//                          Если документов несколько, то нужно передать их имена в массиве.
//                          При обработке независимого регистра сведений нужно передать Неопределено.
//  ЭтоНезависимыйРегистрСведений - Булево - Истина, если документы проводятся по независимому регистру сведений.
//  ЕстьОбновляемыеДанные - Булево - Истина, если выборка данных сделана заранее (многопоточное обновление).
//
// Возвращаемое значение:
//  Массив - полные имена документов.
//
Функция ИменаДокументовВМассив(ПолныеИменаДокументов, ЭтоНезависимыйРегистрСведений, ЕстьОбновляемыеДанные = Ложь)
	
	Если ЕстьОбновляемыеДанные Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить(Неопределено);
	ИначеЕсли ТипЗнч(ПолныеИменаДокументов) = Тип("Строка") Тогда
		СписокДокументов = СтрРазделить(ПолныеИменаДокументов, ",", Ложь);
	ИначеЕсли ЭтоНезависимыйРегистрСведений Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить(Неопределено);
	Иначе
		СписокДокументов = ПолныеИменаДокументов;
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции

// Получить имена регистров в виде массива.
//
// Параметры:
//  ПолныеИменаРегистров - Строка, Массив - имя регистра, по которому нужно переформировать движения.
//                         Например, "РегистрНакопления.ТоварыНаСкладах".
//                         Если регистров несколько, то их имена нужно передать в массиве.
//
// Возвращаемое значение:
//  Массив - полные имена регистров.
//
Функция ИменаРегистровВМассив(ПолныеИменаРегистров)
	
	Если ТипЗнч(ПолныеИменаРегистров) = Тип("Строка") Тогда
		СписокРегистров = СтрРазделить(ПолныеИменаРегистров, ",", Ложь);
	Иначе
		СписокРегистров = ПолныеИменаРегистров;
	КонецЕсли;
	
	Возврат СписокРегистров;
	
КонецФункции

// Обновить подсистему ПодключаемоеОборудование.
//
Процедура ОбновлениеПодсистемПодключаемоеОборудование() Экспорт

    Запись = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
    Запись.ИмяПодсистемы = "ПодключаемоеОборудование";
    Запись.Удалить();

КонецПроцедуры

// Обновить подсистему БИД - удалить лишнюю апись после перехода на 2.5.
//
Процедура ОбновлениеПодсистемБИД() Экспорт

    Запись = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
    Запись.ИмяПодсистемы = "БиблиотекаИнтеграцииС1СДокументооборотом";
    Запись.Удалить();

КонецПроцедуры


// Обработчик обновления УТ 3.5.4
// Устанавливает константу ВариантПриемки.
Процедура ЗаполнитьВариантПриемкиТоваров() Экспорт

	Константы.ВариантПриемкиТоваров.Установить(Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным);
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.4
// Установка служебной константы использования расчета зарплаты.
Процедура ЗарегистрироватьУстановкуИспользованияНачисленияЗарплаты(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.4
// Установка служебной константы использования расчета зарплаты.
Процедура УстановитьИспользованиеНачислениеЗарплаты(Параметры) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей")
		И Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		Константы.ИспользоватьНачислениеЗарплаты.Установить(Ложь);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.4
// Установка константы ИспользоватьСбалансированностьПлановУТ.
Процедура ЗарегистрироватьУстановкуИспользоватьСбалансированностьПлановУТ(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.4
// Установка константы ИспользоватьСбалансированностьПлановУТ.
Процедура УстановитьИспользоватьСбалансированностьПлановУТ(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьСбалансированностьПлановУТ");
		
		Блокировка.Заблокировать();
		
		Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") 
			И (Константы.ИспользоватьПланированиеПродаж.Получить()
			Или Константы.ИспользоватьПланированиеПродажПоКатегориям.Получить()
			Или Константы.ИспользоватьПланированиеЗакупок.Получить()
			Или Константы.ИспользоватьПланированиеСборкиРазборки.Получить()) Тогда
			
			Константы.ИспользоватьСбалансированностьПлановУТ.Установить(Истина);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОбработкаЗавершена = Ложь;
		
		ОтменитьТранзакцию();
		
		Шаблон = НСтр("ru='Не удалось установить значение константы использовать сбалансированность планов УТ по причине: %1';uk='Не вдалося встановити значення константи використовувати збалансованість планів УТ по причині: %1'");
		ТекстСообщения = СтрШаблон(Шаблон, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Константы.ИспользоватьСбалансированностьПлановУТ,
			,
			ТекстСообщения);
			
	КонецПопытки;
		
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#Область ОбновлениеШаблоновСообщений

Процедура ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию22(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	| ШаблоныСообщенийПараметры.Ссылка КАК Ссылка
	| ИЗ
	| Справочник.ШаблоныСообщений КАК ШаблоныСообщенийПараметры";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
	);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШаблоныСообщений.Ссылка
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Константы.ИспользоватьШаблоныСообщений.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию22(Параметры) Экспорт
	
	НастройкиШаблоновСообщений = ШаблоныСообщенийСлужебныйПовтИсп.ПриОпределенииНастроек();
	ПолноеИмяОбъекта = "Справочник.ШаблоныСообщений";
	СловарьПечатныхФорм = СловарьПечатныхФорм();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Ссылка             = Выборка.Ссылка;
			МетаданныеОбъекта  = Метаданные.НайтиПоПолномуИмени(Ссылка.ПолноеИмяТипаПараметраВводаНаОсновании);
			СписокПечатныхФорм = ОпределитьСписокПечатныхФорм(МетаданныеОбъекта);
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			Блокировка.Заблокировать();
			
			ПолноеИмяТипаПараметраВводаНаОсновании = СтрЗаменить(Ссылка.ПолноеИмяТипаПараметраВводаНаОсновании, "Перечисление.ТипыСобытийОповещений.", "");
			
			ШаблонСообщенияОбъект = Ссылка.ПолучитьОбъект();
			Если ПустаяСтрока(ШаблонСообщенияОбъект.Код) Тогда
				ШаблонСообщенияОбъект.УстановитьНовыйКод();
			КонецЕсли;
			ШаблонСообщенияОбъект.ПолноеИмяТипаПараметраВводаНаОсновании = ПолноеИмяТипаПараметраВводаНаОсновании;
			ПредопределенныйШаблон = НастройкиШаблоновСообщений.ПредметыШаблонов.Найти(ПолноеИмяТипаПараметраВводаНаОсновании, "Имя");
			ШаблонСообщенияОбъект.Назначение = ?( ПредопределенныйШаблон <> Неопределено, ПредопределенныйШаблон.Представление, ПолноеИмяТипаПараметраВводаНаОсновании);			
		
			// Получение старых сведений для переноса
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШаблоныСообщенийУдалитьПечатныеФормы.Ссылка,
			|	ШаблоныСообщенийУдалитьПечатныеФормы.НомерСтроки,
			|	ШаблоныСообщенийУдалитьПечатныеФормы.ПечатнаяФорма
			|ИЗ
			|	Справочник.ШаблоныСообщений.УдалитьПечатныеФормы КАК ШаблоныСообщенийУдалитьПечатныеФормы
			|ГДЕ
			|	ШаблоныСообщенийУдалитьПечатныеФормы.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ШаблоныСообщенийУдалитьПараметры.Ссылка,
			|	ШаблоныСообщенийУдалитьПараметры.НомерСтроки,
			|	ШаблоныСообщенийУдалитьПараметры.ИмяПараметра,
			|	ШаблоныСообщенийУдалитьПараметры.ТипПараметра,
			|	ШаблоныСообщенийУдалитьПараметры.ЭтоПредопределенныйПараметр,
			|	ШаблоныСообщенийУдалитьПараметры.ПредставлениеПараметра
			|ИЗ
			|	Справочник.ШаблоныСообщений.УдалитьПараметры КАК ШаблоныСообщенийУдалитьПараметры
			|ГДЕ
			|	ШаблоныСообщенийУдалитьПараметры.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			// Обработка парметров.
			СписокПараметров = Новый Соответствие;
			РезультатЗапросаПараметры = РезультатЗапроса[1].Выбрать();

			Пока РезультатЗапросаПараметры.Следующий() Цикл
				ОписаниеТипа = РезультатЗапросаПараметры.ТипПараметра.Получить();
				ТипПараметра = ОписаниеТипа.Типы()[0];
				МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипПараметра);
				Если МетаданныеОбъекта = Неопределено ИЛИ СтрСравнить(МетаданныеОбъекта.ПолноеИмя(), ПолноеИмяТипаПараметраВводаНаОсновании) <> 0 Тогда
					НоваяСтрока = ШаблонСообщенияОбъект.Параметры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатЗапросаПараметры);
					СписокПараметров.Вставить(РезультатЗапросаПараметры.ИмяПараметра, ТипПараметра);
				КонецЕсли;
			КонецЦикла;
			
			// Обработка печатных форм.
			РезультатЗапросаПечатныеФормы = РезультатЗапроса[0].Выбрать();
			
			Пока РезультатЗапросаПечатныеФормы.Следующий() Цикл
				КлючПечатнойФормы = СтрРазделить(РезультатЗапросаПечатныеФормы.ПечатнаяФорма, ".", Ложь);
				Если КлючПечатнойФормы.Количество() = 2 Тогда
					
					ТипПечатнойФормы = СписокПараметров[КлючПечатнойФормы[0]];
					Если ТипПечатнойФормы <> Неопределено Тогда
						ИмяПараметра = КлючПечатнойФормы[0];
						МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипПечатнойФормы);
						СведенияДляПереноса = СловарьПечатныхФорм[МетаданныеОбъекта.ПолноеИмя()];
						СписокПечатныхФорм = ОпределитьСписокПечатныхФорм(МетаданныеОбъекта);
					Иначе
						ИмяПараметра = "";
						СведенияДляПереноса = СловарьПечатныхФорм[ПолноеИмяТипаПараметраВводаНаОсновании];
						МетаданныеОбъекта =  Метаданные.НайтиПоПолномуИмени(ПолноеИмяТипаПараметраВводаНаОсновании);
						СписокПечатныхФорм = ОпределитьСписокПечатныхФорм(МетаданныеОбъекта);
					КонецЕсли;
					
					ИмяКлюча = КлючПечатнойФормы[1];
					
					ИнформацияОПечатнойФорме = Неопределено;
					ИмяИдентификатора = "";
					Для каждого Сведения Из СведенияДляПереноса Цикл
						СоставКлюча = СтрРазделить(Сведения.Ключ, ".");
						Если СоставКлюча.Количество() = 1 Тогда
							Если СоставКлюча[0] = ИмяКлюча ТОгда
								ИнформацияОПечатнойФорме = Сведения;
								ИмяИдентификатора = СоставКлюча[0];
								Прервать;
							КонецЕсли;
						ИначеЕсли СоставКлюча.Количество() = 2 Тогда
							Если СоставКлюча[1] = ИмяКлюча ТОгда
								ИнформацияОПечатнойФорме = Сведения;
								ИмяИдентификатора = СоставКлюча[0];
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если ИнформацияОПечатнойФорме <> Неопределено Тогда
						НайденныеСтроки = Новый Массив;
						Для каждого СтрокаПечатнойФормы Из СписокПечатныхФорм Цикл
							Если СтрСравнить(СтрокаПечатнойФормы.Идентификатор, ИмяИдентификатора) = 0 Тогда
								НайденныеСтроки.Добавить(СтрокаПечатнойФормы);
							КонецЕсли;
						КонецЦикла;
						
						ПечатнаяФормаНеНайдена = Истина;
						Если НайденныеСтроки.Количество() = 1 Тогда
							НоваяСтрока = ШаблонСообщенияОбъект.ПечатныеФормыИВложения.Добавить();
							НоваяСтрока.Идентификатор = НайденныеСтроки[0].УникальныйИдентификатор;
							НоваяСтрока.Имя = ИмяПараметра;
							ПечатнаяФормаНеНайдена = Ложь;
						ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
							Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
								
								Если ТипЗнч(НайденнаяСтрока.ДополнительныеПараметры) = Тип("Структура") Тогда
									НайденнаяСтрока.ДополнительныеПараметры.Удалить("ДополнитьКомплектВнешнимиПечатнымиФормами");
								КонецЕсли;
								
								Если ИнформацияОПечатнойФорме.Значение = Неопределено Тогда
									Если НайденнаяСтрока.ДополнительныеПараметры.Количество() = 0 Тогда
										НоваяСтрока = ШаблонСообщенияОбъект.ПечатныеФормыИВложения.Добавить();
										НоваяСтрока.Идентификатор = НайденнаяСтрока.УникальныйИдентификатор;
										НоваяСтрока.Имя = ИмяПараметра;
										ПечатнаяФормаНеНайдена = Ложь;
										Прервать;
									КонецЕсли;
								Иначе
									Если СодержимоеСтруктурОдинаковое(ИнформацияОПечатнойФорме.Значение, НайденнаяСтрока.ДополнительныеПараметры) Тогда
										НоваяСтрока = ШаблонСообщенияОбъект.ПечатныеФормыИВложения.Добавить();
										НоваяСтрока.Идентификатор = НайденнаяСтрока.УникальныйИдентификатор;
										НоваяСтрока.Имя = ИмяПараметра;
										ПечатнаяФормаНеНайдена = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Если ПечатнаяФормаНеНайдена Тогда
							// 
						КонецЕсли;
					Иначе
					КонецЕсли;
				Иначе
					ИмяПараметра = "";
				КонецЕсли;
			КонецЦикла;
			
			ШаблонСообщенияОбъект.УдалитьПараметры.Очистить();
			ШаблонСообщенияОбъект.УдалитьПечатныеФормы.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ШаблонСообщенияОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Функция СловарьПечатныхФорм()
	
	ОбъектыДляОбработки = Новый Соответствие;
	ПечатнаяФорма = Новый Соответствие;
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("Акт", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПечатнаяФорма.Вставить("Акт.АктБезСкидок", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Ложь);
	ПечатнаяФорма.Вставить("СчетФактура", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Истина);
	ПечатнаяФорма.Вставить("СчетФактураВВалюте", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.АктВыполненныхРабот", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("ВозвратПоставщику", Неопределено);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ВыводитьУслуги", Истина);
	ПечатнаяФорма.Вставить("ТОРГ12", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Ложь);
	ПараметрыПечатнойФормы.Вставить("ДополнитьПолученнымиСчетамиФактуры", Истина);
	ПечатнаяФорма.Вставить("СчетФактура", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Истина);
	ПараметрыПечатнойФормы.Вставить("ДополнитьПолученнымиСчетамиФактуры", Истина);
	ПечатнаяФорма.Вставить("СчетФактураВВалюте", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.ВозвратТоваровМеждуОрганизациями", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("ВозвратОтКлиента", Неопределено);
	ПечатнаяФорма.Вставить("ЗаявлениеНаВозвратТоваровОтКлиента", Неопределено);
	ОбъектыДляОбработки.Вставить("Документ.ВозвратТоваровОтКлиента", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("ВозвратПоставщику", Неопределено);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ВыводитьУслуги", Истина);
	ПечатнаяФорма.Вставить("ТОРГ12", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Ложь);
	ПечатнаяФорма.Вставить("СчетФактура", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Истина);
	ПечатнаяФорма.Вставить("СчетФактураВВалюте", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.ВозвратТоваровПоставщику", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("ЗаказКлиента", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПечатнаяФорма.Вставить("ЗаказКлиента.ЗаказКлиентаБезСкидок", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьФаксимиле", Истина);
	ПечатнаяФорма.Вставить("СчетНаОплату", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПараметрыПечатнойФормы.Вставить("ОтображатьФаксимиле", Истина);
	ПечатнаяФорма.Вставить("СчетНаОплату.СчетНаОплатуБезСкидок", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("СчетНаОплату", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПечатнаяФорма.Вставить("СчетНаОплату.СчетНаОплатуБезСкидок", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.ЗаказКлиента", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("Тип", "ЗаказПоставщику");
	ПечатнаяФорма.Вставить("ЗаказПоставщику", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.ЗаказПоставщику", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("ЗаявкаНаВозврат", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПечатнаяФорма.Вставить("ЗаявкаНаВозврат.ЗаявкаНаВозвратБезСкидок", ПараметрыПечатнойФормы);
	ПечатнаяФорма.Вставить("ЗаявлениеНаВозвратТоваровОтКлиента", Неопределено);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьФаксимиле", Истина);
	ПечатнаяФорма.Вставить("СчетНаОплату", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПараметрыПечатнойФормы.Вставить("ОтображатьФаксимиле", Истина);
	ПечатнаяФорма.Вставить("СчетНаОплату.СчетНаОплатуБезСкидок", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("СчетНаОплату", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПечатнаяФорма.Вставить("СчетНаОплату.СчетНаОплатуБезСкидок", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.ЗаявкаНаВозвратТоваровОтКлиента", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("КоммерческоеПредложение", Неопределено);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПечатнаяФорма.Вставить("КоммерческоеПредложение", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.КоммерческоеПредложениеКлиенту", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("Накладная", ПараметрыПечатнойФормы);
	ПечатнаяФорма.Вставить("РеестрНомеровГТД", Неопределено);
	ОбъектыДляОбработки.Вставить("Документ.КорректировкаРеализации", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("ОтчетКомиссионера", Неопределено);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Ложь);
	ПечатнаяФорма.Вставить("СчетФактура", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Истина);
	ПечатнаяФорма.Вставить("СчетФактураВВалюте", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.ОтчетКомиссионера", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ОбъектыДляОбработки.Вставить("Документ.ОтчетКомиссионераОСписании", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Ложь);
	ПечатнаяФорма.Вставить("СчетФактура", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Истина);
	ПечатнаяФорма.Вставить("СчетФактураВВалюте", ПараметрыПечатнойФормы);
	ПечатнаяФорма.Вставить("ОтчетКомиссионера", Неопределено);
	ОбъектыДляОбработки.Вставить("Документ.ОтчетКомитенту", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("ОтчетКомиссионераСписание", Неопределено);
	ОбъектыДляОбработки.Вставить("Документ.ОтчетКомитентуОСписании", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("ОтчетКомиссионера", Неопределено);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ВидФормы", "Комитент");
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Ложь);
	ПараметрыПечатнойФормы.Вставить("ДополнитьПолученнымиСчетамиФактуры", Ложь);
	ПечатнаяФорма.Вставить("СчетФактура", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ВидФормы", "Комитент");
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Ложь);
	ПараметрыПечатнойФормы.Вставить("ДополнитьПолученнымиСчетамиФактуры", Ложь);
	ПечатнаяФорма.Вставить("СчетФактураВВалюте", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ВидФормы", "Комиссионер");
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Ложь);
	ПараметрыПечатнойФормы.Вставить("ДополнитьПолученнымиСчетамиФактуры", Истина);
	ПечатнаяФорма.Вставить("СчетФактура", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ВидФормы", "Комиссионер");
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Ложь);
	ПараметрыПечатнойФормы.Вставить("ДополнитьПолученнымиСчетамиФактуры", Истина);
	ПечатнаяФорма.Вставить("СчетФактураВВалюте", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.ОтчетПоКомиссииМеждуОрганизациями", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("М15", Неопределено);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ВыводитьУслуги", Истина);
	ПечатнаяФорма.Вставить("ТОРГ12", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Ложь);
	ПараметрыПечатнойФормы.Вставить("ДополнитьПолученнымиСчетамиФактуры", Истина);
	ПечатнаяФорма.Вставить("СчетФактура", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Истина);
	ПараметрыПечатнойФормы.Вставить("ДополнитьПолученнымиСчетамиФактуры", Истина);
	ПечатнаяФорма.Вставить("СчетФактураВВалюте", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("Акт", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.ПередачаТоваровМеждуОрганизациями", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("Накладная", ПараметрыПечатнойФормы);
	ПечатнаяФорма.Вставить("ПриходнаяНакладная", Неопределено);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("Акт", ПараметрыПечатнойФормы);
	ПечатнаяФорма.Вставить("М4", Неопределено);
	ПечатнаяФорма.Вставить("ТОРГ4", Неопределено);
	ОбъектыДляОбработки.Вставить("Документ.ПоступлениеТоваровУслуг", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("КО1", Неопределено);
	ОбъектыДляОбработки.Вставить("Документ.ПриходныйКассовыйОрдер", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("КО2", Неопределено);
	ОбъектыДляОбработки.Вставить("Документ.РасходныйКассовыйОрдер", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("Акт", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПечатнаяФорма.Вставить("Акт.АктБезСкидок", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("Накладная", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПечатнаяФорма.Вставить("Накладная.НакладнаяБезСкидок", ПараметрыПечатнойФормы);
	ПечатнаяФорма.Вставить("РасходнаяНакладная", Неопределено);
	ПечатнаяФорма.Вставить("РеестрНомеровГТД", Неопределено);
	ПечатнаяФорма.Вставить("М15", Неопределено);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ВыводитьУслуги", Истина);
	ПечатнаяФорма.Вставить("ТОРГ12", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ВыводитьУслуги", Ложь);
	ПечатнаяФорма.Вставить("ТОРГ12.Торг12БезУслуг", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ВыводитьУслуги", Ложь);
	ПараметрыПечатнойФормы.Вставить("ВыводитьГТД", Истина);
	ПечатнаяФорма.Вставить("ТОРГ12.Торг12ГТД", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Ложь);
	ПечатнаяФорма.Вставить("СчетФактура", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Истина);
	ПечатнаяФорма.Вставить("СчетФактураВВалюте", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьФаксимиле", Истина);
	ПечатнаяФорма.Вставить("СчетНаОплату", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПараметрыПечатнойФормы.Вставить("ОтображатьФаксимиле", Истина);
	ПечатнаяФорма.Вставить("СчетНаОплату.СчетНаОплатуБезСкидок", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("СчетНаОплату", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПечатнаяФорма.Вставить("СчетНаОплату.СчетНаОплатуБезСкидок", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.РеализацияТоваровУслуг", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("М15", Неопределено);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ВыводитьУслуги", Истина);
	ПечатнаяФорма.Вставить("ТОРГ12", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Ложь);
	ПечатнаяФорма.Вставить("СчетФактура", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВВалюте", Истина);
	ПечатнаяФорма.Вставить("СчетФактураВВалюте", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("Акт", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.РеализацияУслугПрочихАктивов", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("АктСверкиВзаимныхРасчетов", Неопределено);
	ПечатнаяФорма.Вставить("АктСДаннымиКонтрагента", Неопределено);
	ОбъектыДляОбработки.Вставить("Документ.СверкаВзаиморасчетов", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПечатнаяФорма.Вставить("ПлатежноеПоручение", Неопределено);
	ОбъектыДляОбработки.Вставить("Документ.СписаниеБезналичныхДенежныхСредств", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьФаксимиле", Истина);
	ПечатнаяФорма.Вставить("СчетНаОплату", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПараметрыПечатнойФормы.Вставить("ОтображатьФаксимиле", Истина);
	ПечатнаяФорма.Вставить("СчетНаОплату.СчетНаОплатуБезСкидок", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Истина);
	ПечатнаяФорма.Вставить("СчетНаОплату", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ОтображатьСкидки", Ложь);
	ПечатнаяФорма.Вставить("СчетНаОплату.СчетНаОплатуБезСкидок", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.СчетНаОплатуКлиенту", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВНоменклатуреПоставщика", Ложь);
	ПечатнаяФорма.Вставить("Торг1", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВНоменклатуреПоставщика", Ложь);
	ПечатнаяФорма.Вставить("Торг2", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.АктОРасхожденияхПослеОтгрузки", ПечатнаяФорма);
	
	ПечатнаяФорма = Новый Соответствие;
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВНоменклатуреПоставщика", ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков"));
	ПечатнаяФорма.Вставить("Торг1", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВНоменклатуреПоставщика", ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков"));
	ПечатнаяФорма.Вставить("Торг2", ПараметрыПечатнойФормы);
	ПараметрыПечатнойФормы = Новый Структура;
	ПараметрыПечатнойФормы.Вставить("ПечатьВНоменклатуреПоставщика", ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков"));
	ПечатнаяФорма.Вставить("Торг3", ПараметрыПечатнойФормы);
	ОбъектыДляОбработки.Вставить("Документ.АктОРасхожденияхПослеПриемки", ПечатнаяФорма);
	
	Возврат ОбъектыДляОбработки;
	
КонецФункции

Функция СодержимоеСтруктурОдинаковое(ПерваяСтруктура, ВтораяСтруктура)
	
	Для каждого КлючИЗначение Из ПерваяСтруктура Цикл
		Если ПерваяСтруктура.Свойство("ДополнитьКомплектВнешнимиПечатнымиФормами") Тогда
			Продолжить;
		КонецЕсли;
		Если ВтораяСтруктура.Свойство(КлючИЗначение.Ключ) Тогда
			Если КлючИЗначение.Значение <> ВтораяСтруктура[КлючИЗначение.Ключ] Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОпределитьСписокПечатныхФорм(МетаданныеОбъект)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		ИсточникиКомандПечати = МодульУправлениеПечатью.ИсточникиКомандПечати();
		Если ИсточникиКомандПечати.Найти(МетаданныеОбъект) <> Неопределено Тогда
			КомандыПечатиОбъекта = МодульУправлениеПечатью.КомандыПечатиОбъектаДоступныеДляВложений(МетаданныеОбъект);
			Возврат КомандыПечатиОбъекта ;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура ЗарегистироватьКОбработкеНаборыДопСвойств(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Предопределенный
	|	И НЕ НаборыДополнительныхРеквизитовИСведений.Используется
	|	И НЕ НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных В(&СписокИсключений)";
	
	СписокИсключений = Новый Массив;
	СписокИсключений.Добавить("Документ_ЗаказНаПроизводство");
	СписокИсключений.Добавить("Документ_МаршрутныйЛистПроизводства");
	//++ НЕ УТ
	СписокИсключений.Добавить("Документ_ЗаказНаПроизводство2_2");
	СписокИсключений.Добавить("Документ_ЭтапПроизводства2_2");
	//-- НЕ УТ
	
	Запрос.УстановитьПараметр("СписокИсключений", СписокИсключений);
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

Процедура ОбработатьНаборыДопСвойств(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			НаборОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НаборОбъект.Используется = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборОбъект);
			
			ЗафиксироватьТранзакцию();			
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#Область ОбновлениеКонстантыИспользоватьУправлениеПеремещениемОбособленныхТоваров

Процедура ИспользоватьУправлениеПеремещениемОбособленныхТоваровЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ИспользоватьУправлениеПеремещениемОбособленныхТоваровОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|ГДЕ
		|	НаправленияДеятельности.УчетЗатрат
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Константа.РазрешитьОбособлениеТоваровСверхПотребности КАК РазрешитьОбособлениеТоваровСверхПотребности
		|ГДЕ
		|	РазрешитьОбособлениеТоваровСверхПотребности.Значение
		|;
		|ВЫБРАТЬ
		|	ИспользоватьУправлениеПеремещениемОбособленныхТоваров.Значение КАК Значение
		|ИЗ
		|	Константа.ИспользоватьУправлениеПеремещениемОбособленныхТоваров КАК ИспользоватьУправлениеПеремещениемОбособленныхТоваров";
		
	ОбработкаЗавершена = Истина;
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НаправленияДеятельности");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки = Блокировка.Добавить("Константа.РазрешитьОбособлениеТоваровСверхПотребности");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьУправлениеПеремещениемОбособленныхТоваров");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		НовоеЗначение = Не ПакетРезультатов[0].Пустой();
		Выборка = ПакетРезультатов[1].Выбрать();
		Выборка.Следующий();
		СтароеЗначение = Выборка.Значение;
		
		МенеджерКонстанты = Константы.ИспользоватьУправлениеПеремещениемОбособленныхТоваров.СоздатьМенеджерЗначения();
		
		Если НовоеЗначение <> СтароеЗначение Тогда
			
			Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, "Справочник.НаправленияДеятельности") Тогда
				
				ОбработкаЗавершена = Ложь;
				
			Иначе
				
				МенеджерЗначения = Константы.ИспользоватьУправлениеПеремещениемОбособленныхТоваров.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = НовоеЗначение;
				МенеджерЗначения.ОбменДанными.Загрузка = Истина;
				МенеджерЗначения.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОбработкаЗавершена = Ложь;
		
		Шаблон = НСтр("ru='Не удалось установить значение константы ""Использовать управление перемещением обособленных товаров"" по причине: %1';uk='Не вдалося встановити значення константи ""Використовувати управління переміщенням відокремлених товарів"" по причині: %1'");
		ТекстСообщения = СтрШаблон(Шаблон, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Константы.ИспользоватьУправлениеПеремещениемОбособленныхТоваров,
			,
			ТекстСообщения);
			
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

Процедура ИнициализироватьПорядокОформленияВыкупаПриСписанииТоваров_ОтметитьКОбработке(Параметры) Экспорт

	Возврат;
	
КонецПроцедуры

Процедура ИнициализироватьПорядокОформленияВыкупаПриСписанииТоваров(Параметры) Экспорт
	
	Если Константы.УдалитьПорядокОформленияВыкупаПриСписанииТоваров.Получить() = Перечисления.НастройкиОформленияВыкупаПриСписанииТоваров.ПустаяСсылка() Тогда
		МенеджерЗначения = Константы.УдалитьПорядокОформленияВыкупаПриСписанииТоваров.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.НастройкиОформленияВыкупаПриСписанииТоваров.ПриФактическомПотреблении;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#Область УстановкаКонстанты_ВалютыУпрИРеглУчетаСовпадают

Процедура ВалютыУпрИРеглУчетаСовпадают_ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ВалютыУпрИРеглУчетаСовпадают_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ЗначениеКонстанты = (Константы.ВалютаУправленческогоУчета.Получить() = Константы.ВалютаРегламентированногоУчета.Получить());
	
	МенеджерЗначения = Константы.ВалютыУпрИРеглУчетаСовпадают.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = ЗначениеКонстанты;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ПериодыРезервовТоваровОрганизацийАктуальны

Процедура ПериодыРезервовТоваровОрганизацийАктуальны_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ПериодыРезервовТоваровОрганизацийАктуальны_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.ПериодыРезервовТоваровОрганизацийАктуальны");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		МенеджерКонстанты = Константы.ПериодыРезервовТоваровОрганизацийАктуальны.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Ложь;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОбработкаЗавершена = Ложь;
		
		Шаблон = НСтр("ru='Не удалось установить значение константы ""Периоды резервов товаров организаций актуальны"" по причине: %1';uk='Неможливо встановити значення константи ""Періоди резервів товарів організацій актуальні"" по причині: %1'");
		ТекстСообщения = СтрШаблон(Шаблон, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Константы.ПериодыРезервовТоваровОрганизацийАктуальны,
			,
			ТекстСообщения);
			
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_НеНоваяАрхитектураВзаиморасчетов

Процедура НеНоваяАрхитектураВзаиморасчетов_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура НеНоваяАрхитектураВзаиморасчетов_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	НеНоваяАрхитектураВзаиморасчетов = Константы.НеНоваяАрхитектураВзаиморасчетов.Получить();
	НоваяАрхитектураВзаиморасчетов = Константы.НоваяАрхитектураВзаиморасчетов.Получить();
	Если НЕ НоваяАрхитектураВзаиморасчетов И НЕ НеНоваяАрхитектураВзаиморасчетов Тогда
		МенеджерЗначения = Константы.НеНоваяАрхитектураВзаиморасчетов.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Истина
	
КонецПроцедуры   

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьОтчетРасчетыМеждуОрганизациями

Процедура ИспользоватьОтчетРасчетыМеждуОрганизациями_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИспользоватьОтчетРасчетыМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИспользоватьПередачиТоваровМеждуОрганизациями = Константы.ИспользоватьПередачиТоваровМеждуОрганизациями.Получить();
	НеНоваяАрхитектураВзаиморасчетов = Константы.НеНоваяАрхитектураВзаиморасчетов.Получить();
	Если НеНоваяАрхитектураВзаиморасчетов И ИспользоватьПередачиТоваровМеждуОрганизациями Тогда
		МенеджерЗначения = Константы.ИспользоватьОтчетРасчетыМеждуОрганизациями.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Истина
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьОтчетВедомостьРасчетовМеждуОрганизациями

Процедура ИспользоватьОтчетВедомостьРасчетовМеждуОрганизациями_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИспользоватьОтчетВедомостьРасчетовМеждуОрганизациями_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИспользоватьПередачиТоваровМеждуОрганизациями = Константы.ИспользоватьПередачиТоваровМеждуОрганизациями.Получить();
	НоваяАрхитектураВзаиморасчетов = Константы.НоваяАрхитектураВзаиморасчетов.Получить();
	Если НоваяАрхитектураВзаиморасчетов И ИспользоватьПередачиТоваровМеждуОрганизациями Тогда
		МенеджерЗначения = Константы.ИспользоватьОтчетВедомостьРасчетовМеждуОрганизациями.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Истина
	
КонецПроцедуры        

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьУчетНДС

Процедура ИспользоватьУчетНДС_ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИспользоватьУчетНДС_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МенеджерЗначения = Константы.ИспользоватьУчетНДС.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

Процедура ОтметитьКонстантыКОбработке(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура УстановитьВариантыОбособления() Экспорт
	
	ЗначениеКонстанты = Константы.ВариантОбособленияТоваровВоВнутреннемПотреблении.Получить();
	Если Не ЗначениеЗаполнено(ЗначениеКонстанты)
		Или (ПолучитьФункциональнуюОпцию("УправлениеТорговлей")
			И ЗначениеКонстанты = Перечисления.ВариантыОбособленияТоваровВоВнутреннемПотреблении.НаправлениеДеятельности) Тогда
		МенеджерЗначения = Константы.ВариантОбособленияТоваровВоВнутреннемПотреблении.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияТоваровВоВнутреннемПотреблении.ЗаказНаВнутреннееПотребление;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	ЗначениеКонстанты = Константы.ВариантОбособленияТоваровВПеремещении.Получить();
	Если Не ЗначениеЗаполнено(ЗначениеКонстанты) Тогда
		МенеджерЗначения = Константы.ВариантОбособленияТоваровВПеремещении.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияТоваровВПеремещении.НазначениеПолучателя;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	ИначеЕсли ПолучитьФункциональнуюОпцию("УправлениеТорговлей")
			И ЗначениеКонстанты = Перечисления.ВариантыОбособленияТоваровВПеремещении.НаправлениеДеятельности Тогда
		МенеджерЗначения = Константы.ВариантОбособленияТоваровВПеремещении.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияТоваровВПеремещении.ЗаказНаПеремещение;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	ЗначениеКонстанты = Константы.ВариантОбособленияТоваровВПродажах.Получить();
	Если Не ЗначениеЗаполнено(ЗначениеКонстанты)
		Или (ПолучитьФункциональнуюОпцию("УправлениеТорговлей")
			И ЗначениеКонстанты = Перечисления.ВариантыОбособленияТоваровВПродажах.НаправлениеДеятельности) Тогда
		МенеджерЗначения = Константы.ВариантОбособленияТоваровВПродажах.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияТоваровВПродажах.ЗаказКлиента;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	ЗначениеКонстанты = Константы.ВариантОбособленияТоваровВСборке.Получить();
	Если Не ЗначениеЗаполнено(ЗначениеКонстанты) Тогда
		МенеджерЗначения = Константы.ВариантОбособленияТоваровВСборке.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияТоваровВСборке.НазначениеСобираемогоКомплекта;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	ИначеЕсли ПолучитьФункциональнуюОпцию("УправлениеТорговлей")
			И ЗначениеКонстанты = Перечисления.ВариантыОбособленияТоваровВСборке.НаправлениеДеятельности Тогда
		МенеджерЗначения = Константы.ВариантОбособленияТоваровВСборке.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияТоваровВСборке.ЗаказНаСборку;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИспользоватьРасширенноеОбеспечениеПотребностей() Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		И Константы.ИспользоватьРасширенноеОбеспечениеПотребностей.Получить() Тогда
		МенеджерЗначения = Константы.ИспользоватьРасширенноеОбеспечениеПотребностей.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Ложь;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		И Не Константы.НеИспользоватьРасширенноеОбеспечениеПотребностей.Получить() Тогда
		МенеджерЗначения = Константы.НеИспользоватьРасширенноеОбеспечениеПотребностей.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВариантУчетаСезонныхКолебаний(Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Константы.ВариантУчетаСезонныхКолебаний.Получить()) Тогда
		МенеджерЗначения = Константы.ВариантУчетаСезонныхКолебаний.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.УчетСезонныхКолебаний.НеУчитывать;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#Область УстановкаКонстанты_ДатаНачалаПечатиЕдиногоАвансовогоОтчета

Процедура ДатаНачалаПечатиЕдиногоАвансовогоОтчета_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ДатаНачалаПечатиЕдиногоАвансовогоОтчета_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МенеджерЗначения = Константы.ДатаНачалаПечатиЕдиногоАвансовогоОтчета.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = ТекущаяДатаСеанса();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета

Процедура ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МенеджерЗначения = Константы.ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти



#КонецОбласти

#КонецОбласти
