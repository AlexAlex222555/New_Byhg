///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
// Здесь можно разместить любую нестандартную логику обновления данных - например,
// иначе проинициализировать сведения о версиях тех или иных подсистем
// с помощью ОбновлениеИнформационнойБазы.ВерсияИБ, ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ,
// и ОбновлениеИнформационнойБазы.ЗарегистрироватьНовуюПодсистему.
//
// Пример:
//  Для того чтобы отменить штатную процедуру перехода с другой программы, регистрируем 
//  сведения о том, что основная конфигурации уже актуальной версии:
//  ВерсииПодсистем = ОбновлениеИнформационнойБазы.ВерсииПодсистем();
//  Если ВерсииПодсистем.Количество() > 0 И ВерсииПодсистем.Найти(Метаданные.Имя, "ИмяПодсистемы") = Неопределено Тогда
//    ОбновлениеИнформационнойБазы.ЗарегистрироватьНовуюПодсистему(Метаданные.Имя, Метаданные.Версия);
//  КонецЕсли;
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	//++ НЕ ГОСИС
	
	ВерсииПодсистем = ОбновлениеИнформационнойБазы.ВерсииПодсистем();
	
	Если ВерсииПодсистем.Количество() > 0 Тогда
	//++ НЕ УТ
		Если ВерсииПодсистем.Найти(Метаданные.Имя, "ИмяПодсистемы") = Неопределено Тогда
			
			ОбновлениеИнформационнойБазы.ЗарегистрироватьНовуюПодсистему(Метаданные.Имя, Метаданные.Версия);
			
		КонецЕсли;
	//++ НЕ БЗК	
		Если ВерсииПодсистем.Найти("КомплекснаяАвтоматизация", "ИмяПодсистемы") = Неопределено И Метаданные.Имя = "УправлениеПредприятием" Тогда
			
			Описание = Новый Структура("Имя,Версия,РежимВыполненияОтложенныхОбработчиков,ИдентификаторИнтернетПоддержки");
			
			ОбновлениеИнформационнойБазыКА.ПриДобавленииПодсистемы(Описание);
			
			ОбновлениеИнформационнойБазы.ЗарегистрироватьНовуюПодсистему(Описание.Имя, Описание.Версия);
			
		КонецЕсли;
	//-- НЕ БЗК	
	//-- НЕ УТ
		
		Если ВерсииПодсистем.Найти("Локализация", "ИмяПодсистемы") = Неопределено Тогда
			
			Описание = Новый Структура("Имя,Версия,РежимВыполненияОтложенныхОбработчиков,ИдентификаторИнтернетПоддержки");
			
			ОбновлениеИнформационнойБазыЛокализация.ПриДобавленииПодсистемы(Описание);
			
			ОбновлениеИнформационнойБазы.ЗарегистрироватьНовуюПодсистему(Описание.Имя, "2.5.1.0");
			
		КонецЕсли;
		
	КонецЕсли;
	
	//-- НЕ ГОСИС

КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// В зависимости от тех или иных условий можно отключить штатное открытие формы
// с описанием изменений в новой версии программы при первом входе в нее (после обновления),
// а также выполнить другие действия.
//
// Не рекомендуется выполнять в данной процедуре какую-либо обработку данных.
// Такие процедуры следует оформлять штатными обработчиками обновления, выполняемыми на каждую версию "*".
// 
// Параметры:
//   ПредыдущаяВерсияИБ     - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсияИБ        - Строка - версия после обновления. Как правило, соответствует Метаданные.Версия.
//   ИтерацииОбновления     - Массив - массив структур, описывающих сведения об обновлении каждой
//                                     библиотеки и конфигурации, с ключами:
//       * Подсистема              - Строка - имя библиотеки или конфигурации.
//       * Версия                  - Строка - например, "2.1.3.39". Номер версии библиотеки (конфигурации).
//       * ЭтоОсновнаяКонфигурация - Булево - Истина, если это основная конфигурация, а не библиотека.
//       * Обработчики             - ТаблицаЗначений - все обработчики обновления библиотеки, описание колонок
//                                   см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ВыполненныеОбработчики  - ДеревоЗначений - выполненные обработчики обновления, сгруппированные по
//                                   библиотеке и номеру версии, описание колонок
//                                   см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ИмяОсновногоСерверногоМодуля - Строка - имя модуля библиотеки (конфигурации), который предоставляет
//                                        основные сведения о ней: имя, версия и т.д.
//       * ОсновнойСерверныйМодуль      - ОбщийМодуль - общий модуль библиотеки (конфигурации), который предоставляет
//                                        основные сведения о ней: имя, версия и т.д.
//       * ПредыдущаяВерсия             - Строка - например, "2.1.3.30". Номер версии библиотеки (конфигурации) до обновления.
//   ВыводитьОписаниеОбновлений - Булево - если установить Ложь, то не будет открыта форма
//                                с описанием изменений в новой версии программы. По умолчанию Истина.
//   МонопольныйРежим           - Булево - признак того, что обновление выполнилось в монопольном режиме.
//
// Пример:
//  Для обхода выполненных обработчиков обновления:
//  Для Каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
//  	Для Каждого Версия Из ИтерацияОбновления.ВыполненныеОбработчики.Строки Цикл
//  		
//  		Если Версия.Версия = "*" Тогда
//  			// Группа обработчиков, которые выполняются регулярно при каждой смене версии.
//  		Иначе
//  			// Группа обработчиков, которые выполнились для определенной версии.
//  		КонецЕсли;
//  		
//  		Для Каждого Обработчик Из Версия.Строки Цикл
//  			...
//  		КонецЦикла;
//  		
//  	КонецЦикла;
//  КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсияИБ, Знач ТекущаяВерсияИБ,
	Знач ИтерацииОбновления, ВыводитьОписаниеОбновлений, Знач МонопольныйРежим) Экспорт
	
	
КонецПроцедуры

// Вызывается при подготовке документа с описанием изменений в новой версии программы,
// которое выводится пользователю при первом входе в программу (после обновления).
//
// Параметры:
//   Макет - ТабличныйДокумент - описание изменений в новой версии программы, автоматически
//                               сформированное из общего макета ОписаниеИзмененийСистемы.
//                               Макет можно программно модифицировать или заменить на другой.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить очередь отложенных обработчиков обновления, выполняемых в
// параллельном режиме. Может понадобиться, когда отложенные обработчики библиотек
// обрабатывают те же данные, что и обработчики основной конфигурации.
// Например, есть обработчики библиотеки и конфигурации, которые обрабатывают справочник
// Контрагенты, при этом обработчик конфигурации должен выполниться раньше, чтобы данные
// обновились корректно. В таком случае в данной процедуре нужно указать новый номер очереди
// для обработчика библиотеки, который будет больше, чем у обработчика конфигурации.
//
// Параметры:
//  ОбработчикИОчередь - Соответствие - где:
//    * Ключ     - Строка - полное имя обработчика обновления.
//    * Значение - Число  - номер очереди, который необходимо установить обработчику.
//
Процедура ПриФормированииОчередейОтложенныхОбработчиков(ОбработчикИОчередь) Экспорт

	

КонецПроцедуры

// Вызывается перед формирование списка отложенных обработчиков.
//
// Параметры:
//   ИтерацииОбновления - Структура - описание обработчиков обновления:
//     * Подсистема - строка - имя бибиотеки
//     * Версия" - Строка - версия библиотеки
//     * ЭтоОсновнаяКонфигурация - Булево - признак основной конфигурации
//     * Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления()
//     * ВыполненныеОбработчики - Массив из Строка
//     * ИмяОсновногоСерверногоМодуля - Строка - имя модуля библиотеки с описанием обработчиков обновления.
//     * ОсновнойСерверныйМодуль - ОбъектМетаданных - ссылка на серверный модуль
//     * ПредыдущаяВерсия - Строка - версия библиотеки
//
Процедура ПередФормированиеСпискаОтложенныхОбработчиков(ИтерацииОбновления) Экспорт
	
	Обработки.ОписаниеОбработчиковОбновления.ЗаполнитьНомерОчереди(ИтерацииОбновления);
	
КонецПроцедуры

// Позволяет переопределить различные сообщения, выводимые пользователю.
// 
// Параметры:
//  Параметры - Структура - со свойствами:
//    * ПоясненияДляРезультатовОбновления - Строка - текст подсказки, указывающий путь
//                                          к форме "Результаты обновления программы".
//    * ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках - Структура - сообщение о
//                                          наличии невыполненных отложенных обработчиков обновления
//                                          на прошлую версию при попытке обновления.
//       * ТекстСообщения                 - Строка - текст сообщения, выводимый пользователю. По умолчанию
//                                          текст сообщения построен с учетом того, что обновление можно
//                                          продолжить, т.е. параметр ЗапрещатьПродолжение = Ложь.
//       * КартинкаСообщения              - БиблиотекаКартинок: Картинка - картинка, выводимая слева от сообщения.
//       * ЗапрещатьПродолжение           - Булево - если Истина, продолжить обновление будет невозможно. По умолчанию Ложь.
//    * РасположениеОписанияИзмененийПрограммы - Строка - описывает расположение команды, по которой можно
//                                          открыть форму с описанием изменений в новой версии программы.
//    * МногопоточноеОбновление           - Булево - если Истина, то в один момент времени могут выполняться сразу
//                                          несколько обработчиков обновления. По умолчанию - Ложь.
//                                          Это влияет как на количество потоков выполнения обработчиков обновления,
//                                          так и количество потоков регистрации данных для обновления.
//                                          ВАЖНО: перед включением ознакомьтесь с документацией.
//    * КоличествоПотоковОбновленияИнформационнойБазыПоУмолчанию - Строка - количество потоков отложенного обновления
//                                          используемое, когда не задано значение для константы
//                                          КоличествоПотоковОбновленияИнформационнойБазы. По умолчанию равно 1.
//
Процедура ПриОпределенииНастроек(Параметры) Экспорт
	
	//++ НЕ ГОСИС
	Параметры.Вставить("ПоясненияДляРезультатовОбновления", НСтр("ru='Сведения о результатах обновления версии программы можно также открыть из раздела ""НСИ и администрирование"" - ""Интернет-поддержка пользователей"".';uk='Відомості про результати оновлення версії програми можна також відкрити з розділу ""НДІ і адміністрування"" - ""Інтернет-підтримка користувачів"".'"));
	//-- НЕ ГОСИС
	
	Параметры.Вставить("МногопоточноеОбновление", Истина);
	Параметры.Вставить("КоличествоПотоковОбновленияИнформационнойБазыПоУмолчанию", 8);
		
	Объекты = Параметры.ОбъектыСНачальнымЗаполнением;
	Объекты.Добавить(Метаданные.Справочники.Организации);
    //++ НЕ БЗК
	Объекты.Добавить(Метаданные.Справочники.Контрагенты);
	Объекты.Добавить(Метаданные.Справочники.НастройкиХозяйственныхОпераций);
	Объекты.Добавить(Метаданные.Справочники.Партнеры);
	Объекты.Добавить(Метаданные.Справочники.ПричиныОтменыЗаказовПоставщикам); 
	//++ НЕ УТ
	Объекты.Добавить(Метаданные.Справочники.СтатьиКалькуляции); 
	Объекты.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов); 
	//-- НЕ УТ
	Объекты.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов);
	Объекты.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиДоходов);
	Объекты.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов);
	//-- НЕ БЗК
	
	ОбновлениеИнформационнойБазыЛокализация.ПриОпределенииНастроек(Параметры);
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Вызывается для получения списка обработчиков обновления, вызов которых нужно пропустить.
// Отключать можно только обработчики обновления с номером версии "*".
//
// Параметры:
//  ОтключаемыеОбработчики - ТаблицаЗначений - с колонками:
//     * ИдентификаторБиблиотеки - Строка - имя конфигурации или идентификатор библиотеки.
//     * Версия -                - Строка - номер версии конфигурации, в которой нужно отключить
//                                          выполнение обработчика.
//     * Процедура -             - Строка - имя процедуры обработчика обновления,
//                                          которого необходимо отключить.
//
// Пример:
//   НовоеИсключение = ОтключаемыеОбработчики.Добавить();
//   НовоеИсключение.ИдентификаторБиблиотеки = "СтандартныеПодсистемы";
//   НовоеИсключение.Версия = "*";
//   НовоеИсключение.Процедура = "ВариантыОтчетов.Обновить";
//
Процедура ПриОтключенииОбработчиковОбновления(ОтключаемыеОбработчики) Экспорт
	
КонецПроцедуры

#КонецОбласти 


Процедура ДобавитьПриоритетыОбработатьДанныеДляГенерацииНазначений(ПриоритетыВыполнения, Порядок, Исключения = Неопределено) Экспорт 
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = Порядок;    
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = Порядок;    
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = Порядок; 
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = Порядок;

	
	ОбработатьИсключенияПриоритетов(ПриоритетыВыполнения, Исключения, "ОбработатьДанныеДляГенерацииНазначений");
	
КонецПроцедуры	   

Процедура ДобавитьПриоритетыСгенерироватьКлючиАналитикиНоменклатуры(ПриоритетыВыполнения, Порядок, Исключения = Неопределено) Экспорт 
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатков.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВнутреннееПотреблениеТоваров.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаНазначенияТоваров.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаНалоговогоНазначенияЗапасов.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОприходованиеИзлишковТоваров.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПеремещениеТоваров.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПересортицаТоваров.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПорчаТоваров.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПрочееОприходованиеТоваров.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеНедостачТоваров.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;

	//++ НЕ УТ
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратМатериаловИзПроизводства.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратСырьяОтПереработчика.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыпускПродукции.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаМатериаловВПроизводство.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаСырьяПереработчику.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеОтПереработчика.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеЗатратНаВыпуск.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = Порядок;
	//-- НЕ УТ
	
	
	ОбработатьИсключенияПриоритетов(ПриоритетыВыполнения, Исключения, "СгенерироватьКлючиАналитикиНоменклатуры");
	
КонецПроцедуры	   

Процедура ДобавитьПриоритетыСгенерироватьОбъектыРасчетов(ПриоритетыВыполнения, Порядок, Исключения = Неопределено) Экспорт 
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АвансовыйОтчет.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупВозвратнойТарыКлиентом.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупВозвратнойТарыУПоставщика.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОперацияПоПлатежнойКарте.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомиссионера.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомиссионераОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитенту.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитентуОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПервичныйДокумент.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеБезналичныхДенежныхСредств.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеУслугПрочихАктивов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйКассовыйОрдер.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РасходныйКассовыйОрдер.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияУслугПрочихАктивов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Контрагенты.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;
	
	//++ НЕ УТ
	//++ Локализация
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыбытиеДенежныхДокументов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеДенежныхДокументов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;
	//-- Локализация
	
	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;

	НоваяСтрока = ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = Порядок;
	//-- НЕ УТ
	
	
	ОбработатьИсключенияПриоритетов(ПриоритетыВыполнения, Исключения, "СгенерироватьОбъектыРасчетов");
	
КонецПроцедуры	   

Процедура ОбработатьИсключенияПриоритетов(ПриоритетыВыполнения, Исключения, ИмяПроцедуры)
	
	Если Исключения <> Неопределено Тогда
		Для Каждого СтрокаИсключений Из Исключения Цикл
			СтрокаПоиска = СокрЛП(СтрокаИсключений.ИмяОбъекта) + "." + ИмяПроцедуры;
			СтрокаПриоритета = ПриоритетыВыполнения.Найти(СтрокаПоиска, "Процедура");
			Если СтрокаПриоритета <> Неопределено Тогда 
				НовыйПорядок = СокрЛП(СтрокаИсключений.Порядок);
				Если ВРЕГ(НовыйПорядок) = "УДАЛИТЬ" Тогда
					ПриоритетыВыполнения.Удалить(СтрокаПриоритета);
				Иначе	
					СтрокаПриоритета.Порядок = НовыйПорядок;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	   	

// Возвращает пустую таблицу исключений для дальнейшего вызова функций 
// массового добавления приоритетов обработчиков ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПриоритеты*.
// Для использования в описании обработчиков обновления.
//
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * Порядок       - Строка - новый порядок выполнения обработчика
//                               Допустимые варианты: "До", "После", "Любой", "Удалить" (удаляет строку с именем объекта).
//    * ИмяОбъекта    - Строка - имя объекта, для которого будет применено исключение при массовом добавлении приоритетов обработчиков
//
// Пример:                    
//	Исключения = ОбновлениеИнформационнойБазыПереопределяемый.ИсключенияПриДобавленииПриоритетов();
//	НоваяСтрока = Исключения.Добавить();
//	НоваяСтрока.ИмяОбъекта = "Документы.ЗаказПереработчику";
//	НоваяСтрока.Порядок    = "Удалить";
//	НоваяСтрока = Исключения.Добавить();
//	НоваяСтрока.ИмяОбъекта = "Справочники.НаправленияДеятельности";
//	НоваяСтрока.Порядок    = "После";
Функция ИсключенияПриДобавленииПриоритетов() Экспорт
	
	Исключения = Новый ТаблицаЗначений;
	Исключения.Колонки.Добавить("ИмяОбъекта", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Исключения.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	
	Возврат Исключения;
	
КонецФункции


#КонецОбласти

