////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции, управляющие настройками системы (локализация)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Константы

// Дополняет значения констант в новой ИБ по умолчанию.
//
// Параметры:
// 	Результат - Структура - Дополняемая структура констант
//
Процедура ДополнитьЗначенияКонстантПоУмолчанию(Результат) Экспорт
	
	//++ Локализация
	БазоваяВерсия = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	//++ НЕ БЗК
#Область Финансы
	Результат.Вставить(Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя, НЕ БазоваяВерсия);
#КонецОбласти
	
#Область Партионный_учет
	Результат.Вставить(Метаданные.Константы.ИспользоватьПартионныйУчет.Имя, 		НЕ БазоваяВерсия);
	Результат.Вставить(Метаданные.Константы.ПартионныйУчетВерсии22.Имя, 			НЕ БазоваяВерсия);
#КонецОбласти
    //-- НЕ БЗК

#Область Начисление_Зарплаты
    Результат.Вставить(Метаданные.Константы.ИспользоватьНачислениеЗарплаты.Имя, Ложь); // в BAS УТ
	//++ НЕ УТ
	Результат.Вставить(Метаданные.Константы.ИспользоватьНачислениеЗарплаты.Имя, Истина);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаИУправлениеПерсоналом") Тогда
		Результат.Вставить(Метаданные.Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Имя, Ложь);
		Результат.Вставить(Метаданные.Константы.ИнтерфейсБЗК.Имя, Истина);
	КонецЕсли;	
	//-- НЕ УТ
    
#КонецОбласти

	//++ НЕ БЗК
#Область Изменения_законодательства
#КонецОбласти
	
#Область Розница
	Результат.Вставить(Метаданные.Константы.ОперацияПриЗакрытииКассовойСмены.Имя, Перечисления.ОперацииПриЗакрытииКассовойСмены.Нет);
#КонецОбласти

#Область Закупки
	Результат.Вставить(Метаданные.Константы.ИспользоватьРазделыТаможеннойДекларацииИмпорт.Имя,       Истина);
#КонецОбласти
	
	//++ НЕ УТ
	
#Область Реглучет
	Результат.Вставить(Метаданные.Константы.ИспользоватьРеглУчет.Имя,						  НЕ БазоваяВерсия);
#КонецОбласти

#Область Казначейство
	Результат.Вставить(Метаданные.Константы.МаксимальныйРазмерФайлаПодтверждающегоДокумента.Имя,       40);
	Результат.Вставить(Метаданные.Константы.МаксимальныйРазмерФайлаАрхиваПодтверждающихДокументов.Имя, 100);
#КонецОбласти
	
	//-- НЕ УТ

#Область НДС
	Результат.Вставить(Метаданные.Константы.ИспользоватьУчетНДС.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.НомерЗаданияКФормированиюИсходящихНалоговыхДокументов.Имя, 1);
	Результат.Вставить(Метаданные.Константы.НомерЗаданияКРасчетуНалоговыхОбязательствДополнительно.Имя, 1);
#КонецОбласти

#Область ТМЦВЭксплуатации

	Результат.Вставить(Метаданные.Константы.ИспользоватьТМЦВЭксплуатации.Имя, Истина);

#КонецОбласти

#Область Финансы
	
	Результат.Вставить(Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя, НЕ БазоваяВерсия);
	
#КонецОбласти

#Область Партионный_учет
	Результат.Вставить(Метаданные.Константы.ИспользоватьПартионныйУчет.Имя, НЕ БазоваяВерсия);
	Результат.Вставить(Метаданные.Константы.ПартионныйУчетВерсии22.Имя, НЕ БазоваяВерсия);
#КонецОбласти


	//-- НЕ БЗК
	//-- Локализация
	
	Возврат
	
КонецПроцедуры

// Дополняет значения констант, контролируемых в базовой версии.
//
// Параметры:
// 	Результат - Структура - Дополняемая структура констант
//
Процедура ДополнитьЗначенияКонстантКонтролируемыхВБазовойВерсии(Результат) Экспорт 
	//++ Локализация
	Результат.Вставить(Метаданные.Константы.БазоваяВерсия.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.НеБазоваяВерсия.Имя, Ложь);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ВедетсяРаботаЧерезТорговыхПредставителей.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьABCXYZКлассификациюНоменклатурыПоВаловойПрибыли.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьABCXYZКлассификациюНоменклатурыПоВыручке.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьABCXYZКлассификациюНоменклатурыПоКоличествуПродаж.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьABCXYZКлассификациюПартнеровПоВаловойПрибыли.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьABCXYZКлассификациюПартнеровПоВыручке.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыНаПередачуПрав.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоОтгрузкамТоваровСХранения.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоПередачамХранителю.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПриемкамТоваровНаХранение.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениямТоваровОтХранителя.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьАнкетирование.Имя, Ложь);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьАссортимент.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьБизнесПроцессыИЗадачи.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьБизнесРегионы.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьБюджетирование.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьВерсионированиеОбъектов.Имя, Ложь);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьВидыСвязейМеждуФизическимиЛицами.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВидыСвязейПартнеров.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнешнихПользователей.Имя, Ложь);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьГруппыАналитическогоУчетаНоменклатуры.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьГруппыДоступаНоменклатуры.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьГруппыДоступаПартнеров.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьГруппыПользователей.Имя, Ложь);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьГруппыФинансовогоУчета.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДоговорыКредитовИДепозитов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЕжедневныеОтчеты1СДокументооборота.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЖурналПлатежей.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаданияДляУправленияТорговымиПредставителями.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаданияТорговымПредставителямДляПланирования.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаметки.Имя, Ложь);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗапретОтгрузки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаявкиНаРасходованиеДенежныхСредств.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьИмпортныеЗакупкиТоваровВПути.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьИнтеграциюС1СДокументооборот.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКачествоТоваров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКоммерческиеПредложенияКлиентам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКонкурентнуюРазведку.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЛимитыРасходаДенежныхСредств.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьМаркетинговыеМероприятия.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьМногооборотнуюТару.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьМониторингЦелевыхПоказателей.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНаборы.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьНапоминанияПользователя.Имя, Ложь);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьНачислениеЗарплаты.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоОрганизаций.Имя, Ложь);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьНоменклатуруПродаваемуюСовместно.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНеотфактурованныеПоставки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбобщенныйУчетНекачественныхТоваров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбособленноеОбеспечениеЗаказов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОрдерныеСклады.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОтветственноеХранениеВПроцессеЗакупки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОтгрузкуБезПереходаПраваСобственности.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПервичныйСпрос.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПеремещениеПоНесколькимЗаказам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПеренаправлениеЗадач.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПланированиеЗакупок.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПланированиеПродаж.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПланированиеОстатков.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПланированиеПродажПоКатегориям.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПланированиеСборкиРазборки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПланированиеВнутреннихПотреблений.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСбалансированностьПлановУТ.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПодарочныеСертификаты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПодразделения.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПоступлениеПоНесколькимЗаказам.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьПочтовыйКлиент.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПризнакРассмотрено.Имя, Ложь);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьПродажуАгентскихУслуг.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПроекты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПроизводство.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПроцессыИЗадачи1СДокументооборота.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПрочиеВзаимодействия.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРасширенноеОбеспечениеПотребностей.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРеализациюПоНесколькимЗаказам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРейтингиПродажНоменклатуры.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРолиКонтактныхЛицПартнеров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРолиПартнеровИКонтактныхЛицВСделкахИПроектах.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСвязанныеДокументы1СДокументооборота.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСделкиСКлиентами.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСегментыНоменклатуры.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСегментыПартнеров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСезонныеКоэффициенты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСертификатыНоменклатуры.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСогласованиеЗаказовКлиентов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСогласованиеЗаказовПоставщикам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСогласованиеЗаявокНаВозвратТоваровОтКлиентов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСогласованиеСоглашенийСКлиентами.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСогласованиеЦенНоменклатуры.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыЗаказовНаВнутреннееПотребление.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыЗаказовНаПеремещение.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыЗаказовНаСборку.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыЗаказовПоставщикам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыПеремещенийТоваров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыРеализацийТоваровУслуг.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыСборокТоваров.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСчетаНаОплатуКлиентам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьТоварныеКатегории.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьТоварыВПутиОтПоставщиков.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУпаковочныеЛисты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеДоставкой.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеДоступом.Имя, Ложь);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеКоллекциями.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеСделками.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправленческуюОрганизацию.Имя, Ложь);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьУпрощеннуюСхемуОплатыВЗакупках.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУпрощеннуюСхемуОплатыВПродажах.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ИспользоватьФайловоеХранилище1СДокументооборота.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьФорматыМагазинов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЦеновыеГруппы.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЭлектроннуюПочту1СДокументооборота.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.КонтролироватьПревышениеЛимитовРасходаДенежныхСредств.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НазначатьСкидкиПоКнопкеРасчетВЧекеККМ.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.НезависимоеИспользованиеДополнительныхОтчетовИОбработокВМоделиСервиса.Имя, Ложь);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыКлиентовБезПолнойОплаты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьЖурналПлатежей.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьРасширенноеОбеспечениеПотребностей.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.РазрешитьОбособлениеТоваровСверхПотребности.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ОграничиватьДоступНаУровнеЗаписей.Имя, Ложь);
	//++ НЕ УТ
	Результат.Вставить(Метаданные.Константы.ОграничиватьДоступНаУровнеЗаписейФизическиеЛица.Имя, Ложь);
	//-- НЕ УТ
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ПредлагатьДополнитьДокументыМногооборотнойТарой.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ПроверятьЭлектронныеПодписиНаСервере.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРазделениеПоОбластямДанных.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.РедактироватьАдресаДоставкиТолькоВДиалоге.Имя, Ложь);
	//-- НЕ БЗК
	Результат.Вставить(Метаданные.Константы.СоздаватьЭлектронныеПодписиНаСервере.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ЭтоАвтономноеРабочееМесто.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанных.Имя, Истина);
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.УправлениеТорговлей.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ФиксироватьПервичныйИнтерес.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФиксироватьПретензииКлиентов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФормироватьВидыЗапасовПоПодразделениямМенеджерам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФормироватьВидыЗапасовПоПоставщикам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФормироватьВидыЗапасовПоСделкам.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФормироватьУправленческийБаланс.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ФормироватьФинансовыйРезультат.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбменЭДМеждуОрганизациями.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя, Ложь);
//-- НЕ БЗК	
	
	// Прочие начальные значения
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьДоверенностиНаПолучениеТМЦ.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ИспользованиеЭтаповОплатыВЗакупках.Имя, Перечисления.ИспользованиеЭтаповОплаты.УпрощеннаяСхема);
	Результат.Вставить(Метаданные.Константы.ИспользованиеЭтаповОплатыВПродажах.Имя, Перечисления.ИспользованиеЭтаповОплаты.УпрощеннаяСхема);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОтчетДвиженияЗаказов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСинхронизациюДанных.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ФормироватьУправленческийБаланс.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПартионныйУчет.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУчетНДС.Имя, Истина);
	//-- НЕ БЗК
	
	//++ НЕ БЗК
	//++ НЕ УТ
	
	// Производство и ремонты
	Результат.Вставить(Метаданные.Константы.ИспользоватьПроизводство.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.АналитическийУчетПоГруппамПродукции.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыДвиженийПродукцииИМатериалов.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПроизводствоНаСтороне.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеРемонтами.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУзлыОбъектовЭксплуатации.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыЗаказовПереработчикам.Имя, Ложь);
	
	// Бюджетирование и МСФО
	
	// Регламентированный учет
	Результат.Вставить(Метаданные.Константы.ИспользоватьЛизинг.Имя, Ложь);
	
	// Внеоборотные активы
	Результат.Вставить(Метаданные.Константы.ОтображатьВнеоборотныеАктивы2_2.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_2.Имя, Ложь);
	
	//-- НЕ УТ
	//-- НЕ БЗК
	//-- Локализация
	Возврат
КонецПроцедуры

// Дополняет список констант, которые доступны для изменения в базовой версии.
//
// Параметры:
// 	Результат - Структура - Дополняемая структура констант
//
Процедура ДополнитьКонстантыДоступныеВБазовойВерсии(Результат) Экспорт 
	//++ Локализация
	//++ НЕ БЗК
	Результат.Вставить(Метаданные.Константы.ИспользоватьЭлектронныеПодписи.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьШифрование.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУчетПрочихДоходовРасходов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУчетПрочихДоходовРасходовРегл.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСерииНоменклатуры.Имя);
	Результат.Вставить(Метаданные.Константы.ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи.Имя);
	Результат.Вставить(Метаданные.Константы.ДатаОбновленияПовторноИспользуемыхЗначенийМРО.Имя);
	Результат.Вставить(Метаданные.Константы.ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД.Имя);
	Результат.Вставить(Метаданные.Константы.ЗапретитьПоступлениеТоваровБезНомеровГТД.Имя);
	Результат.Вставить(Метаданные.Константы.ИзменятьЗаданияЗаднимЧислом.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользованиеКлассификаторовНоменклатуры.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАвтоматическиеСкидкиВПродажах.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАвтоматическоеЗакрытиеСтрокЗаказовМерныхТоваров.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПеремещения.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьБонусныеПрограммыЛояльности.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнутреннееПотребление.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнутреннееСогласованиеЗаказовКлиентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнутреннееСогласованиеКоммерческихПредложений.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьГрафикиОплаты.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДатуИВремяВСрокахЗадач.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДатуНачалаЗадач.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДатыЗапретаЗагрузки.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДатыЗапретаИзменения.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДоговорыМеждуОрганизациями.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДоговорыСКлиентами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДоговорыСПоставщиками.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДополнительныеОтчетыИОбработки.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДополнительныеРеквизитыИСведения.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЕдиницыИзмеренияДляОтчетов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаказыКлиентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаказыНаВнутреннееПотребление.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаказыНаПеремещение.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаказыНаСборку.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаказыПоставщикам.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаказыПоставщикамИЗаявкиНаРасходованиеДС.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьИмпортныеЗакупки.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьИмпортныеТовары.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьИндивидуальныеСоглашенияСКлиентами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОнлайнПоддержку.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКартыЛояльности.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКомиссиюПриЗакупках.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКомиссиюПриЗакупкахБазовая.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКомиссиюПриЗакупкахНеБазовая.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКомиссиюПриПродажах.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКомиссиюПриПродажахБазовая.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКомиссиюПриПродажахНеБазовая.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКорректировкиПриобретений.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьКорректировкиРеализаций.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьМобильноеПриложение1СЗаказыКлиентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоВалют.Имя);
	Результат.Вставить(Метаданные.Константы.ВалютыУпрИРеглУчетаСовпадают.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоВидовНоменклатуры.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоВидовЦен.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоКасс.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоКассККМ.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоПроизводственныхКалендарей.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоРасчетныхСчетов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоРасчетныхСчетовКасс.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНесколькоСкладов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьНоменклатуруПоставщиков.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбменСПодключаемымОборудованиемOffline.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбменССайтом.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОбменЭД.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОплатуПлатежнымиКартами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОтветственноеХранение.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОтправкуSMSВШаблонахСообщений.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПартнеровИКонтрагентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПартнеровКакКонтрагентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПередачиТоваровМеждуОрганизациями.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПеремещениеТоваров.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПодключаемоеОборудование.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПодключаемоеОборудованиеИОплатуПлатежнымиКартами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПодчиненныеБизнесПроцессы.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПолнотекстовыйПоиск.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПолнотекстовыйПоискПриПодбореТоваров.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПричиныОтменыЗаказовКлиентов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПричиныОтменыЗаказовПоставщикам.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьПрочееОприходованиеТоваров.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРеглУчет.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРозничныеПродажи.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРучныеСкидкиВЗакупках.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьРучныеСкидкиВПродажах.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСборкуРазборку.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСинхронизациюДанныхВЛокальномРежиме.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСинхронизациюДанныхВМоделиСервиса.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСоглашенияСКлиентами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСоглашенияСПоставщиками.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьСтатусыАвансовыхОтчетов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьТиповыеИИндивидуальныеСоглашенияСКлиентами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьТиповыеСоглашенияСКлиентами.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьТТН.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУпаковкиНоменклатуры.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеПроизводством.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеПроизводством2_2.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУчетДрагоценныхМатериалов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУчетПрочихАктивовПассивов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьХарактеристикиНоменклатуры.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьШаблоныСообщений.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьШтрихкодированиеПечатныхФормОбъектов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьЭлектроннуюПочтуВШаблонахСообщений.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользуетсяОбменСБухгалтериейПредприятия.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользуетсяСборкаРазборкаИСерииНоменклатуры.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользуютсяПрофилиБезопасности.Имя);
	Результат.Вставить(Метаданные.Константы.КомплекснаяАвтоматизация.Имя);
	Результат.Вставить(Метаданные.Константы.КонтролироватьВыдачуПодОтчетВРазрезеЦелей.Имя);
	Результат.Вставить(Метаданные.Константы.КонтролироватьОстаткиТоваровОрганизаций.Имя);
	Результат.Вставить(Метаданные.Константы.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов.Имя);
	Результат.Вставить(Метаданные.Константы.НеВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи.Имя);
	Результат.Вставить(Метаданные.Константы.НеДетализироватьЗаданияТорговымПредставителямПоНоменклатуре.Имя);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыНаВнутреннееПотреблениеБезПолнойОтгрузки.Имя);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки.Имя);
	Результат.Вставить(Метаданные.Константы.НеЗакрыватьЗаказыНаСборкуБезПолнойОтгрузки.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьБизнесРегионы.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьЗаявкиНаРасходованиеДенежныхСредств.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьНесколькоВалют.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьНесколькоКасс.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьНесколькоКассККМ.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьНесколькоОрганизаций.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьНесколькоРасчетныхСчетов.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьНесколькоСкладов.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьРозничныеПродажи.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок.Имя);
	Результат.Вставить(Метаданные.Константы.НеИспользоватьЦеновыеГруппы.Имя);
	Результат.Вставить(Метаданные.Константы.НеФормироватьФинансовыйРезультат.Имя);
	Результат.Вставить(Метаданные.Константы.ОтветственныйВДокументах.Имя);
	Результат.Вставить(Метаданные.Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Имя);
	Результат.Вставить(Метаданные.Константы.ОтложенноеОбновлениеЗавершеноУспешно.Имя);
	Результат.Вставить(Метаданные.Константы.ОтправлятьПисьмаВФорматеHTML.Имя);
	Результат.Вставить(Метаданные.Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Имя);
	Результат.Вставить(Метаданные.Константы.РассчитыватьПредварительнуюСтоимостьРегламентнымЗаданием.Имя);
	Результат.Вставить(Метаданные.Константы.РасходныеОрдераФормируютсяМенеджером.Имя);
	Результат.Вставить(Метаданные.Константы.СинхронизироватьФайлы.Имя);
	Результат.Вставить(Метаданные.Константы.УправлениеПредприятием.Имя);
	Результат.Вставить(Метаданные.Константы.ХранитьФайлыВТомахНаДиске.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУдалениеПомеченныхОбъектов.Имя);
	Результат.Вставить(Метаданные.Константы.ФормироватьВидыЗапасовПоГруппамФинансовогоУчета.Имя);
	Результат.Вставить(Метаданные.Константы.ОграничиватьДоступНаУровнеЗаписейУниверсально.Имя);
	Результат.Вставить(Метаданные.Константы.НоваяАрхитектураВзаиморасчетов.Имя);
	Результат.Вставить(Метаданные.Константы.НеНоваяАрхитектураВзаиморасчетов.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОтчетВедомостьРасчетовМеждуОрганизациями.Имя);
	Результат.Вставить(Метаданные.Константы.ИспользоватьОтчетРасчетыМеждуОрганизациями.Имя);
	//-- НЕ БЗК
	//-- Локализация
	Возврат
КонецПроцедуры

// Дополняет значения констант контролируемых в НЕ базовой версии.
//
// Параметры:
// 	Результат - Структура - Дополняемая структура констант
//
Процедура ДополнитьЗначенияКонстантКонтролируемыхВНеБазовойВерсии(Результат) Экспорт 
	//++ Локализация
	Результат.Вставить(Метаданные.Константы.БазоваяВерсия.Имя, Ложь);
	Результат.Вставить(Метаданные.Константы.НеБазоваяВерсия.Имя, Истина);
	Результат.Вставить(Метаданные.Константы.ИспользоватьУправлениеДоступом.Имя, Истина);
	//++ НЕ БЗК
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Результат.Вставить(Метаданные.Константы.ИспользоватьОтчетДвиженияЗаказов.Имя, Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Получить());
	Иначе
		Результат.Вставить(Метаданные.Константы.ИспользоватьОтчетДвиженияЗаказов.Имя, Ложь);
	КонецЕсли;
	//++ НЕ УТ
	Результат.Вставить(Метаданные.Константы.УправлениеТорговлей.Имя, Ложь);
	//-- НЕ УТ
	//-- НЕ БЗК
	//-- Локализация
	Возврат
КонецПроцедуры

// Дополняет таблицу, описывающую зависимость констант в конфигурации.
// Каждая строка таблицы означает:
// для родительской константы со значением Х допустимо только значение Y для подчиненной константы.
// Параметры:
// 	Результат - ТаблицаЗначений - Дополняемая таблица констант
//
// Возвращаемое значение:
//	ТаблицаЗначений с колонками
//		- ИмяРодительскойКонстанты
//		- ИмяПодчиненнойКонстанты
//		- ЗначениеРодительскойКонстанты
//		- ЗначениеПодчиненнойКонстанты.
//
Процедура ДополнитьТаблицуЗависимостиКонстант(Результат) Экспорт
	//++ Локализация
	БазоваяВерсия = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();

//++ НЕ БЗК	
#Область Технология_сервиса
	ЭтоКА = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанных.Имя, Истина,
		Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Имя, ЭтоКА);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанных.Имя, Ложь,
		Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Имя, Ложь);
		
	ЭтоУТ = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанных.Имя, Истина,
		Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Имя, ЭтоУТ);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанных.Имя, Ложь,
		Метаданные.Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Имя, Ложь);
#КонецОбласти
//-- НЕ БЗК

#Область Управление_доступом
	//++ НЕ УТ
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ОграничиватьДоступНаУровнеЗаписей.Имя, Ложь,
		Метаданные.Константы.ОграничиватьДоступНаУровнеЗаписейФизическиеЛица.Имя, Ложь);
	//-- НЕ УТ
#КонецОбласти

//++ НЕ БЗК
#Область Синхронизация_данных
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьОбменССайтом.Имя, Истина,
		Метаданные.Константы.ИспользоватьДополнительныеРеквизитыИСведения.Имя, Истина);
#КонецОбласти
	
#Область ЭДО
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьОбменЭД.Имя, Ложь,
		Метаданные.Константы.ИспользоватьОбменЭДМеждуОрганизациями.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьОбменЭД.Имя, Ложь,
		Метаданные.Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьОбменЭД.Имя, Истина, 
		Метаданные.Константы.ИспользоватьНоменклатуруПоставщиков.Имя, Истина);
	
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьЭлектронныеПодписи.Имя, Ложь,
		Метаданные.Константы.ИспользоватьОбменЭДМеждуОрганизациями.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьЭлектронныеПодписи.Имя, Ложь,
		Метаданные.Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Имя, Ложь);
#КонецОбласти
		
#Область Организации_финансы
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьПартионныйУчет.Имя, Ложь,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь);
	
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Истина,
		Метаданные.Константы.ИспользоватьПартионныйУчет.Имя, Истина);

	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь,
		Метаданные.Константы.РаспределениеДопРасходовПоВыбывшимТоварам.Имя, Ложь);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Истина,
		Метаданные.Константы.РаспределениеДопРасходовПоВыбывшимТоварам.Имя, Истина);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь,
		Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя, Ложь);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Истина,
		Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя, Истина);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь,
		Метаданные.Константы.ИспользоватьТоварыВПутиОтПоставщиков.Имя, Ложь);	
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь,
		Метаданные.Константы.ИспользоватьНеотфактурованныеПоставки.Имя, Ложь);	
		
	//++ НЕ УТ
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь,
		Метаданные.Константы.ВестиУУНаПланеСчетовХозрасчетный.Имя, Ложь);
	//-- НЕ УТ
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьПартионныйУчет.Имя, Ложь,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь);
	
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Истина,
		Метаданные.Константы.ИспользоватьПартионныйУчет.Имя, Истина);

	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь,
		Метаданные.Константы.РаспределениеДопРасходовПоВыбывшимТоварам.Имя, Ложь);
	
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Истина,
		Метаданные.Константы.РаспределениеДопРасходовПоВыбывшимТоварам.Имя, Истина);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь,
		Метаданные.Константы.ИспользоватьТоварыВПутиОтПоставщиков.Имя, Ложь);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь,
		Метаданные.Константы.ИспользоватьНеотфактурованныеПоставки.Имя, Ложь);
	
#КонецОбласти
			
	//++ НЕ УТ
	//-- НЕ УТ

	
#Область Розница
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьАвтоматическиеСкидкиВПродажах.Имя, Ложь,
		Метаданные.Константы.НазначатьСкидкиПоКнопкеРасчетВЧекеККМ.Имя, Ложь);
#КонецОбласти
		
		

#Область УчетИмпортныхТоваров
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьИмпортныеТовары.Имя, Ложь,
		Метаданные.Константы.ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьИмпортныеТовары.Имя, Ложь,
		Метаданные.Константы.ЗапретитьПоступлениеТоваровБезНомеровГТД.Имя, Ложь);

#КонецОбласти
//-- НЕ БЗК

//++ НЕ БЗК
#Область Интеграция_1С_Документооборот
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьИнтеграциюС1СДокументооборот.Имя, Ложь,
		Метаданные.Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьИнтеграциюС1СДокументооборот.Имя, Ложь,
		Метаданные.Константы.ИспользоватьФайловоеХранилище1СДокументооборота.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьИнтеграциюС1СДокументооборот.Имя, Ложь,
		Метаданные.Константы.ИспользоватьПроцессыИЗадачи1СДокументооборота.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьИнтеграциюС1СДокументооборот.Имя, Ложь,
		Метаданные.Константы.ИспользоватьСвязанныеДокументы1СДокументооборота.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьИнтеграциюС1СДокументооборот.Имя, Ложь,
		Метаданные.Константы.ИспользоватьЕжедневныеОтчеты1СДокументооборота.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьИнтеграциюС1СДокументооборот.Имя, Ложь,
		Метаданные.Константы.ИспользоватьЭлектроннуюПочту1СДокументооборота.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьПроцессыИЗадачи1СДокументооборота.Имя, Ложь,
		Метаданные.Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Имя, Ложь);
	
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Имя, Истина,
		Метаданные.Константы.ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Имя, Истина,
		Метаданные.Константы.ИспользоватьВнутреннееСогласованиеЗаказовКлиентов.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Имя, Истина,
		Метаданные.Константы.ИспользоватьВнутреннееСогласованиеКоммерческихПредложений.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Имя, Истина,
		Метаданные.Константы.ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами.Имя, Ложь);
#КонецОбласти
//-- НЕ БЗК

//++ НЕ БЗК
#Область Продажи
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Имя, Истина,
		Метаданные.Константы.ИспользоватьОтчетДвиженияЗаказов.Имя, НЕ БазоваяВерсия);
#КонецОбласти
	
#Область Комиссия
	
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьПродажуАгентскихУслуг.Имя, Истина,
		Метаданные.Константы.ИспользоватьКомиссиюПриЗакупках.Имя, Истина);	
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьКомиссиюПриПродажах.Имя, Истина,
		Метаданные.Константы.ИспользоватьКомиссиюПриПродажахБазовая.Имя, Истина И БазоваяВерсия);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьКомиссиюПриПродажах.Имя, Истина,
		Метаданные.Константы.ИспользоватьКомиссиюПриПродажахНеБазовая.Имя, Истина И НЕ БазоваяВерсия);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьКомиссиюПриПродажах.Имя, Ложь,
		Метаданные.Константы.ИспользоватьКомиссиюПриПродажахБазовая.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьКомиссиюПриПродажах.Имя, Ложь,
		Метаданные.Константы.ИспользоватьКомиссиюПриПродажахНеБазовая.Имя, Ложь);
			
#КонецОбласти

#Область Производство
#КонецОбласти

	
	//++ НЕ УТ
#Область Контролируемые_сделки
#КонецОбласти
	//-- НЕ УТ
	
	//++ НЕ УТ
	
#Область Внеоборотные_активы

	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Ложь);

	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Истина,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Истина);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Истина,
		Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя, Истина);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя, Ложь,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Ложь);

	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Ложь,
		Метаданные.Константы.ВестиУУНаПланеСчетовХозрасчетный.Имя, Ложь);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Ложь,
		Метаданные.Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Имя, '000101010000');
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_2.Имя, Ложь,
		Метаданные.Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Имя, '000101010000');
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Ложь,
		Метаданные.Константы.ВестиУУНаПланеСчетовХозрасчетный.Имя, Ложь);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_2.Имя, Истина,
		Метаданные.Константы.ИспользоватьПодразделения.Имя, Истина);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьПодразделения.Имя, Ложь,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_2.Имя, Ложь);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьРеглУчет.Имя, Ложь,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_2.Имя, Ложь);
	
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Истина,
		Метаданные.Константы.РегламентированныйУчетВНА.Имя, Истина);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Ложь,
		Метаданные.Константы.РегламентированныйУчетВНА.Имя, Ложь);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Истина,
		Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя, Истина);
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя, Ложь,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Ложь);		
		
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_4.Имя, Ложь);

	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьРеглУчет.Имя, Истина,
		Метаданные.Константы.ИспользоватьВнеоборотныеАктивы2_2.Имя, Истина);

#КонецОбласти

#Область Учет_НДС
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьУчетНДС.Имя, Ложь,
		Метаданные.Константы.ВыводитьДопКолонкиНДС.Имя, Ложь);//
#КонецОбласти

#Область Регламентированный_учет
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьРеглУчет.Имя, Ложь,
		Метаданные.Константы.ИспользоватьЛизинг.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьРеглУчет.Имя, Ложь,
		Метаданные.Константы.ИспользоватьРучнуюКорректировкуПроводокПоРеглУчету.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьРеглУчет.Имя, Ложь,
		Метаданные.Константы.ИспользоватьПроверкуДокументовПоРегламентированномуУчету.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьРеглУчет.Имя, Ложь,
		Метаданные.Константы.ИспользоватьАмортизациюБухгалтерскогоУчетаВУправленческомУчете.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьРеглУчет.Имя, Ложь,
		Метаданные.Константы.ВестиУУНаПланеСчетовХозрасчетный.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьРеглУчет.Имя, Ложь,
		Метаданные.Константы.ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьРеглУчет.Имя, Ложь,
		Метаданные.Константы.ИсточникСуммыДляПересчетаВВалютуФинОтчетности.Имя, Перечисления.ИсточникиСуммыДляПересчетаВВалютуФинОтчетности.БУ);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьРеглУчет.Имя, Истина,
		Метаданные.Константы.ИспользоватьУчетПрочихДоходовРасходовРегл.Имя, Истина);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьПроверкуДокументовПоРегламентированномуУчету.Имя, Ложь,
		Метаданные.Константы.ОтражатьВРеглУчетеТолькоПроверенныеДокументы.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ВестиУУНаПланеСчетовХозрасчетный.Имя, Ложь,
		Метаданные.Константы.ДатаНачалаУУНаПланеСчетовХозрасчетный.Имя, '000101010000');
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ИспользоватьРеглУчет.Имя, Ложь,
		Метаданные.Константы.ФормироватьРезервыПредстоящихРасходов.Имя, Ложь);
	НастройкиСистемы.ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		Метаданные.Константы.ПартионныйУчетВерсии22.Имя, Ложь,
		Метаданные.Константы.ФормироватьРезервыПредстоящихРасходов.Имя, Ложь);
#КонецОбласти

//-- НЕ УТ
	

//-- НЕ БЗК
	//-- Локализация
	Возврат
КонецПроцедуры

#КонецОбласти

#Область ПрочийПрограммныйИнтерфейс

// Устанавливает видимость групп элементов, относящихся к элементам локализации. 
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, в которой необходима установка видимости.
Процедура УстановитьВидимостьЭлементовЛокализации(Форма) Экспорт
	
    Возврат;
	
	Для Каждого ЭлементФормы Из Форма.Элементы Цикл
		Если ТипЗнч(ЭлементФормы) = тип("ГруппаФормы") 
			И СтрНачинаетсяС(ЭлементФормы.Имя, "Локализация") Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Позволяет переопределить код валюты по умолчанию.
//
// Параметры:    
//  КодВалюты	 - Строка - код валюты.
//
Процедура ПереопределитьКодВалютыПоУмолчанию(КодВалюты) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИспользоватьОбменССайтом() Экспорт
	Результат = Ложь;
	//++ НЕ БЗК
	//++ Локализация
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьОбменССайтом");
	//-- Локализация
	//-- НЕ БЗК
	Возврат Результат
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СинхронизироватьЗначенияПодчиненныхКонстант(ИмяКонстанты, ЗначениеКонстанты, Отказ) Экспорт
	//++ Локализация
	//++ НЕ БЗК
	
	Если ИмяКонстанты = Метаданные.Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Имя Тогда
		
		Если НЕ ЗначениеКонстанты Тогда
			НастройкиСистемы.УстановитьЗначениеКонстанты(
				Константы.ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов,
				Константы.ИспользоватьСогласованиеЗаявокНаВозвратТоваровОтКлиентов.Получить());
			НастройкиСистемы.УстановитьЗначениеКонстанты(
				Константы.ИспользоватьВнутреннееСогласованиеЗаказовКлиентов,
				Константы.ИспользоватьСогласованиеЗаказовКлиентов.Получить());
			НастройкиСистемы.УстановитьЗначениеКонстанты(
				Константы.ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами,
				Константы.ИспользоватьСогласованиеСоглашенийСКлиентами.Получить());
		Иначе
			НастройкиСистемы.УстановитьЗначениеКонстанты(
				Константы.ИспользоватьПроцессыИЗадачи1СДокументооборота,
				Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяКонстанты = Метаданные.Константы.ИспользоватьСогласованиеЗаявокНаВозвратТоваровОтКлиентов.Имя
	 ИЛИ ИмяКонстанты = Метаданные.Константы.ИспользоватьСогласованиеЗаказовКлиентов.Имя
	 ИЛИ ИмяКонстанты = Метаданные.Константы.ИспользоватьСогласованиеСоглашенийСКлиентами.Имя Тогда
		
		ИмяПодчиненнойКонстанты 	 = СтрЗаменить(ИмяКонстанты, "ИспользоватьСогласование", "ИспользоватьВнутреннееСогласование");
		ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты И НЕ Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Получить();
		
		НастройкиСистемы.УстановитьЗначениеКонстанты(
			Константы[ИмяПодчиненнойКонстанты], ЗначениеПодчиненнойКонстанты);
		
	ИначеЕсли ИмяКонстанты = Метаданные.Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи.Имя Тогда
		
		ИспользоватьСчетаНаОплатуКлиентом = Константы.ИспользоватьСчетаНаОплатуКлиентам.Получить();
		
		ЗначениеПодчиненнойКонстанты = ?(НЕ ИспользоватьСчетаНаОплатуКлиентом, Константы.ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи.Получить(), Ложь);
		
		НастройкиСистемы.УстановитьЗначениеКонстанты(Константы.НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок, ЗначениеПодчиненнойКонстанты);
		НастройкиСистемы.УстановитьЗначениеКонстанты(Константы.НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок, ?(НЕ ИспользоватьСчетаНаОплатуКлиентом, НЕ ЗначениеПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты));
		

	КонецЕсли;
	//++ НЕ УТ
	Если ИмяКонстанты = Метаданные.Константы.ВалютаРегламентированногоУчета.Имя
		ИЛИ ИмяКонстанты = Метаданные.Константы.ВалютаУправленческогоУчета.Имя Тогда
		
		ЗначениеКонстанты = (Константы.ВалютаРегламентированногоУчета.Получить() = Константы.ВалютаУправленческогоУчета.Получить()); 
		НастройкиСистемы.УстановитьЗначениеКонстанты(Константы.ВалютыУпрИРеглУчетаСовпадают, ЗначениеКонстанты);
	КонецЕсли;
	
	Если Найти(ИмяКонстанты, "ИспользоватьУправлениеПроизводством") > 0 Тогда
		
		Если ИмяКонстанты = "ИспользоватьУправлениеПроизводством" Тогда
			ИспользуетсяПроизводство21 = ЗначениеКонстанты;
			ИспользуетсяПроизводство22 = Константы.ИспользоватьУправлениеПроизводством2_2.Получить();
		Иначе
			ИспользуетсяПроизводство21 = Константы.ИспользоватьУправлениеПроизводством.Получить();
			ИспользуетсяПроизводство22 = ЗначениеКонстанты;
		КонецЕсли;
		
		// настройка интерфейса в зависимости от режима совместного использования производства 2.1 и 2.2
		НастройкиСистемы.УстановитьЗначениеКонстанты(Константы.ИспользуетсяТолькоУправлениеПроизводством21, ИспользуетсяПроизводство21    И НЕ ИспользуетсяПроизводство22);
		НастройкиСистемы.УстановитьЗначениеКонстанты(Константы.ИспользуетсяУправлениеПроизводством21и22,    ИспользуетсяПроизводство21    И ИспользуетсяПроизводство22);
		
		// настройка интерфейса для отображения исторических данных
		НастройкиСистемы.УстановитьЗначениеКонстанты(Константы.ОтображатьПроизводство2_1, НЕ ИспользуетсяПроизводство21 И ИспользуетсяПроизводство22 И Производство21ИспользовалосьРанее());
		
	КонецЕсли;
	
	Если Найти(ИмяКонстанты, "ИспользоватьВнеоборотныеАктивы") > 0 Тогда
		
		Если ИмяКонстанты = "ИспользоватьВнеоборотныеАктивы2_2" Тогда
			Учет2_2 = ЗначениеКонстанты;
			Учет2_4 = Константы.ИспользоватьВнеоборотныеАктивы2_4.Получить();
		Иначе
			Учет2_2 = Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить();
			Учет2_4 = ЗначениеКонстанты;
		КонецЕсли;
		
		Если НЕ Учет2_2 И НЕ Учет2_4 Тогда
			НастройкиСистемы.УстановитьЗначениеКонстанты(Константы.ИспользоватьЛизинг, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТ
	
	
	
	//-- НЕ БЗК
	УстановитьЗначенияКонстантНЕУКРОбъектов(ИмяКонстанты, ЗначениеКонстанты, Отказ);
	
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура УстановитьЗначенияКонстантНЕУКРОбъектов(ИмяКонстанты, ЗначениеКонстанты, Отказ)
	
	ИменаОтключаемыхНЕУКРКонстант = НастройкиСистемыПовтИсп.ПолучитьИменаОтключаемыхНЕУКРКонстант();
	
	Если (ИмяКонстанты = "ИспользоватьНЕУКРОбъекты" И ЗначениеКонстанты = Ложь) Тогда
		Для Каждого КлючИЗначение Из ИменаОтключаемыхНЕУКРКонстант Цикл
			НастройкиСистемы.УстановитьЗначениеКонстанты(Константы[КлючИЗначение.Ключ], Ложь);
		КонецЦикла;
	//++ НЕ БЗК	
	ИначеЕсли ИменаОтключаемыхНЕУКРКонстант.Свойство(ИмяКонстанты) И ЗначениеКонстанты = Истина И НЕ Константы.ИспользоватьНЕУКРОбъекты.Получить() Тогда 	
		Отказ = Истина;
		ВызватьИсключение НСтр("ru='Не разрешается устанавливать значение этой константы в Истина!';uk='Не дозволяється встановлювати значення цієї константи у Істина!'");
	ИначеЕсли ИмяКонстанты = Метаданные.Константы.ИспользоватьРазделыТаможеннойДекларацииИмпорт.Имя И ЗначениеКонстанты = Ложь Тогда
		Отказ = Истина;
		ВызватьИсключение СтрШаблон(НСтр("ru='Значение константы ""%1"" должно быть Истина!';uk='Значення константи ""%1"" має бути Істина!'"), Метаданные.Константы.ИспользоватьРазделыТаможеннойДекларацииИмпорт.Синоним);
	//-- НЕ БЗК	
	КонецЕсли;

КонецПроцедуры // УстановитьЗначенияКонстантНЕУКРОбъектов

//++ НЕ БЗК
#Область ОбработчикиСобытийПанелейАдминистрирования

#Область ОбработчикиСобытий_ПанельСправочниковНСИ_КлассификаторыНоменклатуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура УстановитьДоступность_КлассификаторыНоменклатуры(Форма) Экспорт
	//++ Локализация
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ПанельАдминистрированияУТ_Закупки

Процедура ПриСозданииНаСервере_Закупки(Форма) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ПриЧтенииНаСервере_Закупки(Форма) Экспорт
	//++ Локализация
	ЗначенияПоУмолчанию = Форма.ЗначенияПоУмолчанию;
	Если ЗначенияПоУмолчанию = Неопределено Тогда
		ЗначенияПоУмолчанию = Новый Структура;
	КонецЕсли;
	Форма.ЗначенияПоУмолчанию = ЗначенияПоУмолчанию;
	//-- Локализация
	Возврат
КонецПроцедуры

// Параметры:
// 	РеквизитПутьКДанным - Строка -
// 	Форма - см. Обработка.ПанельАдминистрированияУТ.Форма.Закупки
Процедура УстановитьДоступность_Закупки(РеквизитПутьКДанным, Форма) Экспорт
	//++ Локализация

	Элементы = Форма.Элементы; // ЭлементыФормы - 
	НаборКонстант = Форма.НаборКонстант;
	
	Элементы.ИспользоватьКорректировкиПриобретений.Видимость = Ложь;
	
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДоговорыСПоставщиками" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстантыОтветХранение = Ложь;
		
		ЗначениеКонстантыОтветХранение = Константы.ИспользоватьОтветственноеХранениеВПроцессеЗакупки.Получить();
		
		ЗначениеКонстантыТоварыВПутиОтПоставщиков 	= НаборКонстант.ИспользоватьТоварыВПутиОтПоставщиков;
		ЗначениеКонстантыНеотфактурованныеПоставки 	= НаборКонстант.ИспользоватьНеотфактурованныеПоставки;
        ДоговорыСПоставщикамиРедактированиеДоступно = Истина 
													И Не ЗначениеКонстантыОтветХранение
													И Не ЗначениеКонстантыТоварыВПутиОтПоставщиков
													И Не ЗначениеКонстантыНеотфактурованныеПоставки;
			
		Элементы.ИспользоватьДоговорыСПоставщиками.Доступность 										= ДоговорыСПоставщикамиРедактированиеДоступно;
		Элементы.ГруппаДоговорыСПоставщикамиНевозможноОтключить.Видимость 							= Не ДоговорыСПоставщикамиРедактированиеДоступно;
		Элементы.КомментарийИспользоватьДоговорыСПоставщикамиПриемкаНаХранение.Видимость 			= ЗначениеКонстантыОтветХранение;
		Элементы.КомментарийИспользоватьДоговорыСПоставщикамиТоварыВПути.Видимость 					= ЗначениеКонстантыТоварыВПутиОтПоставщиков;
		Элементы.КомментарийИспользоватьДоговорыСПоставщикамиНеотфактурованныеПоставки.Видимость 	= ЗначениеКонстантыНеотфактурованныеПоставки;
		
	КонецЕсли;
	
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура СохранитьЗначениеРеквизита_Закупки(КонстантаИмя, КонстантаЗначение, Форма) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура ОтображениеПредупрежденияПриРедактировании_Закупки(СтруктураКонстант) Экспорт
	
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ПанельАдминистрированияУТ_Казначейство

Процедура ПриСозданииНаСервере_Казначейство(Форма) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	//-- Локализация
КонецПроцедуры

Процедура ПриЧтенииНаСервере_Казначейство(Форма) Экспорт
	//++ Локализация
	ЗначенияПоУмолчанию = Форма.ЗначенияПоУмолчанию;
	Если ЗначенияПоУмолчанию = Неопределено Тогда
		ЗначенияПоУмолчанию = Новый Структура;
	КонецЕсли;
	Форма.ЗначенияПоУмолчанию = ЗначенияПоУмолчанию;
	//-- Локализация
	Возврат
КонецПроцедуры

// Параметры:
// 	РеквизитПутьКДанным - Строка -
// 	Форма - см. Обработка.ПанельАдминистрированияУТ.Форма.Казначейство
Процедура УстановитьДоступность_Казначейство(РеквизитПутьКДанным, Форма) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	НаборКонстант = Форма.НаборКонстант;
	
	Если РеквизитПутьКДанным = "" Тогда
		УправлениеТорговлей = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
		
		Элементы.ИспользоватьНесколькоРасчетныхСчетов.Доступность = Не НаборКонстант.ИспользоватьНесколькоОрганизаций;
				
		
	КонецЕсли;
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура СохранитьЗначениеРеквизита_Казначейство(КонстантаИмя, КонстантаЗначение, Форма) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура ОтображениеПредупрежденияПриРедактировании_Казначейство(СтруктураКонстант) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ПанельАдминистрированияУТ_НастройкиНоменклатуры

Процедура ПриСозданииНаСервере_НастройкиНоменклатуры(Форма) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация

	РежимРаботы = Форма.РежимРаботы;
	СоставНабораКонстантФормы = РежимРаботы.СоставНабораКонстантФормы;
	ВнешниеРодительскиеКонстанты = РежимРаботы.ВнешниеРодительскиеКонстанты;
	УправлениеПредприятием = РежимРаботы.УправлениеПредприятием;
	
	ВнешниеРодительскиеКонстанты = Новый Структура(ВнешниеРодительскиеКонстанты);
	
	РежимРаботы = Новый Структура;
	РежимРаботы.Вставить("СоставНабораКонстантФормы",    СоставНабораКонстантФормы);
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	РежимРаботы.Вставить("УправлениеПредприятием",	 	 УправлениеПредприятием);
	
	Форма.РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура ПриЧтенииНаСервере_НастройкиНоменклатуры(Форма) Экспорт
	//++ Локализация
	ЗначенияПоУмолчанию = Форма.ЗначенияПоУмолчанию;
	Если ЗначенияПоУмолчанию = Неопределено Тогда
		ЗначенияПоУмолчанию = Новый Структура;
	КонецЕсли;
	Форма.ЗначенияПоУмолчанию = ЗначенияПоУмолчанию;
	//-- Локализация
	Возврат
КонецПроцедуры

// Параметры:
// 	РеквизитПутьКДанным - Строка -
// 	Форма - см. Обработка.ПанельАдминистрированияУТ.Форма.НастройкиНоменклатуры
Процедура УстановитьДоступность_НастройкиНоменклатуры(РеквизитПутьКДанным, Форма) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	НаборКонстант = Форма.НаборКонстант;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоВидовНоменклатуры" 
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.ИспользоватьНесколькоВидовНоменклатуры;

		Элементы.ИспользоватьМногооборотнуюТару.Доступность = ЗначениеКонстанты;
		Элементы.ПредлагатьДополнитьДокументыМногооборотнойТарой.Доступность = ЗначениеКонстанты 
			И НаборКонстант.ИспользоватьМногооборотнуюТару;
			
        Элементы.ГруппаКомментарийИспользоватьНесколькоВидов.Видимость = Ложь;
        Элементы.ИспользоватьНесколькоВидовНоменклатуры.Доступность = Истина;

		//++ НЕ УТ
		Элементы.ГруппаКомментарийИспользоватьНесколькоВидов.Видимость = Элементы.ГруппаКомментарийИспользоватьНесколькоВидов.Видимость
			ИЛИ НаборКонстант.ИспользоватьПроизводство
			ИЛИ НаборКонстант.ИспользоватьПроизводствоНаСтороне;
			
		Элементы.ИспользоватьНесколькоВидовНоменклатуры.Доступность = Элементы.ИспользоватьНесколькоВидовНоменклатуры.Доступность
			И Не НаборКонстант.ИспользоватьПроизводство
			И Не НаборКонстант.ИспользоватьПроизводствоНаСтороне;
		//-- НЕ УТ
		
        КоличествоВключенныхОпций = 0;
									
		//++ НЕ УТ
		КоличествоВключенныхОпций = КоличествоВключенныхОпций 
									+ Число(НаборКонстант.ИспользоватьПроизводство)
									+ Число(НаборКонстант.ИспользоватьПроизводствоНаСтороне);
		//-- НЕ УТ
		Если КоличествоВключенныхОпций > 0 Тогда
			
			РазделительТекстов = ?(КоличествоВключенныхОпций = 1, Символы.НПП, Символы.ПС + "—" + Символы.НПП);
			
			ТекстКомментария = ?(КоличествоВключенныхОпций = 1,
								НСтр("ru='Невозможно отключение множества видов номенклатуры, потому что включена опция';uk='Неможливо відключення множини видів номенклатури, тому що включена опція'"),
								НСтр("ru='Невозможно отключение множества видов номенклатуры, потому что включены опции:';uk='Неможливо відключення множини видів номенклатури, тому що включені опції:'"));
								
			//++ НЕ УТ
			ТекстКомментария = ТекстКомментария
								+ ?(НаборКонстант.ИспользоватьПроизводство,
									РазделительТекстов + НСтр("ru='""Использовать производство"" (находится в разделе ""Производство"");';uk='""Використовувати виробництво"" (знаходиться в розділі ""Виробництво"");'"),
									"");
			ТекстКомментария = ТекстКомментария
								+ ?(НаборКонстант.ИспользоватьПроизводствоНаСтороне,
									РазделительТекстов + НСтр("ru='""Использовать производство силами сторонней организации (переработка на стороне)"" (находится в разделе ""Производство"");';uk='""Використовувати виробництво силами сторонньої організації (переробка на стороні)"" (знаходиться в розділі ""Виробництво"");'"),
									"");
			//-- НЕ УТ
			
			
			
			ТекстКомментария = Сред(ТекстКомментария, 1, СтрДлина(ТекстКомментария) - 1) + ".";
			
			Элементы.КомментарийИспользоватьНесколькоВидов.Заголовок = ТекстКомментария;
		КонецЕсли;
		
	КонецЕсли;

	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьМногооборотнуюТару" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоВидовНоменклатуры"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьМногооборотнуюТару;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьМногооборотнуюТару, ЗначениеКонстанты);
			
		Элементы.ПредлагатьДополнитьДокументыМногооборотнойТарой.Доступность = ЗначениеКонстанты;
	КонецЕсли;
		
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСерииНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
        Элементы.ИспользоватьСерииНоменклатуры.Доступность = Истина;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов;
        Элементы.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов.Доступность = Истина;
	КонецЕсли;
		
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура СохранитьЗначениеРеквизита_НастройкиНоменклатуры(КонстантаИмя, КонстантаЗначение, Форма) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура ОтображениеПредупрежденияПриРедактировании_НастройкиНоменклатуры(СтруктураКонстант) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ПанельАдминистрированияУТ_НачальноеЗаполнение


// Описание
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ПриСозданииНаСервере_НачальноеЗаполнение(Форма) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	Элементы = Форма.Элементы;
		
	// Настройки видимости при запуске
	УправлениеТорговлей = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");   
	УправлениеПредприятием = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	КомплекснаяАвтоматизация = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	ЛокальныйРежим      = ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме");
	
	Элементы.ГруппаОбработкаПомощникПереходаСУправлениеПроизводственнымПредприятиемОткрыть.Видимость = УправлениеПредприятием;
	Элементы.ГруппаОбработкаПомощникПереходаСУправлениеТорговымПредприятиемОткрыть.Видимость = КомплекснаяАвтоматизация;
	
	Элементы.ГруппаОбработкаЗагрузкаДанныхИзУТ23Открыть.Видимость = УправлениеТорговлей;

	Элементы.ГруппаПереносДанныхЗарплатаКадры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ");
	
	ВидимостьЗагрузкаМетодическойМоделиМеждународногоУчета = Ложь;
	Элементы.ГруппаЗагрузкаМетодическойМоделиМеждународногоУчета.Видимость = ВидимостьЗагрузкаМетодическойМоделиМеждународногоУчета;

	//-- Локализация
	Возврат
КонецПроцедуры

Процедура ПриЧтенииНаСервере_НачальноеЗаполнение(Форма) Экспорт
	//++ Локализация
	ЗначенияПоУмолчанию = Форма.ЗначенияПоУмолчанию;
	Если ЗначенияПоУмолчанию = Неопределено Тогда
		ЗначенияПоУмолчанию = Новый Структура;
	КонецЕсли;
	Форма.ЗначенияПоУмолчанию = ЗначенияПоУмолчанию;
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура УстановитьДоступность_НачальноеЗаполнение(РеквизитПутьКДанным, Форма) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура СохранитьЗначениеРеквизита_НачальноеЗаполнение(КонстантаИмя, КонстантаЗначение, Форма) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура ОтображениеПредупрежденияПриРедактировании_НачальноеЗаполнение(СтруктураКонстант) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ПанельАдминистрированияУТ_Предприятие

Процедура ПриСозданииНаСервере_Предприятие(Форма) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	//-- Локализация
КонецПроцедуры

Процедура ПриЧтенииНаСервере_Предприятие(Форма) Экспорт
	//++ Локализация
	ЗначенияПоУмолчанию = Форма.ЗначенияПоУмолчанию;
	Если ЗначенияПоУмолчанию = Неопределено Тогда
		ЗначенияПоУмолчанию = Новый Структура;
	КонецЕсли;
	Форма.ЗначенияПоУмолчанию = ЗначенияПоУмолчанию;
	//-- Локализация
	Возврат
КонецПроцедуры

// Параметры:
// 	РеквизитПутьКДанным - Строка -
// 	Форма - см. Обработка.ПанельАдминистрированияУТ.Форма.Предприятие
Процедура УстановитьДоступность_Предприятие(РеквизитПутьКДанным, Форма) Экспорт
	//++ Локализация
	
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура СохранитьЗначениеРеквизита_Предприятие(КонстантаИмя, КонстантаЗначение, Форма) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура ОтображениеПредупрежденияПриРедактировании_Предприятие(СтруктураКонстант) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ПанельАдминистрированияУТ_Продажи

// Параметры:
// 	Форма - см. Обработка.ПанельАдминистрированияУТ.Форма.Продажи
Процедура ПриСозданииНаСервере_Продажи(Форма) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	
	// Настройки видимости при запуске
	УправлениеПредприятием = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
		
	Элементы.ЛокализацияГруппаПроизводствоИзДавальческогоСырья.Видимость = УправлениеПредприятием;
	Элементы.ПояснениеИспользованиеЭтаповОплатыВПродажах.Заголовок = НСтр("ru='Настройка определяет возможные варианты планирования оплаты в документах ""Заказ клиента"", ""Отчет комиссионера"",
|""Заявка на возврат товаров от клиента"".'
|;uk='Настройка визначає можливі варіанти планування оплати в документах ""Замовлення клієнта"", ""Звіт комісіонера"", 
|""Заявка на повернення товарів від клієнта"".'");
	//++ НЕ УТ
	Элементы.ПояснениеИспользованиеЭтаповОплатыВПродажах.Заголовок = НСтр("ru='Настройка определяет возможные варианты планирования оплаты в документах ""Заказ клиента"", 
|""Заявка на возврат товаров от клиента"", ""Заказ давальца"".'
|;uk='Настройка визначає можливі варіанти планування оплати в документах ""Замовлення клієнта"", 
|""Заявка на повернення товарів від клієнта"", ""Замовлення давальця"".'");
	//-- НЕ УТ
	
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
КонецПроцедуры

Процедура ПриЧтенииНаСервере_Продажи(Форма) Экспорт
	//++ Локализация
	ЗначенияПоУмолчанию = Форма.ЗначенияПоУмолчанию;
	Если ЗначенияПоУмолчанию = Неопределено Тогда
		ЗначенияПоУмолчанию = Новый Структура;
	КонецЕсли;
	Форма.ЗначенияПоУмолчанию = ЗначенияПоУмолчанию;
	//-- Локализация
	Возврат
КонецПроцедуры

// Параметры:
// 	РеквизитПутьКДанным - Строка -
// 	Форма - см. Обработка.ПанельАдминистрированияУТ.Форма.Продажи
Процедура УстановитьДоступность_Продажи(РеквизитПутьКДанным, Форма) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	НаборКонстант = Форма.НаборКонстант;
	
	Элементы.ГруппаВариантОбособленияТоваровВАгентскихЗакупкахОбщая.Видимость = Ложь;
	Элементы.ГруппаУправлениеКомиссиейПриЗакупках.Видимость = Ложь;
	Элементы.ГруппаВариантОбособленияТоваровУслугПоАгентскойЗакупке.Видимость = Ложь;
	Элементы.ГруппаВариантОбособленияТоваровАгентскаяСхемаПоЗакупкам.Видимость = Ложь;
	Элементы.ГруппаАгентскиеПродажиУслуг.Видимость = Ложь;
	Элементы.ГруппаИспользоватьАктыНаПередачуПрав.Видимость = Ложь;
	Элементы.ГруппаКомментарийИспользоватьОтгрузкуБезПереходаПраваСобственности.Видимость = Ложь;
	Элементы.ГруппаИспользоватьОтгрузкуБезПереходаПраваСобственности.Видимость = Ложь;	
	Элементы.ГруппаИспользоватьАктыНаПередачуПрав.Видимость = Ложь;	
	Элементы.ИспользоватьКорректировкиРеализаций.Видимость = Ложь;
	Элементы.НаименованиеДляПечатиВидовНоменклатуры.Видимость = Ложь;

	Если РеквизитПутьКДанным = "ИспользоватьПродажуАгентскихУслуг" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = Константы.ИспользоватьПродажуАгентскихУслуг.Получить();
		Элементы.ИспользоватьКомиссиюПриЗакупках.Доступность = НЕ ЗначениеКонстанты;
		Элементы.ГруппаКомментарийИспользоватьКомиссионныеЗакупки.Видимость = ЗначениеКонстанты;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЗаказыКлиентов" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ВедетсяРаботаЧерезТорговыхПредставителей"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		УстановитьДоступностьНастроекТорговыхПредставителей(Форма);
	
	КонецЕсли;
	

	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДоговорыСКлиентами" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстантыОтветственногоХранения =Константы.ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи.Получить();
		ЗначениеКонстантыИспользованиеАгентскойЗакупки = Константы.ИспользоватьОказаниеАгентскихУслугПриЗакупке.Получить();
		
        ДоступноРедактированиеДоговорыСКлиентами = Истина
								И Не ЗначениеКонстантыОтветственногоХранения
								И Не ЗначениеКонстантыИспользованиеАгентскойЗакупки;
		
        ВидимостьПредупрежденияДоговорыСКлиентами = Ложь;
		
		Элементы.ИспользоватьДоговорыСКлиентами.Доступность = ДоступноРедактированиеДоговорыСКлиентами;
		Элементы.ЛокализацияГруппаИспользоватьДоговорыСКлиентамиПредупреждение.Видимость = ВидимостьПредупрежденияДоговорыСКлиентами;
		Элементы.ЛокализацияГруппаКомментарийИспользоватьДоговорыСКлиентамиПередачаНаХранение.Видимость = Не ВидимостьПредупрежденияДоговорыСКлиентами
															И ЗначениеКонстантыОтветственногоХранения;
	КонецЕсли;
	
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура СохранитьЗначениеРеквизита_Продажи(КонстантаИмя, КонстантаЗначение, Форма) Экспорт
	//++ Локализация

	//-- Локализация
	Возврат
КонецПроцедуры

Процедура ОтображениеПредупрежденияПриРедактировании_Продажи(СтруктураКонстант) Экспорт
	//++ Локализация
	СтруктураКонстант.Вставить("ИспользоватьКомиссиюПриЗакупках");
	//-- Локализация
	Возврат
КонецПроцедуры

//++ Локализация

// Параметры:
// 	Форма - см. Обработка.ПанельАдминистрированияУТ.Форма.Продажи
Процедура УстановитьДоступностьНастроекТорговыхПредставителей(Форма)
	
	Элементы = Форма.Элементы;
	ЗначениеКонстанты = Форма.НаборКонстант.ВедетсяРаботаЧерезТорговыхПредставителей;
	
	Элементы.ИспользованиеЗаданийТорговымПредставителям.Доступность				= ЗначениеКонстанты;
	
	Элементы.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре.Доступность =
		Форма.НаборКонстант.ИспользованиеЗаданийТорговымПредставителям <> Перечисления.ИспользованиеЗаданийТорговымПредставителям.НеИспользуются;
	
КонецПроцедуры
//-- Локализация

#КонецОбласти

#Область ОбработчикиСобытий_ПанельАдминистрированияУТ_ФинансовыйРезультат

Процедура ПриСозданииНаСервере_ФинансовыйРезультат(Форма) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	//-- Локализация
КонецПроцедуры

Процедура ПриЧтенииНаСервере_ФинансовыйРезультат(Форма) Экспорт
	//++ Локализация
	ЗначенияПоУмолчанию = Форма.ЗначенияПоУмолчанию;
	Если ЗначенияПоУмолчанию = Неопределено Тогда
		ЗначенияПоУмолчанию = Новый Структура;
	КонецЕсли;
	
	ЗначенияПоУмолчанию.Вставить("ФормироватьУправленческийБаланс");
	
	Форма.ЗначенияПоУмолчанию = ЗначенияПоУмолчанию;
	//-- Локализация
	Возврат
КонецПроцедуры

// Параметры:
// 	РеквизитПутьКДанным - Строка -
// 	Форма - см. Обработка.ПанельАдминистрированияУТ.Форма.ФинансовыйРезультатИКонтроллинг
Процедура УстановитьДоступность_ФинансовыйРезультат(РеквизитПутьКДанным, Форма) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	НаборКонстант = Форма.НаборКонстант;
	
	ИспользоватьВнеоборотныеАктивы2_2 = Ложь;
	//++ НЕ УТ
	ИспользоватьВнеоборотныеАктивы2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2");
	//-- НЕ УТ
	
	ИспользоватьМФУ = Ложь;
	Элементы.ГруппаКомментарийИспользованиеМФУ.Видимость = ИспользоватьМФУ;
	Элементы.ГруппаДетализацияФинансовогоРезультата.Доступность = НЕ ИспользоватьМФУ;
	
	// В новой базе выключена видимость выбора версии партионного учета:
	// если включен партионный учет версии 2.2 с пустой датой перехода.
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22()
	 И Не ЗначениеЗаполнено(РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22()) Тогда
		ПартионныйУчетВерсии22ВоВсехПериодах = Истина;
	Иначе
		ПартионныйУчетВерсии22ВоВсехПериодах = Ложь;
	КонецЕсли;
	
	// В новой базе нельзя выключить управленческий учет по правилам МФУ (выключена видимость флажка):
	// если включен управленческий учет организаций с пустой датой перехода и
	// ранее не использовались внеоборотные активы версии 2.2.
	Если РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций()
	 И НЕ ЗначениеЗаполнено(РасчетСебестоимостиПовтИсп.ДатаНачалаВеденияУправленческогоУчетаОрганизаций())
	 И Не ИспользоватьВнеоборотныеАктивы2_2 Тогда
		УправленческийУчетОрганизацийВоВсехПериодах = Истина;
	Иначе
		УправленческийУчетОрганизацийВоВсехПериодах = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияДопНастройкиУчетаСебестоимости.Видимость = НЕ ПартионныйУчетВерсии22ВоВсехПериодах
		ИЛИ НЕ УправленческийУчетОрганизацийВоВсехПериодах;
	
	ПолеДоступно = Истина;
	//++ НЕ УТ
	ПолеДоступно = НЕ ИспользоватьВнеоборотныеАктивы2_2;
	//-- НЕ УТ
	
	Элементы.ИспользоватьУчетСебестоимости.Доступность 				  = ПолеДоступно;
	Элементы.ДатаНачалаУчетаСебестоимости.Доступность 				  = ПолеДоступно И НаборКонстант.ИспользоватьУчетСебестоимости;
	Элементы.ГруппаКомментарийИспользоватьУчетСебестоимости.Видимость = НЕ ПолеДоступно;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура СохранитьЗначениеРеквизита_ФинансовыйРезультат(КонстантаИмя, КонстантаЗначение, Форма) Экспорт
	//++ Локализация
	НаборКонстант = Форма.НаборКонстант;
	//++ НЕ УТ
	Если КонстантаИмя = "ВестиУправленческийУчетОрганизаций"
		ИЛИ КонстантаИмя = "ДатаНачалаВеденияУправленческогоУчетаОрганизаций" Тогда
		
		Если Форма.НачалоВеденияУправленческогоУчетаОрганизаций = 0
		 И НаборКонстант.ВестиУУНаПланеСчетовХозрасчетный 
		 И НаборКонстант.ДатаНачалаВеденияУправленческогоУчетаОрганизаций > НачалоМесяца(НаборКонстант.ДатаНачалаУУНаПланеСчетовХозрасчетный) Тогда
		 
			КонстантаМенеджер        = Константы["ДатаНачалаВеденияУправленческогоУчетаОрганизаций"];
			КонстантаПрошлоеЗначение = КонстантаМенеджер.Получить();
			
			КонстантаЗначение = Макс(КонстантаПрошлоеЗначение, НачалоМесяца(НаборКонстант.ДатаНачалаУУНаПланеСчетовХозрасчетный));
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Период не может быть больше даты начала ведения управленческого учета на плане счетов регламентированного учета: %1';uk='Період не може бути більше дати початку ведення управлінського обліку на плані рахунків регламентованого обліку: %1'"),
				Формат(НачалоМесяца(НаборКонстант.ДатаНачалаУУНаПланеСчетовХозрасчетный), "ДЛФ=Д"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , "НаборКонстант.ДатаНачалаВеденияУправленческогоУчетаОрганизаций");
			
			Если КонстантаПрошлоеЗначение <> КонстантаЗначение Тогда
				КонстантаМенеджер.Установить(КонстантаЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура ОтображениеПредупрежденияПриРедактировании_ФинансовыйРезультат(СтруктураКонстант) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура ДоступностьВестиУправленческийУчетОрганизаций(Форма, КомментарийОпции) Экспорт
	//++ Локализация
	//++ НЕ УТ
	НаборКонстант = Форма.НаборКонстант;
	Если НаборКонстант.ВестиУправленческийУчетОрганизаций
		И НаборКонстант.ВестиУУНаПланеСчетовХозрасчетный Тогда   
		Если НЕ ЗначениеЗаполнено(КомментарийОпции) Тогда
			КомментарийОпции = НСтр("ru='Невозможно отключение использования управленческого учета по правилам МФУ, потому что включены опции:';uk='Неможливо відключення використання управлінського обліку за правилами МФО, тому що включені опції:'");
		КонецЕсли; 
		ДобавляемаяСтрока = НСтр("ru='- Управленческий учет на плане счетов регламентированного учета (раздел ""НСИ и администрирование"" - ""Регламентированный учет"")';uk='- Управлінський облік на плані рахунків регламентованого обліку (розділ ""НДІ і адміністрування"" - ""Регламентований облік"")'");
		КомментарийОпции = КомментарийОпции + Символы.ПС + ДобавляемаяСтрока;
	КонецЕсли;
	//-- НЕ УТ
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикСобытий_ПанельАдминистрированияУТ_СкладИДоставка

// Параметры:
// 	Форма - см. Обработка.ПанельАдминистрированияУТ.Форма.СкладИДоставка
Процедура ПриСозданииНаСервере_СкладИДоставка(Форма) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	
	ЗаголовокОтключения = НСтр("ru='Перед отключением обособленного обеспечения, необходимо отключить:';uk='Перед відключенням відокремленого забезпечення, необхідно відключити:'");
	
	//++ НЕ УТ
	Элементы.КомментарийОбеспечениеРЦ.Заголовок =
		НСтр("ru='Этот функционал доступен, если разрешено использование хотя бы одного из следующих видов документов:
|- ""Заказ на перемещение"" (раздел ""НСИ и администрирование"" — ""Склад и доставка"")
|- ""Заказ материалов в производство"" (раздел ""НСИ и администрирование"" — ""Производство"")'
|;uk='Цей функціонал доступний, якщо дозволено використання хоча б одного з наступних видів документів: 
|- ""Замовлення на переміщення"" (розділ ""НДІ і адміністрування"" - ""Склад і доставка"") 
|- ""Замовлення матеріалів у виробництво"" (розділ ""НДІ і адміністрування"" - ""Виробництво"")'");
	
	Элементы.КомментарийИспользоватьОбособленноеОбеспечениеЗаказовУП.Заголовок = 
		НСтр("ru='Этот функционал доступен если:
|- Используется производство (раздел ""Производство и ремонты"")
|- Используется управление ремонтами (раздел ""Производство и ремонты"")
|- Используется переработка на стороне (раздел ""Производство и ремонты"")
|А также если разрешено использование хотя бы одного из следующих видов документов:
|- Заказы на внутреннее потребление (раздел ""Склад и доставка"")
|- Заказы на сборку (раздел ""Склад и доставка"")
|- Заказы клиента, режим ""со склада и под заказ"" (раздел ""Продажи"")
|- Заявки на возврат, режим ""со склада и под заказ"" (раздел ""Продажи"")
|- Заказы на перемещение (раздел ""Склад и доставка"")'
|;uk='Цей функціонал доступний якщо: 
|- Використовується виробництво (розділ ""Виробництво і ремонти"") 
|- Використовується управління ремонтами (розділ ""Виробництво і ремонти"") 
|- Використовується переробка на стороні (розділ ""Виробництво і ремонти"") 
|А також якщо дозволено використання хоча б одного з наступних видів документів: 
|- Замовлення на внутрішнє споживання (розділ ""Склад і доставка"") 
|- Замовлення на збирання (розділ ""Склад і доставка"") 
|- Замовлення клієнта, режим ""зі складу та під замовлення"" (розділ ""Продажі"") 
|- Заявки на повернення, режим ""зі складу та під замовлення"" (розділ ""Продажі"") 
|- Замовлення на переміщення (розділ ""Склад і доставка"")'");
	
	//-- НЕ УТ
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
		ЗаголовокОтключения = ЗаголовокОтключения + НСтр("ru='
|– учет затрат по всем направлениям деятельности'
|;uk='
|- облік витрат по всіх напрямах діяльності'");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОказаниеАгентскихУслугПриЗакупке") 
		 И Константы.ВариантОбособленияТоваровВПродажах.Получить() = Перечисления.ВариантыОбособленияТоваровВПродажах.ЗаказКлиента Тогда
		ЗаголовокОтключения = ЗаголовокОтключения + НСтр("ru='
|– вариант обособления товаров и услуг по агентской схеме ""по заказам"" (раздел ""НСИ и администрирование"" — ""Продажи"")'
|;uk='- варіант відокремлення товарів і послуг за агентською схемою ""на замовлення"" (розділ ""НДІ і адміністрування"" - ""Продажі"")'");
	КонецЕсли;	 
	
	Элементы.КомментарийИспользоватьОбособленноеОбеспечениеЗаказовОтключение.Заголовок = ЗаголовокОтключения;
	
	//-- Локализация
	
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ

#Область ОбработчикиСобытий_ПанельАдминистрированияКА_Производство

// Параметры:
// 	Форма - см. Обработка.ПанельАдминистрированияКА.Форма.Производство
Процедура ПриСозданииНаСервере_Производство(Форма) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	Элементы = Форма.Элементы;
	НаборКонстант = Форма.НаборКонстант;
	
	Элементы.ЛокализацияГруппаПроизводство21.Видимость =
		НаборКонстант.ИспользоватьУправлениеПроизводством
		ИЛИ Производство21ИспользовалосьРанее();
		
	Если Элементы.ЛокализацияГруппаПроизводство21.Видимость = Истина Тогда
		Элементы.ИспользоватьПроизводство21.Заголовок = НСтр("ru='Использовать производство (версия 2.1)';uk='Використовувати виробництво (версія 2.1)'");
		Элементы.ИспользоватьПроизводство22.Заголовок = НСтр("ru='Использовать производство (версия 2.5)';uk='Використовувати виробництво (версія 2.5)'");
	КонецЕсли;
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура ПриЧтенииНаСервере_Производство(Форма) Экспорт
	//++ Локализация
	ЗначенияПоУмолчанию = Форма.ЗначенияПоУмолчанию;
	Если ЗначенияПоУмолчанию = Неопределено Тогда
		ЗначенияПоУмолчанию = Новый Структура;
	КонецЕсли;
	ЗначенияПоУмолчанию.Вставить("ИспользоватьУправлениеПроизводством");
	
	Форма.ЗначенияПоУмолчанию = ЗначенияПоУмолчанию;
	//-- Локализация
	Возврат
КонецПроцедуры

// Параметры:
// 	РеквизитПутьКДанным - Строка -
// 	Форма - см. Обработка.ПанельАдминистрированияКА.Форма.Производство
Процедура УстановитьДоступность_Производство(РеквизитПутьКДанным, Форма) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	НаборКонстант = Форма.НаборКонстант;
	
	// ИспользоватьПроизводство, ИспользоватьУправлениеПроизводством
	Если РеквизитПутьКДанным = "" 
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0 Тогда
	
	КонецЕсли;
	
	
	//ИспользоватьПроизводствоНаСтороне
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСтатусыЗаказовПереработчикам"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ИспользоватьПереработку = Константы.ИспользоватьПроизводствоНаСтороне.Получить();
		ИспользоватьКонстанты = ИспользоватьПереработку И Константы.ИспользоватьСтатусыЗаказовПереработчикам.Получить();
		
		Элементы.НеЗакрыватьЗаказыПереработчикамБезПолнойОтработки.Доступность = ИспользоватьКонстанты;
		Элементы.НеЗакрыватьЗаказыПереработчикамБезПолнойОплаты.Доступность = ИспользоватьКонстанты;
		Элементы.ГруппаКомментарийКонтролироватьЗакрытиеЗаказовПереработчикам.Видимость = ИспользоватьПереработку И НЕ ИспользоватьКонстанты;
		
	КонецЕсли;
	
	// ИспользоватьПроизводствоНаСтороне
	Если РеквизитПутьКДанным = "" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне" 
		Тогда
		
		ЗапрещеноИзменениеКонстанты = Ложь;
		
		Элементы.ИспользоватьСтатусыЗаказовПереработчикам.Доступность = 
			?(ЗапрещеноИзменениеКонстанты, Ложь, НаборКонстант.ИспользоватьПроизводствоНаСтороне);
		
		Элементы.ГруппаКомментарийИспользоватьСтатусыЗаказовПереработчикам.Видимость = ЗапрещеноИзменениеКонстанты;
		
	КонецЕсли;
	//ВалютаПлановойСебестоимостиПродукции
	Если РеквизитПутьКДанным = "НаборКонстант.ВалютаПлановойСебестоимостиПродукции" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ВалютаПлановойСебестоимостиВыпуска, ЗначениеЗаполнено(НаборКонстант.ВалютаПлановойСебестоимостиПродукции));
		КонецЕсли;
		
	
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура СохранитьЗначениеРеквизита_Производство(КонстантаИмя, КонстантаЗначение, Форма) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

Процедура ОтображениеПредупрежденияПриРедактировании_Производство(СтруктураКонстант) Экспорт
	//++ Локализация
	СтруктураКонстант.Вставить("ИспользоватьСтатусыЗаказовПереработчикам");
	//-- Локализация
	Возврат
КонецПроцедуры

//++ Локализация

Функция Производство21ИспользовалосьРанее() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|	И НЕ Таблица.УправлениеПроизводством2_2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПередачаМатериаловВПроизводство КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка
	|ИЗ
	|	Документ.ПеремещениеМатериаловВПроизводстве КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка
	|ИЗ
	|	Документ.ВыпускПродукции КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка
	|ИЗ
	|	Документ.ВозвратМатериаловИзПроизводства КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка
	|ИЗ
	|	Документ.СписаниеЗатратНаВыпуск КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка
	|ИЗ
	|	Документ.ИзделияИЗатратыНЗП КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|
	|");
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

//-- Локализация
#КонецОбласти

#Область ОбработчикиСобытий_ПанельАдминистрированияКА_ВнеоборотныеАктивы

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ПриСозданииНаСервере_ВнеоборотныеАктивы(Форма) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	Элементы = Форма.Элементы;
	
		СписокВыбора = Элементы.УчетВнеоборотныхАктивов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить("", НСтр("ru='Не используется';uk='Не використовується'"));
		СписокВыбора.Добавить("2_2", НСтр("ru='Версия 2.1';uk='Версія 2.1'"));
	
	Если ПолучитьФункциональнуюОпцию("УправлениеПредприятием") Тогда
		Элементы.ГруппаКомментарийИспользоватьАмортизациюБухгалтерскогоУчетаКА.Видимость = Ложь;
	Иначе
		Элементы.ГруппаКомментарийИспользоватьАмортизациюБухгалтерскогоУчетаУП.Видимость = Ложь;
	КонецЕсли; 

	Элементы.ЛокализацияГруппаПереходНаУчет24.Видимость = Ложь;
	
	//-- Локализация
	
КонецПроцедуры

// Параметры:
// 	РеквизитПутьКДанным - Строка -
// 	Форма - см. Обработка.ПанельАдминистрированияКА.Форма.ВнеоборотныеАктивы
Процедура УстановитьДоступность_ВнеоборотныеАктивы(Форма, РеквизитПутьКДанным) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	НаборКонстант = Форма.НаборКонстант;
	
	ОпределитьДоступностьУчета2_2(Форма);
	
	ИспользоватьРеглУчет = Константы.ИспользоватьРеглУчет.Получить();
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьВнеоборотныеАктивы2_2" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьВнеоборотныеАктивы2_4" 
		ИЛИ РеквизитПутьКДанным = "УчетВнеоборотныхАктивов" 
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ИспользуютсяОбеВерсии = НаборКонстант.ИспользоватьВнеоборотныеАктивы2_2 И НаборКонстант.ИспользоватьВнеоборотныеАктивы2_4;
		
		Элементы.ОтображатьВнеоборотныеАктивы2_2.Видимость = ИспользуютсяОбеВерсии;
		Элементы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Видимость = ИспользуютсяОбеВерсии;
		
		Элементы.ЛокализацияГруппаВнеоборотныеАктивы22.Видимость = НаборКонстант.ИспользоватьВнеоборотныеАктивы2_2;
		Элементы.ЛокализацияГруппаВнеоборотныеАктивы22.ОтображатьЗаголовок = ИспользуютсяОбеВерсии;
		
		Элементы.ЛокализацияГруппаВнеоборотныеАктивы24.Видимость = НаборКонстант.ИспользоватьВнеоборотныеАктивы2_4;
		Элементы.ЛокализацияГруппаВнеоборотныеАктивы24.ОтображатьЗаголовок = ИспользуютсяОбеВерсии;
		
			
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьВнеоборотныеАктивы2_2" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьВнеоборотныеАктивы2_4" 
		ИЛИ РеквизитПутьКДанным = "УчетВнеоборотныхАктивов" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ОтображатьВнеоборотныеАктивы2_2" 
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ОткрытьПомощникПерехода.Видимость = Ложь;
			
	КонецЕсли;
		
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ИспользоватьМФУ = Ложь;
		ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет = Ложь;
		
		Элементы.ГруппаИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет.Доступность = ИспользоватьМФУ;
		Элементы.ГруппаКомментарийВНАМеждународныйУчет.Видимость = 
			НЕ ИспользоватьМФУ И ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
		//
		Элементы.ГруппаИспользоватьАмортизациюБухгалтерскогоУчета.Доступность =
			ИспользоватьРеглУчет И Не (ИспользоватьМФУ И ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет);
		Элементы.ГруппаКомментарийИспользоватьАмортизациюБухгалтерскогоУчетаКА.Видимость =
		    НЕ ПолучитьФункциональнуюОпцию("УправлениеПредприятием")
			И (Не ИспользоватьРеглУчет ИЛИ (ИспользоватьМФУ И ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет));
			
		//
		Элементы.ГруппаКомментарийИспользоватьАмортизациюБухгалтерскогоУчетаУП.Видимость =
			ПолучитьФункциональнуюОпцию("УправлениеПредприятием")
			И (Не ИспользоватьРеглУчет ИЛИ (ИспользоватьМФУ И ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет));
	
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "" Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ПорядокУчетаВНАВУпрУчетеПоСтандартамРегл, Форма.НаличиеУчета.ЕстьУчет2_4);
			
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ПорядокУчетаВНАВУпрУчетеПоСтандартамМУ, Форма.НаличиеУчета.ЕстьУчет2_4);
			
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ДатаНачалаУчетаВнеоборотныхАктивов2_4, Форма.НаличиеУчета.ЕстьУчет2_4);
			
	КонецЕсли;
	
	
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

Процедура ОпределитьДоступностьУчета2_2(Форма)
	
	Форма.ДоступностьУчета22 = Новый ФиксированнаяСтруктура(ВнеоборотныеАктивыЛокализация.УсловияПереходаНаУчет2_2());
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

//-- НЕ УТ


#КонецОбласти
//-- НЕ БЗК

#КонецОбласти