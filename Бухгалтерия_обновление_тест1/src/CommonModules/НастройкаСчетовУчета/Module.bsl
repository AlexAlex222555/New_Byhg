
#Область ПрограммныйИнтерфейс

#Область НастройкаСчетовУчетаПрочихОпераций

// Возвращает структуру параметров настройки счета учета операции.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ДоступностьПоОперации - Булево - Признак доступности настройки по хозяйственной операции документа.
// 	
// 	* ПутьКДанным - Строка - Путь к данным настройки счетов регл. учета (Например, "Объект" или "Объект.ПрочиеРасходы")
// 	* СчетУчета - Строка - Имя реквизита хранения счета учета регл. учета. Значение по умолчанию "СчетУчета"
// 	* Субконто1 - Строка - Имя реквизита хранения Субконто1. Значение по умолчанию "Субконто1"
// 	* Субконто2 - Строка - Имя реквизита хранения Субконто2. Значение по умолчанию "Субконто2"
// 	* Субконто3 - Строка - Имя реквизита хранения Субконто3. Значение по умолчанию "Субконто3"
// 	
// 	* Представление - Строка - Имя реквизита формы (Типа Строка) для хранения представления гиперссылки настройки.
// 	                       Значение по умолчанию "ПредставлениеОтраженияОперации".
// 	* ТипСтатьи - Строка - Имя реквизита ТипСтатьи (Типа Число), в котором хранится числовой индекс типа выбранной статьи.
// 	                       Заполнение реквизита обеспечивается функциями выбора статей и аналитик механизма учета доходов и расходов.
// 	                       См. ДоходыИРасходыКлиентСервер.ПараметрыВыбораСтатьиИАналитики.
// 	                       Если параметр указан, то настройка счетов учета доступна только при выбранной статье прочих активов и пассивов (ТипСтатьи = 3).
// 
//	* Организация - Строка - Полный путь к данным организации документа. Значение по умолчанию "ТипСтатьи".
//	* АналитикаАктивовПассивов - Строка - Полный путь к данным выбранной аналитики прочих активов пассивов.
//
//	* ИсточникиПодбораСубконто - СписокЗначений - Список источников автоматического подбора субконто
//       * Значение - Произвольный - Тип источника автоматического подбора субконто (Например, Тип("СправочникСсылка.ФизическиеЛица"))
//       * Заголовок - Строка - Путь к данным источника, (Например, "Объект.Начисление.ФизическоеЛицо").
//                                   
//	* ЭлементыФормы - Массив - Имена элементов формы, через которые выполняется настройка счетов учета.
//	
//	* УсловияДоступностиСчетаУчетаВСтроках - Структура - Дополнительные условия доступности настройки в строках таблицы. 
//	                                                 Если условий несколько, то доступность определяется по "И".
//	                                                 В элементах структуры:
//	                                                 	* Ключ - Строка - Имя реквизита таблицы, определяющее доступность статьи.
//	                                                 	* Значение - Произвольный - Значение реквизита, при котором выбор статьи доступен.
//	* СкрыватьНедоступныйСчетУчетаВСтроках - Булево - Если Истина, то недоступные в строках статьи и аналитики скрываются.
//	                                               Если Ложь, то для ячеек устанавливается оформление ТолькоПросмотр. Значение по умолчанию Ложь.
//	
Функция ПараметрыНастройки() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДоступностьПоОперации", Истина);
	
	Параметры.Вставить("ПутьКДанным", "");
	Параметры.Вставить("СчетУчета", "СчетУчета");
	Параметры.Вставить("Субконто1", "Субконто1");
	Параметры.Вставить("Субконто2", "Субконто2");
	Параметры.Вставить("Субконто3", "Субконто3");
	
	// Вспомогательные реквизиты формы
	Параметры.Вставить("ТипСтатьи",     "");
	Параметры.Вставить("Представление", "ПредставлениеОтраженияОперации");
	
	// Путь к данным "контекста" настройки
	Параметры.Вставить("Организация",   "Объект.Организация");
	Параметры.Вставить("АналитикаАктивовПассивов",   "");
	
	// Автоподбор субконто
	Параметры.Вставить("ИсточникиПодбораСубконто", Новый СписокЗначений());
	
	// Элементы формы, которые используются для настройки
	Параметры.Вставить("ЭлементыФормы", Новый Массив());
	
	Параметры.Вставить("УсловияДоступностиСчетаУчетаВСтроках", Новый Структура);
	Параметры.Вставить("СкрыватьНедоступныйСчетУчетаВСтроках", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Инициализирует форму объекта в соответствии с свойствами элементов настройки счетов учета.
// Вызывается в обработчике формы ПриСозданииНаСервере().
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
// 	ПараметрыНастройки - Массив, Структура - Параметры настройки (См. НастройкаСчетовУчета.ПараметрыНастройки).
// 	                                         Если для объекта выполняется настройка нескольких счетов, то передается массив.
// 	                                         Каждый элемент массива - структура параметров.
//
Процедура ПриСозданииНаСервере(Форма, ПараметрыНастройки) Экспорт
	
	ДанныеНастройкиСчетовУчета = ДанныеНастройкиОтраженияОперации(Форма, ПараметрыНастройки);
	
	Если Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкиСчетовУчета Тогда
		Для каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
			Для каждого ИмяЭлемента Из ПараметрыНастройки.ЭлементыФормы Цикл
				Форма.Элементы[ИмяЭлемента].Видимость = Ложь;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	//++ Локализация
	УсловноеОформление = Форма.УсловноеОформление;
	Для каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		
		Для каждого ИмяЭлемента Из ПараметрыНастройки.ЭлементыФормы Цикл
			
			ДанныеНастройки = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным);
			Если ТипЗнч(ДанныеНастройки) <> Тип("ДанныеФормыКоллекция") Тогда
				Продолжить;
			КонецЕсли;
			
			#Область ДоступностьВСтрокахТаблицыПоУсловию
			Если ЗначениеЗаполнено(ПараметрыНастройки.УсловияДоступностиСчетаУчетаВСтроках) Тогда
				
				ЭлементОформления = УсловноеОформление.Элементы.Добавить();
				Для каждого ИмяЭлемента Из ПараметрыНастройки.ЭлементыФормы Цикл
					ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
				КонецЦикла;
				
				Группа = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				Группа.ТипГруппы =  ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				Для каждого ПолеИЗначение Из ПараметрыНастройки.УсловияДоступностиСчетаУчетаВСтроках Цикл
					ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ПолеКомпоновки = СтрШаблон("%1.%2", ПараметрыНастройки.ПутьКДанным, ПолеИЗначение.Ключ);
					ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеКомпоновки);
					ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
					ОтборЭлемента.ПравоеЗначение = ПолеИЗначение.Значение;
				КонецЦикла;
				
				Если ПараметрыНастройки.СкрыватьНедоступныйСчетУчетаВСтроках Тогда
					ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
				Иначе
					ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
				КонецЕсли;
				
			КонецЕсли;
			#КонецОбласти

			#Область ЦветГиперссылки
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ЦветГиперссылки);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			РеквизитЭлемента = ПараметрыНастройки.ПутьКДанным + "." + ПараметрыНастройки.Представление;
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(РеквизитЭлемента);
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ЦветГиперссылки);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Настроить';uk='Настроїти'"));
			#КонецОбласти
			
			// Условное оформление по типу статьи
			Если ПараметрыНастройки.ТипСтатьи = "" Тогда
				Продолжить;
			КонецЕсли;
			
			#Область ЦветГиперссылки
			РеквизитТипСтатьи = ПараметрыНастройки.ПутьКДанным + "." + ПараметрыНастройки.ТипСтатьи;
			
			// Тип статьи не определен
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(РеквизитТипСтатьи);
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 0;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<определяется статьей>';uk='<визначається статтею>'"));
			Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
			
			// Статьи расходов
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(РеквизитТипСтатьи);
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 1;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<определяется статьей расходов>';uk='<визначається статтею витрат>'"));
			Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
			
			// Статьи доходов
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(РеквизитТипСтатьи);
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 2;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<определяется статьей доходов>';uk='<визначається статтею доходів>'"));
			Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
			#КонецОбласти
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета") = Неопределено Тогда
		// Открытие формы нового объекта
		ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "НастройкаСчетовУчета", ДанныеНастройкиСчетовУчета);
		Если ДанныеНастройкиСчетовУчета.ДоступнаНастройкиСчетовУчета Тогда
			НастройкаСчетовУчетаКлиентСервер.ЗаполнитьПредставлениеНастройки(Форма, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
			НастройкаСчетовУчетаКлиентСервер.УстановитьВидимостьЭлементовФормы(Форма, ДанныеНастройкиСчетовУчета);
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Устанавливает свойства элементов настройки при чтении данных объекта настройки.
// Вызывается в обработчике формы ПриЧтенииНаСервере().
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
// 	ПараметрыНастройки - Массив, Структура - Параметры настройки (См. НастройкаСчетовУчета.ПараметрыНастройки).
// 	                                         Если для объекта выполняется настройка нескольких счетов, то передается массив.
// 	                                         Каждый элемент массива - структура параметров.
//
Процедура ПриЧтенииНаСервере(Форма, ПараметрыНастройки) Экспорт
	
	ДанныеНастройкиСчетовУчета = ДанныеНастройкиОтраженияОперации(Форма, ПараметрыНастройки);
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "НастройкаСчетовУчета", ДанныеНастройкиСчетовУчета);
	Если Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкиСчетовУчета Тогда
		Для каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
			Для каждого ИмяЭлемента Из ПараметрыНастройки.ЭлементыФормы Цикл
				Форма.Элементы[ИмяЭлемента].Видимость = Ложь;
			КонецЦикла;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьПредставлениеНастройки(Форма, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
	НастройкаСчетовУчетаКлиентСервер.УстановитьВидимостьЭлементовФормы(Форма, ДанныеНастройкиСчетовУчета);
	//-- Локализация
	
КонецПроцедуры

// Заполняет значение субконто по свойству ИсточникиПодбораСубконто (если источники указаны).
// Вызывается в обработчике формы ПередЗаписьюНаСервере().
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта
// 	ТекущийОбъект - ДокументОбъект - Записываемый объект
//
Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект) Экспорт
	
	//++ Локализация
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если ДанныеНастройкиСчетовУчета = Неопределено ИЛИ Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкиСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьНеактуальныеНастройкиОтраженияВОбъекте(Форма, ТекущийОбъект, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
	ЗаполнитьСубконтоИзИсточников(ТекущийОбъект, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
	//-- Локализация
	
КонецПроцедуры

// Устанавливает свойства элементов настройки после записи данных объекта настройки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
//
Процедура ПослеЗаписиНаСервере(Форма) Экспорт
	
	//++ Локализация
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если ДанныеНастройкиСчетовУчета = Неопределено ИЛИ Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкиСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьПредставлениеНастройки(Форма, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
	//-- Локализация
	
КонецПроцедуры

// Выполняет настройку формы под новые параметры.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
// 	ПараметрыНастройки - Структура, Массив - Параметры настройки (См. НастройкаСчетовУчета.ПараметрыНастройки).
// 	                                         Если для объекта выполняется настройка нескольких счетов, то передается массив.
// 	                                         Каждый элемент массива - структура параметров.
//
Процедура ПриИзмененииПараметровНастройки(Форма, ПараметрыНастройки) Экспорт
	
	//++ Локализация
	ДанныеНастройкиСчетовУчета = ДанныеНастройкиОтраженияОперации(Форма, ПараметрыНастройки);
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "НастройкаСчетовУчета", ДанныеНастройкиСчетовУчета);
	
	ОчиститьНеактуальныеНастройкиОтраженияВДанныхФормы(Форма, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьПредставлениеНастройки(Форма, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
	НастройкаСчетовУчетаКлиентСервер.УстановитьВидимостьЭлементовФормы(Форма, ДанныеНастройкиСчетовУчета);
	//-- Локализация
	
КонецПроцедуры

// Вызывается после программного установки счетов учета для обновления отображения на форме.
//
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
// 	ПутьКДанным - Строка - Путь к данным настройки счетов
// 	ИдентификаторыСтрок - Число, Массив - Идентификаторы измененных строк. 
// 	                               Если счет учета в таблице, а идентификаторы измененных строк не переданы, то будут обновлены данные во всей таблице.
//
Процедура ОбновитьПредставлениеНастройки(Форма, ПутьКДанным, ИдентификаторыСтрок = Неопределено) Экспорт
	
	//++ Локализация
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкиСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьПредставлениеНастройки(Форма, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки, ПутьКДанным, ИдентификаторыСтрок);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаСчетовУчетаНоменклатуры

// Выполняет проверку заполнения счетов учета в объекте.
// 
// Параметры:
// 	Объект - Произвольный - Объект хранения настроек счетов
//	Отказ - Булево - Флаг Отказ
//	ПроверяемыеРеквизиты - Массив - Проверяемые реквизиты
//
Процедура ОбработкаПроверкиЗаполненияСчетовУчетаНоменклатуры(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВыбораСубконто

// Функция возвращает типы значений, для которых имеет смысл отбор по организации
//
// Возвращаемое значение:
//	ОписаниеТипов - Описание типов справочников, которые зависят от организации.
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	СтрокаТипов = 
		"СправочникСсылка.БанковскиеСчетаОрганизаций,
		|СправочникСсылка.ДоговорыКонтрагентов,
		|СправочникСсылка.ДоговорыКредитовИДепозитов,
		|СправочникСсылка.ДоговорыЛизинга,
		//++ Локализация
		//-- Локализация
		|СправочникСсылка.ДоговорыМеждуОрганизациями
		|";

	Возврат Новый ОписаниеТипов(Документы.ТипВсеСсылки(), СтрокаТипов);
	
КонецФункции

#КонецОбласти

// Вызывается из соответствующего обработчика формы с настраиваемыми счетами учета
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо проверить заполнение настроек счетов учета (и субконто)
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Выполняет сохранение счетов учета.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта настройки;
//  Отказ - Булево - Признак отказа от записи, см. параметр "Отказ" события ПриЗаписиНаСервере();
// 	Объект - СправочникОбъект, ДанныеФормыСтруктура, Произвольный - Объект хранения настроек счетов, см. параметр "ТекущийОбъект" события ПриЗаписиНаСервере();
// 	ПараметрыЗаписи - Структура - содержит параметры записи, см. параметр "ПараметрыЗаписи" события ПриЗаписиНаСервере().
//
Процедура ПриЗаписиОбъектаНастройкиСчетовУчета(Форма, Отказ, Объект, ПараметрыЗаписи) Экспорт
	//++ Локализация
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если Отказ Или ДанныеНастройкиСчетовУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТ
	СтруктураСчетовУчета = Новый Структура;
	Для каждого НастройкаРаздела Из ДанныеНастройкиСчетовУчета.НастройкиРазделов Цикл
		НастройкаСчетовУчетаКлиентСервер.ЗаполнитьСчетаУчетаНастройкамиРаздела(НастройкаРаздела.Ключ, СтруктураСчетовУчета, ДанныеНастройкиСчетовУчета, Форма);
	КонецЦикла;
	
	СтруктураИзмерений = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
	СтруктураИзмерений.АналитикаУчета = Объект.Ссылка;
	
	РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СохранитьЗначенияСчетовУчета(СтруктураИзмерений, СтруктураСчетовУчета, Отказ);
	//-- НЕ УТ
	//-- Локализация
КонецПроцедуры

// Выполняет загрузку счетов учета.
// 
// Параметры:
// Форма - ФормаКлиентскогоПриложения - форма объекта настройки. В форме реквизит:
// 	* Объект - ДанныеФормыСтруктура - содержит поля:
// 		** Ссылка - СправочникСсылка -
//
Процедура ПриЧтенииСозданииОбъектаНастройкиСчетовУчета(Форма) Экспорт

	РазделыУчета = Неопределено;
	//++ Локализация
	//++ НЕ УТ
	АналитикаУчета = Форма.Объект.Ссылка;
	РазделыУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.РазделыУчетаПоАналитикеУчета(АналитикаУчета);
	//-- НЕ УТ
	//-- Локализация
	
	ПараметрыНастройкиСчетовУчета = ПараметрыНастройкиСчетовУчета(РазделыУчета);
	ПараметрыНастройкиСчетовУчета.ИмяГруппыНастроекСчетовУчета = "ГруппаСчетов";
	ПараметрыНастройкиСчетовУчета.ПрефиксЭлементовФормы = "НастройкаСчетовУчета";
	ПараметрыНастройкиСчетовУчета.ПрефиксПутиКДанным = "НастройкаСчетовУчета_";
	ПараметрыНастройкиСчетовУчета.ПрефиксПутиКДаннымРеквизитов = "Объект.";
	Если ПараметрыНастройкиСчетовУчета.ИспользуетсяНастройкаИсключений Тогда
		ПараметрыНастройкиСчетовУчета.ИмяЭлементаГиперссылкиНастройкиСчетовУчета = "НастройкаСчетовУчета_Ссылка";
	КонецЕсли;
	
	ГруппаЭлементовНастройкиСчетовУчета = Форма.Элементы.Найти(ПараметрыНастройкиСчетовУчета.ИмяГруппыНастроекСчетовУчета);
	ДоступнаНастройкаСчетовУчета = ПараметрыНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета И ГруппаЭлементовНастройкиСчетовУчета <> Неопределено;
	Если Не ДоступнаНастройкаСчетовУчета Или ПараметрыНастройкиСчетовУчета.НастройкиРазделов.Количество() = 0 Тогда
		Если ГруппаЭлементовНастройкиСчетовУчета <> Неопределено Тогда
			ГруппаЭлементовНастройкиСчетовУчета.Видимость = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	//++ НЕ УТ
	Если ТипЗнч(АналитикаУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры") Тогда
		ПараметрыНастройкиСчетовУчета.РазбитьПоРазделамЭлементы = Ложь;
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("Стоимость");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("Продажи");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("ТМЦПринятыеНаОтветственноеХранение");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("МатериалыПринятыеВПереработку");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("ТоварыПринятыеНаКомиссию");
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(АналитикаУчета);
	МенеджерОбъекта.ЗаполнитьСоответствиеРеквизитовНастройкиСчетовУчета(ПараметрыНастройкиСчетовУчета.ПутиКРеквизитамАналитики);
	
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "НастройкаСчетовУчета", ПараметрыНастройкиСчетовУчета);
	
	ЗаполнениеРеквизитовФормы(Форма);
	Если ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Количество() Тогда
		Форма[ПараметрыНастройкиСчетовУчета.ПрефиксПутиКДанным + "НастройкаСворачиваемостиГрупп"] = "СвернутьВсе";
	КонецЕсли;
	
	Если Не АналитикаУчета.Пустая() Тогда
		СчетаУчета = Новый Массив;
		Субконто = Новый Массив;
		
		Для каждого НастройкаРаздела Из ПараметрыНастройкиСчетовУчета.НастройкиРазделов Цикл
			СчетаРаздела = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(НастройкаРаздела.Значение.СчетаУчета);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчета, СчетаРаздела, Истина);
			СубконтоРаздела = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(НастройкаРаздела.Значение.Субконто);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Субконто, СубконтоРаздела, Истина);
		КонецЦикла;
		СтруктураЗначений = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СтруктураЗначенийПоАналитикеУчета(АналитикаУчета, СчетаУчета, Субконто);
		Для каждого ЗначениеНастройкиУчета Из СтруктураЗначений Цикл
			ИмяРеквизитаНаФорме = ПараметрыНастройкиСчетовУчета.ПрефиксПутиКДанным + ЗначениеНастройкиУчета.Ключ;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаНаФорме) Тогда
				Форма[ИмяРеквизитаНаФорме] = ЗначениеНастройкиУчета.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьРеквизитыНастройкиСчетовУчетаПоДаннымОбъектаАналитики(Форма, Форма.Объект);
	УстановитьНастройкиСчетовУчетаВФорме(Форма);
	Если АналитикаУчета.Пустая() Тогда
		НастройкаСчетовУчетаКлиентСервер.ОбработкаЗаполнения(Форма);
	КонецЕсли;
	
	Если ПараметрыНастройкиСчетовУчета.СписокРазделовУчета.Количество() > 1 Тогда
		НастройкаСчетовУчетаКлиентСервер.УстановитьВидимостьРаздела(Форма, ПараметрыНастройкиСчетовУчета.СписокРазделовУчета);
	КонецЕсли;
	
	Если ПараметрыНастройкиСчетовУчета.ИспользуетсяНастройкаИсключений И ЗначениеЗаполнено(ПараметрыНастройкиСчетовУчета.ИмяЭлементаГиперссылкиНастройкиСчетовУчета) Тогда
		Форма.Элементы[ПараметрыНастройкиСчетовУчета.ИмяЭлементаГиперссылкиНастройкиСчетовУчета].Видимость = ЗначениеЗаполнено(Форма.Объект.Ссылка);
		РазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоНастройкам(Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета);
		Форма[ПараметрыНастройкиСчетовУчета.ИмяЭлементаГиперссылкиНастройкиСчетовУчета] = НастройкаСчетовУчетаСлужебныйВызовСервера.СсылкаНастройкаСчетовУчета(Форма.Объект.Ссылка, РазделУчета);
	КонецЕсли;
	//-- НЕ УТ
	//-- Локализация
	
КонецПроцедуры

// Возвращает структуру параметров настройки счетов учета.
// 
// Параметры:
// 	РазделыУчета - Неопределено, Массив -
// Возвращаемое значение:
// 	Структура - Параметры настройки счетов учета
//
Функция ПараметрыНастройкиСчетовУчета(РазделыУчета = Неопределено) Экспорт
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("ИмяГруппыНастроекСчетовУчета", "");
	ПараметрыНастройки.Вставить("ПрефиксЭлементовФормы", "");
	ПараметрыНастройки.Вставить("ПрефиксПутиКДанным", "");
	ПараметрыНастройки.Вставить("ПрефиксПутиКДаннымРеквизитов", "");
	ПараметрыНастройки.Вставить("СчетаСДинамическимиПараметрамиВыбора", Новый Массив);
	ПараметрыНастройки.Вставить("СчетаСДинамическимиСвойствами", Новый Массив);
	ПараметрыНастройки.Вставить("РедактированиеВСписке", Ложь);
	ПараметрыНастройки.Вставить("СоздаватьВСлучаеОтсутствия", Истина);
	ПараметрыНастройки.Вставить("РазбитьПоРазделам", Ложь);
	ПараметрыНастройки.Вставить("РазбитьПоРазделамЭлементы", Ложь);
	ПараметрыНастройки.Вставить("ИмяЭлементаГиперссылкиНастройкиСчетовУчета", "");
	ПараметрыНастройки.Вставить("НастройкиРазделов", Новый Соответствие);
	ПараметрыНастройки.Вставить("ИспользуетсяНастройкаИсключений", Ложь);
	ПараметрыНастройки.Вставить("СписокРазделовУчета", Новый СписокЗначений);
	ПараметрыНастройки.Вставить("РеквизитыАналитики", Новый Структура);
	ПараметрыНастройки.Вставить("СворачиваемыеГруппы", Новый Массив);
	ПараметрыНастройки.Вставить("ОбщиеРеквизиты", Новый Структура);
	ПараметрыНастройки.Вставить("ПутиКРеквизитамАналитики", Новый Структура);
	ПараметрыНастройки.Вставить("ДоступныеСчетаУчета", Новый Структура);
	ПараметрыНастройки.Вставить("ДоступнаНастройкаСчетовУчета", Ложь);
	
	//++ Локализация
	ПараметрыНастройки.ДоступнаНастройкаСчетовУчета = ДоступнаНастройкаСчетовУчета();
	
	Если Не ПараметрыНастройки.ДоступнаНастройкаСчетовУчета Тогда
		Возврат ПараметрыНастройки;
	КонецЕсли;
	
	//++ НЕ УТ
	
	РазделыУчетаСИсключениями = НастройкаСчетовУчетаКлиентСервер.РазделыУчетаДляКоторыхНастраиваютсяИсключения();
	
	СписокРазделовУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокРазделовСчетовУчета();
	Если РазделыУчета = Неопределено Или ТипЗнч(РазделыУчета) <> Тип("Массив") Тогда
		РазделыУчета = СписокРазделовУчета.ВыгрузитьЗначения();
	КонецЕсли;
	
	Для каждого РазделУчета Из СписокРазделовУчета Цикл
		
		Если Не РазделУчета.Пометка Или (РазделыУчета.Найти(РазделУчета.Значение) = Неопределено
			 И РазделыУчета.Найти(НастройкаСчетовУчетаКлиентСервер.ОбщийРазделУчетаПоИмениТекущегоРаздела(РазделУчета.Значение)) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыНастройки.СписокРазделовУчета.Добавить(РазделУчета.Значение, РазделУчета.Представление, Истина);
		
		СтруктураНастроекРаздела = ИнициализироватьСтруктуруНастроекРаздела(РазделУчета.Значение);
		СтруктураНастроекРаздела.Представление = РазделУчета.Представление;
		Для каждого РеквизитАналитики Из СтруктураНастроекРаздела.РеквизитыАналитики Цикл
			ПараметрыНастройки.РеквизитыАналитики.Вставить(РеквизитАналитики.Ключ, РеквизитАналитики.Значение);
		КонецЦикла;
		
		Если РазделыУчетаСИсключениями.Найти(РазделУчета.Значение) <> Неопределено Тогда
			ПараметрыНастройки.ИспользуетсяНастройкаИсключений = Истина;
		КонецЕсли;
		
		ПараметрыНастройки.НастройкиРазделов.Вставить(РазделУчета.Значение, СтруктураНастроекРаздела);
		
	КонецЦикла;
	
	ЗаполнитьОбщиеРеквизитыВлияющиеНаНастройкуСчетовУчета(РазделыУчета, ПараметрыНастройки.ОбщиеРеквизиты);
	ПараметрыНастройки.ДоступныеСчетаУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчета(РазделыУчета);
	ПараметрыНастройки.РазбитьПоРазделамЭлементы = РазделыУчета.Количество() > 1;
	
	ЗаполнитьИменаРеквизитовАналитикиВСоответствииИмен(ПараметрыНастройки.ПутиКРеквизитамАналитики, ПараметрыНастройки.РеквизитыАналитики);

	//-- НЕ УТ
	//-- Локализация
	
	Возврат ПараметрыНастройки;
	
КонецФункции
	
#КонецОбласти

//++ Локализация
//++ НЕ УТ

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структура настроек раздела учета.
//	Параметры:
//		РазделУчета - Строка - имя раздела учета, см. РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокРазделовСчетовУчета();
//		ТолькоИспользуемые - Булево - признак заполнения счетов учета и субконто для раздела, если истина - будут выводиться только те, которые доступны по ФО.
//	Возвращаемое значение:
//		Структура - содержит:
//			* Представление - Строка - представление раздела учета.
//			* СчетаУчета - см. РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокСчетовУчетаПоРазделуУчета.
//			* Субконто   - см. РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокСубконтоПоРазделуУчета.
//			* РеквизитыАналитики - см. НастройкаСчетовУчета.РеквизитыАналитикиВлияющиеНаНастройкуСчетовУчета.
//			* СвойстваОрганизации - см. НастройкаСчетовУчета.НастройкиОрганизацииПоРазделуУчета.
//			* СвойстваАналитики - см. НастройкаСчетовУчета.НастройкиАналитикиУчетаПоРазделуУчета;
//			* СвойстваМестаУчета - см. НастройкаСчетовУчета.НастройкиМестаУчетаПоРазделуУчета.
//
Функция ИнициализироватьСтруктуруНастроекРаздела(РазделУчета, ТолькоИспользуемые = Ложь) Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Представление");
	СписокСчетов = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокСчетовУчетаПоРазделуУчета(РазделУчета);
	СписокСубконто = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокСубконтоПоРазделуУчета(РазделУчета);
	Если ТолькоИспользуемые Тогда
		СтруктураНастроек.Вставить("СчетаУчета", ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СписокСчетов));
		СтруктураНастроек.Вставить("Субконто", ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СписокСубконто));
	Иначе
		СтруктураНастроек.Вставить("СчетаУчета", СписокСчетов);
		СтруктураНастроек.Вставить("Субконто", СписокСубконто);
	КонецЕсли;
	СтруктураНастроек.Вставить("РеквизитыАналитики", РеквизитыАналитикиВлияющиеНаНастройкуСчетовУчета(РазделУчета));
	СтруктураНастроек.Вставить("СвойстваОрганизации", НастройкиОрганизацииПоРазделуУчета(РазделУчета));
	СтруктураНастроек.Вставить("СвойстваАналитики", НастройкиАналитикиУчетаПоРазделуУчета(РазделУчета));
	СтруктураНастроек.Вставить("СвойстваМестаУчета", НастройкиМестаУчетаПоРазделуУчета(РазделУчета));
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает реквизиты, которые влияют на настройку счетов учета для данного раздела.
//	Параметры:
//		РазделУчета - Строка - имя раздела учета, см. РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокРазделовСчетовУчета().
//	Возвращаемое значение:
//		Структура - структура, ключем выступает имя реквизита, используемое в настройках счетов учета,
//					а значением - подстановка по умолчанию в запрос пустого значения данного реквизита.
//
Функция РеквизитыАналитикиВлияющиеНаНастройкуСчетовУчета(РазделУчета) Экспорт
	
	Реквизиты = Новый Структура;
	
	Если РазделУчета = "Расходы" Тогда
			
		Реквизиты.Вставить("ВидДеятельностиРасходов", "ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиРасходов.ПустаяСсылка)");
		Реквизиты.Вставить("ВариантРаспределенияРасходовРегл", "ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)");
		Реквизиты.Вставить("РасходыНаОбъектыСтроительства", "ЛОЖЬ");
		Реквизиты.Вставить("РасходыНаОбъектыЭксплуатации", "ЛОЖЬ");
		Реквизиты.Вставить("РасходыНаНМАиНИОКР", "ЛОЖЬ");
		Реквизиты.Вставить("СчетУчета_Расходы", "ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)");
		Реквизиты.Вставить("РасходыНаРемонтОС", "ЛОЖЬ");
		Реквизиты.Вставить("СебестоимостьРеализации", "ЛОЖЬ");
		
	ИначеЕсли РазделУчета = "ДенежныеСредства" Тогда
			
		Реквизиты.Вставить("АналитикаДенежныхСредств", "НЕОПРЕДЕЛЕНО");
		Реквизиты.Вставить("ВалютаДенежныхСредств", "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");
		Реквизиты.Вставить("Организация", "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)");
		
	ИначеЕсли РазделУчета = "Резервы" Тогда
			
		Реквизиты.Вставить("ВидРезервов", "ЗНАЧЕНИЕ(Справочник.Резервы.ПустаяСсылка)");
		
	ИначеЕсли РазделУчета = "ВнеоборотныеАктивы" Тогда
			
		Реквизиты.Вставить("ВидАктива", "ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ПустаяСсылка)");
			
	ИначеЕсли РазделУчета = "НоменклатураСобственная" Или РазделУчета = "Номенклатура" Тогда
			
		Реквизиты.Вставить("СчетУчета_ВыручкаОтПродаж", "ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)");
        Реквизиты.Вставить("Субконто_СтатьяДоходов", "ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)");
			
	ИначеЕсли Справочники.ГруппыФинансовогоУчетаРасчетов.ВидыРасчетов().Найти(РазделУчета) <> Неопределено Или РазделУчета = "РасчетыСПартнерами"  Тогда
			
		Реквизиты.Вставить("РасчетыСКлиентами", "ИСТИНА");
		Реквизиты.Вставить("РасчетыСПоставщиками", "ИСТИНА");
		Реквизиты.Вставить("РасчетыСКомиссионерами", "ИСТИНА");
		Реквизиты.Вставить("РасчетыСКомитентами", "ИСТИНА");
		Реквизиты.Вставить("РасчетыСКомитентамиПоЗакупке", "ИСТИНА");
		Реквизиты.Вставить("РасчетыСКредиторами", "ИСТИНА");
		Реквизиты.Вставить("РасчетыСДебиторами", "ИСТИНА");
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция НастройкиМестаУчетаПоРазделуУчета(РазделУчета) Экспорт
	
	ЗначениеВозврата = Новый Структура("Заголовок, ПредставлениеПустого, ТипЗначения, ПредставлениеДетализации, Используется");
	
	ЗначениеВозврата.Используется = Ложь;
	
	Если РазделУчета = "Доходы" Или РазделУчета = "Расходы" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru='Подразделение';uk='Підрозділ'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru='Для всех подразделений';uk='Для всіх підрозділів'");
		ЗначениеВозврата.ПредставлениеДетализации = НСтр("ru='по организациям и подразделениям';uk='по організаціях і підрозділах'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц")
			Или ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения")
			Или ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	КонецЕсли;
	
	Если РазделУчета = "НоменклатураСобственная" Или РазделУчета = "Номенклатура" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru='Склад';uk='Склад'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru='Для всех складов';uk='Для всіх складів'");
		ЗначениеВозврата.ПредставлениеДетализации = НСтр("ru='по организациям и складам';uk='по організаціях і складах'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады");
		ЗначениеВозврата.Используется = Истина;
	КонецЕсли;
	
	Если РазделУчета = "Производство" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru='Место производства';uk='Місце виробництва'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru='Для всех мест производства';uk='Для всіх місць виробництва'");
		ЗначениеВозврата.ПредставлениеДетализации = НСтр("ru='по организациям и местам производства';uk='по організаціях та місцях виробництва'");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне") Тогда
			ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Партнеры");
		Иначе
			ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		КонецЕсли;
		ЗначениеВозврата.Используется = Истина;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция НастройкиАналитикиУчетаПоРазделуУчета(РазделУчета) Экспорт
	
	ЗначениеВозврата = Новый Структура("Заголовок, ПредставлениеПустого, ТипЗначения, Используется");
	ЗначениеВозврата.Используется = Ложь;
	
	Если РазделУчета = "НоменклатураСобственная" Или РазделУчета = "Номенклатура" Или РазделУчета = "НоменклатураПереданная" Или РазделУчета = "НоменклатураПринятая" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru='Группа настроек фин. учета';uk='Група настройок фін. обліку'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru='не указана';uk='не вказана'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	КонецЕсли;
	
	Если РазделУчета = "РасчетыСКлиентами" Или РазделУчета = "РасчетыСПоставщиками" Или РазделУчета = "РасчетыСКомиссионерами"
		Или РазделУчета = "РасчетыСКомитентами" Или РазделУчета = "РасчетыСКомитентамиПоЗакупке" Или РазделУчета = "РасчетыСКредиторами"
		Или РазделУчета = "РасчетыСДебиторами" Или РазделУчета = "РасчетыСПартнерами" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru='Группа настроек фин. учета';uk='Група настройок фін. обліку'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru='не указана';uk='не вказана'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	КонецЕсли;
	
	Если РазделУчета = "Доходы" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru='Статья доходов';uk='Стаття доходів'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	КонецЕсли;
	
	Если РазделУчета = "Расходы" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru='Статья расходов';uk='Стаття витрат'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	КонецЕсли;
	
	Если РазделУчета = "ДенежныеСредства" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru='Банковский счет / Касса';uk='Банківський рахунок / Каса'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций, СправочникСсылка.Кассы");
		ЗначениеВозврата.Используется = Истина;
	КонецЕсли;
	
	Если РазделУчета = "ПодарочныеСертификаты" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru='Вид сертификата';uk='Вид сертифіката'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВидыПодарочныхСертификатов");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты");
	КонецЕсли;
	
	Если РазделУчета = "ТМЦВЭксплуатации" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru='Категория эксплуатации';uk='Категорія експлуатації'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru='не указана';uk='не вказана'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.КатегорииЭксплуатации");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление");
	КонецЕсли;
	
	Если РазделУчета = "Резервы" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru='Вид резервов';uk='Вид резервів'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru='не указан';uk='не зазначений'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Резервы");
		ЗначениеВозврата.Используется = Истина;
	КонецЕсли;
	
	Если РазделУчета = "ВнеоборотныеАктивы" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru='Группа настроек фин. учета';uk='Група настройок фін. обліку'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru='не указана';uk='не вказана'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4");
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция НастройкиОрганизацииПоРазделуУчета(РазделУчета) Экспорт
	
	ЗначениеВозврата = Новый Структура("Используется, ПредставлениеПустого");
	ЗначениеВозврата.ПредставлениеПустого = НСтр("ru='Настройка для аналитики учета';uk='Настройка для аналітики обліку'");
	
	ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	Если РазделУчета = "ВнеоборотныеАктивы" Тогда
		ЗначениеВозврата.Используется = Ложь;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Процедура УстановитьНастройкиСчетовУчетаВФорме(Форма) Экспорт
	
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	Параметры = Неопределено;
	
	Если Настройка.Свойство("МенятьОбщие") Тогда
		Если Настройка.РедактированиеВСписке Тогда
			УстановитьУсловноеОформление(Форма, НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоНастройкам(Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета), "АналитикаУчета");
			УстановитьУсловноеОформление(Форма, НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоНастройкам(Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета), "МестоУчета");
			УстановитьУсловноеОформление(Форма, Неопределено, "Организация");
		КонецЕсли;
		НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваИзмеренийНаФорме(Форма);
	КонецЕсли;
	
	ГруппыБылиДобавлены = Ложь;
	ОтмеченныеРазделы = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Настройка.СписокРазделовУчета);
		
	Для каждого ЭлементРазделаУчета Из РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокРазделовСчетовУчета() Цикл
		
		РазделУчета = ЭлементРазделаУчета.Значение;
		НастройкаРаздела = Настройка.НастройкиРазделов.Получить(РазделУчета);
		
		ГруппаРаздела = ИнициализироватьРазделНаФорме(Форма, ЭлементРазделаУчета, Параметры);
		
		Если НастройкаРаздела = Неопределено Тогда
			// Данный раздел учета не доступен по ФО
			Продолжить;
		КонецЕсли;
		
		Если ГруппаРаздела <> Неопределено Тогда
			Если РазделУчета = "РасчетыСКомиссионерами" Или РазделУчета = "РасчетыСКомитентами" Или РазделУчета = "РасчетыСКомитентамиПоЗакупке" Тогда
				ГруппаРаздела.Группировка = ?(Настройка.РедактированиеВСписке, ГруппировкаКолонок.Горизонтальная, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
			КонецЕсли;
			Если Справочники.ГруппыФинансовогоУчетаРасчетов.ВидыРасчетов().Найти(РазделУчета) <> Неопределено Тогда
				ГруппаРаздела.Заголовок = НастройкаРаздела.Представление;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройка.Свойство("МенятьОбщие") И ОтмеченныеРазделы.Найти(РазделУчета) <> Неопределено Тогда
			НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваИзмеренийНаФорме(Форма, РазделУчета);
		КонецЕсли;
		
		НачальнаяГруппаДляДобавления = Параметры.ГруппаДляДобавления;
		
		Для каждого СчетУчета Из НастройкаРаздела.СчетаУчета Цикл
			Параметры.ГруппаДляДобавления = НачальнаяГруппаДляДобавления;
			НастройкиГруппы = НастройкаСчетовУчетаКлиентСервер.ГруппаСчетаУчета(СчетУчета.Значение, РазделУчета, Настройка.РедактированиеВСписке);
			Если НастройкиГруппы <> Неопределено Тогда
				Параметры.ЭлементВыводится = Истина;
				ГруппаНаФорме = ДобавитьЭлементНаФорму(НастройкиГруппы.ИмяГруппы, Параметры, "Группа");
				Если ГруппаНаФорме <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(ГруппаНаФорме.Заголовок) Тогда
						ЗаполнитьЗначенияСвойств(ГруппаНаФорме, НастройкиГруппы);
						Если Настройка.РедактированиеВСписке Тогда
							ГруппаНаФорме.ОтображатьВШапке = Истина;
						КонецЕсли;
					КонецЕсли;
					Если Настройка.СворачиваемыеГруппы.Найти(НастройкиГруппы.ИмяГруппы) <> Неопределено
						И Не ЗначениеЗаполнено(ГруппаНаФорме.ЗаголовокСвернутогоОтображения) Тогда
						ГруппаНаФорме.ЗаголовокСвернутогоОтображения = ГруппаНаФорме.Заголовок + НастройкаСчетовУчетаКлиентСервер.ДопПредставлениеГруппы(Форма, НастройкиГруппы.ИмяГруппы);
					КонецЕсли;
					Параметры.ГруппаДляДобавления = ГруппаНаФорме;
					ГруппыБылиДобавлены = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ЭлементСчетаУчетаНаФорме(СчетУчета, Параметры);
		КонецЦикла;
		
		Для каждого Субконто Из НастройкаРаздела.Субконто Цикл
			
			Параметры.ГруппаДляДобавления = НачальнаяГруппаДляДобавления;
			НастройкиГруппы = НастройкаСчетовУчетаКлиентСервер.ГруппаСчетаУчета(Субконто.Значение, РазделУчета, Настройка.РедактированиеВСписке);
			Если НастройкиГруппы <> Неопределено Тогда
				Параметры.ЭлементВыводится = Истина;
				ГруппаНаФорме = ДобавитьЭлементНаФорму(НастройкиГруппы.ИмяГруппы, Параметры, "Группа");
				Если ГруппаНаФорме <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(ГруппаНаФорме.Заголовок) Тогда
						ЗаполнитьЗначенияСвойств(ГруппаНаФорме, НастройкиГруппы);
						Если Настройка.РедактированиеВСписке Тогда
							ГруппаНаФорме.ОтображатьВШапке = Истина;
						КонецЕсли;
					КонецЕсли;
					Параметры.ГруппаДляДобавления = ГруппаНаФорме;
					ГруппыБылиДобавлены = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ЭлементСчетаУчетаНаФорме(Субконто, Параметры, Истина);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ГруппыБылиДобавлены Тогда
		Настройка.Вставить("ВысотаШапки", 2);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условное оформление
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения -
// 	РазделУчета - Произвольный, Неопределено -
// 	ИмяЭлементаНастройки - Строка -
Процедура УстановитьУсловноеОформление(Форма, РазделУчета, ИмяЭлементаНастройки) Экспорт
	
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	НастройкаРазделаУчета = Настройка.НастройкиРазделов.Получить(РазделУчета);
	
	Если ИмяЭлементаНастройки = "АналитикаУчета" Тогда
		НастройкиАналитики = НастройкаРазделаУчета.СвойстваАналитики;
		Если НастройкиАналитики.Используется Тогда
			Элемент = Форма.УсловноеОформление.Элементы.Добавить();
			ИмяЭлементаАналитикаУчета = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНаФорме(Настройка, РазделУчета, ИмяЭлементаНастройки, "Реквизит");
			ИмяРеквизитаАналитикаУчета = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, ИмяЭлементаНастройки, "Реквизит");
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаАналитикаУчета].Имя);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаАналитикаУчета, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НастройкиАналитики.ПредставлениеПустого);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяЭлементаНастройки = "МестоУчета" Тогда
		НастройкиМестаУчета = НастройкаРазделаУчета.СвойстваМестаУчета;
		Если НастройкиМестаУчета.Используется Тогда
			Элемент = Форма.УсловноеОформление.Элементы.Добавить();
			ИмяЭлементаМестоУчета = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНаФорме(Настройка, РазделУчета, ИмяЭлементаНастройки, "Реквизит");
			ИмяРеквизитаМестоУчета = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, ИмяЭлементаНастройки, "Реквизит");
			ИмяРеквизитаОрганизация = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "Организация", "Реквизит");
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаМестоУчета].Имя);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаМестоУчета, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаОрганизация, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НастройкиМестаУчета.ПредставлениеПустого);
		КонецЕсли;
	КонецЕсли;
	
	
	Если ИмяЭлементаНастройки = "Организация" И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		
		РазделыУчетаНеЗависящиеОтОрганизации = Новый СписокЗначений;
		РазделыУчетаНеЗависящиеОтОрганизации.ЗагрузитьЗначения(НастройкаСчетовУчетаКлиентСервер.РазделыУчетаНеЗависящиеОтОрганизации());
		
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		ИмяЭлементаОрганизация = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНаФорме(Настройка, РазделУчета, ИмяЭлементаНастройки, "Реквизит");
		ИмяРеквизитаОрганизация = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, ИмяЭлементаНастройки, "Реквизит");
		ИмяРеквизитаАналитикаУчета = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "АналитикаУчета", "Реквизит");
		ИмяРеквизитаМестоУчета = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "МестоУчета", "Реквизит");
		ИмяРеквизитаРазделУчета = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "РазделУчета", "Реквизит");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаОрганизация].Имя);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаОрганизация, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаМестоУчета, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		Если РазделУчета = Неопределено Тогда
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаРазделУчета, РазделыУчетаНеЗависящиеОтОрганизации, ВидСравненияКомпоновкиДанных.НеВСписке);
		КонецЕсли;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Настройка для аналитики учета';uk='Настройка для аналітики обліку'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		Если РазделУчета = Неопределено Тогда
			Элемент = Форма.УсловноеОформление.Элементы.Добавить();
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаОрганизация].Имя);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаОрганизация, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаМестоУчета, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаРазделУчета, РазделыУчетаНеЗависящиеОтОрганизации, ВидСравненияКомпоновкиДанных.ВСписке);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Настройка по организации не применяется';uk='Настройка по організації не застосовується'"));
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	
	
	
	Если ИмяЭлементаНастройки = "ВыбытиеВНА" Тогда
		
		ИмяЭлементаФормы = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНаФорме(Настройка, "ВнеоборотныеАктивы", ИмяЭлементаНастройки);
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор,
			НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "ВидАктива", "Реквизит"),
			ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НМА"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не используется';uk='Не використовується'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнениеРеквизитовФормы(Форма) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	ТипСчетаУчета = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	ДобавляемыеЭлементы = Новый Массив;
	Для каждого НастройкаРаздела Из Настройка.НастройкиРазделов Цикл
		Для каждого СчетУчета Из НастройкаРаздела.Значение.СчетаУчета Цикл
			Если СчетУчета.Пометка Тогда
				ИмяРеквизита = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, НастройкаРаздела.Ключ, СчетУчета.Значение);
				Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита)
						И Настройка.СоздаватьВСлучаеОтсутствия И ДобавляемыеЭлементы.Найти(ИмяРеквизита) = Неопределено Тогда
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипСчетаУчета));
					ДобавляемыеЭлементы.Добавить(ИмяРеквизита);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для каждого Субконто Из НастройкаРаздела.Значение.Субконто Цикл
			Если Субконто.Пометка Тогда
				ИмяРеквизита = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, НастройкаРаздела.Ключ, Субконто.Значение, "Субконто");
				Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита)
						И Настройка.СоздаватьВСлучаеОтсутствия И ДобавляемыеЭлементы.Найти(ИмяРеквизита) = Неопределено Тогда
					ТипСубконто = НастройкаСчетовУчетаКлиентСервер.ТипСубконтоПоИмени(Субконто.Значение);
					Если ТипСубконто <> Неопределено Тогда
						ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипСубконто));
						ДобавляемыеЭлементы.Добавить(ИмяРеквизита);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Настройка.Свойство("СворачиватьГруппы") Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Настройка.ПрефиксПутиКДанным + "НастройкаСворачиваемостиГрупп", Новый ОписаниеТипов("Строка")));
	КонецЕсли;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ЗаполнитьИменаРеквизитовАналитикиВСоответствииИмен(СоответствиеИмен, СтруктураРеквизитов) Экспорт
	
	Для каждого Реквизит Из СтруктураРеквизитов Цикл
		Если Не НастройкаСчетовУчетаКлиентСервер.ЭтоНеРеквизитАналитики(Реквизит.Ключ) Или Реквизит.Ключ = "Организация" Тогда
			СоответствиеИмен.Вставить(Реквизит.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты параметров настройки счетов учета, которые влияют на настройку
// 
// Параметры:
// 	ПараметрыНастройки - Структура - См. НастройкаСчетов.ПараметрыНастройкиСчетовУчета
// 	АналитикаУчета - ОпределяемыйТип.НастройкаСчетовУчетаАналитикаУчета - аналитика учета порядка отражения
//
Процедура ЗаполнитьРеквизитыНастройкиСчетовУчетаПоДаннымАналитики(ПараметрыНастройки, АналитикаУчета) Экспорт
	
	Если ПараметрыНастройки.ПутиКРеквизитамАналитики.Количество() Тогда
		РеквизитыАналитики = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АналитикаУчета, ПараметрыНастройки.ПутиКРеквизитамАналитики);
		
		Для каждого ЗначениеРеквизита Из РеквизитыАналитики Цикл
			Если ПараметрыНастройки.РеквизитыАналитики.Свойство(ЗначениеРеквизита.Ключ) И ЗначениеЗаполнено(ЗначениеРеквизита.Значение) Тогда
				ПараметрыНастройки.РеквизитыАналитики[ЗначениеРеквизита.Ключ] = ЗначениеРеквизита.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если АналитикаУчета <> Неопределено И ТипЗнч(АналитикаУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов") Тогда
		МассивВидовРасчетов = Новый Массив;
		Для каждого РеквизитВидаРасчетов Из ПараметрыНастройки.ПутиКРеквизитамАналитики Цикл
			Если АналитикаУчета[РеквизитВидаРасчетов.Значение] Тогда
				МассивВидовРасчетов.Добавить(РеквизитВидаРасчетов.Ключ);
			КонецЕсли;
		КонецЦикла;
		Если МассивВидовРасчетов.Количество() <> 1 Тогда
			МассивВидовРасчетов = СтрРазделить("РасчетыСКлиентами,РасчетыСПоставщиками,РасчетыСДебиторами,РасчетыСКредиторами", ",");
		КонецЕсли;
		Для каждого ЭлементСписка Из ПараметрыНастройки.СписокРазделовУчета Цикл
			ЭлементСписка.Пометка = МассивВидовРасчетов.Найти(ЭлементСписка.Значение) <> Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область СоответствияВидовСчетовЭлементамНастройки

Функция СчетаУчетаРасходовРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.Расходы,              "СчетУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаДоходовРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.Доходы, "СчетУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаРезервовРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.Резервы, "СчетУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаДенежныхСредствРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ДенежныеСредства, "СчетУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаНоменклатурыРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();

	// Учет стоимости
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.НаСкладе,                                "СчетУчетаНаСкладе");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.НоменклатураПереданная,                  "СчетУчетаПередачиНаКомиссию");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ПередачаВПереработку,                    "СчетУчетаПередачиВПереработку");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ЗатратыНаПриобретениеТМЦ,                "СчетУчетаЗатратыНаПриобретение");
	
	// Продажи
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ВыручкаОтПродаж,             "СчетУчетаВыручкиОтПродаж");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.СебестоимостьПродаж,         "СчетУчетаСебестоимостиПродаж");
    
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ВычетыИзДоходов,         "СчетУчетаВычетовИзДоходов");
	
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаРасчетовРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	
	// С клиентами
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентами,     "СчетУчетаРасчетовСКлиентами");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.АвансыПолученные,      "СчетУчетаАвансовПолученных");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара, "СчетУчетаРасчетовСКлиентамиТара");
	// С поставщиками
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками,      "СчетУчетаРасчетовСПоставщиками");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.АвансыВыданные,            "СчетУчетаАвансовВыданных");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщикамиТара,  "СчетУчетаРасчетовСПоставщикамиТара");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.НеотфактурованныеПоставки, "СчетУчетаНеотфактурованныеПоставки");
	// С дебиторами
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСДебиторамиОсновнойДолг, "СчетУчетаРасчетовСДебиторамиОсновнойДолг");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСДебиторамиПроценты,     "СчетУчетаРасчетовСДебиторамиПроценты");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСДебиторамиКомиссия,     "СчетУчетаРасчетовСДебиторамиКомиссия");
	// С кредиторами
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКредиторамиОсновнойДолг, "СчетУчетаРасчетовСКредиторамиОсновнойДолг");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКредиторамиПроценты,     "СчетУчетаРасчетовСКредиторамиПроценты");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКредиторамиКомиссия,     "СчетУчетаРасчетовСКредиторамиКомиссия");
	
	Возврат ВидыСчетов;
КонецФункции

Функция СчетаУчетаТМЦВЭксплуатацииРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ТМЦВЭксплуатации,           "СчетУчета");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииАмортизация,  "СчетУчетаАмортизации");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаВнеоборотныхАктивовРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.СтоимостьВНА,        "СчетУчета");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.СтоимостьВНА_ЦФ,     "СчетУчетаЦФ");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.АмортизацияВНА,      "СчетУчетаАмортизации");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.АмортизацияВНА_ЦФ,   "СчетУчетаАмортизацииЦФ");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ВыбытиеВНА,          "СчетУчетаВыбытия");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РезервДоОценкиВНА,   "СчетУчетаРезерваДооценки");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ЗабалансовыйУчетВНА, "СчетЗабалансовогоУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаПодарочныхСертификатовРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыПоПодарочнымСертификатам, "СчетУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаПроизводстваРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.Производство, "СчетУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

//-- Локализация
//-- НЕ УТ

#Область СлужебныеПроцедурыИФункции

Функция ДанныеНастройкиОтраженияОперации(Форма, ПараметрыНастройки)
	
	Если ТипЗнч(ПараметрыНастройки) = Тип("Массив") Тогда
		МассивПараметровНастройки= ПараметрыНастройки;
	Иначе
		МассивПараметровНастройки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыНастройки);
	КонецЕсли;
	
	//++ Локализация
	ПроверитьПараметрыНастройкиСчетовУчета(Форма, МассивПараметровНастройки);
	//-- Локализация
	
	СоответствиеПараметровНастройкиЭлементамФормы = Новый Структура;
	Индекс = 0;
	Для каждого ПараметрыНастройки Из МассивПараметровНастройки Цикл
		Для каждого ИмяЭлемента Из ПараметрыНастройки.ЭлементыФормы Цикл
			СоответствиеПараметровНастройкиЭлементамФормы.Вставить(ИмяЭлемента, Индекс);
		КонецЦикла;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ДанныеНастройкиОтраженияОперации = Новый Структура();
	ДанныеНастройкиОтраженияОперации.Вставить("МассивПараметровНастройки", Новый ФиксированныйМассив(МассивПараметровНастройки));
	ДанныеНастройкиОтраженияОперации.Вставить("СоответствиеПараметровНастройкиЭлементамФормы", СоответствиеПараметровНастройкиЭлементамФормы);
	
	ДоступнаНастройкиСчетовУчета = Ложь;
	//++ Локализация
	ДоступнаНастройкиСчетовУчета = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	ДоступнаНастройкиСчетовУчета = ДоступнаНастройкиСчетовУчета И ПравоДоступа("Просмотр",  Метаданные.ПланыСчетов.Хозрасчетный);
	//-- Локализация 
	ДанныеНастройкиОтраженияОперации.Вставить("ДоступнаНастройкиСчетовУчета", ДоступнаНастройкиСчетовУчета);
	
	Возврат ДанныеНастройкиОтраженияОперации;
	
КонецФункции

//++ Локализация

#Область НастройкаСчетовУчетаПрочихОпераций

// Описание
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - содержит:
// 		* Объект - ДанныеФормыСтруктура - 
// 	МассивПараметровНастройки - Массив - Описание
Процедура ПроверитьПараметрыНастройкиСчетовУчета(Форма, МассивПараметровНастройки)
	
	Если Не ОбщегоНазначения.РежимОтладки() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	Для каждого ПараметрНастройки Из МассивПараметровНастройки Цикл
		
		Если ПараметрНастройки.ПутьКДанным = "" Тогда
			Возврат;
		КонецЕсли;
	
		МассивПроверяемыхРеквизитов = Новый Массив();
		МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["СчетУчета"]);
		МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["Субконто1"]);
		МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["Субконто2"]);
		МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["Субконто3"]);
		МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["Представление"]);
		Если ЗначениеЗаполнено(ПараметрНастройки["ТипСтатьи"]) Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["ТипСтатьи"]);
		КонецЕсли;
	
		Если Найти(ПараметрНастройки.ПутьКДанным, "Объект.") > 0 Тогда
			ИмяТЧ = СтрЗаменить(ПараметрНастройки.ПутьКДанным, "Объект.", "");
			ПоискПоТЧ = Истина;
			ТаблицаФормы = Форма.Объект[ИмяТЧ]; // ДанныеФормыКоллекция
			СписокКолонокТЧ = ТаблицаФормы.Выгрузить().Колонки;
		ИначеЕсли ПараметрНастройки.ПутьКДанным = "Объект" Тогда
			ПоискПоТЧ = Ложь;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СтрШаблон(НСтр("ru='Указан неверный путь к данным %1 в параметрах настройки счетов учета.';uk='Вказано невірний шлях до даних %1 в параметрах настройки рахунків обліку.'"), 
									ПараметрНастройки.ПутьКДанным),
						"");
						
		КонецЕсли;
		
		Если НЕ ПоискПоТЧ И ЗначениеЗаполнено(ПараметрНастройки.УсловияДоступностиСчетаУчетаВСтроках) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					"",
					НСтр("ru='Настройка располагается в шапке документа. Использование параметра ""УсловияДоступностиСчетаУчетаВСтроках"" не допускается.';uk='Настройка розташовується в шапці документа. Використання параметра ""УсловияДоступностиСчетаУчетаВСтроках"" не допускається.'"), 
					"");
		КонецЕсли;

		Для каждого ПроверяемыйРеквизит Из МассивПроверяемыхРеквизитов Цикл
			Если ПоискПоТЧ И НЕ ЕстьКолонкаВТЧ(СписокКолонокТЧ, ПроверяемыйРеквизит) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СтрШаблон(НСтр("ru='Отсутствует реквизит %1 в %2 формы объекта.';uk='Відсутній реквізит %1 в %2 форми об''єкта.'"), 
									ПроверяемыйРеквизит, 
									?(ПоискПоТЧ, СтрШаблон(НСтр("ru='табличной части %1';uk='табличної частини %1'"), ИмяТЧ), НСтр("ru='списке реквизитов';uk='списку реквізитів'"))),
						"");
			КонецЕсли;
			
			Если НЕ ПоискПоТЧ 
				И НЕ (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, ПроверяемыйРеквизит)
						ИЛИ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ПроверяемыйРеквизит)) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СтрШаблон(НСтр("ru='Отсутствует реквизит %1 в %2 формы объекта.';uk='Відсутній реквізит %1 в %2 форми об''єкта.'"), 
									ПроверяемыйРеквизит, 
									?(ПоискПоТЧ, СтрШаблон(НСтр("ru='табличной части %1';uk='табличної частини %1'"), ИмяТЧ), НСтр("ru='списке реквизитов';uk='списку реквізитів'"))),
						"");
			КонецЕсли;
		КонецЦикла;
		
		МассивПроверяемыхРеквизитов.Очистить();
		
		Если ЗначениеЗаполнено(ПараметрНастройки["Организация"]) Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["Организация"]);
		КонецЕсли;

		Если ЗначениеЗаполнено(ПараметрНастройки["АналитикаАктивовПассивов"]) Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["АналитикаАктивовПассивов"]);
		КонецЕсли;
		
		Для каждого ПроверяемыйРеквизит Из МассивПроверяемыхРеквизитов Цикл
				ИмяРеквизита = ИмяРеквизитаПоПутиКДанным(ПроверяемыйРеквизит);
				ИмяТЧРеквизита = ИмяТЧПоПутиКДанным(ПроверяемыйРеквизит); 
				ЕстьРеквизитВОбъекте = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, ИмяРеквизита);
				
				Если ИмяТЧ = Неопределено И НЕ ЕстьРеквизитВОбъекте Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
							Ошибки,
							"",
							СтрШаблон(НСтр("ru='Отсутствует реквизит %1 в объекте формы.';uk='Відсутній реквізит %1 в об''єкті форми.'"), ИмяРеквизита),
							"");
							
				ИначеЕсли (ЗначениеЗаполнено(ИмяТЧРеквизита) И ПоискПоТЧ И НЕ ИмяТЧРеквизита = ИмяТЧ) Тогда
					 ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
							Ошибки,
							"",
							СтрШаблон(НСтр("ru='Путь к реквизиту %1 ссылается на неправильную табличную часть %2, ожидается %3.';uk='Шлях до реквізиту %1 посилається на неправильну табличну частину %2, очікується %3.'"), 
										ИмяРеквизита,
										ИмяТЧРеквизита,
										ИмяТЧ),
							"");
							
				ИначеЕсли (ЗначениеЗаполнено(ИмяТЧРеквизита) 
							И ПоискПоТЧ 
							И ИмяТЧРеквизита = ИмяТЧ
							И НЕ ЕстьКолонкаВТЧ(СписокКолонокТЧ, ИмяРеквизита)) Тогда 
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
							Ошибки,
							"",
							СтрШаблон(НСтр("ru='Реквизит %1 отсутствует в табличной части %2.';uk='Реквізит %1 відсутій в табличній частині %2.'"), 
										ИмяРеквизита,
										ИмяТЧ),
							"");
					
				КонецЕсли;
		КонецЦикла;
		
		Для каждого ИмяЭлемента Из ПараметрНастройки.ЭлементыФормы Цикл
			Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, ИмяЭлемента) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СтрШаблон(НСтр("ru='Отсутствует реквизит %1 в объекте формы.';uk='Відсутній реквізит %1 в об''єкті форми.'"), 
									ИмяЭлемента),
						"");
				
			Иначе
				ЭлементУправленияФормы = Форма.Элементы[ИмяЭлемента];
				РеквизитВШапке = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(ЭлементУправленияФормы) = Неопределено;
				ИмяСвойстваДляПроверки = ?(РеквизитВШапке, "Гиперссылка", "ГиперссылкаЯчейки");
				
				Если НЕ ЭлементУправленияФормы[ИмяСвойстваДляПроверки] Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СтрШаблон(
						НСтр("ru='Не заполнено значение свойства %1 для элемента формы %2.';uk='Не заповнене значення властивості %1 для елемента форми %2.'"),
							ИмяСвойстваДляПроверки,
							ИмяЭлемента),
						"");
					
				КонецЕсли;
				
				Если ЭлементУправленияФормы.ПутьКДанным <> ПараметрНастройки.Представление
					И НЕ СтрНайти(ЭлементУправленияФормы.ПутьКДанным, "." + ПараметрНастройки.Представление) Тогда 
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СтрШаблон(
						НСтр("ru='Элемент формы %1 должен быть привязан к служебному реквизиту %2.';uk='Елемент форми %1 повинен бути прив''язаний до службового реквізиту %2.'"),
							ИмяЭлемента,
							ПараметрНастройки.Представление),
						"");
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Если НЕ Ошибки = Неопределено Тогда
		ТекстИсключения = НСтр("ru='Найдены ошибки при проверке параметров настройки счетов учета';uk='Знайдено помилки при перевірці параметрів настройки рахунків обліку'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСубконтоИзИсточников(ТекущийОбъект, МассивПараметровНастройки)

	Для каждого ПараметрыНастройки Из МассивПараметровНастройки Цикл
			
		Если ПараметрыНастройки.ИсточникиПодбораСубконто.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Данные = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(ТекущийОбъект, ПараметрыНастройки.ПутьКДанным);
		Если ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
			Для каждого СтрокаТаблицы Из Данные Цикл
				ЗаполнитьСубконтоИзИсточника(СтрокаТаблицы, ТекущийОбъект, ПараметрыНастройки);
			КонецЦикла;
		Иначе
			ЗаполнитьСубконтоИзИсточника(Данные, ТекущийОбъект, ПараметрыНастройки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСубконтоИзИсточника(ДанныеНастройки, Форма, ПараметрыНастройки)
	
	СчетУчета = ДанныеНастройки[ПараметрыНастройки.СчетУчета];
	
	Если Не ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		ОписаниеТиповСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
		Для Каждого Источник Из ПараметрыНастройки.ИсточникиПодбораСубконто Цикл
			Если Не ЗначениеЗаполнено(Источник.Значение) 
				ИЛИ Не ЗначениеЗаполнено(Источник.Представление) Тогда
				Продолжить;
			КонецЕсли; 
			Если ОписаниеТиповСубконто.СодержитТип(Источник.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			ЧастиПутиКДанным = СтрРазделить(Источник.Представление, ".");
			
			ИндексИмениРеквизита = ЧастиПутиКДанным.Количество() - 1;
			ВТаблице = (ЧастиПутиКДанным.Количество() = 3);
			Если ВТаблице Тогда
				Значение = ДанныеНастройки[ЧастиПутиКДанным[ИндексИмениРеквизита]];
			Иначе
				Значение = Форма[ЧастиПутиКДанным[ИндексИмениРеквизита]];
			КонецЕсли;
			Если ЗначениеЗаполнено(Значение) Тогда
				ДанныеНастройки[ПараметрыНастройки["Субконто" + НомерСубконто]] = Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьНеактуальныеНастройкиОтраженияВДанныхФормы(Форма, МассивПараметровНастройки)
	
	Для каждого ПараметрыНастройки Из МассивПараметровНастройки Цикл
		
		Данные = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным);
		Если ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
			Для каждого СтрокаТаблицы Из Данные Цикл
				ТипСтатьи = ?(ЗначениеЗаполнено(ПараметрыНастройки.ТипСтатьи), СтрокаТаблицы[ПараметрыНастройки.ТипСтатьи], Неопределено);
				ОчиститьНастройкиОтражения(СтрокаТаблицы, ПараметрыНастройки, ТипСтатьи);
			КонецЦикла;
		Иначе
			ТипСтатьи = ?(ЗначениеЗаполнено(ПараметрыНастройки.ТипСтатьи), Форма[ПараметрыНастройки.ТипСтатьи], Неопределено);
			ОчиститьНастройкиОтражения(Данные, ПараметрыНастройки, ТипСтатьи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеактуальныеНастройкиОтраженияВОбъекте(Форма, Объект, МассивПараметровНастройки)
	
	Для каждого ПараметрыНастройки Из МассивПараметровНастройки Цикл
		
		Данные = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(Объект, ПараметрыНастройки.ПутьКДанным); // ДанныеФормыКоллекция - 
		// Только в данных формы есть ТипСтатьи, поэтому получим их
		ДанныеФормы = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным);
		Если ТипЗнч(ДанныеФормы) = Тип("ДанныеФормыКоллекция") Тогда
			Для каждого СтрокаТаблицы Из Данные Цикл
				СтрокаДанныхФормы = ДанныеФормы[Данные.Индекс(СтрокаТаблицы)];
				ТипСтатьи = ?(ЗначениеЗаполнено(ПараметрыНастройки.ТипСтатьи), СтрокаДанныхФормы[ПараметрыНастройки.ТипСтатьи], Неопределено);
				ОчиститьНастройкиОтражения(СтрокаТаблицы, ПараметрыНастройки, ТипСтатьи);
			КонецЦикла;
		Иначе
			ТипСтатьи = ?(ЗначениеЗаполнено(ПараметрыНастройки.ТипСтатьи), Форма[ПараметрыНастройки.ТипСтатьи], Неопределено);
			ОчиститьНастройкиОтражения(Данные, ПараметрыНастройки, ТипСтатьи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНастройкиОтражения(Данные, ПараметрыНастройки, ТипСтатьи)
	
	Если Не ПараметрыНастройки.ДоступностьПоОперации Или (ТипСтатьи <> Неопределено И ТипСтатьи <> 3) Тогда
		Данные[ПараметрыНастройки.СчетУчета] = Неопределено;
		Данные[ПараметрыНастройки.Субконто1] = Неопределено;
		Данные[ПараметрыНастройки.Субконто2] = Неопределено;
		Данные[ПараметрыНастройки.Субконто3] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьКолонкаВТЧ(СписокКолонокТЧ, ИмяКолонки)
	
	Возврат Не СписокКолонокТЧ.Найти(ИмяКолонки) = Неопределено;
	
КонецФункции

Функция ИмяТЧПоПутиКДанным(ПутьКДанным)
	
	//Выделяем имя ТЧ из пути к данным
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Если МассивПодстрок.Количество() = 3 Тогда
		Возврат МассивПодстрок[1] ;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИмяРеквизитаПоПутиКДанным(ПутьКДанным)
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Возврат МассивПодстрок[МассивПодстрок.Количество() - 1] ;
	
КонецФункции

#КонецОбласти

Функция ДоступнаНастройкаСчетовУчета()
	
	ДоступнаНастройкаСчетовУчета = Ложь;
	ДоступнаНастройкаСчетовУчета = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	//++ НЕ УТ
	ДоступнаНастройкаСчетовУчета = ДоступнаНастройкаСчетовУчета И ПравоДоступа("Просмотр",  Метаданные.ПланыСчетов.Хозрасчетный);
	ДоступнаНастройкаСчетовУчета = ДоступнаНастройкаСчетовУчета И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПорядокОтраженияНаСчетахУчета);
	//-- НЕ УТ
	
	Возврат ДоступнаНастройкаСчетовУчета; 
	
КонецФункции

#Область ДобавлениеСчетовУчетаНаФорму

Функция ЭлементСчетаУчетаНаФорме(ЭлементНастройки, Параметры, ЭтоСубконто = Ложь)
	
	Настройки = Параметры.Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	
	Параметры.ЭлементВыводится = ЭлементНастройки.Пометка;
	
	ЭлементФормы = ДобавитьЭлементНаФорму(ЭлементНастройки.Значение, Параметры, ?(ЭтоСубконто, "Субконто", "СчетУчета"));
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = ?(ЗначениеЗаполнено(ЭлементФормы.Заголовок), ЭлементФормы.Заголовок, ЭлементНастройки.Представление);
		ЭлементФормы.Видимость = Параметры.ЭлементВыводится;
		Если ЭлементФормы.Видимость Тогда
			Если Не ЭтоСубконто Тогда
				ЭлементФормы.ПараметрыВыбора = НастройкаСчетовУчетаКлиентСервер.ПараметрыВыбораСчетаУчета(ЭлементНастройки.Значение, Настройки,, Параметры.РазделУчета);
			КонецЕсли;
			Если Настройки.РедактированиеВСписке Тогда
				УстановитьУсловноеОформление(Параметры.Форма, Параметры.РазделУчета, ЭлементНастройки.Значение);
			КонецЕсли;
			НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваСчетовНаФорме(Параметры.Форма, ЭлементНастройки.Значение, Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

// Добавляет элемент на форму, возвращает ссылку на него
// 
// Параметры:
// 	ИмяЭлемента - Строка -
// 	Параметры - Структура - содержит в том числе:
// 		* РазделУчета - Строка -
// 		* Форма - ФормаКлиентскогоПриложения - 
// 	ТипЭлемента - Строка - название типа элемента формы
// Возвращаемое значение:
// 	ГруппаФормы, ПолеФормы -
Функция ДобавитьЭлементНаФорму(ИмяЭлемента, Параметры, ТипЭлемента = "СчетУчета")
	
	Настройка = Параметры.Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	
	ИмяЭлементаНаФорме = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНаФорме(Настройка, Параметры.РазделУчета, ИмяЭлемента, ТипЭлемента);
	
	ЭлементФормы = Параметры.Форма.Элементы.Найти(ИмяЭлементаНаФорме);
	Если ЭлементФормы <> Неопределено Или Не Параметры.СоздаватьВСлучаеОтсутствия Или Не Параметры.ЭлементВыводится Тогда
		Если Не Параметры.ЭлементВыводится И ЭлементФормы <> Неопределено Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
		Возврат ЭлементФормы;
	КонецЕсли;
	
	ТипЭлементаФормы = ?(ТипЭлемента = "Группа", Тип("ГруппаФормы"), Тип("ПолеФормы"));
	ЭлементФормы = Параметры.Форма.Элементы.Добавить(ИмяЭлементаНаФорме, ТипЭлементаФормы, Параметры.ГруппаДляДобавления);
	Если ТипЭлемента <> "Группа" Тогда
		ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы.ПутьКДанным = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, Параметры.РазделУчета, ИмяЭлемента, ТипЭлемента);
		Если ТипЭлемента = "СчетУчета" И Не Настройка.РедактированиеВСписке Тогда
			ЭлементФормы.Ширина = 9;
			ЭлементФормы.РастягиватьПоГоризонтали = Ложь;
		КонецЕсли;
		Если Настройка.РеквизитыАналитики.Свойство(ИмяЭлементаНаФорме) Тогда
			ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииСчетаУчета");
		КонецЕсли;
	Иначе
		ЭлементФормы.Вид = ?(Настройка.РедактированиеВСписке, ВидГруппыФормы.ГруппаКолонок, ВидГруппыФормы.ОбычнаяГруппа);
		ЭлементФормы.Группировка = ?(Настройка.РедактированиеВСписке, ГруппировкаКолонок.Горизонтальная, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
		Если Не Настройка.РедактированиеВСписке Тогда
			ЭлементФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

Функция ИнициализироватьРазделНаФорме(Форма, РазделУчета, Параметры)
	
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	Параметры = ПараметрыДобавленияЭлементаНаФорму(Форма);
	ГруппаРаздела = Неопределено;
	Параметры.РазделУчета = РазделУчета.Значение;
	Параметры.ЭлементВыводится = РазделУчета.Пометка;
		
	РазбитьПоРазделамЭлементы = Настройка.РазбитьПоРазделамЭлементы И (Не СтрНачинаетсяС(РазделУчета.Значение, "Номенклатура") Или Настройка.РедактированиеВСписке);
	
	Если РазбитьПоРазделамЭлементы Тогда
		ГруппаРаздела = ДобавитьЭлементНаФорму(РазделУчета.Значение, Параметры, "Группа");
		Если ГруппаРаздела <> Неопределено Тогда
			ГруппаРаздела.Заголовок = РазделУчета.Представление;
		КонецЕсли;
		Параметры.ГруппаДляДобавления = ГруппаРаздела;
	КонецЕсли;
	
	Возврат ГруппаРаздела;
	
КонецФункции

Функция ПараметрыДобавленияЭлементаНаФорму(Форма)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Форма", Форма);
	СтруктураВозврата.Вставить("РазделУчета", "");
	СтруктураВозврата.Вставить("ГруппаДляДобавления", Форма.Элементы[Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета.ИмяГруппыНастроекСчетовУчета]);
	СтруктураВозврата.Вставить("СоздаватьВСлучаеОтсутствия", Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета.СоздаватьВСлучаеОтсутствия);
	СтруктураВозврата.Вставить("ЭлементВыводится", Истина);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область СоответствияВидовСчетовЭлементамНастройки

#КонецОбласти

Процедура ЗаполнитьОбщиеРеквизитыВлияющиеНаНастройкуСчетовУчета(РазделыУчета, Реквизиты)
	
	Реквизиты.Вставить("ТолькоПросмотр", Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПорядокОтраженияНаСчетахУчета));
	
	Для каждого РазделУчета Из РазделыУчета Цикл
		
		Если РазделУчета = "Расходы" Тогда
			
			
		КонецЕсли;
		
		Если РазделУчета = "ДенежныеСредства" Тогда
			
			Реквизиты.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
			
		КонецЕсли;
		
		Если РазделУчета = "Резервы" Тогда
			
			Реквизиты.Вставить("ФормироватьРезервыПредстоящихРасходов", ПолучитьФункциональнуюОпцию("ФормироватьРезервыПредстоящихРасходов"));
			
		КонецЕсли;
		
		Если РазделУчета = "НоменклатураСобственная" Или РазделУчета = "Номенклатура" Тогда
			
			Реквизиты.Вставить("ИспользоватьКомиссиюПриПродажах", ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах"));
			Реквизиты.Вставить("ИспользоватьОтгрузкуБезПереходаПраваСобственности", ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности"));
			Реквизиты.Вставить("ИспользоватьПроизводствоНаСтороне", ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне"));
			Реквизиты.Вставить("ИспользоватьТоварыВПутиОтПоставщиков", ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков"));
			
		КонецЕсли;
		
		Если Справочники.ГруппыФинансовогоУчетаРасчетов.ВидыРасчетов().Найти(РазделУчета) <> Неопределено Тогда
			
			Реквизиты.Вставить("ИспользоватьМногооборотнуюТару", ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару"));
			Реквизиты.Вставить("ИспользоватьНеотфактурованныеПоставки", ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки"));
			Реквизиты.Вставить("ИспользоватьДоговорыКредитовИДепозитов", ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов"));
			Реквизиты.Вставить("СписокРазделовУчета", Неопределено);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//-- Локализация

#КонецОбласти
