////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ДВИЖЕНИЙ ПО РЕГИСТРАМ УЧЕТА НДС

Процедура ОтразитьНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов.Записывать = Истина;
	Движения.НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов.Загрузить(Таблица);

КонецПроцедуры

Процедура ОтразитьНДСРасчетНалоговогоКредита(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСРасчетНалоговогоКредита;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.НДСРасчетНалоговогоКредита.Записывать = Истина;
	Движения.НДСРасчетНалоговогоКредита.Загрузить(Таблица);

КонецПроцедуры

Процедура ОтразитьНДСРеестрПолученныхНалоговыхДокументов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСРеестрПолученныхНалоговыхДокументов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.НДСРеестрПолученныхНалоговыхДокументов.Записывать = Истина;
	Движения.НДСРеестрПолученныхНалоговыхДокументов.Загрузить(Таблица);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ УЧЕТА НДС

// Функция возвращает момент определения базы НДС по переданным параметрам
//
Функция ОпределитьМоментОпределенияБазыНДС(ВидПоставки, ХозяйственнаяОперация, Организация, ДоговорКонтрагента = Неопределено) Экспорт
	
	// Данные договора могут быть использованы только в случае когда валюта взаиморасчетов указанная в документах
	// совпадает с валютой договора. Для входящего НДС автоматизированны только операции в гривнах. Соответсвенно
	// анализируются только гривневые договора
	Договор = Неопределено;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) 
	   И ДоговорКонтрагента.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Договор = ДоговорКонтрагента;
	КонецЕсли;
		
	ЭтоКомиссия = (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию) ИЛИ                      // ПоступлениеТоваровУслуг
	              (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту) ИЛИ              // ВозвратТоваровПоставщику
	              (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию) ИЛИ // ПередачаТоваровМеждуОрганизациями
	              (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями) ИЛИ  // ВозвратТоваровМеждуОрганизациями
	              (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитенту);                          // ОтчетКомитенту, ОтчетПоКомиссииМеждуОрганизациями
				  
	Если ЗначениеЗаполнено(ВидПоставки) Тогда
		
		Если ВидПоставки = Перечисления.ВидыПоставки.ВводОстатков Тогда
			
			Возврат Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию;
			
		ИначеЕсли ЭтоКомиссия Тогда
			  
			Возврат Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию; // Авансы не автоматизированы
			
		ИначеЕсли ВидПоставки = Перечисления.ВидыПоставки.Поставка 
		      ИЛИ ВидПоставки = Перечисления.ВидыПоставки.Возврат Тогда
			  
			МоментПоДоговору = Неопределено;
			Если ЗначениеЗаполнено(Договор) Тогда
				Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
					Если Договор.ТипДоговора = Перечисления.ТипыДоговоровМеждуОрганизациями.Комиссионный Тогда
						МоментПоДоговору = Договор.МоментОпределенияБазыНДС;
					Иначе
						МоментПоДоговору = Договор.МоментОпределенияБазыНДСПолучатель;
					КонецЕсли;
				Иначе
					МоментПоДоговору = Договор.МоментОпределенияБазыНДС;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(МоментПоДоговору) Тогда
				Возврат МоментПоДоговору;
			Иначе
				Возврат Организация.МоментОпределенияБазыНДСПоЗакупкам;
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

Функция ОпределитьОбособленноеПодразделениеПоУмолчанию(Организация, ДоговорКонтрагента = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		НайденноеЗначение = ДоговорКонтрагента.ОбособленноеПодразделениеПоУмолчанию;
		Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
			Возврат НайденноеЗначение;
		КонецЕсли;
		
	КонецЕсли;

	НайденноеЗначение = Организация.ОбособленноеПодразделениеПоУмолчанию;
	Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
		Возврат НайденноеЗначение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// РАСЧЕТ ВОЗНИКШЕГО КРЕДИТА ПО НДС

// Процедура заполняет и записывает наборы записей регистров.
//
// Параметры
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//	СтруктураШапки - Структура - Реквизиты документа
//
Процедура ЗаписатьНаборыЗаписей(СтруктураНаборыЗаписей, УдалятьПустые = Ложь)
	
	Для Каждого СтрокаСтруктуры Из СтруктураНаборыЗаписей Цикл
		
		НаборЗаписей = СтрокаСтруктуры.Значение;
		Если НаборЗаписей <> Неопределено И (УдалятьПустые ИЛИ НаборЗаписей.Количество() > 0) Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьНаборыЗаписейРасчетыСКлиентами()

Процедура ВыполнитьПроведениеДокументовПоВозникшемуНДС(НачальныеГраницы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Движения = Новый Структура;
	Движения.Вставить("НДСРасчетНалоговогоКредита", РегистрыНакопления.НДСРасчетНалоговогоКредита.СоздатьНаборЗаписей());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачальныеГраницы", НачальныеГраницы);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачальныеГраницы.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	НачальныеГраницы.Период КАК Период
	|ПОМЕСТИТЬ НачальныеГраницы
	|ИЗ
	|	&НачальныеГраницы КАК НачальныеГраницы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачальныеГраницы.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РегистрРасчетов.ЗаказПоставщику КАК ОбъектРасчетов,
	|	РегистрРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РегистрРасчетов.Валюта КАК Валюта
	|ПОМЕСТИТЬ ИзмененныеИзмерения
	|ИЗ
	|	НачальныеГраницы КАК НачальныеГраницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РегистрРасчетов
	|		ПО (РегистрРасчетов.АналитикаУчетаПоПартнерам = НачальныеГраницы.АналитикаУчетаПоПартнерам)
	|ГДЕ
	|	(РегистрРасчетов.Долг <> 0
	|			ИЛИ РегистрРасчетов.Предоплата <> 0)
	|	И РегистрРасчетов.Период >= НачальныеГраницы.Период
	|	И РегистрРасчетов.Валюта = &ВалютаРегламентированногоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	МИНИМУМ(ВложенныйЗапрос.Период) КАК Период
	|ПОМЕСТИТЬ НачальныеГраницыРасчетныхДокументов
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РегистрРасчетов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РегистрРасчетов.Период КАК Период
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РегистрРасчетов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеИзмерения КАК ИзмененныеИзмерения
	|			ПО РегистрРасчетов.АналитикаУчетаПоПартнерам = ИзмененныеИзмерения.АналитикаУчетаПоПартнерам
	|				И РегистрРасчетов.ЗаказПоставщику = ИзмененныеИзмерения.ОбъектРасчетов
	|				И РегистрРасчетов.РасчетныйДокумент = ИзмененныеИзмерения.РасчетныйДокумент
	|				И РегистрРасчетов.Валюта = ИзмененныеИзмерения.Валюта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачальныеГраницы.АналитикаУчетаПоПартнерам,
	|		НачальныеГраницы.Период
	|	ИЗ
	|		НачальныеГраницы КАК НачальныеГраницы) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрНДС.Регистратор КАК Регистратор,
	|	РегистрНДС.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РегистрНДС.Период КАК Период
	|ПОМЕСТИТЬ РегистраторыНДСКЗаписи
	|ИЗ
	|	РегистрНакопления.НДСРасчетНалоговогоКредита КАК РегистрНДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачальныеГраницыРасчетныхДокументов КАК НачальныеГраницыРасчетныхДокументов
	|		ПО РегистрНДС.АналитикаУчетаПоПартнерам = НачальныеГраницыРасчетныхДокументов.АналитикаУчетаПоПартнерам
	|			И (РегистрНДС.Период >= НачальныеГраницыРасчетныхДокументов.Период
	|				ИЛИ РегистрНДС.ДокументПоставки.Дата >= НачальныеГраницыРасчетныхДокументов.Период)
	|ГДЕ
	|	НЕ РегистрНДС.НеЗависитОтВзаиморасчетов
	|	И НЕ РегистрНДС.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	МИНИМУМ(ВложенныйЗапрос.Период) КАК Период
	|ПОМЕСТИТЬ НачальныеГраницыФактические
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачальныеГраницыРасчетныхДокументов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		НачальныеГраницыРасчетныхДокументов.Период КАК Период
	|	ИЗ
	|		НачальныеГраницыРасчетныхДокументов КАК НачальныеГраницыРасчетныхДокументов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РегистраторыНДСКЗаписи.АналитикаУчетаПоПартнерам,
	|		МИНИМУМ(РегистраторыНДСКЗаписи.Период)
	|	ИЗ
	|		РегистраторыНДСКЗаписи КАК РегистраторыНДСКЗаписи
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РегистраторыНДСКЗаписи.АналитикаУчетаПоПартнерам) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрРасчетов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РегистрРасчетов.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	РегистрРасчетов.ЗаказПоставщику КАК ОбъектРасчетов,
	|	РегистрРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РегистрРасчетов.Валюта КАК Валюта,
	|	РегистрРасчетов.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ГТД.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОформлениеГТДСамостоятельно,
	|	ВЫБОР
	|		КОГДА РегистрРасчетов.ВидДвижения = &НаправлениеУвеличенияДолга
	|			ТОГДА РегистрРасчетов.Долг
	|		ИНАЧЕ -РегистрРасчетов.Долг
	|	КОНЕЦ КАК Долг,
	|	ВЫБОР
	|		КОГДА РегистрРасчетов.ВидДвижения = &НаправлениеУвеличенияПредоплаты
	|			ТОГДА РегистрРасчетов.Предоплата
	|		ИНАЧЕ -РегистрРасчетов.Предоплата
	|	КОНЕЦ КАК Предоплата,
	|	ВЫБОР
	|		КОГДА РегистрРасчетов.ВидДвижения = &НаправлениеУвеличенияДолга
	|			ТОГДА РегистрРасчетов.Долг
	|		ИНАЧЕ -РегистрРасчетов.Долг
	|	КОНЕЦ - ВЫБОР
	|		КОГДА РегистрРасчетов.ВидДвижения = &НаправлениеУвеличенияПредоплаты
	|			ТОГДА РегистрРасчетов.Предоплата
	|		ИНАЧЕ -РегистрРасчетов.Предоплата
	|	КОНЕЦ КАК ИзменениеЗадолженности,
	|	РегистрРасчетов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА РегистрРасчетов.ХозяйственнаяОперация В (&МассивОперацийОплаты)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоОперацияПродажи,
	|	РегистрРасчетов.Период КАК Период,
	|	НАЧАЛОПЕРИОДА(РегистрРасчетов.Период, МЕСЯЦ) КАК ПериодМесяц
	|ПОМЕСТИТЬ ДвиженияПоРасчетам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РегистрРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачальныеГраницыФактические КАК НачальныеГраницыФактические
	|		ПО РегистрРасчетов.АналитикаУчетаПоПартнерам = НачальныеГраницыФактические.АналитикаУчетаПоПартнерам
	|			И РегистрРасчетов.Период >= НачальныеГраницыФактические.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт КАК ГТД
	|		ПО РегистрРасчетов.Регистратор = ГТД.Ссылка
	|			И (ГТД.ВариантОформления = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОформлениеГТДСамостоятельно))
	|ГДЕ
	|	НЕ РегистрРасчетов.ХозяйственнаяОперация В (&МассивИсключаемыхХозопераций)
	|	И (РегистрРасчетов.Долг <> 0
	|			ИЛИ РегистрРасчетов.Предоплата <> 0)
	|	И РегистрРасчетов.Валюта = &ВалютаРегламентированногоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияПоРасчетам.ПериодМесяц КАК Месяц,
	|	ДвиженияПоРасчетам.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаМесяцев
	|ИЗ
	|	ДвиженияПоРасчетам КАК ДвиженияПоРасчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМесяцев.Месяц КАК Месяц,
	|	ТаблицаМесяцев.Организация КАК Организация,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СистемыНалогообложенияОрганизаций.Период <= ТаблицаМесяцев.Месяц
	|				ТОГДА СистемыНалогообложенияОрганизаций.Период
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ) КАК ПериодЗаписи
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	ТаблицаМесяцев КАК ТаблицаМесяцев
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК СистемыНалогообложенияОрганизаций
	|		ПО ТаблицаМесяцев.Организация = СистемыНалогообложенияОрганизаций.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаМесяцев.Месяц,
	|	ТаблицаМесяцев.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.Организация КАК Организация,
	|	ТаблицаПериодов.Месяц КАК Месяц
	|ПОМЕСТИТЬ ТаблицаНеплательщиков
	|ИЗ
	|	ТаблицаПериодов КАК ТаблицаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК СистемыНалогообложенияОрганизаций
	|		ПО ТаблицаПериодов.ПериодЗаписи = СистемыНалогообложенияОрганизаций.Период
	|			И ТаблицаПериодов.Организация = СистемыНалогообложенияОрганизаций.Организация
	|ГДЕ
	|	(СистемыНалогообложенияОрганизаций.СистемаНалогообложения ЕСТЬ NULL
	|			ИЛИ СистемыНалогообложенияОрганизаций.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Неплательщик)
	|			ИЛИ СистемыНалогообложенияОрганизаций.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.ЕдиныйНалог)
	|			ИЛИ СистемыНалогообложенияОрганизаций.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.НалогНаПрибыль))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияПоРасчетам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДвиженияПоРасчетам.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДвиженияПоРасчетам.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДвиженияПоРасчетам.Валюта КАК Валюта,
	|	ДвиженияПоРасчетам.Регистратор КАК Регистратор,
	|	ДвиженияПоРасчетам.Период КАК Период
	|ПОМЕСТИТЬ ИсключаемыеИзмерения
	|ИЗ
	|	ДвиженияПоРасчетам КАК ДвиженияПоРасчетам
	|ГДЕ
	|	ДвиженияПоРасчетам.Регистратор ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|	ИЛИ ДвиженияПоРасчетам.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияПоРасчетам.АналитикаУчетаПоПартнерам,
	|	ДвиженияПоРасчетам.Регистратор,
	|	ДвиженияПоРасчетам.РасчетныйДокумент,
	|	ДвиженияПоРасчетам.ОбъектРасчетов,
	|	ДвиженияПоРасчетам.Валюта,
	|	ДвиженияПоРасчетам.Период
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДвиженияПоРасчетам.Долг) = 0 И
	|	СУММА(ДвиженияПоРасчетам.Предоплата) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияПоРасчетам.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ РегистраторыКЗаписи
	|ИЗ
	|	ДвиженияПоРасчетам КАК ДвиженияПоРасчетам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистраторыНДСКЗаписи.Регистратор
	|ИЗ
	|	РегистраторыНДСКЗаписи КАК РегистраторыНДСКЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ДвиженияПоРасчетам.Период) КАК ПериодРасчетногоДокумента,
	|	АВТОНОМЕРЗАПИСИ() КАК ИндексАналитики,
	|	ДвиженияПоРасчетам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДвиженияПоРасчетам.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДвиженияПоРасчетам.РасчетныйДокумент КАК РасчетныйДокумент
	|ПОМЕСТИТЬ ПериодыРасчетныхДокументов
	|ИЗ
	|	ДвиженияПоРасчетам КАК ДвиженияПоРасчетам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияПоРасчетам.АналитикаУчетаПоПартнерам,
	|	ДвиженияПоРасчетам.ОбъектРасчетов,
	|	ДвиженияПоРасчетам.РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрНДС.Период КАК Период,
	|	РегистрНДС.Регистратор КАК Регистратор,
	|	РегистрНДС.НомерСтроки КАК НомерСтроки,
	|	РегистрНДС.Активность КАК Активность,
	|	РегистрНДС.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РегистрНДС.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РегистрНДС.ВидПоставки КАК ВидПоставки,
	|	РегистрНДС.ДокументПоставки КАК ДокументПоставки,
	|	РегистрНДС.МоментОпределенияБазыНДС КАК МоментОпределенияБазыНДС,
	|	РегистрНДС.СуммаПоставкиТребующаяРегистрацииНН КАК СуммаПоставкиТребующаяРегистрацииНН,
	|	РегистрНДС.СуммаПоставкиНеТребующаяРегистрацииНН КАК СуммаПоставкиНеТребующаяРегистрацииНН,
	|	РегистрНДС.НеЗависитОтВзаиморасчетов КАК НеЗависитОтВзаиморасчетов
	|ПОМЕСТИТЬ СохраняемыеДвижения
	|ИЗ
	|	РегистрНакопления.НДСРасчетНалоговогоКредита КАК РегистрНДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыКЗаписи КАК РегистраторыКЗаписи
	|		ПО РегистрНДС.Регистратор = РегистраторыКЗаписи.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачальныеГраницыФактические КАК НачальныеГраницыФактические
	|		ПО РегистрНДС.АналитикаУчетаПоПартнерам = НачальныеГраницыФактические.АналитикаУчетаПоПартнерам
	|			И РегистрНДС.Период >= НачальныеГраницыФактические.Период
	|ГДЕ
	|	(НачальныеГраницыФактические.АналитикаУчетаПоПартнерам ЕСТЬ NULL
	|			ИЛИ РегистрНДС.НеЗависитОтВзаиморасчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СохраняемыеДвижения.Период КАК Период,
	|	СохраняемыеДвижения.Регистратор КАК Регистратор,
	|	СохраняемыеДвижения.НомерСтроки КАК НомерСтроки,
	|	СохраняемыеДвижения.Активность КАК Активность,
	|	СохраняемыеДвижения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	СохраняемыеДвижения.ОбъектРасчетов КАК ОбъектРасчетов,
	|	СохраняемыеДвижения.ВидПоставки КАК ВидПоставки,
	|	СохраняемыеДвижения.ДокументПоставки КАК ДокументПоставки,
	|	СохраняемыеДвижения.МоментОпределенияБазыНДС КАК МоментОпределенияБазыНДС,
	|	СохраняемыеДвижения.СуммаПоставкиТребующаяРегистрацииНН КАК СуммаПоставкиТребующаяРегистрацииНН,
	|	СохраняемыеДвижения.СуммаПоставкиНеТребующаяРегистрацииНН КАК СуммаПоставкиНеТребующаяРегистрацииНН,
	|	СохраняемыеДвижения.НеЗависитОтВзаиморасчетов КАК НеЗависитОтВзаиморасчетов
	|ИЗ
	|	СохраняемыеДвижения КАК СохраняемыеДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ДвиженияПоРасчетам.Период) КАК Период,
	|	ДвиженияПоРасчетам.Регистратор КАК ДокументПоставки,
	|	СУММА(ДвиженияПоРасчетам.ИзменениеЗадолженности) КАК Сумма,
	|	ПериодыРасчетныхДокументов.ИндексАналитики КАК ИндексАналитики
	|ИЗ
	|	ДвиженияПоРасчетам КАК ДвиженияПоРасчетам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыРасчетныхДокументов КАК ПериодыРасчетныхДокументов
	|		ПО ДвиженияПоРасчетам.АналитикаУчетаПоПартнерам = ПериодыРасчетныхДокументов.АналитикаУчетаПоПартнерам
	|			И ДвиженияПоРасчетам.ОбъектРасчетов = ПериодыРасчетныхДокументов.ОбъектРасчетов
	|			И ДвиженияПоРасчетам.РасчетныйДокумент = ПериодыРасчетныхДокументов.РасчетныйДокумент
	|ГДЕ
	|	ДвиженияПоРасчетам.ИзменениеЗадолженности > 0
	|	И ДвиженияПоРасчетам.ЭтоОперацияПродажи
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияПоРасчетам.Регистратор,
	|	ПериодыРасчетныхДокументов.ИндексАналитики
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексАналитики,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияПоРасчетам.Период КАК Период,
	|	ПериодыРасчетныхДокументов.ПериодРасчетногоДокумента КАК ПериодРасчетногоДокумента,
	|	РегистраторыКЗаписи.Регистратор КАК Регистратор,
	|	ПериодыРасчетныхДокументов.ИндексАналитики КАК ИндексАналитики,
	|	ДвиженияПоРасчетам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДвиженияПоРасчетам.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДвиженияПоРасчетам.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДвиженияПоРасчетам.Валюта КАК Валюта,
	|	ДвиженияПоРасчетам.Долг КАК Долг,
	|	ДвиженияПоРасчетам.Предоплата КАК Предоплата,
	|	ДвиженияПоРасчетам.ИзменениеЗадолженности КАК ИзменениеЗадолженности,
	|	ДвиженияПоРасчетам.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДвиженияПоРасчетам.Организация КАК Организация,
	|	ДвиженияПоРасчетам.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДвиженияПоРасчетам.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(ДвиженияПоРасчетам.ОформлениеГТДСамостоятельно, ЛОЖЬ) КАК ОформлениеГТДСамостоятельно,
	|	ДвиженияПоРасчетам.ЭтоОперацияПродажи КАК ЭтоОперацияПродажи,
	|	ВЫБОР
	|		КОГДА ДвиженияПоРасчетам.ЭтоОперацияПродажи
	|				И ДвиженияПоРасчетам.ИзменениеЗадолженности > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОтгрузка,
	|	ВЫБОР
	|		КОГДА ДвиженияПоРасчетам.ЭтоОперацияПродажи
	|				И ДвиженияПоРасчетам.ИзменениеЗадолженности < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияПоРасчетам.ЭтоОперацияПродажи
	|				И ДвиженияПоРасчетам.ИзменениеЗадолженности < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОплата,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияПоРасчетам.ЭтоОперацияПродажи
	|				И ДвиженияПоРасчетам.ИзменениеЗадолженности > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратОплаты,
	|	ЕСТЬNULL(ВозвратРасчетныйДокумент.СпособКомпенсации, НЕОПРЕДЕЛЕНО) КАК СпособКомпенсации,
	|	ВЫБОР
	|		КОГДА РегистраторыСохраняемыхДвижений.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСохраняемыеДвижения
	|ИЗ
	|	РегистраторыКЗаписи КАК РегистраторыКЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияПоРасчетам КАК ДвиженияПоРасчетам
	|		ПО РегистраторыКЗаписи.Регистратор = ДвиженияПоРасчетам.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНеплательщиков КАК ТаблицаНеплательщиков
	|		ПО (ДвиженияПоРасчетам.Организация = ТаблицаНеплательщиков.Организация)
	|			И (ДвиженияПоРасчетам.ПериодМесяц = ТаблицаНеплательщиков.Месяц)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсключаемыеИзмерения КАК ИсключаемыеИзмерения
	|		ПО (ДвиженияПоРасчетам.АналитикаУчетаПоПартнерам = ИсключаемыеИзмерения.АналитикаУчетаПоПартнерам)
	|			И (ДвиженияПоРасчетам.ОбъектРасчетов = ИсключаемыеИзмерения.ОбъектРасчетов)
	|			И (ДвиженияПоРасчетам.РасчетныйДокумент = ИсключаемыеИзмерения.РасчетныйДокумент)
	|			И (ДвиженияПоРасчетам.Валюта = ИсключаемыеИзмерения.Валюта)
	|			И (ДвиженияПоРасчетам.Регистратор = ИсключаемыеИзмерения.Регистратор)
	|			И (ДвиженияПоРасчетам.Период = ИсключаемыеИзмерения.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ВозвратРасчетныйДокумент
	|		ПО (ДвиженияПоРасчетам.РасчетныйДокумент = ВозвратРасчетныйДокумент.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыРасчетныхДокументов КАК ПериодыРасчетныхДокументов
	|		ПО (ДвиженияПоРасчетам.АналитикаУчетаПоПартнерам = ПериодыРасчетныхДокументов.АналитикаУчетаПоПартнерам)
	|			И (ДвиженияПоРасчетам.ОбъектРасчетов = ПериодыРасчетныхДокументов.ОбъектРасчетов)
	|			И (ДвиженияПоРасчетам.РасчетныйДокумент = ПериодыРасчетныхДокументов.РасчетныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СохраняемыеДвижения.Регистратор КАК Регистратор
	|		ИЗ
	|			СохраняемыеДвижения КАК СохраняемыеДвижения) КАК РегистраторыСохраняемыхДвижений
	|		ПО РегистраторыКЗаписи.Регистратор = РегистраторыСохраняемыхДвижений.Регистратор
	|ГДЕ
	|	ИсключаемыеИзмерения.Регистратор ЕСТЬ NULL
	|	И ТаблицаНеплательщиков.Организация ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	АналитикаУчетаПоПартнерам,
	|	ИндексАналитики
	|ИТОГИ
	|	МАКСИМУМ(ОформлениеГТДСамостоятельно),
	|	МАКСИМУМ(ЕстьСохраняемыеДвижения)
	|ПО
	|	Регистратор,
	|	АналитикаУчетаПоПартнерам
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	МассивОперацийОплаты = Новый Массив;
	МассивОперацийОплаты.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	МассивОперацийОплаты.Добавить(Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиПоставщику);
	МассивОперацийОплаты.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщикуПодотчетнымЛицом);
	МассивОперацийОплаты.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	МассивОперацийОплаты.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивОперацийОплаты.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	МассивОперацийОплаты.Добавить(Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности);
	МассивОперацийОплаты.Добавить(Перечисления.ХозяйственныеОперации.ЗачетАвансаПоставщику);
	МассивОперацийОплаты.Добавить(Перечисления.ХозяйственныеОперации.ПереносАванса);
	
	//по ряду хозопераций нет прямой связи между взаиморасчетами и налоговыми обязательствами 
	//либо операции не являются объектом налогообложения - не изменяют состояние отгрузки или оплаты, а лишь корректируют взаиморасчеты
	МассивИсключаемыхХозопераций = Новый Массив;
	
	//движения по НК в случае неполученной входящей НН формируются явно в документе ввода остатков
	МассивИсключаемыхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам);
	МассивИсключаемыхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам);
	
	МассивИсключаемыхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитенту);
	МассивИсключаемыхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании);
	МассивИсключаемыхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациямиОСписании);
	МассивИсключаемыхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	МассивИсключаемыхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	МассивИсключаемыхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику);
	МассивИсключаемыхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ПокупкаПолученнойВозвратнойТары);
	МассивИсключаемыхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	МассивИсключаемыхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно);
	//МассивИсключаемыхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ОформлениеГТДБрокером);
	
	МассивОперацийВзаимозачета = Новый Массив;
	МассивОперацийВзаимозачета.Добавить(Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности);
	МассивОперацийВзаимозачета.Добавить(Перечисления.ХозяйственныеОперации.ЗачетАвансаПоставщику);
	МассивОперацийВзаимозачета.Добавить(Перечисления.ХозяйственныеОперации.ПереносАванса);
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		Запрос.УстановитьПараметр("НаправлениеУвеличенияДолга", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("НаправлениеУвеличенияПредоплаты", ВидДвиженияНакопления.Приход);
		ТекстЗапроса = СтрЗаменить(Запрос.Текст, "РегистрНакопления.РасчетыСПоставщикамиПоДокументам", "РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрРасчетов.ЗаказПоставщику", "РегистрРасчетов.ОбъектРасчетов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрРасчетов.Регистратор", "РегистрРасчетов.ДокументРегистратор");
		Запрос.Текст = ТекстЗапроса;
	Иначе
		Запрос.УстановитьПараметр("НаправлениеУвеличенияДолга", ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("НаправлениеУвеличенияПредоплаты", ВидДвиженияНакопления.Приход);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОперацийОплаты", МассивОперацийОплаты);
	Запрос.УстановитьПараметр("МассивИсключаемыхХозопераций", МассивИсключаемыхХозопераций);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РазмерПакета = РезультатЗапроса.ВГраница();
	СохраняемыеДвижения = РезультатЗапроса[РазмерПакета - 2].Выгрузить();
	ТаблицаДокументовПоставки = РезультатЗапроса[РазмерПакета - 1].Выгрузить();
	ВыборкаПоРегистратору = РезультатЗапроса[РазмерПакета].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	Для каждого ТекущаяКолонка Из РезультатЗапроса[РазмерПакета].Колонки Цикл
		ТаблицаДвижений.Колонки.Добавить(ТекущаяКолонка.Имя);
	КонецЦикла;
	
	ПоляСвертки = "";
	Для каждого ТекущаяКолонка ИЗ Движения.НДСРасчетНалоговогоКредита.ВыгрузитьКолонки().Колонки Цикл
		
		Если ТаблицаДвижений.Колонки.Найти(ТекущаяКолонка.Имя) = Неопределено Тогда
			ТаблицаДвижений.Колонки.Добавить(ТекущаяКолонка.Имя);
		КонецЕсли;
		
		Если ТекущаяКолонка.Имя <> "СуммаПоставкиТребующаяРегистрацииНН" И ТекущаяКолонка.Имя <> "СуммаПоставкиНеТребующаяРегистрацииНН" Тогда
			ПоляСвертки = ПоляСвертки + ", " + ТекущаяКолонка.Имя;
		КонецЕсли;
		
	КонецЦикла;
	ПоляСвертки = Сред(ПоляСвертки, 3);
	
	ТаблицаОбязательствПоСтрокеРасчетов = Новый ТаблицаЗначений;
	ТаблицаОбязательствПоСтрокеРасчетов.Колонки.Добавить("ВидПоставки");
	ТаблицаОбязательствПоСтрокеРасчетов.Колонки.Добавить("ПервоеСобытие");
	ТаблицаОбязательствПоСтрокеРасчетов.Колонки.Добавить("ДокументПоставки");
	ТаблицаОбязательствПоСтрокеРасчетов.Колонки.Добавить("ТребуетсяРаспределениеПоДокументамПоставки", Новый ОписаниеТипов("Булево"));
	ТаблицаОбязательствПоСтрокеРасчетов.Колонки.Добавить("Сумма");
	
	ПредыдущийИндексАналитики = 0;
	
	Пока ВыборкаПоРегистратору.Следующий() Цикл
		
		//в движениях по оперативным взаиморасчетам хозоперация списания задолженности подменяется на нейтральную, поэтому исключать будем по типу регистратора
		Если ТипЗнч(ВыборкаПоРегистратору.Регистратор) = Тип("ДокументСсылка.СписаниеЗадолженности") Тогда
			Продолжить;
		КонецЕсли;
		
		Движения.НДСРасчетНалоговогоКредита.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
		
		Если Не ЗначениеЗаполнено(Движения.НДСРасчетНалоговогоКредита.Отбор.Регистратор.Значение) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось установить документ регистратор %1 для проведения по регистру НДСРасчетНалоговогоКредита';uk='Не вдалося встановити документ реєстратор %1 для проведення по регістру НДСРасчетНалоговогоКредіта'"), ВыборкаПоРегистратору.Регистратор);
		КонецЕсли;
		
		ТаблицаДвижений.Очистить();
		
		ВыборкаПоАналитике = ВыборкаПоРегистратору.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоАналитике.Следующий() Цикл
			
			Если ВыборкаПоАналитике.АналитикаУчетаПоПартнерам = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			ДвиженияПоАналитике = ТаблицаДвижений.СкопироватьКолонки();
			
			ВыборкаСтрока = ВыборкаПоАналитике.Выбрать();
			Пока ВыборкаСтрока.Следующий() Цикл
				
				ТаблицаОбязательствПоСтрокеРасчетов.Очистить();
				
				ВидПоставки = ?(ВыборкаСтрока.ЭтоВозврат ИЛИ ВыборкаСтрока.ЭтоВозвратОплаты, Перечисления.ВидыПоставки.Возврат, Перечисления.ВидыПоставки.Поставка);
				
				МоментОпределенияБазы = ОпределитьМоментОпределенияБазыНДС(
				ВидПоставки, 
				ВыборкаСтрока.ХозяйственнаяОперация,					
				ВыборкаСтрока.Организация, 
				ВыборкаСтрока.Договор
				);
				
				Если НЕ ЗначениеЗаполнено(МоментОпределенияБазы) Тогда
					МоментОпределенияБазы = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию;
				КонецЕсли;
				
				ЭтоПервоеСобытие = Ложь;
				
				Если МоментОпределенияБазы = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию Тогда
					
					Если ВыборкаСтрока.ЭтоОперацияПродажи И ЗначениеЗаполнено(ВыборкаСтрока.Долг)
						ИЛИ НЕ ВыборкаСтрока.ЭтоОперацияПродажи И ЗначениеЗаполнено(ВыборкаСтрока.Предоплата) Тогда
						//продажа или возврат оплаты увеличивает долг или уменьшает предоплату
						//оплата или возврат товара уменьшают долг или увеличивают предоплату
						//если продажа или возврат товара изменяют долг, значит это первое событие - изменяется уровень отгрузки, и он больше уровня оплаты
						//если продажа или возврат товара изменяют предоплату, значит это второе событие - изменяется уровень отгрузки в пределах уровня оплаты
						//если оплата или возврат оплаты изменяют предоплату, значит это первое событие - изменяется уровень оплаты, и он больше уровня отгрузки
						//если оплата или возврат оплаты изменяют долг, значит это второе событие - изменяется уровень оплаты в пределах уровня отгрузки
						
						ЭтоПервоеСобытие = Истина;
						
					КонецЕсли;
					
				ИначеЕсли МоментОпределенияБазы = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
					Если НЕ ВыборкаСтрока.ЭтоОперацияПродажи Тогда
						ЭтоПервоеСобытие = Истина;
					КонецЕсли;
				ИначеЕсли МоментОпределенияБазы = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
					Если ВыборкаСтрока.ЭтоОперацияПродажи Тогда
						ЭтоПервоеСобытие = Истина;
					КонецЕсли;
				КонецЕсли;
				
				//долг и предоплата изменяются документами в противоположном направление: когда долг растет, предоплата уменьшается, и наоборот
				//поскольку в ресурсах регистра в каждом движении заполнено только одно значение, либо долг, либо предоплата, для определения общей суммы неважно, суммируются они или вычитаются
				//если из изменения долга вычитать изменение предоплаты, результатом будет общее изменение задолженности
				//для определения налогооблагаемого события важно знать не изменение задолженности, а изменение уровня отгрузки или оплаты
				//они будут отрицательными у операций возврата и положительными у операций продаж
				//поэтому далее оперируем суммами по модулю, понимая, что при возвратах они отрицательные
				
				СуммаОперации = ВыборкаСтрока.ИзменениеЗадолженности;
				Если СуммаОперации < 0 Тогда
					СуммаОперации = - СуммаОперации;
				КонецЕсли;
				
				//обычно одной строке движений по расчетам соответствует одна строка движений по обязательствам
				СтрокаОбязательств = ТаблицаОбязательствПоСтрокеРасчетов.Добавить();
				СтрокаОбязательств.ВидПоставки = ВидПоставки;
				СтрокаОбязательств.Сумма = СуммаОперации;
				СтрокаОбязательств.ПервоеСобытие = ЭтоПервоеСобытие;
				
				//товарные документы сами являются документами поставки
				//у возврата оплаты документа поставки нет - товарный состав зависит от составна налоговых накладных, выписанных на аванс
				//для оплат (в т. ч. возвратов товаров, образующих аванс) требуется определять документ поставки исходя из данных об отгрузках
				//по одному расчетному документу оплата и продажа могут образовываться несколькими регистраторами, поэтому может возникать неопределенность документа поставки
				//для ее разрешения используется учет остатка доступной суммы по документу поставки, подобно списанию при партионном учете товаров
				Если ВыборкаСтрока.ЭтоОтгрузка ИЛИ ВыборкаСтрока.ЭтоВозврат Тогда
					СтрокаОбязательств.ДокументПоставки = ВыборкаСтрока.Регистратор;	
				ИначеЕсли ВыборкаСтрока.ЭтоВозвратОплаты Тогда
					СтрокаОбязательств.ДокументПоставки = Неопределено;	
				Иначе
					СтрокаОбязательств.ТребуетсяРаспределениеПоДокументамПоставки = Истина;
				КонецЕсли;
				
				//особый случай - при возврате товаров нужно всегда выписывать корректировку на всю сумму возврата
				//если возврат - первое событие, то все в порядке, сумма события равна сумме оформляемой П2
				//если возврат - второе событие, то нужно дополнительно образовать два первых события с нулевой общей суммой:
				//П2 - на сумму возврата с минусом, НН - на сумму образовавшегося аванса с плюсом
				Если МоментОпределенияБазы = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию И ВыборкаСтрока.ЭтоВозврат И НЕ ЭтоПервоеСобытие Тогда
					
					//первое событие по возврату на сумму второго - доводим сумму первого события до суммы всей операции
					СтрокаОбязательствДополнительно = ТаблицаОбязательствПоСтрокеРасчетов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОбязательствДополнительно, СтрокаОбязательств);
					СтрокаОбязательствДополнительно.ПервоеСобытие = Истина;
					
					//первое событие по поставке - НН на аванс
					СтрокаОбязательствДополнительно = ТаблицаОбязательствПоСтрокеРасчетов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОбязательствДополнительно, СтрокаОбязательств);
					СтрокаОбязательствДополнительно.ПервоеСобытие = Истина;
					СтрокаОбязательствДополнительно.ВидПоставки = Перечисления.ВидыПоставки.Поставка;
					СтрокаОбязательствДополнительно.ТребуетсяРаспределениеПоДокументамПоставки = Истина;
					
				КонецЕсли;
				
				//определим документ поставки для записей, которые этого требуют
				СтрокиДляОпределенияДокументаПоставки = ТаблицаОбязательствПоСтрокеРасчетов.НайтиСтроки(Новый Структура("ТребуетсяРаспределениеПоДокументамПоставки", Истина));
				
				Если СтрокиДляОпределенияДокументаПоставки.Количество() > 0 Тогда
					
					Если ВыборкаСтрока.ИндексАналитики <> ПредыдущийИндексАналитики Тогда
						ДокументыПоставкиПоИндексу = ТаблицаДокументовПоставки.НайтиСтроки(Новый Структура("ИндексАналитики", ВыборкаСтрока.ИндексАналитики));
						ПредыдущийИндексАналитики = ВыборкаСтрока.ИндексАналитики;
					КонецЕсли;
					
					Для каждого СтрокаОбязательств ИЗ СтрокиДляОпределенияДокументаПоставки Цикл
						
						СуммаОперацииКРаспределению = СтрокаОбязательств.Сумма;
						ИндексВставки = ТаблицаОбязательствПоСтрокеРасчетов.Индекс(СтрокаОбязательств) + 1;
						
						Для каждого СтрокаДокументаПоставки Из ДокументыПоставкиПоИндексу Цикл
							
							РаспределеннаяСумма = Мин(СтрокаДокументаПоставки.Сумма, СуммаОперацииКРаспределению);
							
							Если РаспределеннаяСумма <=0 Тогда
								Продолжить;
							КонецЕсли;
							
							НоваяСтрока = ТаблицаОбязательствПоСтрокеРасчетов.Вставить(ИндексВставки);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбязательств);
							НоваяСтрока.ДокументПоставки = СтрокаДокументаПоставки.ДокументПоставки;
							НоваяСтрока.Сумма = РаспределеннаяСумма;
							
							СуммаОперацииКРаспределению = СуммаОперацииКРаспределению - РаспределеннаяСумма;
							СтрокаДокументаПоставки.Сумма = СтрокаДокументаПоставки.Сумма - РаспределеннаяСумма;
							ИндексВставки = ИндексВставки + 1;
							
						КонецЦикла;
						
						Если СуммаОперацииКРаспределению = 0 Тогда
							ТаблицаОбязательствПоСтрокеРасчетов.Удалить(СтрокаОбязательств);
						Иначе
							СтрокаОбязательств.Сумма = СуммаОперацииКРаспределению;
							СтрокаОбязательств.ДокументПоставки = Неопределено;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				//формирование записей по регистру
				Для каждого СтрокаОбязательств Из ТаблицаОбязательствПоСтрокеРасчетов Цикл
					
					СтрокаДвижения = ДвиженияПоАналитике.Добавить();
					
					ЗаполнитьЗначенияСвойств(СтрокаДвижения, ВыборкаСтрока);
					ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаОбязательств);
					СтрокаДвижения.МоментОпределенияБазыНДС = МоментОпределенияБазы;
					СтрокаДвижения.СуммаПоставкиТребующаяРегистрацииНН = ?(СтрокаОбязательств.ПервоеСобытие, СтрокаОбязательств.Сумма, 0);
					СтрокаДвижения.СуммаПоставкиНеТребующаяРегистрацииНН = ?(СтрокаОбязательств.ПервоеСобытие, 0, СтрокаОбязательств.Сумма);
					
				КонецЦикла;
				
			КонецЦикла;
			
			//если у регистратора есть движения взаимозачета, попытаемся минимизировать количество налоговых документов, если это разрешено
			//преобразуем движения так, будто у документов расчета, по которым возникали исходные обязательства, сразу была указана такая аналитика, на которую выполняется взаимозачет
			//тогда вместо корректировок могут выписываться налоговые накладные по другой аналитике/номеклатуре
			//и не будут выписывать налоговые накладные, когда первое событие не должно было возникнуть
			//корректировать аналитику можно только в оплатах, аналитика отгрузок не меняется, но может измениться первое/второе событие
			
			ВыполненаКорректировкаДвиженийВзаимозачета = Ложь;
			
			МассивИсходныхДвиженийЗачета = Новый Массив;
			МоментыОпределенияБазы = Новый Массив;
			ТаблицаДвиженийЗачета = ДвиженияПоАналитике.СкопироватьКолонки();
			
			Для каждого СтрокаДвижения Из ДвиженияПоАналитике Цикл
				
				Если МассивОперацийВзаимозачета.Найти(СтрокаДвижения.ХозяйственнаяОперация) <> Неопределено Тогда
					
					МассивИсходныхДвиженийЗачета.Добавить(СтрокаДвижения);
					НоваяЗапись = ТаблицаДвиженийЗачета.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДвижения);
					Если НоваяЗапись.ВидПоставки = Перечисления.ВидыПоставки.Возврат Тогда
						НоваяЗапись.СуммаПоставкиТребующаяРегистрацииНН = - НоваяЗапись.СуммаПоставкиТребующаяРегистрацииНН; 
						НоваяЗапись.СуммаПоставкиНеТребующаяРегистрацииНН = - НоваяЗапись.СуммаПоставкиНеТребующаяРегистрацииНН;
						НоваяЗапись.ВидПоставки = Перечисления.ВидыПоставки.Поставка;
					КонецЕсли;
					
					Если МоментыОпределенияБазы.Найти(СтрокаДвижения.МоментОпределенияБазыНДС) = Неопределено Тогда
						МоментыОпределенияБазы.Добавить(СтрокаДвижения.МоментОпределенияБазыНДС);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			//при моменте определения базы "по отгрузке" корректировать взаимозачет не нужно - налоговое событие и документ поставки совпадают
			Если МассивИсходныхДвиженийЗачета.Количество() > 0
				И МоментыОпределенияБазы.Количество() = 1
				И (МоментыОпределенияБазы[0] = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию ИЛИ МоментыОпределенияБазы[0] = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате) Тогда
				
				ТаблицаДвиженийЗачета.Свернуть("Период, Регистратор, АналитикаУчетаПоПартнерам, ОбъектРасчетов, ВидПоставки, Валюта, ДокументПоставки, МоментОпределенияБазыНДС, РасчетныйДокумент, ПериодРасчетногоДокумента",
				"СуммаПоставкиТребующаяРегистрацииНН, СуммаПоставкиНеТребующаяРегистрацииНН");
				
				Для каждого ТекущаяСтрока Из ТаблицаДвиженийЗачета.НайтиСтроки(Новый Структура("СуммаПоставкиТребующаяРегистрацииНН, СуммаПоставкиНеТребующаяРегистрацииНН", 0, 0)) Цикл
					ТаблицаДвиженийЗачета.Удалить(ТекущаяСтрока);
				КонецЦикла;
				
				ПоложительнаяСуммаОпераций = 0;
				ОтрицательнаяСуммаОпераций = 0;
				
				Для каждого ТекущаяСтрока Из ТаблицаДвиженийЗачета Цикл
					
					ТекущаяСтрока.Период = ТекущаяСтрока.ПериодРасчетногоДокумента;
					
					Если ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН > 0 ИЛИ ТекущаяСтрока.СуммаПоставкиНеТребующаяРегистрацииНН > 0 Тогда
						ПоложительнаяСуммаОпераций = ПоложительнаяСуммаОпераций + ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН + ТекущаяСтрока.СуммаПоставкиНеТребующаяРегистрацииНН;
					Иначе
						ОтрицательнаяСуммаОпераций = ОтрицательнаяСуммаОпераций + ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН + ТекущаяСтрока.СуммаПоставкиНеТребующаяРегистрацииНН;
					КонецЕсли;
					
				КонецЦикла;
				
				//суммы должны совпадать, иначе такую ситуацию непонятно как исправлять
				ВыполненаКорректировкаДвиженийВзаимозачета = ПоложительнаяСуммаОпераций = - ОтрицательнаяСуммаОпераций;
				
				Если ВыполненаКорректировкаДвиженийВзаимозачета Тогда
					
					Если МоментОпределенияБазы = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию Тогда
						
						//взаимозачет "уравнивает" аналитику всех операций (расчетных документов), которые он затронул
						//поэтому можно считать, что первые из этих операций должны быть первыми событиями, а последние - вторыми
						//отсортируем таблицу по дате расчетного документа, так получим движения в порядке исходных документов
						//разобьем исходную таблицу пополам, в каждой половине сумма операций будет равна сумма взаимозачета
						//в первой половине все операции должны остаться первым событием, во второй первое событие должно быть отсторнировано, будто и не возникало
						//в первой половине аналитику оплат нужно скорректировать на аналитику реализаций из второй половины, будто оплата была первым событием, а реализация вторым
						//во второй половине аналитику оплат нужно скорректировать на аналитику реализаций из первой половины, будто оплата была вторым событием, а реализация первым
						
						ТаблицаДвиженийЗачета.Сортировать("Период");
						
						ОсталосьРаспределить = ПоложительнаяСуммаОпераций;
						ТаблицаПервыхСобытий = ТаблицаДвиженийЗачета.СкопироватьКолонки();
						ТаблицаВторыхСобытий = ТаблицаДвиженийЗачета.СкопироватьКолонки();
						
						//первая таблица
						Для каждого ТекущаяСтрока Из ТаблицаДвиженийЗачета Цикл
							
							СуммаОперацииПоСтроке = ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН + ТекущаяСтрока.СуммаПоставкиНеТребующаяРегистрацииНН;
							Если СуммаОперацииПоСтроке > 0 Тогда
								ЗнакОперации = 1;
							Иначе
								ЗнакОперации = -1;
								СуммаОперацииПоСтроке = - СуммаОперацииПоСтроке;
							КонецЕсли;
							
							РаспределеннаяСумма = Мин(ОсталосьРаспределить, СуммаОперацииПоСтроке);
							
							Если РаспределеннаяСумма > 0 Тогда
								
								НоваяСтрока = ТаблицаПервыхСобытий.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
								
								Если ЗначениеЗаполнено(ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН) Тогда
									НоваяСтрока.СуммаПоставкиТребующаяРегистрацииНН = ЗнакОперации * РаспределеннаяСумма;
									ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН = ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН - ЗнакОперации * РаспределеннаяСумма;
								Иначе
									НоваяСтрока.СуммаПоставкиНеТребующаяРегистрацииНН = ЗнакОперации * РаспределеннаяСумма;
									ТекущаяСтрока.СуммаПоставкиНеТребующаяРегистрацииНН = ТекущаяСтрока.СуммаПоставкиНеТребующаяРегистрацииНН - ЗнакОперации * РаспределеннаяСумма;
								КонецЕсли;
								
								ОсталосьРаспределить = ОсталосьРаспределить - РаспределеннаяСумма;
								
							КонецЕсли;
							
							Если ОсталосьРаспределить = 0 Тогда
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
						//вторая таблица
						Для каждого ТекущаяСтрока Из ТаблицаДвиженийЗачета Цикл
							
							Если ЗначениеЗаполнено(ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН + ТекущаяСтрока.СуммаПоставкиНеТребующаяРегистрацииНН) Тогда
								НоваяСтрока = ТаблицаВторыхСобытий.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
							КонецЕсли;
							
						КонецЦикла;
						
						//сюда будем помещать результирующие движения
						ТаблицаДвиженийЗачета.Очистить();
						
						//распределяем оплаты-первые события на реализации-вторые события
						Для каждого ТекущаяСтрока Из ТаблицаПервыхСобытий Цикл
							
							СуммаОперацииПоСтроке = - ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН;
							
							//возврат предоплаты будет первым событием с минусом
							//ситуация, когда вместо возврата предоплаты образуется долг, корректировке не подлежит
							Если СуммаОперацииПоСтроке > 0 Тогда
								
								//1. исходная строка датой расчетного документа - сторно 1 события оплаты по старой аналитике
								СтрокаДвижений = ТаблицаДвиженийЗачета.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаДвижений, ТекущаяСтрока);
								
								ОсталосьРаспределить = СуммаОперацииПоСтроке;
								
								Для каждого СтрокаВторогоСобытия Из ТаблицаВторыхСобытий Цикл
									
									СуммаОперацииВторогоСобытия = СтрокаВторогоСобытия.СуммаПоставкиТребующаяРегистрацииНН + СтрокаВторогоСобытия.СуммаПоставкиНеТребующаяРегистрацииНН;
									Если СуммаОперацииВторогоСобытия > 0 Тогда
										
										РаспределеннаяСумма = Мин(ОсталосьРаспределить, СуммаОперацииВторогоСобытия);
										
										Если РаспределеннаяСумма > 0 Тогда
											
											//2. первое событие оплаты по правильной аналитике
											СтрокаДвижений = ТаблицаДвиженийЗачета.Добавить();
											ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаВторогоСобытия);
											СтрокаДвижений.Период = ТекущаяСтрока.Период;
											СтрокаДвижений.СуммаПоставкиТребующаяРегистрацииНН = РаспределеннаяСумма;
											СтрокаДвижений.СуммаПоставкиНеТребующаяРегистрацииНН = 0;
											
											Если ЗначениеЗаполнено(СтрокаВторогоСобытия.СуммаПоставкиНеТребующаяРегистрацииНН) Тогда
												
												//3. сторно 1 события реализации
												СтрокаДвижений = ТаблицаДвиженийЗачета.Добавить();
												ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаВторогоСобытия);
												СтрокаДвижений.СуммаПоставкиТребующаяРегистрацииНН = - РаспределеннаяСумма;
												СтрокаДвижений.СуммаПоставкиНеТребующаяРегистрацииНН = 0;
												
												//4. 2 событие по реализации
												СтрокаДвижений = ТаблицаДвиженийЗачета.Добавить();
												ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаВторогоСобытия);
												СтрокаДвижений.СуммаПоставкиТребующаяРегистрацииНН = 0;
												СтрокаДвижений.СуммаПоставкиНеТребующаяРегистрацииНН = РаспределеннаяСумма;
												
												СтрокаВторогоСобытия.СуммаПоставкиНеТребующаяРегистрацииНН = СтрокаВторогоСобытия.СуммаПоставкиНеТребующаяРегистрацииНН - РаспределеннаяСумма;
												
											Иначе
												
												//если взаимозачет формирует первое событие, то это не закрытие дебиторки, а образование аванса на новой аналитике, но нам он не нужен, первое событие сформирует первичная оплата
												СтрокаВторогоСобытия.СуммаПоставкиТребующаяРегистрацииНН = СтрокаВторогоСобытия.СуммаПоставкиТребующаяРегистрацииНН - РаспределеннаяСумма;
												
											КонецЕсли;
											
											ОсталосьРаспределить = ОсталосьРаспределить - РаспределеннаяСумма;
											
										КонецЕсли;
										
									КонецЕсли;
									
									Если ОсталосьРаспределить = 0 Тогда
										Прервать;
									КонецЕсли;
									
								КонецЦикла;
								
								ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН = ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН + (СуммаОперацииПоСтроке - ОсталосьРаспределить);
								
							КонецЕсли;
							
						КонецЦикла;
						
						//распределяем оплаты-вторые события на реализации-первые события
						Для каждого ТекущаяСтрока Из ТаблицаВторыхСобытий Цикл
							
							СуммаОперацииПоСтроке = - ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН;
							
							//возврат предоплаты будет первым событием с минусом
							Если СуммаОперацииПоСтроке > 0 Тогда
								
								//1. исходная строка датой расчетного документа - сторно 1 события оплаты по старой аналитике
								СтрокаДвижений = ТаблицаДвиженийЗачета.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаДвижений, ТекущаяСтрока);
								
								ОсталосьРаспределить = СуммаОперацииПоСтроке;
								
								Для каждого СтрокаПервогоСобытия Из ТаблицаПервыхСобытий Цикл
									
									//списание долга по отгрузке будет вторым событием
									//первого события (образование аванса) в таблице первых событий быть не должно, такую ситуацию не корректируем
									СуммаОперацииПервогоСобытия = СтрокаПервогоСобытия.СуммаПоставкиНеТребующаяРегистрацииНН;
									Если СуммаОперацииПервогоСобытия > 0 Тогда
										
										РаспределеннаяСумма = Мин(ОсталосьРаспределить, СуммаОперацииПервогоСобытия);
										
										Если РаспределеннаяСумма > 0 Тогда
											
											//2. второе событие оплаты по правильной аналитике
											СтрокаДвижений = ТаблицаДвиженийЗачета.Добавить();
											ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаПервогоСобытия);
											СтрокаДвижений.Период = ТекущаяСтрока.Период;
											СтрокаДвижений.СуммаПоставкиНеТребующаяРегистрацииНН = РаспределеннаяСумма;
											СтрокаДвижений.СуммаПоставкиТребующаяРегистрацииНН = 0;
											
											СтрокаПервогоСобытия.СуммаПоставкиНеТребующаяРегистрацииНН = СтрокаПервогоСобытия.СуммаПоставкиНеТребующаяРегистрацииНН - РаспределеннаяСумма;
											
											ОсталосьРаспределить = ОсталосьРаспределить - РаспределеннаяСумма;
											
										КонецЕсли;
										
									КонецЕсли;
									
									Если ОсталосьРаспределить = 0 Тогда
										Прервать;
									КонецЕсли;
									
								КонецЦикла;
								
								ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН = ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН + (СуммаОперацииПоСтроке - ОсталосьРаспределить);
								
							КонецЕсли;
							
						КонецЦикла;
						
						//если в таблицах событий остались ненулевые суммы, значит распределение прошло не до конца и его результаты использовать нельзя
						Если ТаблицаПервыхСобытий.НайтиСтроки(Новый Структура("СуммаПоставкиТребующаяРегистрацииНН, СуммаПоставкиНеТребующаяРегистрацииНН", 0, 0)).Количество() <> ТаблицаПервыхСобытий.Количество()
							ИЛИ ТаблицаВторыхСобытий.НайтиСтроки(Новый Структура("СуммаПоставкиТребующаяРегистрацииНН, СуммаПоставкиНеТребующаяРегистрацииНН", 0, 0)).Количество() <> ТаблицаВторыхСобытий.Количество() Тогда			
							
							ВыполненаКорректировкаДвиженийВзаимозачета = Ложь;
							
						КонецЕсли;
						
					ИначеЕсли МоментОпределенияБазы = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
						
						//"по оплате" - просто распределяем оплаты по отгрузкам, чтобы скорректировать документ поставки
						// оплаты остаются первыми событиями, по отгрузкам ничего корректировать не нужно
						ТаблицаДвиженийЗачета.Сортировать("Период");
						ТаблицаИсходныхДвижений = ТаблицаДвиженийЗачета;
						ТаблицаДвиженийЗачета = ТаблицаИсходныхДвижений.СкопироватьКолонки();
						
						Для каждого ТекущаяСтрока Из ТаблицаИсходныхДвижений Цикл
							
							СуммаОперацииПоСтроке = - ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН;
							
							//возврат предоплаты будет первым событием с минусом
							//ситуация, когда вместо возврата предоплаты образуется долг, корректировке не подлежит
							Если СуммаОперацииПоСтроке > 0 Тогда
								
								//1. исходная строка датой расчетного документа - сторно 1 события оплаты по старой аналитике
								СтрокаДвижений = ТаблицаДвиженийЗачета.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаДвижений, ТекущаяСтрока);
								
								ОсталосьРаспределить = СуммаОперацииПоСтроке;
								
								Для каждого СтрокаОтгрузки Из ТаблицаИсходныхДвижений Цикл
									
									//отгрузка будет первым событием с плюсом
									СуммаОтгрузки = СтрокаОтгрузки.СуммаПоставкиТребующаяРегистрацииНН;
									Если СуммаОтгрузки > 0 Тогда
										
										РаспределеннаяСумма = Мин(ОсталосьРаспределить, СуммаОтгрузки);
										
										Если РаспределеннаяСумма > 0 Тогда
											
											//2. первое событие оплаты по правильной аналитике
											СтрокаДвижений = ТаблицаДвиженийЗачета.Добавить();
											ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаОтгрузки);
											СтрокаДвижений.Период = ТекущаяСтрока.Период;
											СтрокаДвижений.СуммаПоставкиТребующаяРегистрацииНН = РаспределеннаяСумма;
											СтрокаДвижений.СуммаПоставкиНеТребующаяРегистрацииНН = 0;
											
											СтрокаОтгрузки.СуммаПоставкиТребующаяРегистрацииНН = СтрокаОтгрузки.СуммаПоставкиТребующаяРегистрацииНН - РаспределеннаяСумма;
											
											ОсталосьРаспределить = ОсталосьРаспределить - РаспределеннаяСумма;
											
										КонецЕсли;
										
									КонецЕсли;
									
									Если ОсталосьРаспределить = 0 Тогда
										Прервать;
									КонецЕсли;
									
								КонецЦикла;
								
								ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН = ТекущаяСтрока.СуммаПоставкиТребующаяРегистрацииНН + (СуммаОперацииПоСтроке - ОсталосьРаспределить);
								
							КонецЕсли;
							
						КонецЦикла;
						
						//если в таблицах событий остались ненулевые суммы, значит распределение прошло не до конца и его результаты использовать нельзя
						Если ТаблицаИсходныхДвижений.НайтиСтроки(Новый Структура("СуммаПоставкиТребующаяРегистрацииНН, СуммаПоставкиНеТребующаяРегистрацииНН", 0, 0)).Количество() <> ТаблицаИсходныхДвижений.Количество() Тогда			
							
							ВыполненаКорректировкаДвиженийВзаимозачета = Ложь;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыполненаКорректировкаДвиженийВзаимозачета Тогда
				
				Для каждого ИсходнаяСтрока Из МассивИсходныхДвиженийЗачета Цикл
					ДвиженияПоАналитике.Удалить(ИсходнаяСтрока);
				КонецЦикла;
				
				Для каждого ТекущаяСтрока Из ТаблицаДвиженийЗачета Цикл
					ЗаполнитьЗначенияСвойств(ДвиженияПоАналитике.Добавить(), ТекущаяСтрока);
				КонецЦикла;
				
			КонецЕсли;
			
			ДвиженияПоАналитике.Свернуть(ПоляСвертки, "СуммаПоставкиТребующаяРегистрацииНН, СуммаПоставкиНеТребующаяРегистрацииНН");
			Для каждого СтрокаДвижения из ДвиженияПоАналитике.НайтиСтроки(Новый Структура("СуммаПоставкиТребующаяРегистрацииНН, СуммаПоставкиНеТребующаяРегистрацииНН", 0, 0)) Цикл
				ДвиженияПоАналитике.Удалить(СтрокаДвижения);
			КонецЦикла;
			
			Для каждого СтрокаДвижения Из ДвиженияПоАналитике Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаДвижений.Добавить(), СтрокаДвижения);
			КонецЦикла;
			
		КонецЦикла;
		
		//ГТД, оформленная самостоятельно, не формирует НК, как и оплата "таможенный платеж"
		//ГТД, оформленная брокером, может сторнировать НК, образованный авансом брокеру с видом операции "оплата поставщику"
		//по документу поставки "таможенная декларация импорт" НК не возникают в любом случае
		//сочетания "ГТД самостоятельно" - "оплата поставщику" и "ГТД через брокера" - "таможенный платеж" являются некорректными и специально не обрабатываются
		Если ВыборкаПоРегистратору.ОформлениеГТДСамостоятельно Тогда
			//очищаем как движения по самой ГТД, так и потенциальные переносы аванса, поскольку по НК по оплате сторнировать не нужно, они подавляются в самом документе оплаты
			ТаблицаДвижений.Очистить();
		Иначе
			//очищаем движения по ГТД, оставляем переносы аванса, которые при корректировке движений взаимозачета были преобразованы в сторнирование первого события
			ДвиженияПоГТД = Новый Массив;
			Для каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
				Если ТипЗнч(СтрокаДвижения.ДокументПоставки) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
					ДвиженияПоГТД.Добавить(СтрокаДвижения);
				КонецЕсли;
			КонецЦикла;
			Для каждого СтрокаДвижения Из ДвиженияПоГТД Цикл
				ТаблицаДвижений.Удалить(СтрокаДвижения);
			КонецЦикла;
		КонецЕсли;
		
		ДвиженияПоПросроченномуВыкупуТары = Новый Массив;
		Для каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
			Если ТипЗнч(СтрокаДвижения.ДокументПоставки) = Тип("ДокументСсылка.ВыкупВозвратнойТарыУПоставщика") И НЕ СтрокаДвижения.ДокументПоставки.ВозвратТарыНеПросрочен Тогда
				ДвиженияПоПросроченномуВыкупуТары.Добавить(СтрокаДвижения);
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаДвижения Из ДвиженияПоПросроченномуВыкупуТары Цикл
			ТаблицаДвижений.Удалить(СтрокаДвижения);
		КонецЦикла;
		
		Если ВыборкаПоРегистратору.ЕстьСохраняемыеДвижения Тогда
			
			НайденныеСтроки = СохраняемыеДвижения.НайтиСтроки(Новый Структура("Регистратор", ВыборкаПоРегистратору.Регистратор));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаДвижений.Добавить(), НайденнаяСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		Движения.НДСРасчетНалоговогоКредита.Загрузить(ТаблицаДвижений);
		
		// Запишем наборы записей в базу.
		ЗаписатьНаборыЗаписей(Движения, Истина);
		
	КонецЦикла;

КонецПроцедуры // ВыполнитьПроведениеДокументовПоВозникшемуНДС

Функция ОпределитьГраницуАктуальностиФормированияНалоговыхДокументов(КонецРасчета, АналитикиКРасчету = Неопределено) Экспорт
	
	РасчетКВосстановлению = "РасчетыСПоставщиками";
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		ГраницаАктуальности = Неопределено;
	Иначе
		ГраницаАктуальности = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(КонецРасчета, АналитикиКРасчету, РасчетКВосстановлению);
	КонецЕсли;
	
	Если ГраницаАктуальности = Неопределено Тогда
		Возврат КонецДня(ТекущаяДата()) + 1;
	Иначе
		Возврат ГраницаАктуальности;
	КонецЕсли;
	
КонецФункции


// Возвращает суммы всех операций поставки по облагаемым НДС операциям и всем операциям за период.
// Данные будут получены из регистра Декларации по НДС (регистра накопления НДСРеестрВыданныхНалоговыхДокументов) 
// с учетом всех корректировок за указанный период.
//
// Параметры:
//	Организация                 - СправочникСсылка.Организации  - организация
//	НачПериода                  - Дата                          - начало периода
//	КонПериода                  - Дата                          - конец периода
//	СпецРежимНалогообложения    - Число                         - код спец. режима налогообложения
//
// Возвращаемое значение:
//	Структура - где:
//     * СуммаВсехОпераций          - Число - сумма всех операций поставки по всем операциям
//     * СуммаОблагаемыхОпераций    - Число - сумма всех операций поставки по облагаемым НДС операциям
//
Функция ПолучитьСуммыОблагаемыхПоставокПоНДС(Организация, НачПериода, КонПериода, СпецРежимНалогообложения = 0) Экспорт 

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачПериода",  НачПериода);
	Запрос.УстановитьПараметр("КонПериода",  КонПериода);
	
	МассивВсеОперации = Новый Массив();
	МассивОблагаемыеОперации = Новый Массив();
	
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20ПоставкаОФ);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Экспорт);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Другие);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОИзменениеСтоимости);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаНецелевоеИсп);
	// из неиспользуемых в 2011 году
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаСамостОшибки);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаПрочее);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОИмпортВексель);
	
	Для Каждого ОблОперация Из МассивОблагаемыеОперации Цикл
		МассивВсеОперации.Добавить(ОблОперация);
    КонецЦикла;
    
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОбъектНалог);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОУслугиВнеУкраины);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НООсвобожден);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировка_НеОбъект);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировка_УслугиВнеУкраины);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировка_НООсвобожден);
	
	Запрос.УстановитьПараметр("МассивВсеОперации", МассивВсеОперации);
	Запрос.УстановитьПараметр("МассивОблагаемыеОперации", МассивОблагаемыеОперации);
	
    Запрос.УстановитьПараметр("МассивОблагаемыхСтавок", УчетНДСУП.МассивОблагаемыхСтавок());
	
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", СпецРежимНалогообложения);
	
	УсловнаяПродажа = Новый Массив;
	УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа);
	УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов);
	//УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийПриложений2КНалоговойНакладной.УсловнаяПродажаВозврат);
	УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа);
	Запрос.УстановитьПараметр("УсловнаяПродажа", УсловнаяПродажа);
	
	Запрос.Текст = "
    |ВЫБРАТЬ
    |	ЕСТЬNULL(СУММА(НДСНалоговыеОбязательстваОбороты.СуммаБезНДСОборот), 0) КАК СуммаВсехОпераций,
    |	ЕСТЬNULL(СУММА(ВЫБОР
    |				КОГДА НДСНалоговыеОбязательстваОбороты.СтатьяДекларацииНДСНалоговыеОбязательства В (&МассивОблагаемыеОперации)
    |						И НДСНалоговыеОбязательстваОбороты.СтавкаНДС В (&МассивОблагаемыхСтавок)
    |					ТОГДА НДСНалоговыеОбязательстваОбороты.СуммаБезНДСОборот
    |				ИНАЧЕ 0
    |			КОНЕЦ), 0) КАК СуммаОблагаемыхОпераций
    |ИЗ
    |	РегистрНакопления.НДСРеестрВыданныхНалоговыхДокументов.Обороты(
    |			&НачПериода,
    |			&КонПериода,
    |			Регистратор,
    |			АналитикаУчетаПоПартнерам.Организация = &Организация
    |				И СтатьяДекларацииНДСНалоговыеОбязательства В (&МассивВсеОперации)) КАК НДСНалоговыеОбязательстваОбороты
    | ГДЕ 
    |	НЕ Регистратор.ВидОперации В (&УсловнаяПродажа) ИЛИ Период < ДатаВремя(2015,07,01)
    |	И ЕстьNULL(Регистратор.СпецРежимНалогообложения, 0) = &СпецРежимНалогообложения
    |";          
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПродажНДС = Новый Структура();
	СтруктураПродажНДС.Вставить("СуммаОблагаемыхОпераций", 0);
	СтруктураПродажНДС.Вставить("СуммаВсехОпераций", 0);
	
	Если Выборка.Следующий() Тогда
		
		СтруктураПродажНДС.СуммаОблагаемыхОпераций = Выборка.СуммаОблагаемыхОпераций;
		СтруктураПродажНДС.СуммаВсехОпераций 	   = Выборка.СуммаВсехОпераций;
	
	КонецЕсли;
	
    Возврат СтруктураПродажНДС;
	
КонецФункции
