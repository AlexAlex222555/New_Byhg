// Конвертация Магазин_Отправка от 03.01.2024 21:20:08
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Номенклатура_(ПравилаОбработкиДанных);
		ДобавитьПОД_ШтрихкодыНоменклатуры(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Номенклатура_
Процедура ДобавитьПОД_Номенклатура_(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Номенклатура_";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Номенклатура_Отправка");
КонецПроцедуры
#КонецОбласти
#Область ШтрихкодыНоменклатуры
Процедура ДобавитьПОД_ШтрихкодыНоменклатуры(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ШтрихкодыНоменклатуры";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ШтрихкодыНоменклатуры");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_ВидыНоменклатуры(ПравилаКонвертации);
		ДобавитьПКО_ГруппыНастроекФинансовогоУчетаНоменклат(ПравилаКонвертации);
		ДобавитьПКО_КлассификаторУКТВЭД(ПравилаКонвертации);
		ДобавитьПКО_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_НоменклатураГТД(ПравилаКонвертации);
		ДобавитьПКО_СтатьиНалоговыхДеклараций(ПравилаКонвертации);
		ДобавитьПКО_Упаковки(ПравилаКонвертации);
		ДобавитьПКО_ШтрихкодыНоменклатуры(ПравилаКонвертации);
	КонецЕсли;
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область Отправка
#Область ВидыНоменклатуры
Процедура ДобавитьПКО_ВидыНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ВидыНоменклатуры";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыНоменклатуры";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецСерий",                 "Ссылка");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьСерии",             "ИспользоватьСерии");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьСрокГодностиСерии", "ИспользоватьСрокГодностиСерии");
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",               "ТипНоменклатуры", , "ТипыНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "ЭтоГруппа",                     "");

КонецПроцедуры
#КонецОбласти
#Область ГруппыНастроекФинансовогоУчетаНоменклат
Процедура ДобавитьПКО_ГруппыНастроекФинансовогоУчетаНоменклат(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ГруппыНастроекФинансовогоУчетаНоменклат";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ГруппыФинансовогоУчетаНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ГруппыНастроекФинансовогоУчетаНоменклатуры";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",                 "Наименование");
	ДобавитьПКС(СвойстваШапки, "Описание",                     "Описание");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаВыручкиОтПродаж",     "СчетУчетаВыручкиОтПродаж");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаНаСкладе",            "СчетУчетаНаСкладе");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаПередачиНаКомиссию",  "СчетУчетаПередачиНаКомиссию");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаСебестоимостиПродаж", "СчетУчетаСебестоимостиПродаж");

КонецПроцедуры
#КонецОбласти
#Область КлассификаторУКТВЭД
Процедура ДобавитьПКО_КлассификаторУКТВЭД(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "КлассификаторУКТВЭД";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КлассификаторУКТВЭД;
	ПравилоКонвертации.ОбъектФормата     = "";
	

КонецПроцедуры
#КонецОбласти
#Область Номенклатура_Отправка
Процедура ДобавитьПКО_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",                        "Артикул");
	ДобавитьПКС(СвойстваШапки, "ВидНоменклатуры",                "ВидНоменклатуры", , "ВидыНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "ГруппаАналитическогоУчета",      "ГруппаАналитическогоУчета");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",               "ЕдиницаИзмерения");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмеренияСрокаГодности",  "ЕдиницаИзмеренияСрокаГодности");
	ДобавитьПКС(СвойстваШапки, "Код",                            "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Марка",                          "Марка");
	ДобавитьПКС(СвойстваШапки, "Наименование",                   "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",             "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НоменклатураМногооборотнаяТара", "Ссылка");
	ДобавитьПКС(СвойстваШапки, "Описание",                       "Описание");
	ДобавитьПКС(СвойстваШапки, "ПодакцизныйТовар",               "ПодакцизныйТовар");
	ДобавитьПКС(СвойстваШапки, "Производитель",                  "Производитель");
	ДобавитьПКС(СвойстваШапки, "Родитель",                       "Группа");
	ДобавитьПКС(СвойстваШапки, "СрокГодности",                   "СрокГодности");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                      "СтавкаНДС");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",                "ТипНоменклатуры", , "ТипыНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "ЦеноваяГруппа",                  "ЦеноваяГруппа");

КонецПроцедуры
#КонецОбласти
#Область НоменклатураГТД
Процедура ДобавитьПКО_НоменклатураГТД(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "НоменклатураГТД";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.НоменклатураГТД;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.НоменклатураГТД";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Номенклатура");
	ДобавитьПКС(СвойстваШапки, "КодУКТВЭД",    "КодУКТВЭД");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

КонецПроцедуры
#КонецОбласти
#Область СтатьиНалоговыхДеклараций
Процедура ДобавитьПКО_СтатьиНалоговыхДеклараций(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "СтатьиНалоговыхДеклараций";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтатьиНалоговыхДеклараций;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиНалоговыхДеклараций";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидНалоговойДекларации", "ВидНалоговойДекларации", , "ВидНалоговойДекларации");
	ДобавитьПКС(СвойстваШапки, "Код",                    "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",               "Ссылка");

КонецПроцедуры
#КонецОбласти
#Область Упаковки
Процедура ДобавитьПКО_Упаковки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Упаковки";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.УпаковкиЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Упаковки";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",         "Номенклатура");
	ДобавитьПКС(СвойстваШапки, "Высота",           "Высота");
	ДобавитьПКС(СвойстваШапки, "Глубина",          "Глубина");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения", "ЕдиницаИзмерения");
	ДобавитьПКС(СвойстваШапки, "Знаменатель",      "Коэффициент");
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Объем",            "Объем");
	ДобавитьПКС(СвойстваШапки, "Ширина",           "Ширина");

КонецПроцедуры
#КонецОбласти
#Область ШтрихкодыНоменклатуры
Процедура ДобавитьПКО_ШтрихкодыНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",   "");
	ДобавитьПКС(СвойстваШапки, "Номенклатура", "", , "Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Упаковка",     "", , "СправочникСсылка.УпаковкиЕдиницыИзмерения_Справочн");
	ДобавитьПКС(СвойстваШапки, "Штрихкод",     "Штрихкод");

КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВариантыОформленияДокументовПродажи.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВариантыОформленияДокументовПродажи";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыОформленияПродажи;
		ПравилоКонвертации.ТипXDTO   = "ВариантыОформленияДокументовПродажи";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг, "РеализацияТоваровУслуг");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидНалоговойДекларации.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидНалоговойДекларации";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыНалоговыхДеклараций;
		ПравилоКонвертации.ТипXDTO   = "ВидыНалоговыхДеклараций";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени, "ОтчетОбИспользованииРабочегоВремени");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ГрадацииКачества.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ГрадацииКачества";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ГрадацииКачества;
		ПравилоКонвертации.ТипXDTO   = "ГрадацииКачества";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ГрадацииКачества.НеГоден, "НеГоден");
		ЗначенияДляОтправки.Вставить(Перечисления.ГрадацииКачества.Новый, "Новый");
		ЗначенияДляОтправки.Вставить(Перечисления.ГрадацииКачества.ОграниченноГоден, "ОграниченноГоден");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// СтавкиНДС.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "СтавкиНДС";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
		ПравилоКонвертации.ТипXDTO   = "СтавкиНДС";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС14, "НДС14");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС20");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС7, "НДС7");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НеНДС, "НеНДС");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ТипыНоменклатуры.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ТипыНоменклатуры";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Товар, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Алгоритмы



#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
КонецПроцедуры

#КонецОбласти
