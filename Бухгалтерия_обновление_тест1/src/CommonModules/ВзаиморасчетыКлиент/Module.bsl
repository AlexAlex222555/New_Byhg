
#Область ПрограммныйИнтерфейс

#Область ОбщийПрограммныйИнтерфейс

//Сообщает о перезаполнении этапов оплаты.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 
Процедура ФормаПослеЗаписи(Форма) Экспорт
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	Если ДополненныеПараметрыМеханизма.ОповеститьОЗаполненииЭтапов Тогда
		ЭтапыОплатыКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ГрафикПлановойОплаты

// Открывает форму редактирования правил оплаты.
// 
// Параметры:
// 	Форма - см. ВзаиморасчетыСервер.ОписаниеФормыВзаиморасчеты
// 	Элемент - ПолеФормы - Гиперссылка открытия формы правил оплаты, связанная с конкретным набором параметров.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	Оповещение - ОписаниеОповещения - Описание оповещения формы, которое необходимо выполнить после окончания настройки.
//
Процедура НадписьЭтапыОплатыНажатие(Форма, Элемент, СтандартнаяОбработка, Оповещение = Неопределено) Экспорт
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СистемныеНастройки = ПараметрыМеханизма.СистемныеНастройки;
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, Элемент.Имя);
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
		ВзаиморасчетыКлиентСервер.ПроверитьОбязательныеПараметры(СтруктураПараметров, "ДатаПлатежа");
	КонецЕсли;
	
	ПорядокРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов);
	ЭтоЗаказ        = СтруктураПараметров.ЭтоЗаказ;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ТолькоПросмотр",                          Форма.ТолькоПросмотр ИЛИ СтруктураПараметров.ЭтапыОплатыТолькоПросмотр);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СуммаЗалогаЗаТаруФорма) Тогда
		СуммаЗалоговойТары = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаЗалогаЗаТаруФорма);
	Иначе
		СуммаЗалоговойТары = 0;
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("СуммаЗалогаПоДокументу",                  СуммаЗалоговойТары);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СуммаДокументаФорма) Тогда
		СуммаВсего = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокументаФорма);
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧ);
		СуммаВсего = ТЧ.Итог(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС);
	Иначе
		СуммаВсего = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокумента);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("СуммаОплатыПоДокументу",                  СуммаВсего - СуммаЗалоговойТары);	
	ПараметрыОткрытия.Вставить("ТребуетсяЗалогЗаТару",                    СуммаЗалоговойТары <> 0);
	
	ЭтапыОплаты = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	ЕстьСуммаОтклоненияМерныхТоваров = СистемныеНастройки.ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров
										И ЭтапыОплаты <> Неопределено
										И ЭтапыОплаты.Количество() > 0
										И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыОплаты[0],"СуммаОтклоненияМерныхТоваров");
	Если ЕстьСуммаОтклоненияМерныхТоваров Тогда
		СуммаОтклоненияМерныхТоваров = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты).Итог("СуммаОтклоненияМерныхТоваров");
	Иначе
		СуммаОтклоненияМерныхТоваров = 0;
	КонецЕсли;
	ПараметрыОткрытия.Вставить("СуммаОтклоненияПоДокументу",                 СуммаОтклоненияМерныхТоваров);
	
	//реквизиты формы
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор",                 Форма.УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("Ключ",                                    Форма.Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПараметрыВыбораРеквизитов",               СтруктураПараметров.ПараметрыВыбораРеквизитов);
	
	//реквизиты объекта
	ПараметрыОткрытия.Вставить("Партнер",                                 ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Партнер));
	ПараметрыОткрытия.Вставить("Соглашение",                              ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Соглашение));
	ПараметрыОткрытия.Вставить("Договор",                                 ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Договор));
	ПараметрыОткрытия.Вставить("Дата",                                    ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата));
	ПараметрыОткрытия.Вставить("Валюта",                                  ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента));
	ПараметрыОткрытия.Вставить("ФормаОплаты",                             ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ФормаОплаты));
	ПараметрыОткрытия.Вставить("Касса",                                   ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Касса));
	ПараметрыОткрытия.Вставить("БанковскийСчет",                          ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.БанковскийСчетОрганизации));
	ПараметрыОткрытия.Вставить("Организация",                             ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация));

	ПараметрыОткрытия.Вставить("ПорядокРасчетов",                         ПорядокРасчетов);
	ПараметрыОткрытия.Вставить("НаправлениеДеятельности",                 ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.НаправлениеДеятельности));
	ПараметрыОткрытия.Вставить("ОплатаВВалюте",                           ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ОплатаВВалюте));
	ПараметрыОткрытия.Вставить("ДатаПлатежа",                             ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаПлатежа));
	
	ПутьКДаннымВалютаВзаиморасчетов = ?(СтруктураПараметров.ВалютаВзаиморасчетов = "", СтруктураПараметров.ВалютаДокумента, СтруктураПараметров.ВалютаВзаиморасчетов);
	ПараметрыОткрытия.Вставить("ВалютаВзаиморасчетов",                    ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, ПутьКДаннымВалютаВзаиморасчетов));
	
	//настройки
	НакладнаяПоЗаказам = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.НакладнаяПоЗаказам,, Ложь);
	ПараметрыОткрытия.Вставить("НакладнаяПоЗаказам",                      НакладнаяПоЗаказам И ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"));
	
	ПараметрыОткрытия.Вставить("ЭтоЗаказ",                                ЭтоЗаказ);
	ПараметрыОткрытия.Вставить("ИмяПоляЗаказ",                            СтруктураПараметров.ИмяРеквизитаТЧЗаказ);
	
	Если СтруктураПараметров.ДокументРасчетовСКлиентами Тогда
		ПараметрыОткрытия.Вставить("ЖелаемаяДатаОтгрузки",                ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаОтсчетаГрафика));
		
		ПараметрыОткрытия.Вставить("УпрощенныйРежим",                     СтруктураПараметров.РасширенныйРежим И СистемныеНастройки.ИспользоватьУпрощеннуюСхемуОплатыВПродажах
																			ИЛИ СтруктураПараметров.ЗаданГрафикИсполнения
																			ИЛИ НЕ СтруктураПараметров.ВозможнаНакладнаяПоНесколькимЗаказам И СистемныеНастройки.ИспользоватьУпрощеннуюСхемуОплатыВПродажах И НЕ СтруктураПараметров.РасширенныйРежим
																			ИЛИ (НЕ НакладнаяПоЗаказам ИЛИ ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")) И НЕ СтруктураПараметров.РасширенныйРежим И СтруктураПараметров.ЭтоПродажаЗакупка И НЕ СтруктураПараметров.ЭтоЗаказ 
																			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.АдресЭтапыОплаты));
	ИначеЕсли СтруктураПараметров.ДокументРасчетовСПоставщиками Тогда
		ПараметрыОткрытия.Вставить("ЖелаемаяДатаПоступления",             ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаОтсчетаГрафика));
		ПараметрыОткрытия.Вставить("УпрощенныйРежим",                     СтруктураПараметров.РасширенныйРежим И СистемныеНастройки.ИспользоватьУпрощеннуюСхемуОплатыВЗакупках
																			ИЛИ СтруктураПараметров.ЗаданГрафикИсполнения
																			ИЛИ НЕ СтруктураПараметров.ВозможнаНакладнаяПоНесколькимЗаказам И СистемныеНастройки.ИспользоватьУпрощеннуюСхемуОплатыВЗакупках И НЕ СтруктураПараметров.РасширенныйРежим
																			ИЛИ (НЕ НакладнаяПоЗаказам ИЛИ ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")) И НЕ СтруктураПараметров.РасширенныйРежим И СтруктураПараметров.ЭтоПродажаЗакупка  И НЕ СтруктураПараметров.ЭтоЗаказ 
																			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.АдресЭтапыОплаты));
		ПараметрыОткрытия.Вставить("ОтключитьЗаполнениеПоПредыдущимЗаказам", ТипЗнч(Форма.Объект.Ссылка) <> Тип("ДокументСсылка.ЗаказПоставщику"));
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("РежимСамообслуживания",                   ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь());
	ПараметрыОткрытия.Вставить("РежимРеализации",                         ПараметрыОткрытия.УпрощенныйРежим И СтруктураПараметров.ВозможнаПредоплатаПоНакладной И НЕ НакладнаяПоЗаказам И НЕ ЭтоЗаказ);
	ПараметрыОткрытия.Вставить("РасширенныйРежим",                        СтруктураПараметров.РасширенныйРежим);
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище",               СтруктураПараметров.АдресЭтапыОплаты);
	ПараметрыОткрытия.Вставить("АдресСуммПоЗаказам",                      СтруктураПараметров.АдресСуммПоЗаказам);
	ПараметрыОткрытия.Вставить("ЭтоКорректировка",                        ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаПриобретения")
		ИЛИ ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
	ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Оповещение);
	ДополнительныеПараметры.Вставить("ПараметрыМеханизма", ПараметрыМеханизма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СтруктураПараметров.ДокументРасчетовСКлиентами Тогда
		ОткрытьФорму("ОбщаяФорма.ЭтапыОплатыКлиентом", 
			ПараметрыОткрытия,
			Форма,,,,
			ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ЭтапыОплатыПоставщику", 
			ПараметрыОткрытия,
			Форма,,,,
			ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

// Служебный обработчик закрытия формы правил оплаты.
Процедура НадписьЭтапыОплатыНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Форма               = ДополнительныеПараметры.Форма;
	СтруктураПараметров = ДополнительныеПараметры.СтруктураПараметров;
	ПараметрыМеханизма  = ДополнительныеПараметры.ПараметрыМеханизма;
	СистемныеНастройки  = ПараметрыМеханизма.СистемныеНастройки;
	
	ЭтапыОплаты    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	СуммаДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокументаФорма);
	ДатаПлатежа    = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ДатаПлатежа);
	
	//Реквизиты шапки
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Касса");
	МассивПолей.Добавить("БанковскийСчетОрганизации");
	МассивПолей.Добавить("ОплатаВВалюте");
	МассивПолей.Добавить("ФормаОплаты");
	МассивПолей.Добавить("ПорядокРасчетов");
	МассивПолей.Добавить("ДатаПлатежа");
	СтарыеЗначенияИзмененныхРеквизитов = ПрисвоитьНовыеЗначения(Форма, СтруктураПараметров, РезультатЗакрытия, МассивПолей);
	
	//Этапы оплаты или дата платежа
	Если ЭтапыОплаты <> Неопределено Тогда
		Если РезультатЗакрытия.Свойство("АдресВоВременномХранилище") Тогда
			СтруктураПараметров.АдресЭтапыОплаты = РезультатЗакрытия.АдресВоВременномХранилище;
		ИначеЕсли РезультатЗакрытия.Свойство("ДатаПлатежа") Тогда
			НовСтр = ЭтапыОплаты.Добавить();
			НовСтр.ДатаПлатежа    = РезультатЗакрытия.ДатаПлатежа;
			НовСтр.СуммаПлатежа   = СуммаДокумента;
			НовСтр.ПроцентПлатежа = 100;
		КонецЕсли;
		ИмяТЧ = Прав(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты, СтрДлина(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) - Найти(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты,"."));
		СтарыеЗначенияИзмененныхРеквизитов.Вставить(ИмяТЧ, Неопределено);
	Иначе
		РеквизитДатаПлатежа = ДатаПлатежа;
		РеквизитДатаПлатежа.Данные[РеквизитДатаПлатежа.Имя] = РезультатЗакрытия.ДатаПлатежа;
	КонецЕсли;
	
	//Стандартный возврат в форму
	РезультатыОбработки = Новый Структура();
	РезультатыОбработки.Вставить("СтарыеЗначенияИзмененныхРеквизитов", СтарыеЗначенияИзмененныхРеквизитов);
	
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиЭтапыОплаты(Форма, СтруктураПараметров, СистемныеНастройки);
	ВзаиморасчетыКлиентСервер.УстановитьВидимостьЗачетаОплаты(Форма, СтруктураПараметров);
	
	Форма.Модифицированность = Истина;
	
	ОбщегоНазначенияУТКлиент.СохранитьДанныеМеханизмаВКэшФормы(Форма, "Взаиморасчеты", ПараметрыМеханизма);
	
	Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения, РезультатыОбработки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗачетОплатыРасшифровкаПлатежа

// Открывает форму подбора объектов расчетов в табличную часть Расшифровка платежа платежных документов.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа.
// 	ИмяЭлемента - Строка - Имя элемента, по нажатию на который вызван подбор.
// 	Оповещение - ОписаниеОповещения - Описание оповещения формы, которое необходимо выполнить после закрытия формы редактирования расшифровки.
// 	ДополнительныеОтборы - Соответствие - Ключ - имя реквизита справочника Объекты расчетов, Значение - правое значение отбора.
//
Процедура ПодборВРасшифровкуПлатежа(Форма, ИмяЭлемента, Оповещение = Неопределено, ДополнительныеОтборы = Неопределено) Экспорт 
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, ИмяЭлемента);
	
	ПартнерПрочиеОтношения = СтруктураПараметров.ПартнерПрочиеОтношения;
	ПодборДебиторскойЗадолженности = СтруктураПараметров.ПодборДебиторскойЗадолженности;
	ПодборТолькоБезусловнойЗадолженности = СтруктураПараметров.ПодборТолькоБезусловнойЗадолженности;
	
	Контрагент           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Контрагент);
	Ссылка               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка);
	Организация          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация);
	Валюта               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента);
	СуммаДокумента       = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокумента);
	Дата                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата);
	ТипРасчетов          = СтруктураПараметров.ТипРасчетов;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбъектСсылка",                          Ссылка);
	ПараметрыОткрытия.Вставить("АдресПлатежейВХранилище",               СтруктураПараметров.АдресРасшифровкаПлатежа);
	ПараметрыОткрытия.Вставить("Организация",                           Организация);
	ПараметрыОткрытия.Вставить("Контрагент",                            Контрагент);
	ПараметрыОткрытия.Вставить("ВалютаДокумента",                       Валюта);
	ПараметрыОткрытия.Вставить("СуммаДокумента",                        СуммаДокумента);
	ПараметрыОткрытия.Вставить("ДатаДокумента",                         Дата);
	ПараметрыОткрытия.Вставить("ТипРасчетов",                           ТипРасчетов);
	ПараметрыОткрытия.Вставить("ПартнерПрочиеОтношения",                ПартнерПрочиеОтношения);
	ПараметрыОткрытия.Вставить("ПодборДебиторскойЗадолженности",        ПодборДебиторскойЗадолженности);
	ПараметрыОткрытия.Вставить("ПодборТолькоБезусловнойЗадолженности",  ПодборТолькоБезусловнойЗадолженности);
	ПараметрыОткрытия.Вставить("ДополнительныеОтборы",                  ДополнительныеОтборы);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
	ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Оповещение);
	ДополнительныеПараметры.Вставить("ПараметрыМеханизма", ПараметрыМеханизма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодборВРасшифровкуПлатежаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Справочник.ОбъектыРасчетов.Форма.ПодборОбъектовРасчетов",
		ПараметрыОткрытия, 
		Форма,,,,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Служебный обработчик закрытия формы правил оплаты.
Процедура ПодборВРасшифровкуПлатежаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Форма               = ДополнительныеПараметры.Форма;
	СтруктураПараметров = ДополнительныеПараметры.СтруктураПараметров;
	ПараметрыМеханизма  = ДополнительныеПараметры.ПараметрыМеханизма;
	
	//Этапы оплаты или дата платежа
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		Если РезультатЗакрытия.Свойство("АдресПлатежейВХранилище") Тогда
			СтруктураПараметров.АдресРасшифровкаПлатежа = РезультатЗакрытия.АдресПлатежейВХранилище;
		КонецЕсли;
	КонецЕсли;
	
	//Стандартный возврат в форму
	РезультатыОбработки = Новый Структура();
	РезультатыОбработки.Вставить("Выполнена", Истина);
	
	Форма.Модифицированность = Истина;
	
	ОбщегоНазначенияУТКлиент.СохранитьДанныеМеханизмаВКэшФормы(Форма, "Взаиморасчеты", ПараметрыМеханизма);
	
	Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения, РезультатыОбработки);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму выбора объекта расчетов по переданным отборам и настройкам.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа.
// 	Элемент - ПолеНадписи - Поле, в котором выбирается объект расчетов или основание платежа.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	ВыборОснованияПлатежа - Булево - Истина если выбирается Основание платежа, Ложь - если объект расчетов.
//
Процедура ОбъектРасчетовНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, ВыборОснованияПлатежа = ЛОЖЬ) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыМеханизма  = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СтруктураПараметров = ПараметрыМеханизма.МассивПараметров[0]; // см. ВзаиморасчетыСервер.ПараметрыМеханизма
	
	Ссылка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка);
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИдентификаторСтроки = Неопределено;
	Если ТаблицаФормы <> Неопределено Тогда 
		ИдентификаторСтроки = ТаблицаФормы.ТекущаяСтрока;
	КонецЕсли;
	
	Контрагент                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Контрагент, ИдентификаторСтроки);
	Организация               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация, ИдентификаторСтроки);
	
	Валюта                    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента);
	ТипРасчетов               = СтруктураПараметров.ТипРасчетов;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.РасшифровкаПлатежа) Тогда
		ЭлементРасшифровкаПлатежа = Форма.Элементы[СтруктураПараметров.ЭлементыФормы.РасшифровкаПлатежа];
		Сумма = ЭлементРасшифровкаПлатежа.ТекущиеДанные.Сумма;
	Иначе
		Сумма = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокумента);
	КонецЕсли;
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("ТипРасчетов", ТипРасчетов);
	ЗначенияОтбора.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЗначенияОтбора.Вставить("Контрагент",  Контрагент);
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		ЗначенияОтбора.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"));
	КонецЕсли;
	
	НастройкиВыбора = Новый Структура;
	НастройкиВыбора.Вставить("УчитыватьФилиалы", Истина);
	НастройкиВыбора.Вставить("ВыборОснованияПлатежа", ВыборОснованияПлатежа);
	НастройкиВыбора.Вставить("РедактируемыйДокумент", Ссылка);
	НастройкиВыбора.Вставить("Валюта", Валюта);
	НастройкиВыбора.Вставить("Сумма", Сумма);
	НастройкиВыбора.Вставить("Отбор", ЗначенияОтбора);
	НастройкиВыбора.Вставить("ВернутьСтруктуру", Истина);
	
	ОткрытьФорму("Справочник.ОбъектыРасчетов.Форма.ФормаВыбора", НастройкиВыбора, Элемент);
	
КонецПроцедуры

// Открывает форму редактирования расшифровки платежа документа возврата.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа.
// 	Элемент - ПолеФормы - Гиперссылка редактирования расшифровки платежа.
// 	Оповещение - ОписаниеОповещения - Описание оповещения формы, которое необходимо выполнить после закрытия формы редактирования расшифровки.
//
Процедура ВзаиморасчетыПоВозвратуТоваров(Форма, Элемент, Оповещение = Неопределено ) Экспорт
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, Элемент.Имя);
	
	Валюта               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента);
	Дата                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата);
	Контрагент           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Контрагент);
	Организация          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация);
	Партнер              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Партнер);
	Проведен             = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, "Объект.Проведен");
	СуммаДокументаФорма  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокументаФорма);
	Ссылка               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка);
	ЭтоРасчетыСКлиентами = СтруктураПараметров.ДокументРасчетовСКлиентами;
	ПартнерПрочиеОтношения = СтруктураПараметров.ПартнерПрочиеОтношения;
	ПодборТолькоБезусловнойЗадолженности = СтруктураПараметров.ПодборТолькоБезусловнойЗадолженности;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Валюта", Валюта);
	СтруктураОткрытия.Вставить("Дата", Дата);
	СтруктураОткрытия.Вставить("Контрагент", Контрагент);
	СтруктураОткрытия.Вставить("Организация", Организация);
	СтруктураОткрытия.Вставить("Партнер", Партнер);
	СтруктураОткрытия.Вставить("Проведен", Проведен);
	СтруктураОткрытия.Вставить("СуммаТоваров", СуммаДокументаФорма);
	СтруктураОткрытия.Вставить("ИдентификаторВызывающейФормы", Форма.УникальныйИдентификатор);
	СтруктураОткрытия.Вставить("Документ", Ссылка);
	СтруктураОткрытия.Вставить("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	СтруктураОткрытия.Вставить("АдресПлатежейВХранилище", СтруктураПараметров.АдресРасшифровкаПлатежа);
	СтруктураОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	СтруктураОткрытия.Вставить("Объект", Форма.Объект);
	СтруктураОткрытия.Вставить("ПодборТолькоБезусловнойЗадолженности", ПодборТолькоБезусловнойЗадолженности);
	СтруктураОткрытия.Вставить("ПартнерПрочиеОтношения", ПартнерПрочиеОтношения);
	СтруктураОткрытия.Вставить("ИмяВызывающегоЭлемента", Элемент.Имя);
	
	ОткрытьФорму("ОбщаяФорма.ВзаиморасчетыПоВозвратуТоваров",
		СтруктураОткрытия, 
		Форма,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму редактирования расшифровки платежа по упр. организации.
// 
// Параметры:
// 	Форма - УправляемаяФорма - Форма документа.
// 	Элемент - ПолеФормы - Элемент для определения набора параметров из массива параметров.
// 	Оповещение - ОписаниеОповещения - Описание оповещения формы, которое необходимо выполнить после закрытия формы редактирования расшифровки.
//
Процедура ВзаиморасчетыПоУпрОрганизации(Форма, Элемент, Оповещение = Неопределено ) Экспорт
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, Элемент.Имя); // см. ВзаиморасчетыСервер.ПараметрыМеханизма
	
	Партнер              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Партнер);
	Контрагент           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Контрагент);
	Валюта               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента);
	Ссылка               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка);
	СуммаДокументаФорма  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокументаФорма);
	ЭтоРасчетыСКлиентами = СтруктураПараметров.ДокументРасчетовСКлиентами;
	
	СтруктураПараметры = Новый Структура();
	СтруктураПараметры.Вставить("АдресПлатежейВХранилище", СтруктураПараметров.АдресПлатежейВХранилище);
	СтруктураПараметры.Вставить("Партнер", Партнер);
	СтруктураПараметры.Вставить("Контрагент", Контрагент);
	СтруктураПараметры.Вставить("Валюта", Валюта);
	СтруктураПараметры.Вставить("Документ", Ссылка);
	СтруктураПараметры.Вставить("СуммаВсего",СуммаДокументаФорма);
	СтруктураПараметры.Вставить("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	
	ОткрытьФорму(
		"ОбщаяФорма.РедактированиеВзаиморасчетов",
		СтруктураПараметры,
		Форма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму редактирования расшифровки платежа по упр. организации.
// 
// Параметры:
// 	Форма - УправляемаяФорма - Форма документа.
// 	Элемент - ЭлементыФормы - Элемент для определения набора параметров из массива параметров.
//
Процедура ЗачетОплаты(Форма, Элемент = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	Обработчик = Новый ОписаниеОповещения("ЗачетОплатыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Форма.Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Данные модифицированы.
|Зачет оплат доступен только после записи данных.
|Данные будут записаны.'
|;uk='Дані модифіковані. 
|Залік оплат доступний тільки після запису даних. 
|Дані будуть записані.'");
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Проведен")
		И НЕ Форма.Объект.Проведен Тогда
		ТекстВопроса = НСтр("ru='Документ не проведен.
|Зачет оплат доступен только после проведения документа.
|Документ будет проведен.'
|;uk='Документ не проведений. 
|Залік оплат доступний тільки після проведення документа. 
|Документ буде проведено.'");
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, КодВозвратаДиалога.Пропустить);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВалютыИКурсДокумента

// Открывает форму редактирования валют и курса взаиморасчетов документа.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки.
// 	Элемент - Декорация - Гиперссылка открытия формы правил оплаты, связанная с конкретным набором параметров.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	Оповещение - ОписаниеОповещения - Описание оповещения, которое необходимо выполнить после окончания настройки.
//
Процедура ВалютыИКурсДокументаНажатие(Форма, Элемент, СтандартнаяОбработка, Оповещение = Неопределено) Экспорт
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыМеханизма  = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СистемныеНастройки  = ПараметрыМеханизма.СистемныеНастройки;
	СтруктураПараметров = ПараметрыМеханизма.МассивПараметров[0]; //Курс и кратность всегда одни на документ.
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СуммаДокументаФорма) Тогда
		СуммаДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокументаФорма);
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		СуммаДокумента = ТЧ.Итог(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС);
	Иначе
		СуммаДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокумента,,0);
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ВалютаДокумента",      ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента));
	ПараметрыОткрытия.Вставить("ВалютаВзаиморасчетов", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаВзаиморасчетов));
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		ПараметрыОткрытия.Вставить("СуммаВзаиморасчетов", ТЧ.Итог("СуммаВзаиморасчетов"));
	Иначе
		ПараметрыОткрытия.Вставить("СуммаВзаиморасчетов",  ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаВзаиморасчетов));
	КонецЕсли;
	ПараметрыОткрытия.Вставить("СуммаДокумента",       СуммаДокумента);
	ПараметрыОткрытия.Вставить("Курс",                 ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Курс));
	ПараметрыОткрытия.Вставить("Кратность",            ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Кратность));
	ПараметрыОткрытия.Вставить("ДатаДокумента",        ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата));
	
	ПараметрыОткрытия.Вставить("ЭтоДокументПродажи",                 СтруктураПараметров.ДокументРасчетовСКлиентами);
	ПараметрыОткрытия.Вставить("ЭтоДокументЗакупки",                 СтруктураПараметров.ДокументРасчетовСПоставщиками);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр",                     Форма.ТолькоПросмотр ИЛИ СтруктураПараметров.ВалютыИКурсДокументаТолькоПросмотр);
	ПараметрыОткрытия.Вставить("ВалютаДокументаТолькоПросмотр",      СтруктураПараметров.ВалютаДокументаТолькоПросмотр);
	ПараметрыОткрытия.Вставить("ВалютаВзаиморасчетовТолькоПросмотр", СтруктураПараметров.ВалютаВзаиморасчетовТолькоПросмотр);
	ПараметрыОткрытия.Вставить("НеПоказыватьРасчеты",                СтруктураПараметров.НеПоказыватьРасчеты);
	ПараметрыОткрытия.Вставить("НеПересчитыватьСуммуДокумента",      СтруктураПараметров.НеПересчитыватьСуммуДокумента);
    
    Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
        Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация);
    Иначе
        Организация = Неопределено;
    КонецЕсли;    
    Если ЗначениеЗаполнено(СтруктураПараметров.Контрагент) Тогда
        Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Контрагент);
    Иначе
        Контрагент = Неопределено;
    КонецЕсли;    
    РазрешеныРазличныеВалюты = ВзаиморасчетыВызовСервера.РазрешеныРазличныеВалюты(Организация, Контрагент);
    ПараметрыОткрытия.Вставить("РазрешеныРазличныеВалюты", РазрешеныРазличныеВалюты);
	
	//валюта документа только просмотр переносим в форму, т.к. там серверный вызов
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
	ДополнительныеПараметры.Вставить("СистемныеНастройки", СистемныеНастройки);
	ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Оповещение);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВалютыИКурсДокументаНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВалютыИКурсДокумента", ПараметрыОткрытия, Форма,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Обработчик завершения редактирования курса и валют документа.
// 
Процедура ВалютыИКурсДокументаНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено ИЛИ РезультатЗакрытия = КодВозвратаДиалога.Отмена Тогда 
		Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Форма               = ДополнительныеПараметры.Форма;
	СтруктураПараметров = ДополнительныеПараметры.СтруктураПараметров;
	
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("ВалютаДокумента");
	МассивПолей.Добавить("ВалютаВзаиморасчетов");
	МассивПолей.Добавить("СуммаВзаиморасчетов");
	МассивПолей.Добавить("Курс");
	МассивПолей.Добавить("Кратность");
	
	РезультатЗакрытия.Вставить("ВалютаДокумента",РезультатЗакрытия.Валюта);
	
	СтарыеЗначенияИзмененныхРеквизитов = ПрисвоитьНовыеЗначения(Форма, СтруктураПараметров, РезультатЗакрытия, МассивПолей);
	
	Если СтарыеЗначенияИзмененныхРеквизитов.Количество() > 0 Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	РезультатыОбработки = Новый Структура();
	РезультатыОбработки.Вставить("СтарыеЗначенияИзмененныхРеквизитов", СтарыеЗначенияИзмененныхРеквизитов);
	РезультатыОбработки.Вставить("НеобходимПересчетСуммДокумента", РезультатЗакрытия.НеобходимПересчетСуммДокумента);
	
	Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения, РезультатыОбработки);
	КонецЕсли;
	
КонецПроцедуры


Процедура КонтрольВалют(Форма, Оповещение) Экспорт
    
    Если НЕ Форма.Объект.Валюта = Форма.Объект.ВалютаВзаиморасчетов Тогда
    	Форма.Объект.Валюта = Форма.Объект.ВалютаВзаиморасчетов;
        Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Форма.Объект, Форма.ВалютаДокумента) Тогда
    		ТекстСообщения = НСтр("ru='Пересчитать суммы в документе в валюту ""%Валюта%""?';uk='Перерахувати суми в документі в валюту ""%Валюта%""?'");
    		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", Форма.Объект.Валюта);
    		ДополнительныеПараметры = Новый Структура;
            ДополнительныеПараметры.Вставить("Форма", Форма);
            ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Оповещение);
    		Оповещение = Новый ОписаниеОповещения("ПересчитатьСуммыПриИзмененииВалюты", ЭтотОбъект, ДополнительныеПараметры);
    		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
        КонецЕсли;    
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыПриИзмененииВалюты(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
    
    Форма = ДополнительныеПараметры.Форма;
    РезультатыОбработки = Новый Структура();
    РезультатыОбработки.Вставить("НеобходимПересчетСуммДокумента", Ложь);
    Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		РезультатыОбработки.Вставить("НеобходимПересчетСуммДокумента", Истина);
    КонецЕсли;
    Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
        ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения, РезультатыОбработки);
    КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОграниченияЗадолженности

// Открывает форму отчета о причинах ограничения отгрузки.
// 
// Параметры:
// 	Форма - см. ВзаиморасчетыСервер.ОписаниеФормыВзаиморасчеты
// 	Элемент - ПолеФормы - Гиперссылка, по которой отрывается отчет.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
//
Процедура ОграниченияЗадолженностиНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыМеханизма  = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СистемныеНастройки  = ПараметрыМеханизма.СистемныеНастройки;
	СтруктураПараметров = ПараметрыМеханизма.МассивПараметров[0]; //Курс и кратность всегда одни на документ.
	
	ВзаиморасчетыКлиентСервер.ПроверитьОбязательныеПараметры(СтруктураПараметров,
		"Дата, ВалютаДокумента, Договор, СуммаДокумента");
	
	Дата                    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата);
	Договор                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Договор);
	ВалютаДокумента         = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента);
	СуммаДокумента          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокумента);
	
	ПутьКВалютеВзаиморасчетов = ?(СтруктураПараметров.ВалютаВзаиморасчетов="", СтруктураПараметров.ВалютаДокумента, СтруктураПараметров.ВалютаВзаиморасчетов);
	ВалютаВзаиморасчетов    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, ПутьКВалютеВзаиморасчетов);
	
	ПутьКСуммеВзаиморасчетов = ?(СтруктураПараметров.СуммаВзаиморасчетов="", СтруктураПараметров.СуммаДокумента, СтруктураПараметров.СуммаВзаиморасчетов);
	СуммаВзаиморасчетов     = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, ПутьКСуммеВзаиморасчетов);
	
	НазначениеИспользования = Форма.Объект.Ссылка;
	
	ДанныеПоСуммеПродажи = Новый Структура();
	ДанныеПоСуммеПродажи.Вставить("Дата", Дата); 
	ДанныеПоСуммеПродажи.Вставить("Валюта", ВалютаДокумента);
	ДанныеПоСуммеПродажи.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	ДанныеПоСуммеПродажи.Вставить("СуммаДокумента", СуммаДокумента);
	
	Если ВалютаДокумента = ВалютаВзаиморасчетов Тогда
		ДанныеПоСуммеПродажи.Вставить("СуммаВзаиморасчетов", СуммаДокумента);
	Иначе //ПутьКДаннымТЧ
		ДанныеПоСуммеПродажи.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
	КонецЕсли;
	
	ПродажиКлиент.ОткрытьОтчетРасшифровкиЗапретаОтгрузки(Договор, ДанныеПоСуммеПродажи, НазначениеИспользования, СистемныеНастройки.НоваяАрхитектураВзаиморасчетов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрисвоитьНовыеЗначения(Объект, СтруктураПараметров, СтруктураНовыхЗначений, МассивПолей) 
	
	СтарыеЗначенияИзмененныхРеквизитов = Новый Структура;
	
	Для Каждого Поле Из МассивПолей Цикл
		Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров[Поле]);
		Если Реквизит <> Неопределено И Реквизит.Данные[Реквизит.Имя] <> СтруктураНовыхЗначений[Поле] Тогда
			СтарыеЗначенияИзмененныхРеквизитов.Вставить(Реквизит.Имя, Реквизит.Данные[Реквизит.Имя]);
			Реквизит.Данные[Реквизит.Имя] = СтруктураНовыхЗначений[Поле];
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтарыеЗначенияИзмененныхРеквизитов;
	
КонецФункции

// Параметры:
// 	Ответ - КодВозвратаДиалога -
// 	ДополнительныеПараметры - Структура - :
// 	 * Форма - РасширениеУправляемойФормыДляОбъектов
// 	 * Элемент - ПолеФормы - Элемент, которым вызван зачет оплаты.
Процедура ЗачетОплатыЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	Отказ = Ложь;
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ОчиститьСообщения();
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Проведен")
			И НЕ Форма.Объект.Проведен Тогда
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			Отказ = НЕ Форма.Записать(ПараметрыЗаписи);
		Иначе
			Отказ = НЕ Форма.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Отмена ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМеханизма  = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	Если Элемент = Неопределено Тогда
		СтруктураПараметров = ПараметрыМеханизма.МассивПараметров[0]; // см. ВзаиморасчетыСервер.ПараметрыМеханизма
	Иначе
		СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, Элемент.Имя);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектРасчетов, Организация, ТипРасчетов");
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		ПараметрыФормы.Вставить("ИмяТЧРасшифровкаПлатежа", СтрРазделить(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа,".")[1]);
	КонецЕсли;
	ПараметрыФормы.Вставить("АдресРасшифровкаПлатежа", СтруктураПараметров.АдресРасшифровкаПлатежа);
	
	Если СтруктураПараметров.ЭтоДоговор Тогда
		ПараметрыФормы.ОбъектРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка);
		ПараметрыФормы.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация);
		ПараметрыФормы.ТипРасчетов = СтруктураПараметров.ТипРасчетов;
	Иначе
		ПараметрыФормы.ОбъектРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ОбъектРасчетов);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПомощникЗачетаОплат.Форма", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти
