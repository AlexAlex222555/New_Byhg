////////////////////////////////////////////////////////////////////////////////
// Подсистема "Коммерческие предложения документы".
// ОбщийМодуль.КоммерческиеПредложенияДокументы
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс


// Включает функциональные опции для всех встроенных документов подсистемы КоммерческиеПредложенияДокументы.
//
// Параметры:
//   Параметры - Структура - статус обработки обновления - содержит поля:
//    * ПрогрессВыполнения - Структура - прогресс обработки обновления - содержит поля:
//       ** ОбработаноОбъектов - Число - количество обработанных объектов.
//       ** ВсегоОбъектов - Число - количество объектов к обработке.
//    * ОбработкаЗавершена - Булево - Признак того, что обработка обновления завершена
//
Процедура УстановитьИспользованиеКоммерческихПредложений(Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		ПрогрессВыполнения = Новый Структура("ОбработаноОбъектов, ВсегоОбъектов");
		Параметры = Новый Структура();
		Параметры.Вставить("ПрогрессВыполнения", ПрогрессВыполнения);
		Параметры.Вставить("ОбработкаЗавершена");
	КонецЕсли;	
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0;
	ПроблемныхОбъектов   = 0;
	ОбработанныхОбъектов = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = НСтр("ru='Не удалось обработать все константы подсистемы коммерческих предложений.';uk='Не вдалося обробити всі константи підсистеми комерційних пропозицій.'");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = НСтр("ru='Обработаны все константы подсистемы коммерческие предложения.';uk='Опрацьовано всі константи підсистеми комерційні пропозиції.'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
			ТекстСообщения);
	КонецЕсли;

	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов = Параметры.ПрогрессВыполнения.ВсегоОбъектов);
	
КонецПроцедуры

// Предназначена для формирования настроек учета в прикладной конфигурации
//
// Возвращаемое значение:
//  Структура - содержит поля:
//  * ИспользуетсяЕдинственнаяОрганизация                  - Булево - признак того, что в конфигурации используется только одна организация.
//  * ЕдинственнаяОрганизация                              - ОпределяемыйТип.Организация - значение единственной организации в ИБ.
//  * ИспользуетсяЕдинственнаяВалюта                       - Булево - признак того, что в конфигурации используется только одна валюта.
//  * ЕдинственнаяВалюта                                   - СправочникСсылка.Валюты - значение единственной валюты в ИБ.
//  * ИспользуютсяПартнеры                                 - Булево - признак того, что используются партнеры.
//  * НезависимоеВедениеПартнеровИКонтрагентов             - Булево - признак того, что независимо ведутся партнеры и контрагенты.
//  * ИспользуютсяХарактеристикиНоменклатуры               - Булево - признак того, что используются характеристики номенклатуры.
//  * ВидКонтактнойИнформацииEmailМенеджера                - СправочникСсылка.ВидыКонтактнойИнформации - для определения электронной почты менеджера как контактного лица.
//  * ВидКонтактнойИнформацииТелефонМенеджера              - СправочникСсылка.ВидыКонтактнойИнформации - для определения телефона менеджера как контактного лица.
//  * ИспользуютсяВидыЦен                                  - Булево - признак того, что используются виды цен.
//  * ИспользуютсяРучныеСкидкиВПродажах                    - Булево - признак того, что используются ручные скидки в продажах.
//  * ИспользуютсяАвтоматическиеСкидкиВПродажах            - Булево - признак того, что используются автоматические скидки в продажах.
//  * ИспользуютсяНазначаемыеАвтоматическиеСкидкиВПродажах - Булево - признак того, что используются назначаемые автоматические скидки в продажах.
//  * РеализованаФормаПросмотраСкидок                      - Булево - признак того, что возможен вызов формы просмотра скидок.
//  * РеализованоЗаполнениеЦенПоУсловиямПродаж             - Булево - признак того, что реализовано заполнение цен по условиям продаж.
//  * РеализованоЗаполнениеЦенПоВидамЦен                   - Булево - признак того, что реализовано заполнение цен по видам цен.
//  * РеализованоЗаполнениеУсловийОплаты                   - Булево - признак того, что реализовано заполнение условий оплаты.
//  * РеализованоЗаполнениеУсловийДоставки                 - Булево - признак того, что реализовано заполнение условий доставки.
//  * РеализованПодборНоменклатуры                         - Булево - признак того, что реализован подбор номенклатуры.
//  * РеализованПоискПоШтрихкоду                           - Булево - признак того, что реализован поиск товаров по штрихкоду.
//  * РеализованоРазбиениеСтрок                            - Булево - признак того, что реализовано разбиение строк в ТЧ Товары.
//  * РеализованаЗагрузкаДанныхТСД                         - Булево - признак того, что реализована загрузка данных при помощи ТСД в ТЧ Товары.
//  * РеализованоЗаполнениеДокументовИзВнешнегоФайла       - Булево - признак того, что реализовано заполнение ТЧ Товары из внешнего файла.
//  * ИспользуютсяСтатусыКоммерческихПредложенийКлиентам   - Булево - признак того, что реализовано используются статусы коммерческих предложений клиентам.
//  * ИспользуютсяСостоянияКоммерческихПредложенийКлиентам - Булево - признак того, что реализовано используются состояния коммерческих предложений клиентам.
//  * ИмяРеквизитаВладельцаНоменклатурыКонтрагента         - Булево - имя реквизита документа "Коммерческое предложение клиента", который содержит владельца номенклатуры контрагента.
//  * СтатусыКоммерческихПредложенийКлиентамЧерновик       - Массив - определяет те статусы, в которых коммерческое предложение считается черновиком.
//  * СтатусыКоммерческихПредложенийКлиентамДействует      - Массив - определяет те статусы, в которых коммерческое предложение считается действующим.
//
Функция НастройкиУчета() Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ИспользуетсяЕдинственнаяОрганизация",       Ложь);
	Настройки.Вставить("ЕдинственнаяОрганизация",                   Неопределено);
	
	Настройки.Вставить("ИспользуетсяЕдинственнаяВалюта",            Ложь);
	Настройки.Вставить("ЕдинственнаяВалюта",                        Неопределено);
	
	Настройки.Вставить("ИспользуютсяПартнеры",                      Ложь);
	Настройки.Вставить("НезависимоеВедениеПартнеровИКонтрагентов",  Истина);
	Настройки.Вставить("ИспользуютсяХарактеристикиНоменклатуры",    Ложь);
	
	Настройки.Вставить("ВидКонтактнойИнформацииEmailМенеджера",     Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Настройки.Вставить("ВидКонтактнойИнформацииТелефонМенеджера",   Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);

#Область КоммерческиеПредложенияКлиентам
	
	Настройки.Вставить("ИспользуютсяВидыЦен",                                  Ложь);
	Настройки.Вставить("ИспользуютсяРучныеСкидкиВПродажах",                    Ложь);
	Настройки.Вставить("ИспользуютсяАвтоматическиеСкидкиВПродажах",            Ложь);
	Настройки.Вставить("ИспользуютсяНазначаемыеАвтоматическиеСкидкиВПродажах", Ложь);
	Настройки.Вставить("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи",Ложь);
	Настройки.Вставить("НеВыводитьСкидкиВДокументахПродажи",                   Ложь);
	Настройки.Вставить("РеализованаФормаПросмотраСкидок",                      Ложь);
	Настройки.Вставить("РеализованоЗаполнениеЦенПоУсловиямПродаж",             Ложь);
	Настройки.Вставить("РеализованоЗаполнениеЦенПоВидамЦен",                   Ложь);
	Настройки.Вставить("РеализованоЗаполнениеУсловийОплаты",                   Ложь);
	Настройки.Вставить("РеализованоЗаполнениеУсловийДоставки",                 Ложь);
	Настройки.Вставить("РеализованПодборНоменклатуры",                         Ложь);
	Настройки.Вставить("РеализованПоискПоШтрихкоду",                           Ложь);
	Настройки.Вставить("РеализованоРазбиениеСтрок",                            Ложь);
	Настройки.Вставить("РеализованаЗагрузкаДанныхТСД",                         Ложь);
	Настройки.Вставить("РеализованоЗаполнениеДокументовИзВнешнегоФайла",       Ложь);
	Настройки.Вставить("ИмяРеквизитаВладельцаНоменклатурыКонтрагента",         "");
	Настройки.Вставить("СтатусыКоммерческихПредложенийКлиентамЧерновик",       Новый Массив);
	Настройки.Вставить("СтатусыКоммерческихПредложенийКлиентамДействует",      Новый Массив);
	Настройки.Вставить("ИспользуютсяСтатусыКоммерческихПредложенийКлиентам",   Ложь);
	Настройки.Вставить("ИспользуютсяСостоянияКоммерческихПредложенийКлиентам", Ложь);

#КонецОбласти

#Область КоммерческоеПредложениеПоставщика

	Настройки.Вставить("РегистрироватьЦеныПоставщиков", Ложь);

#КонецОбласти

	КоммерческиеПредложенияДокументыПереопределяемый.ПриОпределенииНастроекУчета(Настройки);
	
	Возврат Настройки;
	
КонецФункции

// Формализует имя источника подчиненного коммерческого предложения в контексте конкретного документа
// Запрос коммерческого предложения.
//
// Возвращаемое значение:
//  Строка - имя источника предложений
//
Функция ИмяИсточникаПодчиненныеКоммерческиеПредложения() Экспорт
	
	Возврат "КоммерческиеПредложенияОтПоставщика";
	
КонецФункции

// Формализует имя источника коммерческого предложения не подчиненного документу Запрос коммерческого предложения,
// в контексте которого анализируются предложения.
//
// Возвращаемое значение:
//  Строка - имя источника предложений
//
Функция ИмяИсточникаДругиеКоммерческиеПредложения() Экспорт
	
	Возврат "ДругиеКоммерческиеПредложенияОтПоставщика";
	
КонецФункции


#Область РаботаСHTML

// Получает объект ДокументHTML из текста HTML.
//
// Параметры:
//  ТекстHTML  - Строка - текст в формате HTML.
//  Кодировка  - Строка - если задан, то объявление HTML-документа будет содержать
//      атрибут encoding с указанным значением.
//
// Возвращаемое значение:
//   ДокументHTML - созданный документ HTML.
//
Функция ОбъектДокументHTMLИзТекстаHTML(ТекстHTML, Кодировка = Неопределено) Экспорт
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	
	НовыйТекстHTML = ТекстHTML;
	ПозицияОткрытиеXML = СтрНайти(НовыйТекстHTML,"<?xml");
	
	Если ПозицияОткрытиеXML > 0 Тогда
		
		ПозицияЗакрытиеXML = СтрНайти(НовыйТекстHTML,"?>");
		Если ПозицияЗакрытиеXML > 0 Тогда
			
			НовыйТекстHTML = ЛЕВ(НовыйТекстHTML,ПозицияОткрытиеXML - 1) + ПРАВ(НовыйТекстHTML,СтрДлина(НовыйТекстHTML) - ПозицияЗакрытиеXML -1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Кодировка = Неопределено Тогда
		
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
		
	Иначе
		
		Попытка
		
			ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
		
		Исключение
			
			ЧтениеHTML.УстановитьСтроку(ТекстHTML);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Построитель.Прочитать(ЧтениеHTML);
	
КонецФункции

// Обрабатывает текст HTML для помещения в форматированный документ.
//
// Параметры:
//  ВладелецФайлов    - ДокументСсылка - документ, присоединенные файлы которого требуется обработать.
//  ТекстHTML         - Строка - обрабатываемый текст HTML.
//  СтруктураВложений - Структура - структура в которую помещаются картинки - вложения письма.
//
// Возвращаемое значение:
//   Строка   - обработанный текст HTML.
//
Функция ОбработанныйТекстHTMLДляФорматированногоДокумента(ВладелецФайлов, ТекстHTML, СтруктураВложений) Экспорт
	
	Если Не ПустаяСтрока(ТекстHTML) Тогда
		
		ДокументHTML = ОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
		
		ИмяВладельцаФайлов = ВладелецФайлов.Метаданные().Имя;
		
		ТаблицаФайлов = Документы[ИмяВладельцаФайлов].ПрисоединенныеФайлыСНеПустымCID(ВладелецФайлов);
		
		Если ТаблицаФайлов.Количество() Тогда
			
			Для каждого ПрисоединенныйФайл Из ТаблицаФайлов Цикл
				
				Для каждого Картинка Из ДокументHTML.Картинки Цикл
					
					АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
					
					Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.CIDВложенияHTML) > 0 Тогда
						
						НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
						НовыйАтрибутКартинки.ТекстовоеСодержимое = ПрисоединенныйФайл.Наименование;
						Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
						
						СсылкаНаДвоичныеДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла;
						СтруктураВложений.Вставить(ПрисоединенныйФайл.Наименование, Новый Картинка(ПолучитьИзВременногоХранилища(СсылкаНаДвоичныеДанныеФайла)));
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Возврат ТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		Иначе
			
			Возврат ТекстHTML;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ТекстHTML;
		
	КонецЕсли;
	
КонецФункции

// Заменяет имена картинок в документе HTML на CID вложений.
// Параметры:
//  ДокументHTML - ДокументHTML - документ HTML в котором будет выполняться замена.
//  ТаблицаСоответствий - ТаблицаЗначений - таблица соответствий имен файлов и идентификаторов.
//
Процедура ЗаменитьИменаКартинокНаCIDВложенийHTML(ДокументHTML, ТаблицаСоответствий) Экспорт
	
	ТаблицаСоответствий.Индексы.Добавить("ИмяФайла");
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		НайденнаяСтрока = ТаблицаСоответствий.Найти(АтрибутИсточникКартинки.ТекстовоеСодержимое,"ИмяФайла");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
			НовыйАтрибутКартинки.ТекстовоеСодержимое = Строка("cid:"+НайденнаяСтрока.CID);
			Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает текст из документа HTML.
//
// Параметры:
//  ДокументHTML - ДокументHTML - документ HTML, который нужно преобразовать в строку.
//
// Возвращаемое значение:
//   Строка - обработанный текст HTML.
//
Функция ТекстHTMLИзОбъектаДокументHTML(ДокументHTML) Экспорт
	
	Попытка
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьHTML = Новый ЗаписьHTML;
		ЗаписьHTML.УстановитьСтроку();
		ЗаписьDOM.Записать(ДокументHTML,ЗаписьHTML);
		Возврат ЗаписьHTML.Закрыть();
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Записывает вложение электронного письма, расположенное во временном хранилище в файл.
//
// Параметры:
//  ВладелецФайлов                 - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - папка файлов или объект, к которому
//                                                                                  требуется прикрепить добавляемый файл.
//  АдресВоВременномХранилище - Строка - адрес, указывающий на двоичные данные во временном хранилище.
//  ИмяФайла                  - Строка - имя файла.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ПрисоединенныйФайл - ссылка на созданный присоединенный файл.
//
Функция ЗаписатьВложениеИзВременногоХранилища(ВладелецФайлов, АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	ИмяФайлаДляРазбора = ИмяФайла;
	РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайлаДляРазбора);
	ИмяБезРасширения   = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",              ВладелецФайлов);
	ПараметрыФайла.Вставить("Автор",                       Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки",          РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	Возврат РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВоВременномХранилище);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
//   Документ                  - ДокументСсылка - документ, на основании которого осуществляется ввод.
//   ЕстьОшибкиПометкаУдаления - Булево         - если Истина - документ, на основании которого осуществляется ввод, не проведен или помечен на удаление.
//   Статус                    - Произвольный   - Статус документа, на основании которого осуществляется ввод.
//   ЕстьОшибкиСтатус          - Булево         - если Истина - документ, на основании которого осуществляется ввод, имеет некорректный статус.
//   МассивДопустимыхСтатусов  - Массив         - список допустимых статусов.
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           ЕстьОшибкиПометкаУдаления,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено) Экспорт
	
	Если ЕстьОшибкиПометкаУдаления Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Документ %1 помечен на удаление. Ввод на основании помеченного на удаление документа запрещен.';uk='Документ %1 відмічений для вилучення. Введення на підставі відміченого для вилучення документа заборонено.'"),
		                        Документ);
	
		ВызватьИсключение ТекстОшибки;
		
	ИначеЕсли ЕстьОшибкиСтатус Тогда
		
		Если Не ЗначениеЗаполнено(МассивДопустимыхСтатусов) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Документ %1 находится в статусе ""%2"". Ввод на основании запрещен.';uk='Документ %1 знаходиться в статусі ""%2"". Введення на підставі заборонено.'"),
			                        Документ,
			                        Статус);
			
		ИначеЕсли ТипЗнч(МассивДопустимыхСтатусов) = Тип("Массив") Тогда
			
			Если МассивДопустимыхСтатусов.Количество() = 1 Тогда
				
				СтрокаДопустимыхСтатусов = МассивДопустимыхСтатусов[0];
				
				ТекстОшибки = СтрШаблон(НСтр("ru='Документ %1 находится в статусе ""%2"". Ввод на основании разрешен только в статусе ""%3"".';uk='Документ %1 знаходиться в статусі ""%2"". Введення на підставі дозволено тільки в статусі ""%3"".'"),
				                        Документ,
				                        Статус,
				                        СтрокаДопустимыхСтатусов);
			
			Иначе
				
				СтрокаДопустимыхСтатусов = СтрСоединить(МассивДопустимыхСтатусов, """, """);
				
				ТекстОшибки =СтрШаблон(НСтр("ru='Документ %1 находится в статусе ""%2"". Ввод на основании разрешен только в статусах ""%3"".';uk='Документ %1 знаходиться в статусі ""%2"". Введення на підставі дозволено тільки в статусах ""%3"".'"),
				                            Документ,
					                        Статус,
					                        СтрокаДопустимыхСтатусов);;
			КонецЕсли;
			
		КонецЕсли;
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохранить изменения в источниках при анализе запросов.
// Параметры:
//  ПараметрыОперации - Структура - Параметры операции.
//  АдресРезультата   - Строка    - Адрес ответа результата.
//
Процедура СохранитьПользовательскиеИзмененияВДокументахИсточниках(ПараметрыОперации, АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Источники = ПараметрыОперации.Источники;
	
	КоммерческиеПредложенияДокументыПереопределяемый.СохранитьПользовательскиеИзмененияВДокументахИсточниках(Источники, Отказ);
	
	ПоместитьВоВременноеХранилище(Отказ, АдресРезультата);
	
КонецПроцедуры

// Устанавливает условное оформление для "ставки НДС", "суммы НДС", "суммы с НДС" по налогообложению.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма, для которой устанавливается условное оформление.
//  ИмяПоляВводаСтавкиНДС - Строка - Наименование элемента формы, содержащего ставку НДС, если оно отличается от "ТоварыСтавкаНДС".
//  ИмяПоляВводаСуммыНДС  - Строка - Наименование элемента формы, содержащего сумму НДС,  если оно отличается от "ТоварыСуммаНДС"
//  ИмяПоляВводаСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС,
//                                   если оно отличается от "ТоварыСуммаСНДС"
//
Процедура УстановитьУсловноеОформлениеСуммНДС(Форма,
	                                          ИмяПоляВводаСтавкиНДС = "ТоварыСтавкаНДС",
	                                          ИмяПоляВводаСуммыНДС  = "ТоварыСуммаНДС",
	                                          ИмяПоляВводаСуммыСНДС = "ТоварыСуммаСНДС") Экспорт
	УчетНДСУП.УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи(Форма)
КонецПроцедуры

// Устанавливаем условное оформление для поля "сумма с НДС" в зависимости от флага "ЦенаВключаетНДС".
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма, для которой устанавливается условное оформление.
//  ИмяПоляВводаСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС, если оно отличается от "ТоварыСуммаСНДС".
//
Процедура УстановитьУсловноеОформлениеЦенаВключаетНДС(Форма, ИмяПоляВводаСуммыСНДС = "ТоварыСуммаСНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы; // ЭлементыФормы
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеСуммыНДС = ЭлементыФормы[ИмяПоляВводаСуммыСНДС]; // ПолеФормы
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеСуммыНДС.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ЦенаВключаетНДС");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры


// Формирует представление документа-основания на форме.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - ссылка на документ-основание.
//
// Возвращаемое значение:
//   Строка.
//
Функция ПредставлениеДокументаОснования(ДокументОснование) Экспорт
	
	ТекстГиперссылки = "ОткрытьДокументОснование";
	
	Возврат Новый ФорматированнаяСтрока(
	        Строка(ДокументОснование),
	        Новый Шрифт(,,,,Истина),
	        ЦветаСтиля.ЦветГиперссылкиБЭД,
	        ,
	        ТекстГиперссылки);
	
КонецФункции

// Формирует надпись наличия присоединенных файлов. 
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой выполняются действия.
//
Процедура СформироватьНадписьПрисоединенныеФайлы(Форма) Экспорт
	
	КоличествоПрисоединенныхФайлов = 0;
	Размер = 0;
	
	ОбъектФормы = Форма.Объект; // СправочникОбъект 
	
	Если Не ОбъектФормы.Ссылка.Пустая() Тогда
		
		ИмяСправочника = "Справочник." + ОбъектФормы.Ссылка.Метаданные().Имя + "ПрисоединенныеФайлы";
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИмяТаблицы.Ссылка) КАК КоличествоФайлов,
		|	ЕстьNULL(СУММА(ИмяТаблицы.Размер), 0)   КАК Размер
		|ИЗ
		|	&ИмяСправочника КАК ИмяТаблицы
		|ГДЕ
		|	НЕ ИмяТаблицы.ПометкаУдаления
		|	И ИмяТаблицы.CIDВложенияHTML = """"
		|	И ИмяТаблицы.ВладелецФайла   = &ВладелецФайла";
		
		Запрос.УстановитьПараметр("ВладелецФайла", ОбъектФормы.Ссылка);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяСправочника", ИмяСправочника);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		КоличествоПрисоединенныхФайлов = Выборка.КоличествоФайлов;
		Размер = Окр(Выборка.Размер / 1024 / 1024, 0);
		
	КонецЕсли;
	
	Строки = Новый Массив;
		Цвет = ?(Размер > 60, ЦветаСтиля.ПросроченныеДанныеЦвет, ЦветаСтиля.ПоясняющийТекст);
	
	Если ЗначениеЗаполнено(КоличествоПрисоединенныхФайлов) Тогда 
		Строки.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru='Файлы (%1)';uk='Файли (%1)'"),КоличествоПрисоединенныхФайлов),,,,"Открыть"));
		Строки.Добавить(". ");
		Строки.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru='%1 Мб.';uk='%1 Мб.'"), Размер),,Цвет));
	Иначе
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Файлы';uk='Файли'"),,,,"Открыть"));
	КонецЕсли;
	
	Форма.Элементы.ОткрытьПрисоединенныеФайлы.Заголовок            = Новый ФорматированнаяСтрока(Строки);
	Форма.Элементы.ОткрытьПрисоединенныеФайлы.ОтображениеПодсказки = ?(Размер > 60, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет);
	
КонецПроцедуры

// Определяет наличие комментария в строке табличной части
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма, для которой выполняются действия.
//  ИмяТабличнойЧасти - Строка - табличная часть, для которой выполняются действия.
//  ИмяРеквизита1     - Строка - имя первого реквизита ТЧ, в котором может быть комментарий.
//  ИмяРеквизита2     - Строка - имя второго реквизита ТЧ, в котором может быть комментарий.
//  ИмяРеквизитаЕстьКомментарий - Строка - имя реквизита типа Булево, который содержит признак наличия комментария в строке.
//
Процедура ОпределитьНаличиеКомментарияВСтроках(Форма, ИмяТабличнойЧасти, ИмяРеквизита1, ИмяРеквизита2, ИмяРеквизитаЕстьКомментарий) Экспорт
	
	Для Каждого СтрокаТЧ Из Форма.Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТЧ[ИмяРеквизитаЕстьКомментарий] = Не ПустаяСтрока(СтрокаТЧ[ИмяРеквизита1])
		                                        Или Не ПустаяСтрока(СтрокаТЧ[ИмяРеквизита2]);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует представление контактной информации для одного из видов или типов.
//
// Параметры:
//  ТаблицаКонтактнойИнформации - ТаблицаЗначений    - содержит данные контактной информации.
//  ТипВидКонтактнойИнформации  - ПеречислениеСсылка.ТипыКонтактнойИнформации, СправочникСсылка.ВидыКонтактнойИнформации - тип или вид контактной информации.
//  Разделитель                 - Строка - как будут разделены различные значения КИ в представлении.
//
// Возвращаемое значение:
//   Строка.
//
Функция ПредставлениеКонтактнойИнформацииИзТаблицы(ТаблицаКонтактнойИнформации, ТипВидКонтактнойИнформации, Разделитель = "; ") Экспорт
	
	ОтборПоТипу = Ложь;
	ОтборПоВиду = Ложь;
	
	Если ЗначениеЗаполнено(ТипВидКонтактнойИнформации) Тогда
		Если ТипЗнч(ТипВидКонтактнойИнформации) = Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
			ОтборПоТипу = Истина;
		ИначеЕсли ТипЗнч(ТипВидКонтактнойИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ОтборПоВиду = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПервыйПроход = Истина;

	Для каждого ЗаписьКонтактнойИнформации Из ТаблицаКонтактнойИнформации Цикл
		
		Если ОтборПоВиду И ЗаписьКонтактнойИнформации.Вид <> ТипВидКонтактнойИнформации Тогда
			Продолжить;
		ИначеЕсли ОтборПоТипу И ЗаписьКонтактнойИнформации.Тип <> ТипВидКонтактнойИнформации Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервыйПроход Тогда
			Представление = ЗаписьКонтактнойИнформации.Представление;
			ПервыйПроход = Ложь;
		Иначе
			Представление = Представление + Разделитель + ЗаписьКонтактнойИнформации.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

// Формирует представление организации, с которой происходит взаимодействие по коммерческому предложению.
//
// Параметры:
//  Партнер    - ОпределяемыйТип.Партнер    - партнер документа.
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//
// Возвращаемое значение:
//   Строка.
//
Функция ПредставлениеПартнераКонтрагента(Партнер, Контрагент) Экспорт
	
	ПредставлениеПартнераКонтрагента = "";
	СтандартнаяОбработка = Истина;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриПолученииПредставленияПартнераКонтрагента(ПредставлениеПартнераКонтрагента, Партнер, Контрагент, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			Возврат Строка(Партнер);
		Иначе
			Возврат Строка(Контрагент);
		КонецЕсли;
		
	Иначе
		Возврат ПредставлениеПартнераКонтрагента;
	КонецЕсли;
	
КонецФункции

// Формирует представление срока действия предложения.
//
// Параметры:
//  ЕстьСкидки   - Булево - наличие скидок в документе.
//  СрокДействия - Дата - срок действия предложения.
//
// Возвращаемое значение:
//   Строка.
//
Функция ПредставлениеСрокаДействияДляПечати(ЕстьСкидки, СрокДействия) Экспорт

	ПредставлениеСрокаДействия = "";
	
	Если ЗначениеЗаполнено(СрокДействия) Тогда
		
		Если ЕстьСкидки Тогда
			ШаблонСообщения = НСтр("ru='Указанные цены и скидки действуют до %1';uk='Зазначені ціни та знижки діють до %1'");
		Иначе
			ШаблонСообщения = НСтр("ru='Указанные цены действуют до %1';uk='Вказані ціни діють до %1'");
		КонецЕсли;
		
		ПредставлениеСрокаДействия = СтрШаблон(ШаблонСообщения, Формат(СрокДействия, "ДЛФ=DD"));
		
	КонецЕсли;
	
	Возврат ПредставлениеСрокаДействия;
	
КонецФункции

// Формирует представление возможности частичного выкупа товаров по предложению.
//
// Параметры:
//  МожетВыкупатьсяЧастично - Булево  - условия оплаты по документу.
//
// Возвращаемое значение:
//   Строка.
//
Функция ПредставлениеЧастичногоВыкупаДляПечати(МожетВыкупатьсяЧастично) Экспорт
	
	Если МожетВыкупатьсяЧастично Тогда
		Возврат НСтр("ru='Покупка всех товаров предложения не обязательна.';uk='Купівля всіх товарів пропозиції не обов''язкова.'");
	Иначе
		Возврат НСтр("ru='Цены действительны только при покупке всех товаров предложения.';uk='Ціни дійсні тільки при купівлі всіх товарів пропозиції.'");
	КонецЕсли;
	
КонецФункции

// Формирует представление условий поставки для печати.
//
// Параметры:
//  УсловияОплаты    - Строка  - условия оплаты по документу.
//  УсловияДоставки  - Строка  - условия доставки по документу.
//  ПрочиеУсловия    - Строка - прочие условия поставки по документу.
//
// Возвращаемое значение:
//   Строка - общее представление условий поставки
//
Функция ПредставлениеУсловийПоставкиДляПечати(УсловияОплаты, УсловияДоставки, ПрочиеУсловия, ПараметрыВывода = Неопределено) Экспорт

	ПредставлениеУсловийПоставки = "";
	
	Если ПараметрыВывода <> Неопределено Тогда
    	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
    Иначе
    	КодЯзыкаПечать = МультиязычностьУкр.ПолучитьЯзыкФормированияПечатныхФорм();
    КонецЕсли; 

	Если Не ПустаяСтрока(УсловияОплаты) Тогда
		УсловияОплаты = СтрШаблон(НСтр("ru='Оплата: %1';uk='Оплата: %1'",КодЯзыкаПечать), УсловияОплаты);
		ПредставлениеУсловийПоставки = УсловияОплаты;
	КонецЕсли;
	
	Если Не ПустаяСтрока(УсловияДоставки) Тогда
		УсловияДоставки = СтрШаблон(НСтр("ru='Доставка: %1';uk='Доставка: %1'",КодЯзыкаПечать), УсловияДоставки);
		ПредставлениеУсловийПоставки = ПредставлениеУсловийПоставки 
		                              + ?(ПустаяСтрока(ПредставлениеУсловийПоставки), "", Символы.ПС)
		                              + УсловияДоставки;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПрочиеУсловия) Тогда
		
		Если ПустаяСтрока(ПредставлениеУсловийПоставки) Тогда
			ПрочиеУсловия = ПрочиеУсловия;
		Иначе
			ПрочиеУсловия = СтрШаблон(НСтр("ru='Прочее: %1';uk='Інше: %1'",КодЯзыкаПечать), ПрочиеУсловия);
		КонецЕсли;
		
		ПредставлениеУсловийПоставки = ПредставлениеУсловийПоставки 
		                              + ?(ПустаяСтрока(ПредставлениеУсловийПоставки), "", Символы.ПС)
		                              + ПрочиеУсловия;
		
	КонецЕсли;
	
	НСтр(ПредставлениеУсловийПоставки, КодЯзыкаПечать);
	
	Возврат ПредставлениеУсловийПоставки;

КонецФункции

// Формирует представление сумм для вывода в печатную форму документа
//
// Параметры:
//  ДанныеШапки      - ВыборкаИзРезультатаЗапроса, Структура - объект, для которого требуется определить наличие контактной информации.
//  СуммаВсего        - Число - сумма документа с НДС.
//  СуммаВсегоНДС     - Число - сумма НДС документа.
//  КоличествоТоваров - Число - количество товаров.
//
// Возвращаемое значение:
//  Структура - содержит поля:
//  * ИтоговаяСтрока - Строка-  итоговая строка по суммам и товарам документа.
//  * СуммаПрописью  - Строка - итоговая строка, содержащая суммы прописью.
//
Функция ПредставлениеСуммДокументаДляПечати(ДанныеШапки, СуммаВсего, СуммаВсегоНДС, КоличествоТоваров) Экспорт

	ПредставлениеВалюты = ?(ЗначениеЗаполнено(ДанныеШапки.Валюта), СокрЛП(ДанныеШапки.Валюта), "");
	
	СуммаКПрописи = СуммаВсего + ?(ДанныеШапки.ЦенаВключаетНДС, 0, СуммаВсегоНДС);
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеШапки.Валюта);
	
	ИтоговаяСтрока = "";
	Если ДанныеШапки.УчитыватьНДС И НЕ ДанныеШапки.ЦенаВключаетНДС Тогда
		
		ИтоговаяСтрока = СтрШаблон(НСтр("ru='Итого: %1 %2, сумма НДС: %3 %2';uk='Разом: %1 %2, сума ПДВ: %3 %2'"),
		                           Формат(СуммаВсего,"ЧДЦ=2; ЧРД=,"),
		                           ПредставлениеВалюты,
		                           Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		
		ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС;
		
	КонецЕсли;
	
	СтрокаВсегоНаименований =  СтрШаблон(НСтр("ru='Всего наименований: %1, на сумму %2';uk='Всього найменувань: %1, на суму %2'"), 
	                                     КоличествоТоваров, 
	                                     ФорматСумм(СуммаКПрописи, ДанныеШапки.Валюта));
	ИтоговаяСтрока = ИтоговаяСтрока + СтрокаВсегоНаименований;
	
	Если ДанныеШапки.УчитыватьНДС И ДанныеШапки.ЦенаВключаетНДС Тогда
		
		СтрокаНДС = СтрШаблон(НСтр("ru='в том числе НДС %1 %2';uk='в тому числі ПДВ %1 %2'"), Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"),ПредставлениеВалюты);
			ИтоговаяСтрока = ИтоговаяСтрока + ", " + СтрокаНДС;
		
	КонецЕсли;
	
	Если НЕ ДанныеШапки.УчитыватьНДС Тогда
		
		ИтоговаяСтрока = ИтоговаяСтрока + ", " + НСтр("ru='Без налога (НДС)';uk='Без податку (ПДВ)'");
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИтоговаяСтрока",ИтоговаяСтрока);
	СтруктураВозврата.Вставить("СуммаПрописью",СуммаПрописью);
	
	Возврат СтруктураВозврата;

КонецФункции


// Возвращает структуру, содержащую необходимую контактную информацию пользователя.
//
// Параметры:
//    Менеджер - СправочникСсылка.Пользователи - владелец контактной информации.
//
// Возвращаемое значение:
//  Структура - контактная информация менеджера:
//    * Email - Строка - адрес электронной почты.
//    * EmailСоответствуетТребованиям - Булево - признак того, что email-адрес на соответствует
//        требованиям стандартов RFC 5321, RFC 5322, а также RFC 5335, RFC 5336 и RFC 3696.
//    * Телефон - Строка - номер телефона.
//
Функция КонтактнаяИнформацияМенеджера(Менеджер) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Email",                         "");
	СтруктураВозврата.Вставить("EmailСоответствуетТребованиям", Ложь);
	СтруктураВозврата.Вставить("Телефон",                       "");
	
	НастройкиУчета = НастройкиУчета();
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Менеджер);
	
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(НастройкиУчета.ВидКонтактнойИнформацииEmailМенеджера);
	МассивВидовКИ.Добавить(НастройкиУчета.ВидКонтактнойИнформацииТелефонМенеджера);
	
	ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов,, МассивВидовКИ, ТекущаяДатаСеанса());
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтактнойИнформации Цикл
		
		Если СтрокаТаблицы.Вид = НастройкиУчета.ВидКонтактнойИнформацииEmailМенеджера
			И ПустаяСтрока(СтруктураВозврата.Email) Тогда
			
			СтруктураВозврата.Email = СтрокаТаблицы.Представление;
			СтруктураВозврата.EmailСоответствуетТребованиям = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СтрокаТаблицы.Представление)
			
		КонецЕсли;
		
		Если СтрокаТаблицы.Вид = НастройкиУчета.ВидКонтактнойИнформацииТелефонМенеджера
			И ПустаяСтрока(СтруктураВозврата.Телефон) Тогда
			
			СтруктураВозврата.Телефон = СтрокаТаблицы.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция получает коэффициент пересчета из текущей валюты в новую валюту.
//
// Параметры:
//  ТекущаяВалюта - СправочникСсылка.Валюты - Текущая валюта документа
//  НоваяВалюта - СправочникСсылка.Валюты - Новая валюта документа
//  Дата - Дата - Дата документа.
//
// Возвращаемое значение:
//  Число - Коэффициент пересчета в новую валюту.
//
Функция КоэффициентПересчетаИзВалютыВВалюту(ТекущаяВалюта, НоваяВалюта, Дата) Экспорт
	
	Если ТекущаяВалюта <> НоваяВалюта Тогда
		КурсТекущейВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ТекущаяВалюта, Дата);
		КурсНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, Дата);
		Если КурсНовойВалюты.Курс * КурсТекущейВалюты.Кратность <> 0 Тогда
			КоэффициентПересчета = (КурсТекущейВалюты.Курс * КурсНовойВалюты.Кратность) / (КурсНовойВалюты.Курс * КурсТекущейВалюты.Кратность);
		Иначе
			КоэффициентПересчета = 0;
		КонецЕсли;
	Иначе
		КоэффициентПересчета = 1;
	КонецЕсли;
	
	Возврат КоэффициентПересчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Функция ИмяЭлементаИзПолногоПути(ПолныйПуть)
	
	МассивЭлементовПути = СтрРазделить(ПолныйПуть, ".");
	КоличествоЭлементов = МассивЭлементовПути.Количество();
	
	Если КоличествоЭлементов > 0 Тогда
		
		Возврат МассивЭлементовПути[КоличествоЭлементов - 1];
		
	Иначе
		
		Возврат "";
	
	КонецЕсли;
	
КонецФункции


#Область Прочее

Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "")
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2"
					+ ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
					+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;

КонецФункции

Процедура УбратьПробелыИзСтроковыхЗначенийКоллекции(КоллекцияЗначений)
	
	Для Каждого ЭлементКоллекции Из КоллекцияЗначений Цикл
		Если ТипЗнч(ЭлементКоллекции.Значение) = Тип("Строка") Тогда
			КоллекцияЗначений[ЭлементКоллекции.Ключ] = СокрЛП(ЭлементКоллекции.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
