
#Область ПрограммныйИнтерфейс

// Составляет соответствие размеров предельной величины базы страховых взносов, 
//	действующих на указанные годы.
//
// Параметры:
//	Годы - массив элементов типа число.
//
// Возвращаемое значение - соответствие, где ключом является год, а значением - размер предельной величины.
//
Функция ПредельнаяВеличинаБазыСтраховыхВзносов(Месяцы) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПредельнаяВеличинаБазы(Запрос.МенеджерВременныхТаблиц, Месяцы);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПредельнаяВеличинаБазыСтраховыхВзносов.Месяц КАК Месяц,
	|	ПредельнаяВеличинаБазыСтраховыхВзносов.Размер КАК Размер
	|ИЗ
	|	ВТПредельнаяВеличинаБазы КАК ПредельнаяВеличинаБазыСтраховыхВзносов
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредельнаяВеличина = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПредельнаяВеличина.Вставить(Выборка.Месяц, Выборка.Размер);
	КонецЦикла;
	
	Возврат ПредельнаяВеличина;
	
КонецФункции

Функция ПредельнаяВеличинаБазыСтраховыхВзносовПоФизическомуЛицу(Месяцы, ФизическоеЛицо) Экспорт

	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ВидЕСВ", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЕСВ"));
	
	Для Каждого Месяц Из Месяцы Цикл
		СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		СтрокаИзмеренияДаты.Период = Месяц;
		СтрокаИзмеренияДаты.ВидЕСВ = Перечисления.ВидыЕСВ.Больничные;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);   
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ИзмеренияДаты.Период КАК Период,
	|	ИзмеренияДаты.ВидЕСВ КАК ВидЕСВ
	|ПОМЕСТИТЬ ВТИзмеренияДаты
	|ИЗ
	|	&ИзмеренияДаты КАК ИзмеренияДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсчисленныеСтраховыеВзносы.НалоговыйПериод КАК Месяц,
	|	МАКСИМУМ(ИсчисленныеСтраховыеВзносы.Предел) КАК Предел
	|ПОМЕСТИТЬ ВТПределыСтраховыхВзносовПоФизическомуЛицу
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ПО ИсчисленныеСтраховыеВзносы.НалоговыйПериод = ИзмеренияДаты.Период
	|			И (ИсчисленныеСтраховыеВзносы.ФизическоеЛицо = &ФизическоеЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсчисленныеСтраховыеВзносы.НалоговыйПериод
	|";   
	
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПределыСтраховыхВзносов",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДаты","ВидЕСВ"));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзмеренияДаты.Период КАК Месяц,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПределыСтраховыхВзносовПоФизическомуЛицу.Предел, 0) = 0
	|			ТОГДА ЕСТЬNULL(ПределыСтраховыхВзносов.Предел, 0)
	|		ИНАЧЕ ПределыСтраховыхВзносовПоФизическомуЛицу.Предел
	|	КОНЕЦ КАК Размер
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПределыСтраховыхВзносовПоФизическомуЛицу КАК ПределыСтраховыхВзносовПоФизическомуЛицу
	|		ПО ИзмеренияДаты.Период = ПределыСтраховыхВзносовПоФизическомуЛицу.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПределыСтраховыхВзносовСрезПоследних КАК ПределыСтраховыхВзносов
	|		ПО ИзмеренияДаты.Период = ПределыСтраховыхВзносов.Период
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИзмеренияДаты;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ  ВТПределыСтраховыхВзносовСрезПоследних
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредельнаяВеличина = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПредельнаяВеличина.Вставить(Выборка.Месяц, Выборка.Размер);
	КонецЦикла;
	
	Возврат ПредельнаяВеличина;
	
КонецФункции 


// Возвращает разность стажей в годах и месяцах.
//
// Параметры:
//  БольшийСтажЛет, БольшийСтажМесяцев, МеньшийСтажЛет, МеньшийСтажМесяцев
//
// Возвращаемое значение:
//   Структура - РазностьЛет, РазностьМесяцев
//
Функция ПодсчитатьРазностьСтажейВГодахИМесяцах(БольшийСтажЛет, БольшийСтажМесяцев, МеньшийСтажЛет, МеньшийСтажМесяцев) Экспорт
	РазностьЛет = 0;
	РазностьМесяцев = 0;
	
	РазностьМесяцев = БольшийСтажЛет * 12 + БольшийСтажМесяцев - МеньшийСтажЛет * 12 - МеньшийСтажМесяцев;
	Если РазностьМесяцев > 0 Тогда
		РазностьЛет = Цел(РазностьМесяцев / 12);
		РазностьМесяцев = РазностьМесяцев - РазностьЛет * 12;
	Иначе
		РазностьЛет = 0;
		РазностьМесяцев = 0;                                      
	КонецЕсли;
	
	Возврат Новый Структура("РазностьЛет,РазностьМесяцев", РазностьЛет, РазностьМесяцев);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


Функция ПособиеЗаНеполныйРасчетныйПериод(ФизическоеЛицо, ДатаНачалаСобытия) Экспорт
		
	Если ДатаНачалаСобытия < '20150101'Или ДатаНачалаСобытия >= '20170101'Тогда // До 2015 и с 2017 года средний исчисляется одинаково для всех.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ПостоянноПроживалВКрыму18Марта2014Года") = Истина
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазложитьНомерБольничного(Номер) Экспорт
	
	СерияНомер = Новый Структура;
	СерияНомер.Вставить("Серия","");
	СерияНомер.Вставить("Номер","");
	
	Если Не ЗначениеЗаполнено(Номер) Тогда
		Возврат СерияНомер;
	КонецЕсли;	
	
	Для Индекс = 1 По СтрДлина(Номер) Цикл
		ТекущийСимвол = Сред(Номер, Индекс, 1);
		КодСимвола = КодСимвола(ТекущийСимвол);
		Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
			//Первая цифра в номере
			СерияНомер.Серия = СокрЛП(Сред(Номер,1,Индекс-1));
			СерияНомер.Номер = СокрЛП(СтрЗаменить(Номер,СерияНомер.Серия,""));
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	
	Возврат СерияНомер;
	
КонецФункции	

// Составляет временную таблицу ВТПредельнаяВеличинаБазы, содержащую размеры предельной
// величины базы страховых взносов, действующих на указанные месяцы.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в котором формируется временная таблица.
//		Месяцы - массив элементов типа число.
// 
Процедура СоздатьВТПредельнаяВеличинаБазы(МенеджерВременныхТаблиц, Месяцы) Экспорт
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ВидЕСВ", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЕСВ"));
	
	Для Каждого Месяц Из Месяцы Цикл
		СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		СтрокаИзмеренияДаты.Период = Месяц;
		СтрокаИзмеренияДаты.ВидЕСВ = Перечисления.ВидыЕСВ.Больничные;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзмеренияДаты.Период,
	|	ИзмеренияДаты.ВидЕСВ
	|ПОМЕСТИТЬ ВТИзмеренияДаты
	|ИЗ
	|	&ИзмеренияДаты КАК ИзмеренияДаты";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПределыСтраховыхВзносов",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДаты","ВидЕСВ"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПределыСтраховыхВзносов.Период КАК Месяц,
	|	ЕСТЬNULL(ПределыСтраховыхВзносов.Предел, 0) КАК Размер
	|ПОМЕСТИТЬ ВТПредельнаяВеличинаБазы
	|ИЗ
	|	ВТПределыСтраховыхВзносовСрезПоследних КАК ПределыСтраховыхВзносов
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПределыСтраховыхВзносовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИзмеренияДаты";
	
	Запрос.Выполнить();

КонецПроцедуры

// Возвращает массив ссылок из ПВР Начисления, соответствующих облагаемым взносами компенсациям, возмещаемым из бюджета ФСС 
// (в частности, оплата 4-х дополнительных выходных дней для ухода за детьми инвалидами).
//
// Параметры:
//	нет
// 
// Возвращаемое значение:
//	Массив
// 
Функция НачисленияОблагаемыхВзносамиПособий() Экспорт

	Возврат УчетПособийСоциальногоСтрахованияВнутренний.НачисленияОблагаемыхВзносамиПособий();
	
КонецФункции

// Параметры:
//		Движения - коллекция движений регистратора.
//		Организация
//		ПериодРегистрации
//		ВидСтрахования
//		Сумма
//
Функция СтрокаЗачетаРасходов(Движения, Организация, ПериодРегистрации, ВидСтрахования, Сумма)

	Если Не ЗначениеЗаполнено(Сумма) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	НоваяСтрока = Движения.РасчетыСФондамиПоСтраховымВзносам.Добавить();
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяСтрока.Период = ПериодРегистрации;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.ЭтоСтраховыеВзносы = Истина;
	НоваяСтрока.ГодЗадолженностиПоЕСН = 0;
	НоваяСтрока.ВидОбязательногоСтрахованияСотрудников = ВидСтрахования;
	НоваяСтрока.РасчетыПоПособиям = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
	НоваяСтрока.Сумма = Сумма;
	
    Возврат НоваяСтрока
	
КонецФункции

// Возвращает размер ограничений, используемых при расчетах "по правилам 2010 года".
//
// Возвращаемое значение:
//	число
//
Функция РазмерОграниченияДля2010года() Экспорт
	
	Возврат 415000
	
КонецФункции

// Процедура рассчитывает строки со способом расчета "ПоСреднемуЗаработкуФСС".
//
// Параметры:
//	- СтрокиРасчета - массив строк таблицы значений данных для расчета с колонками:
//			- ЗаписьРасчета - строка набора записей регистра расчета.
//			- ИсходныеДанные - структура со значениями показателями, используемыми в контексте расчета.
//	- ДанныеФормыОбъект - Объект редактируемый в рассчитываемой форме.
//	- ПрименяетсяСторнирование - Булево, Истина если строки начислений содержат флаги сторнирования.
//
Процедура РассчитатьПособиеПоНетрудоспособности(СтрокиРасчета, ДанныеФормыОбъект, ПрименяетсяСторнирование = Истина) Экспорт
	ПараметрыОплаты = Новый Структура(
		"Организация,
		|ПериодРегистрации,
		|ДатаНачалаСобытия,
		|ПричинаНетрудоспособности,
		|СреднийДневнойЗаработок,
		|ПроцентОплаты,
		|ОграничениеПособия,
		|ПроцентОплатыБезЛьгот,
		|ОграничениеПособияБезЛьгот,
		|ДатаНарушенияРежима,
		|РасчетПоПравилам2010Года,
		|ДатаНачалаПоловиннойОплаты,
		|МинимальныйСреднедневнойЗаработок,
		|ОтработанноеВремяДляСреднегоФСС,
		|НазначитьПособие");
	
	ЗаполнитьЗначенияСвойств(ПараметрыОплаты, ДанныеФормыОбъект);
	
	
	Если ТипЗнч(ПараметрыОплаты.РасчетПоПравилам2010Года) <> Тип("Булево") Тогда
		ПараметрыОплаты.РасчетПоПравилам2010Года = Ложь;
	КонецЕсли; 
		
	НазначитьПособие = ПараметрыОплаты.НазначитьПособие;
	НазначитьПособиеЗаСчетФСС = ПараметрыОплаты.НазначитьПособие;
	Если НазначитьПособие = Истина Тогда
		
		НазначитьПособиеЗаСчетФСС = РасчетЗарплаты.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
		БольничныеЗаСчетРаботодателя = РасчетЗарплаты.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
		
											
		ОграниченияДляПособийПоНС_ПЗ = Новый Соответствие;
			Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл
				ОграниченияДляПособийПоНС_ПЗ.Вставить(СтрокаТаблицы.ЗаписьРасчета.ДатаНачала,0);
			КонецЦикла;                   
		
	КонецЕсли;
	
	МассивПериодПредела = Новый Массив;
	МассивПериодПредела.Добавить(СтрокаТаблицы.ЗаписьРасчета.ПериодДействия);
	ТаблицаОграничений = ПредельнаяВеличинаБазыСтраховыхВзносов(МассивПериодПредела);	
	
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл
		ОграничениеМаксимальнойБазойЕСВ = ТаблицаОграничений[СтрокаТаблицы.ЗаписьРасчета.ПериодДействия];
		
		ЗаписьРасчета = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Если ЗаписьРасчета.ДатаНачала >= ПараметрыОплаты.ДатаНарушенияРежима И ЗначениеЗаполнено(ПараметрыОплаты.ДатаНарушенияРежима)  Тогда
			Результат = 0;
			РезультатБезЛьгот = 0;
			Возврат;
		КонецЕсли;
		
		Если ПрименяетсяСторнирование Тогда
			Сторно = ЗаписьРасчета.Сторно;
		Иначе
			Сторно = Ложь;
		КонецЕсли;
		
		
		Если ЗаписьРасчета.ФиксРасчет 
			Или ЗаписьРасчета.ФиксСторно Тогда
			ИсходныеДанные.Результат = ЗаписьРасчета.Результат;
			ИсходныеДанные.ОплаченоДней = ИсходныеДанные.КалендарныеДни;
			Продолжить;
		КонецЕсли;
		
		ИсходныеДанные.Результат = 0;
		ЗаписьРасчета.Результат = 0;
		ИсходныеДанные.ОплаченоДней = ИсходныеДанные.КалендарныеДни;
		
		Если НазначитьПособие <> Истина Тогда // нет данных для расчета
			Продолжить;
		КонецЕсли;
				
		ОплачиваемоеВремя = ИсходныеДанные.КалендарныеДни;
		Если ЗначениеЗаполнено(ПараметрыОплаты.ДатаНачалаПоловиннойОплаты) И ЗаписьРасчета.ДатаНачала >= ПараметрыОплаты.ДатаНачалаПоловиннойОплаты Тогда
			ПроцентОплаты = 50;
		Иначе
			ПроцентОплаты = ПараметрыОплаты.ПроцентОплаты;
		КонецЕсли;
		
		ПрименятьОграничениеМРОТом = ПараметрыОплаты.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Или (ЗаписьРасчета.ДатаНачала >= ПараметрыОплаты.ДатаНарушенияРежима И ЗначениеЗаполнено(ПараметрыОплаты.ДатаНарушенияРежима));
		ПрименятьОграничениеДвойнымМРОТом = ПараметрыОплаты.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереДвухММОТ  Или (ЗаписьРасчета.ДатаНачала >= ПараметрыОплаты.ДатаНарушенияРежима И ЗначениеЗаполнено(ПараметрыОплаты.ДатаНарушенияРежима));
		ПрименятьОграничениеМРОТомБезЛьгот = ПараметрыОплаты.ОграничениеПособияБезЛьгот = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ;
		
		ТекущийМРОТ = ИсходныеДанные.МРОТ;
		
		
		НормаВремени = День(КонецМесяца(ЗаписьРасчета.ДатаНачала));
		
		ОграничениеПособияМРОТом = Окр(ТекущийМРОТ,2);
		
		//
		
		Если ПараметрыОплаты.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			ДневноеПособие = Окр(ПараметрыОплаты.СреднийДневнойЗаработок, 2);
			Если ПрименятьОграничениеДвойнымМРОТом Тогда //для проработавших менее 182 дней в течение 12 месяцев перед началом события для больничных по беременности и родам
				Если ДневноеПособие <= ПараметрыОплаты.МинимальныйСреднедневнойЗаработок * 2 И ДневноеПособие >= ПараметрыОплаты.МинимальныйСреднедневнойЗаработок Тогда
					Результат = Окр(ОплачиваемоеВремя * ДневноеПособие, 2)
				ИначеЕсли ДневноеПособие > ПараметрыОплаты.МинимальныйСреднедневнойЗаработок * 2 Тогда
					Результат = Окр(ОплачиваемоеВремя * ПараметрыОплаты.МинимальныйСреднедневнойЗаработок * 2, 2)
				Иначе
					Результат = Окр(ОплачиваемоеВремя * ПараметрыОплаты.МинимальныйСреднедневнойЗаработок, 2)
				КонецЕсли;	
			Иначе
				Результат = Окр(ОплачиваемоеВремя * Макс(ПараметрыОплаты.МинимальныйСреднедневнойЗаработок,ДневноеПособие), 2)
			КонецЕсли;	
		Иначе
			Если ПрименятьОграничениеМРОТом Тогда
				ДневноеПособие = Окр(ПараметрыОплаты.СреднийДневнойЗаработок * ПроцентОплаты / 100, 2);
				Результат = Окр(ОплачиваемоеВремя * Мин(ДневноеПособие, ПараметрыОплаты.МинимальныйСреднедневнойЗаработок), 2);
			Иначе
				ДневноеПособие = Окр(ПараметрыОплаты.СреднийДневнойЗаработок * ПроцентОплаты / 100, 2);
				Результат = Окр(ОплачиваемоеВремя * ДневноеПособие, 2);
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ОграничениеМаксимальнойБазойЕСВ = Неопределено Тогда
			Результат = Мин(Результат,ОграничениеМаксимальнойБазойЕСВ);
		КонецЕсли;
		
		ИсходныеДанные.Результат = Результат * ?(Сторно, -1, 1);
		ЗаписьРасчета.Результат = Результат * ?(Сторно, -1, 1);
		ИсходныеДанные.ОплаченоДней = ИсходныеДанные.КалендарныеДни * ?(Сторно, -1, 1);



		
	КонецЦикла;
	
КонецПроцедуры


#Область СреднийЗаработокФСС

// Функция дополняет исходные данные и вызывает метод расчета показателя 
// среднедневной заработок по правилам расчета ФСС.
//
Функция СреднийДневнойЗаработокФСС(ПараметрыРасчета) Экспорт 
	Если ПараметрыРасчета.ПрименятьПредельнуюВеличину Тогда
		
		МесяцыПредельныхВеличин = УчетПособийСоциальногоСтрахованияКлиентСервер.МесяцыПредельныхВеличин(ПараметрыРасчета);
		ПараметрыРасчета.ПредельныеВеличиныПоМесяцам = УчетПособийСоциальногоСтрахования.ПредельнаяВеличинаБазыСтраховыхВзносовПоФизическомуЛицу(МесяцыПредельныхВеличин,ПараметрыРасчета.Сотрудник.ФизическоеЛицо);
		ПараметрыРасчета.СуммаПределаСредней = УчетПособийСоциальногоСтрахования.СуммаПределаСредней(ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание);
	КонецЕсли;
	
	Возврат УчетПособийСоциальногоСтрахованияКлиентСервер.СреднийЗаработокФСС(ПараметрыРасчета);
	
КонецФункции   

Функция РасчетСреднейФССПоФакту(Организация, Сотрудник, ДатаПриемаНаРаботуСотрудника, ДатаНачалаСобытия, ПорядокРасчета) Экспорт     
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	

	БольничныйВМесяцеПриема = ?(НачалоМесяца(ДатаПриемаНаРаботуСотрудника) = НачалоМесяца(ДатаНачалаСобытия),Истина, Ложь);
    НачалоПериодаРасчета = ?(БольничныйВМесяцеПриема, ДатаПриемаНаРаботуСотрудника, НачалоМесяца(ДатаНачалаСобытия));

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация); 
	Запрос.УстановитьПараметр("Период", НачалоДня(ДатаНачалаСобытия)-1);
	Запрос.УстановитьПараметр("ОкончаниеПериодаРасчета", НачалоДня(ДатаНачалаСобытия)-1);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета", НачалоПериодаРасчета);
	
	Запрос.Выполнить();
	
	// Получаем ФОТ по данным плановых начислений.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
	"ПлановыеНачисления",
	МенеджерВременныхТаблиц,
	Истина,
	ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
	"ВТСотрудникиПериоды",
	"Сотрудник"));
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
	"ПлановыйФОТ",
	МенеджерВременныхТаблиц,
	Истина,
	ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
	"ВТСотрудникиПериоды",
	"Сотрудник")); 
	
	Запрос.Текст = "ВЫБРАТЬ
           |	Начисления.Ссылка КАК ВидРасчета
           |ИЗ
           |	ПланВидовРасчета.Начисления КАК Начисления
           |ГДЕ
           |	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени.УважительнаяПричинаДляБольничных = ИСТИНА
           |	ИЛИ Начисления.ИсключитьВремяПриРасчетеСреднегоЗаработкаФСС = ИСТИНА
           |	И Начисления.ПометкаУдаления = ЛОЖЬ"; 
	СписокВидовРасчетаДляИсключенияИзРасчетногоПериода = Новый Массив;
	СписокВидовРасчетаДляИсключенияИзРасчетногоПериода = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета");   
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФПД.Сотрудник КАК Сотрудник,   
	|	ФПД.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,   
	|	ФПД.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВЫБОР КОГДА ФПД.ПериодДействияНачало > &НачалоПериодаРасчета ТОГДА
	|		ФПД.ПериодДействияНачало
	|	ИНАЧЕ &НачалоПериодаРасчета 
	|	КОНЕЦ КАК ДатаНачалаНевыхода,
	|	ВЫБОР КОГДА ФПД.ПериодДействияКонец < &ОкончаниеПериодаРасчета ТОГДА
	|		ФПД.ПериодДействияКонец
	|	ИНАЧЕ &ОкончаниеПериодаРасчета 
	|	КОНЕЦ КАК ДатаОкончанияНевыхода
	|ПОМЕСТИТЬ ВТИнтервалыДляИсключенияФПД
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			(Сотрудник) В
	|					(ВЫБРАТЬ
	|						ИсходныеДанные.Сотрудник
	|					ИЗ
	|						ВТСотрудникиПериоды КАК ИсходныеДанные)
	|				И ВидРасчета В (&СписокВидовРасчетаДляИсключенияИзРасчетногоПериода)) КАК ФПД
	|ГДЕ
	|	ФПД.ПериодДействияНачало <= &ОкончаниеПериодаРасчета
	|	И ФПД.ПериодДействияКонец >= &НачалоПериодаРасчета 
	|	И ФПД.ГоловнаяОрганизация = &ГоловнаяОрганизация 
	|;
	|ВЫБРАТЬ
	|	ИнтервалыДляИсключенияФПД.Сотрудник КАК Сотрудник,  
	|	ИнтервалыДляИсключенияФПД.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИнтервалыДляИсключенияФПД.ГоловнаяОрганизация КАК ГоловнаяОрганизация,  
	|   СУММА(РАЗНОСТЬДАТ(ИнтервалыДляИсключенияФПД.ДатаНачалаНевыхода, ИнтервалыДляИсключенияФПД.ДатаОкончанияНевыхода, ДЕНЬ) + 1) КАК ДнейБолезниУходаЗаДетьми 
	|ПОМЕСТИТЬ ВТНевыходы
	|ИЗ ВТИнтервалыДляИсключенияФПД КАК ИнтервалыДляИсключенияФПД  
	|СГРУППИРОВАТЬ ПО 
	|	ИнтервалыДляИсключенияФПД.Сотрудник, 
	|	ИнтервалыДляИсключенияФПД.ФизическоеЛицо,	
	|	ИнтервалыДляИсключенияФПД.ГоловнаяОрганизация
	|";  
	Запрос.УстановитьПараметр("СписокВидовРасчетаДляИсключенияИзРасчетногоПериода", СписокВидовРасчетаДляИсключенияИзРасчетногоПериода);
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиПериоды.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо, 
	|	СотрудникиПериоды.Сотрудник КАК Сотрудник,       
	|   &ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	НАЧАЛОПЕРИОДА(СотрудникиПериоды.Период, МЕСЯЦ) КАК Период,   
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&НачалоПериодаРасчета, МЕСЯЦ), КОНЕЦПЕРИОДА(&ОкончаниеПериодаРасчета,МЕСЯЦ), ДЕНЬ) + 1 КАК ДнейКалендарныхВМесяце,
	|	РАЗНОСТЬДАТ(&НачалоПериодаРасчета, &ОкончаниеПериодаРасчета, ДЕНЬ) + 1 КАК ОтработаноДнейКалендарных 
	|ПОМЕСТИТЬ ВТДанныеПоКалендарнымДнямПолностью
	|ИЗ
	|	ВТСотрудникиПериоды КАК СотрудникиПериоды 
	|;
	|ВЫБРАТЬ    
	|	ДанныеПоКалендарнымДнямПолностью.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеПоКалендарнымДнямПолностью.Сотрудник КАК Сотрудник,     
	|	ДанныеПоКалендарнымДнямПолностью.ГоловнаяОрганизация КАК ГоловнаяОрганизация,     
	|	ДанныеПоКалендарнымДнямПолностью.Период КАК Период,               
	|	ДанныеПоКалендарнымДнямПолностью.ДнейКалендарныхВМесяце КАК ДнейКалендарныхВМесяце,
	|	ДанныеПоКалендарнымДнямПолностью.ОтработаноДнейКалендарных КАК ОтработаноДнейКалендарных,      
	|	ЕСТЬNULL(Невыходы.ДнейБолезниУходаЗаДетьми,0) КАК ДнейБолезниУходаЗаДетьми
	|ПОМЕСТИТЬ ВТДанныеПоКалендарнымДням
	|ИЗ
	|	ВТДанныеПоКалендарнымДнямПолностью КАК ДанныеПоКалендарнымДнямПолностью 
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТНевыходы КАК Невыходы  
	|	ПО ДанныеПоКалендарнымДнямПолностью.ФизическоеЛицо = Невыходы.ФизическоеЛицо
	|	И ДанныеПоКалендарнымДнямПолностью.ГоловнаяОрганизация = Невыходы.ГоловнаяОрганизация
	|;
	|ВЫБРАТЬ
	|	ДанныеПоКалендарнымДням.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеПоКалендарнымДням.Период КАК Период,       
	|	ДанныеПоКалендарнымДням.Сотрудник КАК Сотрудник,    
	|	ДанныеПоКалендарнымДням.ГоловнаяОрганизация КАК ГоловнаяОрганизация,    
	|	ДанныеПоКалендарнымДням.ОтработаноДнейКалендарных - ДанныеПоКалендарнымДням.ДнейБолезниУходаЗаДетьми КАК ОтработаноДнейКалендарных,
	|	ДанныеПоКалендарнымДням.ДнейБолезниУходаЗаДетьми КАК ДнейБолезниУходаЗаДетьми
	|ИЗ
	|	ВТДанныеПоКалендарнымДням КАК ДанныеПоКалендарнымДням 
	|";
	
	ДанныеВремени = УчетПособийСоциальногоСтрахованияРасширенный.ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеВремени.Добавить(), Выборка);
	КонецЦикла;  
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, МЕСЯЦ) КАК Период,
	|	ПлановыеНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ПорядокРасчета КАК ПорядокРасчета,
	|	СУММА(ВЫБОР
	|			КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
	|				ТОГДА ПлановыеНачисления.Размер
	|			ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
	|		КОНЕЦ) КАК Сумма   
	|ПОМЕСТИТЬ ВТПлановыйФОТПолностью
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
	|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
	|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
	|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
	|ГДЕ
	|	НЕ ПлановыеНачисления.Начисление.ВидЕСВ = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НеУчитывается) 
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, МЕСЯЦ),
	|	ПлановыеНачисления.Сотрудник.ФизическоеЛицо
	|;    
	|ВЫБРАТЬ
	|	ПлановыеНачисления.Период КАК Период,
	|	ПлановыеНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыеНачисления.ПорядокРасчета КАК ПорядокРасчета,
	|   ВЫРАЗИТЬ(ПлановыеНачисления.Сумма/ДанныеПоКалендарнымДням.ДнейКалендарныхВМесяце*(ДанныеПоКалендарнымДням.ОтработаноДнейКалендарных - ДанныеПоКалендарнымДням.ДнейБолезниУходаЗаДетьми) КАК ЧИСЛО(12,2)) КАК Сумма
	|ИЗ
	|	ВТПлановыйФОТПолностью КАК ПлановыеНачисления      
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПоКалендарнымДням КАК ДанныеПоКалендарнымДням
	|	ПО ПлановыеНачисления.ФизическоеЛицо = ДанныеПоКалендарнымДням.ФизическоеЛицо
	|	И ПлановыеНачисления.Период = ДанныеПоКалендарнымДням.Период  
	|";
	
	Запрос.УстановитьПараметр("ПорядокРасчета", ПорядокРасчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru='Не удалось дополнить таблицу: не обнаружено данных ФОТ.';uk='Не вдалося доповнити таблицю: не виявлено даних ФОП.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеНачислений = УчетПособийСоциальногоСтрахованияРасширенный.ПустаяТаблицаНачисленийСреднийЗаработокФСС();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеНачислений.Добавить(), Выборка);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеНачислений", ДанныеНачислений);           
	Результат.Вставить("ДанныеВремени", ДанныеВремени); 
	
	Возврат Результат

КонецФункции

// Функция дополняет исходные данные и вызывает метод расчета показателя 
// минимальный среднедневной заработок по правилам расчета ФСС.
//
Функция МинимальныйСреднедневнойЗаработокФСС(ПараметрыРасчета) Экспорт 

	ПараметрыРасчета.МинимальныйРазмерОплатыТруда = ЗарплатаКадры.МинимальныйРазмерОплатыТруда(ПараметрыРасчета.ДатаНачалаСобытия);
	
	Возврат УчетПособийСоциальногоСтрахованияКлиентСервер.МинимальныйСреднедневнойЗаработокФСС(ПараметрыРасчета);
	
КонецФункции

#Область ПолучениеДанныхДляРасчетаСреднегоЗаработкаПоДокументу

// Создает временную таблицу с реквизитами документов необходимыми для формирования
// структуры параметров расчета среднего заработка ФСС
//
// Параметры:
//  МенеджерВременныхТаблиц	 - менеджер временных таблиц, куда будет помещена временная таблица ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС 
//  МассивСсылок			 - массив ссылок, по которым необходимо получить данные, допустимые типы элементов - "ДокументСсылка.БольничныйЛист", "ДокументСсылка.ОтпускПоУходуЗаРебенком" 
//
Процедура СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МенеджерВременныхТаблиц, МассивСсылок) Экспорт
	
	УчетПособийСоциальногоСтрахованияВнутренний.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МенеджерВременныхТаблиц, МассивСсылок);
	
КонецПроцедуры

// Функция - Таблицы данных среднего заработка ФСС
//
// Параметры:
//  ИмяДокумента - Строка, имя документа для которого надо получить данные для расчета среднего заработка
//  МассивСсылок - массив, "ДокументСсылка.БольничныйЛист", "ДокументСсылка.ОтпускПоУходуЗаРебенком" 
// 
// Возвращаемое значение:
//  ДанныеДляРасчета - структура, содержит поля с таблицами данных для расчета среднего заработка по МассивСсылок 
//					ДанныеОНачислениях, Таблица значений	
//					ДанныеОВремени, Таблица значений	
//					ДанныеСтрахователей, Таблица значений	
//
Функция ТаблицыДанныхСреднегоЗаработкаФСС(ИмяДокумента, МассивСсылок) Экспорт
	
	Возврат УчетПособийСоциальногоСтрахованияВнутренний.ТаблицыДанныхСреднегоЗаработкаФСС(ИмяДокумента, МассивСсылок);
	
КонецФункции 

// Функция - Реквизиты документа для подготовки параметров расчета среднего заработка ФСС
//
// Возвращаемое значение:
//  РеквизитыДокумента - описание документа в котором рассчитывается средний заработок. 
//				Структура, содержащая поля:
//					Ссылка, "ДокументСсылка.БольничныйЛист"
//					Сотрудник, СправочникСсылка.Сотрудник
//					ФизическоеЛицо, СправочникСсылка.ФизическиеЛица
//					ДатаНачалаСобытия, Дата
//					ПрименятьПредельнуюВеличину, Булево
//					ИспользоватьДниБолезниУходаЗаДетьми, Булево
//					ПериодРасчетаСреднегоЗаработкаНачало, Дата
//					ПериодРасчетаСреднегоЗаработкаОкончание, Дата
//					ПериодРасчетаСреднегоЗаработкаПервыйГод, Дата
//					ПериодРасчетаСреднегоЗаработкаВторойГод, Дата
//					УчитыватьЗаработокПредыдущихСтрахователей, Булево
//					РасчетПоПравилам2010Года, Булево
//					ДоляНеполногоВремени, Число
//					РайонныйКоэффициентРФ, Число
//					МинимальныйРазмерОплатыТрудаРФ, Число
//
Функция РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС() Экспорт
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Ссылка");
	РеквизитыДокумента.Вставить("ФизическоеЛицо");
	РеквизитыДокумента.Вставить("Сотрудник");
	РеквизитыДокумента.Вставить("ДатаНачалаСобытия");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаМесяцНачало");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаМесяцОкончание");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаПервыйГод");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаВторойГод");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаНачало");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаОкончание");
	РеквизитыДокумента.Вставить("УчитыватьЗаработокПредыдущихСтрахователей", Ложь);
	РеквизитыДокумента.Вставить("РасчетПоПравилам2010Года", Ложь);
	РеквизитыДокумента.Вставить("ИспользоватьДниБолезниУходаЗаДетьми");
	РеквизитыДокумента.Вставить("СреднийДневнойЗаработок");
	РеквизитыДокумента.Вставить("МинимальныйРазмерОплатыТруда");
	РеквизитыДокумента.Вставить("РайонныйКоэффициентРФ", 1);
	РеквизитыДокумента.Вставить("ДоляНеполногоВремени", 1);
	РеквизитыДокумента.Вставить("ПрименятьПредельнуюВеличину");
	
	Возврат РеквизитыДокумента;
	
КонецФункции

// Функция - Данные документа для расчета среднего заработка ФСС
//
// Параметры:
//  РеквизитыДокумента - см. УчетПособийСоциальногоСтрахованияРасширенный.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС
//  ТаблицыДанныхОСреднем - см. УчетПособийСоциальногоСтрахованияРасширенный.ТаблицыДанныхСреднегоЗаработкаФСС 
// 
// Возвращаемое значение:
//  ДанныеДокумента - структура, содержит поля: 
//					ПараметрыРасчета, см. УчетПособийСоциальногоСтрахованияРасширенный.ПараметрыРасчетаСреднегоДневногоЗаработкаФССПоДокументу
//					ДанныеРасчетаСреднего, см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ДанныеРасчетаСреднегоЗаработкаФСС
//
Функция ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокумента, ТаблицыДанныхОСреднем) Экспорт
	
	ДанныеДокумента = Новый Структура("ПараметрыРасчета,ДанныеРасчетаСреднего");
	
	ДанныеОНачислениях 	= ТаблицаДанныеОНачисленияхИзДанныхСреднегоЗаработкаФСС(РеквизитыДокумента.Ссылка, ТаблицыДанныхОСреднем);
	ДанныеОВремени 		= ТаблицаДанныеОВремениИзДанныхСреднегоЗаработкаФСС(РеквизитыДокумента.Ссылка, ТаблицыДанныхОСреднем);
	ДанныеСтрахователей = ТаблицаДанныеСтрахователейИзДанныхСреднегоЗаработкаФСС(РеквизитыДокумента.Ссылка, ТаблицыДанныхОСреднем);
	
	ДанныеДокумента.ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФССПоДокументу(РеквизитыДокумента, ДанныеОНачислениях, ДанныеОВремени, ДанныеСтрахователей);
	ДанныеДокумента.ДанныеРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ДанныеРасчетаСреднегоЗаработкаФСС(ДанныеДокумента.ПараметрыРасчета);
	
	Возврат ДанныеДокумента;
	
КонецФункции

// Функция - Параметры расчета среднего дневного заработка ФСС по документу
//
// Параметры:
//  РеквизитыДокумента	 - 	см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.РеквизитыДокументаДляРасчетаСреднегоДневногоЗаработкаФСС 
//  ДанныеОНачислениях	 - 	см. УчетПособийСоциальногоСтрахованияРасширенный.ТаблицыДанныхСреднегоЗаработкаФСС 
//  ДанныеОВремени		 - 	см. УчетПособийСоциальногоСтрахованияРасширенный.ТаблицыДанныхСреднегоЗаработкаФСС 
//  ДанныеСтрахователей	 - 	см. УчетПособийСоциальногоСтрахованияРасширенный.ТаблицыДанныхСреднегоЗаработкаФСС 
// 
// Возвращаемое значение:
//  ПараметрыРасчета - структура, см.УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС
//
Функция ПараметрыРасчетаСреднегоДневногоЗаработкаФССПоДокументу(РеквизитыДокумента, ДанныеОНачислениях, ДанныеОВремени, ДанныеСтрахователей) Экспорт
	
	РасчетныеМесяцы = МесяцыПериодаРасчетаСреднего(РеквизитыДокумента);
	
	ПараметрыРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	ПараметрыРасчета.ДатаНачалаСобытия 							= РеквизитыДокумента.ДатаНачалаСобытия;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало 		= РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание 	= РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	ПараметрыРасчета.РасчетныеМесяцы							= РасчетныеМесяцы;
	ПараметрыРасчета.НеполныйРасчетныйПериод 					= Ложь;	
	ПараметрыРасчета.ДанныеНачислений 							= ДанныеОНачислениях;
	ПараметрыРасчета.ДанныеВремени 								= ДанныеОВремени;
	ПараметрыРасчета.ДанныеСтрахователей 						= ДанныеСтрахователей;
	ПараметрыРасчета.УчитыватьЗаработокПредыдущихСтрахователей 	= РеквизитыДокумента.УчитыватьЗаработокПредыдущихСтрахователей;
	ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми 		= РеквизитыДокумента.ИспользоватьДниБолезниУходаЗаДетьми;
	ПараметрыРасчета.МинимальныйРазмерОплатыТруда 				= РеквизитыДокумента.МинимальныйРазмерОплатыТруда;
	ПараметрыРасчета.СреднийДневнойЗаработок 					= РеквизитыДокумента.СреднийДневнойЗаработок;
	ПараметрыРасчета.ПорядокРасчета 							= УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(РеквизитыДокумента.ДатаНачалаСобытия);
	ПараметрыРасчета.ДоляНеполногоВремени 						= РеквизитыДокумента.ДоляНеполногоВремени;
	ПараметрыРасчета.Сотрудник 									= РеквизитыДокумента.Сотрудник;
	ПараметрыРасчета.ПрименятьПредельнуюВеличину 				= РеквизитыДокумента.ПрименятьПредельнуюВеличину;
	
	МесяцыПредельныхВеличин = УчетПособийСоциальногоСтрахованияКлиентСервер.МесяцыПредельныхВеличин(ПараметрыРасчета);
	
	ПараметрыРасчета.ПредельныеВеличиныПоМесяцам					= УчетПособийСоциальногоСтрахования.ПредельнаяВеличинаБазыСтраховыхВзносовПоФизическомуЛицу(МесяцыПредельныхВеличин, РеквизитыДокумента.Сотрудник.ФизическоеЛицо);
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ТаблицаДанныеОНачисленияхИзДанныхСреднегоЗаработкаФСС(Ссылка, ТаблицыДанныхСреднегоЗаработкаФСС)
	Возврат ТаблицаОтобраннаяПоПолю(ТаблицыДанныхСреднегоЗаработкаФСС["ДанныеОНачислениях"], "Ссылка", Ссылка);
КонецФункции

Функция ТаблицаДанныеОВремениИзДанныхСреднегоЗаработкаФСС(Ссылка, ТаблицыДанныхСреднегоЗаработкаФСС)
	Возврат ТаблицаОтобраннаяПоПолю(ТаблицыДанныхСреднегоЗаработкаФСС["ДанныеОВремени"], "Ссылка", Ссылка);
КонецФункции

Функция ТаблицаДанныеСтрахователейИзДанныхСреднегоЗаработкаФСС(Ссылка, ТаблицыДанныхСреднегоЗаработкаФСС)
	Возврат ТаблицаОтобраннаяПоПолю(ТаблицыДанныхСреднегоЗаработкаФСС["ДанныеСтрахователей"], "Ссылка", Ссылка);
КонецФункции

Функция ГодыПериодаРасчетаСреднего(Объект) Экспорт
	
	Годы = Новый Массив;
	
	Годы.Добавить(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод);
	Годы.Добавить(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод);
	
	Возврат Годы;
	
КонецФункции

Функция МесяцыПериодаРасчетаСреднего(Объект) Экспорт
	Месяцы = Новый Массив;
	
	НачалоМесяцаПредельныхВеличин = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
	Пока КонецМесяца(НачалоМесяцаПредельныхВеличин) <= КонецДня(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) Цикл
		Месяцы.Добавить(НачалоМесяцаПредельныхВеличин);
		НачалоМесяцаПредельныхВеличин = ДобавитьМесяц(НачалоМесяцаПредельныхВеличин,1);
	КонецЦикла;	
	
	Возврат Месяцы;
	
КонецФункции
Функция СуммаПределаСредней(ПериодРасчетаСреднегоЗаработкаОкончание) Экспорт
	ПоследнийМесяцРасчетногоПериода = Новый Массив;
	ПоследнийМесяцРасчетногоПериода.Добавить(НачалоМесяца(ПериодРасчетаСреднегоЗаработкаОкончание));
	ПредельныеВеличиныПоМесяцам = ПредельнаяВеличинаБазыСтраховыхВзносов(ПоследнийМесяцРасчетногоПериода);
	Если ПредельныеВеличиныПоМесяцам.Количество() > 0 Тогда
		СуммаПределаСредней = Окр(ПредельныеВеличиныПоМесяцам[НачалоМесяца(ПериодРасчетаСреднегоЗаработкаОкончание)]/30.44,2);
	Иначе
		СуммаПределаСредней = 0
	КонецЕсли;	
	
	Возврат СуммаПределаСредней;
	
КонецФункции

Функция ТаблицаОтобраннаяПоПолю(ИсходнаяТаблица, Поле, ЗначениеОтбора)
	
	ОтобраннаяТаблица = ИсходнаяТаблица.СкопироватьКолонки();
	
	Для каждого Строка Из ИсходнаяТаблица Цикл
		Если Строка[Поле] = ЗначениеОтбора Тогда
			ЗаполнитьЗначенияСвойств(ОтобраннаяТаблица.Добавить(), Строка);
		КонецЕсли;
	КонецЦикла;

	Возврат ОтобраннаяТаблица;

КонецФункции

#КонецОбласти 

#Область КонструкторыТаблицДанныхСреднегоЗаработка

// Создает таблицу значений со структурой аналогичной структуре табличной части СреднийЗаработокФСС
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаНачисленийСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС"));
	ТаблицаДанных.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("Корректировка", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части ОтработанноеВремяДляСреднегоФСС
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	ТаблицаДанных.Колонки.Добавить("ДнейБолезниУходаЗаДетьми", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	ТаблицаДанных.Колонки.Добавить("Корректировка", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части СреднийЗаработокДанныеСтрахователей
// для хранения данных среднего заработка в документе.
Функция ПустаяТаблицаДанныеСтрахователейСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"),);
	ТаблицаДанных.Колонки.Добавить("Страхователь", ОписаниеТипаСтраховательСреднийЗаработокФСС());
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("ДнейБолезниУходаЗаДетьми", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	                                                   
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ОписаниеТипаСтраховательСреднийЗаработокФСС() 
	Возврат УчетПособийСоциальногоСтрахованияВнутренний.ОписаниеТипаСтраховательСреднийЗаработокФСС();
КонецФункции 

#КонецОбласти

#КонецОбласти 

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.35";
	Обработчик.Процедура = "УчетПособийСоциальногоСтрахования.ИсключитьВремяПриРасчетеСреднегоЗаработкаФСС";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.39";
	Обработчик.Процедура = "УчетПособийСоциальногоСтрахования.ИсключитьВремяПриРасчетеСреднегоЗаработкаФССМобилизация";

КонецПроцедуры	

Процедура ИсключитьВремяПриРасчетеСреднегоЗаработкаФСС() Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
				   |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойВСвязиСПриостановкойТрудовогоДоговора)
				   |	И НЕ Начисления.ИсключитьВремяПриРасчетеСреднегоЗаработкаФСС
				   |	И НЕ Начисления.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектВР = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектВР.ИсключитьВремяПриРасчетеСреднегоЗаработкаФСС = Истина;
		ОбъектВР.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ИсключитьВремяПриРасчетеСреднегоЗаработкаФССМобилизация() Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
				   |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МобилизацияБезОплаты)
				   |	И НЕ Начисления.ИсключитьВремяПриРасчетеСреднегоЗаработкаФСС
				   |	И НЕ Начисления.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектВР = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектВР.ИсключитьВремяПриРасчетеСреднегоЗаработкаФСС = Истина;
		ОбъектВР.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры	



Процедура ЗаполнитьВидПособияВПособияхСоциальногоСтрахования() Экспорт
	
	УчетПособийСоциальногоСтрахованияВнутренний.ЗаполнитьВидПособияВПособияхСоциальногоСтрахования();
	
КонецПроцедуры

Процедура ЗаполнитьПризнакПособиеВыплачиваетсяФССВСуществующихБольничныхЛистах() Экспорт
	
	УчетПособийСоциальногоСтрахованияВнутренний.ЗаполнитьПризнакПособиеВыплачиваетсяФССВСуществующихБольничныхЛистах();
	
КонецПроцедуры

#КонецОбласти   
#Область ФункцииДляПолученияСтраховогоСтажа

Функция РасчетСтраховогоСтажаПоДаннымПФУ(ДатаНачалаСобытия, Организация, Сотрудник, ДанныеСтажа) Экспорт
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаСобытия", ДатаНачалаСобытия);
	ПараметрыОтчета.Вставить("Сотрудник", Сотрудник);
	
	// Получение данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияСтажа("СтажиСотрудниковПоДаннымПФУ",
		ПараметрыОтчета, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(Организация, "Организация");
	
	Если СтрокаОрганизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтрокаСотрудник = СтрокаОрганизации.Строки;
    ДанныеСтажа.ТабельныйНомерСПрефиксами = СтрокаСотрудник[0].ТабельныйНомерСПрефиксами;
    ДанныеСтажа.Подразделение = СтрокаСотрудник[0].Подразделение;
	ДанныеСтажа.МинимальныйПериодСправки = СтрокаСотрудник[0].МинимальныйПериодСправки;
	ДанныеСтажа.МаксимальныйПериодСправки = СтрокаСотрудник[0].МаксимальныйПериодСправки;
    ДанныеСтажа.ЛетОбщегоСтажа				= СтрокаСотрудник[0].ЛетОбщегоСтажа;
	ДанныеСтажа.МесяцевОбщегоСтажа 			= СтрокаСотрудник[0].МесяцевОбщегоСтажа;
	ДанныеСтажа.ДнейОбщегоСтажа			    = СтрокаСотрудник[0].ДнейОбщегоСтажа;
	ДанныеСтажа.МесяцевОбщегоСтажа12Месяцев = СтрокаСотрудник[0].МесяцевОбщегоСтажа12Месяцев;
	ДанныеСтажа.ДнейОбщегоСтажа12Месяцев    = СтрокаСотрудник[0].ДнейОбщегоСтажа12Месяцев;
	ДанныеСтажа.ЛетНачальногоСтажа			= СтрокаСотрудник[0].ЛетНачальногоСтажа;
	ДанныеСтажа.МесяцевНачальногоСтажа		= СтрокаСотрудник[0].МесяцевНачальногоСтажа;
	ДанныеСтажа.ДнейНачальногоСтажа			= СтрокаСотрудник[0].ДнейНачальногоСтажа;
	ДанныеСтажа.ЛетСтажаПФУ					= СтрокаСотрудник[0].ЛетСтажаПФУ;
	ДанныеСтажа.МесяцевСтажаПФУ				= СтрокаСотрудник[0].МесяцевСтажаПФУ;
	ДанныеСтажа.ДнейСтажаПФУ				= СтрокаСотрудник[0].ДнейСтажаПФУ;
	ДанныеСтажа.КоличествоЛетВОрганизации	= СтрокаСотрудник[0].КоличествоЛетВОрганизации;
	ДанныеСтажа.КоличествоМесяцевВОрганизации = СтрокаСотрудник[0].КоличествоМесяцевВОрганизации;
	ДанныеСтажа.КоличествоДнейВОрганизации	= СтрокаСотрудник[0].КоличествоДнейВОрганизации;
	ДанныеСтажа.ДатаОтсчетаДоНачалаСобытия	= СтрокаСотрудник[0].ДатаОтсчетаДоНачалаСобытия;
	Возврат ДанныеСтажа
	
КонецФункции

Процедура ДанныеДляЗаполненияСтажа(Вариант, ПараметрыОтчета, ДанныеОтчета)
	
	СхемаКомпоновки = Отчеты.СтажиСотрудниковПоДаннымПФУ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ПараметрыОтчета.Вставить("Вариант", Вариант);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Новый Структура("СхемаКомпоновкиДанных", СхемаКомпоновки));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, СхемаКомпоновки.ВариантыНастроек[Вариант].Настройки);
	
	// Запрос данных
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
		НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

Функция ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, НастройкиВарианта)
	
	Организация = ПараметрыОтчета.Организация;
	Период = ПараметрыОтчета.ДатаНачалаСобытия;
	Сотрудник = ПараметрыОтчета.Сотрудник;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных; 
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КлючВарианта", Вариант);
	ПараметрПериод = ЗарплатаКадрыОтчеты.НайтиПараметр(КомпоновщикНастроек, "Период");
	Если ПараметрПериод = Неопределено Тогда
		ПараметрПериод = ЗарплатаКадрыОтчеты.НайтиПараметр(КомпоновщикНастроек, "ПериодОтчета");
	КонецЕсли;                                                                         
	ПараметрПериод.Значение.Дата = Период;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Отбор = Настройки.Отбор;
	Отбор.Элементы.Очистить();

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Организация", ВидСравненияКомпоновкиДанных.Равно, Организация);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Сотрудник", ВидСравненияКомпоновкиДанных.Равно, Сотрудник);
	МассивВидовЗанятости = Новый Массив;
	МассивВидовЗанятости.Добавить(Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	МассивВидовЗанятости.Добавить(Перечисления.ВидыЗанятости.Совместительство);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ВидЗанятости", ВидСравненияКомпоновкиДанных.ВСписке, МассивВидовЗанятости);
	// Далее следует настройка варианта расшифровки.
	Если Вариант <> "Расшифровка" Тогда
		Возврат КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;

	ВидОтчета = ПараметрыОтчета.ВидОтчета;
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

#КонецОбласти


#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	
КонецПроцедуры

#КонецОбласти
