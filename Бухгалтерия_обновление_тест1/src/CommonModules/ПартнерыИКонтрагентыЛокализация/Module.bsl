
#Область ПрограммныйИнтерфейс

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	//++ Локализация
	//++ НЕ УТ
	Команда = Документы.ЗаказПереработчику.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	//-- НЕ УТ
	//-- Локализация
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов_Контрагенты(КомандыОтчетов, Параметры) Экспорт
	КомандаОтчет = ВариантыОтчетовЛокализация.ДобавитьКомандуДосьеКонтрагента(КомандыОтчетов);
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов_Партнеры(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСФормами

// Обработчик события ПриСозданииНаСервере форм элемента справочника Партнеры.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ВыборГоловногоКонтрагентаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	//++ Локализация
    Если ЗначениеЗаполнено(Форма.Параметры.ИННПлательщикаНДС) Тогда    
		
        ТаблицаКонтрагентов = ВозможныеГоловныеКонтрагенты(Форма.Параметры.ИННПлательщикаНДС, Форма.Параметры.Контрагент);
		
		Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
			Форма.СписокВыбора.Добавить(
				СтрокаТаблицы.Ссылка,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                    НСтр("ru='%1, Код по ЕДРПОУ: %2';uk='%1, Код за ЄДРПОУ: %2'"),
					СтрокаТаблицы.Представление,
                    ?(ЗначениеЗаполнено(СтрокаТаблицы.КодПоЕДРПОУ), СтрокаТаблицы.КодПоЕДРПОУ, НСтр("ru='<не заполнен>';uk='<не заповнений>'"))));
		КонецЦикла;
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти


#Область ОбособленныеПодразделения
//++ Локализация

// Определяет возможных головных контрагентов по ИНН плательщика НДС.
// 
// Параметры:
//  ИНН  - Строка - ИНН плательщика НДС, по которому необходимо получить список контрагентов.
//  Контрагент - Справочник.Контрагенты - ссылка на контрагента, исключаемого из поиска.
//
// Возвращаемое значение:
//  ТаблицаЗначений   - таблица контрагентов, с колонками
//   *Ссылка         - СправочникСсылка.Контрагенты - возможный головной контрагент.
//   *Представление  - Строка - представление возможного головного контрагента.
//
Функция ВозможныеГоловныеКонтрагенты(ИНН, Контрагент = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка        КАК Ссылка,
    |	Контрагенты.Представление КАК Представление,
    |	Контрагенты.КодПоЕДРПОУ   КАК КодПоЕДРПОУ
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
    |	Контрагенты.ИННПлательщикаНДС = &ИНН
	|	И Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|	И НЕ Контрагенты.ОбособленноеПодразделение
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И Контрагенты.Ссылка <> &Ссылка";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Изменяет ИНН плательщика НДС в подчиненных головному контрагентах, если они не совпадают
//
// Параметры:
//  ГоловнойКонтрагент - Справочник.Контрагенты - контрагент, обособленные подразделения которого проверяются.
//  ИННПлательщикаНДС - Строка - ИНН головного контрагента
//
Процедура ИзменитьИННПлательщикаНДСПодчиненныхКонтрагентов(ГоловнойКонтрагент, ИННПлательщикаНДС) Экспорт	    
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнойКонтрагент", ГоловнойКонтрагент);
    Запрос.УстановитьПараметр("ИННПлательщикаНДС", ИННПлательщикаНДС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ОбособленноеПодразделение
	|	И Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
    |	И Контрагенты.ИННПлательщикаНДС <> &ИННПлательщикаНДС";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
			
		ОбособленноеПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
        ОбособленноеПодразделениеОбъект.ИННПлательщикаНДС = ИННПлательщикаНДС;
		ОбособленноеПодразделениеОбъект.Записать();
			
	КонецЦикла;
	
КонецПроцедуры

//-- Локализация

// Выполняет поиск непривязанных обособленных подразделений
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура ВыполнитьПоискНепривязанныхОбособленныхПодразделений(Форма) Экспорт
	//++ Локализация
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформацияКонтрагента.Ссылка КАК Ссылка,
	|	КонтактнаяИнформацияКонтрагента.Вид КАК Вид,
	|	МАКСИМУМ(КонтактнаяИнформацияКонтрагента.ДействуетС) КАК ДействуетС
	|ПОМЕСТИТЬ СрезКонтактнойИнформацииКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО КонтактнаяИнформацияКонтрагента.Ссылка = Контрагенты.Ссылка
	|ГДЕ
	|	КонтактнаяИнформацияКонтрагента.ДействуетС <= &ДействуетС
	|	И КонтактнаяИнформацияКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
	|	И Контрагенты.ОбособленноеПодразделение
	|	И Контрагенты.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |	И Контрагенты.ИННПлательщикаНДС = &ИННПлательщикаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтактнаяИнформацияКонтрагента.Вид,
	|	КонтактнаяИнформацияКонтрагента.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Представление КАК Представление,
    |	Контрагенты.КодФилиала КАК КодФилиала,
	|	Контакты.Представление КАК ЮридическийАдрес,
	|	ИСТИНА КАК Выбран
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК Контакты
	|		ПО Контрагенты.Ссылка = Контакты.Ссылка
	|ГДЕ
	|	Контрагенты.ОбособленноеПодразделение
	|	И Контрагенты.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |	И Контрагенты.ИННПлательщикаНДС = &ИННПлательщикаНДС";
	
	Если Форма.НаОснованииОбособленногоКонтрагента Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И Контрагенты.Ссылка <> &КонтрагентИсключение";
		Запрос.УстановитьПараметр("КонтрагентИсключение", Форма.КонтрагентОснование);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
    Запрос.УстановитьПараметр("ИННПлательщикаНДС", Форма.ИННПлательщикаНДС);
	Запрос.УстановитьПараметр("ДействуетС", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	
	Форма.ОбособленныеПодразделения.Очистить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(Форма.ОбособленныеПодразделения, РезультатЗапроса.Выгрузить());
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПроверкиКорректностиЗаполнения

// Проверяет корректность заполнения контрагента. Вызывается из процедуры "ОбработкаПроверкиЗаполнения".
//
// Параметры:
//  Объект     - СправочникОбъект.Контрагенты, ФормаКлиентскогоПриложения - объект, содержащий данные контрагента.
//  Контрагент - СправочникСсылка.Контрагенты - ссылка на проверяемого контрагент.
//  Отказ      - Булево - флаг отказа в процедуре проверки заполнения.
//
Процедура ПроверитьКорректностьЗаполненияКонтрагента(Объект, Контрагент, Отказ) Экспорт
	//++ Локализация
	КлючДанных = ?(ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения"), Неопределено, Объект);
	Если Объект.ОбособленноеПодразделение И ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) Тогда
		
		Если Объект.ГоловнойКонтрагент <> Контрагент Тогда
			
			СвойстваГоловногоКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
                Объект.ГоловнойКонтрагент, "Наименование, ИННПлательщикаНДС");
                
            Если ЗначениеЗаполнено(СвойстваГоловногоКонтрагента.ИННПлательщикаНДС) И СвойстваГоловногоКонтрагента.ИННПлательщикаНДС <> Объект.ИННПлательщикаНДС Тогда    
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                    НСтр("ru='ИНН плательщика НДС контрагента не равен указанному в головном подразделении';uk='ІПН платника ПДВ контрагента не дорівнює вказаному в головному підрозділі'"),
					СвойстваГоловногоКонтрагента.Наименование);
                ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, КлючДанных, "ИННПлательщикаНДС", , Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
    
    Если ЗначениеЗаполнено(Объект.ИННПлательщикаНДС) Тогда 	
    
		ВыборкаКонтрагент = ИННПлательщикаНДСКодФилиалаУжеИспользуетсяВИнформационнойБазе(Объект.ИННПлательщикаНДС, Объект.КодФилиала, Объект.ОбособленноеПодразделение, Контрагент);
		
		Если ВыборкаКонтрагент <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			                                СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                                              НСтр("ru='Данные ИНН плательщика НДС и код филиала уже указаны для другого контрагента, ответственный - %1.';uk='Дані ІПН платника ПДВ та код філії вже вказані для іншого контрагента, відповідальний - %1.'"),
			                                  ВыборкаКонтрагент.ОсновнойМенеджер),
			КлючДанных,
            "ИННПлательщикаНДС",
			,
			Отказ);
			
        КонецЕсли;
        
		Если НЕ Объект.ПлательщикНДС И НЕ ПартнерыИКонтрагенты.УпрощенныйВводДоступен() Тогда			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='У неплательщика не должен быть заполнен ИНН плательщика НДС';uk='У неплатника не повинен бути заповнений ІПН платника ПДВ'"),
				КлючДанных,
				"ИННПлательщикаНДС",
				,
				Отказ
			);
		КонецЕсли;
		
	Иначе
        
		Если Объект.ПлательщикНДС И (НЕ ПартнерыИКонтрагенты.УпрощенныйВводДоступен()) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='У плательщика НДС не указан ИНН плательщика НДС';uk='У платника ПДВ не зазначений ІПН платника ПДВ'"),
				КлючДанных,
				"ИННПлательщикаНДС",
				,
				Отказ
			);
			
		КонецЕсли;
        
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Объект.КодПоЕДРПОУ) Тогда 	
    
        ВыборкаКонтрагент = КодПоЕДРПОУУжеИспользуетсяВИнформационнойБазе(Объект.КодПоЕДРПОУ, Контрагент);
		
		Если ВыборкаКонтрагент <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
                СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                    НСтр("ru='Данный код по ЕГРПОУ уже указан для другого контрагента, ответственный - %1.';uk='Цей код за ЄДРПОУ уже зазначений для іншого контрагента, відповідальний - %1.'"),
			        ВыборкаКонтрагент.ОсновнойМенеджер
                ),
			    КлючДанных,
                "КодПоЕДРПОУ",
			    ,
			    Отказ
            );
        КонецЕсли;
		
	Иначе
        
        Если НЕ ПартнерыИКонтрагенты.УпрощенныйВводДоступен() Тогда
            
		  	Если (Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель 
		  			ИЛИ Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо) Тогда
                    
		  		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		  		    НСтр("ru='Не указан код по ЕГРПОУ';uk='Не вказано код за ЄДРПОУ'"),
		  		    КлючДанных,
		  		    "КодПоЕДРПОУ",
		  		    ,
		  		    Отказ
                );
                
		 	КонецЕсли;
			
		КонецЕсли;
        
    КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ПрочийПрограммныйИнтерфейс

// Дополняет значения реквизитов выбранного контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Ссылка на контрагента.
//  РеквизитыКонтрагента - Структура - реквизиты выбранного контрагента.
//  ДатаСведений - Дата - дата получения сведений.
//
// Возвращаемое значение:
//  Структура - реквизиты выбранного контрагента.
//
Процедура ДополнитьРеквизитыКонтрагента(Контрагент, РеквизитыКонтрагента, ДатаСведений = Неопределено) Экспорт
	//++ Локализация
	Запрос = Новый Запрос;
	
	Если ДатаСведений <> Неопределено Тогда
		
		Запрос.Текст = "
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
        |	ИсторияПлательщикаНДС.ПлательщикНДС КАК ПлательщикНДС,
        |	ИсторияПлательщикаНДС.ИННПлательщикаНДС КАК ИННПлательщикаНДС,
        |	ИсторияПлательщикаНДС.КодФилиала КАК КодФилиала
        |ПОМЕСТИТЬ ИсторическоеЗначениеПлательщикаНДС
        |ИЗ
        |	Справочник.Контрагенты.ИсторияПлательщикаНДС КАК ИсторияПлательщикаНДС
        |ГДЕ
        |	ИсторияПлательщикаНДС.Ссылка = &Контрагент
        |	И ИсторияПлательщикаНДС.Период <= &ДатаСведений
        |
        |УПОРЯДОЧИТЬ ПО
        |	ИсторияПлательщикаНДС.Период УБЫВ
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	Контрагенты.КодПоЕДРПОУ                                                                       КАК КодПоЕДРПОУ,
        |	ЕСТЬNULL(ИсторическоеЗначениеПлательщикаНДС.ПлательщикНДС, Контрагенты.ПлательщикНДС)         КАК ПлательщикНДС,
        |	ЕСТЬNULL(ИсторическоеЗначениеПлательщикаНДС.ИННПлательщикаНДС, Контрагенты.ИННПлательщикаНДС) КАК ИННПлательщикаНДС,
        |	ЕСТЬNULL(ИсторическоеЗначениеПлательщикаНДС.КодФилиала, Контрагенты.КодФилиала)               КАК КодФилиала,
        |	Контрагенты.НомерСвидетельстваПлательщикаНДС                                                  КАК НомерСвидетельстваПлательщикаНДС,
		|	Контрагенты.НалоговыйНомер                                                                    КАК НалоговыйНомер,
		|	Контрагенты.СтранаРегистрации                                                                 КАК СтранаРегистрации,
		|	ЕСТЬNULL(СтраныМира.КодАльфа2, """")                                                          КАК КодАльфа2СтраныРегистрации,
		|	Контрагенты.ОбособленноеПодразделение                                                         КАК ОбособленноеПодразделение,
		|	Контрагенты.ГоловнойКонтрагент                                                                КАК ГоловнойКонтрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
		|		ПО Контрагенты.СтранаРегистрации = СтраныМира.Ссылка
        |	ЛЕВОЕ СОЕДИНЕНИЕ ИсторическоеЗначениеПлательщикаНДС КАК ИсторическоеЗначениеПлательщикаНДС
        |		ПО (ИСТИНА)
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент
		|";
		
		Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	Контрагенты.КодПоЕДРПОУ               КАК КодПоЕДРПОУ,
        |	Контрагенты.ПлательщикНДС             КАК ПлательщикНДС,
        |	Контрагенты.ИННПлательщикаНДС         КАК ИННПлательщикаНДС,
        |	Контрагенты.КодФилиала                КАК КодФилиала,
        |	Контрагенты.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельстваПлательщикаНДС,
		|	Контрагенты.НалоговыйНомер            КАК НалоговыйНомер,
		|	Контрагенты.СтранаРегистрации         КАК СтранаРегистрации,
		|	ЕСТЬNULL(СтраныМира.КодАльфа2, """")  КАК КодАльфа2СтраныРегистрации,
		|	Контрагенты.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Контрагенты.ГоловнойКонтрагент        КАК ГоловнойКонтрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
		|		ПО Контрагенты.СтранаРегистрации = СтраныМира.Ссылка
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
        КодПоЕДРПОУ                = Выборка.КодПоЕДРПОУ;
        ПлательщикНДС              = Выборка.ПлательщикНДС;
        ИННПлательщикаНДС          = Выборка.ИННПлательщикаНДС;
        КодФилиала                 = Выборка.КодФилиала;
        НомерСвидетельстваПлательщикаНДС = Выборка.НомерСвидетельстваПлательщикаНДС;
		НалоговыйНомер             = Выборка.НалоговыйНомер;
		СтранаРегистрации          = Выборка.СтранаРегистрации;
		КодАльфа2СтраныРегистрации = Выборка.КодАльфа2СтраныРегистрации;
		ОбособленноеПодразделение  = Выборка.ОбособленноеПодразделение;
		ГоловнойКонтрагент         = Выборка.ГоловнойКонтрагент;
	Иначе
        КодПоЕДРПОУ                = "";
        ПлательщикНДС              = "";
        ИННПлательщикаНДС          = "";
        КодФилиала                 = "";
        НомерСвидетельстваПлательщикаНДС = "";
        НалоговыйНомер             = "";
		СтранаРегистрации          = Справочники.СтраныМира.ПустаяСсылка();
		КодАльфа2СтраныРегистрации = "";
		ОбособленноеПодразделение  = Ложь;
		ГоловнойКонтрагент         = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
    РеквизитыКонтрагента.Вставить("КодПоЕДРПОУ",                КодПоЕДРПОУ);
    РеквизитыКонтрагента.Вставить("ПлательщикНДС",              ПлательщикНДС);
    РеквизитыКонтрагента.Вставить("ИННПлательщикаНДС",          ИННПлательщикаНДС);
    РеквизитыКонтрагента.Вставить("КодФилиала",                 КодФилиала);
    РеквизитыКонтрагента.Вставить("НомерСвидетельстваПлательщикаНДС", НомерСвидетельстваПлательщикаНДС);
	РеквизитыКонтрагента.Вставить("НалоговыйНомер",             НалоговыйНомер);
	РеквизитыКонтрагента.Вставить("СтранаРегистрации",          СтранаРегистрации);
	РеквизитыКонтрагента.Вставить("КодАльфа2СтраныРегистрации", КодАльфа2СтраныРегистрации);
	РеквизитыКонтрагента.Вставить("ОбособленноеПодразделение",  ОбособленноеПодразделение);
	РеквизитыКонтрагента.Вставить("ГоловнойКонтрагент",         ГоловнойКонтрагент);
	
	//-- Локализация
КонецПроцедуры

//++ Локализация

// Определяет, есть ли в базе контрагент с таким же набором ИНН плательщика НДС/код филиала
// Параметры:
//  ИННПлательщикаНДС  - Строка - ИНН плательщика НДС контрагента.
//  КодФилиала - Строка - код филиала контрагента.
//  ИсключаяСсылку  - СправочникСсылка.Контрагенты - контрагент, который исключается при поиске.
//
// Возвращаемое значение:
//   Булево   - Истина, если контрагент с таким же набором ИНН плательщика НДС/код филиала существует, и ложь в обратном случае.
//
Функция ИННПлательщикаНДСКодФилиалаУжеИспользуетсяВИнформационнойБазе(ИННПлательщикаНДС, КодФилиала, ОбособленноеПодразделение, ИсключаяСсылку = Неопределено) Экспорт	
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНН у головного контрагента и его обособленных подразделений совпадает
	// при создании обособленного подразделения уникальность самого ИНН проверять нет необходимости
	// либо он совпадает с головным, либо, если головной еще не указан, может совпадать с любым
	// может быть сколько угодно обособленных подразделений без номера филиала
	// но если номер филиала указан, он должен быть уникален, т. е. уникальна комбинация ИНН + Номер филиала
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Партнеры.Ссылка КАК Партнер,
	|	Партнеры.Код КАК Код,
	|	ПРЕДСТАВЛЕНИЕ(Партнеры.ОсновнойМенеджер) КАК ОсновнойМенеджер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|ГДЕ
	|	Контрагенты.ИННПлательщикаНДС = &ИННПлательщикаНДС
	|	И Контрагенты.Ссылка <> &Ссылка
	|	И (Контрагенты.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ Контрагенты.ГоловнойКонтрагент = Контрагенты.Ссылка)
	|	И НЕ &ОбособленноеПодразделение
	|	И НЕ Контрагенты.ОбособленноеПодразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	Партнеры.Ссылка,
	|	Партнеры.Код,
	|	ПРЕДСТАВЛЕНИЕ(Партнеры.ОсновнойМенеджер)
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|ГДЕ
	|	Контрагенты.ИННПлательщикаНДС = &ИННПлательщикаНДС
	|	И Контрагенты.КодФилиала = &КодФилиала
	|	И Контрагенты.Ссылка <> &Ссылка
	|	И &КодФилиалаЗаполнен";
	
	Запрос.УстановитьПараметр("КодФилиалаЗаполнен", ЗначениеЗаполнено(КодФилиала));
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ИННПлательщикаНДС", ИННПлательщикаНДС);
	Запрос.УстановитьПараметр("КодФилиала", КодФилиала);
	Запрос.УстановитьПараметр("Ссылка",ИсключаяСсылку);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет, есть ли в базе контрагент с таким же кодом по ЕДРПОУ
// Параметры:
//  КодПоЕДРПОУ  - Строка - ИНН плательщика НДС контрагента.
//  ИсключаяСсылку  - СправочникСсылка.Контрагенты - контрагент, который исключается при поиске.
//
// Возвращаемое значение:
//   Булево   - Истина, если контрагент с таким же кодом по ЕДРПОУ существует, и ложь в обратном случае.
//
Функция КодПоЕДРПОУУжеИспользуетсяВИнформационнойБазе(КодПоЕДРПОУ, ИсключаяСсылку = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	Партнеры.Ссылка КАК Партнер,
	|	Партнеры.Код КАК Код,
	|	ПРЕДСТАВЛЕНИЕ(Партнеры.ОсновнойМенеджер) КАК ОсновнойМенеджер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|ГДЕ
	|	Контрагенты.КодПоЕДРПОУ = &КодПоЕДРПОУ
	|	И Контрагенты.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("КодПоЕДРПОУ", КодПоЕДРПОУ);
	Запрос.УстановитьПараметр("Ссылка",ИсключаяСсылку);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//-- Локализация

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщиеПроцедурыФормЭлементаСправочникаПартнеры

// Обработчик события ПриСозданииНаСервере форм элемента справочника Партнеры.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаЭлементаПартнер(Форма, Отказ, СтандартнаяОбработка) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере формы помощника нового справочника Партнеры.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаПомощникНового(Форма, Отказ, СтандартнаяОбработка) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	
	Параметры = Форма.Параметры;
	
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
					
		Если Параметры.Основание.Свойство("ИННПлательщикаНДС") Тогда
			Форма.ИННПлательщикаНДС = Параметры.Основание.ИННПлательщикаНДС;
			Форма.УказыватьЮридическиеРеквизиты = Истина;
		КонецЕсли;
		
		Если Параметры.Основание.Свойство("КодФилиала") Тогда
			Форма.КодФилиала = Параметры.Основание.КодФилиала;
			Форма.УказыватьЮридическиеРеквизиты = Истина;
		КонецЕсли;
        
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Параметры.СсылкаНаФайл) Тогда
		Форма.ЕстьОшибкаЧтенияФайла = Ложь;
		РазобратьФайлНаСервере(Параметры.СсылкаНаФайл, Форма.ЕстьОшибкаЧтенияФайла, Форма);
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере формы реквизиты контрагента справочника Партнеры
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаЭлементаРеквизитыКонтрагента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Обработчик события ПослеЗаписиНаСервере формы элемента справочника Контрагенты
//
// Параметры:
//  ТекущийОбъект   - СправочникОбъект.* - объект, который будет прочитан.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПослеЗаписиНаСервереФормаЭлементаРеквизитыКонтрагента(ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Устанавливает условное для реквизитов формы элемента справочника Контрагенты.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, для которой настраивается условное оформление.
//
Процедура УстановитьУсловноеОформление_ПомощникНового(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	//++ Локализация
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();
    
    ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
    ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИННПлательщикаНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказыватьЮридическиеРеквизиты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИННПлательщикаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

    ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПлательщикНДС");
    ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    ОтборЭлемента.ПравоеЗначение = Истина;

    ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
    ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

    ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодФилиала");
    ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;

    ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УпрощенныйВводДоступен");
    ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСравненияПартнеровЗначениеНайденного.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСравненияПартнеров.ДубльИННПлательщикаНДСКодФилиала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНайденоПредставлениеПартнер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНайдено.ДубльИННПлательщикаНДСКодФилиала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	//-- Локализация
КонецПроцедуры

// Записывает контрагента по данным формы Партнера
// 
// Параметры:
// 	КонтрагентОбъект - СправочникОбъект.Контрагенты - изменяемый контрагент.
// 	Форма - ФормаКлиентскогоПриложения - форма справочника Партнеры.
//
Процедура ПередЗаписьюКонтрагентаПартнера(КонтрагентОбъект, Форма) Экспорт
	//++ Локализация
    КонтрагентОбъект.КодПоЕДРПОУ                                              = Форма.КодПоЕДРПОУ;
    КонтрагентОбъект.ПлательщикНДС                                            = Форма.ПлательщикНДС;
    КонтрагентОбъект.ИННПлательщикаНДС                                        = Форма.ИННПлательщикаНДС;
    КонтрагентОбъект.НомерСвидетельстваПлательщикаНДС                         = Форма.НомерСвидетельстваПлательщикаНДС;
    КонтрагентОбъект.ГоловнойКонтрагент                                       = Форма.ГоловнойКонтрагент;
    КонтрагентОбъект.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Форма.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН;
    КонтрагентОбъект.КодФилиала                                               = Форма.КодФилиала;
    КонтрагентОбъект.ИспользоватьЭДО1СЗвит                                    = Форма.ИспользоватьЭДО1СЗвит;
    КонтрагентОбъект.ДополнительнаяИнформация                                 = Форма.ДополнительнаяИнформация;
	
    КонтрагентОбъект.ИсторияПлательщикаНДС.Загрузить(Форма.ИсторияПлательщикаНДС.Выгрузить());

	Если Не (Форма.КонтрагентПартнера.Пустая() Или Форма.ОбособленноеПодразделение) И Форма.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
        ИзменитьИННПлательщикаНДСПодчиненныхКонтрагентов(Форма.КонтрагентПартнера, Форма.ИННПлательщикаНДС);
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры 

// Обработчик создания нового головного контрагента
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма помощника нового партнера
//
Процедура ПриСозданииНовогоГоловногоКонтрагента(Форма) Экспорт
	//++ Локализация	
	Форма.ИННПлательщикаНДС = Форма.Параметры.ЗначенияЗаполнения.ИННПлательщикаНДС;
	Если ЗначениеЗаполнено(Форма.ИННПлательщикаНДС) Тогда
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("ИННПлательщикаНДС");
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
	КонецЕсли;
	//-- Локализация	
КонецПроцедуры

// Дополняет данные контрагента партнера
// 
// Параметры:
// 	Приемник - СправочникСсылка.Контрагенты - ссылка на контрагента
// 	Партнер - СправочникСсылка.Партнеры - ссылка на партнера
// 	СИсторическимиДанными - Булево - признак дополнения историческими данными
//
Процедура ДополнитьДанныеКонтрагентаПартнера(Приемник, Партнер, СИсторическимиДанными = Истина) Экспорт
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК КонтрагентПартнера,
    |	Контрагенты.ИННПлательщикаНДС КАК ИННПлательщикаНДС,
	|	Контрагенты.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельстваПлательщикаНДС,
    |	Контрагенты.ПлательщикНДС КАК ПлательщикНДС,
	|	Контрагенты.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	Контрагенты.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН КАК ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН,
	|	Контрагенты.КодФилиала КАК КодФилиала,
	|	Контрагенты.ИспользоватьЭДО1СЗвит КАК ИспользоватьЭДО1СЗвит
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	КонтрагентыИсторияПлательщикаНДС.Период КАК Период,
    |	КонтрагентыИсторияПлательщикаНДС.ПлательщикНДС КАК ПлательщикНДС,
    |	КонтрагентыИсторияПлательщикаНДС.ИННПлательщикаНДС КАК ИННПлательщикаНДС,
    |	КонтрагентыИсторияПлательщикаНДС.КодФилиала КАК КодФилиала
    |ИЗ
    |	Справочник.Контрагенты.ИсторияПлательщикаНДС КАК КонтрагентыИсторияПлательщикаНДС
    |ГДЕ
    |	КонтрагентыИсторияПлательщикаНДС.Ссылка.Партнер = &Партнер
	|;
	|";
	
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();

	Если Выборка.Следующий() Тогда
	
		ЗаполнитьЗначенияСвойств(Приемник, Выборка);
		Если СИсторическимиДанными Тогда
            Приемник.ИсторияПлательщикаНДС.Загрузить(РезультатЗапроса[1].Выгрузить());
		КонецЕсли;
	
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Дополняет данные контрагента при записи
// 
// Параметры:
// 	ОбъектКонтрагент - СправочникОбъект.Контрагенты - создаваемый контрагент
// 	Форма - ФормаКлиентскогоПриложения - форма-источник данных
//
Процедура ДополнитьДанныеКонтрагентаПриЗаписи(ОбъектКонтрагент, Форма) Экспорт
	//++ Локализация
    ОбъектКонтрагент.СтранаРегистрации     = ?(ОбъектКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, Форма.СтранаРегистрации, Справочники.СтраныМира.Украина);
    ОбъектКонтрагент.КодПоЕДРПОУ           = Форма.КодПоЕДРПОУ;
    ОбъектКонтрагент.ПлательщикНДС		   = Форма.ПлательщикНДС;
    Если ОбъектКонтрагент.ПлательщикНДС Тогда
        ОбъектКонтрагент.ИННПлательщикаНДС	              = Форма.ИННПлательщикаНДС;
        ОбъектКонтрагент.НомерСвидетельстваПлательщикаНДС = Форма.НомерСвидетельстваПлательщикаНДС;
        ОбъектКонтрагент.КодФилиала                       = Форма.КодФилиала;
    Иначе
        ОбъектКонтрагент.ИННПлательщикаНДС	              = "";
        ОбъектКонтрагент.НомерСвидетельстваПлательщикаНДС = "";
        ОбъектКонтрагент.КодФилиала                       = "";
	КонецЕсли;
	ОбъектКонтрагент.ИсторияПлательщикаНДС.Загрузить(Форма.ИсторияПлательщикаНДС.Выгрузить());
    ОбъектКонтрагент.ДополнительнаяИнформация = Форма.ДополнительнаяИнформация;
    
    Если ОбъектКонтрагент.ИсторияПлательщикаНДС.Количество() > 1 
    	И (ОбъектКонтрагент.ПлательщикНДС <> ОбъектКонтрагент.ИсторияПлательщикаНДС[ОбъектКонтрагент.ИсторияПлательщикаНДС.Количество() - 1].ПлательщикНДС 
          ИЛИ ОбъектКонтрагент.ИННПлательщикаНДС <> ОбъектКонтрагент.ИсторияПлательщикаНДС[ОбъектКонтрагент.ИсторияПлательщикаНДС.Количество() - 1].ИННПлательщикаНДС 
          ИЛИ ОбъектКонтрагент.КодФилиала <> ОбъектКонтрагент.ИсторияПлательщикаНДС[ОбъектКонтрагент.ИсторияПлательщикаНДС.Количество() - 1].КодФилиала
        ) Тогда
    	
    	НоваяСтрокаИстории = ОбъектКонтрагент.ИсторияПлательщикаНДС.Добавить();
    	НоваяСтрокаИстории.Период = НачалоДня(ТекущаяДатаСеанса());
        НоваяСтрокаИстории.ПлательщикНДС     = ОбъектКонтрагент.ПлательщикНДС;
        НоваяСтрокаИстории.ИННПлательщикаНДС = ОбъектКонтрагент.ИННПлательщикаНДС;
        НоваяСтрокаИстории.КодФилиала        = ОбъектКонтрагент.КодФилиала;
    	
    КонецЕсли;
	
	Если Форма.ЭтоКомпания = 0 И НЕ ПустаяСтрока(Форма.ТелефонПартнера) И НЕ Форма.ИспользуютсяТолькоПартнеры Тогда
        Если Форма.КодПоЕДРПОУ = Форма.КодПоЕДРПОУИсточникДанныхЗаполнения Тогда
			
			НоваяСтрокаКИ = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			НоваяСтрокаКИ.Представление = Форма.ТелефонКонтрагента;
			НоваяСтрокаКИ.ЗначенияПолей = Форма.ТелефонКонтрагентаЗначенияПолей;
			НоваяСтрокаКИ.Значение     	= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Форма.ТелефонКонтрагентаЗначенияПолей);
			
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Дополняет данные головного контрагента при записи
// 
// Параметры:
// 	ОбъектКонтрагент - СправочникОбъект.Контрагенты - создаваемый контрагент
// 	Форма - ФормаКлиентскогоПриложения - форма-источник данных
//
Процедура ДополнитьДанныеГоловногоКонтрагентаПриЗаписи(ОбъектГоловнойКонтрагент, Форма) Экспорт
	//++ Локализация
    ОбъектГоловнойКонтрагент.КодПоЕДРПОУ                      = Форма.КодПоЕДРПОУГоловногоКонтрагента;
    ОбъектГоловнойКонтрагент.ПлательщикНДС                    = Форма.ПлательщикНДС;
    ОбъектГоловнойКонтрагент.ИННПлательщикаНДС                = Форма.ИННПлательщикаНДС;
    ОбъектГоловнойКонтрагент.НомерСвидетельстваПлательщикаНДС = Форма.НомерСвидетельстваПлательщикаНДС;
    ОбъектГоловнойКонтрагент.КодФилиала                       = Форма.КодФилиалаГоловногоКонтрагента;
	//-- Локализация
КонецПроцедуры

// Заполняет данные контрагента
// 
// Параметры:
// 	ДанныеКонтрагента - Структура - структура данных
// 	Отказ - Булево - признак отказа
//
Процедура ЗаполнитьДанныеКонтрагентаПоСсылке(ДанныеКонтрагента, Отказ) Экспорт
	//++ Локализация	
	Если ДанныеКонтрагента.Свойство("Ссылка") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.ЮрФизЛицо КАК ЮрФизЛицо,
		|	Контрагенты.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Контрагенты.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
		|	Контрагенты.ПлательщикНДС КАК ПлательщикНДС,
		|	Контрагенты.ИННПлательщикаНДС КАК ИННПлательщикаНДС,
		|	Контрагенты.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельстваПлательщикаНДС,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.Партнер КАК Партнер,
		|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////1
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Объект,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	МАКСИМУМ(КонтактнаяИнформация.ДействуетС) КАК ДействуетС
		|ПОМЕСТИТЬ СрезКонтактнойИнформацииКонтрагенты
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.ДействуетС <= &ДействуетС
		|	И КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////2
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	КонтактнаяИнформация.Значение	   КАК Значение
		|ИЗ
		|	СрезКонтактнойИнформацииКонтрагенты КАК СрезКонтактнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО СрезКонтактнойИнформации.Вид = КонтактнаяИнформация.Вид
		|			И СрезКонтактнойИнформации.ДействуетС = КонтактнаяИнформация.ДействуетС
		|			И СрезКонтактнойИнформации.Объект = КонтактнаяИнформация.Ссылка
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ДанныеКонтрагента.Ссылка);
		Запрос.УстановитьПараметр("ДействуетС", НачалоДня(ТекущаяДатаСеанса()));
		
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаШапка = Результат[0].Выбрать();
		
		Если ВыборкаШапка.Следующий() Тогда
			
			Если ВыборкаШапка.Партнер <> Справочники.Партнеры.НеизвестныйПартнер И ВыборкаШапка.Партнер <> Справочники.Партнеры.РозничныйПокупатель Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ДанныеКонтрагента.Вставить("Название", ВыборкаШапка.Наименование);
			ДанныеКонтрагента.Вставить("КодПоЕДРПОУ", ВыборкаШапка.КодПоЕДРПОУ);
			ДанныеКонтрагента.Вставить("ПлательщикНДС", ВыборкаШапка.ПлательщикНДС);
			ДанныеКонтрагента.Вставить("ИННПлательщикаНДС", ВыборкаШапка.ИННПлательщикаНДС);
			ДанныеКонтрагента.Вставить("НомерСвидетельстваПлательщикаНДС", ВыборкаШапка.НомерСвидетельстваПлательщикаНДС);
			ДанныеКонтрагента.Вставить("ЮрФизЛицо", ВыборкаШапка.ЮрФизЛицо);
			ДанныеКонтрагента.Вставить("ОбособленноеПодразделение", ВыборкаШапка.ОбособленноеПодразделение);
			ДанныеКонтрагента.Вставить("ПолноеЮридическоеНаименование",ВыборкаШапка.НаименованиеПолное);
			
			ВыборкаКонтактнаяИнформация = Результат[2].Выбрать();
			
			Пока ВыборкаКонтактнаяИнформация.Следующий() Цикл
				
				Если ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
					ВидКонтактнойИнформации = "ФактАдресКонтрагента";
				ИначеЕсли ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
					ВидКонтактнойИнформации = "ЮрАдресКонтрагента";
				ИначеЕсли ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
					ВидКонтактнойИнформации = "EmailКонтрагента";
				ИначеЕсли ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
					ВидКонтактнойИнформации = "ТелефонКонтрагента";
				Иначе
					Продолжить;
				КонецЕсли;
				
				ДанныеКонтрагента.Вставить(ВидКонтактнойИнформации,Новый Структура("Представление, ЗначенияПолей, Значение",
				                                                                   ВыборкаКонтактнаяИнформация.Представление,
				                                                                   ВыборкаКонтактнаяИнформация.ЗначенияПолей,
																				   ВыборкаКонтактнаяИнформация.Значение));
				
			КонецЦикла;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	//-- Локализация	
КонецПроцедуры

// Заполняет форму помощника на основании данных контрагента
// 
// Параметры:
// 	ДанныеКонтрагента - Структура - структура данных
// 	Форма - ФормаКлиентскогоПриложения - заполняемая форма
//
Процедура ЗаполнитьНаОснованииКонтрагента(ДанныеКонтрагента, Форма) Экспорт
	//++ Локализация
	Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Форма.Название = "";
	ИначеЕсли ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
        Форма.КодФилиала = "";
	ИначеЕсли ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
        Форма.КодФилиала = "";
        Форма.КодПоЕДРПОУ = "";
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Выполняет привязку обособленных подразделений
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма помощника
//
Процедура ПривязатьОбособленныеПодразделения(Форма) Экспорт
	// привязка обособленных подразделений
    Если Форма.ЭтоКомпания = 0 И Форма.ВидКомпании = 0 И ЗначениеЗаполнено(Форма.ИННПлательщикаНДС) И Форма.ПривязатьОбособленныеПодразделения = 0 Тогда
		
		Для Каждого СтрокаТаблицы Из Форма.ОбособленныеПодразделения Цикл
			Если СтрокаТаблицы.Выбран Тогда
				
				ОписаниеОшибки = "";
				ПартнерыИКонтрагентыЛокализацияВызовСервера.ИзменитьГоловногоКонтрагента(СтрокаТаблицы.Контрагент, Форма.КонтрагентВыбор, ОписаниеОшибки);
				
				Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
					ВызватьИсключение ОписаниеОшибки;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

// Заполняет список выбора
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура ЗаполнитьСписокВыбораГоловногоКонтрагента(Форма) Экспорт
	//++ Локализация
	ИмяЭлементаФормы = ?(Форма.ИспользуютсяТолькоПартнеры, "ГоловнойКонтрагентДопСведения", "ГоловнойКонтрагент");
	
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлементаФормы);
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = ЭлементФормы.СписокВыбора;
	СписокВыбора.Очистить();
	
    ИННПлательщикаНДС = Строка(Форма.ИННПлательщикаНДС);
    Если ЗначениеЗаполнено(ИННПлательщикаНДС) Тогда        
		
		ТаблицаКонтрагентов = ВозможныеГоловныеКонтрагенты(ИННПлательщикаНДС);
		
		Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
			СписокВыбора.Добавить(
				СтрокаТаблицы.Ссылка,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                    НСтр("ru='%1, Код по ЕДРПОУ: %2';uk='%1, Код за ЄДРПОУ: %2'"),
					СтрокаТаблицы.Представление,
                    ?(ЗначениеЗаполнено(СтрокаТаблицы.КодПоЕДРПОУ), СтрокаТаблицы.КодПоЕДРПОУ, НСтр("ru='<не заполнен>';uk='<не заповнений>'"))));
		КонецЦикла;
		
	КонецЕсли;
	
	РазмерСписка = СписокВыбора.Количество();
	
	Если РазмерСписка = 1 Тогда
		Форма.ГоловнойКонтрагент = СписокВыбора[0].Значение;
	ИначеЕсли РазмерСписка = 0
			Или (ЗначениеЗаполнено(Форма.ГоловнойКонтрагент) 
			И СписокВыбора.НайтиПоЗначению(Форма.ГоловнойКонтрагент) = Неопределено) Тогда
		Форма.ГоловнойКонтрагент = Неопределено;
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииФормЭлементаСправочникаКонтрагенты

// Обработчик события ПередЗаписьюНаСервере формы элемента справочника Контрагенты
//
// Параметры:
//  Отказ                - Булево - признак отказа от создания формы.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ОбработкаПроверкиЗаполненияНаСервереКонтрагент(Отказ, ПроверяемыеРеквизиты, Форма) Экспорт
	
КонецПроцедуры

// Устанавливает условное для реквизитов формы элемента справочника Контрагенты.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, для которой настраивается условное оформление.
//
Процедура УстановитьУсловноеОформлениеКонтрагент(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	//++ Локализация

//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИННПлательщикаНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УпрощенныйВводДоступен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЮрФизЛицо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицо);
	СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПлательщикНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИННПлательщикаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//-- Локализация
КонецПроцедуры

// Обработчик события ПриЧтенииСозданииНаСервере формы элемента справочника Контрагенты
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПриЧтенииСозданииНаСервереКонтрагент(Форма) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Обработчик события ПередЗаписью справочника Контрагенты
// 
// Параметры:
// 	Объект - СправочникОбъект.Контрагенты - объект Контрагент.
// 	Отказ - Булево - признак отказа обработки.
//
Процедура ПередЗаписьюКонтрагент(Объект, Отказ) Экспорт
	//++ Локализация
	// Обработка смены пометки удаления.
	Если Не Объект.ЭтоНовый() Тогда
		// изменим ИНН в подчиненных контрагентах
        Если Не Объект.ОбособленноеПодразделение И Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
            ИзменитьИННПлательщикаНДСПодчиненныхКонтрагентов(Объект.Ссылка, Объект.ИННПлательщикаНДС);
		КонецЕсли;
	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) ИЛИ Объект.ГоловнойКонтрагент = Объект.Ссылка Тогда
		Объект.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Ложь;	
	КонецЕсли;
	//-- Локализация	
КонецПроцедуры

Процедура ПриОкончанииИзмененияРеквизита_Контрагент(ИмяЭлемента, Форма) Экспорт
	
	
КонецПроцедуры

Процедура ВыполнитьКомандуЛокализации(Форма, ИмяКоманды, ПараметрыОбработки) Экспорт
	//++ Локализация
	Если ИмяКоманды = "РазобратьФайлНаСервере" Тогда
		РазобратьФайлНаСервере(ПараметрыОбработки.СсылкаНаФайл, ПараметрыОбработки.ЕстьОшибкаЧтенияФайла, Форма);
		ПараметрыОбработки.Вставить("ИмяПроцедуры", "ВидимостьСтраницПервичнаяИнформация");
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииФормСпискаИВыбораСправочникаКонтрагенты

// Обработчик события ПриСозданииНаСервере формы списка (параметрическая) справочника Контрагенты
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаСпискаПараметрическаяКонтрагент(Форма,  Отказ, СтандартнаяОбработка) Экспорт
	//++ Локализация
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере формы списка справочника Контрагенты
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаСпискаКонтрагент(Форма,  Отказ, СтандартнаяОбработка) Экспорт
	//++ Локализация
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере формы выбора справочника Контрагенты
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаВыбораКонтрагент(Форма,  Отказ, СтандартнаяОбработка) Экспорт
	//++ Локализация
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере формы выбора справочника Контрагенты
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаВыборГоловногоКонтрагента(Форма,  Отказ, СтандартнаяОбработка) Экспорт
	//++ Локализация
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере формы списка/выбора справочника Контрагенты
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//  ЗапросСИнформациейПоКонтрагенту - Булево - признак запроса с информацией по контрагенту
//
Процедура ПриСозданииНаСервереФормаВыбораСпискаПартнеры(Форма, Отказ, СтандартнаяОбработка, ЗапросСИнформациейПоКонтрагенту = Ложь) Экспорт
	//++ Локализация
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
КонецПроцедуры

Процедура УстановитьСвойстваДинамическогоСпискаКонтрагенты(Форма) Экспорт
	//++ Локализация

	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса					= ТекстЗапросаДинамическогоСпискаКонтрагенты();
	СвойстваСписка.ОсновнаяТаблица				= "Справочник.Контрагенты";
	СвойстваСписка.ДинамическоеСчитываниеДанных	= Истина;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Форма.Элементы.Список, СвойстваСписка);
	
	//-- Локализация	
КонецПроцедуры

Процедура УстановитьСвойстваДинамическогоСпискаФормыВыбораКонтрагенты(Форма) Экспорт
	//++ Локализация

	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса					= ТекстЗапросаДинамическогоСпискаФормыВыбораКонтрагенты();
	СвойстваСписка.ОсновнаяТаблица				= "Справочник.Контрагенты";
	СвойстваСписка.ДинамическоеСчитываниеДанных	= Истина;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Форма.Элементы.Список, СвойстваСписка);
	
	//-- Локализация	
КонецПроцедуры

//++ Локализация
Функция ТекстЗапросаДинамическогоСпискаКонтрагенты()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СправочникКонтрагенты.Ссылка,
	|	СправочникКонтрагенты.ПометкаУдаления,
	|	СправочникКонтрагенты.Предопределенный,
	|	СправочникКонтрагенты.Наименование,
	|	СправочникКонтрагенты.НаименованиеПолное,
	|	СправочникКонтрагенты.ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА СправочникКонтрагенты.ОбособленноеПодразделение
	|			ТОГДА ВЫРАЗИТЬ(&ПредставлениеОбособленногоПодразделения КАК СТРОКА(100))
	|		ИНАЧЕ СправочникКонтрагенты.ЮрФизЛицо
	|	КОНЕЦ КАК ВидКонтрагента,
	|	СправочникКонтрагенты.ОбособленноеПодразделение,
	|	СправочникКонтрагенты.ЮридическоеФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА СправочникКонтрагенты.ОбособленноеПодразделение
	|			ТОГДА СправочникКонтрагенты.ГоловнойКонтрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК ГоловнойКонтрагент,
    |	СправочникКонтрагенты.КодПоЕДРПОУ,
    |	СправочникКонтрагенты.ПлательщикНДС,
    |	СправочникКонтрагенты.ИННПлательщикаНДС,
    |	СправочникКонтрагенты.НомерСвидетельстваПлательщикаНДС,
	|	СправочникКонтрагенты.Партнер,
	|	СправочникКонтрагенты.Представление,
    |	0 КАК ЕстьОшибкиПроверкаКонтрагентов
    |	,
    |	1 КАК ЭДО,
    |	ЛОЖЬ КАК ЕстьСвязь,
    |	НЕОПРЕДЕЛЕНО КАК СостояниеПодключенияЭДО
	|ИЗ
	|	Справочник.Контрагенты КАК СправочникКонтрагенты
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДинамическогоСпискаФормыВыбораКонтрагенты()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СправочникКонтрагенты.Ссылка,
	|	СправочникПартнеры.Ссылка КАК Партнер,
	|	СправочникПартнеры.Предопределенный,
	|	СправочникПартнеры.Родитель,
	|	СправочникПартнеры.Код,
	|	СправочникПартнеры.Наименование,
	|	СправочникПартнеры.БизнесРегион,
	|	СправочникПартнеры.ГруппаДоступа,
	|	СправочникПартнеры.ДатаРегистрации,
	|	СправочникПартнеры.Клиент,
	|	СправочникПартнеры.Комментарий,
	|	СправочникПартнеры.Конкурент,
	|	СправочникПартнеры.ОсновнойМенеджер,
	|	СправочникПартнеры.Поставщик,
	|	СправочникПартнеры.ПрочиеОтношения,
    |	СправочникКонтрагенты.КодПоЕДРПОУ,
	|	СправочникКонтрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	СправочникКонтрагенты.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникКонтрагенты.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА &ПредставлениеОбособленногоПодразделения
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(СправочникКонтрагенты.ЮрФизЛицо)
	|	КОНЕЦ КАК ВидКонтрагента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникКонтрагенты.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА СправочникКонтрагенты.ГоловнойКонтрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК ГоловнойКонтрагент,
	|	СправочникКонтрагенты.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
    |	СправочникКонтрагенты.ПлательщикНДС,
    |	СправочникКонтрагенты.ИННПлательщикаНДС,
    |	СправочникКонтрагенты.НомерСвидетельстваПлательщикаНДС,
    |	0 КАК НомерКартинкиСостояниеПроверки
	|ИЗ
    |	Справочник.Контрагенты КАК СправочникКонтрагенты 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК СправочникПартнеры
	|		ПО СправочникКонтрагенты.Партнер = СправочникПартнеры.Ссылка
	|ГДЕ
	|	ВЫБОР
	|		КОГДА
	|		НЕ &ОтборПоСегментуУстановлен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ СправочникПартнеры.Ссылка В (&ОтборПоСегменту)
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА
	|		НЕ &ОтборПоПолнотекстовомуПоискуУстановлен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ СправочникПартнеры.Ссылка В (&ОтборПоПолнотекстовомуПоиску)
	|	КОНЕЦ
	|{ГДЕ
	|	СправочникПартнеры.Ссылка КАК ПараметризацияПоПартнеру}";
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- Локализация	

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииФормСпискаИВыбораСправочникаПартнеры

Функция ТекстЗапросаДинамическогоСпискаПартнерыСИнформациейПоКонтрагенту() Экспорт
	//++ Локализация
	Возврат "
		|ВЫБРАТЬ
		|	СправочникПартнеры.Ссылка,
		|	СправочникПартнеры.ПометкаУдаления,
		|	СправочникПартнеры.Предопределенный,
		|	СправочникПартнеры.Родитель,
		|	СправочникПартнеры.Код,
		|	СправочникПартнеры.Наименование,
		|	СправочникПартнеры.БизнесРегион,
		|	СправочникПартнеры.ГруппаДоступа,
		|	СправочникПартнеры.ДатаРегистрации,
		|	СправочникПартнеры.Клиент,
		|	СправочникПартнеры.Комментарий,
		|	СправочникПартнеры.Конкурент,
		|	СправочникПартнеры.НаименованиеПолное,
		|	СправочникПартнеры.ОсновнойМенеджер,
		|	СправочникПартнеры.Поставщик,
		|	СправочникПартнеры.Перевозчик,
		|	СправочникПартнеры.ПрочиеОтношения,
		|	СправочникПартнеры.ДополнительныеРеквизиты.(
		|		Ссылка,
		|		НомерСтроки,
		|		Свойство,
		|		Значение,
		|		ТекстоваяСтрока
		|	),
		|	СправочникПартнеры.КонтактнаяИнформация.(
		|		Ссылка,
		|		НомерСтроки,
		|		Тип,
		|		Вид,
		|		Представление,
		|		ЗначенияПолей,
		|		Страна,
		|		Регион,
		|		Город,
		|		АдресЭП,
		|		ДоменноеИмяСервера,
		|		НомерТелефона,
		|		НомерТелефонаБезКодов
		|	),
		|	ЕСТЬNULL(Контрагенты.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
		|	ЕСТЬNULL(Контрагенты.ЮрФизЛицо, ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ПустаяСсылка)) КАК ЮрФизЛицо,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Контрагенты.ОбособленноеПодразделение, ЛОЖЬ)
		|			ТОГДА Контрагенты.ГоловнойКонтрагент
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ КАК ГоловнойКонтрагент,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Контрагенты.ОбособленноеПодразделение, ЛОЖЬ)
		|			ТОГДА &ПредставлениеОбособленногоПодразделения
		|		ИНАЧЕ ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(Контрагенты.ЮрФизЛицо), """")
		|	КОНЕЦ КАК ВидКонтрагента,
		|	ЕСТЬNULL(Контрагенты.ОбособленноеПодразделение, ЛОЖЬ) КАК ОбособленноеПодразделение,
        |	ЕСТЬNULL(Контрагенты.КодПоЕДРПОУ, """") КАК КодПоЕДРПОУ,
        |	ЕСТЬNULL(Контрагенты.ИННПлательщикаНДС, """") КАК ИННПлательщикаНДС,
        |	НЕОПРЕДЕЛЕНО КАК СостояниеПроверкиКонтрагента,
        |	3 КАК НомерКартинкиСостояниеПроверки
        |	,
        |	1 КАК ЭДО,
  		|   ЛОЖЬ КАК ЕстьСвязь,
        |	НЕОПРЕДЕЛЕНО КАК СостояниеПодключенияЭДО
		|ИЗ
		|	Справочник.Партнеры КАК СправочникПартнеры
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО (Контрагенты.Партнер = СправочникПартнеры.Ссылка)
		|}		
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ОтборПоСегментуУстановлен <> ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ СправочникПартнеры.Ссылка В (&ОтборПоСегменту)
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА НЕ &ОтборПоПолнотекстовомуПоискуУстановлен
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ СправочникПартнеры.Ссылка В (&ОтборПоПолнотекстовомуПоиску)
		|		КОНЕЦ";
	//-- Локализация
КонецФункции

#КонецОбласти

#Область ПоискДублейПартнеровКонтрагентов

Процедура ЗаполнитьИтоговуюИнформацию(ИтоговаяИнформация, Форма) Экспорт
	//++ Локализация
	Если (Форма.ИспользуютсяТолькоПартнеры Или Форма.ДействиеСКонтрагентом = 1) И Форма.УказыватьЮридическиеРеквизиты Тогда
        СтруктураИННПлательщикаНДС = ДанныеИННПлательщикаНДС_КодФилиала(Форма);
		Если Форма.ЕстьДубльПоОснРеквизитам Тогда
			НайденныйДубльПоИННПлательщикаНДС = ИННПлательщикаНДСКодФилиалаУжеИспользуетсяВИнформационнойБазе(СтруктураИННПлательщикаНДС.ИННПлательщикаНДС, СтруктураИННПлательщикаНДС.КодФилиала, Форма.ВидКомпании = 3);
            ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИнформацияДубльИНН#", СообщениеДубльИННПлательщикаНДС(СтруктураИННПлательщикаНДС.ИННПлательщикаНДС_КодФилиала, НайденныйДубльПоИННПлательщикаНДС));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИД#", "");
		Иначе
			ЗаголовокКод = ?(Форма.ЭтоКомпания = 1 ИЛИ (Форма.ЭтоКомпания = 0 И Форма.ВидКомпании = 2), "ДРФО", "ЕДРПОУ");
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ЗаголовокКод#", ЗаголовокКод);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КодПоЕДРПОУ#", Форма.КодПоЕДРПОУ);
			ЗаголовокПлательщикНДС = ?(Форма.ПлательщикНДС, НСтр("ru='Является плательщиком НДС';uk='Є платником ПДВ'"), НСтр("ru='Не является плательщиком НДС';uk='Не є платником ПДВ'"));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ПлательщикНДС#", ЗаголовокПлательщикНДС);
			Если Форма.ПлательщикНДС Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИННПлательщикаНДС#", СтруктураИННПлательщикаНДС.ИННПлательщикаНДС_КодФилиала);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КодПлательщикаНДС#", Форма.НомерСвидетельстваПлательщикаНДС);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РДК#", "");
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация,"#РДК#");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ВидКомпании = 3 И Не Форма.ИспользуютсяТолькоПартнеры И Форма.ВыбратьГоловногоКонтрагента = 1 Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИННПлательщикаНДСГоловногоКонтрагента#",
		                     Форма.ИННПлательщикаНДС + ?(ПустаяСтрока(Форма.КодФилиалаГоловногоКонтрагента), "", "\" + Форма.КодФилиалаГоловногоКонтрагента));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КодПоЕДРПОУГоловногоКонтрагента#", Форма.КодПоЕДРПОУГоловногоКонтрагента);
	КонецЕсли;
	//-- Локализация
	Если СтрНайти(ИтоговаяИнформация, "#РДК#")>0 Тогда 
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#РДК#");
	КонецЕсли;
	Если СтрНайти(ИтоговаяИнформация, "#РД#")>0 Тогда 
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#РД#");
	КонецЕсли;
	Если СтрНайти(ИтоговаяИнформация, "#ДК#")>0 Тогда 
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДК#");
	КонецЕсли;
	Если СтрНайти(ИтоговаяИнформация, "#БС#")>0 Тогда 
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БС#");
	КонецЕсли;
	ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДК#");
	ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БС#");
	Если СтрНайти(ИтоговаяИнформация, "#КодПоЕДРПОУ#")>0 Тогда 
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#КодПоЕДРПОУ#");
	КонецЕсли;
	Если СтрНайти(ИтоговаяИнформация, "#ИННПлательщикаНДС#")>0 Тогда 
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ИННПлательщикаНДС#");
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьПоискПоПервичнойИнформацииЗавершение(Форма, ПредставленияРеквизитов) Экспорт
	//++ Локализация
	Форма.ЕстьДубльПоОснРеквизитам = Ложь;
	Элементы =  Форма.Элементы;
	
    СтруктураИННПлательщикаНДС = ДанныеИННПлательщикаНДС_КодФилиала(Форма);
	
    Если Не (Форма.НаОснованииКонтрагента Или ПустаяСтрока(СтруктураИННПлательщикаНДС.ИННПлательщикаНДС)) Тогда	    
		НайденныйДубльПоИННПлательщикаНДС = ИННПлательщикаНДСКодФилиалаУжеИспользуетсяВИнформационнойБазе(СтруктураИННПлательщикаНДС.ИННПлательщикаНДС, СтруктураИННПлательщикаНДС.КодФилиала, Форма.ВидКомпании = 3);
        Форма.ЕстьДубльПоОснРеквизитам = (НайденныйДубльПоИННПлательщикаНДС <> Неопределено);
	КонецЕсли;
	
	Если Форма.ЕстьДубльПоОснРеквизитам Тогда
        Элементы.ДекорацияДубльИННПлательщикаНДСКодФилиала.Заголовок = СообщениеДубльИННПлательщикаНДС(СтруктураИННПлательщикаНДС.ИННПлательщикаНДС_КодФилиала, НайденныйДубльПоИННПлательщикаНДС);
		Если Форма.ИспользуютсяТолькоПартнеры Тогда
			Элементы.ДействиеПоРезультатамНайдено.Доступность = Ложь;
			Форма.ДействиеПоРезультатамНайдено = 0;
		КонецЕсли;
        Элементы.ГруппаДействиеСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаДубльИННПлательщикаНДСКодФилиала;
		Форма.ДействиеСКонтрагентом = 0;
        ОтобразитьДубльИННПлательщикаНДСКодФилиалавНайденныхПартнерах(НайденныйДубльПоИННПлательщикаНДС, ПредставленияРеквизитов, Форма);
	Иначе
		Элементы.ДействиеПоРезультатамНайдено.Доступность = Истина;
        Элементы.ДекорацияДубльИННПлательщикаНДСКодФилиала.Заголовок = "";
		Элементы.ГруппаДействиеСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаДействиеСКонтрагентом;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДействиеСКонтрагентом", "Видимость",
			Не Форма.ИспользуютсяТолькоПартнеры И Форма.УказыватьЮридическиеРеквизиты);
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

Процедура ДополнитьСтруктуруПоиска(Форма, СтруктураПоиска) Экспорт
	//++ Локализация
    СтруктураПоиска.Вставить("ИННПлательщикаНДС", (Форма.УказыватьЮридическиеРеквизиты И НЕ ПустаяСтрока(Форма.ИННПлательщикаНДС))); 
    СтруктураПоиска.Вставить("КодПоЕДРПОУ", (Форма.ЭтоКомпания = 0 И Форма.УказыватьЮридическиеРеквизиты И Форма.ВидКомпании <> 1 И Не ПустаяСтрока(Форма.КодПоЕДРПОУ)));
	//-- Локализация	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаПоиска(ТекстЗапроса, СтруктураПоиска, НаОснованииКонтрагента) Экспорт
	//++ Локализация
    Если СтруктураПоиска.ИННПлательщикаНДС Тогда
    	ДополнитьЗапросПоИННПлательщикаНДС(ТекстЗапроса, НаОснованииКонтрагента);
    КонецЕсли;
    
    Если СтруктураПоиска.КодПоЕДРПОУ Тогда
    	ДополнитьЗапросЕДРПОУ(ТекстЗапроса, НаОснованииКонтрагента);
    КонецЕсли;
	//-- Локализация
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаПоиска(Форма, Запрос) Экспорт
	//++ Локализация
    Запрос.УстановитьПараметр("ИННПлательщикаНДС", Форма.ИННПлательщикаНДС);
    Запрос.УстановитьПараметр("КодПоЕДРПОУ", Форма.КодПоЕДРПОУ);
	//-- Локализация
КонецПроцедуры

Процедура ДополнитьПредставленияРеквизитовПоиска(ПредставленияРеквизитов) Экспорт
	//++ Локализация
    ПредставленияРеквизитов.Вставить("СтрокаКодЕДРПОУ", НСтр("ru='Код по ЕДРПОУ';uk='Код за ЄДРПОУ'"));
    ПредставленияРеквизитов.Вставить("СтрокаИННПлательщикаНДС", НСтр("ru='ИНН плательщика НДС';uk='ІПН платника ПДВ'"));
    ПредставленияРеквизитов.Вставить("СтрокаКодФилиала", НСтр("ru='Код филиала';uk='Код філії'"));
	//-- Локализация
КонецПроцедуры

Процедура ПоместитьВременныеТаблицыРеквизитовКонтрагента(ПредставленияРеквизитов, СтруктураПоиска, РеквизитыИнформацииБезПоиска, РеквизитыКонтрагента, Форма) Экспорт
	//++ Локализация
		
    Если СтруктураПоиска.ИННПлательщикаНДС Тогда	
        ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаИННПлательщикаНДС,
        	Форма.ИННПлательщикаНДС, 4, Истина);
		Если Форма.ЭтоКомпания = 0 И (Форма.ВидКомпании = 0 Или Форма.ВидКомпании = 3) Тогда
            РеквизитыИнформацииБезПоиска.Добавить(ПредставленияРеквизитов.СтрокаКодФилиала);
            ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаКодФилиала, Форма.КодФилиала, 5);
		КонецЕсли;
	КонецЕсли;
	
    Если СтруктураПоиска.КодПоЕДРПОУ Тогда
    	ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаКодЕДРПОУ, Форма.КодПоЕДРПОУ, 6);
    КонецЕсли;
	
	//-- Локализация	
КонецПроцедуры

Процедура ДополнитьСводныйЗапросПоСтруктуреПоиска(СводныйЗапрос, СтруктураПоиска) Экспорт
	//++ Локализация
    Если СтруктураПоиска.ИННПлательщикаНДС Тогда
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоИННПлательщикаНДС.Партнер,
		|	КонтрагентыПоИННПлательщикаНДС.НайденоПоСсылка,
		|	КонтрагентыПоИННПлательщикаНДС.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоИННПлательщикаНДС КАК КонтрагентыПоИННПлательщикаНДС
		|"; 
		
	КонецЕсли;
	
	Если СтруктураПоиска.КодПоЕДРПОУ Тогда	
	
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоЕДРПОУ.Партнер,
		|	КонтрагентыПоЕДРПОУ.НайденоПоСсылка,
		|	КонтрагентыПоЕДРПОУ.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоЕДРПОУ КАК КонтрагентыПоЕДРПОУ
		|";
	
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

Процедура УстановитьДополнительныеУсловияСводногоЗапроса(СводныйЗапрос) Экспорт
	//++ Локализация
	СтрокаУсловий = "
	|ВЫБОР
    |	КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаИННПлательщикаНДС
    |			ТОГДА Контрагенты.ИННПлательщикаНДС
    |	КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаКодФилиала
    |		ТОГДА Контрагенты.КодФилиала
    |	КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаКодЕДРПОУ
    |		ТОГДА Контрагенты.КодПоЕДРПОУ
	|	ИНАЧЕ
	|		""""
	|	КОНЕЦ
	|";
	СводныйЗапрос = СтрЗаменить(СводныйЗапрос, "&ДопУсловия", СтрокаУсловий);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

//++ Локализация
//-- Локализация

#Область ПрочиеСлужебныеМетоды

Процедура РазобратьФайлНаСервере(СсылкаНаФайл, ЕстьОшибка, Форма) Экспорт
	//++ Локализация
	ЕстьОшибка = Истина;
	Возврат;
	//-- Локализация
КонецПроцедуры

// Получает необходимые данные о партнере для вывода в панель информации форм списка 
// и выбора справочника "Партнеры".
//
// Параметры:
//  Партнер  - СправочникСсылка.Партнеры - партнер для которого необходимо получить информацию.
//
// Возвращаемое значение:
//   Структура   - содержит информацию о партнере.
//
Процедура ДополнитьДанныеПартнераДляПанелиИнформации(ДанныеПартнера, Партнер) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

Процедура ДополнитьРеквизитыНеРедактируемыеВГрупповойОбработкеКонтрагент(НеРедактируемыеРеквизиты) Экспорт
	//++ Локализация
    НеРедактируемыеРеквизиты.Добавить("ИННПлательщикаНДС");
    НеРедактируемыеРеквизиты.Добавить("КодФилиала");
    НеРедактируемыеРеквизиты.Добавить("ИсторияИННПлательщикаНДС.*");	
	//-- Локализация
КонецПроцедуры

// Заполняет панель информации в форме списка по данным партнера.
// 
// Параметры:
//  Форма     - ФормаКлиентскогоПриложения - форма, в которой находится динамический список партнеров.
//  Партнер   - СправочникСсылка.Партнеры - партнер, данными которого заполняется панель информации.
//  ДанныеПартнера - Структура - структура с данными по партнеру.
//
// Возвращаемое значение:
//   ЭлементОтбора   - созданная группа отбора.
//
Процедура ЗаполнитьПанельИнформацииПоДаннымПартнера(Форма, Партнер, ДанныеПартнера) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

//++ Локализация
Функция ИННПлательщикаНДСКодФилиалаГоловногоКонтрагентаИспользуютсяВИнформационнойБазе(ИННПлательщикаНДС, КодФилиалаГоловногоКонтрагента) Экспорт    
	
	НайденныйДубльПоИНН = ИННПлательщикаНДСКодФилиалаУжеИспользуетсяВИнформационнойБазе(ИННПлательщикаНДС, КодФилиалаГоловногоКонтрагента, Ложь);
	
	Если НайденныйДубльПоИНН <> Неопределено Тогда
		СтрСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            НСтр("ru='ИНН плательщика НДС\Код филиала - %1 уже указаны для контрагента %2 с кодом %3, ответственный - %4.';uk='ІПН платника ПДВ\Код філії - %1 вже зазначені для контрагента %2 з кодом %3, відповідальний - %4.'"),
            ИННПлательщикаНДС + ?(ПустаяСтрока(КодФилиалаГоловногоКонтрагента), "", "\" + КодФилиалаГоловногоКонтрагента),
			НайденныйДубльПоИНН.Ссылка,
			НайденныйДубльПоИНН.Код,
			НайденныйДубльПоИНН.ОсновнойМенеджер);
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщение,, "КодФилиалаГоловногоКонтрагента");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//-- Локализация

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//++ Локализация
#Область ПоискДублейПартнеровКонтрагентов_Служебные

Процедура ДополнитьЗапросЕДРПОУ(ТекстЗапроса, НаОснованииКонтрагента)    
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер,
	|	Контрагенты.Ссылка  КАК НайденоПоСсылка,
    |	&СтрокаКодЕДРПОУ      КАК НайденоВРеквизите
    |ПОМЕСТИТЬ КонтрагентыПоЕДРПОУ
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
    |	Контрагенты.КодПоЕДРПОУ = &КодПоЕДРПОУ И
	|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецПроцедуры

Процедура ДополнитьЗапросПоИННПлательщикаНДС(ТекстЗапроса, НаОснованииКонтрагента)    
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер,
	|	Контрагенты.Ссылка  КАК НайденоПоСсылка,
    |	&СтрокаИННПлательщикаНДС КАК НайденоВРеквизите
    |ПОМЕСТИТЬ КонтрагентыПоИННПлательщикаНДС
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
    |	Контрагенты.ИННПлательщикаНДС = &ИННПлательщикаНДС И
	|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру,"") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецПроцедуры

#КонецОбласти
//-- Локализация

#Область ОбщиеПроцедурыФормЭлементаСправочникаПартнеры

//++ Локализация
Функция ДанныеИННПлательщикаНДС_КодФилиала(Форма)     
	
    СтруктураИННПлательщикаНДС = Новый Структура;
	СтруктураИННПлательщикаНДС.Вставить("ИННПлательщикаНДС", "");
	СтруктураИННПлательщикаНДС.Вставить("КодФилиала", "");
	СтруктураИННПлательщикаНДС.Вставить("ИННПлательщикаНДС_КодФилиала", "");
    
    СтруктураИННПлательщикаНДС.ИННПлательщикаНДС            = Форма.ИННПлательщикаНДС;
    СтруктураИННПлательщикаНДС.КодФилиала                   = Форма.КодФилиала;
    СтруктураИННПлательщикаНДС.ИННПлательщикаНДС_КодФилиала = СтруктураИННПлательщикаНДС.ИННПлательщикаНДС + ?(ПустаяСтрока(Форма.КодФилиала), "", "\" + Форма.КодФилиала);
	
	Возврат СтруктураИННПлательщикаНДС;
КонецФункции

Функция СообщениеДубльИННПлательщикаНДС(ПредставлениеИННПлательщикаНДС_КодФилиала, НайденныйДубльПоИННПлательщикаНДС)	    
	
    СтрСообщение = НСтр("ru='Контрагент создан не будет. ИНН плательщика НДС\код филиала - %1 уже указаны для контрагента %2 с кодом %3, ответственный - %4.';uk='Контрагента створено не буде. ІПН платника ПДВ\код філії - %1 вже вказані для контрагента %2 з кодом %3, відповідальний - %4.'");
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		СтрСообщение = СтрСообщение + " " + НСтр("ru='Измените код филиала или используйте уже имеющегося партнера.';uk='Змініть код філії або використовуйте вже наявного партнера.'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		СтрСообщение,
		ПредставлениеИННПлательщикаНДС_КодФилиала,
		НайденныйДубльПоИННПлательщикаНДС.Ссылка,
		НайденныйДубльПоИННПлательщикаНДС.Код,
		НайденныйДубльПоИННПлательщикаНДС.ОсновнойМенеджер);
	
КонецФункции

Процедура ОтобразитьДубльИННПлательщикаНДСКодФилиалавНайденныхПартнерах(НайденныйДубльПоИНН, ПредставленияРеквизитов, Форма)	    
	
	НайденныеСтроки = Форма.ТаблицаНайдено.НайтиСтроки(Новый Структура("Партнер", НайденныйДубльПоИНН.Партнер));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПартнера = НайденныеСтроки[0];
    СтрокаПартнера.ДубльИННПлательщикаНДСКодФилиала = Истина;
	
	СсылкаНаДубль = ?(Форма.ИспользуютсяТолькоПартнеры, НайденныйДубльПоИНН.Партнер, НайденныйДубльПоИНН.Ссылка);
	
	УзелПартнера = Форма.ДеревоДанныхНайденныхПартнеров.НайтиПоИдентификатору(СтрокаПартнера.ИдентификаторДереваДанных);
	ЭлементыУзлаПартнера = УзелПартнера.ПолучитьЭлементы();
	Для Каждого ЭлементУзла Из ЭлементыУзлаПартнера Цикл
		Если ЭлементУзла.НайденоПоСсылка = СсылкаНаДубль Тогда
			
			УзелКонтрагента = ЭлементУзла.ПолучитьЭлементы();
            Для Каждого ЭлементИнформации Из УзелКонтрагента Цикл
				Если ЭлементИнформации.Реквизит = ПредставленияРеквизитов.СтрокаИННПлательщикаНДС Или
					 ЭлементИнформации.Реквизит = ПредставленияРеквизитов.СтрокаКодФилиала Тогда
					ЭлементИнформации.ДубльИННПлательщикаНДСКодФилиала = Истина;
				КонецЕсли;
			КонецЦикла;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
//-- Локализация

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции
//++ Локализация
Процедура ДобавитьСтрокуВТаблицуРеквизитовДанных(ТаблицаРеквизитов, Реквизит, Значение, Порядок, Существенный = Ложь)
	
	СтрокаРеквизита = ТаблицаРеквизитов.Добавить();
	СтрокаРеквизита.Реквизит = Реквизит;
	СтрокаРеквизита.Значение = Значение;
	СтрокаРеквизита.Порядок  = Порядок;
	СтрокаРеквизита.Существенный = Существенный;
	
КонецПроцедуры
//-- Локализация
#КонецОбласти

#КонецОбласти