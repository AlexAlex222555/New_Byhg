///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает данные из справочника КлассификаторБанков по значениям КодБанка и корреспондентского счета банка.
// 
// Параметры:
//  КодБанка     - Строка - банковский идентификационный код.
//  КоррСчет     - Строка - корреспондентский счет банка.
//  ЗаписьОБанке - СправочникСсылка, Строка - (возвращаемый) найденный банк.
Процедура ПолучитьДанныеКлассификатора(КодБанка = "", КоррСчет = "", ЗаписьОБанке = "") Экспорт
	
	Если Не ПустаяСтрока(КодБанка) Тогда
		КлассификаторБанков   = Справочники.КлассификаторБанков;
		ЗаписьОБанке		  = КлассификаторБанков.НайтиПоКоду(КодБанка);
		Если ЗаписьОБанке.Пустая() или ЗаписьОБанке.ЭтоГруппа Тогда
			ЗаписьОБанке = "";			
		КонецЕсли;	
	ИначеЕсли Не ПустаяСтрока(КоррСчет) Тогда
		КлассификаторБанков   = Справочники.КлассификаторБанков;
		ЗаписьОБанке		  = КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", КоррСчет);
		Если ЗаписьОБанке.Пустая()  или ЗаписьОБанке.ЭтоГруппа Тогда
			ЗаписьОБанке = "";			
		КонецЕсли;	
	Иначе
		ЗаписьОБанке = "";
	КонецЕсли;	   
	
КонецПроцедуры

Функция ПолучитьБанкПоНомеруСчетаIBAN(НомерСчета) Экспорт
	
	БанкПоСчету = Неопределено;
	
	КодБанка = РегламентированныеДанныеКлиентСервер.ПолучитьКодБанкаПоНомеруСчетаIBAN(НомерСчета);
	
	Если ЗначениеЗаполнено(КодБанка) Тогда
		
		ПолучитьДанныеКлассификатора(КодБанка,,БанкПоСчету);
		
	КонецЕсли;
	
	Возврат БанкПоСчету;
	
КонецФункции


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ЗагрузкаДанныхИзФайлаПереопределяемый.ПриОпределенииСправочниковДляЗагрузкиДанных.
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в классификатор КлассификаторБанков запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.КлассификаторБанков.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.КлассификаторБанков.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// ТолькоДляПользователейСистемы.
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.ДобавлениеИзменениеБанков.Имя);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке.
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.КлассификаторБанков);
	
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	
КонецПроцедуры

#КонецОбласти
