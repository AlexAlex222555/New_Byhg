////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для обработки действий пользователя
// в процессе работы с документами продажи.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает наибольшую из дат аванса в строке тч ЭтапыОплаты
//
// Параметры:
//   ЭтапыГрафикаОплаты - ДанныеФормыКоллекция - этапы оплаты, в которых необходимо рассчитать дату аванса.
//
// Возвращаемое значение:
//   Дата - максимальная дата аванса, если дат аванса нет, то пустая дата.
//
Функция МаксимальнаяДатаАванса(ЭтапыГрафикаОплаты) Экспорт
	
	МаксДатаАванса = '00010101';
	
	Для Каждого ТекЭтап Из ЭтапыГрафикаОплаты Цикл
		
		Если ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки") Или
			ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения") Тогда
			
			МаксДатаАванса = Макс(МаксДатаАванса, ТекЭтап.ДатаПлатежа);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат МаксДатаАванса;
	
КонецФункции

// Процедура обработки события "ПриНачалеРедактирования" табличной части документа продажи.
//
// Параметры:
//	Форма         - ФормаКлиентскогоПриложения - форма документа, в котором возникло событие
//	ИмяТаблицы    - Строка - имя таблицы, из которой произошло событие
//	СтрокаТаблицы - ДанныеФормыЭлементКоллекции - обрабатываемая строка табличной части документа
//	НоваяСтрока   - Булево - флаг редактирования новой строки
//	Копирование   - Булево - флаг редактирования путем копирования строки.
//
Процедура СтрокаНоменклатурыПриНачалеРедактирования(Форма, ИмяТаблицы, СтрокаТаблицы, НоваяСтрока, Копирование) Экспорт

	Если НоваяСтрока И НЕ Копирование Тогда

		Если Не Форма.ИспользоватьСоглашенияСКлиентами И СтрокаТаблицы.Свойство("ВидЦены") Тогда
			
			Таблица = Форма.Объект[ИмяТаблицы];
			
			Если Таблица.Количество() > 1 Тогда
				СтрокаТаблицы.ВидЦены = Таблица[СтрокаТаблицы.НомерСтроки - 2].ВидЦены;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидЦены) Тогда
				СтрокаТаблицы.ВидЦены = Форма.ВидЦеныПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя о перезаполнении желаемой даты отгрузки.
//
Процедура ОповеститьОПерезаполненииЖелаемойДатыОтгрузки() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru='Желаемая дата отгрузки перезаполнена';uk='Бажана дата відвантаження перезаповнена'"),
		,
		НСтр("ru='Желаемая дата отгрузки перезаполнена с учетом максимальной даты аванса.';uk='Бажана дата відвантаження перезаповнена з урахуванням максимальної дати авансу.'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

#Область ПроцедурыИФункцииРаботыСВыборомЗначений

// Функция-конструктор параметров начала выбора соглашения с клиентом на форме.
//
// Возвращаемое значение:
// 	Структура - Структура параметров:
//     * Элемент                      - ПолеФормы - Поле выбора соглашения.
//     * Партнер                      - СправочникСсылка.Партнеры - ссылка на партнера, для которого выберите соглашение
//     * Документ                     - СправочникСсылка.СоглашенияСКлиентами - ссылка на ранее выбранное соглашение для
//                                                                              начального позиционирования в списке.
//     * ДатаДокумента                - Дата - Дата для определения действующего соглашения.
//     * ТолькоТиповые                - Булево - флаг, позволяющий включать в список выбора только типовые соглашения
//     * ТолькоИспользуемыеВРаботеТП  - Булево - флаг, позволяющий включать в список выбора только соглашения,
//                                              используемые в работе торговых представителей.
//     * ХозяйственнаяОперация        - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция объекта.
//     * ДанныеФормыСтруктура         - ДанныеФормыСтруктура - Данные формы инициатора.
//
Функция ПараметрыНачалаВыбораСоглашенияСКлиентом() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Элемент");
	СтруктураПараметров.Вставить("Партнер");
	СтруктураПараметров.Вставить("Документ");
	СтруктураПараметров.Вставить("ДатаДокумента", Дата(1,1,1));
	СтруктураПараметров.Вставить("ТолькоТиповые", Ложь);
	СтруктураПараметров.Вставить("ТолькоИспользуемыеВРаботеТП", Ложь);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", Неопределено);
	СтруктураПараметров.Вставить("ДанныеФормыСтруктура", Неопределено);
	СтруктураПараметров.Вставить("ИспользуютсяДоговорыКонтрагентов", Неопределено);
    СтруктураПараметров.Вставить("Валюта");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура - обработчик события "НачалоВыбора" элемента формы "Соглашение"
//
// Параметры:
//	СтруктураПараметров  - см. ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом
//	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
//
Процедура НачалоВыбораСоглашенияСКлиентом(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	
	Элемент                     = СтруктураПараметров.Элемент;
	Партнер                     = СтруктураПараметров.Партнер;
	Документ                    = СтруктураПараметров.Документ;
	ДатаДокумента               = СтруктураПараметров.ДатаДокумента;
	ТолькоТиповые               = СтруктураПараметров.ТолькоТиповые;
	ТолькоИспользуемыеВРаботеТП = СтруктураПараметров.ТолькоИспользуемыеВРаботеТП;
	ХозяйственнаяОперация       = СтруктураПараметров.ХозяйственнаяОперация;
	ДанныеФормыСтруктура        = СтруктураПараметров.ДанныеФормыСтруктура;
	ИспользуютсяДоговорыКонтрагентов = СтруктураПараметров.ИспользуютсяДоговорыКонтрагентов;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ОтборКлиент = Новый Структура("Клиент", Истина);
		
		Если СтруктураПараметров.Свойство("ОбслуживаетсяТорговымиПредставителями") Тогда
			ОтборКлиент.Вставить("ОбслуживаетсяТорговымиПредставителями", СтруктураПараметров.ОбслуживаетсяТорговымиПредставителями);	
		КонецЕсли;

		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", Новый Структура("Отбор", ОтборКлиент),,,,, 
			Новый ОписаниеОповещения("НачалоВыбораСоглашенияСКлиентомЗавершение", ЭтотОбъект, СтруктураПараметров), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	НачалоВыбораСоглашенияСКлиентомФрагмент(СтруктураПараметров);
	
КонецПроцедуры

// Создает транспортную накладную в случае утвердительного ответа пользователя.
//
// Параметры:
//  Результат               - СправочникСсылка.Партнеры - партнер, для которого выбираются соглашения.
//  ДополнительныеПараметры - Структура - дополнительные параметры, необходимые для отбора соглашений.
//
Процедура НачалоВыбораСоглашенияСКлиентомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДатаДокумента 				= ДополнительныеПараметры.ДатаДокумента;
	Документ 					= ДополнительныеПараметры.Документ;
	ТолькоИспользуемыеВРаботеТП = ДополнительныеПараметры.ТолькоИспользуемыеВРаботеТП;
	ТолькоТиповые 				= ДополнительныеПараметры.ТолькоТиповые;
	ХозяйственнаяОперация 		= ДополнительныеПараметры.ХозяйственнаяОперация;
	Элемент 					= ДополнительныеПараметры.Элемент;
	ДанныеФормыСтруктура 		= ДополнительныеПараметры.ДанныеФормыСтруктура;
	
	Партнер = Результат;
	
	Если ДанныеФормыСтруктура<>Неопределено Тогда
		ДанныеФормыСтруктура.Партнер = Партнер;
		Если ДанныеФормыСтруктура.Свойство("Контрагент") Тогда
			ПартнерыИКонтрагентыВызовСервера.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, ДанныеФормыСтруктура.Контрагент, Истина);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДляВыбора = ПараметрыНачалаВыбораСоглашенияСКлиентом();
	ЗаполнитьЗначенияСвойств(СтруктураДляВыбора, ДополнительныеПараметры);
	СтруктураДляВыбора.Вставить("Партнер", Партнер);
	
	НачалоВыбораСоглашенияСКлиентомФрагмент(СтруктураДляВыбора);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы "Аналитика расходов".
//
// Параметры:
//	Элемент  - ПолеФормы - Поле выбора аналитики расходов
//	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
//
Процедура НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.ПродажиКлиент.НачалоВыбораАналитикиРасходов");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.ВыборАналитикиРасходов", , Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиВозможностиВыполненияДействий

// Проверяет заполненность реквизитов, необходимых для заполнения цен в документе по соглашению с клиентом.
//
// Параметры:
//	Документ                    - ДокументОбъект - объект, для которого выполняются проверки
//	ИмяТабличнойЧасти           - Строка - имя табличной части, в которой необходимо осуществить проверку
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя.
//
// Возвращаемое значение:
//	Булево - Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеЦенПоСоглашению(Документ, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти) Экспорт

	Если Не ЗначениеЗаполнено(Документ.Соглашение) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В документе не указано соглашение с клиентом. Цены не могут быть заполнены.';uk='У документі не вказано оферу клієнту. Ціни не можуть бути заповнені.'"));
		Возврат Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Документ.Валюта) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В документе не указана валюта. Цены не могут быть заполнены.';uk='У документі не вказана валюта. Ціни не можуть бути заповнені.'"));
		Возврат Ложь;
		
	ИначеЕсли Документ[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены.';uk='В документі не заповнений список %ПредставлениеТабличнойЧасти%. Ціни не можуть бути заповнені.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

// Проверяет заполненность реквизитов, необходимых для заполнения цен в документе по виду цен.
//
// Параметры:
//   Документ                    - ДокументОбъект - объект, для которого выполняются проверки.
//   ИмяТабличнойЧасти           - Строка - имя табличной части, в которой необходимо осуществить проверку.
//   ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя.
//
// Возвращаемое значение:
//   Булево - Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеЦенПоВидуЦен(Документ, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти) Экспорт

	Если Не ЗначениеЗаполнено(Документ.Валюта) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В документе не указана валюта. Цены не могут быть заполнены.';uk='У документі не вказана валюта. Ціни не можуть бути заповнені.'"));
		Возврат Ложь;
		
	ИначеЕсли Документ[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены.';uk='В документі не заповнений список %ПредставлениеТабличнойЧасти%. Ціни не можуть бути заповнені.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для отмены строк в таблице
//
// Параметры:
//   Документ                    - ДокументОбъект - объект, для которого выполняются проверки.
//   ТабличнаяЧасть              - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку.
//   ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя.
//
// Возвращаемое значение:
//   Булево - Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(ТабличнаяЧасть, ПредставлениеТабличнойЧасти, ВыделенныеСтроки) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Строки не могут быть отменены.';uk='В документі не заповнений список %ПредставлениеТабличнойЧасти%. Рядки не можуть бути скасовані.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В таблице отсутствуют выделенные строки. Выделите строки для отмены.';uk='У таблиці відсутні виділені рядки. Виділіть рядки для скасування.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для отмены непоставленных строк
//
// Параметры:
//   ТабличнаяЧасть              - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку.
//   ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя.
//
// Возвращаемое значение:
//   Булево - Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеПричиныОтменыНепоставленныхСтрок(ТабличнаяЧасть, ПредставлениеТабличнойЧасти) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Строки не могут быть отменены.';uk='В документі не заповнений список %ПредставлениеТабличнойЧасти%. Рядки не можуть бути скасовані.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
		ЕстьНеотмененныеСтроки = Ложь;
		Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
			Если Не ТекСтрока.Отменено Тогда
				ЕстьНеотмененныеСтроки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьНеотмененныеСтроки Тогда
			ПоказатьПредупреждение(,НСтр("ru='Все строки отменены.';uk='Всі рядки скасовані.'"));
			Возврат Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для заполнения товаров по отгрузке.
//
// Параметры:
//   ДокументПроведен - Булево - признак проведенности документа.
//
// Возвращаемое значение:
//   Булево - Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеТоваровПоОтгрузке(ДокументПроведен) Экспорт
	
	Если Не ДокументПроведен Тогда
		ПоказатьПредупреждение(,НСтр("ru='Документ не проведен, заполнение невозможно.';uk='Документ не проведено, заповнення неможливо.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Проверяет является ли оповещение в форме событием изменения документов оплаты.
//
// Параметры:
//   ИмяСобытия - Строка - имя события из процедуры формы "ОбработкаОповещения".
//
// Возвращаемое значение:
//   Булево - Истина, если оповещение является оплатой.
//
Функция ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Экспорт
	
	Возврат
		ИмяСобытия = "Запись_ОперацияПоПлатежнойКарте"
		Или ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ПриходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ВзаимозачетЗадолженности"
		Или ИмяСобытия = "Запись_СписаниеЗадолженности";
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОповещенияПользователяОВыполненныхДействиях

// Показывает оповещение пользователя об окончании заполнения условий продаж по умолчанию.
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru='Условия продаж заполнены';uk='Умови продажів заповнені'"),
		,
		НСтр("ru='Условия продаж по умолчанию заполнены';uk='Умови продажів по умовчанню заповнені'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения условий продаж
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийПродаж() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru='Условия продаж заполнены';uk='Умови продажів заповнені'"),
		,НСтр("ru='Условия продаж по соглашению с клиентом заполнены';uk='Умови продажів за офертою клієнту заповнені'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения цен по соглашению с клиентом.
//
// Параметры:
//	ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке.
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны = Истина) Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru='Цены заполнены';uk='Ціни заповнені'"),
			,
			НСтр("ru='Цены по соглашению с клиентом заполнены';uk='Ціни за офертою клієнту заповнені'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru='Цены не заполнены';uk='Ціни не заповнені'"),
			,
			НСтр("ru='Ни в одной строке цены по соглашению с клиентом не заполнены';uk='Ні в одному рядку ціни за офертою клієнту не заповнені'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения цен по виду цен.
//
// Параметры:
//  ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке.
//  ВидЦен - СправочникСсылка.ВидыЦен - Вид цен, по которому осуществлялось заполнение цен.
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен) Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru='Цены заполнены';uk='Ціни заповнені'"),
			,
			СтрЗаменить(НСтр("ru='Цены по виду цен ""%ВидЦен%"" заполнены';uk='Ціни за видом цін ""%ВидЦен%"" заповнені'"), "%ВидЦен%", ВидЦен),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru='Цены не заполнены';uk='Ціни не заповнені'"),
			,
			СтрЗаменить(НСтр("ru='Ни в одной строке цены по виду цен ""%ВидЦен%"" не заполнены';uk='Ні в одному рядку ціни за видом цін ""%ВидЦен%"" не заповнені'"), "%ВидЦен%", ВидЦен),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об отмене выделенных строк
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк.
//
Процедура ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены) Экспорт

		ПоказатьОповещениеПользователя(
			НСтр("ru='Выделенные строки отменены';uk='Виділені рядки скасовані'"),
			,
			СтрЗаменить(НСтр("ru='Выделенные строки отменены по причине ""%ПричинаОтмены%""';uk='Виділені рядки скасовані через ""%ПричинаОтмены%""'"), "%ПричинаОтмены%", ПричинаОтмены),
			БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Показывает оповещение пользователя об отмене выделенных строк
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк.
//
Процедура ОповеститьОбОтменеНепоставленныхСтрок(ПричинаОтмены, КоличествоОтмененныхСтрок, ПроверятьОстатки) Экспорт

	Если КоличествоОтмененныхСтрок = 0 Тогда
			
		ПоказатьОповещениеПользователя(
			НСтр("ru='Строки не отменены';uk='Рядки не скасовані'"),
			,
			НСтр("ru='По всем строкам оформлена отгрузка. Строки не могут быть отменены.';uk='За всіма рядками оформлена відвантаження. Рядки не можуть бути скасовані.'"),
			БиблиотекаКартинок.Информация32);
			
		Иначе
			
			Если ПроверятьОстатки Тогда

				ПоказатьОповещениеПользователя(
					НСтр("ru='Строки отменены';uk='Рядки скасовані'"),
					,
					СтрЗаменить(НСтр("ru='Все непоставленные строки отменены по причине ""%ПричинаОтмены%"".';uk='Всі непоставлені рядки скасовані через ""%ПричинаОтмены%"".'"), "%ПричинаОтмены%", ПричинаОтмены),
					БиблиотекаКартинок.Информация32);
			
			Иначе
				
				ПоказатьОповещениеПользователя(
					НСтр("ru='Строки отменены';uk='Рядки скасовані'"),
					,
					СтрЗаменить(НСтр("ru='Все строки отменены по причине ""%ПричинаОтмены%"".';uk='Всі рядки скасовані через ""%ПричинаОтмены%"".'"), "%ПричинаОтмены%", ПричинаОтмены),
					БиблиотекаКартинок.Информация32);
				
			КонецЕсли;
			
		КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения дат отгрузки всех строк тч.
//
// Параметры:
//	ДатаОтгрузки - Дата - дата отгрузки, по которой заполнялась дата в табличной части
//	ВыделенныеСтроки - Массив - влияет на текст сообщения.
//
Процедура ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, ЗаполнениеВыделенныхСтрок) Экспорт

	Если ЗаполнениеВыделенныхСтрок Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Дата отгрузки заполнена';uk='Дата відвантаження заповнена'"),
			,
			СтрЗаменить(НСтр("ru='Для выделенных строк установлена дата отгрузки %ДатаОтгрузки%';uk='Для виділених рядків встановлена дата відвантаження %ДатаОтгрузки%'"), "%ДатаОтгрузки%", Формат(ДатаОтгрузки, "ДЛФ=D")),
			БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Дата отгрузки заполнена';uk='Дата відвантаження заповнена'"),
			,
			СтрЗаменить(НСтр("ru='Для всех строк установлена дата отгрузки %ДатаОтгрузки%';uk='Для всіх рядків встановлена дата відвантаження %ДатаОтгрузки%'"), "%ДатаОтгрузки%", Формат(ДатаОтгрузки, "ДЛФ=D")),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об окончании перезаполнения товаров по фактической отгрузке.
//
// Параметры:
//	ЕстьИзменения           - Булево - Если Истина - есть изменения в табличной части
//	КоличествоПерезаполнено - Булево - Если Истина - количество было перезаполнено по фактической отгрузке.
//
Процедура ОповеститьОбОкончанииПерезаполненияТоваровПоОтгрузке(ЕстьИзменения, КоличествоПерезаполнено, ЕстьНесобранные = Ложь) Экспорт
	
	Если ЕстьИзменения Тогда
		Если ЕстьНесобранные Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru='Количество перезаполнено';uk='Кількість перезаповнено'"),
				,
				НСтр("ru='В строках перезаполнено количество с учетом собирающихся на складе товаров.';uk='У рядках перезаповнена кількість з урахуванням на складі товарів, що збираються.'"),
				БиблиотекаКартинок.Информация32);
		Иначе
			ПоказатьОповещениеПользователя(
				НСтр("ru='Количество перезаполнено';uk='Кількість перезаповнено'"),
				,
				НСтр("ru='В строках перезаполнено количество.';uk='У рядках перезаповнено кількість.'"),
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	Иначе
		
		Если КоличествоПерезаполнено Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru='Перезаполнение не требуется';uk='Перезаповнення не потрібно'"),
				,
				НСтр("ru='Перезаполнение не требуется, т.к. во всех строках количество совпадает с указанным.';uk='Перезаповнення не потрібно, тому що у всіх рядках кількість співпадає з вказаною.'"),
				БиблиотекаКартинок.Информация32);
			
		Иначе
		
			ПоказатьОповещениеПользователя(
				НСтр("ru='Перезаполнение не требуется';uk='Перезаповнення не потрібно'"),
				,
				НСтр("ru='Ни по одной строке не начата отгрузка.';uk='Ні по одному рядку не розпочате відвантаження.'"),
				БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработкиКомандПользователя

// Проверяет заполненность реквизитов, необходимых для заполнения товаров по отгрузке.
//
// Параметры:
//   ЕстьОтгруженныеТовары - Булево             - признак наличия отгруженных товаров.
//   ОписаниеОповещения    - ОписаниеОповещения - обработка пользовательского выбора.
//
Процедура ВопросОПерезаполненииОтгруженнымиТоварами(ОписаниеОповещения, ЕстьОтгруженныеТовары) Экспорт
	
	СписокКнопок = Новый СписокЗначений();
	
	Если ЕстьОтгруженныеТовары Тогда
		
		ТекстВопроса = НСтр("ru='Не все товары собраны/отгружены. Учитывать при заполнении товары, которые находятся в процессе сборки?';uk='Не всі товари зібрані/відвантажені. Враховувати при заповненні товари, які перебувають у процесі збирання?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru='Учитывать';uk='Враховувати'"));
		СписокКнопок.Добавить("НеУчитывать", НСтр("ru='Не учитывать';uk='Не враховувати'"));
		
	Иначе
		
		ТекстВопроса = НСтр("ru='Отсутствуют собранные/отгруженные товары. Учитывать при заполнении товары, которые находятся в процессе сборки?';uk='Відсутні зібрані/відвантажені товари. Враховувати при заповненні товари, які перебувають у процесі збирання?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru='Учитывать';uk='Враховувати'"));
		
	КонецЕсли;
	
	СписокКнопок.Добавить("НеПерезаполнять", НСтр("ru='Не перезаполнять';uk='Не перезаповнювати'"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросОПерезаполненииОтгруженнымиТоварамиЗавершение", ПродажиКлиент, ДополнительныеПараметры),
		ТекстВопроса,
		СписокКнопок);
	
КонецПроцедуры

// Обработчик вопроса о перезаполнении отгруженными товарами.
//
// Параметры:
//  ОтветНаВопрос           - Строка - вариант ответа на вопрос, выбранный пользователем.
//  ДополнительныеПараметры - Структура - дополнительные параметры, необходимые для заполнения.
//
Процедура ВопросОПерезаполненииОтгруженнымиТоварамиЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаполнятьНесобраннымиТоварами", (ОтветНаВопрос = "Учитывать"));
	Результат.Вставить("Перезаполнить", Не (ОтветНаВопрос = "НеПерезаполнять"));
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
	
КонецПроцедуры

// Процедура для выбора вида цен из формы выбора.
//
// Параметры:
//	Форма                                     - ФормаКлиентскогоПриложения - форма, в которой необходимо заполнить цены
//	ИспользоватьПриПродаже                    - Булево - Выбор вида цены для продажи
//	ИспользоватьПриПередачеМеждуОрганизациями - Булево - Выбор вида цены для передачи между организациями.
//
Процедура ВыбратьВидЦен(
	ОписаниеОповещения,
	ЦенаВключаетНДС = Неопределено,
	ИспользоватьПриПродаже = Неопределено,
	ИспользоватьПриПередачеМеждуОрганизациями = Неопределено
	//++ НЕ УТ
	, ИспользоватьПриПередачеПродукцииДавальцу = Неопределено
	//-- НЕ УТ
	) Экспорт
	
	ВидЦеныПрайсЛист = ЦенообразованиеВызовСервера.ВидЦеныПрайсЛист();
	Если ВидЦеныПрайсЛист <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВидЦеныПрайсЛист);
		Возврат;
	КонецЕсли;
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыДействияВидовЦен.Действует"));
	Если ЦенаВключаетНДС <> Неопределено Тогда
		СтруктураОтбор.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	КонецЕсли;
	Если ИспользоватьПриПродаже <> Неопределено Тогда
		СтруктураОтбор.Вставить("ИспользоватьПриПродаже", ИспользоватьПриПродаже);
	КонецЕсли;
	Если ИспользоватьПриПередачеМеждуОрганизациями <> Неопределено Тогда
		СтруктураОтбор.Вставить("ИспользоватьПриПередачеМеждуОрганизациями", ИспользоватьПриПередачеМеждуОрганизациями);
	КонецЕсли;
	//++ НЕ УТ
	Если ИспользоватьПриПередачеПродукцииДавальцу <> Неопределено Тогда
		СтруктураОтбор.Вставить("ИспользоватьПриПередачеПродукцииДавальцу", ИспользоватьПриПередачеПродукцииДавальцу);
	КонецЕсли;
	//-- НЕ УТ
	
	ОткрытьФорму(
		"Справочник.ВидыЦен.ФормаВыбора",
		Новый Структура("Отбор", СтруктураОтбор),,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "НеСогласовано".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиНеСогласовано(Список) Экспорт
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Не согласовано"". По действующим соглашениям могут быть оформлены документы. После изменения статуса действующие соглашения перестанут действовать. Продолжить?';uk='У виділених у списку оферт буде встановлено статус ""Не погоджено"". За чинними офертами можуть бути оформлені документи. Після зміни статусу діючі оферти перестануть діяти. Продовжити?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСоглашенийСКлиентамиНеСогласованоЗавершение", ЭтотОбъект, Новый Структура("Список", Список)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Устанавливает статус соглашений с клиентами
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога -  набор вариантов ответа пользователя 
//  ДополнительныеПараметры	 - Структура - структура параметров.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиНеСогласованоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Список = ДополнительныеПараметры.Список;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиНеСогласовано(Список.ВыделенныеСтроки);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, Список.ВыделенныеСтроки.Количество(), НСтр("ru='Не согласовано';uk='Не погоджено'"));

КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "Действует".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиДействует(Список) Экспорт
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Действует"". Продолжить?';uk='У виділених у списку оферт буде встановлено статус ""Діє"". Продовжити?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСоглашенийСКлиентамиДействуетЗавершение", ЭтотОбъект, Новый Структура("Список", Список)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Устанавливает статус соглашений с клиентами
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога -  набор вариантов ответа пользователя 
//  ДополнительныеПараметры	 - Структура - структура параметров.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиДействуетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Список = ДополнительныеПараметры.Список;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ОчиститьСообщения();
	
    КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиДействует(Список.ВыделенныеСтроки);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, Список.ВыделенныеСтроки.Количество(), НСтр("ru='Действует';uk='Діє'"));

КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "Закрыто".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиЗакрыто(Список) Экспорт
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Закрыто"". После изменения статуса действующие соглашения перестанут действовать. Продолжить?';uk='У виділених у списку оферт буде встановлено статус ""Закрито"". Після зміни статусу діючі оферти перестануть діяти. Продовжити?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСоглашенийСКлиентамиЗакрытоЗавершение", ЭтотОбъект, Новый Структура("Список", Список)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Устанавливает статус соглашений с клиентами
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога -  набор вариантов ответа пользователя 
//  ДополнительныеПараметры	 - Структура - структура параметров.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиЗакрытоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Список = ДополнительныеПараметры.Список;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ОчиститьСообщения();
	
    КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиЗакрыто(Список.ВыделенныеСтроки);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, Список.ВыделенныеСтроки.Количество(), НСтр("ru='Закрыто';uk='Закрито'"));

КонецПроцедуры

// Устанавливает у выделенных в таблице строк признак Отменено и заполняет причину отмены.
//
// Параметры:
//	ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку
//	ВыделенныеСтроки - Массив - массив выделенных пользователем строк табличной части
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки
//	СтруктураДействийСИзмененнымиСтроками - Структура - Структура действий с измененными строками.
//
Процедура ОтменитьВыделенныеСтроки(ТабличнаяЧасть, ВыделенныеСтроки, ПричинаОтмены, СтруктураДействийСИзмененнымиСтроками=Неопределено) Экспорт
	
	МассивСтрок = Новый Массив;
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл

		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.ПричинаОтмены <> ПричинаОтмены Тогда
				СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			КонецЕсли;
			
			Если СтруктураДействийСИзмененнымиСтроками <> Неопределено Тогда
				ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает нажатие информационной гиперссылки о состоянии документа и выводит отчет "Состояние выполнения".
//
// Параметры:
//  СтандартнаяОбработка  - Булево - признак стандартной обработки события.
//  Форма                 - ФормаКлиентскогоПриложения - Форма, в которой было выполнено нажатие. Содержит в том числе:
//    * Объект - ДокументОбъект - 
//
Процедура СостояниеВФормеДокументаНажатие(СтандартнаяОбработка, Форма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Ссылка = Форма.Объект.Ссылка;
	
	Если НЕ Ссылка.Пустая() Тогда
		
		СтандартнаяОбработка = Ложь;
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(Ссылка);
		
		ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", 
		             Новый Структура("ВходящиеДокументы", СписокДокументов), 
		             Форма,
		             Истина);
	
	КонецЕсли;
	
КонецПроцедуры

//Открывает отчет по задолженности при нажатии на гиперссылку запрета отгрузки в формах документов.
Процедура ОткрытьОтчетРасшифровкиЗапретаОтгрузки(Договор, ДанныеПоСуммеПродажи, КлючНазначенияИспользования, НоваяАрхитектураВзаиморасчетов) Экспорт
	
	Если НЕ НоваяАрхитектураВзаиморасчетов Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", КлючНазначенияИспользования);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Истина);
		ПараметрыФормы.Вставить("Отбор",                       Новый Структура("Договор", Договор));
		ПараметрыФормы.Вставить("Договор",                     Договор);
		ПараметрыФормы.Вставить("ДанныеПоСуммеПродажи",        ДанныеПоСуммеПродажи);
		
		ОткрытьФорму("Отчет.ПричиныЗапретаОтгрузки.Форма",
			ПараметрыФормы,
			,
			"Договор=" + Договор);
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта", "ЗадолженностьКлиентовПричиныЗапретаОтгрузки" );
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",         Истина);
		ПараметрыФормы.Вставить("Отбор",                           Новый Структура("Договор", Договор));
		ПараметрыФормы.Вставить("КлючНазначенияИспользования",     КлючНазначенияИспользования);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		ОткрытьФорму("Отчет.ЗадолженностьКлиентов.Форма", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Процедура НачалоВыбораСоглашенияСКлиентомФрагмент(СтруктураПараметров)
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.Партнер) Тогда
		Возврат;
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаДокумента", СтруктураПараметров.ДатаДокумента);
		ПараметрыФормы.Вставить("Партнер", СтруктураПараметров.Партнер);
		ПараметрыФормы.Вставить("ТолькоТиповые",СтруктураПараметров.ТолькоТиповые);
		ПараметрыФормы.Вставить("ТолькоИспользуемыеВРаботеТП",СтруктураПараметров.ТолькоИспользуемыеВРаботеТП);
		ПараметрыФормы.Вставить("ТекущаяСтрока",СтруктураПараметров.Документ);
		ПараметрыФормы.Вставить("ХозяйственнаяОперация",СтруктураПараметров.ХозяйственнаяОперация);
		ПараметрыФормы.Вставить("ИспользуютсяДоговорыКонтрагентов",СтруктураПараметров.ИспользуютсяДоговорыКонтрагентов);
        ПараметрыФормы.Вставить("Валюта", СтруктураПараметров.Валюта);

		ДополнительныйОтбор = Новый Структура;
		
		Для Каждого ПараметрВыбора Из СтруктураПараметров.Элемент.ПараметрыВыбора Цикл
			ДополнительныйОтбор.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), ПараметрВыбора.Значение);
		КонецЦикла;
		
		ПараметрыФормы.Вставить("Отбор", ДополнительныйОтбор);
		
		ОткрытьФорму("Справочник.СоглашенияСКлиентами.ФормаВыбора",
			ПараметрыФормы,
			СтруктураПараметров.Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


