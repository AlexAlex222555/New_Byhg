///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента.
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.НастройкиПроксиНаКлиенте());
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриВключенииИспользованияПрофилейБезопасности.
Процедура ПриВключенииИспользованияПрофилейБезопасности() Экспорт
	
	// Сброс настроек прокси-сервера на системные.
	СохранитьНастройкиПроксиНаСервере1СПредприятие(Неопределено);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Предупреждение, Метаданные.Константы.НастройкаПроксиСервера,,
		НСтр("ru='При включении профилей безопасности настройки прокси-сервера сброшены на системные.';uk='При включенні профілів безпеки настройки проксі-сервера скинуті на системні.'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прокси

// Сохраняет параметры настройки прокси сервера на стороне сервера BAF.
//
Процедура СохранитьНастройкиПроксиНаСервере1СПредприятие(Знач Настройки) Экспорт
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение(НСтр("ru='Недостаточно прав для выполнения операции';uk='Недостатньо прав для виконання операції'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.НастройкаПроксиСервера.Установить(Новый ХранилищеЗначения(Настройки));
	
КонецПроцедуры

#КонецОбласти

#Область СкачатьФайл

#Если Не ВебКлиент Тогда

// Функция для получения файла из сети Интернет.
//
// Параметры:
//   URL           - строка - url файла в формате:
//   НастройкиПолучения   - Структура со свойствами.
//    * ПутьДляСохранения            - Строка - путь на сервере (включая имя файла), для сохранения скачанного файла.
//    * Пользователь                 - Строка - пользователь от имени которого установлено соединение.
//    * Пароль                       - Строка - пароль пользователя от которого установлено соединение.
//    * Порт                         - Число  - порт сервера с которым установлено соединение.
//    * Таймаут                      - Число  - таймаут на получение файла, в секундах.
//    * ЗащищенноеСоединение         - Булево - для случая http загрузки флаг указывает,
//                                             что соединение должно производиться через https.
//    * ПассивноеСоединение          - Булево - для случая ftp загрузки флаг указывает,
//                                             что соединение должно пассивным (или активным).
//    * Заголовки                    - Соответствие - см. описание параметра Заголовки объекта HTTPЗапрос.
//    * ИспользоватьАутентификациюОС - Булево - см. описание параметра ИспользоватьАутентификациюОС объекта HTTPСоединение.
//
// НастройкаСохранения - соответствие - содержит параметры для сохранения скачанного файла
//                 ключи:
//                 МестоХранения - строка - может содержать
//                        "Сервер" - сервер,
//                        "ВременноеХранилище" - временное хранилище.
//                 Путь - строка (необязательный параметр) -
//                        путь к каталогу на клиенте либо на сервере либо адрес во временном хранилище
//                        если не задано будет сгенерировано автоматически.
//
// Возвращаемое значение:
//   структура - 
//   успех  - булево - успех или неудача операции
//   строка - строка - в случае успеха либо строка-путь сохранения файла
//                   либо адрес во временном хранилище
//                   в случае неуспеха сообщение об ошибке.
//
Функция СкачатьФайл(Знач URL, Знач ПараметрыПолучения, Знач НастройкаСохранения, Знач ЗаписыватьОшибку = Истина) Экспорт
	
	НастройкиПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
	Если ПараметрыПолучения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПолучения, ПараметрыПолучения);
	КонецЕсли;
	
	Если НастройкаСохранения.Получить("МестоХранения") <> "ВременноеХранилище" Тогда
		НастройкаСохранения.Вставить("Путь", НастройкиПолучения.ПутьДляСохранения);
	КонецЕсли;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
	Перенаправления = Новый Массив;
	
	Возврат ПолучитьФайлИзИнтернет(URL, НастройкаСохранения, НастройкиПолучения,
		НастройкаПроксиСервера, ЗаписыватьОшибку, Перенаправления);
	
КонецФункции

// Функция для получения файла из сети Интернет.
//
// Параметры:
//   URL - строка - url файла в формате: [Протокол://]<Сервер>/<Путь к файлу на сервере>.
//
// НастройкаСоединения - Соответствие -
//		ЗащищенноеСоединение* - булево - соединение защищенное.
//		ПассивноеСоединение*  - булево - соединение защищенное.
//		Пользователь - строка - пользователь от имени которого установлено соединение.
//		Пароль       - строка - пароль пользователя от которого установлено соединение.
//		Порт         - число  - порт сервера с которым установлено соединение
//		* - взаимоисключающие ключи.
//
// НастройкиПрокси - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер.
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//		Сервер       - адрес прокси-сервера.
//		Порт         - порт прокси-сервера.
//		Пользователь - имя пользователя для авторизации на прокси-сервере.
//		Пароль       - пароль пользователя.
//		ИспользоватьАутентификациюОС - Булево - признак использования аутентификации средствами операционной системы.
//
// НастройкаСохранения - соответствие - содержит параметры для сохранения скачанного файла.
//		МестоХранения - строка - может содержать
//			"Сервер" - сервер,
//			"ВременноеХранилище" - временное хранилище.
//		Путь - строка (необязательный параметр) - путь к каталогу на клиенте либо на сервере,
//			либо адрес во временном хранилище,  если не задано будет сгенерировано автоматически.
//
// Возвращаемое значение:
//   структура - 
//   успех  - булево - успех или неудача операции
//   строка - строка - в случае успеха либо строка-путь сохранения файла
//                   либо адрес во временном хранилище
//                   в случае неуспеха сообщение об ошибке.
//
Функция ПолучитьФайлИзИнтернет(Знач URL, Знач НастройкаСохранения, Знач НастройкаСоединения,
	Знач НастройкиПрокси, Знач ЗаписыватьОшибку, Перенаправления = Неопределено)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	Сервер        = СтруктураURI.Хост;
	ПутьНаСервере = СтруктураURI.ПутьНаСервере;
	Протокол      = СтруктураURI.Схема;
	
	Если ПустаяСтрока(Протокол) Тогда 
		Протокол = "http";
	КонецЕсли;
	
	ЗащищенноеСоединение = НастройкаСоединения.ЗащищенноеСоединение;
	ИмяПользователя      = НастройкаСоединения.Пользователь;
	ПарольПользователя   = НастройкаСоединения.Пароль;
	Порт                 = НастройкаСоединения.Порт;
	Таймаут              = НастройкаСоединения.Таймаут;
	
	Если (Протокол = "https" Или Протокол = "ftps") И ЗащищенноеСоединение = Неопределено Тогда
		ЗащищенноеСоединение = Истина;
	КонецЕсли;
	
	Если ЗащищенноеСоединение = Истина Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	ИначеЕсли ЗащищенноеСоединение = Ложь Тогда
		ЗащищенноеСоединение = Неопределено;
		// Иначе параметр ЗащищенноеСоединение был задан в явном виде.
	КонецЕсли;
	
	Если Порт = Неопределено Тогда
		Порт = СтруктураURI.Порт;
	КонецЕсли;
	
	Если НастройкиПрокси = Неопределено Тогда 
		Прокси = Неопределено;
	Иначе 
		Прокси = НовыйИнтернетПрокси(НастройкиПрокси, Протокол);
	КонецЕсли;
	
	Если НастройкаСохранения["Путь"] <> Неопределено Тогда
		ПутьДляСохранения = НастройкаСохранения["Путь"];
	Иначе
		ПутьДляСохранения = ПолучитьИмяВременногоФайла(); // АПК:441 Временный файл должен удаляться вызывающим кодом.
	КонецЕсли;
	
	Если Таймаут = Неопределено Тогда 
		Таймаут = ПолучениеФайловИзИнтернетаКлиентСервер.АвтоматическоеОпределениеТаймаута();
	КонецЕсли;
	
	ИспользуетсяFTPПротокол = (Протокол = "ftp" Или Протокол = "ftps");
	
	Если ИспользуетсяFTPПротокол Тогда
		
		ПассивноеСоединение                       = НастройкаСоединения.ПассивноеСоединение;
		УровеньИспользованияЗащищенногоСоединения = НастройкаСоединения.УровеньИспользованияЗащищенногоСоединения;
		
		Попытка
			
			Если Таймаут = ПолучениеФайловИзИнтернетаКлиентСервер.АвтоматическоеОпределениеТаймаута() Тогда
				
				Соединение = Новый FTPСоединение(
					Сервер, 
					Порт, 
					ИмяПользователя, 
					ПарольПользователя,
					Прокси, 
					ПассивноеСоединение, 
					7, 
					ЗащищенноеСоединение, 
					УровеньИспользованияЗащищенногоСоединения);
				
				РазмерФайла = РазмерФайлаFTP(Соединение, ПутьНаСервере);
				Таймаут = ТаймаутПоРазмеруФайла(РазмерФайла);
				
			КонецЕсли;
			
			Соединение = Новый FTPСоединение(
				Сервер, 
				Порт, 
				ИмяПользователя, 
				ПарольПользователя,
				Прокси, 
				ПассивноеСоединение, 
				Таймаут, 
				ЗащищенноеСоединение, 
				УровеньИспользованияЗащищенногоСоединения);
			
			Сервер = Соединение.Сервер;
			Порт   = Соединение.Порт;
			
			Соединение.Получить(ПутьНаСервере, ПутьДляСохранения);
			
		Исключение
			
			РезультатДиагностики = ПолучениеФайловИзИнтернета.ДиагностикаСоединения(URL);
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось получить файл %1 с сервера %2:%3
                           |по причине:
                           |%4
                           |Результат диагностики:
                           |%5'
                           |;uk='Не вдалося отримати файл %1 з сервера %2:%3
                           |з причини:
                           |%4
                           |Результат діагностики:
                           |%5'"),
				URL, Сервер, Формат(Порт, "ЧГ="),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				РезультатДиагностики.ОписаниеОшибки);
				
			Если ЗаписыватьОшибку Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1
                               |
                               |Трассировка:
                               |ЗащищенноеСоединение: %2
                               |Таймаут: %3'
                               |;uk='%1
                               |
                               |Трасування:
                               |ЗащищенноеСоединение: %2
                               |Таймаут: %3'"),
					ТекстОшибки,
					Формат(Соединение.Защищенное, НСтр("ru='БЛ=Нет; БИ=Да';uk='БЛ=Ні; БИ=Так'")),
					Формат(Соединение.Таймаут, "ЧГ=0"));
					
				ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке);
			КонецЕсли;
			
			Возврат РезультатПолученияФайла(Ложь, ТекстОшибки);
			
		КонецПопытки;
		
	Иначе // Используется HTTP протокол.
		
		Заголовки                    = НастройкаСоединения.Заголовки;
		ИспользоватьАутентификациюОС = НастройкаСоединения.ИспользоватьАутентификациюОС;
		
		Попытка
			
			Если Таймаут = ПолучениеФайловИзИнтернетаКлиентСервер.АвтоматическоеОпределениеТаймаута() Тогда
				
				Соединение = Новый HTTPСоединение(
					Сервер, 
					Порт, 
					ИмяПользователя, 
					ПарольПользователя,
					Прокси, 
					7, 
					ЗащищенноеСоединение, 
					ИспользоватьАутентификациюОС);
				
				РазмерФайла = РазмерФайлаHTTP(Соединение, ПутьНаСервере, Заголовки);
				Таймаут = ТаймаутПоРазмеруФайла(РазмерФайла);
				
			КонецЕсли;
			
			Соединение = Новый HTTPСоединение(
				Сервер, 
				Порт, 
				ИмяПользователя, 
				ПарольПользователя,
				Прокси, 
				Таймаут, 
				ЗащищенноеСоединение, 
				ИспользоватьАутентификациюОС);
			
			Сервер = Соединение.Сервер;
			Порт   = Соединение.Порт;
			
			ЗапросHTTP = Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
			ЗапросHTTP.Заголовки.Вставить("Accept-Charset", "UTF-8");
			ЗапросHTTP.Заголовки.Вставить("X-1C-Request-UID", Строка(Новый УникальныйИдентификатор));
			ОтветHTTP = Соединение.Получить(ЗапросHTTP, ПутьДляСохранения);
			
		Исключение
			
			РезультатДиагностики = ПолучениеФайловИзИнтернета.ДиагностикаСоединения(URL);
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось установить HTTP-соединение с сервером %1:%2
                           |по причине:
                           |%3
                           |
                           |Результат диагностики:
                           |%4'
                           |;uk='Не вдалося встановити HTTP-з''єднання з сервером %1:%2
                           |з причини:
                           |%3
                           |
                           |Результат діагностики:
                           |%4'"),
				Сервер, Формат(Порт, "ЧГ="),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				РезультатДиагностики.ОписаниеОшибки);
			
			ДописатьПредставлениеПеренаправлений(Перенаправления, ТекстОшибки);
			
			Если ЗаписыватьОшибку Тогда
				ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			КонецЕсли;
				
			Возврат РезультатПолученияФайла(Ложь, ТекстОшибки);
			
		КонецПопытки;
		
		Попытка
			
			Если ОтветHTTP.КодСостояния = 301 // 301 Moved Permanently
				Или ОтветHTTP.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
				Или ОтветHTTP.КодСостояния = 303 // 303 See Other by GET
				Или ОтветHTTP.КодСостояния = 307 // 307 Temporary Redirect
				Или ОтветHTTP.КодСостояния = 308 Тогда // 308 Permanent Redirect
				
				Если Перенаправления.Количество() > 7 Тогда
					ВызватьИсключение 
						НСтр("ru='Превышено количество перенаправлений.';uk='Перевищено кількість перенаправлень.'");
				Иначе 
					
					НовыйURL = ОтветHTTP.Заголовки["Location"];
					
					Если НовыйURL = Неопределено Тогда 
						ВызватьИсключение 
							НСтр("ru='Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".';uk='Некоректне перенаправлення, відсутній HTTP-заголовок відповіді ""Location"".'");
					КонецЕсли;
					
					НовыйURL = СокрЛП(НовыйURL);
					
					Если ПустаяСтрока(НовыйURL) Тогда
						ВызватьИсключение 
							НСтр("ru='Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".';uk='Некоректне перенаправлення, порожній HTTP-заголовок відповіді ""Location"".'");
					КонецЕсли;
					
					Если Перенаправления.Найти(НовыйURL) <> Неопределено Тогда
						ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Циклическое перенаправление.
                                       |Попытка перейти на %1 уже выполнялась ранее.'
                                       |;uk='Циклічне перенаправлення.
                                       |Спроба перейти на %1 вже виконувалося раніше.'"),
							НовыйURL);
					КонецЕсли;
					
					Перенаправления.Добавить(URL);
					
					Если Не СтрНачинаетсяС(НовыйURL, "http") Тогда
						// <схема>://<хост>:<порт>/<путь>
						НовыйURL = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%1://%2:%3/%4", Протокол, Сервер, Формат(Порт, "ЧГ="), НовыйURL);
					КонецЕсли;
					
					Возврат ПолучитьФайлИзИнтернет(НовыйURL, НастройкаСохранения, НастройкаСоединения,
						НастройкиПрокси, ЗаписыватьОшибку, Перенаправления);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОтветHTTP.КодСостояния < 200 Или ОтветHTTP.КодСостояния >= 300 Тогда
				
				Если ОтветHTTP.КодСостояния = 304 Тогда
					
					Если (ЗапросHTTP.Заголовки["If-Modified-Since"] <> Неопределено
						Или ЗапросHTTP.Заголовки["If-None-Match"] <> Неопределено) Тогда
						ЗаписыватьОшибку = Ложь;
					КонецЕсли;
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Сервер убежден, что с вашего последнего запроса его ответ не изменился:
                                   |%1'
                                   |;uk='Сервер переконаний, що з вашого останнього запиту його відповідь не змінилася:
                                   |%1'"),
						РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
					
					ДописатьТелоОтветаСервера(ПутьДляСохранения, ТекстОшибки);
					
					ВызватьИсключение ТекстОшибки;
					
				ИначеЕсли ОтветHTTP.КодСостояния < 200
					Или ОтветHTTP.КодСостояния >= 300 И ОтветHTTP.КодСостояния < 400 Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Неподдерживаемый ответ сервера:
                                   |%1'
                                   |;uk='Непідтримувана відповідь сервера:
                                   |%1'"),
						РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
					
					ДописатьТелоОтветаСервера(ПутьДляСохранения, ТекстОшибки);
					
					ВызватьИсключение ТекстОшибки;
					
				ИначеЕсли ОтветHTTP.КодСостояния >= 400 И ОтветHTTP.КодСостояния < 500 Тогда 
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка при выполнении запроса:
                                   |%1'
                                   |;uk='Помилка при виконанні запиту:
                                   |%1'"),
						РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
					
					ДописатьТелоОтветаСервера(ПутьДляСохранения, ТекстОшибки);
					
					ВызватьИсключение ТекстОшибки;
					
				Иначе 
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка сервера при обработке запроса к ресурсу:
                                   |%1'
                                   |;uk='Помилка сервера при обробці запиту до ресурсу:
                                   |%1'"),
						РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
					
					ДописатьТелоОтветаСервера(ПутьДляСохранения, ТекстОшибки);
					
					ВызватьИсключение ТекстОшибки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось получить файл %1 с сервера %2:%3
                           |по причине:
                           |%4'
                           |;uk='Не вдалося отримати файл %1 з сервера %2:%3
                           |з причини:
                           |%4'"),
				URL, Сервер, Формат(Порт, "ЧГ="),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ДописатьПредставлениеПеренаправлений(Перенаправления, ТекстОшибки);
			
			Если ЗаписыватьОшибку Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1
                               |
                               |Трассировка:
                               |ЗащищенноеСоединение: %2
                               |Таймаут: %3
                               |ИспользоватьАутентификациюОС: %4'
                               |;uk='%1
                               |
                               |Трасування:
                               |ЗащищенноеСоединение: %2
                               |Таймаут: %3
                               |ИспользоватьАутентификациюОС: %4'"),
					ТекстОшибки,
					Формат(Соединение.Защищенное, НСтр("ru='БЛ=Нет; БИ=Да';uk='БЛ=Ні; БИ=Так'")),
					Формат(Соединение.Таймаут, "ЧГ=0"),
					Формат(Соединение.ИспользоватьАутентификациюОС, НСтр("ru='БЛ=Нет; БИ=Да';uk='БЛ=Ні; БИ=Так'")));
				
				ДописатьЗаголовкиHTTP(ЗапросHTTP, СообщениеОбОшибке);
				ДописатьЗаголовкиHTTP(ОтветHTTP, СообщениеОбОшибке);
				
				ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке);
			КонецЕсли;
			
			Возврат РезультатПолученияФайла(Ложь, ТекстОшибки, ОтветHTTP);
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Если сохраняем файл в соответствии с настройкой.
	Если НастройкаСохранения["МестоХранения"] = "ВременноеХранилище" Тогда
		КлючУникальности = Новый УникальныйИдентификатор;
		Адрес = ПоместитьВоВременноеХранилище (Новый ДвоичныеДанные(ПутьДляСохранения), КлючУникальности);
		Возврат РезультатПолученияФайла(Истина, Адрес, ОтветHTTP);
	ИначеЕсли НастройкаСохранения["МестоХранения"] = "Сервер" Тогда
		Возврат РезультатПолученияФайла(Истина, ПутьДляСохранения, ОтветHTTP);
	Иначе
		ВызватьИсключение НСтр("ru='Не указано место для сохранения файла.';uk='Не вказано місце для збереження файлу.'");
	КонецЕсли;
	
КонецФункции

// Функция, заполняющая структуру по параметрам.
//
// Параметры:
//   УспехОперации - булево - успех или неуспех операции.
//   СообщениеПуть - строка - 
//
// Возвращаемое значение - структура:
//          поле успех - булево
//          поле путь  - строка.
//
Функция РезультатПолученияФайла(Знач Статус, Знач СообщениеПуть, HTTPОтвет = Неопределено)
	
	Результат = Новый Структура("Статус", Статус);
	
	Если Статус Тогда
		Результат.Вставить("Путь", СообщениеПуть);
	Иначе
		Результат.Вставить("СообщениеОбОшибке", СообщениеПуть);
		Результат.Вставить("КодСостояния", 1);
	КонецЕсли;
	
	Если HTTPОтвет <> Неопределено Тогда
		ЗаголовкиОтвета = HTTPОтвет.Заголовки;
		Если ЗаголовкиОтвета <> Неопределено Тогда
			Результат.Вставить("Заголовки", ЗаголовкиОтвета);
		КонецЕсли;
		
		Результат.Вставить("КодСостояния", HTTPОтвет.КодСостояния);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазмерФайлаHTTP(СоединениеHTTP, Знач ПутьНаСервере, Знач Заголовки = Неопределено)
	
	ЗапросHTTP = Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
	Попытка
		ПолученныеЗаголовки = СоединениеHTTP.ПолучитьЗаголовки(ЗапросHTTP);// HEAD
	Исключение
		Возврат 0;
	КонецПопытки;
	РазмерСтрокой = ПолученныеЗаголовки.Заголовки["Content-Length"];
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	РазмерФайла = ТипЧисло.ПривестиЗначение(РазмерСтрокой);
	
	Возврат РазмерФайла;
	
КонецФункции

Функция РазмерФайлаFTP(СоединениеFTP, Знач ПутьНаСервере)
	
	РазмерФайла = 0;
	
	Попытка
		НайденныеФайлы = СоединениеFTP.НайтиФайлы(ПутьНаСервере);
		Если НайденныеФайлы.Количество() > 0 Тогда
			РазмерФайла = НайденныеФайлы[0].Размер();
		КонецЕсли;
	Исключение
		РазмерФайла = 0;
	КонецПопытки;
	
	Возврат РазмерФайла;
	
КонецФункции

Функция ТаймаутПоРазмеруФайла(Размер)
	
	БайтВМегабайте = 1048576;
	
	Если Размер > БайтВМегабайте Тогда
		КоличествоСекунд = Окр(Размер / БайтВМегабайте * 128);
		Возврат ?(КоличествоСекунд > 43200, 43200, КоличествоСекунд);
	КонецЕсли;
	
	Возврат 128;
	
КонецФункции

Функция РасшифровкаКодаСостоянияHTTP(КодСостояния)
	
	Если КодСостояния = 304 Тогда // Not Modified
		Расшифровка = НСтр("ru='Нет необходимости повторно передавать запрошенные ресурсы.';uk='Немає необхідності повторно передавати потрібні ресурси.'");
	ИначеЕсли КодСостояния = 400 Тогда // Bad Request
		Расшифровка = НСтр("ru='Запрос не может быть исполнен.';uk='Запит не може бути виконаний.'");
	ИначеЕсли КодСостояния = 401 Тогда // Unauthorized
		Расшифровка = НСтр("ru='Попытка авторизации на сервере была отклонена.';uk='Спроба авторизації на сервері була відхилена.'");
	ИначеЕсли КодСостояния = 402 Тогда // Payment Required
		Расшифровка = НСтр("ru='Требуется оплата.';uk='Потрібна оплата.'");
	ИначеЕсли КодСостояния = 403 Тогда // Forbidden
		Расшифровка = НСтр("ru='К запрашиваемому ресурсу нет доступа.';uk='До запитуваного ресурсу немає доступу.'");
	ИначеЕсли КодСостояния = 404 Тогда // Not Found
		Расшифровка = НСтр("ru='Запрашиваемый ресурс не найден на сервере.';uk='Запитаний ресурс не знайдено на сервері.'");
	ИначеЕсли КодСостояния = 405 Тогда // Method Not Allowed
		Расшифровка = НСтр("ru='Метод запроса не поддерживается сервером.';uk='Метод азпиту не підтримується сервером.'");
	ИначеЕсли КодСостояния = 406 Тогда // Not Acceptable
		Расшифровка = НСтр("ru='Запрошенный формат данных не поддерживается сервером.';uk='Запитаний формат даних не підтримується сервером.'");
	ИначеЕсли КодСостояния = 407 Тогда // Proxy Authentication Required
		Расшифровка = НСтр("ru='Ошибка аутентификации на прокси-сервере';uk='Помилка автентифікації проксі'");
	ИначеЕсли КодСостояния = 408 Тогда // Request Timeout
		Расшифровка = НСтр("ru='Время ожидания сервером передачи от клиента истекло.';uk='Час очікування сервером передачі від клієнта минув.'");
	ИначеЕсли КодСостояния = 409 Тогда // Conflict
		Расшифровка = НСтр("ru='Запрос не может быть выполнен из-за конфликтного обращения к ресурсу.';uk='Запит не може бути виконаний через конфліктне звернення до ресурсу.'");
	ИначеЕсли КодСостояния = 410 Тогда // Gone
		Расшифровка = НСтр("ru='Ресурс на сервере был перемещен.';uk='Ресурс на сервері був переміщений.'");
	ИначеЕсли КодСостояния = 411 Тогда // Length Required
		Расшифровка = НСтр("ru='Сервер требует указание ""Content-length."" в заголовке запроса.';uk='Сервер вимагає зазначення ""Content-length."" в заголовку запиту.'");
	ИначеЕсли КодСостояния = 412 Тогда // Precondition Failed
		Расшифровка = НСтр("ru='Запрос не применим к ресурсу';uk='Запит не можна застосувати до ресурсу'");
	ИначеЕсли КодСостояния = 413 Тогда // Request Entity Too Large
		Расшифровка = НСтр("ru='Сервер отказывается обработать, слишком большой объем передаваемых данных.';uk='Сервер відмовляється обробити, занадто великий обсяг переданих даних.'");
	ИначеЕсли КодСостояния = 414 Тогда // Request-URL Too Long
		Расшифровка = НСтр("ru='Сервер отказывается обработать, слишком длинный URL.';uk='Сервер відмовляється обробити, занадто довгий URL.'");
	ИначеЕсли КодСостояния = 415 Тогда // Unsupported Media-Type
		Расшифровка = НСтр("ru='Сервер заметил, что часть запроса была сделана в неподдерживаемом формат';uk='Сервер зауважив, що частина запиту була зроблена в неподдерживаемом формат'");
	ИначеЕсли КодСостояния = 416 Тогда // Requested Range Not Satisfiable
		Расшифровка = НСтр("ru='Часть запрашиваемого ресурса не может быть предоставлена';uk='Частина запитуваного ресурсу не може бути надана'");
	ИначеЕсли КодСостояния = 417 Тогда // Expectation Failed
		Расшифровка = НСтр("ru='Сервер не может предоставить ответ на указанный запрос.';uk='Сервер не може надати відповідь на зазначений запит.'");
	ИначеЕсли КодСостояния = 429 Тогда // Too Many Requests
		Расшифровка = НСтр("ru='Слишком много запросов за короткое время.';uk='Занадто багато запитів за короткий час.'");
	ИначеЕсли КодСостояния = 500 Тогда // Internal Server Error
		Расшифровка = НСтр("ru='Внутренняя ошибка сервера.';uk='Внутрішня помилка сервера.'");
	ИначеЕсли КодСостояния = 501 Тогда // Not Implemented
		Расшифровка = НСтр("ru='Сервер не поддерживает метод запроса.';uk='Сервер не підтримує метод запиту.'");
	ИначеЕсли КодСостояния = 502 Тогда // Bad Gateway
		Расшифровка = НСтр("ru='Сервер, выступая в роли шлюза или прокси-сервера, 
                                 |получил недействительное ответное сообщение от вышестоящего сервера.'
                                 |;uk='Сервер, виступаючи в ролі шлюзу або проксі-сервера, 
                                 |отримав недійсну відповідь на повідомлення від вищестоящого сервера.'");
	ИначеЕсли КодСостояния = 503 Тогда // Server Unavailable
		Расшифровка = НСтр("ru='Сервер временно не доступен.';uk='Сервер тимчасово не доступний.'");
	ИначеЕсли КодСостояния = 504 Тогда // Gateway Timeout
		Расшифровка = НСтр("ru='Сервер в роли шлюза или прокси-сервера 
                                 |не дождался ответа от вышестоящего сервера для завершения текущего запроса.'
                                 |;uk='Сервер в ролі шлюзу або проксі-сервера 
                                 |не дочекався відповіді від вищестоящого сервера для завершення поточного запиту.'");
	ИначеЕсли КодСостояния = 505 Тогда // HTTP Version Not Supported
		Расшифровка = НСтр("ru='Сервер не поддерживает указанную в запросе версию протокола HTTP';uk='Сервер не підтримує вказану в запиті версію протоколу HTTP'");
	ИначеЕсли КодСостояния = 506 Тогда // Variant Also Negotiates
		Расшифровка = НСтр("ru='Сервер настроен некорректно, и не способен обработать запрос.';uk='Сервер налаштований некоректно, і не здатний обробити запит.'");
	ИначеЕсли КодСостояния = 507 Тогда // Insufficient Storage
		Расшифровка = НСтр("ru='На сервере недостаточно места для выполнения запроса.';uk='На сервері недостатньо місця для виконання запиту.'");
	ИначеЕсли КодСостояния = 509 Тогда // Bandwidth Limit Exceeded
		Расшифровка = НСтр("ru='Сервер превысил отведенное ограничение на потребление трафика.';uk='Сервер перевищив відведене обмеження на споживання трафіка.'");
	ИначеЕсли КодСостояния = 510 Тогда // Not Extended
		Расшифровка = НСтр("ru='Сервер требует больше информации о совершаемом запросе.';uk='Сервер вимагає більше інформації про здійснюваний запит.'");
	ИначеЕсли КодСостояния = 511 Тогда // Network Authentication Required
		Расшифровка = НСтр("ru='Требуется авторизация на сервере.';uk='Потрібна авторизація на сервері.'");
	Иначе 
		Расшифровка = НСтр("ru='<Неизвестный код состояния>.';uk='<Невідомий код стану>.'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='[%1] %2';uk='[%1] %2'"), 
		КодСостояния, 
		Расшифровка);
	
КонецФункции

Процедура ДописатьПредставлениеПеренаправлений(Перенаправления, ТекстОшибки)
	
	Если Перенаправления.Количество() > 0 Тогда 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1
                       |
                       |Выполненные перенаправления (%2):
                       |%3'
                       |;uk='%1
                       |
                       |Виконані перенаправлення (%2):
                       |%3'"),
			ТекстОшибки,
			Перенаправления.Количество(),
			СтрСоединить(Перенаправления, Символы.ПС));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДописатьТелоОтветаСервера(ПутьКФайлу, ТекстОшибки)
	
	ТелоОтветаСервера = ТекстИзHTMLИзФайла(ПутьКФайлу);
	
	Если Не ПустаяСтрока(ТелоОтветаСервера) Тогда 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1
                       |
                       |Сообщение, полученное от сервера:
                       |%2'
                       |;uk='%1
                       |
                       |Повідомлення, отримане від сервера:
                       |%2'"),
			ТекстОшибки,
			ТелоОтветаСервера);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстИзHTMLИзФайла(ПутьКФайлу)
	
	ФайлОтвета = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8);
	ИсходныйТекст = ФайлОтвета.Прочитать(1024 * 15);
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ИсходныйТекст);
	ФайлОтвета.Закрыть();
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура ДописатьЗаголовкиHTTP(Объект, ТекстОшибки)
	
	Если ТипЗнч(Объект) = Тип("HTTPЗапрос") Тогда 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1
                       |
                       |HTTP запрос:
                       |Адрес ресурса: %2
                       |Заголовки: %3'
                       |;uk='%1
                       |
                       |HTTP запит:
                       |Адреса ресурсу: %2
                       |Заголовки: %3'"),
			ТекстОшибки,
			Объект.АдресРесурса,
			ПредставлениеЗаголовковHTTP(Объект.Заголовки));
	ИначеЕсли ТипЗнч(Объект) = Тип("HTTPОтвет") Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1
                       |
                       |HTTP ответ:
                       |Код ответа: %2
                       |Заголовки: %3'
                       |;uk='%1
                       |
                       |HTTP відповідь:
                       |Код відповіді: %2
                       |Заголовки: %3'"),
			ТекстОшибки,
			Объект.КодСостояния,
			ПредставлениеЗаголовковHTTP(Объект.Заголовки));
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеЗаголовковHTTP(Заголовки)
	
	ПредставлениеЗаголовков = "";
	
	Для каждого Заголовок Из Заголовки Цикл 
		ПредставлениеЗаголовков = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1
                       |%2: %3'
                       |;uk='%1
                       |%2: %3'"), 
			ПредставлениеЗаголовков,
			Заголовок.Ключ, Заголовок.Значение);
	КонецЦикла;
		
	Возврат ПредставлениеЗаголовков;
	
КонецФункции

Функция ПредставлениеИнтернетПрокси(Прокси)
	
	Журнал = Новый Массив;
	Журнал.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Адрес:  %1:%2
                   |HTTP:   %3:%4
                   |Secure: %5:%6
                   |FTP:    %7:%8'
                   |;uk='Адреса: %1:%2
                   |HTTP: %3:%4
                   |Secure: %5:%6
                   |FTP: %7:%8'"),
		Прокси.Сервер(),        Формат(Прокси.Порт(),        "ЧГ="),
		Прокси.Сервер("http"),  Формат(Прокси.Порт("http"),  "ЧГ="),
		Прокси.Сервер("https"), Формат(Прокси.Порт("https"), "ЧГ="),
		Прокси.Сервер("ftp"),   Формат(Прокси.Порт("ftp"),   "ЧГ=")));
	
	Если Прокси.ИспользоватьАутентификациюОС("") Тогда 
		Журнал.Добавить(НСтр("ru='Используется аутентификация операционной системы';uk='Використовується аутентифікація операційної системи'"));
	Иначе 
		Пользователь = Прокси.Пользователь("");
		Пароль = Прокси.Пароль("");
		СостояниеПароля = ?(ПустаяСтрока(Пароль), НСтр("ru='<не указан>';uk='<не зазначено>'"), НСтр("ru='********';uk='********'"));
		
		Журнал.Добавить(НСтр("ru='Используется аутентификация по имени пользователя и паролю';uk='Використовується аутентифікація за допомогою імені користувача та пароля'"));
		Журнал.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Пользователь: %1
                       |Пароль: %2'
                       |;uk='Користувач: %1
                       |Пароль: %2'"),
			Пользователь,
			СостояниеПароля));
	КонецЕсли;
	
	Если Прокси.НеИспользоватьПроксиДляЛокальныхАдресов Тогда 
		Журнал.Добавить(НСтр("ru='Не использовать прокси для локальных адресов';uk='Не використовувати проксі для локальних адрес'"));
	КонецЕсли;
	
	Если Прокси.НеИспользоватьПроксиДляАдресов.Количество() > 0 Тогда 
		Журнал.Добавить(НСтр("ru='Не использовать для следующих адресов:';uk='Не використовувати для наступних адрес:'"));
		Для Каждого ИсключаемыйАдрес Из Прокси.НеИспользоватьПроксиДляАдресов Цикл
			Журнал.Добавить(ИсключаемыйАдрес);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрСоединить(Журнал, Символы.ПС);
	
КонецФункции

// Возвращает прокси по настройкам НастройкаПроксиСервера для заданного протокола Протокол.
//
// Параметры:
//   НастройкаПроксиСервера - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер.
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//		Сервер       - адрес прокси-сервера.
//		Порт         - порт прокси-сервера.
//		Пользователь - имя пользователя для авторизации на прокси-сервере.
//		Пароль       - пароль пользователя.
//		ИспользоватьАутентификациюОС - Булево - признак использования аутентификации средствами операционной системы.
//   Протокол - строка - протокол для которого устанавливаются параметры прокси сервера, например "http", "https",
//                       "ftp".
//
// Возвращаемое значение:
//   ИнтернетПрокси - 
//
Функция НовыйИнтернетПрокси(НастройкаПроксиСервера, Протокол) Экспорт
	
	Если НастройкаПроксиСервера = Неопределено Тогда
		// Системные установки прокси-сервера.
		Возврат Неопределено;
	КонецЕсли;
	
	ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
	Если Не ИспользоватьПрокси Тогда
		// Не использовать прокси-сервер.
		Возврат Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
	Если ИспользоватьСистемныеНастройки Тогда
		// Системные настройки прокси-сервера.
		Возврат Новый ИнтернетПрокси(Истина);
	КонецЕсли;
	
	// Настройки прокси-сервера, заданные вручную.
	Прокси = Новый ИнтернетПрокси;
	
	// Определение адреса и порта прокси-сервера.
	ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
	ПроксиПоПротоколу = Неопределено;
	Если ТипЗнч(ДополнительныеНастройки) = Тип("Соответствие") Тогда
		ПроксиПоПротоколу = ДополнительныеНастройки.Получить(Протокол);
	КонецЕсли;
	
	ИспользоватьАутентификациюОС = НастройкаПроксиСервера.Получить("ИспользоватьАутентификациюОС");
	ИспользоватьАутентификациюОС = ?(ИспользоватьАутентификациюОС = Истина, Истина, Ложь);
	
	Если ТипЗнч(ПроксиПоПротоколу) = Тип("Структура") Тогда
		Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт,
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"], ИспользоватьАутентификациюОС);
	Иначе
		Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"], 
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"], ИспользоватьАутентификациюОС);
	КонецЕсли;
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
	
	АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
	Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
		Для каждого АдресИсключения Из АдресаИсключений Цикл
			Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Записывает событие-ошибку в журнал регистрации. Имя события
// "Получение файлов из Интернета".
// Параметры:
//   СообщениеОбОшибке - строка сообщение об ошибке.
// 
Процедура ЗаписатьОшибкуВЖурналРегистрации(Знач СообщениеОбОшибке)
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка, , ,
		СообщениеОбОшибке);
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru='Получение файлов из Интернета';uk='Одержання файлів з Інтернету'",ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецЕсли

#КонецОбласти

#Область ДиагностикаСоединения

// Служебная информация для отображения текущих настроек и состояний прокси для выполнения диагностики.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//     * СоединениеЧерезПрокси - Булево - Признак того, что соединение должно выполняться через прокси.
//     * Представление - Строка - Представление текущего настроенного прокси.
//
Функция СостояниеНастроекПрокси() Экспорт
	
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("http");
	НастройкиПрокси = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
	Журнал = Новый Массив;
	
	Если НастройкиПрокси = Неопределено Тогда 
		Журнал.Добавить(НСтр("ru='Параметры прокси-сервера в ИБ не указаны (используются системные настройки прокси).';uk='Параметри проксі-сервера в ІБ не зазначені (використовуються системні настройки проксі).'"));
	ИначеЕсли Не НастройкиПрокси.Получить("ИспользоватьПрокси") Тогда
		Журнал.Добавить(НСтр("ru='Параметры прокси-сервера в ИБ: Не использовать прокси-сервер.';uk='Параметри проксі-сервера в ІБ: Не використовувати проксі-сервер.'"));
	ИначеЕсли НастройкиПрокси.Получить("ИспользоватьСистемныеНастройки") Тогда
		Журнал.Добавить(НСтр("ru='Параметры прокси-сервера в ИБ: Использовать системные настройки прокси-сервера.';uk='Параметри проксі-сервера в ІБ: Використовувати системні настройки проксі-сервера.'"));
	Иначе
		Журнал.Добавить(НСтр("ru='Параметры прокси-сервера в ИБ: Использовать другие настройки прокси-сервера.';uk='Параметри проксі-сервера в ІБ: Використовувати інші настройки проксі-сервера.'"));
	КонецЕсли;
	
	Если Прокси = Неопределено Тогда 
		Прокси = Новый ИнтернетПрокси(Истина);
	КонецЕсли;
	
	УказанПроксиВсехАдресов = Не ПустаяСтрока(Прокси.Сервер());
	УказанПроксиHTTP = Не ПустаяСтрока(Прокси.Сервер("http"));
	УказанПроксиHTTPS = Не ПустаяСтрока(Прокси.Сервер("https"));
	
	СоединениеЧерезПрокси = УказанПроксиВсехАдресов Или УказанПроксиHTTP Или УказанПроксиHTTPS;
	
	Если СоединениеЧерезПрокси Тогда 
		Журнал.Добавить(НСтр("ru='Соединение выполняется через прокси-сервер:';uk='З''єднання виконується через проксі-сервер:'"));
		Журнал.Добавить(ПредставлениеИнтернетПрокси(Прокси));
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("СоединениеЧерезПрокси", СоединениеЧерезПрокси);
	Результат.Вставить("Представление", СтрСоединить(Журнал, Символы.ПС));
	Результат.Вставить("ИспользуютсяСистемныеНастройкиПрокси", НастройкиПрокси = Неопределено Или НастройкиПрокси["ИспользоватьСистемныеНастройки"] = Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеМестаДиагностики() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат НСтр("ru='Подключение проводится на сервере BAF в интернете (модель сервиса).';uk='Підключення проводиться на сервері BAF в інтернеті (модель сервісу).'");
	Иначе 
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			Если ОбщегоНазначения.КлиентПодключенЧерезВебСервер() Тогда 
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Подключение проводится из файловой информационной базы на веб-сервере <%1>.';uk='Підключення проводиться з файлової інформаційної бази на вебсервері <%1>.'"), ИмяКомпьютера());
			Иначе 
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Подключение проводится из файловой информационной базы на компьютере <%1>.';uk='Підключення проводиться з файлової інформаційної бази на комп''ютері <%1>.'"), ИмяКомпьютера());
			КонецЕсли;
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Подключение проводится на сервере BAF <%1>.';uk='З''єднання здійснюється на сервері BAF <%1>.'"), ИмяКомпьютера());
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьДоступностьСервера(АдресСервера) Экспорт
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	ПараметрыЗапускаПрограммы.КодировкаИсполнения = "OEM";
	
	Если ОбщегоНазначения.ЭтоWindowsСервер() Тогда
		ШаблонКоманды = "ping %1 -n 2 -w 500";
	Иначе
		ШаблонКоманды = "ping -c 2 -w 500 %1";
	КонецЕсли;
	
	СтрокаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКоманды, АдресСервера);
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапускаПрограммы);
	
	// Разные операционные системы могут выводить ошибки в разные потоки:
	// - для Windows все всегда в потоке вывода;
	// - для Debian или RHEL ошибки падают в поток ошибок.
	ЖурналДоступности = Результат.ПотокВывода + Результат.ПотокОшибок;
	
	Если ОбщегоНазначения.ЭтоWindowsСервер() Тогда
		ФактНедоступности = (СтрНайти(ЖурналДоступности, "Destination host unreachable") > 0); // Не локализуется.
		БезПотерь = (СтрНайти(ЖурналДоступности, "(0% loss)") > 0); // Не локализуется.
	Иначе 
		ФактНедоступности = (СтрНайти(ЖурналДоступности, "Destination Host Unreachable") > 0); // Не локализуется.
		БезПотерь = (СтрНайти(ЖурналДоступности, "0% packet loss") > 0) // не локализуется.
	КонецЕсли;
	
	Доступен = Не ФактНедоступности И БезПотерь;
	
	Журнал = Новый Массив;
	Если Доступен Тогда
		Журнал.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Удаленный сервер %1 доступен:';uk='Віддалений сервер %1 доступний:'"), 
			АдресСервера));
	Иначе
		Журнал.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Удаленный сервер %1 не доступен:';uk='Віддалений сервер %1 недоступний:'"), 
			АдресСервера));
	КонецЕсли;
	
	Журнал.Добавить("> " + СтрокаКоманды);
	Журнал.Добавить(ЖурналДоступности);
	
	Возврат Новый Структура("Доступен, ЖурналДиагностики", Доступен, СтрСоединить(Журнал, Символы.ПС));
	
КонецФункции

Функция ЖурналТрассировкиМаршрутаСервера(АдресСервера) Экспорт
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	ПараметрыЗапускаПрограммы.КодировкаИсполнения = "OEM";
	
	Если ОбщегоНазначения.ЭтоWindowsСервер() Тогда
		ШаблонКоманды = "tracert -w 100 -h 15 %1";
	Иначе 
		// Если вдруг пакет traceroute не установлен - в потоке вывода будет ошибка.
		// Т.к. результат все равно не разбирается, на поток вывода можно не обращать внимания.
		// По нему администратор поймет что ему надо доставить.
		ШаблонКоманды = "traceroute -w 100 -m 100 %1";
	КонецЕсли;
	
	СтрокаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКоманды, АдресСервера);
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапускаПрограммы);
	
	Журнал = Новый Массив;
	Журнал.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Трассировка маршрута к удаленному серверу %1:';uk='Трасування маршруту до віддаленого сервера %1:'"), АдресСервера));
	
	Журнал.Добавить("> " + СтрокаКоманды);
	Журнал.Добавить(Результат.ПотокВывода);
	Журнал.Добавить(Результат.ПотокОшибок);
	
	Возврат СтрСоединить(Журнал, Символы.ПС);
	
КонецФункции

#КонецОбласти

#КонецОбласти
