
Процедура ОбменСправочникиПриЗаписи(Источник, Отказ) Экспорт
	
	// Ступак М. (01.05.2023) >>
	Если НеРегистрироватьИзмененияОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	// Ступак М. (01.05.2023) <<
	
	//Бондаренко 2022.12.27++
	
	Если НЕ ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		
		Если Источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);
		
	Иначе
		// Ступак М. (01.05.2023) Временное решение >>
		Если ЭтоОбъектБезУсловнойВыгрузкиИзГлавногоУзла(Источник) Тогда
			
			Если Источник.ОбменДанными.Загрузка Тогда
				ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник, Источник.ОбменДанными.Отправитель);
			Иначе
				ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);
			КонецЕсли;	
		// Ступак М. (01.05.2023) Временное решение <<	
		Иначе
			
			Если Источник.ОбменДанными.Загрузка Тогда
				Возврат;
			КонецЕсли;
			
			ИсточникОбъект = Источник;
			
			Если ТипЗнч(Источник) = Тип("СправочникОбъект.КлючиАналитикиУчетаНоменклатуры") Тогда
				ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(ИсточникОбъект.Склад, Источник);
			Иначе
				ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);	
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	//Бондаренко 2022.12.27++
	
КонецПроцедуры

Процедура ОбменДокументыПриЗаписи(Источник, Отказ) Экспорт
	
	// Ступак М. (01.05.2023) >>
	Если НеРегистрироватьИзмененияОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	// Ступак М. (01.05.2023) <<
	
	//Лившиц А.Д.(эти документы быстрыми обменами ходят)
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КонтрольТемпературныхНорм") и ПиццаДейСервер.ФичаВключена("НеОбмениватьКТН") Тогда
		
		Возврат;	
		
	КонецЕсли; 
	//Лившиц А.Д.
	
	//Лившиц А.Д.(эти документы быстрыми обменами ходят)
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПересчетТоваров") и ПиццаДейСервер.ФичаВключена("НеОбмениватьПересчетТоваров") Тогда
		
		Возврат;	
		
	КонецЕсли; 
	//Лившиц А.Д.

	
	// Ступак М. (01.05.2023) Временное решение >>
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		Если ЭтоОбъектБезУсловнойВыгрузкиИзГлавногоУзла(Источник) Тогда
			Если Источник.ОбменДанными.Загрузка Тогда
				ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник, Источник.ОбменДанными.Отправитель);
			Иначе
				ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);
			КонецЕсли;
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	// Ступак М. (01.05.2023) Временное решение <<
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	ИсточникОбъект = Источник;
	
	МетаданныеОбъекта = ИсточникОбъект.Метаданные();
	
	Если НЕ МетаданныеОбъекта.Реквизиты.Найти("Склад") = Неопределено Тогда
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(ИсточникОбъект.Склад, Источник);
		
	КонецЕсли;	
		
	Если НЕ МетаданныеОбъекта.Реквизиты.Найти("ТорговаяТочка") = Неопределено Тогда 
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(ИсточникОбъект.ТорговаяТочка, Источник);
		
	КонецЕсли;	
		
	Если НЕ МетаданныеОбъекта.Реквизиты.Найти("ТорговаяТочкаПлательщик") = Неопределено Тогда 
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(ИсточникОбъект.ТорговаяТочкаПлательщик, Источник);
		
	КонецЕсли;	
		
	Если НЕ МетаданныеОбъекта.Реквизиты.Найти("СкладОтправитель") = Неопределено Тогда 
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(ИсточникОбъект.СкладОтправитель, Источник);
		
	КонецЕсли;	
		
	Если НЕ МетаданныеОбъекта.Реквизиты.Найти("СкладПолучатель") = Неопределено Тогда 
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(ИсточникОбъект.СкладПолучатель, Источник);
		
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);	
		
	КонецЕсли; 
	
	// Ступак М. (12.04.2023) >>
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.НачислениеИСписаниеБонусныхБаллов") Тогда
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);	
		
	КонецЕсли;
	// Ступак М. (12.04.2023) <<
	
	//Бондаренко 2023.01.31++
	Если НЕ ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		Если РегистрыСведений.НовыеФичи.ФичаВключена("ПередаватьСТТВсеДокументы")  
			Или ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")  
			или ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") тогда
			ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);
		КонецЕсли;
	КонецЕсли;
	//Бондаренко 2023.01.31--
		
		
	//Бондаренко 2022.12.27 ++
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УстановкаМенеджераТорговойТочки") Тогда
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);	
		
	КонецЕсли; 
	//Бондаренко 2022.12.27 ++
	
	//Бондаренко 2023.02.14 ++
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеестрОплатАренды") Тогда
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);	
		
	КонецЕсли; 
	//Бондаренко 2023.02.14 ++

	//{[+](фрагмент ДОБАВЛЕН), Бушев Олег 01.05.2023 12:41:11
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.МедиаПланАудиоОповещений") Тогда
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);	
		
	КонецЕсли; 
	//}Бушев Олег 01.05.2023 12:41:11 	
	
	//Бондаренко 2022.10.27 ++
	Если НЕ МетаданныеОбъекта.Реквизиты.Найти("Подразделение") = Неопределено Тогда 
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(РегистрыСведений.СоответствияПодразделенийИСтруктурыОрганизаций.ПолучитьСкладПоПодразделению(ИсточникОбъект.Подразделение), Источник);
			
	КонецЕсли;
	
	Если НЕ МетаданныеОбъекта.Реквизиты.Найти("КассаККМ") = Неопределено 
		И ЗначениеЗаполнено(ИсточникОбъект.КассаККМ) Тогда 
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(ИсточникОбъект.КассаККМ.Склад, Источник);
		
	КонецЕсли;
	//Бондаренко 2022.10.27 --
	
	//Бондаренко 2022.10.28 ++
	Если НЕ МетаданныеОбъекта.Реквизиты.Найти("Касса") = Неопределено И ЗначениеЗаполнено(ИсточникОбъект.Касса) И ЗначениеЗаполнено(ИсточникОбъект.Касса.Подразделение) Тогда 
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(РегистрыСведений.СоответствияПодразделенийИСтруктурыОрганизаций.ПолучитьСкладПоСтруктуре(ИсточникОбъект.Касса.Подразделение), Источник);
		
	КонецЕсли;
	//Бондаренко 2022.10.28 --
	

КонецПроцедуры

Процедура ОбменРегистрыСведенийПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	// Ступак М. (01.05.2023) >>
	Если НеРегистрироватьИзмененияОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	// Ступак М. (01.05.2023) <<
		
	//Бондаренко 2023.06.06++
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЧекиПоЗаказамГостя") 
		Или ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЖелаемоеВремяЗаказа")
		или ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЛогЗапросовCheckBox")
		или ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ОчередьФискализации")
		Или ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ПотерянныеКлиенты") 
		или ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СобытияДокументов") 
		или ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.АналитикаУчетаПоПартнерам") Тогда 
		Если НЕ ПланыОбмена.ГлавныйУзел() = Неопределено 
			И НЕ ПланыОбмена.ТорговыеТочки.ЭтотУзел().ТорговаяТочка.Закрыта Тогда
			ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	//Бондаренко 2023.06.06--
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.Отбор.Найти("Регистратор") = Неопределено 
		//Бондаренко 2023.04.10++
		И Источник.Отбор.Найти("ТорговаяТочка") = Неопределено  
		// Бондаренко 2023.06.15++
		И Источник.Отбор.Найти("Склад") = Неопределено
		// Бондаренко 2023.06.15--
		Тогда
		//Бондаренко 2023.04.10--
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);
		
		//Бондаренко 2023.04.10++
	ИначеЕсли Источник.Отбор.Найти("Регистратор") = Неопределено 
		И НЕ Источник.Отбор.Найти("ТорговаяТочка") = Неопределено  Тогда
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(Источник.Отбор.ТорговаяТочка.Значение, Источник);	
		//Бондаренко 2023.04.10--
		
		//Бондаренко 2023.06.15++
	ИначеЕсли  Источник.Отбор.Найти("Регистратор") = Неопределено 
		И НЕ Источник.Отбор.Найти("Склад") = Неопределено Тогда
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(Источник.Отбор.Склад.Значение, Источник);	
		//Бондаренко 2023.06.15--

	ИначеЕсли НЕ Источник.Отбор.Найти("ТорговаяТочка") = Неопределено Тогда 	
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(Источник.Отбор.ТорговаяТочка, Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда 	
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);	
		//Бондаренко 2022.12.27++	
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.МенеджерыТорговыхТочек") Тогда 	
		
		ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения("все", Источник);	
		//Бондаренко 2022.12.27--
	Иначе
		
		СкладДокумента = ПиццаДейСервер.СкладДокументаПоРеквизиту(Источник.Отбор.Регистратор.Значение);
		
		Если ЗначениеЗаполнено(СкладДокумента) Тогда
		
			ПланыОбмена.ТорговыеТочки.ЗарегистрироватьИзменения(СкладДокумента, Источник.Отбор.Регистратор.Значение.ПолучитьОбъект());	
		
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбменРегистрыНакопленияПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	// а ничего по ним не делаем в обменах так как регистрируются движения вместе с нужными документами	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// 21.11.2022 09:29:13
// Бушев Олег
// ОлегБушев
//
// Функция ОтправитьФайл
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ОтправитьФайл(ПутьКФайлу, КаталогНаСервере = Неопределено) Экспорт
	
	Прокси				= WSСсылки.ПолучениеФайла.СоздатьWSПрокси("income_file", "income_file", "income_fileSoap12"); 
	Прокси.Пользователь	= "web_service";
	Прокси.Пароль		= "314159";
		
	ПередадимФайл		= Новый ДвоичныеДанные(ПутьКФайлу);
	
	ВыбранныйФайл 		= Новый Файл(ПутьКФайлу);
	
	ТипДвоичныеДанные	= ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "base64Binary");
	ДвоичныеДанные		= ФабрикаXDTO.Создать(ТипДвоичныеДанные, ПередадимФайл);	
	
	Если КаталогНаСервере = Неопределено Тогда
		
		КаталогНаСервере = "E:\ПрисоединенныеФайлыОбщие\ВходящийФайл\";	
		
	КонецЕсли; 
	
	
	ОтветСервера		= Прокси.income_file(ДвоичныеДанные, ВыбранныйФайл.Имя, КаталогНаСервере);
	
	//"1" - удача
	//"0" - фиаско
	
	Если ОтветСервера = "1" Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 	
		
КонецФункции //ОтправитьФайл

&НаСервере //Бондаренко 2022.12.23
Функция ПолучитьФайл(ПутьКФайлу) Экспорт
	
	Если РегистрыСведений.НовыеФичи.ФичаВключена("ПолучениеФайлаОбменаХТТПСервис") Тогда
		
		Возврат ПолучитьФайлССервераХТТП(ПутьКФайлу);	
		
	Иначе
		
		Прокси				= WSСсылки.ОтправкаФайла.СоздатьWSПрокси("outcome_file", "outcome_file", "outcome_fileSoap12"); 
		Прокси.Пользователь	= "web_service";
		Прокси.Пароль		= "314159";
		//Бондаренко 2022.12.22 ++ Добавил попытку и неопределено в исключение
		Попытка
			ОтветСервера		= Прокси.outcome_file(ПутьКФайлу);
		Исключение
			Возврат Неопределено;
		КОнецПопытки;
		//Бондаренко 2022.12.22 --
		
		Возврат ОтветСервера;
		
	КонецЕсли; 
	
КонецФункции //ПолучитьФайл

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 04.01.2023 15:42:14
// Бушев Олег
// ОлегБушев
//
// Функция ПолучитьФайлССервераХТТП
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ПолучитьФайлССервераХТТП(ПутьКФайлу) Экспорт
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	Запрос.АдресРесурса = "/cup_prod/hs/filefromserver/getfile";
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Запрос.АдресРесурса = "/test_bushev/hs/filefromserver/getfile";	
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/filefromserver/getfile";	
		
	КонецЕсли;
	
	Запрос.УстановитьТелоИзСтроки(ПутьКФайлу, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	
	Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
	
	Если Результат.КодСостояния = 404 Тогда
		
		Возврат Неопределено;	
		
	Иначе
		
		Возврат Результат.ПолучитьТелоКакДвоичныеДанные();	
		
	КонецЕсли; 
	
КонецФункции //ПолучитьФайлССервераХТТП

&НаСервере
Функция ВернутьСоединениеЦентральныйСервер()
	
	БазовыйАдрес = ПолныеПраваДополнительный.ПолучитьЗначениеПараметраСеанса("БазовыйАдресСерверЕРП", "23.88.81.210");

	Если РегистрыСведений.НовыеФичи.ФичаВключена("НовыеКредыДляАпиТТ") Тогда
		
		стрЛогин = "pizzapointapi";
		стрПароль = "mI4su8ku";
		
	Иначе
		
		стрЛогин = "ОбменТТ";
		стрПароль = "WE9sakes";
		
	КонецЕсли; 
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Соединение = Новый HTTPСоединение(
		БазовыйАдрес,
		8088, 	// порт
		стрЛогин,	// пользователь
		стрПароль,	// пароль
		,	// прокси
		0, );
		
	Иначе
		
		Соединение = Новый HTTPСоединение(
		БазовыйАдрес,
		8089, 	// порт
		стрЛогин,	// пользователь
		стрПароль,	// пароль
		,	// прокси
		0, );
		
	КонецЕсли; 
	
	Возврат Соединение;
	
КонецФункции

&НаСервере
Функция ВернутьСоединениеТорговаяТочка(ИПадрес) Экспорт
	
	БазовыйАдрес = ИПадрес;
		
	Соединение = Новый HTTPСоединение(
		БазовыйАдрес,
		80, 	// порт
		"admin",	// пользователь
		"314159",	// пароль
		,	// прокси
		0, );
		
	Возврат Соединение;
	
КонецФункции

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 05.01.2023 10:45:09
// Бушев Олег
// ОлегБушев
//
// Функция ОтправитьПинг
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ОтправитьПингТТ(ТорговаяТочка, ИмяПубликации = Неопределено) Экспорт
	
	ИфоПоТТ = РегистрыСведений.ИнформацияОТорговойТочке.ИнформацияПоТТ(ТорговаяТочка);
	
	ИП = ИфоПоТТ[0].ЛокальныйIPАдрес;
	
	СоединениеСервер = ВернутьСоединениеТорговаяТочка(ИП);
		
	Запрос = Новый HTTPЗапрос();
	
	Если ИмяПубликации = Неопределено ИЛИ ИмяПубликации = "" Тогда
		
		Запрос.АдресРесурса = "/TT/hs/onsiteapi/ping/";	
		
	Иначе
		
		Запрос.АдресРесурса = "/" + Строка(ИмяПубликации) + "/hs/onsiteapi/ping/";	
		
	КонецЕсли; 
	
	Попытка

		Результат = СоединениеСервер.Получить(Запрос);
		
		Если Результат.КодСостояния = 200 Тогда
			
			Возврат Истина;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции //ОтправитьПинг

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 05.01.2023 10:45:09
// Бушев Олег
// ОлегБушев
//
// Функция ОтправитьПинг
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ОтправитьПинг(ТорговаяТочка) Экспорт
	
	Если ПД.ФичаВКЛ("ПингАВС") Тогда
		
		Попытка
			
			БазовыйАдрес = "qlxbbehadkk2luvh3ngsehr4v40xaafx.lambda-url.us-west-2.on.aws/"; 	
			ssl = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(),Новый СертификатыУдостоверяющихЦентровWindows());   
			
			СоединениеАВС = Новый HTTPСоединение(
			БазовыйАдрес,
			, 	// порт
			,	// пользователь
			,	// пароль
			,	// прокси
			0, ssl);
			
			Запрос = Новый HTTPЗапрос();
			Запрос.Заголовки.Вставить("accept", "application/json");
			Запрос.Заголовки.Вставить("content-type", "application/json");
			
			струкЭлем = Новый Структура;
			струкЭлем.Вставить("Event", "ttheartbeat");
			струкЭлем.Вставить("ID_tt", Строка(ПиццаДейСервер.ТекущаяТТ().НомерТТ));
			струкЭлем.Вставить("TimeOnPC", Строка(Текущаядата()));
			струкЭлем.Вставить("Value", Строка(?(КонфигурацияИзменена(), "1", "0")));
			
			стрИтоговая = ОбщегоНазначенияHTTP.СтрокаJSON(струкЭлем);
			
			Запрос.УстановитьТелоИзСтроки(стрИтоговая);
			
			Результат = СоединениеАВС.ОтправитьДляОбработки(Запрос);
			
			Если Результат.КодСостояния = 200 Тогда
				Константы.ТТБезИнтернета.Установить(Ложь);
			Иначе
				Константы.ТТБезИнтернета.Установить(Истина);
			КонецЕсли;
			
		Исключение
			
			Константы.ТТБезИнтернета.Установить(Истина);
			
			Возврат 404;
			    
		КонецПопытки;
		
		
		Возврат Результат.КодСостояния;
		
	Иначе
		
		СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
		Запрос = Новый HTTPЗапрос();
		
		НомерТТ = Строка(ТорговаяТочка.НомерТТ);
		
		СтатусКонфигурации = ?(КонфигурацияИзменена(), "1", "0");
		
		Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
			
			Запрос.АдресРесурса = "/test_bushev/hs/ttheartbeat/send/" + НомерТТ;	
			
		Иначе
			
			Запрос.АдресРесурса = "/cup_prod/hs/ttheartbeat/send/" + НомерТТ;	
			
		КонецЕсли;
		
		Запрос.УстановитьТелоИзСтроки(СтатусКонфигурации);
		
		Попытка //Бондаренко 2023.03.21++    добавил попытку и изменение релевантной константы
			
			Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
			
			Если Результат.КодСостояния = 200 Тогда
				Константы.ТТБезИнтернета.Установить(Ложь);
			Иначе
				Константы.ТТБезИнтернета.Установить(Истина);
			КонецЕсли;
			
		Исключение
			Константы.ТТБезИнтернета.Установить(Истина);
			
			Возврат 404;
			
		КонецПопытки;
		//Бондаренко 2023.03.21--
		
		Возврат Результат.КодСостояния;
	КонецЕсли;
КонецФункции //ОтправитьПинг

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 11.01.2023 12:48:17
// Бушев Олег
// ОлегБушев
//
// Функция ПолучитьЗаказыТТ
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ПолучитьИменаФайловЗаказыТТ(ТорговаяТочка) Экспорт
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	НомерТТ = Строка(ТорговаяТочка.НомерТТ);
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/getorders/" + НомерТТ;	
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/getorders/" + НомерТТ;	
		
	КонецЕсли;
	
	Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
	
	стрОтвета = Результат.ПолучитьТелоКакСтроку();
	
	Возврат ОбщегоНазначенияHTTP.ОбъектJSON(стрОтвета);
	
КонецФункции //ПолучитьЗаказыТТ

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 11.01.2023 12:51:06
// Бушев Олег
// ОлегБушев
//
// Функция ДерегистрироватьЗаказВЦентре
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ДерегистрироватьЗаказВЦентре(ИдентификаторЗаказа) Экспорт
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	//ИдентификаторЗаказа = Строка(ЗаказСсылка.УникальныйИдентификатор());
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/deregdoc/" + ИдентификаторЗаказа;	
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/deregdoc/" + ИдентификаторЗаказа;	
		
	КонецЕсли;
	
	Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
	
	Возврат Результат;
	
КонецФункции //ДерегистрироватьЗаказВЦентре

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 02.05.2023 18:20:37
// Бушев Олег
// ОлегБушев
//
// Функция ДерегистрироватьХарактеристику
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ДерегистрироватьХарактеристику(ТорговаяТочка, ИдентификаторХарактеристики)
    
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	//ИдентификаторЗаказа = Строка(ЗаказСсылка.УникальныйИдентификатор());
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/deregcharacteristic/" + ИдентификаторХарактеристики + "/" + Строка(ТорговаяТочка.НомерТТ);	
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/deregcharacteristic/" + ИдентификаторХарактеристики + "/" + Строка(ТорговаяТочка.НомерТТ);	
		
	КонецЕсли;
	
	Результат = СоединениеСервер.Получить(Запрос);
	
	Возврат Результат;
	
КонецФункции //ДерегистрироватьХарактеристику

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 05.05.2023 13:55:18
// Бушев Олег
// ОлегБушев
//
// Функция ДерегистрироватьПроизвольныйОбъект
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ДерегистрироватьПроизвольныйОбъект(ТорговаяТочка, ИдентификаторОбъекта) Экспорт
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	///deregref/{id}/{idstore}/{idref}
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/deregref/" + ИдентификаторОбъекта + "/" + Строка(ТорговаяТочка.НомерТТ);	
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/deregref/" + ИдентификаторОбъекта + "/" + Строка(ТорговаяТочка.НомерТТ);	
		
	КонецЕсли;
	
	Результат = СоединениеСервер.Получить(Запрос);
	
	Возврат Результат;
	
КонецФункции //ДерегистрироватьПроизвольныйОбъект
 
&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 11.01.2023 12:55:28
// Бушев Олег
// ОлегБушев
//
// Функция ЗагрузитьОнлайнЗаказы
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ЗагрузитьОнлайнЗаказы(ТорговаяТочка) Экспорт
	
	ИменаФайлов = ПолучитьИменаФайловЗаказыТТ(ТорговаяТочка);
	
	//Бондаренко 2023.02.24++
	Если РегистрыСведений.НовыеФичи.ФичаВключена("ИсправитьПутьКаталогаОнлайнЗаказовНаТТ") Тогда
		КаталогФайловОнлайнЗаказов = ПолныеПраваДополнительный.ПолучитьЗначениеПараметраСистемы("КаталогФайловОнлайнЗаказов");
	КонецЕсли;
	//Бондаренко 2023.02.24--
	
	// Ступак М. (08.08.2023) >>
	ИспользоватьПартнеровВЗаказахГостей = ПрограммыЛояльностиДополнительныйВызовСервера.ИспользоватьПартнеровВЗаказахГостей();
	ПоддержкаКлиентовPoster = ПрограммыЛояльностиДополнительныйВызовСервера.ПоддержкаКлиентовPoster();
	//СоздаватьФайлыКартЛояльностиВКаталогахОнлайнЗаказовНаТТ = РегистрыСведений.НовыеФичи.ФичаВключена("СоздаватьФайлыКартЛояльностиВКаталогахОнлайнЗаказовНаТТ");
	//СохранениеПартнеровПриВыгрузкеФайловЗаказов = ПиццаДейСервер.ФичаТТВключена("СохранениеПартнеровПриВыгрузкеФайловЗаказов", ТорговаяТочка);
	//СохранениеКартЛояльностиПриВыгрузкеФайловЗаказов = ПиццаДейСервер.ФичаТТВключена("СохранениеКартЛояльностиПриВыгрузкеФайловЗаказов", ТорговаяТочка);
	// Ступак М. (08.08.2023) <<
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		
		Если РегистрыСведений.НовыеФичи.ФичаВключена("НовыйНаборЗаписейЗаказаКлиента") Тогда
			
			//Бондаренко 2023.02.24++
			Если РегистрыСведений.НовыеФичи.ФичаВключена("ИсправитьПутьКаталогаОнлайнЗаказовНаТТ") Тогда
				ПутьВременный = КаталогФайловОнлайнЗаказов + ИмяФайла.Идентификатор + "\" + ИмяФайла.Идентификатор + ".xml";
			Иначе
			//Бондаренко 2023.02.24--
				ПутьВременный = "C:\Exchange\" + ИмяФайла.Идентификатор + "\" + ИмяФайла.Идентификатор + ".xml";
			КонецЕсли;
			
			ПутьКлиента =  ИмяФайла.ПутьКлиента + Строка(ИмяФайла.ИдентификаторКлиента) + ".xml";
			ФайлКлиентаДД = ПолучитьФайлССервераХТТП(ПутьКлиента);
			
			Если Не ФайлКлиентаДД = Неопределено Тогда
				
				//Бондаренко 2023.02.24++
				Если РегистрыСведений.НовыеФичи.ФичаВключена("ИсправитьПутьКаталогаОнлайнЗаказовНаТТ") Тогда
					ПутьКлиентаВременный = КаталогФайловОнлайнЗаказов + ИмяФайла.Идентификатор + "\Клиенты\" + ИмяФайла.Идентификатор + ".xml"; 
					СоздатьКаталог(КаталогФайловОнлайнЗаказов + ИмяФайла.Идентификатор + "\Клиенты\");
				Иначе
				//Бондаренко 2023.02.24--
					ПутьКлиентаВременный = "C:\Exchange\" + ИмяФайла.Идентификатор + "\Клиенты\" + ИмяФайла.Идентификатор + ".xml"; 
					СоздатьКаталог("C:\Exchange\" + ИмяФайла.Идентификатор + "\Клиенты\");
				КонецЕсли;
				
				ФайлКлиентаДД.Записать(ПутьКлиентаВременный);
				СоздатьОбъектНаОснованииФайла(ПутьКлиентаВременный, ИспользоватьПартнеровВЗаказахГостей);
				
			КонецЕсли; 
			
			// Ступак М. (08.08.2023) >>
			Если ИспользоватьПартнеровВЗаказахГостей Тогда
				
				Если ИмяФайла.Свойство("ПутьКартыЛояльности")
					И ИмяФайла.Свойство("ИдентификаторКартыЛояльности") Тогда
					// Карта лояльности может быть пустая, если заказ делал сотрудник
					ПутьКартыЛояльности = ИмяФайла.ПутьКартыЛояльности + Строка(ИмяФайла.ИдентификаторКартыЛояльности) + ".xml";
					ФайлКартыЛояльностиДД = ПолучитьФайлССервераХТТП(ПутьКартыЛояльности);
					
					Если Не ФайлКартыЛояльностиДД = Неопределено Тогда
					
						Если РегистрыСведений.НовыеФичи.ФичаВключена("ИсправитьПутьКаталогаОнлайнЗаказовНаТТ") Тогда
							ПутьКартыЛояльностиВременный = КаталогФайловОнлайнЗаказов + ИмяФайла.Идентификатор + "\КартаЛояльности\" + ИмяФайла.Идентификатор + ".xml"; 
							СоздатьКаталог(КаталогФайловОнлайнЗаказов + ИмяФайла.Идентификатор + "\КартаЛояльности\");
						Иначе
							ПутьКартыЛояльностиВременный = "C:\Exchange\" + ИмяФайла.Идентификатор + "\КартаЛояльности\" + ИмяФайла.Идентификатор + ".xml"; 
							СоздатьКаталог("C:\Exchange\" + ИмяФайла.Идентификатор + "\КартаЛояльности\");
						КонецЕсли;
						
						ФайлКартыЛояльностиДД.Записать(ПутьКартыЛояльностиВременный);
						СоздатьОбъектНаОснованииФайла(ПутьКартыЛояльностиВременный);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			// Ступак М. (08.08.2023) <<
			
			Для Каждого ТекХар Из ИмяФайла.Характеристики Цикл
				
				ПутьХарактеристики =  ТекХар.ПутьХарактеристики + Строка(ТекХар.ИдентификаторХарактеристики) + ".xml";
				ФайлХарактеристикиДД = ПолучитьФайлССервераХТТП(ПутьХарактеристики);
				
				Если НЕ ФайлХарактеристикиДД = Неопределено Тогда
					
					//Бондаренко 2023.02.24++
					Если РегистрыСведений.НовыеФичи.ФичаВключена("ИсправитьПутьКаталогаОнлайнЗаказовНаТТ") Тогда
						ПутьХарактеристикиВременный = КаталогФайловОнлайнЗаказов + Строка(ИмяФайла.Идентификатор) + "\Характеристики\" + Строка(ТекХар.ИдентификаторХарактеристики) + ".xml";
						СоздатьКаталог(КаталогФайловОнлайнЗаказов + ИмяФайла.Идентификатор + "\Характеристики\");
					Иначе
					//Бондаренко 2023.02.24--
						ПутьХарактеристикиВременный = "C:\Exchange\" + Строка(ИмяФайла.Идентификатор) + "\Характеристики\" + Строка(ТекХар.ИдентификаторХарактеристики) + ".xml";
						СоздатьКаталог("C:\Exchange\" + ИмяФайла.Идентификатор + "\Характеристики\");
					КонецЕсли;
					
					ФайлХарактеристикиДД.Записать(ПутьХарактеристикиВременный);
					
					Попытка
						СоздатьОбъектНаОснованииФайла(ПутьХарактеристикиВременный);
					Исключение
						//ОписаниеОшибки()
					КонецПопытки; 
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		Иначе
			
			//Бондаренко 2023.02.24++
			Если РегистрыСведений.НовыеФичи.ФичаВключена("ИсправитьПутьКаталогаОнлайнЗаказовНаТТ") Тогда
				ПутьВременный = КаталогФайловОнлайнЗаказов + ИмяФайла.Идентификатор + ".xml";
			Иначе
			//Бондаренко 2023.02.24--
				ПутьВременный = "C:\Exchange\" + ИмяФайла.Идентификатор + ".xml";
			КонецЕсли;
			
		КонецЕсли; 
		
		ФайлДД = ПолучитьФайлССервераХТТП(ИмяФайла.Путь);
		
		Если ФайлДД = Неопределено Тогда
			
			Продолжить;	
			
		КонецЕсли; 
		
		ФайлДД.Записать(ПутьВременный);
		
		Документы.ЗаказГостя.СоздатьЗаказНаОснованииФайла(ПутьВременный);
		
		ДерегистрироватьЗаказВЦентре(ИмяФайла.Идентификатор);
		
		УдалитьФайлы(ПутьВременный);
		
	КонецЦикла; 
	
КонецФункции //ЗагрузитьОнлайнЗаказы
 
&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 18.01.2023 16:25:40
// Бушев Олег
// ОлегБушев
//
// Функция ПолучитьИдентификаторыОбъектовМетаданных
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ПолучитьИдентификаторыОбъектовМетаданных() Экспорт
	
	КаталогФайловОбъектов = ПолныеПраваДополнительный.ПолучитьЗначениеПараметраСистемы("КаталогФайловИдентификаторыОбъектовМетаданных");
	
	Если КаталогФайловОбъектов = Неопределено Тогда
		
		Возврат 0;	
		
	КонецЕсли; 
	
	ИмяФайлаЗип = КаталогФайловОбъектов + "ИдентификаторыОбъектовМетаданных.zip";
	
	ФайлДД = ПолучитьФайлССервераХТТП(ИмяФайлаЗип);
		
	Если ФайлДД = Неопределено Тогда
			
		Возврат 0;	
			
	КонецЕсли; 
		
	ПутьВременный = ИмяФайлаЗип;
	
	//Бондаренко 2023.02.23++
	
	СоздатьКаталог(КаталогФайловОбъектов);
		
	//ФайлДД.Записать("C:\Exchange\" + "ИдентификаторыОбъектовМетаданных.zip");
	ФайлДД.Записать(КаталогФайловОбъектов + "ИдентификаторыОбъектовМетаданных.zip");
	//Бондаренко 2023.02.23++
	
	Справочники.ИдентификаторыОбъектовМетаданных.ЗагрузитьОбъектыМетаданных();
	
КонецФункции //ПолучитьИдентификаторыОбъектовМетаданных

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 30.01.2023 12:34:36
// Бушев Олег
// ОлегБушев
//
// Функция СоздатьОбъектНаОснованииФайла
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция СоздатьОбъектНаОснованииФайла(ФайлОбъекта, РежимЗагрузкиДанных = Ложь) Экспорт
	
	Если ПиццаДейСервер.ФичаВключена("ОбходнойПутьПроверкиХарактеристик") Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ФайлОбъекта);   
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		БазаОбъект = ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		// И НЕ Справочники.ХарактеристикиНоменклатуры.РабочееНаименованиеУникально(БазаОбъект)
		
		Если ТипЗнч(БазаОбъект) = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
			
			Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			
		Иначе
			
			// Ступак М. (11.09.2023) >>
			Если РежимЗагрузкиДанных Тогда
				БазаОбъект.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			// Ступак М. (11.09.2023) <<
			БазаОбъект.Записать();
			
			Возврат БазаОбъект.Ссылка;
			
		КонецЕсли;	
		
	Иначе
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ФайлОбъекта);   
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		БазаОбъект = ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		// Ступак М. (11.09.2023) >>
		Если РежимЗагрузкиДанных Тогда
			БазаОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		// Ступак М. (11.09.2023) <<
		
		БазаОбъект.Записать();	
		
		Возврат БазаОбъект.Ссылка;
		
	КонецЕсли; 
	 
КонецФункции //СоздатьОбъектНаОснованииФайла
 
&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 11.01.2023 12:51:06
// Бушев Олег
// ОлегБушев
//
// Функция ДерегистрироватьЗаказВЦентре
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ОтправитьПланируемоеВремяОжидания(ТорговаяТочка, ВремяОжидания) Экспорт
	
	Если ВремяОжидания = 0 Тогда
		
		Возврат Неопределено;	
		
	Иначе
		
		СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
			
		Запрос = Новый HTTPЗапрос();
		
		Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
			
			Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/settimetoeat/" + ТорговаяТочка.НомерТТ + "/" + ВремяОжидания;	
			
		Иначе
			
			Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/settimetoeat/" + ТорговаяТочка.НомерТТ + "/" + ВремяОжидания;	
			
		КонецЕсли;
		
		Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
		
		Возврат Результат;
		
	КонецЕсли; 
	
КонецФункции //ДерегистрироватьЗаказВЦентре

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 27.02.2023 11:43:10
// Бушев Олег
// ОлегБушев
//
// Функция ОтправитьОбъектВЦентр
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ОтправитьОбъектВЦентр(ссылкаНаОбъект) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("RootFolder");
	ЗаписатьXML(ЗаписьXML, ссылкаНаОбъект.ПолучитьОбъект(), НазначениеТипаXML.Явное);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Если ПД.ФичаВКЛ("ЭтоБЛИННеБушевТестит") Тогда
			Запрос.АдресРесурса = "/bond/hs/storepointapi/doctoserver/";	
		Иначе
			Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/doctoserver/";	
		КонецЕсли;
		
	Иначе
			
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/doctoserver/";	
			
	КонецЕсли;
	
	дд = Новый ДвоичныеДанные(ИмяФайла);
	
	Запрос.УстановитьТелоИзДвоичныхДанных(дд);
	
	Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
	
	Если Результат.КодСостояния = 200 Тогда
		
		Возврат Истина;	
		
	Иначе
		
		Возврат Ложь;	
		
	КонецЕсли; 
	
КонецФункции //ОтправитьОбъектВЦентр
 
&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 20.03.2023 10:45:58
// Бушев Олег
// ОлегБушев
//
// Функция ПозвонитьКлиентуСервер
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ПозвонитьКлиентуСервер(ВнутреннийНомер, ТелефонКлиентаБезПлюса) Экспорт
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/calltocustomer/" + ВнутреннийНомер + "/" + ТелефонКлиентаБезПлюса;	
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/calltocustomer/" + ВнутреннийНомер + "/" + ТелефонКлиентаБезПлюса;	
		
	КонецЕсли;
	
	Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
	
	Возврат Результат.КодСостояния;
	
КонецФункции //ПозвонитьКлиентуСервер

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 04.04.2023 16:47:26
// Бушев Олег
// ОлегБушев
//
// Функция ЗапроситьФотоДляДокумента
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ЗапроситьФотоДляДокумента(ДокСсылка, ТорговаяТочка, Сотрудник) Экспорт
    
	///addphototodoc/{docid}/{doctype}/{storeid}/{stuffid}
	ИдентификаторДокумента		= Строка(ДокСсылка.УникальныйИдентификатор());
	ТипДокумента				= ДокСсылка.Метаданные().Имя;
	ИдентификаторТТ				= Строка(ТорговаяТочка.УникальныйИдентификатор());
	ИдентификаторСотрудника		= Строка(Сотрудник.УникальныйИдентификатор());
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Если ПД.ФичаВКЛ("ЭтоБЛИННеБушевТестит") Тогда
			Запрос.АдресРесурса = "/bond/hs/storepointapi/addphototodoc/" + ИдентификаторДокумента + "/" + ТипДокумента + "/" + ИдентификаторТТ + "/" + ИдентификаторСотрудника;	
		Иначе
			Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/addphototodoc/" + ИдентификаторДокумента + "/" + ТипДокумента + "/" + ИдентификаторТТ + "/" + ИдентификаторСотрудника;	
		КонецЕсли;
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/addphototodoc/" + ИдентификаторДокумента + "/" + ТипДокумента + "/" + ИдентификаторТТ + "/" + ИдентификаторСотрудника;	
		
	КонецЕсли;
	
	Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
	
	Если Результат.КодСостояния = 200 Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
	
КонецФункции //ЗапроситьФотоДляДокумента
 
&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 21.03.2023 18:16:44
// Бушев Олег
// ОлегБушев
//
// Функция ОтметитьЗаказГостяКакПринятый
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ОтметитьЗаказГостяКакПринятый(ИдентификаторЧека, ИдентификаторЗаказа) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторЧека) = Ложь ИЛИ ЗначениеЗаполнено(ИдентификаторЗаказа) = Ложь Тогда
		
		Возврат 500;	
		
	КонецЕсли; 
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/addreciepttoorder/" + ИдентификаторЧека + "/" + ИдентификаторЗаказа;	
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/addreciepttoorder/" + ИдентификаторЧека + "/" + ИдентификаторЗаказа;	
		
	КонецЕсли;
	
	Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
	
	Возврат Результат.КодСостояния;
	
КонецФункции //ОтметитьЗаказГостяКакПринятый

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 21.03.2023 20:52:18
// Бушев Олег
// ОлегБушев
//
// Функция ОтменитьЗаказСПричиной
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ОтменитьЗаказСПричиной(ИдентификаторЗаказа, стрПричинаОтказа) Экспорт
	
	///cancellorderwithreason/{idorder}/{reason}
	
	Если ЗначениеЗаполнено(стрПричинаОтказа) = Ложь ИЛИ ЗначениеЗаполнено(ИдентификаторЗаказа) = Ложь Тогда
		
		Возврат 500;	
		
	КонецЕсли; 
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/cancellorderwithreason/" + ИдентификаторЗаказа + "/" + стрПричинаОтказа;	
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/cancellorderwithreason/" + ИдентификаторЗаказа + "/" + стрПричинаОтказа;	
		
	КонецЕсли;
	
	Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
	
	Возврат Результат.КодСостояния;
	
КонецФункции //ОтменитьЗаказСПричиной
 
&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 27.03.2023 12:01:53
// Бушев Олег
// ОлегБушев
//
// Функция ПолучитьИменаФайловХарактеристики
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ПолучитьИменаФайловХарактеристики(ТорговаяТочка) Экспорт
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	НомерТТ = Строка(ТорговаяТочка.НомерТТ);
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/getgoodsmodifiers/" + НомерТТ;	
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/getgoodsmodifiers/" + НомерТТ;	
		
	КонецЕсли;
	
	Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
	
	стрОтвета = Результат.ПолучитьТелоКакСтроку();
	
	Возврат ОбщегоНазначенияHTTP.ОбъектJSON(стрОтвета);
	
КонецФункции //ПолучитьИменаФайловХарактеристики

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 05.05.2023 12:43:56
// Бушев Олег
// ОлегБушев
//
// Функция ПолучитьИменаФайловОбъектов
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ПолучитьИменаФайловОбъектов(ТорговаяТочка) Экспорт
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	НомерТТ = Строка(ТорговаяТочка.НомерТТ);
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/getrefstott/" + НомерТТ;	
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/getrefstott/" + НомерТТ;	
		
	КонецЕсли;
	
	Результат = СоединениеСервер.Получить(Запрос);
	
	стрОтвета = Результат.ПолучитьТелоКакСтроку();
	
	Возврат ОбщегоНазначенияHTTP.ОбъектJSON(стрОтвета);
	
КонецФункции //ПолучитьИменаФайловОбъектов
 
&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 27.03.2023 12:03:13
// Бушев Олег
// ОлегБушев
//
// Функция ЗагрузитьХарактеристики
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ЗагрузитьХарактеристики(ТорговаяТочка) Экспорт
	
	ИменаФайлов = ПолучитьИменаФайловХарактеристики(ТорговаяТочка);
	
	СоздатьКаталог("C:\Exchange\Характеристики\");
	
	Для каждого СтруктураФайла Из ИменаФайлов Цикл
	
		ФайлКлиентаДД = ПолучитьФайлССервераХТТП(СтруктураФайла.ИмяФайла);

		ПутьКлиентаВременный = "C:\Exchange\Характеристики\" + СтруктураФайла.ИдентификаторХарактеристики + ".xml";
		
		ФайлКлиентаДД.Записать(ПутьКлиентаВременный);
		СоздатьОбъектНаОснованииФайла(ПутьКлиентаВременный);
		
		УдалитьФайлы(ПутьКлиентаВременный);
		
		ДерегистрироватьХарактеристику(ТорговаяТочка, СтруктураФайла.ИдентификаторХарактеристики);

	КонецЦикла;

КонецФункции //ЗагрузитьХарактеристики

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 05.05.2023 12:29:17
// Бушев Олег
// ОлегБушев
//
// Функция ЗагрузитьСсылкиБыстрогоОбмена
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ЗагрузитьСсылкиБыстрогоОбмена(ТорговаяТочка) Экспорт
	
	ИменаФайлов = ПолучитьИменаФайловОбъектов(ТорговаяТочка);
	Каталог = "C:\Exchange\ОбъектыБазы\";
	СоздатьКаталог(Каталог);
	
	Для каждого СтруктураФайла Из ИменаФайлов Цикл
	
		Попытка
			
			ФайлКлиентаДД = ПолучитьФайлССервераХТТП(СтруктураФайла.ИмяФайла);

			ПутьКлиентаВременный = Каталог + СтруктураФайла.Идентификатор + ".xml";
		
			ФайлКлиентаДД.Записать(ПутьКлиентаВременный);
			СоздатьОбъектНаОснованииФайла(ПутьКлиентаВременный);
		
			УдалитьФайлы(ПутьКлиентаВременный);
		
			//ДерегистрироватьХарактеристику(ТорговаяТочка, СтруктураФайла.ТипОбъекта);
			ДерегистрироватьПроизвольныйОбъект(ТорговаяТочка, СтруктураФайла.Идентификатор)
			
		Исключение
		    //ОписаниеОшибки()
		КонецПопытки; 
		
	КонецЦикла;
	
КонецФункции //ЗагрузитьСсылкиБыстрогоОбмена

// Ступак М. (01.05.2023) Временное решение >>
Функция ЭтоОбъектБезУсловнойВыгрузкиИзГлавногоУзла(Объект) Экспорт
	
	Результат = Ложь;
	
	ТипОбъекта = ТипЗнч(Объект);
	//ОбъектМетаданных = Объект.Метаданные();
	
	Если ТипОбъекта = Тип("СправочникОбъект.Партнеры")
	 Или ТипОбъекта = Тип("СправочникОбъект.КартыЛояльности")
	 Или ТипОбъекта = Тип("ДокументОбъект.НачислениеИСписаниеБонусныхБаллов")
	 Или ТипОбъекта = Тип("СправочникОбъект.ДополнительнаяИнформацияОКлиенте")
	 Или ТипОбъекта = Тип("СправочникОбъект.ЗапросыКлиентовБоту")
	 Или ТипОбъекта = Тип("СправочникОбъект.iwis_КлиентыPoster") Тогда
		Результат = Истина;
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
	 	Если Объект["НачислениеБонусныхБаллов"].Количество() > 0
		 Или Объект["ОплатаБонуснымиБаллами"].Количество() > 0
		 Или Объект["Товары"].Итог("СуммаДенежныйСчетКНачислению") <> 0
		 Или Объект["Товары"].Итог("СуммаДенежныйСчетКСписанию") <> 0 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	//Если ОбъектМетаданных = Метаданные.Справочники.Партнеры
	// Или ОбъектМетаданных = Метаданные.Справочники.КартыЛояльности
	// Или ОбъектМетаданных = Метаданные.Документы.НачислениеИСписаниеБонусныхБаллов
	// Или ОбъектМетаданных = Метаданные.Справочники.ДополнительнаяИнформацияОКлиенте
	// Или ОбъектМетаданных = Метаданные.Справочники.iwis_КлиентыPoster Тогда
	//	Результат = Истина;
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция НеРегистрироватьИзмененияОбъекта(Объект)
	
	Результат = Ложь;
	
	Если Объект.ДополнительныеСвойства.Свойство("ОбменТорговыеТочкиНеРегистрироватьИзменения")
		И Объект.ДополнительныеСвойства.ОбменТорговыеТочкиНеРегистрироватьИзменения = Истина Тогда
		Результат = Истина;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	
// Ступак М. (01.05.2023) Временное решение <<

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 15.05.2023 10:02:03
// Бушев Олег
// ОлегБушев
//
// Функция ВыполнитьПроизвольныйКодНаТТ
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ВыполнитьПроизвольныйКодНаТТ(ТТ, ТекстКода) Экспорт
	
	ИфоПоТТ = РегистрыСведений.ИнформацияОТорговойТочке.ИнформацияПоТТ(ТТ);
	
	ИП = ИфоПоТТ[0].ЛокальныйIPАдрес;
	ИмяПубликации = ИфоПоТТ[0].ИмяПубликации;
	
	СоединениеСервер = ВернутьСоединениеТорговаяТочка(ИП);
		
	Запрос = Новый HTTPЗапрос();
	
	Если ИмяПубликации = Неопределено ИЛИ ИмяПубликации = "" Тогда
		
		Запрос.АдресРесурса = "/TT/hs/storepointapi/robot/";	
		
	Иначе
		
		Запрос.АдресРесурса = "/" + Строка(ИмяПубликации) + "/hs/storepointapi/robot/";	
		
	КонецЕсли; 
	
	Попытка

		СтрукЗапроса = Новый Структура;
		СтрукЗапроса.Вставить("type",  "code");
		СтрукЗапроса.Вставить("incomecode",  Строка(ТекстКода));
		
		стрЗапроса = ОбщегоНазначенияHTTP.СтрокаJSON(СтрукЗапроса);
		
		Запрос.УстановитьТелоИзСтроки(стрЗапроса);
		
		ФайлОтвета = ПолучитьИмяВременногоФайла(".json");
		
		Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос, ФайлОтвета);
		
		Если Результат.КодСостояния = 200 Тогда
			
			Файл = Новый ЧтениеТекста(ФайлОтвета, КодировкаТекста.UTF8);
			стрОтвета = Файл.Прочитать();
			струкОтвета = ОбщегоНазначенияHTTP.ОбъектJSON(стрОтвета);
			
			рез = струкОтвета.result;
			
			Возврат рез;
			
		Иначе
			
			Возврат "Нет";
			
		КонецЕсли;
		
	Исключение
		
		Возврат "Нет";
		
	КонецПопытки;
	
КонецФункции //ВыполнитьПроизвольныйКодНаТТ

&НаСервере
////////////////////////////////////////////////////////////////////////////////
// 17.05.2023 11:20:11
// Бушев Олег
// ОлегБушев
//
// Функция ОтправитьСсылкуНаТТ
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
//
Функция ОтправитьСсылкуНаТТ(ТТ, ссылкаНаОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ТТ) И ЗначениеЗаполнено(ссылкаНаОбъект) Тогда
		
		ЗаписьXML = Новый ЗаписьXML;
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("RootFolder");
		ЗаписатьXML(ЗаписьXML, ссылкаНаОбъект.ПолучитьОбъект(), НазначениеТипаXML.Явное);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		
		ИфоПоТТ = РегистрыСведений.ИнформацияОТорговойТочке.ИнформацияПоТТ(ТТ);
		
		ИП = ИфоПоТТ[0].ЛокальныйIPАдрес;
		ИмяПубликации = ИфоПоТТ[0].ИмяПубликации;
		
		СоединениеСервер = ВернутьСоединениеТорговаяТочка(ИП);
			
		Запрос = Новый HTTPЗапрос();
		
		Если ИмяПубликации = Неопределено ИЛИ ИмяПубликации = "" Тогда
			
			Запрос.АдресРесурса = "/TT/hs/storepointapi/doctoserver/";	
			
		Иначе
			
			Запрос.АдресРесурса = "/" + Строка(ИмяПубликации) + "/hs/storepointapi/doctoserver/";	
			
		КонецЕсли; 
		
		дд = Новый ДвоичныеДанные(ИмяФайла);
		
		Запрос.УстановитьТелоИзДвоичныхДанных(дд);
		
		Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
		
		Если Результат.КодСостояния = 200 Тогда
			
			Возврат Истина;	
			
		Иначе
			
			Возврат Ложь;	
			
		КонецЕсли; 
		
	Иначе
		
		Возврат Ложь;	
		
	КонецЕсли; 
	
КонецФункции //ОтправитьСсылкуНаТТ
 
//Бондаренко 2023.11.30++
&НаСервере
Функция ПолучитьСсылкуНаФотоИзСписанияВЦентре(ДокСсылка) Экспорт
    
	ИдентификаторДокумента	= Строка(ДокСсылка.УникальныйИдентификатор());
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
		
	Запрос = Новый HTTPЗапрос();
	
	рез = Неопределено;
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Если ПД.ФичаВКЛ("ЭтоБЛИННеБушевТестит") Тогда
			Запрос.АдресРесурса = "/bond/hs/storepointapi/GetPhotoFromWritOff/" + ИдентификаторДокумента;	
		Иначе
			Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/GetPhotoFromWritOff/" + ИдентификаторДокумента;
		КонецЕсли;
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/GetPhotoFromWritOff/" + ИдентификаторДокумента;
		
	КонецЕсли;
	
	ФайлОтвета = ПолучитьИмяВременногоФайла(".json");
	
	Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос, ФайлОтвета);
	
	Если Результат.КодСостояния = 200 Тогда
		
		Файл = Новый ЧтениеТекста(ФайлОтвета, КодировкаТекста.UTF8);
		стрОтвета = Файл.Прочитать();
		струкОтвета = ОбщегоНазначенияHTTP.ОбъектJSON(стрОтвета);
		
		рез = струкОтвета.LinkToPhoto;
		
	КонецЕсли;
	
	Возврат рез;
	
КонецФункции 
//Бондаренко 2023.11.30++

//Бондаренко 2023.12.05++
&НаСервере
Функция ОтправитьСтатусЗаказаEkomВГУ(ИдентификаторЗаказа, ИдентификаторСтатуса) Экспорт
	
	//СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
	//
	//Запрос = Новый HTTPЗапрос();
	//
	//Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
	//	
	//	Если ПД.ФичаВКЛ("ЭтоБЛИННеБушевТестит") Тогда
	//		
	//		Запрос.АдресРесурса = "/bond/hs/storepointapi/changeorderstatus/" + ИдентификаторЗаказа + "/" + ИдентификаторСтатуса;	
	//		
	//	Иначе
	//		
	//		Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/changeorderstatus/" + ИдентификаторЗаказа + "/" + ИдентификаторСтатуса;	
	//		
	//	КонецЕсли;
	//	
	//Иначе
	//	
	//	Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/changeorderstatus/" + ИдентификаторЗаказа + "/" + ИдентификаторСтатуса;	
	//	
	//КонецЕсли;
	//
	//Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос);
	//
	//Возврат Результат.КодСостояния;
	
	Если УправлениеЖурналомСобытий.УстановитьСтатусЕкомЗаказаГуиды(ИдентификаторЗаказа, ИдентификаторСтатуса) Тогда
		Возврат 200;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции 

//Бондаренко 2023.11.30++
&НаСервере
Функция ПолучитьПродаИзЧекинаВГУ(ТорговаяТочка) Экспорт
	
	ИдентификаторТТ	= Строка(ТорговаяТочка.УникальныйИдентификатор());
	
	СоединениеСервер = ВернутьСоединениеЦентральныйСервер();
	
	Запрос = Новый HTTPЗапрос();
	
	рез = Неопределено;
	
	Если ИмяКомпьютера() = "1CPizzaDayTest" Тогда
		
		Если ПД.ФичаВКЛ("ЭтоБЛИННеБушевТестит") Тогда
			Запрос.АдресРесурса = "/bond/hs/storepointapi/getprodfromchekin/" + ИдентификаторТТ;	
		Иначе
			Запрос.АдресРесурса = "/test_bushev/hs/storepointapi/getprodfromchekin/" + ИдентификаторТТ;
		КонецЕсли;
		
	Иначе
		
		Запрос.АдресРесурса = "/cup_prod/hs/storepointapi/getprodfromchekin/" + ИдентификаторТТ;
		
	КонецЕсли;
	
	ФайлОтвета = ПолучитьИмяВременногоФайла(".json");
	
	Результат = СоединениеСервер.ОтправитьДляОбработки(Запрос, ФайлОтвета);
	
	Если Результат.КодСостояния = 200 Тогда
		
		Файл = Новый ЧтениеТекста(ФайлОтвета, КодировкаТекста.UTF8);
		стрОтвета = Файл.Прочитать();
		струкОтвета = ОбщегоНазначенияHTTP.ОбъектJSON(стрОтвета);
		
		рез = Справочники.Сотрудники.ПолучитьСсылку(Новый УникальныйИдентификатор(струкОтвета.ProdFromChekin));
		
	КонецЕсли;
	
	Возврат рез;
	
КонецФункции 
//Бондаренко 2023.11.30++

