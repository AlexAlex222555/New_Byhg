#Область ПрограммныйИнтерфейс

// Заполнение таблицы этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметр:
//	ТаблицаЭтапов - Таблица значений - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов().
//
Процедура ДополнитьОписаниеЭтаповЗакрытияМесяца(ТаблицаЭтапов) Экспорт
	//++ Локализация
	
	
	ТекущийРодитель = ЗакрытиеМесяцаСервер.ИдентификаторГруппыРучныеОперации();
	//++ НЕ УТ
	ЗатратыЛокализацияСервер.ДобавитьЭтап_СписаниеЗатратНаВыпускБезРаспоряжений(ТаблицаЭтапов, ТекущийРодитель);
	ЗатратыЛокализацияСервер.ДобавитьЭтап_РаспределениеМатериаловИРаботНаСебестоимостьПродукции21(ТаблицаЭтапов, ТекущийРодитель);
	//-- НЕ УТ
	//++ НЕ УТ
	//-- НЕ УТ
	
	#Область Группа_ФормированиеЗатрат
	
	ТекущийРодитель = ЗакрытиеМесяцаСервер.ИдентификаторГруппыФормированиеЗатрат();
    ////++ НЕ УТ
    //ИнтеграцияБЗК.ДобавитьЭтап_ОтражениеЗарплатыВФинансовомУчете(ТаблицаЭтапов, ТекущийРодитель);
    //ИнтеграцияБЗК.ДобавитьЭтап_НачислениеОценочныхОбязательствРезервовПоОтпускам(ТаблицаЭтапов, ТекущийРодитель);
    ////-- НЕ УТ
	ПодарочныеСертификатыСервер.ДобавитьЭтап_АннулированиеПодарочныхСертификатов(ТаблицаЭтапов,ТекущийРодитель);
	//++ НЕ УТ
	//-- НЕ УТ
	
	#КонецОбласти
	
    #Область Группа_ФормированиеФинансовогоРезультата
	
	ТекущийРодитель = ЗакрытиеМесяцаСервер.ИдентификаторГруппыФормированиеФинансовогоРезультата();
	НДСИсходящийСервер.ДобавитьЭтап_ОформлениеННУсловныеПродажи(ТаблицаЭтапов,ТекущийРодитель);
	
	#КонецОбласти
	
	#Область Группа_РегламентированныйУчет
	
	ТекущийРодитель = ЗакрытиеМесяцаСервер.ИдентификаторГруппыРегламентированныйУчет();
	//++ НЕ УТ
	РеглУчетСервер.ДобавитьЭтап_ОтражениеДокументовВРегламентированномУчете(ТаблицаЭтапов, ТекущийРодитель);
	Документы.РегламентнаяОперация.ДобавитьЭтап_РасчетНалоговыхРазницПослеПереходаСЕН(ТаблицаЭтапов, ТекущийРодитель);
	Документы.РегламентнаяОперация.ДобавитьЭтап_РасчетКурсовыхРазниц(ТаблицаЭтапов, ТекущийРодитель);
	РеглУчетСервер.ДобавитьЭтап_ФормированиеФинансовогоРезультата(ТаблицаЭтапов,ТекущийРодитель);
	//-- НЕ УТ
	#КонецОбласти
	
	//-- Локализация
КонецПроцедуры

// Заполнение таблицы групп этапов закрытия месяца.
// Элементы данной таблицы являются элементами верхнего уровня в дереве этапов в форме закрытия месяца.
//
// Параметр:
//	ТаблицаГруппЭтапов - Таблица значений - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияГруппЭтапов().
//
Процедура ДополнитьОписаниеГруппЭтаповЗакрытияМесяца(ТаблицаГруппЭтапов) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Заполняет проверки, выполняемые в рамках закрытия месяца.
//
// Параметры:
//	ТаблицаПроверок - Таблица значений - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации().
//
Процедура ДополнитьПроверкиДляРегистрации(ТаблицаПроверок) Экспорт
	//++ Локализация
	//++ НЕ УТ
	ЗатратыЛокализацияСервер.ОписаниеПроверок_СписаниеЗатратНаВыпускБезРаспоряжений(ТаблицаПроверок);
	ЗатратыЛокализацияСервер.ОписаниеПроверок_РаспределениеМатериаловИРаботНаСебестоимостьПродукции21(ТаблицаПроверок);
	//-- НЕ УТ
	НДСИсходящийСервер.ОписаниеПроверок_ОформлениеННУсловныеПродажи(ТаблицаПроверок);
	//-- Локализация
КонецПроцедуры


// Дополняет список операций закрытия месяца, использующих механизм заданий к закрытию месяца.
// 
// Параметры:
// 	ДанныеВыбора - СписокЗначений -
//
Процедура ДополнитьДанныеВыбораОперацийЗакрытияМесяца(ДанныеВыбора) Экспорт
	//++ Локализация
	//++ НЕ УТ
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииОС);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииНМА);
	ДанныеВыбора.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата);
	//-- НЕ УТ
	//-- Локализация
КонецПроцедуры

//++ НЕ УТ

// Проверяет использование регламентированного учета в рассчитываемом периоде.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//	
// Возвращаемое значение:
//	Булево - признак использования регламентированного учета.
//
Функция ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика, ИзменятьСостояниеЭтапа = Истина) Экспорт
	
	Результат = Ложь;

	//++ Локализация
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		
		Если ИзменятьСостояниеЭтапа Тогда
			
			ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
				ПараметрыОбработчика,
				НСтр("ru='Регламентированный учет не ведется.';uk='Регламентований облік не ведеться.'",ОбщегоНазначения.КодОсновногоЯзыка()));
			
		КонецЕсли;
		
		Результат =  Ложь;
		
	Иначе
		
		ДатаНачалаВеденияРеглУчета = НачалоМесяца(Константы.ДатаНачалаВеденияРеглУчета.Получить());
		
		Если ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации < ДатаНачалаВеденияРеглУчета Тогда
			
			Если ИзменятьСостояниеЭтапа Тогда
				
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
					ПараметрыОбработчика,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Регламентированный учет ведется начиная с периода %1';uk='Регламентований облік ведеться починаючи з періоду %1'",ОбщегоНазначения.КодОсновногоЯзыка()),
						РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ДатаНачалаВеденияРеглУчета)));
				
			КонецЕсли;
			
			Результат =  Ложь;
		Иначе
			Результат =  Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//-- Локализация
	Возврат Результат;
	
КонецФункции

// Проверяет наличие документов "Регламентная операция".
//
// Параметры:
//	ПараметрыОбработчика 			   - Структура - параметры обработчика события этапа
//	ТипОперации 		 			   - ПеречислениеСсылка.ТипыРегламентныхОпераций - тип операции документа
//											если не указан, то анализируется типы операций из свойства ТипыРегламентныхОпераций данного этапа
//	ИмяТаблицыОтбораОрганизаций 	   - Строка - имя временной таблицы для отбора документов по организациям
//											организации в указанной таблице должны находиться в поле с именем "Ссылка"
//											если таблица не указана, то отбираются все организации из свойства МассивОрганизаций
//	ДляЭтапаИспользуетсяРегистрЗаданий - Булево - признак того, что для данного этапа используется один из регистров "ЗаданияК...".
//	
// Возвращаемое значение:
//	Булево - признак наличия документов.
//
Функция ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика, Знач ТипОперации = Неопределено,
			ИмяТаблицыОтбораОрганизаций = "", ДляЭтапаИспользуетсяРегистрЗаданий = Истина) Экспорт
	
	ЕстьОшибки    = Ложь;
	//++ Локализация
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операции.Ссылка    КАК ТипОперации,
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТОперации
	|ИЗ
	|	Перечисление.ТипыРегламентныхОпераций КАК Операции
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
	|		ПО ИСТИНА
	|ГДЕ
	|	Операции.Ссылка В (&ТипыОпераций)
	|	И НЕ (Организации.Ссылка ЕСТЬ NULL)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Операции.ТипОперации КАК ТипОперации,
	|	Операции.Организация КАК Организация,
	|	Организации.Ссылка.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	КОЛИЧЕСТВО(РегламентнаяОперация.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	ВТОперации КАК Операции
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.Организация = Операции.Организация)
	|			И (РегламентнаяОперация.ТипОперации = Операции.ТипОперации)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РегламентнаяОперация.Проведен)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Операции.Организация = Организации.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Операции.ТипОперации,
	|	Операции.Организация,
	|	Организации.Ссылка.ОбособленноеПодразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операции.ТипОперации,
	|	Операции.Организация";
	
	Если ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизации", ИмяТаблицыОтбораОрганизаций);
	КонецЕсли;
	
	ЕстьДокументы = Ложь;
	Период 		  = РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	ТипыОпераций  = ?(ЗначениеЗаполнено(ТипОперации),
		ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации),
		ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций);
		
	Запрос.УстановитьПараметр("ТипыОпераций", ТипыОпераций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОбособленноеПодразделение
		 И НЕ Документы.РегламентнаяОперация.ОперацияИспользуетсяДляОбособленногоПодразделения(Выборка.ТипОперации) Тогда
			Продолжить;
		КонецЕсли;
		
		// Для ПереоценкаСуммыВВалютеФинОтчетности и ЗакрытиеГода будем выводить сообщения об ошибках только если в отборе
		// присутствует искомая организация:
		Если Выборка.ОбособленноеПодразделение И Не ПараметрыОбработчика.ПараметрыРасчета.ВсеОрганизации
			И ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций.Найти(Выборка.Организация) = Неопределено
			И (Выборка.ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности
			ИЛИ Выборка.ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода) Тогда
				Продолжить;
		КонецЕсли;
		
		Если Выборка.КоличествоДокументов > 1 Тогда
			
			ЕстьОшибки = Истина;
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='По организации ""%1"" за период %2 сформировано несколько документов регламентных операций ""%3"".';uk='По організації ""%1"" за період %2 сформовано кілька документів регламентних операцій ""%3"".'",ОбщегоНазначения.КодОсновногоЯзыка()),
					Выборка.Организация,
					Период,
					СокрЛП(Выборка.ТипОперации)));
					
			Продолжить;
			
		ИначеЕсли Выборка.КоличествоДокументов = 0 Тогда
			
			Если ДляЭтапаИспользуетсяРегистрЗаданий Тогда
				// Нет заданий к расчету и нет регламентного документа - расчет не требуется.
			Иначе
				// Есть данные для расчета (иначе эта процедура не вызывалась бы), но нет регламентного документа - расчет не выполнен.
				ЕстьОшибки = Истина;
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
					ПараметрыОбработчика,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='По организации ""%1"" за период %2 не сформирована регламентная операция ""%3"".';uk='По організації ""%1"" за період %2 не сформована регламентна операція ""%3"".'",ОбщегоНазначения.КодОсновногоЯзыка()),
						Выборка.Организация,
						Период,
						СокрЛП(Выборка.ТипОперации)));
			КонецЕсли;
			
		Иначе // есть один документ
			ЕстьДокументы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДляЭтапаИспользуетсяРегистрЗаданий И НЕ ЕстьОшибки И НЕ ЕстьДокументы Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='За период %1 нет заданий для расчета данной операции и отсутствует документ ""Регламентная операция"".';uk='За період %1 немає завдань для розрахунку даної операції та відсутній документ ""Регламентна операція"".'",ОбщегоНазначения.КодОсновногоЯзыка()),
				Период));
		
	КонецЕсли;
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос,
		"ВТОперации" + ?(НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ", ВТОрганизации", ""));
	//-- Локализация	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Описание действия "Открыть форму списка документов ""Регламентная операция""".
// Отбор по типам операций берется из свойства ТипыРегламентныхОпераций описания этапа закрытия месяца.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация() Экспорт
	Описание = Неопределено;
	//++ Локализация
	Описание = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РегламентнаяОперация.Формы.ФормаСписка.ПолноеИмя(),
		Истина);
	//-- Локализация
	Возврат Описание;
	
КонецФункции

// Возвращает текст запроса для определения состояния отражения документов в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - текст запроса для определения состояния отражения документов.
//
Функция ТекстЗапросаСостояниеОтраженияДокументов() Экспорт
	ТекстЗапроса = "";
	//++ Локализация
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаОкончания,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И ДанныеРегистра.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПроверкиДокументов КАК ДанныеПроверки
	|		ПО ДанныеРегистра.Регистратор = ДанныеПроверки.Документ
	|			И ДанныеРегистра.Организация = ДанныеПроверки.Организация
	|			И ДанныеПроверки.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И (Константы.ОтражатьВРеглУчетеТолькоПроверенныеДокументы И НЕ ДанныеПроверки.Документ ЕСТЬ NULL
	|		ИЛИ НЕ Константы.ОтражатьВРеглУчетеТолькоПроверенныеДокументы
	|		ИЛИ НЕ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (&СписокПроверяемыхТиповДокументов))
	|	И ДанныеРегистра.ДатаОтражения >= Константы.ДатаНачалаВеденияРеглУчета
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И ДанныеРегистра.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПроверкиДокументов КАК ДанныеПроверки
	|		ПО ДанныеРегистра.Регистратор = ДанныеПроверки.Документ
	|			И ДанныеРегистра.Организация = ДанныеПроверки.Организация
	|			И ДанныеПроверки.СтатусПроверки <> ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И Константы.ОтражатьВРеглУчетеТолькоПроверенныеДокументы
	|	И ДанныеРегистра.ДатаОтражения >= Константы.ДатаНачалаВеденияРеглУчета
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И НЕ ДанныеПроверки.Документ ЕСТЬ NULL
	|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (&СписокПроверяемыхТиповДокументов)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) > 0
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИспользоватьРеглУчет", ?(ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"), "ИСТИНА", "ЛОЖЬ"));
	
	СписокПроверяемыхТипов = ПроверкаДокументовСервер.ПроверяемыеТипыДокументов();
	МассивИменТиповДокументов = Новый Массив;
	
	Для Каждого ПроверяемыйТип Из СписокПроверяемыхТипов Цикл
		МассивИменТиповДокументов.Добавить("ТИП(Документ."+Метаданные.НайтиПоТипу(ПроверяемыйТип).Имя+")");
	КонецЦикла;
	
	СтрокаИменПроверяемыхТипов = СтрСоединить(МассивИменТиповДокументов, ",");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СписокПроверяемыхТиповДокументов", СтрокаИменПроверяемыхТипов);
	//-- Локализация
	Возврат ТекстЗапроса;
КонецФункции
//-- НЕ УТ

#Область ФормированиеЗаданийКЗакрытиюМесяца

// Дополняет текст запроса механизма формирования заданий закрытия месяца.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
Процедура ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(Запрос, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ
#Область ФормированиеРегламентныхДокументов

// Формирует документы "Регламентная операция" начиная с первого пересчитываемого периода до текущего рассчитываемого периода.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ТипОперации 		 - ПеречислениеСсылка.ТипыРегламентныхОперацийМеждународныйУчет - тип операции документа
//							если не указан, то создаются документы со всеми типами операций из свойства ТипыРегламентныхОпераций данного этапа.
//	
Процедура РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, ПоОрганизациямДляКоторыхЕстьЗадания) Экспорт
	//++ Локализация
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоРасчета = ЗакрытиеМесяцаСервер.НачалоРасчета(
		ПараметрыОбработчика.ДанныеЭтапа.Код,
		ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,,
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
	ТипыОпераций = ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций;
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоРасчета <= ПараметрыОбработчика.ПараметрыРасчета.КонецПериода Цикл
		
		ИмяКлючевойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ЗакрытиеМесяца.%1",
			СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код));
		ОписаниеЗамера 		= ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации);
		КоличествоДанных	= 0;
		
		НомерЗадания 	 	= ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
		ОкончаниеПериода 	= КонецМесяца(НачалоРасчета);
		
		НачатьТранзакцию();
		
		Попытка
			
			 ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ДанныеКРасчетуЗаМесяц =  ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета,
				ОкончаниеПериода,
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
|%2'
|;uk='При виконанні розрахунку за період %1 сталася помилка:
|%2'",ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			 ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета);
			
		КонецПопытки;
		
		Если ПоОрганизациямДляКоторыхЕстьЗадания Тогда
			
			Для каждого Организация Из ДанныеКРасчетуЗаМесяц.Организация Цикл
				
				Для Каждого ТипОперации Из ТипыОпераций Цикл
					
					Если НЕ ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, НачалоРасчета) Тогда
						Продолжить;
					КонецЕсли; 
					
					РезультатРасчета = СформироватьДокументРегламентнаяОперация(
											ПараметрыОбработчика, 
											ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация),
											ТипОперации, 
											НачалоРасчета);
											
					Если РезультатРасчета <> Неопределено Тогда
						Если ЗначениеЗаполнено(РезультатРасчета.ТекстОшибки)
							ИЛИ РезультатРасчета.СписокОшибок.Количество() <> 0 Тогда
							ЕстьОшибки = Истина;
						Иначе
							КоличествоДанных = КоличествоДанных + РезультатРасчета.КоличествоДанных;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЦикла; 
			
		ИначеЕсли ДанныеКРасчетуЗаМесяц.Организация.Количество() <> 0 Тогда
			
			Для Каждого ТипОперации Из ТипыОпераций Цикл
				
				Если НЕ ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, НачалоРасчета) Тогда
					Продолжить;
				КонецЕсли; 
				
				РезультатРасчета = СформироватьДокументРегламентнаяОперация(
										ПараметрыОбработчика, 
										ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
										ТипОперации, 
										НачалоРасчета);
										
				Если РезультатРасчета <> Неопределено Тогда
					Если ЗначениеЗаполнено(РезультатРасчета.ТекстОшибки)
						ИЛИ РезультатРасчета.СписокОшибок.Количество() <> 0 Тогда
						ЕстьОшибки = Истина;
					Иначе
						КоличествоДанных = КоличествоДанных + РезультатРасчета.КоличествоДанных;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			Прервать;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			 ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			 ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(
				Неопределено,
				НомерЗадания,
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРасчетуЗаМесяц);
			
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(
				ДанныеКРасчетуЗаМесяц.ВременныеТаблицы,
				ОкончаниеПериода + 1);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
|%2'
|;uk='При виконанні розрахунку за період %1 сталася помилка:
|%2'",ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			 ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета);
			
		КонецПопытки;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
		НачалоРасчета = ОкончаниеПериода + 1;
		
	КонецЦикла;
	//-- Локализация
КонецПроцедуры

// Формирует документы "Регламентная операция" за один период.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ТипОперации 		 - ПеречислениеСсылка.ТипыРегламентныхОпераций - тип операции документа
//							если не указан, то создаются документы со всеми типами операций из свойства ТипыРегламентныхОпераций данного этапа
//	Период 				 - Дата, Неопределено - период для формирования документов;
//							если период не указан, то формируются документы за текущий рассчитываемый период.
//	
// Возвращаемое значение:
//	Структура - результат формирования документов, см. Документы.РегламентнаяОперация.РассчитатьРегламентныеОперации()
//		если типы операций не определен, то возвращается значение Неопределено.
//
Функция СформироватьДокументРегламентнаяОперация(ПараметрыОбработчика, МассивОрганизаций, Знач ТипОперации = Неопределено, Знач Период = Неопределено) Экспорт
	РезультатРасчета = Неопределено;
	//++ Локализация
	ТипыОпераций = ?(ЗначениеЗаполнено(ТипОперации),
		ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации),
		ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций);
	
	ТипыВыполняемыхОпераций = Новый Массив;
	
	Период = ?(ЗначениеЗаполнено(Период), Период, ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	Для Каждого ТипОперации Из ТипыОпераций Цикл
		
		Если ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, Период) Тогда
			ТипыВыполняемыхОпераций.Добавить(ТипОперации);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипыВыполняемыхОпераций.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатРасчета = Документы.РегламентнаяОперация.РассчитатьРегламентныеОперации(
		Период,
		ТипыВыполняемыхОпераций,
		МассивОрганизаций);
	
	Если ЗначениеЗаполнено(РезультатРасчета.ТекстОшибки) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='По организации ""%1"" за период %2 не удалось провести регламентную операцию ""%3"" по причине:
|%4'
|;uk='По організації ""%1"" за період %2 не вдалося провести регламентну операцію ""%3"" по причині:
|%4'",ОбщегоНазначения.КодОсновногоЯзыка()),
			СокрЛП(РезультатРасчета.Организация),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(Период),
			СокрЛП(РезультатРасчета.ТипОперации),
			РезультатРасчета.ТекстОшибки);
		
		ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки,
			?(ЗначениеЗаполнено(РезультатРасчета.Организация), РезультатРасчета.Организация, МассивОрганизаций),
			Период,
			,
			РезультатРасчета.ДокументСОшибкой);
		
	КонецЕсли;
	
	Для каждого ОписаниеОшибки Из РезультатРасчета.СписокОшибок Цикл
		
		ПараметрыРегистрации =  ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
			ПараметрыОбработчика.ДанныеЭтапа.Код,
			ОписаниеОшибки.Организация,
			Период);
			
		ГруппаПроблем = НСтр("ru='При выполнении операции были диагностированы ошибки';uk='При виконанні операції були діагностовані помилки'",ОбщегоНазначения.КодОсновногоЯзыка());
			
		ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРегистрации,
			ГруппаПроблем,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка,
			ОписаниеОшибки.ОписаниеПроблемы,
			ОписаниеОшибки.Объект);
			
	КонецЦикла; 
	//-- Локализация
	Возврат РезультатРасчета;
КонецФункции

// Возвращает требуемую периодичность указанной регламентной операции.
//
// Параметры:
//	ТипОперации - ПеречислениеСсылка.ТипыРегламентныхОпераций - тип регламентной операции.
//
// Возвращаемое значение:
//	 ПеречисленияСсылка.Периодичность - периодичность операции.
//
Функция ПериодичностьРегламентнойОперации(ТипОперации) Экспорт
	Периодичность = Неопределено;
	//++ Локализация
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода Тогда
		
		Периодичность = Перечисления.Периодичность.Год;
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности Тогда
		
		Периодичность = Перечисления.Периодичность.Квартал;
		
	Иначе
		
		Периодичность = Перечисления.Периодичность.Месяц;
		
	КонецЕсли;
	//-- Локализация
	Возврат Периодичность;
	
КонецФункции

// Проверяет совпадение указанного периода и периодичности регламентной операции.
//
// Параметры:
//	ТипОперации - ПеречислениеСсылка.ТипыРегламентныхОпераций - тип регламентной операции
//	Период 		- Дата - период для формирования документа по данной операции.
//
// Возвращаемое значение:
//	 Булево - признак необходимости формирования документа.
//
Функция ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, Период) Экспорт
	Результат = Ложь;
	
	//++ Локализация
	Периодичность = ПериодичностьРегламентнойОперации(ТипОперации);
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		Результат = Истина;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Результат = (Месяц(Период) % 3 = 0);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Результат = (Месяц(Период) = 12);
	Иначе
		ВызватьИсключение НСтр("ru='Неверная периодичность регламентной операции';uk='Невірна періодичність регламентної операції'");
	КонецЕсли; 
	//-- Локализация	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервереФормаЗакрытиеМесяца(Отказ, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры


// Настраивает форму закрытия месяца.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	ВыполняетсяЗагрузкаНастроек - Булево -
//
Процедура НастроитьЭлементыПриИнициализацииФормы(Форма, ВыполняетсяЗагрузкаНастроек = Ложь) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область РаботаСДатами

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
// Параметры:
//  Данные - ТаблицаЗначений - см. описание в механизме БСП.
//
Процедура ДополнитьОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	//++ Локализация
	//++ НЕ УТ
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДенежныеДокументы", "Период", "РегламентныеОперации", "Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВыпускПродукции", "Период", "РегламентныеОперации", "Организация");
	//-- НЕ УТ
	//-- Локализация
КонецПроцедуры

// Возвращает дату задания на текущий период в зависимости от операции.
// 
// Параметры:
// 	Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция закрытия месяца.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДокументЗадания - ДокументСсылка.* - документ задания.
// 	Период - Дата - дата задания.
// Возвращаемое значение:
// 	Дата - дата задания
//
Функция ДатаЗаданияНаТекущийПериод(Операция, Организация, ДокументЗадания, Знач Период) Экспорт
	Месяц = Период;
	//++ Локализация
	//-- Локализация
	Возврат Месяц
	
КонецФункции

// Возвращает дату задания на следующий период в зависимости от операции.
// 
// Параметры:
// 	Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция закрытия месяца.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДокументЗадания - ДокументСсылка.* - документ задания.
// 	СледующийМесяц - Дата - дата задания.
// Возвращаемое значение:
// 	Дата - дата задания
//
Функция ДатаЗаданияНаСледующийПериод(Операция, Организация, ДокументЗадания, Знач СледующийМесяц) Экспорт
	//++ Локализация
	//++ НЕ УТ
	Если Операция = Перечисления.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата Тогда
        
        СледующийМесяц = СледующийМесяц;

	КонецЕсли;
	
	//-- НЕ УТ
	Возврат СледующийМесяц
	//-- Локализация
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИдентификаторыГруппЭтапов

//++ Локализация
//-- Локализация

#КонецОбласти

#КонецОбласти