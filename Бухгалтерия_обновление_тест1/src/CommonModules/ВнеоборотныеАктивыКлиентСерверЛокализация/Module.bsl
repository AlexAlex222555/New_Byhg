////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Внеоборотные активы", предназначенные для локализации.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
//++ Локализация
//-- Локализация

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ФормаОбъектаЭксплуатации

Процедура НастроитьЗависимыеЭлементыФормы_ОбъектыЭксплуатации(Форма, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_ОбъектыЭксплуатации(Объект, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ФормаСпискаОбъектаЭксплуатации

Процедура ЗаполнитьСведенияВФормеСпискаОС(Форма, Сведения2_4, Сведения2_2) Экспорт

	//++ Локализация     
	
	Элементы = Форма.Элементы;
	
	Если Форма.ИспользоватьУчет2_4 Тогда
		
		ПредставлениеСведений = Сведения2_4.ПредставлениеСведений;
		
		Если ПредставлениеСведений <> Неопределено Тогда
			
			ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(
				Элементы.СведенияПринятКУчету2, ПредставлениеСведений.СведенияПринятКУчету2);
				
			ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(
				Элементы.СведенияГруппаОС, Сведения2_4.СведенияГруппаОС);
				
			ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(
				Элементы.СведенияСрокИспользования2, ПредставлениеСведений.СведенияСрокИспользования2);
				
			ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(
				Элементы.СведенияСрокИспользования3, ПредставлениеСведений.СведенияСрокИспользования3);
				
		Иначе
			
			Элементы.СведенияПринятКУчету2.Видимость = Ложь;
			Элементы.СведенияГруппаОС.Видимость = Ложь;
			Элементы.СведенияСрокИспользования2.Видимость = Ложь;
			Элементы.СведенияСрокИспользования3.Видимость = Ложь;
			
		КонецЕсли; 
		
	Иначе
		
		Элементы.СтраницыСведения.ТекущаяСтраница = Элементы.СтраницаСведения2_2;
		
		Форма.СведенияТаблицаСумм.Очистить();
		
		Для Каждого ЭлМассива Из Сведения2_2 Цикл
			ЗаполнитьЗначенияСвойств(Форма.СведенияТаблицаСумм.Добавить(), ЭлМассива);
		КонецЦикла;
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ФормаНематериальныеАктивы

Процедура НастроитьЗависимыеЭлементыФормы_НематериальныеАктивы(Форма, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры
 
#КонецОбласти

#Область ФормаСпискаНМА

Процедура ЗаполнитьСведенияВФормеСпискаНМА(Форма, Сведения2_4, Сведения2_2) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если Форма.ИспользоватьУчет2_4 Тогда
		
		
	Иначе	
		
		Форма.СведенияТаблицаСумм.Очистить();
		Для Каждого Эл Из Сведения2_2 Цикл
			ЗаполнитьЗначенияСвойств(Форма.СведенияТаблицаСумм.Добавить(), Эл);
		КонецЦикла;
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПеремещениеНМА

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_ПеремещениеНМА(Объект, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = Ложь;
		
		//++ Локализация
		//-- Локализация
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Организация", 
			"ОрганизацияСдатчик", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
		
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область МодернизацияОС

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_МодернизацияОС(Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьВспомогательныеРеквизиты_МодернизацияОС(Форма, ВспомогательныеРеквизиты) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура НастроитьЗависимыеЭлементыФормы_МодернизацияОС(Форма, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура ПриИзмененииРеквизитов_МодернизацияОС(Объект, ВспомогательныеРеквизиты, СписокРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПринятиеКУчетуОС

Процедура ЗаполнитьРеквизитыВЗависимостиОтСвойств_ПринятиеКУчетуОС(Объект, ПараметрыРеквизита, Действие, ИзмененныеРеквизиты) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуОС(Объект, ВспомогательныеРеквизиты, ПараметрыПринятияКУчетуОС, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт

	//++ Локализация

	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;

	#Область Основное

	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ ОбновитьВсе Тогда
		
		//
		
		ЗначениеСвойства = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации");
		
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДокументОснование", 
			"ДокументОснование", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДокументНаОсновании", 
			"ДокументНаОсновании", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Ложь;
									
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВариантПримененияЦелевогоФинансирования", 
			"ВариантПримененияЦелевогоФинансирования", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);

	КонецЕсли;
	

	#КонецОбласти

	#Область ОС

	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьБУ", 
			"", 
			"Видимость", 
			Объект.ОтражатьВРеглУчете, 
			ПараметрыРеквизитовОбъекта);
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ЛиквидационнаяСтоимостьБУ", 
			"", 
			"Видимость", 
			Объект.ОтражатьВРеглУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
				Объект.ОтражатьВРеглУчете
					И (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации") 
						ИЛИ НЕ ВспомогательныеРеквизиты.ЕстьУчетСебестоимости)
					И ВспомогательныеРеквизиты.ПлательщикНалогаНаПрибыль
					И ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
					
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьНУ", 
			"ОССтоимостьНУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
					
	КонецЕсли;
	
		
	#КонецОбласти

	#Область ПараметрыУчета
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияБУ", 
			"СрокИспользованияБУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииБУ, 
			ПараметрыРеквизитовОбъекта);
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СрокИспользованияБУРасшифровка", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииБУ, 
			ПараметрыРеквизитовОбъекта);
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюБУ", 
			"НачислятьАмортизациюБУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииБУ,
			ПараметрыРеквизитовОбъекта);
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииБУ", 
			"МетодНачисленияАмортизацииБУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииБУ, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияНУ", 
			"СрокИспользованияНУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииНУ, 
			ПараметрыРеквизитовОбъекта);
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СрокИспользованияНУРасшифровка", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииНУ, 
			ПараметрыРеквизитовОбъекта);
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюНУ", 
			"НачислятьАмортизациюНУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииНУ, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;


	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			(Объект.МетодНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный")
				Или Объект.МетодНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка")
				Или Объект.МетодНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Кумулятивный"));
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияБУ",
			"СрокИспользованияБУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		
		//
		ЗначениеСвойства = 
			(Объект.МетодНачисленияАмортизацииБУ <> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции")
				
				И ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииБУ);
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикАмортизации", 
			"ГрафикАмортизации", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
			
		
	КонецЕсли;
	

	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ПлательщикНалогаНаПрибыль 
			И ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииНУ;
								
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияНУ", 
			"СрокИспользованияНУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли; 
	

	#КонецОбласти

	#Область ОтражениеРасходов

	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата") 
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовБУ", 
			"СтатьяРасходовБУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовБУ, 
			ПараметрыРеквизитовОбъекта);
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовБУ", 
			"АналитикаРасходовБУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовБУ, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовНУ", 
			"СтатьяРасходовНУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовНУ, 
			ПараметрыРеквизитовОбъекта);
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовНУ", 
			"АналитикаРасходовНУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовНУ, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СтатьяРасходовБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовНУ", 
			"СтатьяРасходовНУ", 
			"АвтоОтметкаНезаполненного", 
			ПараметрыПринятияКУчетуОС.СтатьяРасходовНУОбязательна, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации");
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СтатьяДоходовПоИнвентаризации", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"АналитикаДоходовПоИнвентаризации", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СтатьяРасходовБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"АвтоОтметкаНезаполненного", 
			ПараметрыПринятияКУчетуОС.СтатьяРасходовУУОбязательна, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	#КонецОбласти
	//-- Локализация
	
КонецПроцедуры
 
#КонецОбласти

#Область ПринятиеКУчетуНМА

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуНМА(Объект, ПараметрыПринятияКУчетуНМА, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеПараметровОС

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_ИзменениеПараметровОС(Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры
 
Процедура ДополнитьВспомогательныеРеквизиты_ИзменениеПараметровОС(Форма, ВспомогательныеРеквизиты) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура НастроитьЗависимыеЭлементыФормы_ИзменениеПараметровОС(Форма, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура УстановитьВидимостьТекущихЗначений_ИзменениеПараметровОС(Форма, КоличествоСвойствУУ, КоличествоСвойствОбщ, КоличествоСвойствЛокализация, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеПараметровНМА

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_ИзменениеПараметровНМА(Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура НастроитьЗависимыеЭлементыФормы_ИзменениеПараметровНМА(Форма, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура УстановитьВидимостьТекущихЗначений_ИзменениеПараметровНМА(Форма, КоличествоСвойствУУ, КоличествоСвойствОбщ, КоличествоСвойствЛокализация, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область СписаниеОС

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_СписаниеОС(Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьВспомогательныеРеквизиты_СписаниеОС(Форма, ВспомогательныеРеквизиты) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура НастроитьЗависимыеЭлементыФормы_СписаниеОС(Форма, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область СписаниеНМА

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_СписаниеНМА(Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьВспомогательныеРеквизиты_СписаниеНМА(Форма, ВспомогательныеРеквизиты) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура НастроитьЗависимыеЭлементыФормы_СписаниеНМА(Форма, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область РазукомплектацияОС

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_РазукомплектацияОС(Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура НастроитьЗависимыеЭлементыФормы_РазукомплектацияОС(Форма, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьВспомогательныеРеквизиты_РазукомплектацияОС(Форма, ВспомогательныеРеквизиты) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры
 
#КонецОбласти

#Область РеализацияУслугПрочихАктивов

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_РеализацияУслугПрочихАктивов(Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьВспомогательныеРеквизиты_РеализацияУслугПрочихАктивов(Форма, ВспомогательныеРеквизиты) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры
 
Процедура ПриИзмененииРеквизитов_РеализацияУслугПрочихАктивов(Форма, ИзмененныеРеквизиты) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура НастроитьЗависимыеЭлементыФормы_РеализацияУслугПрочихАктивов(Форма, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры
 
#КонецОбласти

#Область КорректировкаСтоимостиИАмортизацииОС

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_КорректировкаСтоимостиИАмортизацииОС(Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры
 
#КонецОбласти

#Область КорректировкаСтоимостиИАмортизацииНМА

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_КорректировкаСтоимостиИАмортизацииНМА(Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры
 
#КонецОбласти

#Область ПереоценкаОС

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_ПереоценкаОС(Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

//++ Локализация

#Область Инвентаризация

Функция ЗначенияСвойствЗависимыхРеквизитов_ИнвентаризацияОС(Объект, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ИнвентаризацияОС");
										
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МОЛ", 
			"МОЛ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.МОЛ", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.Действие", 
			"ОСДействие", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МОЛ")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ИнвентаризацияОС")
			И НЕ ЗначениеЗаполнено(Объект.МОЛ);
										
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСМОЛ", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Возврат ПараметрыРеквизитовОбъекта;

КонецФункции

Процедура ЗаполнитьДействиеНаОснованииИнвентаризацииОС(ДанныеСтроки, Организация, Подразделение, МОЛ, ИспользуетсяВНА24) Экспорт
	
	ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.ПустаяСсылка");

	Если ДанныеСтроки.НаличиеПоДаннымУчета 
		И НЕ ДанныеСтроки.НаличиеФактическое
		И ДанныеСтроки.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКУчету") Тогда
		
		ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.Списание");
	ИначеЕсли ДанныеСтроки.НаличиеПоДаннымУчета 
		И ДанныеСтроки.НаличиеФактическое
		И ДанныеСтроки.СтоимостьПоДаннымУчета <> ДанныеСтроки.СтоимостьФактическая
		И ДанныеСтроки.СтоимостьФактическая <> 0 Тогда
		
		ДанныеСтроки.Действие = ?(ИспользуетсяВНА24, 
								ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.Переоценка"),
								ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.Списание"));
		
	ИначеЕсли НЕ ДанныеСтроки.НаличиеПоДаннымУчета Тогда
		
		Если ДанныеСтроки.НаличиеФактическое
			И (ДанныеСтроки.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.НеПринятоКУчету")
				ИЛИ ДанныеСтроки.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.СнятоСУчета")
				ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Состояние)) Тогда
			
		ИначеЕсли ДанныеСтроки.НаличиеФактическое
			И ДанныеСтроки.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКУчету")
			И (ДанныеСтроки.ОрганизацияПоДаннымУчета <> Организация
				ИЛИ ДанныеСтроки.ПодразделениеПоДаннымУчета <> Подразделение
				ИЛИ НЕ ЗначениеЗаполнено(МОЛ)
					И ДанныеСтроки.МОЛПоДаннымУчета <> ДанныеСтроки.МОЛ
					И ЗначениеЗаполнено(ДанныеСтроки.МОЛ)
				ИЛИ ЗначениеЗаполнено(МОЛ)
					И ДанныеСтроки.МОЛПоДаннымУчета <> МОЛ) Тогда
			
			ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.Перемещение");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеУчетаВСтрокеИнвентаризацииОС(ДанныеСтроки, ДанныеУчета, ПараметрыИнвентаризации, ЭтоЧтениеОбъекта, ЗаполнитьСлужебныеРеквизиты, ИспользуетсяУправлениеВНА_2_4) Экспорт

	Если ДанныеУчета <> Неопределено Тогда
		
		Если НЕ ЭтоЧтениеОбъекта Тогда
			
			Если ДанныеУчета.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ИнвентаризацияНезавершенногоСтроительства") Тогда
				ДанныеСтроки.НаличиеПоДаннымУчета = Истина;
			ИначеЕсли ДанныеУчета.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ИнвентаризацияВложенийВОС") Тогда
				ДанныеСтроки.НаличиеПоДаннымУчета = Истина;
			Иначе
				ДанныеСтроки.НаличиеПоДаннымУчета = 
					(ДанныеУчета.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКУчету")
						ИЛИ ДанныеУчета.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету"))
					И ДанныеУчета.ОрганизацияПоДаннымУчета = ПараметрыИнвентаризации.Организация
					И ДанныеУчета.ПодразделениеПоДаннымУчета = ПараметрыИнвентаризации.Подразделение
					И (НЕ ЗначениеЗаполнено(ПараметрыИнвентаризации.МОЛ)
							И (ДанныеУчета.МОЛПоДаннымУчета = ДанныеСтроки.МОЛ
								ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.МОЛ))
						ИЛИ ЗначениеЗаполнено(ПараметрыИнвентаризации.МОЛ)
							И ДанныеУчета.МОЛПоДаннымУчета = ПараметрыИнвентаризации.МОЛ);
			КонецЕсли; 
			
			Если ДанныеСтроки.НаличиеПоДаннымУчета Тогда
				ДанныеСтроки.СтоимостьПоДаннымУчета = ДанныеУчета.СтоимостьПоДаннымУчета;
			Иначе
				ДанныеСтроки.СтоимостьПоДаннымУчета = 0;
			КонецЕсли;
			
			ЗаполнитьРассчитываемыеПоляИнвентаризации(ДанныеСтроки);
			
		КонецЕсли; 
		
		Если ЗаполнитьСлужебныеРеквизиты Тогда
			ДанныеСтроки.ОрганизацияПоДаннымУчета = ДанныеУчета.ОрганизацияПоДаннымУчета;
			ДанныеСтроки.ПодразделениеПоДаннымУчета = ДанныеУчета.ПодразделениеПоДаннымУчета;
			ДанныеСтроки.МОЛПоДаннымУчета = ДанныеУчета.МОЛПоДаннымУчета;
			ДанныеСтроки.ОрганизацииВзаимосвязаны = ДанныеУчета.ОрганизацииВзаимосвязаны;
			ДанныеСтроки.ПолученоВАренду = ДанныеУчета.ПолученоВАренду;
			ДанныеСтроки.Состояние = ДанныеУчета.Состояние;
			ДанныеСтроки.ИнвентарныйНомер = ДанныеУчета.ИнвентарныйНомер;
			ДанныеСтроки.Код = ДанныеУчета.Код;
		КонецЕсли; 
		
	Иначе
		
		Если НЕ ЭтоЧтениеОбъекта Тогда
			ДанныеСтроки.НаличиеПоДаннымУчета = Ложь;
			ДанныеСтроки.СтоимостьПоДаннымУчета = 0;
		КонецЕсли; 
		
		Если ЗаполнитьСлужебныеРеквизиты Тогда
			ДанныеСтроки.ОрганизацияПоДаннымУчета = Неопределено;
			ДанныеСтроки.ПодразделениеПоДаннымУчета = Неопределено;
			ДанныеСтроки.МОЛПоДаннымУчета = Неопределено;
			ДанныеСтроки.ОрганизацииВзаимосвязаны = Ложь;
			ДанныеСтроки.ПолученоВАренду = Ложь;
			ДанныеСтроки.Состояние = Неопределено;
			ДанныеСтроки.ИнвентарныйНомер = "";
			ДанныеСтроки.Код = "";
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если НЕ ЭтоЧтениеОбъекта Тогда
		
		ЗаполнитьДействиеНаОснованииИнвентаризацииОС(
			ДанныеСтроки, 
			ПараметрыИнвентаризации.Организация, 
			ПараметрыИнвентаризации.Подразделение,
			ПараметрыИнвентаризации.МОЛ,
			ИспользуетсяУправлениеВНА_2_4);
			
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьДействиеНаОснованииИнвентаризацииНМА(ДанныеСтроки, ДанныеУчета, Организация, Подразделение) Экспорт
	
	ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.ПустаяСсылка");

	Если ДанныеУчета = Неопределено Тогда
		
		ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.ПустаяСсылка");
		
	ИначеЕсли ДанныеСтроки.НаличиеПоДаннымУчета 
		И НЕ ДанныеСтроки.НаличиеФактическое
		И ДанныеУчета.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияНМА.ПринятКУчету") Тогда
		
		ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.Списание");
		
	ИначеЕсли НЕ ДанныеСтроки.НаличиеПоДаннымУчета Тогда
		
		Если ДанныеСтроки.НаличиеФактическое
			И (ДанныеУчета.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияНМА.НеПринятКУчету")
				ИЛИ ДанныеУчета.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияНМА.Списан")) Тогда
			
			ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.ПринятиеКУчету");
			
		ИначеЕсли ДанныеСтроки.НаличиеФактическое
			И ДанныеУчета.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияНМА.ПринятКУчету")
			И (ДанныеУчета.Организация <> Организация
				ИЛИ ДанныеУчета.Подразделение <> Подразделение) Тогда
			
			ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.Перемещение");
			
		КонецЕсли;
		
	ИначеЕсли ДанныеСтроки.НаличиеПоДаннымУчета
		И ДанныеСтроки.НаличиеФактическое
		И ДанныеСтроки.СтоимостьПоДаннымУчета <> ДанныеСтроки.СтоимостьФактическая Тогда
		
		ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.Переоценка");
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтрокуИнвентаризацииНМАПоДаннымУчета(ДанныеСтроки, ДанныеУчета) Экспорт

	Если ДанныеУчета <> Неопределено Тогда
		
		ДанныеСтроки.НаличиеПоДаннымУчета = ДанныеУчета.НаличиеПоДаннымУчета;
		Если ДанныеСтроки.НаличиеПоДаннымУчета Тогда
			ДанныеСтроки.СтоимостьПоДаннымУчета = ДанныеУчета.СтоимостьПоДаннымУчета;
		Иначе
			ДанныеСтроки.СтоимостьПоДаннымУчета = 0;
		КонецЕсли;
		
	Иначе
		ДанныеСтроки.НаличиеПоДаннымУчета = Ложь;
		ДанныеСтроки.СтоимостьПоДаннымУчета = 0;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьРассчитываемыеПоляИнвентаризации(ДанныеСтроки) Экспорт
	
	РазницаПоСтоимости = ДанныеСтроки.СтоимостьФактическая - ДанныеСтроки.СтоимостьПоДаннымУчета;

	ДанныеСтроки.ИзлишекСумма = ?(РазницаПоСтоимости > 0, РазницаПоСтоимости, 0);
	ДанныеСтроки.НедостачаСумма = ?(РазницаПоСтоимости < 0, -РазницаПоСтоимости, 0);

КонецПроцедуры

#КонецОбласти

//-- Локализация

#Область Прочее

Процедура ДополнитьИзменяемыеРеквизиты_ИзменениеПараметровНМА(ИзменяемыеРеквизиты) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
