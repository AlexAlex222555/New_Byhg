////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие процедуры и функции для форм регламентированной
// отчетности.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст() Экспорт

	Возврат НСтр("ru='Не выбрана организация.';uk='Не обрана організація.'");

КонецФункции

//КонецФункции

Функция ПриЗаписиРегламентированногоОтчетаНаКлиенте(Форма, Автосохранение = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...';uk='Зберігається %1...'"), Форма.Заголовок), , , БиблиотекаКартинок.Записать);
	
	Возврат Истина;
	
КонецФункции

Процедура ВставитьДополнительнуюСтраницуНаКлиенте(Форма, ИмяТекущейСтраницыПанели = Неопределено) Экспорт

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = Форма.Элементы.Страницы.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;
    	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз=РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз<>0 И Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			
			ЗаголовокСтраницы=Форма.Элементы.Страницы.ТекущаяСтраница.Заголовок;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';uk='В розділі ""%1"" максимальна кількість екземплярів сторінок дорівнює 
|%2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			
			Сообщение.Сообщить();
                
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = Форма[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	// Если на листе есть многострочность, то удалим ее.
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Истина);

	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	// Часть для подстраховки, от старой системы хранения многостраничности
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
	КонецЕсли;

	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		// Добавляем новую страницу
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

		// Присваиваем представление по умолчанию
		СтрНоваяСтраница.Представление  = НСтр("ru='Новая страница';uk='Нова сторінка'");
		СтрНоваяСтраница.АвтоматическоеПредставление = Истина;

		// Ставим признак активной страницы
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе").Количество();
		
		// Если есть многострочность, то она очищена в проц роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице
		// Если многострочность есть, то она удалится и запустится Расчет на стадии роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице
		Если КолМногострочныхЧастей = 0 Тогда
				// Очищаем текущее поле
			Форма.ОчиститьТабличноеПолеНаКлиенте(ИмяТекТабличногоПоля);
		КонецЕсли;

		Если КолМногострочныхЧастей = 0 Тогда
			// Выполняем расчет показателей добавленной страницы
			Форма.РасчетНаКлиенте(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Форма.Модифицированность = Истина;
				                                   
	КонецЕсли;
    		
КонецПроцедуры

Функция ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь, ТипЗнчСуммы = Неопределено) Экспорт
	
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	Если Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницыПанели];

		Если ПолучитьЭталонную Тогда
						
			Если Форма.мСтруктураВариантыЗаполненияЭталон.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
				
				МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницыПанели];
								
				НоваяТаблицаВариантовЗаполнения = МассивВариантовЗаполненияСтраниц.Добавить();	
				
				КопироватьДанныеФормы(МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения, НоваяТаблицаВариантовЗаполнения.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		Иначе
			
			НомерТекущейСтраницы = 1;
			
			Попытка
				МногостраничностьЕсть = ?(Форма.мСтруктураМногостраничныхРазделов = Неопределено, Ложь, Истина);
			Исключение
				МногостраничностьЕсть = Ложь;
			КонецПопытки;
			
			Если МногостраничностьЕсть Тогда
				
				Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
					
					ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
					
					СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
					
					Если СтрТаблицаСтраницы.Количество() > 0 Тогда
						НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
					КонецЕсли;
					
				КонецЕсли;
				
				Если МассивВариантовЗаполненияСтраниц.Количество() < НомерТекущейСтраницы Тогда
					
					Для Сч = МассивВариантовЗаполненияСтраниц.Количество() По НомерТекущейСтраницы Цикл
						
						НоваяТаблицаВариантовЗаполнения = МассивВариантовЗаполненияСтраниц.Добавить();	
						
						КопироватьДанныеФормы(МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения, НоваяТаблицаВариантовЗаполнения.ТаблицаВариантовЗаполнения);
						
					КонецЦикла;
					
				КонецЕсли;
								
			КонецЕсли;
			
			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1].ТаблицаВариантовЗаполнения;
			
		КонецЕсли;
		    		
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции

Функция ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, Знач КодПоказателя) Экспорт
	
	ПоляПоиска = "КодПоказателяПоСоставу, КодПоказателяПоФорме";

	МассивПолейПоиска = Новый Массив;
		
	Пока ЗначениеЗаполнено(ПоляПоиска) Цикл
		
		Индекс = СтрНайти(ПоляПоиска, ",");
		
		Если Индекс = 0 Тогда
			МассивПолейПоиска.Добавить(СокрЛП(ПоляПоиска));
			ПоляПоиска = "";
		Иначе
			МассивПолейПоиска.Добавить(СокрЛП(Лев(ПоляПоиска, Индекс - 1)));
			ПоляПоиска = Сред(ПоляПоиска, Индекс + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденнаяСтрока = Неопределено;
		
	Для Каждого Элемент Из Форма.мТаблицаСоставПоказателей Цикл
		
		Для Каждого ПолейПоиска Из МассивПолейПоиска Цикл
			
			Если СокрЛП(Элемент[ПолейПоиска]) = КодПоказателя Тогда
				
				Возврат Элемент.ИмяПоляТаблДокумента;
							
			КонецЕсли;
						
		КонецЦикла;
				
	КонецЦикла;
		
	Возврат Неопределено;

КонецФункции

Процедура ПослеВставкиДополнительнойСтраницыНаКлиенте(Форма, ИмяВставляемойСтраницы, ПерейтиНаВставленныйЛист = Истина) Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеВставкиДополнительнойСтраницы(Форма, ИмяВставляемойСтраницы, ПерейтиНаВставленныйЛист);

КонецПроцедуры

Функция НайтиСтрокиВДанныхФормыДерево(ЭлементыДанныхФормыДерево, ИмяКолонки, ИскомоеЗначение, МассивНайденныхСтрок) Экспорт
	
	Для Ном = 0 По ЭлементыДанныхФормыДерево.Количество() - 1 Цикл
		
		ЭлементДерева = ЭлементыДанныхФормыДерево.Получить(Ном);
		
		Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
			МассивНайденныхСтрок.Добавить(ЭлементДерева);
		КонецЕсли;
		
		Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			
			РезультатПоиска = НайтиСтрокиВДанныхФормыДерево(ЭлементДерева.ПолучитьЭлементы(), ИмяКолонки, ИскомоеЗначение, МассивНайденныхСтрок);
			
			Если НЕ РезультатПоиска = Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат МассивНайденныхСтрок;
	
КонецФункции

Процедура МеханизмыОчисткиРегламентированныхОтчетов(Форма, РежимОчистки = Неопределено, ВыполняемоеОповещение = Неопределено) Экспорт

	Если РежимОчистки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		
		// Запоминаем текущий раздел, выбранный в дереве разделов формы отчета.
		ТекущийРазделОтчетаСокрНаим = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	КонецЕсли;
	
	Если РежимОчистки = "ОчиститьВесьОтчет" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
		// Это описание оповещения будет выполнено после того как выполнена очистка
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОчисткиВсегоОтчета", ЭтотОбъект, ДополнительныеПараметры);
		Форма.Очистить(ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;

	ИмяСтраницы = СтрЗаменить(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела", "");
	ИмяСтраницы = СтрЗаменить(ИмяСтраницы, "ОчиститьТекущийРаздел", "");
	ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", Ложь);
	Многостраничность = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "МногостраничностьВРазделе", Ложь);
	ПредставлениеРазделаОтчета = НРег(ПолучитьПредставлениеРазделаРегОтчета(Форма, ИмяСтраницы));
	СведенияОФЛ = (СтрНайти(НРег(ПредставлениеРазделаОтчета), "физ") > 0) И (СтрНайти(НРег(ПредставлениеРазделаОтчета), "лиц") > 0);


	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		// Очистить текущий раздел. Может быть многостраничный.
		Если Многостраничность Тогда
			КолВоСтраницВРазделе = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяСтраницы]].Количество();
			Если КолВоСтраницВРазделе > 1 Тогда
				ТекстВопроса = НСтр("ru='Внимание! Будут удалены все страницы текущего раздела.
|Продолжить?';uk='Увага! Будуть вилучені всі сторінки поточного розділу.
|Продовжити?'");
			Иначе
				Если СведенияОФЛ Тогда 
					// Очищаем лист со сведениями о физических лицах.
					ТекстВопроса = НСтр("ru='Внимание! Будут очищены сведения о физическом лице.
|Продолжить?';uk='Увага! Будуть очищені відомості про фізичну особу.
|Продовжити?'");
				Иначе
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будет очищен %1.
|Продолжить?';uk='Увага! Буде очищений %1.
|Продовжити?'"), ПредставлениеРазделаОтчета); 
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будет очищен %1.
|Продолжить?';uk='Увага! Буде очищений %1.
|Продовжити?'"), ПредставлениеРазделаОтчета); 
		КонецЕсли;

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ИмяСтраницы",ИмяСтраницы);
		ДополнительныеПараметры.Вставить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста",ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		ДополнительныеПараметры.Вставить("РежимОчистки",РежимОчистки);
		ДополнительныеПараметры.Вставить("Многостраничность",Многостраничность);
		ДополнительныеПараметры.Вставить("КолВоСтраницВРазделе",КолВоСтраницВРазделе);
		ДополнительныеПараметры.Вставить("ТекущийРазделОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
		ДополнительныеПараметры.Вставить("НомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущийРазделЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда

		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будет очищена текущая страница.%1Продолжить?';uk='Увага! Буде очищена поточна сторінка.%1Продовжити?'"), Символы.ПС);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ИмяСтраницы",ИмяСтраницы);
		ДополнительныеПараметры.Вставить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста",ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
		ДополнительныеПараметры.Вставить("РежимОчистки",РежимОчистки);
		ДополнительныеПараметры.Вставить("Многостраничность",Многостраничность);
		ДополнительныеПараметры.Вставить("КолВоСтраницВРазделе",КолВоСтраницВРазделе);
		ДополнительныеПараметры.Вставить("ТекущийРазделОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
		ДополнительныеПараметры.Вставить("НомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущийЭкземплярМногостраничногоРазделаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
	КонецЕсли;

КонецПроцедуры

Процедура ВопросОчиститьТекущийРазделЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяСтраницы = ДополнительныеПараметры.ИмяСтраницы;
	ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = ДополнительныеПараметры.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста;
	РежимОчистки = ДополнительныеПараметры.РежимОчистки;
	Многостраничность = ДополнительныеПараметры.Многостраничность;
	КолВоСтраницВРазделе = ДополнительныеПараметры.КолВоСтраницВРазделе;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Форма.ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе);
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				Если НайденнаяСтрока.ПолучитьЭлементы().Количество() = 1 Тогда
					НомерСтраницыРазделаОтчета = 1;
				КонецЕсли;
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Форма.Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросОчиститьТекущийЭкземплярМногостраничногоРазделаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяСтраницы = ДополнительныеПараметры.ИмяСтраницы;
	ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = ДополнительныеПараметры.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста;
	РежимОчистки = ДополнительныеПараметры.РежимОчистки;
	Многостраничность = ДополнительныеПараметры.Многостраничность;
	КолВоСтраницВРазделе = ДополнительныеПараметры.КолВоСтраницВРазделе;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Форма.ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе);
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				Если НайденнаяСтрока.ПолучитьЭлементы().Количество() = 1 Тогда
					НомерСтраницыРазделаОтчета = 1;
				КонецЕсли;
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Форма.Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Очистить(Форма, ВыполняемоеОповещение = Неопределено, ЗадаватьВопросПередОчисткой = Истина, Знач ТекстВопроса = "") Экспорт
	
	Если ЗадаватьВопросПередОчисткой Тогда
		
		Если ПустаяСтрока(ТекстВопроса) Тогда
			ТекстВопроса = НСтр("ru='Внимание! Будут очищены все разделы отчета.
|Продолжить?';uk='Увага! Будуть очищені всі розділи звіту.
|Продовжити?'");
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), ТекстВопроса), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		
		Форма.ОчиститьНаСервере();
		
		// устанавливаем флаг модифицированности формы
		Форма.Модифицированность = Истина;
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	Форма = ДополнительныеПараметры.Форма;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Форма.ОчиститьНаСервере();
		
		// устанавливаем флаг модифицированности формы
		Форма.Модифицированность = Истина;
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОчисткиВсегоОтчета(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОбновитьДеревоРазделовВФормеОтчета(Форма);
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДеревоРазделовВФормеОтчета(Форма) Экспорт
		
	Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		
		// Запоминаем текущий раздел, выбранный в дереве разделов формы отчета.
		ТекущийРазделОтчетаСокрНаим = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	КонецЕсли;
	
	Форма.СформироватьДеревоРазделовОтчетаНаКлиенте();
			
	Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
		
		Если НЕ НайденнаяСтрока = Неопределено 
			И НЕ НомерСтраницыРазделаОтчета = Неопределено 
			И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
			
			Если НайденнаяСтрока.ПолучитьЭлементы().Количество() = 1 Тогда
				НомерСтраницыРазделаОтчета = 1;
			КонецЕсли;
			
			НайденнаяСтрока2 = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
			
			Если НайденнаяСтрока2 = Неопределено Тогда
				
				НомерСтраницыРазделаОтчета = НайденнаяСтрока.ПолучитьЭлементы().Количество();
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			Иначе
				
				НайденнаяСтрока = НайденнаяСтрока2;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Форма.Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры

Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	КонецЕсли;
	
	ИмяТекущейОбласти   = СтрЗаменить(ТекущаяОбласть.Имя, "УдалитьСтроку", "");

	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, РегламентированнаяОтчетностьКлиентСервер.НайтиПоследнееВхождение(ИмяТекущейОбласти, "_")-1);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(Форма, Область, СтандартнаяОбработка) Экспорт
    

	
	ИмяОбласти = Область.Имя;
	Если Найти(ИмяОбласти, ":") > 0 Тогда
		
		//это выделенный прямоугольник ячеек
		СтандартнаяОбработка = Ложь;
		Возврат Истина;
		
	ИначеЕсли  СтрЧислоВхождений(ИмяОбласти,"R") = 1
		     И СтрЧислоВхождений(ИмяОбласти,"C") = 1 Тогда
		 
		 Позиция1 = Найти(ИмяОбласти, "R");
		 Позиция2 = Найти(ИмяОбласти, "C");
		 Если Позиция2 > Позиция1 Тогда
			 
			Число1 = Сред(ИмяОбласти, Позиция1 + 1, Позиция2 - Позиция1 - 1);
		 	Число2 = Сред(ИмяОбласти, Позиция2 + 1);
			
			Попытка
				
				ЭтоСтандартноеИмяЯчейки = Число(Число1);
				ЭтоСтандартноеИмяЯчейки = Число(Число2);
				
				// это стандартное имя ячейки
				СтандартнаяОбработка = Ложь;
				Возврат Истина;
				
			Исключение
				// имя ячейки не есть стандартным, а значит область - именованная
				Возврат Ложь;
			КонецПопытки;
			
		Иначе	
			
			// имя ячейки не есть стандартным, а значит область - именованная
			Возврат Истина;	
			
		КонецЕсли;
		
	ИначеЕсли    Лев(ИмяОбласти, 1) = "R"
		     ИЛИ Лев(ИмяОбласти, 1) = "C" Тогда
	
		Попытка
		
			ЭтоСтрокаИлиСтолбец = Число(Сред(ИмяОбласти, 2));
			// это выделенная строка или столбец
			СтандартнаяОбработка = Ложь;
			Возврат Истина;
			
		Исключение
			// имя ячейки не есть стандартным, а значит область - именованная
			Возврат Ложь;
		КонецПопытки;	
	
	КонецЕсли;

	Возврат Ложь; // Выбранная область не выделение.


КонецФункции

Функция ПолучитьОбщуюФормуПоИмени(ИмяФормы, Параметры = Неопределено, Владелец = Неопределено, КлючУникальности = Неопределено) Экспорт
		
	Попытка
		
		Возврат ПолучитьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма." + ИмяФормы, Параметры, Владелец, КлючУникальности);
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Процедура ПередЗакрытиемРегламентированногоОтчета(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.Модифицированность Тогда
		
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект, Форма);
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросСохранитьИзмененияЗавершение(Ответ, Форма) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Форма.СохранитьНаКлиенте(,Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Форма.Модифицированность = Ложь;
		
		Форма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

Процедура ПоказатьСтраницыОтчетаНаКлиенте(Форма) Экспорт

	Если ТипЗнч(Форма.мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат;
	КонецЕсли;
    
	// обновляем исходное дерево значений 
	КопироватьДанныеФормы(Форма.мДеревоВыбранныхСтраниц, Форма.мДеревоСтраницОтчета);
	
	Если РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.мДеревоСтраницОтчета.ПолучитьЭлементы(), "ПоказатьСтраницу", 1) = Неопределено Тогда
		Форма.Элементы.Отчет.Видимость = Ложь;
	ИначеЕсли Форма.Элементы.Отчет.Видимость = Ложь Тогда
		Форма.Элементы.Отчет.Видимость = Истина;
	КонецЕсли;
		
КонецПроцедуры








#Если НЕ ВебКлиент Тогда

Функция ПолучитьПутьВыгрузки(ПутьДляВыгрузки = Неопределено) Экспорт
	
	РазделительПутиОС = ПолучитьРазделительПути();
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Длг.Заголовок = НСтр("ru='Укажите каталог';uk= 'Вкажіть каталог'");
	Длг.Каталог   = ПутьДляВыгрузки;
	Если Длг.Выбрать() Тогда
		ПутьДляВыгрузки = Длг.Каталог+?(Прав(Длг.Каталог, 1) <> РазделительПутиОС, РазделительПутиОС, "");
		Возврат ПутьДляВыгрузки;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

#КонецЕсли

Процедура ОткрытьФормуПредварительногоПросмотра(Форма, ВидПечати, ПризнакНумеруемыхФорм, СписокПечатаемыхЛистов, ДополнительныеПараметры = Неопределено) Экспорт

	Если ПризнакНумеруемыхФорм = Неопределено Тогда
		ПризнакНумеруемыхФорм = Истина;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("СписокПечатаемыхЛистов", СписокПечатаемыхЛистов);
	ПараметрыФормы.Вставить("ВидПечати",              ВидПечати);
	ПараметрыФормы.Вставить("ЗаголовокФормы",         Форма.Заголовок);
	
	//Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
	//	Если ДополнительныеПараметры.Свойство("ЗаголовокФормы") Тогда
	//		Если ЗначениеЗаполнено(ДополнительныеПараметры.ЗаголовокФормы) Тогда
	//			ПараметрыФормы.Вставить("ЗаголовокФормы", ДополнительныеПараметры.ЗаголовокФормы);
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если ДополнительныеПараметры.Свойство("ЕстьВыходЗаГраницы") И ДополнительныеПараметры.ЕстьВыходЗаГраницы = Истина Тогда
	//		ПараметрыФормы.Вставить("ЕстьВыходЗаГраницы", Истина);
	//	КонецЕсли;
	//КонецЕсли;
	
	ПредПросмотр = ПолучитьОбщуюФормуПоИмени("ПечатьРегламентированныхОтчетов", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
	
	СписокПечатаемыхЛистов.Очистить();
	
	Если НЕ ПредПросмотр = Неопределено Тогда
		
		Если ВидПечати = "ПечататьСразу" Тогда
			
			ПредПросмотр.ПечататьСразу();
		
		Иначе
			
			ПредПросмотр.ЗакрыватьПриЗакрытииВладельца = Ложь;
		
			ПредПросмотр.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура АктивизироватьЯчейку(Форма, Ячейка) Экспорт
		
	Попытка
		СлужебныеДанные = Форма["СтруктураДанныхСлужебныеДанные"];
	Исключение
	    СлужебныеДанные = Новый Структура();
	КонецПопытки;
	
	Попытка
		ДанныеРаздела = Форма["СтруктураДанных" + Ячейка.Раздел];
	Исключение
	    ДанныеРаздела = Новый Структура();
	КонецПопытки;
	
	ИмяРаздела = Ячейка.Раздел;
	ИмяЯчейки  = Ячейка.ИмяЯчейки;
	Префикс    = Ячейка.СтрокаПП;
	Если ДанныеРаздела.Свойство(Префикс + ИмяЯчейки + "1") Тогда
		ИмяЯчейки = Префикс + ИмяЯчейки + "1";
	ИначеЕсли ДанныеРаздела.Свойство(Префикс + ИмяЯчейки + "_1") Тогда
		ИмяЯчейки = Префикс + ИмяЯчейки + "_1";
	ИначеЕсли ДанныеРаздела.Свойство(ИмяЯчейки + "1") Тогда
		ИмяЯчейки = ИмяЯчейки + "1";
	ИначеЕсли ДанныеРаздела.Свойство(ИмяЯчейки + "_1") Тогда
		ИмяЯчейки = ИмяЯчейки + "_1";
	ИначеЕсли ДанныеРаздела.Свойство(Префикс + ИмяЯчейки) Тогда
		ИмяЯчейки = Префикс + ИмяЯчейки;
	ИначеЕсли СлужебныеДанные.Свойство(ИмяЯчейки) Тогда
		ИмяРаздела = "СлужебныеДанные";
	КонецЕсли;

	ТекущаяСтраницаРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
	Если  НЕ ТекущаяСтраницаРаздела = Неопределено
		И НЕ ИмяРаздела = "СлужебныеДанные"
		И ЗначениеЗаполнено(Ячейка.Страница)
		И ТекущаяСтраницаРаздела.ПолучитьЭлементы().Количество() > 0 Тогда
		ТекущаяСтраницаРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущаяСтраницаРаздела.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", Число(Ячейка.Страница));
	КонецЕсли;	
	
	Если НЕ ТекущаяСтраницаРаздела = Неопределено Тогда
		Форма.СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРаздела.ПолучитьИдентификатор();
		Форма.РазделыОтчетаПриАктивизацииСтроки(Форма.Элементы.РазделыОтчета);		
	КонецЕсли;
	
	ПолеТД = Форма["ТабличныйДокумент"];
			
	НайденнаяОбласть = ПолеТД.Области.Найти(ИмяЯчейки);
		
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть = НайденнаяОбласть;
		
	КонецЕсли;
	
	Форма.ТекущийЭлемент = Форма.Элементы["ТабличныйДокумент"];
						
КонецПроцедуры

// Функция выводит на печать/предварительный просмотр регламентированные отчеты.
//
// Параметры:
//   СписокСсылокНаРеглОтчеты - СписокЗначений - список ссылок на регламентированные отчеты.
//   ВидПечати                - Строка - вид печати ("ПоказатьБланк" или "ПечататьСразу").
//
// Возвращаемое значение:
//   Булево - Ложь - если не был найден регл. отчет.
//
Функция НапечататьОтчеты(СписокСсылокНаРеглОтчеты, ВидПечати = "ПоказатьБланк") Экспорт
	
	Для Каждого Стр Из СписокСсылокНаРеглОтчеты Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Попытка
			
			ПредставлениеДокументаРеглОтч = "";
			
			Отчет = ИнициализацияОтчета(Стр.Значение, ПредставлениеДокументаРеглОтч);
			Если Отчет = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
						
			Отчет.Печать(ВидПечати, Истина);
			Отчет = Неопределено;
			
		Исключение
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Не удалось напечатать отчет! Вероятно, отчетом не предусмотрена возможность печати без открытия формы.';uk='%1. Не вдалося надрукувати звіт! Ймовірно, звітом не передбачена можливість друку без відкриття форми.'"), ПредставлениеДокументаРеглОтч);

			Сообщение.Сообщить();
            						
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

Функция ИнициализацияОтчета(Док, ПредставлениеДокументаРеглОтч = Неопределено) Экспорт
	
	ПараметрыФормыИзСохраненногоОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(Док, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыФормыИзСохраненногоОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыФормыИзСохраненногоОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          ПараметрыФормыИзСохраненногоОтчета.мСохраненныйДок);
	ПараметрыФормы.Вставить("мПериодичность",           ПараметрыФормыИзСохраненногоОтчета.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              ПараметрыФормыИзСохраненногоОтчета.Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	ВыбраннаяФорма = ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма;
	
	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыФормыИзСохраненногоОтчета.ИсточникОтчета, ВыбраннаяФорма);
		ВыбФормаОтчета = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.';uk='Застаріла редакція форми звіту не підтримується поточною версією конфігурації.'");
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка
		
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ВерсияФормыСовпадаетСВерсиейСохраненногоОтчета(Док, ВыбФормаОтчета.СтруктураРеквизитовФормы.мВерсияФормы) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
		
	Возврат ВыбФормаОтчета;
	
КонецФункции

Процедура ПослеЗаписиРегламентированногоОтчета(Форма) Экспорт
	
	Форма.СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено;
	
	Попытка
		Источник = Новый Структура(); 
		Источник.Вставить("Ссылка", Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
		Источник.Вставить("Организация", Форма.СтруктураРеквизитовФормы.Организация);
		Если Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = Истина Тогда
			Оповестить("Позиционирование в списке отчетов", Источник);
		Иначе
			Оповестить("Запись_РегламентированныйОтчет", Источник);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыбратьФормуОтчетаИзДействующегоСписка(Форма, ВыполняемоеОповещение = Неопределено, ДопТекстОписания = "") Экспорт

	// Получим таблицу соответствующих периоду форм.
	ТаблицаВыбораФормы = РегламентированнаяОтчетностьКлиентСервер.ПолучитьТаблицуОтчетовДействующихВВыбранныйПериод(Форма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мВыбраннаяФорма", Форма.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("ТаблицаВыбораФормы", ТаблицаВыбораФормы);
	
	ВыборФормыОтчета = ПолучитьОбщуюФормуПоИмени("ВыборФормыОтчета", ПараметрыФормы, Форма);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ДопТекстОписания", ДопТекстОписания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФормуОтчетаИзДействующегоСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ВыборФормыОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ВыборФормыОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ВыборФормыОтчета.Открыть();
	
КонецПроцедуры

Процедура ВыбратьФормуОтчетаИзДействующегоСпискаЗавершение(ВыбСтрока, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	Форма = ДополнительныеПараметры.Форма;
	Результат = Неопределено;
	
	Если Не ВыбСтрока = Неопределено Тогда
		
		СтрОтбора = Новый Структура;
		СтрОтбора.Вставить("ОписаниеОтчета", ВыбСтрока.ОписаниеОтчета);
		
		ВыбСтрока = Форма.мТаблицаФормОтчета.НайтиСтроки(СтрОтбора);
		
		Результат = ВыбСтрока[0].ФормаОтчета;
		
		Форма.ОписаниеНормативДок = ВыбСтрока[0].ОписаниеОтчета;
		
		СохрОписаниеНормативДок = Форма.ОписаниеНормативДок;
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ДопТекстОписания) Тогда
			Форма.ОписаниеНормативДок = ДополнительныеПараметры.ДопТекстОписания;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(СохрОписаниеНормативДок)
		   И ЗначениеЗаполнено(ДополнительныеПараметры.ДопТекстОписания) Тогда
			Форма.ОписаниеНормативДок = Форма.ОписаниеНормативДок + "
			|" + СохрОписаниеНормативДок + ".";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

Функция ВебБраузер() Экспорт
			
	СисИнфо = Новый СистемнаяИнформация;
	
	ВебБраузер = СисИнфо.ИнформацияПрограммыПросмотра;
	
	Если СтрЧислоВхождений(ВРег(ВебБраузер), "MSIE") > 0 
			ИЛИ СтрЧислоВхождений(ВРег(ВебБраузер), "TRIDENT") > 0 Тогда
		
		ВебБраузер = "MSIE";
		
	ИначеЕсли СтрЧислоВхождений(ВРег(ВебБраузер), "FIREFOX") > 0 Тогда
		
		ВебБраузер = "FIREFOX";
		
	ИначеЕсли СтрЧислоВхождений(ВРег(ВебБраузер), "CHROME") > 0 Тогда
		
		ВебБраузер = "CHROME";
		
	ИначеЕсли СтрЧислоВхождений(ВРег(ВебБраузер), "SAFARI") > 0 Тогда	
		
		ВебБраузер = "SAFARI";
		
	КонецЕсли;
		
	Возврат ВебБраузер;
	
КонецФункции

Процедура ВыгрузитьФайлы(ВыгружаемыеДанные) Экспорт 
	
	#Если НЕ ВебКлиент Тогда
		ПутьВыгрузки = ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
		
		#Если ВебКлиент Тогда
			Попытка
				ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки);
			Исключение
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки 
							   + """! Возможно, нет прав для записи в выбранный каталог,"
							   + " нет доступа к файлу, т. к. файл открыт в другой программе,"
							   + " недостаточно места на диске или не подключено расширение для работы с файлами.";
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), ТекстСообщения);
				Сообщение.Сообщить();
			КонецПопытки;
		#Иначе
			ДвоичныйФайл = ПолучитьИзВременногоХранилища(ФайлВыгрузки.АдресФайлаВыгрузки);
			Попытка
				ДвоичныйФайл.Записать(ПутьВыгрузки + ФайлВыгрузки.ИмяФайлаВыгрузки);
				ТекстСообщения = "Файл выгрузки регламентированного отчета """ + ФайлВыгрузки.ИмяФайлаВыгрузки + """ сохранен в каталог """ + ПутьВыгрузки + """.";
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), ТекстСообщения);
				Сообщение.Сообщить();
			Исключение
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки + """! Возможно, нет прав для записи в выбранный каталог, нет доступа к файлу, т. к. файл открыт в другой программе, недостаточно места на диске.";
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), ТекстСообщения);
				Сообщение.Сообщить();
			КонецПопытки;
		#КонецЕсли
		
	КонецЦикла;
КонецПроцедуры




// Процедура ищет окно по имени формы, если находит то активизирует его.
// Необходима при работе Веб-клиента для предотвращения дублирования открытых окон.
// Необходимость связана с некорректностью нахождения окон открытых форм 
// по Уникальности процедурой ОткрытьФорму() в Веб-клиенте.
//
// Параметры:
//   ИмяФормыДляПоиска - Строка - имя формы, открытое окно которой нужно найти.
//   ВызывающаяФорма - Форма - форма, окно которой будет пропущено при просмотре окон.
//							   Параметр необходим в случае, если процедура вызывается 
//							   из формы до ее открытия. Иногда при обращении к содержимому окна
//							   такой формы возникает ошибка.
//   Результат - Булево - возвращается Истина, если окно найдено,
//					      Ложь, если окно не найдено,
//						  Неопределено, если неверные параметры.
//
Процедура ВебКлиентНайтиАктивизироватьОкно(ИмяФормыДляПоиска, ВызывающаяФорма, Результат = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(ИмяФормыДляПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТипЗнч(ВызывающаяФорма) = Тип("ФормаКлиентскогоПриложения")) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытыеОкна = ПолучитьОкна();
	
	Для каждого ОткрытоеОкно Из ОткрытыеОкна Цикл
		
		// Обход ошибки платформы, при вызове из формы до открытия формы,
		// обращение к содержимому окна этой формы вызывает ошибку.
		// Поэтому переданная в качестве параметра вызывающая форма
		// позволяет обойти этот момент.
		Если ОткрытоеОкно = Неопределено ИЛИ ОткрытоеОкно = ВызывающаяФорма.Окно Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Содержимое = ОткрытоеОкно.Содержимое;
		
		Если Содержимое.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОсновнаяФорма = Содержимое[0];
		ИмяФормыОкна = ОсновнаяФорма.ИмяФормы;
		
		Если ИмяФормыОкна = ИмяФормыДляПоиска Тогда
			
			Результат = Истина;
			
			ЗаголовокОкна = ОткрытоеОкно.Заголовок;
			
			ВладелецФормы = ОсновнаяФорма.ВладелецФормы;
			Если ВладелецФормы <> Неопределено Тогда
				
				ВладелецФормы.Активизировать();
				
			КонецЕсли; 
			
			Оповестить(ЗаголовокОкна, "Активизировать");
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Ложь;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс взаимодействия с конфигурациями (библиотеками) - потребителями.


// Процедура открывает форму сохраненного регл. отчета.
//
// Параметры:
//   СсылкаНаСохрРеглОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный
//							 регламентированный отчет, форму которого необходимо открыть.
//   НеОтображатьПредупреждение - Булево - признак отображения предупреждения в форме регл. отчета.
//
// Пример:
//   ОткрытьФормуРеглОтчета(СсылкаНаСохрРеглОтчет, Истина);
//
Процедура ОткрытьФормуРеглОтчета(СсылкаНаСохрРеглОтчет, НеОтображатьПредупреждение = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                       СсылкаНаСохрРеглОтчет);
	ПараметрыФормы.Вставить("НеОтображатьПредупреждение", НеОтображатьПредупреждение);
	ПараметрыФормы.Вставить("ОткрытьФормуОтчета",         Истина);
	
	ОткрытьФорму("Документ.РегламентированныйОтчет.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

// Процедура открывает форму навигации по ошибкам выгрузки.
//
// Параметры:
//   СообщенияОбОшибках - Массив - массив структур, содержащий сообщения об ошибках.
//
Процедура ОткрытьФормуНавигацииПоОшибкамВыгрузки(СообщенияОбОшибках) Экспорт
	
	ТаблицаСообщенийСтруктура = Новый Структура("ТаблицаСообщений", СообщенияОбОшибках);
	
	ПараметрыФормы = Новый Структура("ВладелецТС", ТаблицаСообщенийСтруктура);
	
	Оповестить("ЗакрытьФормуНавигацииПоОшибкамВыгрузки");
	
	ОткрытьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции механизма расшифровки.

Процедура ОткрытьРасшифровкуОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьРасшифровкуОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С FREDO Звіт

// Подключить актуальный менеджер FREDO Звіт
//
Функция ПодключитьМенеджерЗвит1С(ВыводитьСообщенияОбОшибках = Истина) Экспорт
	
	ИсточникОтчета = "РегламентированныйОтчетМенеджерЗвит1С";
	
	Если глМенеджерЗвит1С <> Неопределено Тогда
		
			Возврат Истина;
		
	Иначе
		
		ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
		Если ПравоДоступаКОтчету = Ложь ИЛИ ПравоДоступаКОтчету = Неопределено Тогда
			
			Если ВыводитьСообщенияОбОшибках Тогда                                                                                                                            
				Сообщить(НСтр("ru='Недостаточно прав на использование модуля взаимодействия с ""FREDO Звіт""!';uk='Недостатньо прав на використання модуля взаємодії зі ""FREDO Звіт""!'"));
			КонецЕсли;			
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если глМенеджерЗвит1С = Неопределено Тогда
		
		// В режиме обновления подключение не выполняем
		Если РегламентированнаяОтчетностьВызовСервера.НеобходимоОбновлениеПараметровРаботыПрограммы() Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Ошибка = РегламентированнаяОтчетностьВызовСервера.ПроверитьМенеджер1С(ИсточникОтчета, ВыводитьСообщенияОбОшибках);
		
		Если НЕ Ошибка = Неопределено Тогда
			Возврат Ошибка;
		КонецЕсли;
	
		Попытка                                                  
			ВариантОткрытия = РегламентированнаяОтчетностьВызовСервера.ВариантОткрытияОтчета(ИсточникОтчета);
			глМенеджерЗвит1С = ПолучитьФорму(ВариантОткрытия + "." + ИсточникОтчета + ".Форма.Форма");
			
		Исключение
			Возврат Ложь;	
		КонецПопытки;			
 
		Если Не глМенеджерЗвит1С.Инициализация(ВыводитьСообщенияОбОшибках) Тогда		
			глМенеджерЗвит1С = Неопределено;
			Возврат Ложь;	
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
			Попытка
			    глМенеджерЗвит1С.ФлагОтладки = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

// Функция выполняет запуск  FREDO Звіт"
//
Функция ЗапуститьЗвит1С() Экспорт
	
	// Используем актуальный менеджер, учетем возможности поставки менеджера в виде внешней обработки
	// Выведем причины невозможности использования FREDO Звіт, в случае если менеджер не инициализирован
	Если Не ПодключитьМенеджерЗвит1С() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат глМенеджерЗвит1С.ЗапуститьЗвит1С(Истина);

КонецФункции


// Функция выполняет запуск запуск пункта меню "Выгрузка налоговых документов в FREDO Звіт"
//
Функция ОткрытьФормуВыгрузкиНалоговыхДокументов() Экспорт
	
	// Используем актуальный менеджер, учетем возможности поставки менеджера в виде внешней обработки
	// Выведем причины невозможности использования FREDO Звіт, в случае если менеджер не инициализирован
	Если Не ПодключитьМенеджерЗвит1С() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат глМенеджерЗвит1С.ОткрытьФормуВыгрузкиНалоговыхДокументов();

КонецФункции


// Функция выполняет запуск пункта меню "Проверка входящих налоговых документов в "FREDO Звіт"
//
Функция ОткрытьФормуПроверкиВходящихНалоговыхДокументов() Экспорт
	
	// Используем актуальный менеджер, учетем возможности поставки менеджера в виде внешней обработки
	// Выведем причины невозможности использования FREDO Звіт, в случае если менеджер не инициализирован
	Если Не ПодключитьМенеджерЗвит1С() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат глМенеджерЗвит1С.ОткрытьФормуПроверкиВходящихНалоговыхДокументов();
	
КонецФункции


Функция ОткрытьФормуЗагрузкиВходящихНалоговыхДокументов() Экспорт
	
	// Используем актуальный менеджер, учетем возможности поставки менеджера в виде внешней обработки
	// Выведем причины невозможности использования FREDO Звіт, в случае если менеджер не инициализирован
	Если Не ПодключитьМенеджерЗвит1С() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат глМенеджерЗвит1С.ОткрытьФормуЗагрузкиВходящихНалоговыхДокументов();
	
КонецФункции


// Функция проверяет возможность открытия дочерней формы из основной
//
// Параметры
//  ЭтаФорма  - Форма - основная форма отчета
//
// Возвращаемое значение:
//   Булево   - флаг возможности открытия дочерней формы
//
Процедура ПроверитьВозможностьОткрытияДочернейФормыРегламентиованногоОтчета(ЭтаФорма, ВыполняемоеОповещение) Экспорт	
	
	Перем МенеджерЗвит1С;
	
	// Не во всех конфигурациях использующих рег отчеты есть поддержка FREDO Звіт
	Попытка
		Выполнить("МенеджерЗвит1С = глМенеджерЗвит1С;");
	Исключение
	    МенеджерЗвит1С = Неопределено;
	КонецПопытки;
	
	Попытка
		ДатаНачалаИспользованияЗвит1С = РегламентированнаяОтчетностьВызовСервера.ПолучитьДатаНачалаИспользованияЗвит1С(ЭтаФорма.Организация);	
	Исключение
	    ДатаНачалаИспользованияЗвит1С = Неопределено
	КонецПопытки;

	Если МенеджерЗвит1С = Неопределено
	 ИЛИ Не ЗначениеЗаполнено(ДатаНачалаИспользованияЗвит1С) 
	 ИЛИ Не ЗначениеЗаполнено(ЭтаФорма.мДатаКонцаПериодаОтчета) 
	 ИЛИ НачалоДня(ЭтаФорма.мДатаКонцаПериодаОтчета) < ДатаНачалаИспользованияЗвит1С Тогда
	 
	 	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
		Возврат;

	КонецЕсли;
	
	ДатаСтрока        = Формат(ДатаНачалаИспользованияЗвит1С, "ДФ=dd.MM.yyyy");
	ОрганизацияСтрока = Строка(ЭтаФорма.Организация);
	
	ТекстВопроса = НСтр("ru='Внимание! Начиная с %1 для формирования регламентированных отчетов по организации ""%2"" используется ""FREDO Звіт"". 
                         |
                         |Прервать выполнение операции и запустить ""FREDO Звіт""?';uk= 'Увага! Починаючи з %1 для формування регламентованих звітів по організації ""%2"" використовується ""FREDO Звіт"".
                         |
                         |Перервати виконання операції і запустити ""FREDO Звіт""?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДатаСтрока, ОрганизацияСтрока);  

	ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьВозможностьОткрытияДочернейФормыРегламентиованногоОтчетаЗавершение", РегламентированнаяОтчетностьКлиент, Новый Структура("МенеджерЗвит1С, ЭтаФорма, ВыполняемоеОповещение", МенеджерЗвит1С, ЭтаФорма, ВыполняемоеОповещение)), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

Процедура ПроверитьВозможностьОткрытияДочернейФормыРегламентиованногоОтчетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    МенеджерЗвит1С 			= ДополнительныеПараметры.МенеджерЗвит1С;
    ЭтаФорма       			= ДополнительныеПараметры.ЭтаФорма;
	ВыполняемоеОповещение   = ДополнительныеПараметры.ВыполняемоеОповещение;
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
        Возврат;
		
    ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
        
        Если МенеджерЗвит1С.ЗапуститьЗвит1С(Истина) Тогда
            // Если запустили FREDO Звіт, форма нам больше не нужна
            ЭтаФорма.Закрыть();
        КонецЕсли;
        
    КонецЕсли;
    
    ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
    
КонецПроцедуры

Процедура ПередОткрытиемОсновнойФормыРаботыСОтчетностью(УникальныйИдентификаторФормы) Экспорт
	
	
КонецПроцедуры

#Область ЭДО

Функция ОткрытьФормуЗагрузкиВходящихПервичныхДокументов(ТипДокумента) Экспорт
	
	// Используем актуальный менеджер, учетем возможности поставки менеджера в виде внешней обработки
	// Выведем причины невозможности использования FREDO Звіт, в случае если менеджер не инициализирован
	Если Не ПодключитьМенеджерЗвит1С() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат глМенеджерЗвит1С.ОткрытьФормуЗагрузкиВходящихПервичныхДокументов(ТипДокумента);
	
КонецФункции

Функция ОткрытьФормуВыгрузкиПервичныхДокументов(ТипДокумента) Экспорт
	
	// Используем актуальный менеджер, учетем возможности поставки менеджера в виде внешней обработки
	// Выведем причины невозможности использования FREDO Звіт, в случае если менеджер не инициализирован
	Если Не ПодключитьМенеджерЗвит1С() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат глМенеджерЗвит1С.ОткрытьФормуВыгрузкиПервичныхДокументов(ТипДокумента);
	
КонецФункции

#КонецОбласти

Процедура ПередВыгрузкойРегламентированногоОтчета(ВыполняемоеОповещение, ДокументСсылка) Экспорт
	
	ПредставлениеДокументаРеглОтч = Неопределено;
	
	ПараметрыОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(ДокументСсылка, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мСохраненныйДок",          ДокументСсылка);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	ВыбраннаяФорма = ПараметрыОтчета.мВыбраннаяФорма;
	
	Отказ = Ложь;
	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыОтчета.ИсточникОтчета, ВыбраннаяФорма);
		ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.';uk='Застаріла редакція форми звіту не підтримується поточною версією конфігурації.'");
		Сообщение.Сообщить();
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Отказ);
		Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура ПередОтправкойРегламентированногоОтчета(ВыполняемоеОповещение, ДокументСсылка) Экспорт
	
	ПредставлениеДокументаРеглОтч = Неопределено;
	
	ПараметрыОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(ДокументСсылка, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мСохраненныйДок",          ДокументСсылка);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	ВыбраннаяФорма = ПараметрыОтчета.мВыбраннаяФорма;
	
	Отказ = Ложь;
	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыОтчета.ИсточникОтчета, ВыбраннаяФорма);
		ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.';uk='Застаріла редакція форми звіту не підтримується поточною версією конфігурації.'");
		Сообщение.Сообщить();
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Отказ);
		Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура ПередПечатьюРегламентированногоОтчета(ВыполняемоеОповещение, ДокументСсылка) Экспорт
	
	ПредставлениеДокументаРеглОтч = Неопределено;
	
	ПараметрыОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(ДокументСсылка, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мСохраненныйДок",          ДокументСсылка);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	ВыбраннаяФорма = ПараметрыОтчета.мВыбраннаяФорма;
	
	Отказ = Ложь;
	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыОтчета.ИсточникОтчета, ВыбраннаяФорма);
		ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.';uk='Застаріла редакція форми звіту не підтримується поточною версією конфігурації.'");
		Сообщение.Сообщить();
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Отказ);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура СпрятатьСсылкуУдалитьСтраницу(Форма) Экспорт 
	Если Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОблУдалитьСтраницу = Форма.ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = Форма.ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьТекущуюСтрокуВДеревеРазделов(Форма, НовыйUID) Экспорт
	UID_Пустой = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Если НовыйUID <> Неопределено Тогда
		НомСтр = РегламентированнаяОтчетностьКлиентСервер.НайтиИДВДереве(Форма.Разделы.ПолучитьЭлементы(), НовыйUID, UID_Пустой);
		Если НомСтр <> Неопределено Тогда
			Форма.Элементы.Разделы.ТекущаяСтрока = НомСтр;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Процедура УдалитьВременныйКаталогШаблонов(ВремКаталог)
	
	Попытка
		УдалитьФайлы(ВремКаталог);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива)
	
	Попытка
		УдалитьФайлы(ВремФайлДистрибутива);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция СформироватьСтруктуруПараметровФайлаВыгрузкиНаКлиенте(ФайлВыгрузки)

	Возврат РегламентированнаяОтчетностьКлиентСервер.СформироватьСтруктуруПараметровФайлаВыгрузки(ФайлВыгрузки);

КонецФункции

Процедура СформироватьТекстВыгрузки(Форма, ВремФайл, ДляЦелейФормированияМЧБ, ПроверкаБлокировкиФормы = Ложь, ФайлВыгрузкиВоВременномХранилище = Неопределено, ВыполняемоеОповещение = Неопределено)
		
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , Форма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн, , , ВремФайл, ДляЦелейФормированияМЧБ, ПроверкаБлокировкиФормы, , , , , ФайлВыгрузкиВоВременномХранилище, , ВыполняемоеОповещение);
	
КонецПроцедуры

Функция ПолучитьПредставлениеРазделаРегОтчета(Форма, ИмяСтраницы)
	Для Каждого СтрокаУровня1 Из Форма.мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		Если ИмяСтраницы = СтрокаУровня1.ИмяСтраницы Тогда
			Попытка
				Результат = СтрокаУровня1.Представление;
			Исключение
				Результат = ИмяСтраницы;
			КонецПопытки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ВывестиСостояние(ТекстСообщения, Прогресс = Неопределено, Пояснение = Неопределено, Картинка = Неопределено) Экспорт
	
	// Если запущен бублик, то состояние не должно выводиться
	//ДлительнаяОтправкаКлиент.ВывестиСостояние(ТекстСообщения, Картинка); // Универсальная
	
КонецПроцедуры


#КонецОбласти