////////////////////////////////////////////////////////////////////////////////
// НАЛОГООБЛОЖЕНИЕ НДС

// Возвращает, является ли организация плательщиком НДС
//
// Параметры:
// 	Организация - СправочникСсылка.Организации
// 	Дата - Дата - дата получения сведений
//
// Возвращаемое значение:
// 	Булево -  Истина - Организация плательщик НДС, Ложь - Организация неплательщик НДС
//
Функция ОрганизацияПлательщикНДС(Организация, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат НДСОбщегоНазначенияПовтИсп.ОрганизацияПлательщикНДС(Организация, КонецМесяца(Дата));
	Иначе
		Возврат Истина;
	КонецЕсли; 
КонецФункции // ОрганизацияПлательщикНДС()

// Возвращает, является ли поставщик (организация или контрагент) плательщиком НДС
//
// Параметры:
// 	ОрганизацияКонтрагент - СправочникСсылка.Организации или СправочникСсылка.Контрагент
// 	Дата - Дата - дата получения, актуальна для Организации
//
// Возвращаемое значение:
// 	Булево -  Истина - плательщик НДС, Ложь - неплательщик НДС
//
Функция ОрганизацияКонтрагентПлательщикНДС(ОрганизацияКонтрагент, Дата = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Организации") Тогда
		Плательщик = ОрганизацияПлательщикНДС(ОрганизацияКонтрагент, Дата);
	ИначеЕсли ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Плательщик = УчетНДСУП.КонтрагентПлательщикНДС(ОрганизацияКонтрагент, Дата);
	Иначе
		Плательщик = Ложь;
	КонецЕсли;
	
	Возврат Плательщик;
	
КонецФункции // ОрганизацияКонтрагентПлательщикНДС()

// Возвращает, является ли поставщик (организация или контрагент) неплательщиком НДС
//
// Параметры:
// 	Организация - СправочникСсылка.Организации
// 	Контрагент - СправочникСсылка.Контрагент
// 	Дата - Дата - дата получения, актуальна для Организации
// 	ЭтоПродажа - Булево -  Истина - вызов с документов продажи, Ложь - вызов с документов закупки
//
// Возвращаемое значение:
// ПеречислениеСсылка.ТипыНалогообложенияНДС
// Возвращаемое значение:
// 	Булево -  Истина - неплательщик НДС, Ложь - плательщик НДС
//
Функция ПоставщикНеплательщикНДС(Организация, Контрагент, Дата = Неопределено, ЭтоПродажа = Истина) Экспорт	
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ЭтоПродажа Тогда
		Если (НЕ ЗначениеЗаполнено(Организация)) ИЛИ ОрганизацияКонтрагентПлательщикНДС(Организация, Дата) Тогда
			Неплательщик = Ложь;
		Иначе
			Неплательщик = Истина;
		КонецЕсли;
	Иначе
		Если (НЕ ЗначениеЗаполнено(Контрагент)) ИЛИ ОрганизацияКонтрагентПлательщикНДС(Контрагент, Дата) Тогда
			Неплательщик = Ложь;
		Иначе
			Неплательщик = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Неплательщик;
	
КонецФункции // ПоставщикНеплательщикНДС()

// Возвращает налогообложение НДС
//
// Параметры:
// 	Организация - СправочникСсылка.Организации
// 	Контрагент - СправочникСсылка.Контрагент
// 	Дата - Дата - дата получения, актуальна для Организации
// 	ЭтоПродажа - Булево -  Истина - вызов с документов продажи, Ложь - вызов с документов закупки
//
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыНалогообложенияНДС - налогообложение НДС
//
Функция ПолучитьНалогообложениеНДС(Организация, Контрагент, Дата = Неопределено, ЭтоПродажа = Истина, ПоставщикНеплательщик = Неопределено) Экспорт	
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ПоставщикНеплательщик = Неопределено Тогда
		Неплательщик = ПоставщикНеплательщикНДС(Организация, Контрагент, Дата, ЭтоПродажа);
	Иначе
		Неплательщик = ПоставщикНеплательщик;
	КонецЕсли;
			
	Если Неплательщик Тогда
		Налогообложение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		Налогообложение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	Возврат Налогообложение;
	
КонецФункции // ПолучитьНалогообложениеНДС()

// Возвращает налоговое назначение НДС
//
// Параметры:
// Организация - СправочникСсылка.Организации
// Контрагент - СправочникСсылка.Контрагент
// 	Дата - Дата - дата получения, актуальна для Организации
// 	ЭтоПродажа - Булево -  Истина - вызов с документов продажи, Ложь - вызов с документов закупки
//
// Возвращаемое значение:
// СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат 
//
Функция ПолучитьНалоговоеНазначениеНДС(Организация, Контрагент, Дата = Неопределено, ЭтоПродажа = Истина, ПоставщикНеплательщик = Неопределено) Экспорт	
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	НалогообложениеНДС = ПолучитьНалогообложениеНДС(Организация, Контрагент, Дата, ЭтоПродажа, ПоставщикНеплательщик);
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
	Иначе
		НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
	КонецЕсли;
	
	Возврат НалоговоеНазначение;
	
КонецФункции // ПолучитьНалоговоеНазначениеНДС()

// Устанавливает значение свойства элементов формы, если находит элемент на форме
//
// Параметры
//  ЭлементыФормы       - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  МассивИменЭлементов - Массив - массив имен искомых элементов.
//  ИмяСвойства         - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение            - Произвольный - значение, которое будет установлено
//
Функция ПолучитьИОбработатьДоступностьНалогообложениеНДС(Организация, Контрагент, Дата = Неопределено, ЭтоПродажа = Истина, ЭлементыФормы, МассивИменЭлементов) Экспорт
	
	Неплательщик = ПоставщикНеплательщикНДС(Организация, Контрагент, Дата, ЭтоПродажа);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭлементыФормы, МассивИменЭлементов, "Доступность", НЕ Неплательщик);
	
	Возврат ПолучитьНалогообложениеНДС(Организация, Контрагент, Дата, ЭтоПродажа, Неплательщик);
	
КонецФункции // ПолучитьДоступностьНалогобложенияНДСУкр()

Функция НужноОбработатьНовоеНалогообложениеНДС(СтароеНалогообложение, НовоеНалогообложение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтароеНалогообложение) Тогда
		НужноИзменить = Истина;
	ИначеЕсли СтароеНалогообложение = НовоеНалогообложение Тогда
		НужноИзменить = Ложь;
	ИначеЕсли НовоеНалогообложение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
		ИЛИ НовоеНалогообложение = Перечисления.ТипыНалогообложенияНДС.ПродажаОсвобожденаОтНДС Тогда
		НужноИзменить = Ложь;
	Иначе
		НужноИзменить = Истина;
	КонецЕсли;
	
	Возврат НужноИзменить;
	
КонецФункции // НужноОбработатьНовоеНалогообложениеНДС()

Процедура ПроверитьКорректностьСтавкиНДС(Документ, ТабличнаяЧасть, НалогообложениеНДС, СтруктураДействий = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(НалогообложениеНДС) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействий = Неопределено Тогда
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Документ);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, Документ.Дата));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
	КонецЕсли;
	
	КэшированныеЗначения = Неопределено;

	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС)
			ИЛИ НЕ НДСОбщегоНазначенияПовтИсп.СтавкаНДССоответствуетНалогообложению(СтрокаТЧ.СтавкаНДС, НалогообложениеНДС) Тогда
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает валюту регламентированного учета
// Если переданная в качестве параметра валюта уже заполнена - возвращает ее.
// Если валюта не передана в качестве параметра или передан пустой,
// валюту РУ. Если валюта РУ не заполнена - возвращает пустую ссылку на валюту
//
// Параметры:
// Валюта - СправочникСсылка.Валюты - Валюта, которую нужно заполнить
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты
//
Функция ПолучитьВалютуРегламентированногоУчета(Знач Валюта = Неопределено) Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	
КонецФункции // ПолучитьВалютуУправленческогоУчета()

Процедура ЗаполнитьСписокВыбораСпецРежимаНалогообложения(СписокВыбора) Экспорт
	
	СписокВыбора.Добавить(0, "- спец. режим не застосовується");
	СписокВыбора.Добавить(2, "2-(до 01.04.2023) платники, включені до реєстру отримувачів бюджетної дотації. " +
	                         "До 01.03.2017: сільськогосподарські підприємства, які застосовують " +
	                         "спеціальний режим оподаткування діяльності у сфері сільського та " +
	                         "лісового господарства, а також рибальства відповідно до статті 209 Кодексу");
							  
	СписокВыбора.Добавить(3, "3-(до 01.01.2017) сільськогосподарські підприємства усіх форм власності, " +
	                         "які відповідають критеріям, визначеним статтею 209 Кодексу, " +
	                         "але які не обрали спеціальний режим оподаткування " +
	                         "діяльності у сфері сільського, лісового господарства та рибальства " +
	                         "та реалізують молоко, худобу, птицю, вовну власного виробництва, а " +
	                         "також молочні продукти, молочну сировину та м'ясопродукти, " +
	                         "вироблені у власних переробних цехах");
								
	СписокВыбора.Добавить(4, "4-(до 01.01.2015) переробні підприємства усіх форм власності, які згідно з " +
	                         "пунктом 1 підрозділу 2 розділу XX Кодексу за " +
	                         "реалізовані ними молоко, молочну сировину та молочні продукти, " + 
	                         "м'ясо та м'ясопродукти, іншу продукцію переробних тварин, " +
	                         "закуплених у живій вазі (шкури, субпродукти, м'ясо-кісткове " +
	                         "борошно), у повному обсязі спрямовують суми податку на додану " +
	                         "вартість до спеціального фонду державного бюджету");
							 
	СписокВыбора.Добавить(5, "5-складання податкової накладної оператором інвестору "+
	                         "за багатосторонньою угодою про розподіл продукції");

	СписокВыбора.Добавить(6, "6-складання податкової накладної для операцій з постачання товарів, " +
	                         "базою оподаткування для яких встановлено максимальні роздрібні ціни");
	СписокВыбора.Добавить(7, "7-складання податкової накладної за операцією з вивезення за межі митної території України " +
							 "у митному режимі експорту товарів, до яких застосовано режим експортного забезпечення, " +
							 "платниками податку на додану вартість, які відповідають вимогам, визначеним підпунктом «а» " +
							 "підпункту 97.2 пункту 97 підрозділу 2 розділу ХХ «Перехідні положення» Податкового кодексу України");

КонецПроцедуры

Процедура УстановитьВидимостьНалоговыхНазначений(Форма, ИмяРеквизитаОрганизация = "Организация") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектДата                  = Неопределено;
	ОбъектОрганизация           = Неопределено;
	
	
	Если Форма.Объект.Свойство("Дата", ОбъектДата) Тогда
		// 		
	Иначе
		ОбъектДата = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	Если Форма.Объект.Свойство(ИмяРеквизитаОрганизация, ОбъектОрганизация) Тогда
		ОрганизацияПлательщикНДС = ОрганизацияПлательщикНДС(ОбъектОрганизация, ОбъектДата);
	Иначе
		ОрганизацияПлательщикНДС = Неопределено;
    КонецЕсли;	
    
    Если ОбъектОрганизация <> Неопределено Тогда
        ИспользоватьРаздельныйУчетПоНалогообложению = НастройкиНалоговУчетныхПолитикПовтИсп.РаздельныйУчетТоваровПоНалогообложениюНДС(ОбъектОрганизация, ОбъектДата);
    	Если НЕ ИспользоватьРаздельныйУчетПоНалогообложению Тогда
    		Форма.ВидимостьНалоговыхНазначений = Ложь;	
    		Возврат;
        КонецЕсли; 
    КонецЕсли; 
    
	
	ВидимостьНалоговыхНазначений = (ОрганизацияПлательщикНДС <> Неопределено И ОрганизацияПлательщикНДС);
					  
	Форма.ВидимостьНалоговыхНазначений = ВидимостьНалоговыхНазначений;
	
КонецПроцедуры // УстановитьВидимостьНалоговыхНазначений

// Устанавливаем условное оформление для НалоговоеНазначение 
//
// Параметры:
// 		Форма - Форма - Содержит данную форму 
Процедура УстановитьУсловноеОформлениеНалоговыхНазначений(
	Форма,
	ИмяПоляВводаНалоговогоНазначения = "ТоварыНалоговоеНазначение",
	ПутьКПолюОтбора = "Объект.Товары.НалоговоеНазначение"
	) Экспорт
														   
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();				  
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаНалоговогоНазначения].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидимостьНалоговыхНазначений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Далее для видимых и незаполненных налоговых назначений отображаем текст <Авто>
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаНалоговогоНазначения].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Авто>';uk= '<Авто>'"));
	
КонецПроцедуры // УстановитьУсловноеОформлениеНалоговыхНазначений

Процедура ЗаполнитьСписокВыбораНалоговыхНазначенийПоступления(СписокВыбора, ЭтоКомиссия) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая);
	СписокВыбора.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность);
	СписокВыбора.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
	Если НЕ ЭтоКомиссия Тогда
		СписокВыбора.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораНалоговыхНазначенийВыпуска(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая);
	СписокВыбора.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность);
	СписокВыбора.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
	
КонецПроцедуры // ЗаполнитьСписокВыбораНалоговыхНазначенийВыпуска

Процедура УстановитьВидимостьСуммаНДСПропорционально(Форма, ЭтоКомиссия, ЭтоПоступлениеВВалюте = Ложь) Экспорт
	
	Форма.ВидимостьСуммаНДСПропорционально = Форма.ВидимостьНалоговыхНазначений И (НЕ ЭтоКомиссия) И (НЕ ЭтоПоступлениеВВалюте);
	
КонецПроцедуры // УстановитьВидимостьСуммаНДСПропорционально

// Устанавливаем условное оформление для СуммаНДСПропорционально 
//
// Параметры:
// 		Форма - Форма - Содержит данную форму 
Процедура УстановитьУсловноеОформлениеСуммаНДСПропорционально(
	Форма,
	ИмяПоляВводаСуммаНДСПропорционально = "ТоварыСуммаНДСПропорционально",
	ПутьКПолюОтбора = "Объект.Товары.НалоговоеНазначение",
	УстанавливатьВидимость = Истина
	) Экспорт
														   
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВводаСуммаНДСПропорционально);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для пропорц. налогового назначения>';uk='<для пропорц. податкового призначення>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	Если УстанавливатьВидимость Тогда
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();				  
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВводаСуммаНДСПропорционально);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидимостьСуммаНДСПропорционально");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	КонецЕсли; 
	
КонецПроцедуры // УстановитьУсловноеОформлениеСуммаНДСПропорционально

Функция ПолучитьНалоговоеНазначениеПоСтавкеНДС(Организация, Дата, СтавкаНДС) Экспорт
	
    ИспользоватьРаздельныйУчетПоНалогообложению = НастройкиНалоговУчетныхПолитикПовтИсп.РаздельныйУчетТоваровПоНалогообложениюНДС(Организация, Дата);
	ОрганизацияПлательщикНДС = Справочники.Организации.ПлательщикНДС(Организация, Дата);
	ОрганизацияНалоговоеНазначениеНДС = Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата);
	
	Результат = Неопределено;
	
	Если НЕ ИспользоватьРаздельныйУчетПоНалогообложению Тогда
		Результат = ОрганизацияНалоговоеНазначениеНДС;	
	Иначе	
		Если НЕ ОрганизацияПлательщикНДС Тогда	
			Результат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		Иначе
			Если УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС) = 0 Тогда 	
				Результат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;	
			Иначе
				Результат = ОрганизацияНалоговоеНазначениеНДС;
			КонецЕсли; 			
		КонецЕсли; 		
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // ПолучитьНалоговоеНазначениеПоСтавкеНДС()


// Проверяет заполнение налоговых назначений в табличной части документов поступления.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект.ПоступлениеТоваровИУслуг - Проверяемый документ
//	ИмяТабличнойЧасти - Строка - Имя табличной части товаров
//	Отказ - Булево - Признак наличия ошибок
//
Процедура ПроверитьЗаполнениеНалоговыхНазначенийВТабличнойЧастиПоступление(ДокументОбъект, ИмяТабличнойЧасти = "Товары", Отказ) Экспорт
	
	//  Пропорц. обл. НДС может быть указано только для услуг, и только если статья расходов не распределяется на себестоимость
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаТовары.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
    |	(ТаблицаТовары.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|	И ТаблицаТовары.НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально)";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить(, "СтатьяРасходов, НалоговоеНазначение, НомерСтроки"));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТекстОшибкиШаблон = НСтр("ru='В строке %1 списка %2 налог. назначение Пропорц. обл. НДС может быть указано только для услуг, и только если статья расходов не распределяется на себестоимость';uk='У рядку %1 списку %2 податок. призначення Пропорц. опод. ПДВ може бути зазначено лише для послуг, і тільки якщо стаття витрат не розподіляється на собівартість'");
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиШаблон, Выборка.НомерСтроки, ИмяТабличнойЧасти);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "НалоговоеНазначение"),
				,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// соответствие ставки НДС налоговому назначению
	
КонецПроцедуры // ПроверитьЗаполнениеНалоговыхНазначенийВТабличнойЧастиПоступление

Функция ПодготовитьТаблицуНачальныхГраниц() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("КлючАналитики", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам"));
	Результат.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьТаблицуНачальныхГраниц(НачальныеГраницы, НачалоПериода, АналитикиРасчета) Экспорт
	
	Для каждого Аналитика из АналитикиРасчета Цикл
		
		НайденнаяСтрока = НачальныеГраницы.Найти(Аналитика, "КлючАналитики");
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = НачальныеГраницы.Добавить();
			
			НоваяСтрока.КлючАналитики = Аналитика;
			НоваяСтрока.Период = НачалоПериода;
			
		ИначеЕсли НайденнаяСтрока.Период > НачалоПериода Тогда
			
			НайденнаяСтрока.Период = НачалоПериода;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуНачальныхГраницПоТаблицеИзмененийРасчетов(НачальныеГраницы, МенеджерВременыхТаблиц, ИмяТаблицыИзменений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременыхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаИзменений.Период) КАК Период,
	|	ТаблицаИзменений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	" + ИмяТаблицыИзменений + " КАК ТаблицаИзменений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.АналитикаУчетаПоПартнерам";
	
	СтрокаАналитики = Запрос.Выполнить().Выбрать();
	
	Пока СтрокаАналитики.Следующий() Цикл
		
		НайденнаяСтрока = НачальныеГраницы.Найти(СтрокаАналитики.АналитикаУчетаПоПартнерам, "КлючАналитики");
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = НачальныеГраницы.Добавить();
			
			НоваяСтрока.КлючАналитики = СтрокаАналитики.АналитикаУчетаПоПартнерам;
			НоваяСтрока.Период = СтрокаАналитики.Период;
			
		ИначеЕсли НайденнаяСтрока.Период > СтрокаАналитики.Период Тогда
			
			НайденнаяСтрока.Период = СтрокаАналитики.Период;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

Функция ПечатнаяФорма2017(ДатаДокумента, ОрганизацияДокумента) Экспорт
	
	ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = ПолучитьНастройкуВыгрузкиПечатиНалоговогоДокумента(ОрганизацияДокумента);
	
	Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента Тогда
		Возврат (ДатаДокумента >= '2017-03-16');
	Иначе
		Возврат (ТекущаяДата() >= '2017-03-16');
	КонецЕсли;
	
КонецФункции

Функция ПечатнаяФормаПоПриказу1307(ДатаДокумента, ОрганизацияДокумента) Экспорт
	
	Если ТекущаяДата() >= НДСОбщегоНазначенияПовтИсп.ДатаВступленияВСилуПриказа1307() Тогда
		ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = ПолучитьНастройкуВыгрузкиПечатиНалоговогоДокумента(ОрганизацияДокумента);
		Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь Тогда
			Возврат Истина;
		Иначе
			Возврат (ДатаДокумента >= НДСОбщегоНазначенияПовтИсп.ДатаВступленияВСилуПриказа1307());
		КонецЕсли;
	Иначе
		Возврат (ДатаДокумента >= НДСОбщегоНазначенияПовтИсп.ДатаВступленияВСилуПриказа1307());
	КонецЕсли;	

КонецФункции // ПечатнаяФормаПоПриказу1307()

Функция ДатаВыгрузкиПоПриказу1307(ДатаДокумента, ОрганизацияДокумента) Экспорт
	
	Если ТекущаяДата() >= НДСОбщегоНазначенияПовтИсп.ДатаВступленияВСилуПриказа1307() Тогда
		ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь;
		НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(
			ТекущаяДата(), 
			Новый Структура("Организация", ОрганизацияДокумента)
		);
		Если НастройкиПечати.Количество() > 0 Тогда
			ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = НастройкиПечати[0].ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента;
		КонецЕсли;
		Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь Тогда
			Возврат ТекущаяДата();
		Иначе
			Возврат ДатаДокумента;
		КонецЕсли;
	Иначе
		Возврат ДатаДокумента;
	КонецЕсли;	

КонецФункции // ДатаВыгрузкиПоПриказу1307()

Функция ПолучитьНастройкуВыгрузкиПечатиНалоговогоДокумента(Организация)
	
	ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь;
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(
		ТекущаяДата(), 
		Новый Структура("Организация", Организация)
	);
	Если НастройкиПечати.Количество() > 0 Тогда
		ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = НастройкиПечати[0].ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента;
	КонецЕсли;
	
	Возврат ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента;
	
КонецФункции

Функция ПечатнаяФорма2018(ДатаДокумента, ОрганизацияДокумента) Экспорт
	
	ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = ПолучитьНастройкуВыгрузкиПечатиНалоговогоДокумента(ОрганизацияДокумента);
	
	Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента Тогда
		Возврат (ДатаДокумента >= '2018-12-01');
	Иначе
		Возврат (ТекущаяДата() >= '2018-12-01');
	КонецЕсли;
	
КонецФункции

Функция ПечатнаяФорма2021Мес3(ДатаДокумента, ОрганизацияДокумента) Экспорт
	
	ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = ПолучитьНастройкуВыгрузкиПечатиНалоговогоДокумента(ОрганизацияДокумента);
	
	Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента Тогда
		Возврат (ДатаДокумента >= '2021-03-01');
	Иначе
		Возврат (ТекущаяДата() >= '2021-03-01');
	КонецЕсли;
	
КонецФункции

Функция КодИсточникаНалоговогоНомера(ЗНАЧ НалоговыйНомер, ПлательщикЮрлицо) Экспорт
	
	НалоговыйНомер = СокрЛП(НалоговыйНомер);
	ДлинаНомера = СтрДлина(НалоговыйНомер);
	
	Результат = "";
	
	Если ДлинаНомера > 0 Тогда
		
		Если ПлательщикЮрлицо Тогда
			
			Если ДлинаНомера = 9 Тогда
				//спецплательщик
				Результат = 3;
			ИначеЕсли ДлинаНомера = 8 Тогда
				//ЕДРПОУ
				Результат = 1;
			КонецЕсли;
			
		Иначе
			
			Если ДлинаНомера = 10 Тогда
				//ДРФО
				Результат = 2;
			Иначе
				//паспорт
				Результат = 4;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПечатнаяФорма2022(ДатаДокумента, ОрганизацияДокумента) Экспорт
	
	ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = ПолучитьНастройкуВыгрузкиПечатиНалоговогоДокумента(ОрганизацияДокумента);
	
	Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента Тогда
		Возврат (ДатаДокумента >= '2022-03-01');
	Иначе
		Возврат (ТекущаяДата() >= '2022-03-01');
	КонецЕсли;
	
КонецФункции

Функция ПечатнаяФорма2023(ДатаДокумента, ОрганизацияДокумента) Экспорт
	
	ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = ПолучитьНастройкуВыгрузкиПечатиНалоговогоДокумента(ОрганизацияДокумента);

	Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента Тогда
		Возврат (ДатаДокумента >= '2023-04-01');
	Иначе
		Возврат (ТекущаяДата() >= '2023-04-01');
	КонецЕсли;
	
КонецФункции

Функция ПечатнаяФорма2023Мес7(ДатаДокумента, ОрганизацияДокумента) Экспорт
	
	ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = ПолучитьНастройкуВыгрузкиПечатиНалоговогоДокумента(ОрганизацияДокумента);
	
	ДатаНачалаИспользованияФормыНН15 = РегистрыСведений.НастройкиЗаконодательныхИзменений.ЗначениеНастройки("ДатаНачалаИспользованияФормыНН15");

	Если Не ЗначениеЗаполнено(ДатаНачалаИспользованияФормыНН15) Тогда
		Возврат Ложь;
	ИначеЕсли ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента Тогда
		Возврат (ДатаДокумента >= ДатаНачалаИспользованияФормыНН15);
	Иначе
		Возврат (ТекущаяДата() >= ДатаНачалаИспользованияФормыНН15);
	КонецЕсли;
	
КонецФункции

Функция ПечатнаяФорма2024(ДатаДокумента, ОрганизацияДокумента) Экспорт
	
	ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = ПолучитьНастройкуВыгрузкиПечатиНалоговогоДокумента(ОрганизацияДокумента);
	
	Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента Тогда
		Возврат (ДатаДокумента >= '2024-10-01');
	Иначе
		Возврат (ТекущаяДата() >= '2024-10-01');
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСписокВыбораКодПризнакаСводной(СписокВыбора) Экспорт
	
	СписокВыбора.Добавить(0, "- не є зведеною накладною");
	СписокВыбора.Добавить(1, "1 - відповідно до пункту 198.5 статті 198 ПКУ (умовний продаж)");
	СписокВыбора.Добавить(2, "2 - відповідно до пункту 199.1 статті 199 ПКУ (частковий умовний продаж)");
	СписокВыбора.Добавить(3, "3 - з особливостями заповнення п. 15 Порядку (перевищення бази над ціною поставки)");
	СписокВыбора.Добавить(4, "4 - з особливостями заповнення п. 19 Порядку (постачання що має безперервний або ритмічний характер)");
	
КонецПроцедуры


#Область ПроцедурыОбновления

Процедура ПеренестиГраницыАктуальностиФормированияНалоговыхДокументовВЗадания() Экспорт
	
	ИмяРегистраЗаданий = "ЗаданияКФормированиюИсходящихНалоговыхДокументов";
	ИмяКонстанты = "НомерЗаданияКФормированиюИсходящихНалоговыхДокументов";
	
	НомерДляУстановки = 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ФормированиеИсходящихНалоговыхДокументов.АналитикаУчетаПоПартнерам, ФормированиеИсходящихНалоговыхДокументовГраницы.АналитикаУчетаПоПартнерам) КАК АналитикаУчетаПоПартнерам,
	|	МИНИМУМ(ЕСТЬNULL(ФормированиеИсходящихНалоговыхДокументов.Период, ФормированиеИсходящихНалоговыхДокументовГраницы.Период)) КАК Период
	|ПОМЕСТИТЬ ГраницыФормированияНН
	|ИЗ
	|	Последовательность.УдалитьФормированиеИсходящихНалоговыхДокументов КАК ФормированиеИсходящихНалоговыхДокументов
	|		ПОЛНОЕ СОЕДИНЕНИЕ Последовательность.УдалитьФормированиеИсходящихНалоговыхДокументов.Границы КАК ФормированиеИсходящихНалоговыхДокументовГраницы
	|		ПО ФормированиеИсходящихНалоговыхДокументов.АналитикаУчетаПоПартнерам = ФормированиеИсходящихНалоговыхДокументовГраницы.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	(ФормированиеИсходящихНалоговыхДокументов.АналитикаУчетаПоПартнерам ЕСТЬ НЕ NULL 
	|			ИЛИ ФормированиеИсходящихНалоговыхДокументовГраницы.АналитикаУчетаПоПартнерам ЕСТЬ НЕ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ФормированиеИсходящихНалоговыхДокументов.АналитикаУчетаПоПартнерам, ФормированиеИсходящихНалоговыхДокументовГраницы.АналитикаУчетаПоПартнерам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ГраницыФормированияНН.Период, ДЕНЬ) КАК День,
	|	&НомерЗадания КАК НомерЗадания,
	|	ГраницыФормированияНН.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	1 КАК КодОтслеживаемогоРегистра
	|ИЗ
	|	ГраницыФормированияНН КАК ГраницыФормированияНН
	|ГДЕ
	|	НЕ ГраницыФормированияНН.Период ЕСТЬ NULL 
	|	И НЕ ГраницыФормированияНН.АналитикаУчетаПоПартнерам ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ГраницыФормированияНН.Период, ДЕНЬ),
	|	&НомерЗадания,
	|	ГраницыФормированияНН.АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	2
	|ИЗ
	|	ГраницыФормированияНН КАК ГраницыФормированияНН
	|ГДЕ
	|	НЕ ГраницыФормированияНН.Период ЕСТЬ NULL 
	|	И НЕ ГраницыФормированияНН.АналитикаУчетаПоПартнерам ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГраницыФормированияНН";
	
	Запрос.УстановитьПараметр("НомерЗадания", НомерДляУстановки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа."+ИмяКонстанты);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	
	Константы[ИмяКонстанты].Установить(НомерДляУстановки);
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.АналитикаУчетаПоПартнерам) Тогда
			Продолжить;
		КонецЕсли;
		Набор = РегистрыСведений[ИмяРегистраЗаданий].СоздатьНаборЗаписей();
		Набор.Отбор.День.Установить(Выборка.День);
		Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		Набор.Отбор.АналитикаУчетаПоПартнерам.Установить(Выборка.АналитикаУчетаПоПартнерам);
		Набор.Отбор.ОбъектРасчетов.Установить(Выборка.ОбъектРасчетов);
		Набор.Отбор.Документ.Установить(Выборка.Документ);
		Набор.Отбор.КодОтслеживаемогоРегистра.Установить(Выборка.КодОтслеживаемогоРегистра);
		СтрокаНабора = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		Набор.Записать(Истина);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьКодНоменклатурыПоКлассификаторуВНалоговыхДокументах() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НалоговаяНакладнаяТовары.Ссылка
	|ИЗ
	|	Документ.НалоговаяНакладная.Товары КАК НалоговаяНакладнаяТовары
	|ГДЕ
	|	НалоговаяНакладнаяТовары.Ссылка.Дата >= &Дата
	|	И НЕ (НалоговаяНакладнаяТовары.НомерГТД = &ПустойНомерГТД)
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговаяНакладнаяТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Приложение2КНалоговойНакладнойТовары.Ссылка
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.Товары КАК Приложение2КНалоговойНакладнойТовары
	|ГДЕ
	|	Приложение2КНалоговойНакладнойТовары.Ссылка.Дата >= &Дата
	|	И НЕ (Приложение2КНалоговойНакладнойТовары.НомерГТД = &ПустойНомерГТД)
	|
	|СГРУППИРОВАТЬ ПО
	|	Приложение2КНалоговойНакладнойТовары.Ссылка";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня('2017-01-01'));
	Запрос.УстановитьПараметр("ПустойНомерГТД", Справочники.НоменклатураГТД.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НалоговыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для каждого Строка из НалоговыйОбъект.Товары Цикл
			
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				Строка.КодНоменклатурыПоКлассификатору = Строка.НомерГТД.КодУКТВЭД;
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			НалоговыйОбъект.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма()).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	//используется обработчик ПередЗаписьюДвиженийДокумента
	Параметры.Производный = Истина;
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.НДСРасчетНалоговогоКредита);		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.НДСРеестрПолученныхНалоговыхДокументов);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.НДСНоменклатурныйСоставДляНалоговыхНакладных);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.НДСРасчетНалоговыхОбязательств);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.НДСУсловныеПродажи);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.КоэффициентыПропорциональногоОтнесенияНДСНаКредит);
		//++ НЕ УТ
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.СуммыКорректировокПропорциональногоНДС);
		//-- НЕ УТ
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.КорректировкиНДСПартий);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Если НЕ Документ.ДополнительныеСвойства.Свойство("ЭтоАвтоформирование") ИЛИ НЕ Документ.ДополнительныеСвойства.ЭтоАвтоформирование Тогда
			Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.НДСРасчетНалоговыхОбязательств);
			Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.НДСНоменклатурныйСоставДляНалоговыхНакладных);		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам НДС
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов");
	ОтразитьДвиженияПоРасчетуНДС(ТаблицыДляДвижений, Движения, "НДСРасчетНалоговогоКредита");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "НДСРеестрПолученныхНалоговыхДокументов");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "НДСНоменклатурныйСоставДляНалоговыхНакладных");
	ОтразитьДвиженияПоРасчетуНДС(ТаблицыДляДвижений, Движения, "НДСРасчетНалоговыхОбязательств");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "НДСРеестрВыданныхНалоговыхДокументов");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "НДСУсловныеПродажи");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "КоэффициентыПропорциональногоОтнесенияНДСНаКредит");
	//++ НЕ УТ
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "СуммыКорректировокПропорциональногоНДС");
	//-- НЕ УТ
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "КорректировкиНДСПартий");
	
КонецПроцедуры

Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	//набор записей НДС должен записываться до общего вызова Движения.Записать(), иначе его повторная автоматическая запись может уничтожить результаты
	//сформированные по данным взаиморасчетов
	Если Документ.Движения.Найти("НДСРасчетНалоговогоКредита") <> Неопределено И Документ.Движения.НДСРасчетНалоговогоКредита.Записывать Тогда
		Документ.Движения.НДСРасчетНалоговогоКредита.Записать();
		Документ.Движения.НДСРасчетНалоговогоКредита.Записывать = Ложь;
	КонецЕсли;
	
	Если Документ.Движения.Найти("НДСРасчетНалоговыхОбязательств") <> Неопределено И Документ.Движения.НДСРасчетНалоговыхОбязательств.Записывать Тогда
		Документ.Движения.НДСРасчетНалоговыхОбязательств.Записать();
		Документ.Движения.НДСРасчетНалоговыхОбязательств.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	
КонецПроцедуры

Процедура ОтразитьДвиженияПоРасчетуНДС(ТаблицыДляДвижений, Движения, ИмяРегистра)
	
	ИмяТаблицыДвижений = "Таблица" + ИмяРегистра;
	НаборЗаписей = Движения.Найти(ИмяРегистра);
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицыДвижений) Тогда
		
		ТребуетсяЗаписьНабора = Ложь;
		
		Если ТаблицыДляДвижений[ИмяТаблицыДвижений].Количество() = 0 Тогда
			
			//если движений не было, нет необходимости перезаписывать пустой набор записей
			//свойство Записывать устанавливается при подготовке наборов записей перед проведением, если движения существуют
			Если НЕ НаборЗаписей.Записывать Тогда
				
				ТребуетсяЗаписьНабора = Ложь;
				
			Иначе
				
				//существуют независимые записи и их нужно очистить
				//если существуют только зависимые записи, набор записывать не нужно, они будут актуализированы на этапе распределения взаиморасчетов
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	1 КАК Поле1
				|ИЗ
				|	РегистрНакопления." + ИмяРегистра + " КАК РегистрНДС
				|ГДЕ
				|	РегистрНДС.Регистратор = &Регистратор
				|	И РегистрНДС.Активность
				|	И РегистрНДС.НеЗависитОтВзаиморасчетов";
				Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
				
				Если НЕ Запрос.Выполнить().Пустой() Тогда
					ТребуетсяЗаписьНабора = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТребуетсяЗаписьНабора = Истина;
			
		КонецЕсли;
		
		Если ТребуетсяЗаписьНабора Тогда
			
			НаборЗаписей.Записывать = Истина;
			НаборЗаписей.Загрузить(ТаблицыДляДвижений[ИмяТаблицыДвижений]);
			
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.НеЗависитОтВзаиморасчетов = Истина;
			КонецЦикла;
			
			//сохраняем все зависимые записи
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрНакопления." + ИмяРегистра + " КАК РегистрНДС
			|ГДЕ
			|	РегистрНДС.Регистратор = &Регистратор
			|	И РегистрНДС.Активность
			|	И НЕ РегистрНДС.НеЗависитОтВзаиморасчетов";
			Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			
		Иначе
			
			НаборЗаписей.Записывать = Ложь;	
			
		КонецЕсли;
		
	//документы, у которых формируются только зависимые записи, в принципе не формируют таблицу для движений
	//если в расчетах не было изменений, то и зависимые записи не будут переформировываться, их нужно оставить как есть
	//если зависимые записи уже есть, свойство Записывать будет взведено при подготовке, и набор записей очистится при сохранении, поэтому нужно его снимать
	ИначеЕсли НаборЗаписей <> Неопределено Тогда
		
		НаборЗаписей.Записывать = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


