
#Область ПрограммныйИнтерфейс


// Процедура из таблицы значений выбирает наиболее раннюю актуальную информацию.
// Например, имеем:
// 	1.01.2013 - А
//  1.02.2013 - Б
//  1.03.2013 - А  <--
//  1.04.2013 - А
//  1.05.2013 - А
// В данном случае будет выбрана третья строка, поскольку информация в ней актуальна по сравнению с последней записью,
// и между выбранной и последней строками информация одинакова.
//
// Параметры
//	ТаблицаЗначений - ТаблицаЗначений - таблица значений с данными, из которых будет производиться выбор
//	ПриемникДанных - Произвольный - содержит в себе объект-приемник выбранных данных (например, форма, строка таблицы значений и т.д.)
//	ПараметрСравнения - Строка - параметр, по которому будет идти сравнение на актуальность.
Процедура ЗагрузитьНаиболееРанниеДанныеВРеквизитыФормы(ТаблицаЗначений, ПриемникДанных, ПараметрыСравнения) Экспорт
	
	СтрокаНайдена = Ложь;

	ПредыдущаяСтрока = Неопределено;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Для Каждого ПараметрСравнения Из ПараметрыСравнения Цикл
			Если ПредыдущаяСтрока <> Неопределено 
				И СтрокаТаблицы[ПараметрСравнения] <> ПредыдущаяСтрока[ПараметрСравнения] Тогда
				СтрокаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаНайдена Тогда
			Прервать;
		КонецЕсли;
		ПредыдущаяСтрока = СтрокаТаблицы;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПредыдущаяСтрока) Тогда
		ЗаполнитьЗначенияСвойств(ПриемникДанных, ПредыдущаяСтрока);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДополнитьСписокРеквизитовОрганизации(Реквизиты) Экспорт
	//++ Локализация
    Реквизиты.Вставить("КодПоЕДРПОУ", "");
    Реквизиты.Вставить("КодКВЕД", "");
    Реквизиты.Вставить("ВЭД", "");
    Реквизиты.Вставить("КодОПФГ", "");
    Реквизиты.Вставить("ОПФГ", "");
    Реквизиты.Вставить("НалоговаяИнспекция", "");
	//-- Локализация
КонецПроцедуры

Процедура ДополнитьРеквизитыОрганизации(Организация, СтруктураРеквизитов, ВыборкаПоОрганизации, Период = '00010101') Экспорт  
	//++ Локализация
	//++ НЕ БЗК
	ПараметрыСистемыНалогообложения = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик(
			"НастройкиСистемыНалогообложения",
			Организация,
			Период
    );
	Если ПараметрыСистемыНалогообложения <> Неопределено Тогда
		ИнформацияОСтатусеПлательщикаНалогов = ПараметрыСистемыНалогообложения.ИнформацияОСтатусеПлательщикаНалогов;
	Иначе
		ИнформацияОСтатусеПлательщикаНалогов = "";
    КонецЕсли;
    СтруктураРеквизитов.Вставить("ИнформацияОСтатусеПлательщикаНалогов", ИнформацияОСтатусеПлательщикаНалогов);
    
	ПараметрыНастройкиУчетаНДС = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик(
			"НастройкиУчетаНДС",
			Организация,
			Период
    );
	Если ПараметрыНастройкиУчетаНДС <> Неопределено Тогда
		ИННПлательщикаНДС                = ПараметрыНастройкиУчетаНДС.ИННПлательщикаНДС;
        НомерСвидетельстваПлательщикаНДС = ПараметрыНастройкиУчетаНДС.НомерСвидетельстваПлательщикаНДС;
		КодФилиала                       = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОбособленноеПодразделениеПоУмолчанию.Префикс"));
	Иначе
		ИННПлательщикаНДС                = "";
        НомерСвидетельстваПлательщикаНДС = "";
        КодФилиала                       = "";
    КонецЕсли;
    СтруктураРеквизитов.Вставить("ИННПлательщикаНДС", ИННПлательщикаНДС);
    СтруктураРеквизитов.Вставить("НомерСвидетельстваПлательщикаНДС", НомерСвидетельстваПлательщикаНДС);
    СтруктураРеквизитов.Вставить("КодФилиала", КодФилиала);
	//-- НЕ БЗК
	//-- Локализация
КонецПроцедуры

#Область ПодключаемыеКоманды

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация
    //++ НЕ БЗК
    Отчеты.УчетныеПолитикиОрганизаций.ДобавитьКомандуОтчета(КомандыОтчетов);
    //-- НЕ БЗК
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

// Обработчик события ПриСозданииНаСервере форм элемента справочника Организации.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаЭлемента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	ЗаполнитьОписанияПараметров(Форма);
	УправлениеФормойНаСервере(Форма);
	//-- Локализация
КонецПроцедуры

// Обработчик события ПриЗаписи
// 
// Параметры:
// 	ОбъектЗаписи - СправочникОбъект.Организации - записываемый справочник
// 	Отказ - Булево - Признак отказа
//
Процедура ПриЗаписиОрганизации(ОбъектЗаписи, Отказ) Экспорт 
	//++ Локализация	
	//-- Локализация
КонецПроцедуры

// Обработчик события ОбработкаЗаполнения
// 
// Параметры:
// 	ОбъектЗаписи - СправочникОбъект.Организации - записываемый справочник
// 	ДанныеЗаполнения - Произвольный - данные заполнения
// 	СтандартнаяОбработка - Булево - признак стандартной обработки
//
Процедура ОбработкаЗаполненияОрганизации(ОбъектЗаписи, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	//++ Локализация
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ДанныеЗаполнения.Свойство("ВидОрганизации") Тогда
		Если ДанныеЗаполнения.ВидОрганизации = "ЮридическоеЛицо" Тогда
			ОбъектЗаписи.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
			ОбъектЗаписи.ОбособленноеПодразделение = Ложь;
		ИначеЕсли ДанныеЗаполнения.ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда 
			ОбъектЗаписи.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
			ОбъектЗаписи.ОбособленноеПодразделение = Ложь;
		ИначеЕсли ДанныеЗаполнения.ВидОрганизации = "ОбособленноеПодразделение" Тогда
			ОбъектЗаписи.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
			ОбъектЗаписи.ОбособленноеПодразделение = Истина;
		Иначе ВызватьИсключение НСтр("ru='Создание организации невозможно. На форму переданы неверные параметры.
|Обратитесь к администратору.'
|;uk='Створення організації неможливо. На форму передані невірні параметри.
|Зверніться до адміністратора.'");
		КонецЕсли;
	КонецЕсли;	
	//-- Локализация	
КонецПроцедуры

// Вызывается при создании/чтении формы на сервере
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура ПриСозданииЧтенииНаСервере(Форма) Экспорт
	//++ Локализация
	Форма.ПравоИзмененияОбъекта = ПравоДоступа("Изменение", Метаданные.Справочники.Организации);
	ОрганизацииКлиентСерверЛокализация.УправлениеДоступностью(Форма);
	//-- Локализация
КонецПроцедуры

// Обработчик события ПередЗаписьюНаСервере
// 
// Параметры:
// 	см. параметры платформенного обработчика ПередЗаписьюНаСервере.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Обработчик события ОбработкаПроверкиЗаполненияНаСервере
// 
// Параметры:
// 	Отказ - Булево - признак отказа.
// 	ПроверяемыеРеквизиты - Массив - массив путей к проверяемым реквизитам.
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты, Форма) Экспорт
	//++ Локализация	
	//-- Локализация	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура УправлениеФормойНаСервере(Форма) Экспорт
	//++ Локализация
	ВидОрганизации =  Форма.ВидОрганизации;
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	ТолькоПросмотр = Форма.ТолькоПросмотр;
	УправлениеПредприятием = Истина; //Для БЗК
	//++ НЕ БЗК
	УправлениеПредприятием = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	//-- НЕ БЗК
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																	"ТекущаяСтраница", Элементы.ОсновныеКоды);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию",
																	"Видимость", (ВидОрганизации = "ОбособленноеПодразделение"));
	
	Если НЕ УправлениеПредприятием Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
                "ЛокализацияГруппаРегистрационныеДанные, ГруппаГрафикРаботыОтступ, ГруппаКадровыйУчетИРасчетЗарплатыОтступ, ГруппаБухучетИВыплатаЗарплатыОтступ, ГруппаВоинскийУчетОтступ, ГруппаРезервыОтпусковОтступ, ГруппаСпециальныеРежимыЗарплатаКадрыОтступ",
				"Видимость", 
				Ложь);
	КонецЕсли;
	
	//++ НЕ БЗК
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
		И НЕ ВидОрганизации = "ОбособленноеПодразделение" Тогда
		ЭлементСписка = Элементы.ВидОрганизации.СписокВыбора.НайтиПоЗначению("ОбособленноеПодразделение");
		
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ВидОрганизации.СписокВыбора.Удалить(ЭлементСписка);	
		КонецЕсли;
		
	КонецЕсли;
	ДоступностьИзмененияУчетнойПолитикиИНалогов = 
								ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиСистемыНалогообложения);
	УстановитьСвойстваУчетнойПолитикиИНалогов(Форма);
	//-- НЕ БЗК
	
	//++ НЕ УТ
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоинскийУчет") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ГруппаВоинскийУчетОтступ",
				"Видимость",
				Ложь);
	КонецЕсли;
	
	//++ НЕ БЗК
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ЛокализацияГруппаЗарплатаИКадры",
				"Видимость",
				Ложь);
	КонецЕсли;
	//-- НЕ БЗК
	
	ДоступностьКнопкиОткрытьКадровыйУчетИРасчетЗарплаты = 
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ);
			
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьКадровыйУчетИРасчетЗарплаты",
																	"Доступность", ДоступностьКнопкиОткрытьКадровыйУчетИРасчетЗарплаты);
																	
	ДоступностьКнопкиОткрытьБухучетИВыплатуЗарплаты = 
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.БухучетЗарплатыОрганизаций)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьБухучетИВыплатуЗарплаты",
																	"Доступность", ДоступностьКнопкиОткрытьБухучетИВыплатуЗарплаты);
	//ДоступностьКнопкиОткрытьВоинскийУчет = 
	//		ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВоинскийУчет);
	//ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьВоинскийУчет",
	//																"Доступность", ДоступностьКнопкиОткрытьВоинскийУчет);
	

	//-- НЕ УТ
    
	НеУправленческаяОрганизация = Объект.Ссылка <> Справочники.Организации.УправленческаяОрганизация;
	Элементы.ВидОрганизации.Видимость                          = НеУправленческаяОрганизация;
    Элементы.КодПоЕДРПОУ.Видимость                                 = НеУправленческаяОрганизация;
    Элементы.НалоговаяИнспекция.Видимость                          = НеУправленческаяОрганизация;
	
	ВидимостьКомандПомощникаКопированияНастроек = Ложь; //Для БЗК
	//++ НЕ БЗК
	ВидимостьКомандПомощникаКопированияНастроек = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") 
												И ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.УчетнаяПолитикаФинансовогоУчета);
	//-- НЕ БЗК											
												
	Элементы.ЛокализацияГруппаКопированиеНастроек.Видимость = ВидимостьКомандПомощникаКопированияНастроек;
	Элементы.СкопироватьНастройкиУчетаИз.Видимость = ВидимостьКомандПомощникаКопированияНастроек;
	Элементы.СкопироватьНастройкиУчетаВсе.Видимость = ВидимостьКомандПомощникаКопированияНастроек;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаИУправлениеПерсоналом") Тогда
		    ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ГруппаУчетнаяПолитикаИДругиеНастройки",
				"Видимость",
				Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
						Элементы,
						"ГруппаУчетНДС",
						"Видимость",
						Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
						Элементы,
						"ВестиУчетДенежныхСредствПоОбособленнымПодразделениям",
						"Видимость",
						Ложь);	
	КонецЕсли;	
	//-- Локализация
КонецПроцедуры

Процедура УчетнаяПолитикаПриИзмененииСервер(Форма) Экспорт
	//++ Локализация
	УстановитьСвойстваУчетнойПолитикиИНалогов(Форма);
	//-- Локализация
КонецПроцедуры

Процедура ПриОкончанииИзмененияРеквизита(ИмяЭлемента, Форма, ПараметрыОбработки) Экспорт
	Если ТипЗнч(ИмяЭлемента) = Тип("Массив") Тогда
		Для каждого ТекЭлемент Из ИмяЭлемента Цикл
			ПриОкончанииИзмененияРеквизита(ТекЭлемент, Форма, ПараметрыОбработки);
		КонецЦикла;
	КонецЕсли;
	//++ Локализация
	Если ИмяЭлемента = "ВидОрганизации" Тогда
		ИзменитьВидОрганизацииНаСервере(Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура ВыполнитьКомандуЛокализации(Форма, ИмяКоманды, ПараметрыОбработки) Экспорт
	
	Если ТипЗнч(ИмяКоманды) = Тип("Массив") Тогда
		Для каждого ТекЭлемент Из ИмяКоманды Цикл
			ВыполнитьКомандуЛокализации(Форма, ТекЭлемент, ПараметрыОбработки);
		КонецЦикла;
	КонецЕсли;
	//++ Локализация	
	Если ИмяКоманды = "ЗаполнитьОписаниеГосРегистрации"
		//++ НЕ УТ
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеПФ"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеФСС"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеКлассификаторов"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеПараметровРасчетаЗарплаты"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеСпециальныеРежимыЗарплатаКадры"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеБухучетаИВыплатыЗарплат"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеВоинскогоУчета"
		ИЛИ ИмяКоманды = "ЗаполнитьНастройкиРасчетаРезервовОтпусков"
		//-- НЕ УТ
	Тогда
		ЗаполнитьОписанияПараметров(Форма, ИмяКоманды);
	КонецЕсли;
	Если ИмяКоманды = "ЗаполнитьОписанияПараметров" Тогда
		ЗаполнитьОписанияПараметров(Форма);
	КонецЕсли;
	Если ИмяКоманды = "УстановитьСвойстваУчетнойПолитикиИНалогов" Тогда
		УстановитьСвойстваУчетнойПолитикиИНалогов(Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиМодуляОбъекта

Процедура ОбработкаПроверкиЗаполнения(ОрганизацияОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеМетоды

Процедура УстановитьПараметрыЗапросаПриОбработкеПолученияДанныхВыбора(Параметры, Запрос) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьСоответствиеЭлементовФормыПараметрамНалоговУчетныхПолитик(СоответствиеЭлементов) Экспорт
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаНастройкиСистемыНалогообложенияОтступ");
	МассивЭлементов.Добавить("ОтступНастройкиСистемыНалогообложения");
	МассивЭлементов.Добавить("ГруппаНастройкиСистемыНалогообложения");
	МассивЭлементов.Добавить("ОписаниеНастройкиСистемыНалогообложения");
	МассивЭлементов.Добавить("ОткрытьНастройкиСистемыНалогообложения");
	
	СоответствиеЭлементов.Вставить("НастройкиСистемыНалогообложения", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаУчетнаяПолитикаБухУчетаОтступ");
	МассивЭлементов.Добавить("ОтступУчетнаяПолитикаБухУчета");
	МассивЭлементов.Добавить("ГруппаУчетнаяПолитикаБухУчета");
	МассивЭлементов.Добавить("ОписаниеУчетнаяПолитикаБухУчета");
	МассивЭлементов.Добавить("ОткрытьУчетнаяПолитикаБухУчета");
	
	СоответствиеЭлементов.Вставить("УчетнаяПолитикаБухУчета", МассивЭлементов);

	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаНалогаНаПрибыльОтступ");
	МассивЭлементов.Добавить("ОтступНастройкиУчетаНалогаНаПрибыль");
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаНалогаНаПрибыль");
	МассивЭлементов.Добавить("ОписаниеНастройкиУчетаНалогаНаПрибыль");
	МассивЭлементов.Добавить("ОткрытьНастройкиУчетаНалогаНаПрибыль");
	
	СоответствиеЭлементов.Вставить("НастройкиУчетаНалогаНаПрибыль", МассивЭлементов);

	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаЕНОтступ");
	МассивЭлементов.Добавить("ОтступНастройкиУчетаЕН");
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаЕН");
	МассивЭлементов.Добавить("ОписаниеНастройкиУчетаЕН");
	МассивЭлементов.Добавить("ОткрытьНастройкиУчетаЕН");
	
	СоответствиеЭлементов.Вставить("НастройкиУчетаЕН", МассивЭлементов);
КонецПроцедуры

Процедура ЗаполнитьОписаниеДействующихПараметровУчетныхПолитикПриИзмененииГоловнойОрганизации(Форма, ИмяРегистра = "") Экспорт
	СоответствиеЭлементов = Справочники.Организации.СоответствиеЭлементовФормыПараметрамНалоговУчетныхПолитик();
	//++ НЕ БЗК
	НастройкиНалоговУчетныхПолитик.УправлениеВидимостьюЭлементовУчетныхПолитик(Форма, СоответствиеЭлементов, Форма.Объект.ГоловнаяОрганизация);
	НастройкиНалоговУчетныхПолитик.ЗаполнитьОписаниеДействующихПараметров(Форма, Форма.Объект.ГоловнаяОрганизация, ИмяРегистра);
	//-- НЕ БЗК
	ОрганизацииЛокализация.УчетнаяПолитикаПриИзмененииСервер(Форма);
КонецПроцедуры

//++ Локализация

Функция ИзменитьКодПоЕДРПОУ(СсылкаНаОбъект) Экспорт
	КодПоЕДРПОУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "КодПоДРФО");
	Возврат КодПоЕДРПОУ
КонецФункции      

//-- Локализация

Функция ВозможнаРегистрацияДляОбособленныхПодразделений() Экспорт
	//++ Локализация
	//-- Локализация
	Возврат Ложь
КонецФункции

//++ НЕ УТ

Функция РегистрацииПФРВХранилище(ОбъектСсылка, УникальныйИдентификатор) Экспорт
	ПФРСохраненныеЗначения = Неопределено;
	//++ Локализация
	//-- Локализация
	Возврат ПФРСохраненныеЗначения
КонецФункции

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийЭлементовШапкиФормы_Служебные
//++ Локализация
Процедура ИзменитьВидОрганизацииНаСервере(Форма)
КонецПроцедуры
//-- Локализация
#КонецОбласти
//++ Локализация

Процедура УстановитьСвойстваУчетнойПолитикиИНалогов(Форма)
КонецПроцедуры

#Область ЗаполнениеОписаний

Процедура ЗаполнитьОписанияПараметров(Форма, ИмяОписания = "")
	
	//++ НЕ УТ
    ЗаполнитьОписаниеПФ(Форма);
	ЗаполнитьОписаниеФСС(Форма);
	ЗаполнитьОписаниеКлассификаторов(Форма);
	ЗаполнитьОписаниеПараметровРасчетаЗарплаты(Форма);
	ЗаполнитьОписаниеБухучетаИВыплатыЗарплат(Форма);
	ЗаполнитьОписаниеСпециальныеРежимыЗарплатаКадры(Форма);	
	ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты(Форма);
	ЗаполнитьНастройкиРасчетаРезервовОтпусков(Форма);
	//-- НЕ УТ
    ЗаполнитьОписаниеГосРегистрации(Форма);
	
КонецПроцедуры

//++ НЕ УТ
Процедура ЗаполнитьОписаниеПФ(Форма, ИмяОписания = "")    
	
	Если ЗначениеЗаполнено(ИмяОписания)
        И ИмяОписания <> "ЗаполнитьОписаниеПФ" Тогда
		
		Возврат
		
	КонецЕсли;
    
    СтрокаОписанияРеквизитовПФ = НСтр("ru='Номер регистрации в ПФ: %НомерРегистрацииПФ%. Код органа ПФУ: %КодОрганаПФУ%';uk='Номер реєстрації в ПФ: %НомерРегистрацииПФ%. Код органу ПФУ: %КодОрганаПФУ%'");
    
	СтрокаОписанияРеквизитовПФ = СтрЗаменить(
		СтрокаОписанияРеквизитовПФ, 
		"%НомерРегистрацииПФ%",  
		?(ЗначениеЗаполнено(Форма.Объект.НомерРегистрацииПФ), 
			Форма.Объект.НомерРегистрацииПФ, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
																						
	СтрокаОписанияРеквизитовПФ = СтрЗаменить(
		СтрокаОписанияРеквизитовПФ, 
		"%КодОрганаПФУ%",
		?(ЗначениеЗаполнено(Форма.Объект.КодОрганаПФУ),
			Форма.Объект.КодОрганаПФУ, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	Форма.Элементы.ДекорацияОписаниеРеквизитовПФ.Заголовок = СтрокаОписанияРеквизитовПФ;
    
КонецПроцедуры

Процедура ЗаполнитьОписаниеФСС(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеФСС" Тогда
		
		Возврат
		
	КонецЕсли;
    
	СтрокаОписанияРеквизитовФСС = НСтр("ru='Номер регистрации ФСС Украины: %НомерФССУ%. Номер регистрации ФСС от временной потери трудоспособности: %НомерФСС%. Номер регистрации в ФСС от несчастного случая: %НомерФССНесчСлучай%. Номер регистрации в службе занятости: %НомерРегистрацииВСлужбеЗанятости%';uk='Номер реєстрації ФСС України: %НомерФССУ%. Номер реєстрації ФСС від тимчасової втрати працездатності: %НомерФСС%. Номер реєстрації у ФСС від нещасного випадку: %НомерФССНесчСлучай%. Номер реєстрації в службі зайнятості: %НомерРегистрацииВСлужбеЗанятости%'");
	
	СтрокаОписанияРеквизитовФСС = СтрЗаменить(
		СтрокаОписанияРеквизитовФСС, 
		"%НомерФСС%",  
		?(ЗначениеЗаполнено(Форма.Объект.НомерФСС), 
			Форма.Объект.НомерФСС, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияРеквизитовФСС = СтрЗаменить(
		СтрокаОписанияРеквизитовФСС, 
		"%НомерФССУ%",  
		?(ЗначениеЗаполнено(Форма.Объект.НомерФССУ), 
			Форма.Объект.НомерФССУ, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияРеквизитовФСС = СтрЗаменить(
		СтрокаОписанияРеквизитовФСС, 
		"%НомерФССНесчСлучай%",  
		?(ЗначениеЗаполнено(Форма.Объект.НомерФССНесчСлучай), 
			Форма.Объект.НомерФССНесчСлучай, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияРеквизитовФСС = СтрЗаменить(
		СтрокаОписанияРеквизитовФСС, 
		"%НомерРегистрацииВСлужбеЗанятости%",  
		?(ЗначениеЗаполнено(Форма.Объект.НомерРегистрацииВСлужбеЗанятости), 
			Форма.Объект.НомерРегистрацииВСлужбеЗанятости, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
    
	Форма.Элементы.ДекорацияОписаниеРеквизитовФСС.Заголовок = СтрокаОписанияРеквизитовФСС;
	
КонецПроцедуры


Процедура ЗаполнитьОписаниеКлассификаторов(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеКлассификаторов" Тогда
		
		Возврат
		
	КонецЕсли;

	Объект = Форма.Объект;
    
	
	СтрокаОписанияКлассификаторов = НСтр("ru='ОПФГ: %КодОПФГ%. Организационно-правовая форма: %ОПФГ%. Код КОАТУУ: %КодКОАТУУ%. Территория: %Территория%. Код КАТОТТГ: %КодКАТОТТГ%. КФВ: %КодКФВ%. Форма собственности: %ФормаСобственности%. ЗКГНГ: %КодЗКГНГ%. Отрасль: %Отрасль%. СПОДУ: %КодСПОДУ%. Орган державного управления: %ОрганГУ%. КВЭД: %КодКВЕД%. Вид деятельности: %ВЭД%. Класс профессионального риска: %КлассПрофессиональногоРиска%.';uk='ОПФГ: %КодОПФГ%. Організаційно-правова форма: %ОПФГ%. Код КОАТУУ: %КодКОАТУУ%. Територія: %Территория%. Код КАТОТТГ: %КодКАТОТТГ%. КФВ: %КодКФВ%. Форма власності: %ФормаСобственности%. ЗКГНГ: %КодЗКГНГ%. Галузь: %Отрасль%. СПОДУ: %КодСПОДУ%. Орган державного управління: %ОрганГУ%. КВЕД: %КодКВЕД%. Вид діяльності: %ВЭД%. Клас професійного ризику: %КлассПрофессиональногоРиска%.'");
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодОПФГ%",  
		?(ЗначениеЗаполнено(Объект.КодОПФГ), 
			Объект.КодОПФГ, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%ОПФГ%",  
		?(ЗначениеЗаполнено(Объект.ОПФГ), 
			Объект.ОПФГ, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодКОАТУУ%",  
		?(ЗначениеЗаполнено(Объект.КодКОАТУУ), 
			Объект.КодКОАТУУ, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%Территория%",  
		?(ЗначениеЗаполнено(Объект.Территория), 
			Объект.Территория, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодКАТОТТГ%",  
		?(ЗначениеЗаполнено(Объект.КодКАТОТТГ), 
			Объект.КодКАТОТТГ, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);

	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодКФВ%",  
		?(ЗначениеЗаполнено(Объект.КодКФВ), 
			Объект.КодКФВ, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%ФормаСобственности%",  
		?(ЗначениеЗаполнено(Объект.ФормаСобственности), 
			Объект.ФормаСобственности, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодСПОДУ%",  
		?(ЗначениеЗаполнено(Объект.КодСПОДУ), 
			Объект.КодСПОДУ, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%ОрганГУ%",  
		?(ЗначениеЗаполнено(Объект.ОрганГУ), 
			Объект.ОрганГУ, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодЗКГНГ%",  
		?(ЗначениеЗаполнено(Объект.КодЗКГНГ), 
			Объект.КодЗКГНГ, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%Отрасль%",  
		?(ЗначениеЗаполнено(Объект.Отрасль), 
			Объект.Отрасль, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодКВЕД%",  
		?(ЗначениеЗаполнено(Объект.КодКВЕД), 
			Объект.КодКВЕД, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%ВЭД%",  
		?(ЗначениеЗаполнено(Объект.ВЭД), 
			Объект.ВЭД, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КлассПрофессиональногоРиска%",  
		?(ЗначениеЗаполнено(Объект.КлассПрофессиональногоРиска), 
			Объект.КлассПрофессиональногоРиска, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
    
	Форма.Элементы.ДекорацияОписаниеКлассификаторов.Заголовок = СтрокаОписанияКлассификаторов;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеПараметровРасчетаЗарплаты(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеПараметровРасчетаЗарплаты" Тогда
		
		Возврат
		
	КонецЕсли;
    
    
	СтрокаОписания = НСтр("ru='График работы сотрудников: %ГрафикРаботыСотрудников%.';uk='Графік роботи співробітників: %ГрафикРаботыСотрудников%.'");
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ГрафикиРаботыСотрудников) Тогда 
		Если ЗначениеЗаполнено(Форма.Объект.ГрафикРаботыСотрудников) Тогда 
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", Форма.Объект.ГрафикРаботыСотрудников);		
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", НСтр("ru='не указано';uk='не вказано'"));
		КонецЕсли;	
	Иначе
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));	
	КонецЕсли;
    
	Форма.Элементы.ОписаниеПараметровРасчетаЗарплаты.Заголовок = СтрокаОписания;	
КонецПроцедуры


Процедура ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты" Тогда
		
		Возврат
		
	КонецЕсли;
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	ПравоЧтенияУчетСтраховыхВзносов 		= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов);
	
	ПравоЧтенияЗарплатаКадрыРасширенная 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);
	
	ПравоЧтенияУчетПособийСоциальногоСтрахования  
											= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования);
	ПравоЧтенияУчетнаяПолитикаПоНДФЛ 		= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаОрганизация.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		КОГДА Организации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.ГоловнаяОрганизация
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ТаблицаГоловнаяОрганизация
	|ИЗ
	|	ТаблицаОрганизация КАК ТаблицаОрганизация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ТаблицаОрганизация.Ссылка = Организации.Ссылка
	|;";
	
	НомерТекущейТаблицыЗапроса = 1;
	
	Если ПравоЧтенияУчетСтраховыхВзносов Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЛетныхЭкипажей, ЛОЖЬ) КАК ИспользуетсяТрудЧленовЛетныхЭкипажей,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуютсяСпециальныеРаботы, ЛОЖЬ) КАК ИспользуютсяСпециальныеРаботы,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.УчетНовыхРабочихМест, ЛОЖЬ) КАК УчетНовыхРабочихМест,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ОсновнаяКатегорияЗастрахованныхЛиц, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) КАК ОсновнаяКатегорияЗастрахованныхЛиц
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаСтраховыхВзносов КАК НастройкиУчетаСтраховыхВзносов
		|		ПО Организации.Ссылка = НастройкиУчетаСтраховыхВзносов.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетСтраховыхВзносов = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияУчетПособийСоциальногоСтрахования Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
        |	ЕСТЬNULL(НастройкиУчетаПособийСоциальногоСтрахования.РазрешенаВыплатаПособийДоОплатыФСС, ЛОЖЬ) КАК РазрешенаВыплатаПособийДоОплатыФСС
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования КАК НастройкиУчетаПособийСоциальногоСтрахования
		|		ПО Организации.Ссылка = НастройкиУчетаПособийСоциальногоСтрахования.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетПособийСоциальногоСтрахования = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЛОЖЬ
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиЗарплатаКадрыРасширенная
		|		ПО Организации.Ссылка = НастройкиЗарплатаКадрыРасширенная.Организация;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыЗарплатаКадрыРасширенная = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияУчетнаяПолитикаПоНДФЛ Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация,
		|	ЕСТЬNULL(УчетнаяПолитикаПоНДФЛ.ИспользоватьОбособленныеПодразделенияДляНДФЛ, ЛОЖЬ) КАК ИспользоватьОбособленныеПодразделенияДляНДФЛ,
		|	ЕСТЬNULL(УчетнаяПолитикаПоНДФЛ.РазрешенаУплатаНалоговДоОплатыФСС, ЛОЖЬ) КАК РазрешенаУплатаНалоговДоОплатыФСС
		|ИЗ
		|	ТаблицаГоловнаяОрганизация КАК ТаблицаГоловнаяОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
		|		ПО ТаблицаГоловнаяОрганизация.Организация = УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетнаяПолитикаПоНДФЛ = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтрокаОписания = "%ПродолжениеСтроки%";
	
	
	СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				"%ОсновнаяКатегорияЗастрахованныхЛиц% %УчетНовыхРабочихМест% %ИспользуетсяТрудЧленовЛетныхЭкипажей% %ИспользуютсяСпециальныеРаботы% %ИспользуетсяТрудШахтеров% 
					|%ПродолжениеСтроки%");
				
	
	Если ИспользоватьРасчетЗарплатыРасширенная Тогда
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				"%РазрешенаВыплатаПособийДоОплатыФСС%
					|%ПродолжениеСтроки%");				
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты Тогда  
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				"%ИспользоватьОбособленныеПодразделенияДляНДФЛ%. %РазрешенаУплатаНалоговДоОплатыФСС%. 
					|%ПродолжениеСтроки%");
		
	КонецЕсли;	
		

	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПродолжениеСтроки%", "");
	
	
	Если ПравоЧтенияУчетСтраховыхВзносов Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетСтраховыхВзносов].Выбрать();
		Результат.Следующий();
		
		
		Если Результат.ИспользуетсяТрудЧленовЛетныхЭкипажей Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%",
			НСтр("ru='Используется труд летных экипажей.';uk='Використовується праця льотних екіпажів.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%", "");
		КонецЕсли;
		
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудШахтеров%", "");
		
        
		Если ЗначениеЗаполнено(Результат.ОсновнаяКатегорияЗастрахованныхЛиц) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсновнаяКатегорияЗастрахованныхЛиц%",
			НСтр("ru='Основная категория застрахованных лиц: ';uk='Основна категорія застрахованих осіб: '") + Результат.ОсновнаяКатегорияЗастрахованныхЛиц.Наименование);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсновнаяКатегорияЗастрахованныхЛиц%", "");
		КонецЕсли;

		Если Результат.УчетНовыхРабочихМест Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%УчетНовыхРабочихМест%",
			НСтр("ru='Ведется учет работников принятых на новые рабочие места.';uk='Ведеться облік прийнятих працівників на нові робочі місця.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%УчетНовыхРабочихМест%", "");
		КонецЕсли;
		
		Если Результат.ИспользуютсяСпециальныеРаботы Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяСпециальныеРаботы%",
			НСтр("ru='Есть работники на специальных работах.';uk='Є працівники на спеціальних роботах.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяСпециальныеРаботы%", "");
		КонецЕсли;
		
	Иначе
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудШахтеров%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсновнаяКатегорияЗастрахованныхЛиц%", 
													НСтр("ru='Недостаточно прав на чтение информации об учете страховых взносов.';uk='Недостатньо прав для читання інформації про облік страхових внесків.'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%УчетНовыхРабочихМест%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяСпециальныеРаботы%", "");
		
	КонецЕсли;
	
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияУчетнаяПолитикаПоНДФЛ Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетнаяПолитикаПоНДФЛ].Выбрать();
		Результат.Следующий();
		
        
		Если Результат.ИспользоватьОбособленныеПодразделенияДляНДФЛ Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользоватьОбособленныеПодразделенияДляНДФЛ%",НСтр("ru='Ведется учет НДФЛ по обособленным подразделениям';uk='Ведеться облік ПДФО за відокремленими підрозділами'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользоватьОбособленныеПодразделенияДляНДФЛ%",НСтр("ru='Не ведется учет НДФЛ по обособленным подразделениям';uk='Не ведеться облік ПДФО за відокремленими підрозділами'"));
		КонецЕсли;
		
		Если Результат.РазрешенаУплатаНалоговДоОплатыФСС Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаУплатаНалоговДоОплатыФСС%",НСтр("ru='Разрешена уплата налогов по начислениям социального страхования до оплаты фондом';uk='Дозволена сплата податків по нарахуваннях соціального страхування до оплати фондом'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаУплатаНалоговДоОплатыФСС%",НСтр("ru='Не разрешена уплата налогов по начислениям социального страхования до оплаты фондом';uk='Не дозволяється сплата податків по нарахуваннях соціального страхування до оплати фондом'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
        СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользоватьОбособленныеПодразделенияДляНДФЛ%", НСтр("ru='Недостаточно прав на чтение информации о учете НДФЛ по обособленным подразделениям';uk='Недостатньо прав на читання інформації про облік ПДФО за відокремленими підрозділами'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаУплатаНалоговДоОплатыФСС%", НСтр("ru='Недостаточно прав на чтение информации о уплате налогов по начислениям ФСС';uk='Недостатньо прав на читання інформації про сплату податків за нарахуванням ФСС'"));
		
	КонецЕсли;
	
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияУчетПособийСоциальногоСтрахования Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетПособийСоциальногоСтрахования].Выбрать();
		Результат.Следующий();
		
            
        Если НЕ (Результат.РазрешенаВыплатаПособийДоОплатыФСС = NULL) И Результат.РазрешенаВыплатаПособийДоОплатыФСС Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаВыплатаПособийДоОплатыФСС%",
			НСтр("ru='Разрешена выплата пособий социального страхования до поступления средств от фонда.';uk='Дозволена виплата допомоги соціального страхування до надходження коштів від фонду.'"));			
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаВыплатаПособийДоОплатыФСС%",
			НСтр("ru='Пособия социального страхования выплачиваются только после поступления средств от фонда.';uk='Допомоги соціального страхування виплачуються тільки після надходження коштів від фонду.'"));			
		КонецЕсли;
            
		
	ИначеЕсли ИспользоватьРасчетЗарплатыРасширенная Тогда 
		
        СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаВыплатаПособийДоОплатыФСС%", НСтр("ru='Недостаточно прав на чтение информации о выплате пособий ФСС';uk='Недостатньо прав на читання інформації про виплату допомоги ФСС'"));
		
	КонецЕсли;
	
	Пока Найти(СтрокаОписания, "  ") > 0 Цикл
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "  ", " ");
	КонецЦикла;
	
	Форма.Элементы.ОписаниеКадровыйУчетИРасчетЗарплаты.Заголовок = СокрЛП(СтрокаОписания);
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеСпециальныеРежимыЗарплатаКадры(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеСпециальныеРежимыЗарплатаКадры" Тогда
		
		Возврат
		
	КонецЕсли;
	
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	ИспользоватьНачислениеЗарплаты		  = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	ПравоЧтенияСпециальныеРежимыЗарплатаКадры 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СпециальныеРежимыЗарплатаКадры);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;";
	
	НомерТекущейТаблицыЗапроса = 0;
			
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияСпециальныеРежимыЗарплатаКадры Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СпециальныеРежимыЗарплатаКадрыСрезПоследних.РезидентДияСити, Ложь) КАК РезидентДияСити
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпециальныеРежимыЗарплатаКадры.СрезПоследних КАК СпециальныеРежимыЗарплатаКадрыСрезПоследних
		|		ПО Организации.Ссылка = СпециальныеРежимыЗарплатаКадрыСрезПоследних.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыБухучетЗарплатыОрганизаций = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;

	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
			
	СтрокаОписания = "%ПродолжениеСтроки%";
			
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПродолжениеСтроки%", "");
		
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияСпециальныеРежимыЗарплатаКадры Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыБухучетЗарплатыОрганизаций].Выбрать();
		Результат.Следующий();
		
		СтрокаОписания = НСтр("ru='Нет специальных статусов';uk='Немає спеціальних статусів'");
		Если Результат.РезидентДияСити Тогда
			СтрокаОписания = НСтр("ru='Является резидентом Дія Сіті';uk='Є резидентом Дія Сіті'");
		КонецЕсли;
		
		
	ИначеЕсли ПравоЧтенияСпециальныеРежимыЗарплатаКадры Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РезидентДияСити%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		
	КонецЕсли;

	Форма.Элементы.ОписаниеСпециальныеРежимыЗарплатаКадры.Заголовок = СокрЛП(СтрокаОписания);
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеБухучетаИВыплатыЗарплат(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеБухучетаИВыплатыЗарплат" Тогда
		
		Возврат
		
	КонецЕсли;
	
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	ИспользоватьНачислениеЗарплаты		  = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	ПравоЧтенияБухучетЗарплатыОрганизаций 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.БухучетЗарплатыОрганизаций);
	ПравоЧтенияМестаВыплатыЗарплатыОрганизаций = 
											  ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций);
	ПравоЧтенияЗарплатаКадрыРасширенная 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;";
	
	НомерТекущейТаблицыЗапроса = 0;
	
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияМестаВыплатыЗарплатыОрганизаций Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	МестаВыплатыЗарплатыОрганизаций.Вид,
		|	МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
		|		ПО Организации.Ссылка = МестаВыплатыЗарплатыОрганизаций.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыМестаВыплатыЗарплатыОрганизаций = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияБухучетЗарплатыОрганизаций Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	БухучетЗарплатыОрганизацийСрезПоследних.СпособОтраженияЗарплатыВБухучете,
		|	БухучетЗарплатыОрганизацийСрезПоследних.СтатьяФинансирования
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыОрганизаций.СрезПоследних КАК БухучетЗарплатыОрганизацийСрезПоследних
		|		ПО Организации.Ссылка = БухучетЗарплатыОрганизацийСрезПоследних.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыБухучетЗарплатыОрганизаций = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;

	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	НастройкиЗарплатаКадрыРасширенная.ДатаВыплатыАвансаНеПозжеЧем,
		|	НастройкиЗарплатаКадрыРасширенная.ДатаВыплатыЗарплатыНеПозжеЧем,
		|	НастройкиЗарплатаКадрыРасширенная.ВыплачиватьЗарплатуВПоследнийДеньМесяца
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиЗарплатаКадрыРасширенная
		|		ПО Организации.Ссылка = НастройкиЗарплатаКадрыРасширенная.Организация;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыЗарплатаКадрыРасширенная = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
			
	СтрокаОписания = "%ПродолжениеСтроки%";
	
	Если ИспользоватьНачислениеЗарплаты Тогда
		СтрокаОписания = СтрЗаменить(
			СтрокаОписания, 
			"%ПродолжениеСтроки%", 
			НСтр("ru='Способ отражения зарплаты в бухучете: %СпособОтраженияЗарплатыВБухучете%.
|%ПродолжениеСтроки%'
|;uk='Спосіб відображення зарплати в бухобліку: %СпособОтраженияЗарплатыВБухучете%.
|%ПродолжениеСтроки%'"));	
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная Тогда
		СтрокаОписания = СтрЗаменить(
			СтрокаОписания, 
			"%ПродолжениеСтроки%", 
			НСтр("ru='%МестоВыплатыЗарплаты%
|%ПродолжениеСтроки%'
|;uk='%МестоВыплатыЗарплаты%
|%ПродолжениеСтроки%'"));	
	КонецЕсли;
	
	СтрокаОписания = СтрЗаменить(
		СтрокаОписания,
		"%ПродолжениеСтроки%",
		НСтр("ru='Крайний срок выплаты аванса: %ДатаВыплатыАвансаНеПозжеЧем%.
|Крайний срок выплаты зарплаты: %ДатаВыплатыЗарплатыНеПозжеЧем%.'
|;uk='Крайній термін виплати авансу: %ДатаВыплатыАвансаНеПозжеЧем%.
|Крайній термін виплати зарплати: %ДатаВыплатыЗарплатыНеПозжеЧем%.'"));
			
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПродолжениеСтроки%", "");
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияБухучетЗарплатыОрганизаций Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыБухучетЗарплатыОрганизаций].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.СтатьяФинансирования) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%",
				Результат.СтатьяФинансирования);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%",
				НСтр("ru='не указано';uk='не вказано'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.СпособОтраженияЗарплатыВБухучете) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%",
			Результат.СпособОтраженияЗарплатыВБухучете);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%",
			НСтр("ru='не указано';uk='не вказано'"));
		КонецЕсли;
		
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияМестаВыплатыЗарплатыОрганизаций Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыМестаВыплатыЗарплатыОрганизаций].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.Вид) Тогда
			Если Результат.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru='Зарплата выдается через кассу: %МестоВыплаты%.';uk='Зарплата видається через касу: %МестоВыплаты%.'"));
			Иначе
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru='Зарплата выдается посредством зачисления на карточку: %МестоВыплаты%.';uk='Зарплата видається за допомогою зарахування на картку: %МестоВыплаты%.'"));
			КонецЕсли;
			МестоВыплаты = ?(ЗначениеЗаполнено(Результат.МестоВыплаты), Результат.МестоВыплаты, НСтр("ru='не указано';uk='не вказано'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплаты%", МестоВыплаты);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%",
			НСтр("ru='Место/способ выплаты зарплаты не указан.';uk='Місце/спосіб виплати зарплати не вказано.'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьРасчетЗарплатыРасширенная Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru='Недостаточно прав на чтение информации о местах выплаты зарплаты.';uk='Недостатньо прав для читання інформації про місця виплати зарплати.'"));		
		
	КонецЕсли;
	
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыЗарплатаКадрыРасширенная].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.ДатаВыплатыАвансаНеПозжеЧем) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru='%ДатаВыплатыАвансаНеПозжеЧем% число месяца';uk='%ДатаВыплатыАвансаНеПозжеЧем% число місяця'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			Результат.ДатаВыплатыАвансаНеПозжеЧем);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru='не указано';uk='не вказано'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ВыплачиватьЗарплатуВПоследнийДеньМесяца)
			И Результат.ВыплачиватьЗарплатуВПоследнийДеньМесяца Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru='последний день месяца';uk='останній день місяця'"));
		ИначеЕсли ЗначениеЗаполнено(Результат.ДатаВыплатыЗарплатыНеПозжеЧем) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru='%ДатаВыплатыЗарплатыНеПозжеЧем% число месяца';uk='%ДатаВыплатыЗарплатыНеПозжеЧем% число місяця'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			Результат.ДатаВыплатыЗарплатыНеПозжеЧем);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru='не указано';uk='не вказано'"));
		КонецЕсли;
		
	Иначе
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
	КонецЕсли;
	
	Форма.Элементы.ОписаниеБухучетИВыплатаЗарплаты.Заголовок = СокрЛП(СтрокаОписания);
	
КонецПроцедуры

//Процедура ЗаполнитьОписаниеВоинскогоУчета(Форма, ИмяОписания = "")
//	Если ЗначениеЗаполнено(ИмяОписания)
//		И ИмяОписания <> "ЗаполнитьОписаниеВоинскогоУчета" Тогда
//		
//		Возврат
//		
//	КонецЕсли;	
//	Форма.Элементы.ОписаниеВоинскийУчет.Заголовок = НСтр("ru='Воинский учет'");
//	
//КонецПроцедуры
Процедура ЗаполнитьНастройкиРасчетаРезервовОтпусков(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьНастройкиРасчетаРезервовОтпусков" Тогда
		
		Возврат
		
	КонецЕсли;
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	ПравоЧтенияНастройкиРасчетаРезервовОтпусков = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиРасчетаРезервовОтпусков);
	
	СтрокаШаблон = "%1: %2." + Символы.ПС;
	СтрокаШаблонБулево = "%1." + Символы.ПС;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.Период,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.Организация,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.ФормироватьРезервОтпусковБУ,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.МетодНачисленияРезерваОтпусков,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.НормативОтчисленийВРезервОтпусков,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.ПредельнаяВеличинаОтчисленийВРезервОтпусков,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.ОпределятьИзлишкиЕжемесячно
		|ИЗ
		|	РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних(&Период, Организация = &Организация) КАК
		|		НастройкиРасчетаРезервовОтпусковСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	Если ИспользоватьНачислениеЗарплаты 
		И ПравоЧтенияНастройкиРасчетаРезервовОтпусков Тогда
		
		Выборка = Запрос.Выполнить().Выбрать();
		ДействующиеНастройки= Неопределено;
		Если Выборка.Следующий() Тогда
			ДействующиеНастройки = Выборка;
		КонецЕсли;
		СтрокаОписанияНастроек = "";
		Если ЗначениеЗаполнено(ДействующиеНастройки) Тогда
			Если ДействующиеНастройки.ФормироватьРезервОтпусковБУ Тогда
				СтрокаОписанияНастроек = СтрШаблон(СтрокаШаблонБулево, 
						НСтр("ru='Формируются оценочные обязательства (резервы) в бухучете';uk='Формуються оціночні зобов''язання (резерви) в бухобліку'"));
				СтрокаОписанияНастроек = СтрокаОписанияНастроек
					+ СтрШаблон(СтрокаШаблон,
						НСтр("ru='Метод начисления отпусков';uk='Метод нарахування відпусток'"),
						ДействующиеНастройки.МетодНачисленияРезерваОтпусков);
			КонецЕсли;
			
			Если ДействующиеНастройки.ОпределятьИзлишкиЕжемесячно Тогда
				СтрокаОписанияНастроек = СтрокаОписанияНастроек
					+ СтрШаблон(СтрокаШаблонБулево,
						НСтр("ru='Переоценивать излишки ежемесячно';uk='Переоцінювати надлишки щомісяця'"));
			КонецЕсли;
			
			Если ДействующиеНастройки.ФормироватьРезервОтпусковБУ Тогда
				СтрокаОписанияНастроек = СтрокаОписанияНастроек + СтрШаблон(СтрокаШаблонБулево, 
						НСтр("ru='Формируются оценочные обязательства (резервы) в налоговом учете';uk='Формуються оціночні зобов''язання (резерви) в податковому обліку'"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДействующиеНастройки.НормативОтчисленийВРезервОтпусков) Тогда
				СтрокаОписанияНастроек = СтрокаОписанияНастроек
					+ СтрШаблон(СтрокаШаблон,
						НСтр("ru='Ежемесячный процент отчислений от ФОТ';uk='Щомісячний відсоток відрахувань від ФОП'"),
						Строка(ДействующиеНастройки.НормативОтчисленийВРезервОтпусков) + "%");
			КонецЕсли;
			Если ЗначениеЗаполнено(ДействующиеНастройки.НормативОтчисленийВРезервОтпусков) Тогда
				СтрокаОписанияНастроек = СтрокаОписанияНастроек
					+ СтрШаблон(СтрокаШаблон,
						НСтр("ru='Предельная сумма отчислений в год';uk='Гранична сума відрахувань на рік'"),
						ДействующиеНастройки.ПредельнаяВеличинаОтчисленийВРезервОтпусков);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаОписанияНастроек = НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаОписанияНастроек) Тогда
		СтрокаОписанияНастроек = НСтр("ru='Не заданы параметры.';uk='Не задані параметри.'");
	КонецЕсли;
	Форма.Элементы.ОписаниеРезервыОтпусков.Заголовок = СокрЛП(СтрокаОписанияНастроек);
	
КонецПроцедуры


//-- НЕ УТ


Процедура ЗаполнитьОписаниеГосРегистрации(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеГосРегистрации" Тогда
		
		Возврат
		
	КонецЕсли;
	
	СтрокаОписанияРеквизитовГосРегистрации = НСтр("ru='Дата регистрации: %ДатаРегистрации%. Номер регистрации: %НомерРегистрации%. Кем зарегистрирована: %КемЗарегистрирована%';uk='Дата реєстрації: %ДатаРегистрации%. Номер реєстрації: %НомерРегистрации%. Ким зареєстрована: %КемЗарегистрирована%'");
	
	СтрокаОписанияРеквизитовГосРегистрации = СтрЗаменить(
		СтрокаОписанияРеквизитовГосРегистрации, 
		"%ДатаРегистрации%",  
		?(ЗначениеЗаполнено(Форма.Объект.ДатаРегистрации), 
			Форма.Объект.ДатаРегистрации, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
																						
	СтрокаОписанияРеквизитовГосРегистрации = СтрЗаменить(
		СтрокаОписанияРеквизитовГосРегистрации, 
		"%НомерРегистрации%",
		?(ЗначениеЗаполнено(Форма.Объект.НомерРегистрации),
			Форма.Объект.НомерРегистрации, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	СтрокаОписанияРеквизитовГосРегистрации = СтрЗаменить(
		СтрокаОписанияРеквизитовГосРегистрации, 
		"%КемЗарегистрирована%",
		?(ЗначениеЗаполнено(Форма.Объект.КемЗарегистрирована),
			Форма.Объект.КемЗарегистрирована, 
			НСтр("ru='не указано';uk='не вказано'")
		)
	);
	
	Форма.Элементы.ДекорацияОписаниеГосРегистрация.Заголовок = СтрокаОписанияРеквизитовГосРегистрации;
	
КонецПроцедуры

#КонецОбласти
//-- Локализация

#КонецОбласти