
#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииВыбораДокументаРасчетов

// Заполнение данных выбора основания платежа.
//
// Параметры:
//		ДанныеВыбора - СписокЗначений - Заполняемые данные выбора.
//		СтруктураОтбора - Структура - Отбор.
//		ВводПоСтроке - Булево - Признак того, что происходит ввод по строке.
//
Процедура ЗаполнитьДанныеВыбораОснованияПлатежа(ДанныеВыбора, СтруктураОтбора, ВводПоСтроке = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыбораОснованияПлатежа();
	
	УсловияЗапроса = Новый Массив;
	УсловияЗапроса.Добавить("ГДЕ ИСТИНА");
	
	Если СтруктураОтбора.Свойство("Организация") И ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
		УсловияЗапроса.Добавить("ОбъектыРасчетов.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", СтруктураОтбора.Организация);
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ТипРасчетов") И ЗначениеЗаполнено(СтруктураОтбора.ТипРасчетов) Тогда
		УсловияЗапроса.Добавить("ОбъектыРасчетов.ТипРасчетов = &ТипРасчетов");
		Запрос.УстановитьПараметр("ТипРасчетов", СтруктураОтбора.ТипРасчетов);
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Контрагент") И ЗначениеЗаполнено(СтруктураОтбора.Контрагент) Тогда
		УсловияЗапроса.Добавить("ОбъектыРасчетов.Контрагент = &Контрагент");
		Запрос.УстановитьПараметр("Контрагент", СтруктураОтбора.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОтбора.Текст) Тогда
		Если ВводПоСтроке Тогда
			Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтруктураОтбора.Текст + "%");
			УсловияЗапроса.Добавить("ОбъектыРасчетов.Номер ПОДОБНО &СтрокаПоиска");
		Иначе
			Запрос.УстановитьПараметр("СтрокаПоиска", СтруктураОтбора.Текст);
			УсловияЗапроса.Добавить("ОбъектыРасчетов.Номер В (&СтрокаПоиска)");
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "// Условия", СтрСоединить(УсловияЗапроса, " И "));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначениеВыбора = Новый Структура(
			"ОснованиеПлатежа, ОбъектРасчетов, Партнер, Контрагент, ВалютаВзаиморасчетов");
		ЗаполнитьЗначенияСвойств(ЗначениеВыбора, Выборка);
		
		ДанныеВыбора.Добавить(
			Новый Структура("Значение, ПометкаУдаления", ЗначениеВыбора, Выборка.Состояние = 0),
			Строка(Выборка.ОснованиеПлатежа));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияДокументов

// Процедура заполнения табличной части "РасшифровкаПлатежа" по заказу клиента.
//
// Параметры:
//	ПараметрыЗаполнения - Структура - Функция-конструктор ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу.
//		* Партнер          - СправочникСсылка.Партнеры - Партнер документа-инициатора.
//		* Договор          - СправочникСсылка.ДоговорыКонтрагентов - Договор объекта расчетов.
//		* ЗаказКлиента     - ДокументСсылка.ЗаказКлиента - Объект расчетов.
//		* ВалютаДокумента  - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//		* ОснованиеПлатежа - ДокументСсылка - Документ-основание.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//	Организация - СправочникСсылка.Организации - Организация, осуществляющая продажу.
//	СуммаКОплате - Число - Сумма к оплате, если известна.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(ПараметрыЗаполнения, РасшифровкаПлатежа, СуммаКОплате = 0, Организация = Неопределено) Экспорт
	
	ЗаказКлиента     = ПараметрыЗаполнения.ЗаказКлиента;
	Договор          = ПараметрыЗаполнения.Договор;
	ВалютаДокумента  = ПараметрыЗаполнения.ВалютаДокумента;
	Партнер          = ПараметрыЗаполнения.Партнер;
	ОснованиеПлатежа = ПараметрыЗаполнения.ОснованиеПлатежа;

	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		ЭтоЗаказ = ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента")
			ИЛИ ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
			ИЛИ ТипЗнч(ЗаказКлиента) = Тип("Массив");
			
		Если ТипЗнч(ЗаказКлиента) = Тип("Массив") Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента[0], "ПорядокРасчетов");
		Иначе
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "ПорядокРасчетов");
		КонецЕсли;
		
		Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") ИЛИ НЕ ЭтоЗаказ) Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РасчетыСКлиентами.Период КАК Период,
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ВЫРАЗИТЬ(РасчетыСКлиентами.ОбъектРасчетов.Объект КАК Справочник.ДоговорыКонтрагентов).СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	Аналитика.Партнер КАК Партнер,
			|	РасчетыСКлиентами.Валюта КАК Валюта,
			|	СУММА(РасчетыСКлиентами.КОплате) КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ТаблицаКОплате
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|			И (&Организация = Аналитика.Организация
			|				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			|ГДЕ
			|	РасчетыСКлиентами.Активность
			|	И РасчетыСКлиентами.Регистратор В(&ЗаказКлиента)
			|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И РасчетыСКлиентами.КОплате > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСКлиентами.Период,
			|	РасчетыСКлиентами.ОбъектРасчетов,
			|	РасчетыСКлиентами.ОбъектРасчетов.Объект.СтатьяДвиженияДенежныхСредств,
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентами.Валюта,
			|	Аналитика.Партнер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ТекущаяДата,
			|	Аналитика.КлючАналитики,
			|	ОбъектыРасчетов.Ссылка,
			|	ДанныеДоговора.СтатьяДвиженияДенежныхСредств,
			|	ДанныеДоговора.Партнер,
			|	ДанныеДоговора.ВалютаВзаиморасчетов,
			|	0
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ДанныеДоговора.Партнер = Аналитика.Партнер
			|			И ДанныеДоговора.Контрагент = Аналитика.Контрагент
			|			И ДанныеДоговора.Организация = Аналитика.Организация
			|			И ДанныеДоговора.Ссылка = Аналитика.Договор
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|			ПО ДанныеДоговора.Ссылка = ОбъектыРасчетов.Объект
			|ГДЕ
			|	ДанныеДоговора.Ссылка В(&ЗаказКлиента)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаКОплате.Период) КАК Период,
			|	ТаблицаКОплате.ОбъектРасчетов.Объект КАК ОснованиеПлатежа,
			|	ТаблицаКОплате.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер КАК Партнер,
			|	ТаблицаКОплате.Валюта КАК ВалютаВзаиморасчетов,
			|	ВЫБОР
			|		КОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику) > 0
			|				И СУММА(ТаблицаКОплате.СуммаПоГрафику) <= МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
			|			ТОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику)
			|		ИНАЧЕ МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
			|	КОНЕЦ КАК СуммаПоГрафику,
			|	СУММА(0) КАК СуммаОплаты
			|ИЗ
			|	ТаблицаКОплате КАК ТаблицаКОплате
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
			|				,
			|				(АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта) В
			|					(ВЫБРАТЬ
			|						ТаблицаКОплате.АналитикаУчетаПоПартнерам,
			|						ТаблицаКОплате.ОбъектРасчетов,
			|						ТаблицаКОплате.Валюта
			|					ИЗ
			|						ТаблицаКОплате)) КАК РасчетыСКлиентамиОстатки
			|		ПО ТаблицаКОплате.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам
			|			И ТаблицаКОплате.ОбъектРасчетов = РасчетыСКлиентамиОстатки.ОбъектРасчетов
			|			И ТаблицаКОплате.Валюта = РасчетыСКлиентамиОстатки.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаКОплате.ОбъектРасчетов,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер,
			|	ТаблицаКОплате.Валюта
			|ИТОГИ ПО
			|	ОснованиеПлатежа";
			
		ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
			И ЭтоЗаказ
			И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
			|	ОбъектыРасчетов.Объект КАК Объект
			|ПОМЕСТИТЬ ВТОбъектыРасчетов
			|ИЗ 
			|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|ГДЕ
			|	ОбъектыРасчетов.Объект В (&ЗаказКлиента)
			|;
			|ВЫБРАТЬ
			|	Заказ.Ссылка КАК ОснованиеПлатежа,
			|	ОбъектыРасчетов.ОбъектРасчетов КАК ОбъектРасчетов,
			|	Аналитика.Партнер КАК Партнер,
			|	Заказ.Соглашение КАК Соглашение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(Заказ.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(Заказ.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ Заказ.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	ЭтапыОплатыЗаказа.ДатаПлатежа КАК Период,
			|	Заказ.Валюта КАК ВалютаВзаиморасчетов,
			|	Заказ.ФормаОплаты КАК ФормаОплаты,
			|	ЭтапыОплатыЗаказа.НомерСтроки КАК НомерСтроки,
			|	ЭтапыОплатыЗаказа.СуммаПлатежа + ЭтапыОплатыЗаказа.СуммаЗалогаЗаТару КАК СуммаПоГрафику,
			|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаРасход, 0) КАК СуммаОплаты
			|ИЗ
			|	Документ.ЗаказКлиента КАК Заказ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыОплатыЗаказа
			|		ПО Заказ.Ссылка = ЭтапыОплатыЗаказа.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО Заказ.Партнер = Аналитика.Партнер
			|			И Заказ.Контрагент = Аналитика.Контрагент
			|			И Заказ.Организация = Аналитика.Организация
			|			И Заказ.Договор = Аналитика.Договор
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
			|		ПО ОбъектыРасчетов.Объект = Заказ.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ОбъектРасчетов В (ВЫБРАТЬ ОбъектРасчетов ИЗ ВТОбъектыРасчетов)) КАК РасчетыСКлиентамиОбороты
			|		ПО ОбъектыРасчетов.ОбъектРасчетов = РасчетыСКлиентамиОбороты.ОбъектРасчетов
			|ГДЕ
			|	Заказ.Ссылка В(&ЗаказКлиента)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка,
			|	ОбъектыРасчетов.ОбъектРасчетов КАК ОбъектРасчетов,
			|	Аналитика.Партнер,
			|	ЗаявкаНаВозвратТоваровОтКлиента.Соглашение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ЗаявкаНаВозвратТоваровОтКлиента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(ЗаявкаНаВозвратТоваровОтКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ ЗаявкаНаВозвратТоваровОтКлиента.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ,
			|	ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.ДатаПлатежа,
			|	ЗаявкаНаВозвратТоваровОтКлиента.Валюта,
			|	ЗаявкаНаВозвратТоваровОтКлиента.ФормаОплаты,
			|	ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
			|	ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.СуммаПлатежа + ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.СуммаЗалогаЗаТару,
			|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаРасход, 0)
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЭтапыГрафикаОплаты КАК ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты
			|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Партнер = Аналитика.Партнер
			|			И ЗаявкаНаВозвратТоваровОтКлиента.Контрагент = Аналитика.Контрагент
			|			И ЗаявкаНаВозвратТоваровОтКлиента.Организация = Аналитика.Организация
			|			И ЗаявкаНаВозвратТоваровОтКлиента.Договор = Аналитика.Договор
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
			|		ПО ОбъектыРасчетов.Объект = ЗаявкаНаВозвратТоваровОтКлиента.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ОбъектРасчетов В (ВЫБРАТЬ Объект ИЗ ВТОбъектыРасчетов)) КАК РасчетыСКлиентамиОбороты
			|		ПО ОбъектыРасчетов.ОбъектРасчетов = РасчетыСКлиентамиОбороты.ОбъектРасчетов
			|ГДЕ
			|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка В(&ЗаказКлиента)
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|ИТОГИ ПО
			|	ОснованиеПлатежа";
		Иначе
				
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
			|	ОбъектыРасчетов.Объект КАК Объект
			|ПОМЕСТИТЬ ВТОбъектыРасчетов
			|ИЗ 
			|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|ГДЕ
			|	ОбъектыРасчетов.Объект В (&ЗаказКлиента)
			|;
			|ВЫБРАТЬ
			|	РасчетыСКлиентами.ОбъектРасчетов.Объект КАК ОснованиеПлатежа,
			|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
			|	Аналитика.Партнер КАК Партнер,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.ОбъектРасчетов.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.ОбъектРасчетов.Объект.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ РасчетыСКлиентами.ОбъектРасчетов.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	РасчетыСКлиентами.Период КАК Период,
			|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
			|	РасчетыСКлиентами.ФормаОплаты КАК ФормаОплаты,
			|	РасчетыСКлиентами.КОплате КАК СуммаПоГрафику,
			|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеРасход, 0) + ЕСТЬNULL(РасчетыСКлиентамиОбороты.ОплачиваетсяОборот, 0) КАК СуммаОплаты
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , Период, ) КАК РасчетыСКлиентамиОбороты
			|		ПО РасчетыСКлиентами.ОбъектРасчетов = РасчетыСКлиентамиОбороты.ОбъектРасчетов
			|			И РасчетыСКлиентами.Валюта = РасчетыСКлиентамиОбороты.Валюта
			|			И РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиОбороты.АналитикаУчетаПоПартнерам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|			И (&Организация = Аналитика.Организация
			|				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
			|		ПО РасчетыСКлиентами.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
			|ГДЕ
			|	РасчетыСКлиентами.Активность
			|	И РасчетыСКлиентами.ОбъектРасчетов В(ВЫБРАТЬ ОбъектРасчетов ИЗ ВТОбъектыРасчетов)
			|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И РасчетыСКлиентами.КОплате > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	РасчетыСКлиентами.Период,
			|	РасчетыСКлиентами.НомерСтроки
			|ИТОГИ ПО
			|	ОснованиеПлатежа";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
		Запрос.УстановитьПараметр("ПоДоговорам", ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("Организация", Организация);
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		
		ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			СуммаПоГрафикуВсего = 0;
			УчтеноСуммаОплаты = 0;
		
			Выборка = ВыборкаПоЗаказам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Найдем первый неоплаченный этап.
				Если (Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего) > Выборка.СуммаОплаты Тогда
					
					НоваяСтрока = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.ОснованиеПлатежа = ОснованиеПлатежа;
					Если Не ЗначениеЗаполнено(НоваяСтрока.ОснованиеПлатежа) Тогда
						НоваяСтрока.ОснованиеПлатежа = Выборка.ОснованиеПлатежа;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
					
					НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего - (Выборка.СуммаОплаты + УчтеноСуммаОплаты);
					
					Если СуммаКОплате <> 0 Тогда
						НоваяСтрока.СуммаВзаиморасчетов = Мин(НоваяСтрока.СуммаВзаиморасчетов, СуммаКОплате);
						СуммаКОплате = СуммаКОплате - НоваяСтрока.СуммаВзаиморасчетов;
						УчтеноСуммаОплаты = УчтеноСуммаОплаты + НоваяСтрока.СуммаВзаиморасчетов;
						СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					КонецЕсли;
					
					Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
					НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
					
					Если СуммаКОплате = 0 Тогда
						Прервать;
					КонецЕсли;
					
				Иначе
					СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			Если ТипЗнч(ЗаказКлиента) <> Тип("Массив") Тогда
				НоваяСтрока.ОснованиеПлатежа = ЗаказКлиента;
				НоваяСтрока.ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
					?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов, Договор, ЗаказКлиента));
				НоваяСтрока.Партнер = Партнер;
				Если ЗначениеЗаполнено(Договор) Тогда
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
				КонецЕсли;
			КонецЕсли;
		Иначе
			РасшифровкаПлатежа.Свернуть("ОснованиеПлатежа, ОбъектРасчетов, СтатьяДвиженияДенежныхСредств, Партнер, ВалютаВзаиморасчетов", "Сумма, СуммаВзаиморасчетов");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по счету на оплату.
//
// Параметры:
//	СчетНаОплату - ДокументСсылка.СчетНаОплатуКлиенту - Документ - основание.
//	ЗаказКлиента - ДокументСсылка.ЗаказКлиента - Заказ.
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоСчетуНаОплату(СчетНаОплату, ЗаказКлиента, ВалютаДокумента, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ЗаказКлиента);
	
	// Заполнение табличной части "Расшифровка платежа"
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.СчетНаОплату,
	|	СУММА(
	|		ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			РасчетыСКлиентами.Сумма
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|		) КАК СуммаОплаты
	|ПОМЕСТИТЬ ВтРасчетыПоСчету
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И РасчетыСКлиентами.СчетНаОплату = &СчетНаОплату
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.СчетНаОплату
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетыСКлиентами.СчетНаОплату
	|;
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Ссылка КАК ОснованиеПлатежа,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	
	|	СчетНаОплатуКлиенту.ДокументОснование.Партнер КАК Партнер,
	|	СчетНаОплатуКлиенту.ДокументОснование.Соглашение КАК Соглашение,
	|	
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		СчетНаОплатуКлиенту.Договор.СтатьяДвиженияДенежныхСредств
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ЕСТЬNULL(СчетНаОплатуКлиенту.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
	|			ВЫРАЗИТЬ(СчетНаОплатуКлиенту.ДокументОснование.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
	|		ИНАЧЕ
	|			СчетНаОплатуКлиенту.Договор.СтатьяДвиженияДенежныхСредств
	|		КОНЕЦ
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
	|	
	|	ЕСТЬNULL(
	|		СчетНаОплатуКлиенту.ДокументОснование.ВалютаВзаиморасчетов, 
	|		СчетНаОплатуКлиенту.ДокументОснование.Валюта
	|	) КАК ВалютаВзаиморасчетов,
	|
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Справочник.ДоговорыКонтрагентов
	|	 ИЛИ СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|	КОГДА СчетНаОплатуКлиенту.СуммаДокумента >
	|			ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток, 0) ТОГДА
	|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток, 0)
	|	КОГДА СчетНаОплатуКлиенту.СуммаДокумента > ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0) ТОГДА
	|		СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетыПоСчету КАК РасчетыСКлиентами
	|	ПО
	|		СчетНаОплатуКлиенту.Ссылка = РасчетыСКлиентами.СчетНаОплату
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентами.Остатки(, 
	|			ОбъектРасчетов = &ОбъектРасчетов
	|		) КАК РасчетыСКлиентамиОстатки
	|	ПО
	|		ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ВЫБОР КОГДА СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Документ.ЗаказКлиента
	|			И СчетНаОплатуКлиенту.ДокументОснование.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|			ТОГДА СчетНаОплатуКлиенту.ДокументОснование
	|		КОГДА СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) 
	|			ТОГДА СчетНаОплатуКлиенту.Договор
	|			ИНАЧЕ СчетНаОплатуКлиенту.ДокументОснование
	|		КОНЕЦ = ОбъектыРасчетов.Объект
	|		И ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|		
	|ГДЕ
	|	СчетНаОплатуКлиенту.Ссылка = &СчетНаОплату
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	
	СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
		КонецЕсли;
		
		Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
		НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СчетНаОплату = СчетНаОплату;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по возврату товаров от клиента.
//
// Параметры:
//	Объекты - ДокументСсылка, Массив из ДокументСсылка - Документ основание.
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//	СуммаДокумента - Число - Сумма документа - основания.
//	Партнер - СправочникСсылка.Партнеры - Партнер документа - основания.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(Объекты, ВалютаДокумента, СуммаДокумента, Партнер, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Объект КАК Объект,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ВТОбъектыРасчетов
		|ИЗ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Объект В (&Объекты)
		|;
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
		|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
		|	(-РасчетыСКлиентами.КОплатеОстаток) КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(,
		|		ОбъектРасчетов В (ВЫБРАТЬ ОбъектРасчетов ИЗ ВТОбъектыРасчетов)
		|	) КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.КОплатеОстаток < 0
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР КОГДА РасчетыСКлиентами.ОбъектРасчетов.Объект ССЫЛКА Документ.ВозвратТоваровОтКлиента ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ
		|");
		
		Запрос.УстановитьПараметр("Объекты", Объекты);
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
			Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Партнер = Партнер;
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
			
			Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
			
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			Если Сумма <= СуммаДокумента Тогда
				НоваяСтрока.Сумма = Сумма;
			Иначе
				НоваяСтрока.Сумма = СуммаДокумента;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		Иначе
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер = Партнер;
			НоваяСтрока.Сумма = СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по заказу поставщику.
//
// Параметры:
//	ЗаказПоставщику - ДокументСсылка.ЗаказПоставщику - Документ - основание.
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор для заполнения.
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//	СуммаКОплате - Число - Сумма к оплате поставщику.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//	ЖелательнаяДатаПлатежа - Дата - Дата платежа по графику.
//  Организация - СправочникСсылка.Организации - Организация, осуществляющая закупку.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(ЗаказПоставщику, Договор, ВалютаДокумента, Знач СуммаКОплате, РасшифровкаПлатежа, ЖелательнаяДатаПлатежа = Неопределено, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Если ТипЗнч(ЗаказПоставщику) = Тип("Массив") Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику[0], "ПорядокРасчетов");
		Иначе
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "ПорядокРасчетов");
		КонецЕсли;
		
		Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
			И ТипЗнч(ЗаказПоставщику) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	РасчетыСПоставщиками.Период					   КАК Период,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщиками.ОбъектРасчетов            КАК ОбъектРасчетов,
			|	РасчетыСПоставщиками.ОбъектРасчетов.Соглашение.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	Аналитика.Партнер							   КАК Партнер,
			|	РасчетыСПоставщиками.Валюта					   КАК Валюта,
			|	СУММА(РасчетыСПоставщиками.КОплате)			   КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ТаблицаКОплате
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|		И (&Организация = Аналитика.Организация
			|			ИЛИ &Организация = Неопределено)
			|ГДЕ
			|	РасчетыСПоставщиками.Активность
			|	И РасчетыСПоставщиками.Регистратор В (&ЗаказПоставщику)
			|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И РасчетыСПоставщиками.КОплате > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСПоставщиками.Период,
			|	РасчетыСПоставщиками.ОбъектРасчетов,
			|	РасчетыСПоставщиками.ОбъектРасчетов.Соглашение.СтатьяДвиженияДенежныхСредств,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщиками.Валюта,
			|	Аналитика.Партнер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ТекущаяДата КАК Период,
			|	Аналитика.КлючАналитики КАК АналитикаУчетаПоПартнерам,
			|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
			|	ДанныеДоговора.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ДанныеДоговора.Партнер КАК Партнер,
			|	ДанныеДоговора.ВалютаВзаиморасчетов КАК Валюта,
			|	0 КАК СуммаПоГрафику
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ДанныеДоговора.Партнер = Аналитика.Партнер
			|			И ДанныеДоговора.Контрагент = Аналитика.Контрагент
			|			И ДанныеДоговора.Организация = Аналитика.Организация
			|			И ДанныеДоговора.Ссылка = Аналитика.Договор
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|			ПО ДанныеДоговора.Ссылка = ОбъектыРасчетов.Объект
			|ГДЕ
			|	ДанныеДоговора.Ссылка В (&ЗаказПоставщику)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаКОплате.Период) КАК Период,
			|	ТаблицаКОплате.ОбъектРасчетов  КАК ОбъектРасчетов,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер		   КАК Партнер,
			|	ТаблицаКОплате.Валюта		   КАК ВалютаВзаиморасчетов,
			|
			|	ВЫБОР
			|		КОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику) > 0 И СУММА(ТаблицаКОплате.СуммаПоГрафику) <=
			|				МАКСИМУМ(РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток-РасчетыСПоставщикамиОстатки.КОплатеОстаток)
			|			ТОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику)
			|		ИНАЧЕ МАКСИМУМ(РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток-РасчетыСПоставщикамиОстатки.КОплатеОстаток)
			|	КОНЕЦ КАК СуммаПоГрафику,
			|	СУММА(0) КАК СуммаОплаты
			|
			|ИЗ
			|	ТаблицаКОплате КАК ТаблицаКОплате
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|				,
			|				(АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта) В
			|					(ВЫБРАТЬ
			|						ТаблицаКОплате.АналитикаУчетаПоПартнерам,
			|						ТаблицаКОплате.ОбъектРасчетов,
			|						ТаблицаКОплате.Валюта
			|					ИЗ
			|						ТаблицаКОплате)) КАК РасчетыСПоставщикамиОстатки
			|		ПО ТаблицаКОплате.АналитикаУчетаПоПартнерам = РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам
			|			И ТаблицаКОплате.ОбъектРасчетов = РасчетыСПоставщикамиОстатки.ОбъектРасчетов
			|			И ТаблицаКОплате.Валюта = РасчетыСПоставщикамиОстатки.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаКОплате.ОбъектРасчетов,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер,
			|	ТаблицаКОплате.Валюта
			|
			|ИТОГИ ПО
			|	ТаблицаКОплате.ОбъектРасчетов
			|";
			
		Иначе
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
			|	ОбъектыРасчетов.Объект КАК Объект
			|ПОМЕСТИТЬ ВТОбъектыРасчетов
			|ИЗ 
			|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|ГДЕ
			|	ОбъектыРасчетов.Объект В (&ЗаказПоставщику)
			|; 
			|ВЫБРАТЬ
			|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	Аналитика.Партнер КАК Партнер,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОбъектыРасчетов.Объект.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(ОбъектыРасчетов.Объект.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ ОбъектыРасчетов.Объект.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	РасчетыСПоставщиками.Период КАК Период,
			|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
			|	РасчетыСПоставщиками.ФормаОплаты КАК ФормаОплаты,
			|	СУММА(РасчетыСПоставщиками.КОплате) КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ЭтапыОплаты
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|			И (&Организация = Аналитика.Организация
			|				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
			|			ПО РасчетыСПоставщиками.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
			|ГДЕ
			|	РасчетыСПоставщиками.Активность
			|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И РасчетыСПоставщиками.КОплате > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСПоставщиками.ОбъектРасчетов,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
			|	Аналитика.Партнер,
			|	РасчетыСПоставщиками.Период,
			|	РасчетыСПоставщиками.Валюта,
			|	РасчетыСПоставщиками.ФормаОплаты,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОбъектыРасчетов.Объект.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(ОбъектыРасчетов.Объект.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ ОбъектыРасчетов.Объект.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭтапыОплаты.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ЭтапыОплаты.Партнер,
			|	ЭтапыОплаты.СтатьяДвиженияДенежныхСредств,
			|	ЭтапыОплаты.Период,
			|	ЭтапыОплаты.ВалютаВзаиморасчетов,
			|	ЭтапыОплаты.ФормаОплаты,
			|	ЭтапыОплаты.СуммаПоГрафику,
			|	СУММА(ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КОплатеПриход, 0) -
			|		ЕСТЬNULL(РасчетыСПоставщикамиОбороты.ОплачиваетсяОборот, 0)) КАК СуммаОплаты
			|ИЗ
			|	ЭтапыОплаты КАК ЭтапыОплаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Обороты(, , Период, ) КАК РасчетыСПоставщикамиОбороты
			|		ПО (РасчетыСПоставщикамиОбороты.ОбъектРасчетов = ЭтапыОплаты.ОбъектРасчетов)
			|			И (РасчетыСПоставщикамиОбороты.Валюта = ЭтапыОплаты.ВалютаВзаиморасчетов)
			|			И (РасчетыСПоставщикамиОбороты.АналитикаУчетаПоПартнерам = ЭтапыОплаты.АналитикаУчетаПоПартнерам)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭтапыОплаты.ОбъектРасчетов,
			|	ЭтапыОплаты.Партнер,
			|	ЭтапыОплаты.СтатьяДвиженияДенежныхСредств,
			|	ЭтапыОплаты.Период,
			|	ЭтапыОплаты.ВалютаВзаиморасчетов,
			|	ЭтапыОплаты.ФормаОплаты,
			|	ЭтапыОплаты.СуммаПоГрафику
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтапыОплаты.Период
			|ИТОГИ ПО
			|	ОбъектРасчетов";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		
		ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			СуммаПоГрафикуВсего = 0;
			УчтеноСуммаОплаты = 0;
			
			Выборка = ВыборкаПоЗаказам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Найдем первый неоплаченный этап.
				Если (Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего) > Выборка.СуммаОплаты
				 ИЛИ СуммаКОплате <> 0 Тогда
					
					НоваяСтрока = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
					НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего - (Выборка.СуммаОплаты + УчтеноСуммаОплаты);
					Если СуммаКОплате <> 0 Тогда
						НоваяСтрока.СуммаВзаиморасчетов = Мин(НоваяСтрока.СуммаВзаиморасчетов, СуммаКОплате);
						СуммаКОплате = СуммаКОплате - НоваяСтрока.СуммаВзаиморасчетов;
						УчтеноСуммаОплаты = УчтеноСуммаОплаты + НоваяСтрока.СуммаВзаиморасчетов;
						СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					КонецЕсли;
					
					Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
					
					НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
					
					Если ЗначениеЗаполнено(ЖелательнаяДатаПлатежа) Тогда
						ЖелательнаяДатаПлатежа = Мин(ЖелательнаяДатаПлатежа, Выборка.Период);
					Иначе
						ЖелательнаяДатаПлатежа = Выборка.Период;
					КонецЕсли;
					
					Если СуммаКОплате = 0 Тогда
						Прервать;
					КонецЕсли;
					
				Иначе
					
					СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			Если ТипЗнч(ЗаказПоставщику) <> Тип("Массив") Тогда
				
				Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					
					НоваяСтрока.ОбъектРасчетов	= ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Договор);
					РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Партнер, СтатьяДвиженияДенежныхСредств");
					НоваяСтрока.Партнер = РеквизитыДоговора.Партнер;
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.СтатьяДвиженияДенежныхСредств;
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
				Иначе
					
					НоваяСтрока.ОбъектРасчетов	= ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ЗаказПоставщику);
					НоваяСтрока.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "Партнер");
					Если ЗначениеЗаполнено(Договор) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
					КонецЕсли;
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			РасшифровкаПлатежа.Свернуть("ОбъектРасчетов, Партнер, СтатьяДвиженияДенежныхСредств, ВалютаВзаиморасчетов", "Сумма, СуммаВзаиморасчетов");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по возврату поставщику.
//
// Параметры:
//	Объекты - ДокументСсылка, Массив из ДокументСсылка - Документ основание.
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//	СуммаДокумента - Число - Сумма документа - основания.
//	Партнер - СправочникСсылка.Партнеры - Партнер документа - основания.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоВозвратуПоставщику(Объекты, ВалютаДокумента, СуммаДокумента, Партнер, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Объект КАК Объект,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.Договор КАК Договор
		|ПОМЕСТИТЬ ВТОбъектыРасчетов
		|ИЗ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Объект В (&Объекты)
		|;
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Объект КАК ОснованиеПлатежа,
		|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Справочник.ДоговорыКонтрагентов) ТОГДА
		|		ОбъектыРасчетов.Объект.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ВЫБОР
		|			КОГДА ОбъектыРасчетов.Договор.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
		|				ТОГДА ВЫРАЗИТЬ(ОбъектыРасчетов.Объект.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
		|			ИНАЧЕ ОбъектыРасчетов.Договор.СтатьяДвиженияДенежныхСредств
		|		КОНЕЦ
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
		|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
		|	РасчетыСПоставщиками.КОплатеОстаток КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,
		|		ОбъектРасчетов В (ВЫБРАТЬ ОбъектРасчетов ИЗ ВТОбъектыРасчетов)
		|	) КАК РасчетыСПоставщиками
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ОбъектыРасчетов.ОбъектРасчетов = РасчетыСПоставщиками.ОбъектРасчетов
		|ГДЕ
		|	РасчетыСПоставщиками.КОплатеОстаток > 0
		|");
		
		Запрос.УстановитьПараметр("Объекты", Объекты);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Партнер = Партнер;
			
			Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
			
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			Если Сумма <= СуммаДокумента Тогда
				НоваяСтрока.Сумма = Сумма;
			Иначе
				НоваяСтрока.Сумма = СуммаДокумента;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по договору.
//
// Параметры:
//		Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор для получения остатков.
//		ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
//		РасшифровкаПлатежа - ТаблицаЗначений - Таблица для заполнения.
//		Организация - СправочникСсылка.Организации - Необязательное, организация для получения остатков расчетов.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоДоговоруСПоставщиком(Договор, ВалютаДокумента, РасшифровкаПлатежа, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.ОбъектРасчетов, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) КАК ОбъектРасчетов,
		|	ЕСТЬNULL(Аналитика.Партнер, ДанныеДоговора.Партнер) КАК Партнер,
		|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.Валюта, ДанныеДоговора.ВалютаВзаиморасчетов) КАК ВалютаВзаиморасчетов,
		|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток - РасчетыСПоставщикамиОстатки.КОплатеОстаток, 0) КАК СуммаВзаиморасчетов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, ОбъектРасчетов.Объект = &Договор) КАК РасчетыСПоставщикамиОстатки
		|	ПО
		|		ИСТИНА
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
		|			И (&Организация = Аналитика.Организация
		|				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
		|ГДЕ
		|	ДанныеДоговора.Ссылка = &Договор
		|");
		
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
			Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
		КонецЕсли;
		
		Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
		НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0,
			НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает результат запроса по остаткам расчетов с партнером.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа.
//	Контрагент - СправочникСсылка.Контрагенты - Контрагент, выбранный в документе.
//	ТипЗадолженности - ПеречислениеСсылка.ТипыЗадолженности - Тип задолженности.
//	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов.
//	Дата - Дата - Дата документа.
//	Валюта - СправочникСсылка.Валюты - Валюта документа.
//	Задолженность - ДанныеФормыКоллекция - Табличная часть документа.
//
Процедура ЗаполнитьЗадолженностьПоОстаткам(Организация, Контрагент, ТипЗадолженности, ТипРасчетов, Дата, Валюта, Задолженность) Экспорт
	
	ТекстРасчетыСКлиентами = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентамиОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиОстатки.ОбъектРасчетов.Дата КАК Дата,
	|	РасчетыСКлиентамиОстатки.ОбъектРасчетов.Номер КАК Номер,
	|	РасчетыСКлиентамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСКлиентамиОстатки.СуммаОстаток
	|	ИНАЧЕ
	|		РасчетыСКлиентамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	0 КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|			ГДЕ
	|				РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|				И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|			)
	|		) КАК РасчетыСКлиентамиОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО 
	|		РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		И РасчетыСКлиентамиОстатки.СуммаОстаток >= 0
	|	ТОГДА
	|		ИСТИНА
	|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		И РасчетыСКлиентамиОстатки.СуммаОстаток <= 0
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ";
	
	ТекстРасчетыСПоставщиками = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов.Дата КАК Дата,
	|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов.Номер КАК Номер,
	|	РасчетыСПоставщикамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСПоставщикамиОстатки.СуммаОстаток
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	0 КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|			ГДЕ
	|				РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|				И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|			)
	|		) КАК РасчетыСПоставщикамиОстатки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО 
	|		РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская) 
	|		И РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	|	ТОГДА
	|		ИСТИНА
	|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		И РасчетыСПоставщикамиОстатки.СуммаОстаток <= 0
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ";
	
	ТекстЗапроса = "";
	
	Если Не ЗначениеЗаполнено(ТипРасчетов) Тогда
		
		ТекстЗапроса = ТекстРасчетыСКлиентами + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + ТекстРасчетыСПоставщиками;
		
	ИначеЕсли ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
		ТекстЗапроса = ТекстРасчетыСКлиентами;
	Иначе //РасчетыСПоставщиком
		ТекстЗапроса = ТекстРасчетыСПоставщиками;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МоментВремени = КонецДня(Дата);
	Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Граница", Граница);
	Запрос.УстановитьПараметр("ТипЗадолженности", ТипЗадолженности);
	
	СоответствиеВалютаКурс = Новый Соответствие;
	
	Задолженность.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Валюта)
		 И Валюта <> Выборка.ВалютаВзаиморасчетов Тогда
		 
			Коэффициенты = СоответствиеВалютаКурс.Получить(Выборка.ВалютаВзаиморасчетов);
			Если Коэффициенты = Неопределено Тогда
				Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Валюта, Выборка.ВалютаВзаиморасчетов, МоментВремени);
				СоответствиеВалютаКурс.Вставить(Выборка.ВалютаВзаиморасчетов, Коэффициенты);
			КонецЕсли;
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, Выборка.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			
		Иначе
			Сумма = Выборка.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			НоваяСтрока = Задолженность.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Сумма = Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура получает результат запроса по остаткам расчетов с партнером по документам.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа.
//	Контрагент - СправочникСсылка.Контрагенты - Контрагент, выбранный в документе.
//	ТипЗадолженности - ПеречислениеСсылка.ТипыЗадолженности - Тип задолженности.
//	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов.
//	Дата - Дата - Дата документа.
//	Валюта - СправочникСсылка.Валюты - Валюта документа.
//	Задолженность - ДанныеФормыКоллекция - Табличная часть документа.
//
Процедура ЗаполнитьЗадолженностьПоОстаткамВзаиморасчетов(Организация, Контрагент, ТипЗадолженности, ТипРасчетов, Дата, Валюта, Задолженность) Экспорт
	
	Задолженность.Очистить();
	
	ТекстВтАналитика = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
	|	И Организации.ОбособленноеПодразделение
	|	ИЛИ Организации.Ссылка = &Организация
	|;
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|ПОМЕСТИТЬ ВтАналитика
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОрганизации
	|			ПО ВтОрганизации.Ссылка = РегистрАналитикаУчетаПоПартнерам.Организация
	|ГДЕ
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		ТекстРасчетыСКлиентами = 
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
		|	РегистрАналитикаУчетаПоПартнерам.Партнер     КАК Партнер,
		|	РегистрАналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента        КАК ОбъектРасчетов,
		|	РасчетыСКлиентамиОстатки.Валюта              КАК ВалютаВзаиморасчетов,
		|	РасчетыСКлиентамиОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
		|	
		|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.ДолгОстаток + РасчетыСКлиентамиОстатки.ПредоплатаОстаток < 0 ТОГДА
		|		-(РасчетыСКлиентамиОстатки.ДолгОстаток + РасчетыСКлиентамиОстатки.ПредоплатаОстаток)
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.ДолгОстаток + РасчетыСКлиентамиОстатки.ПредоплатаОстаток
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|
		|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.ДолгРеглОстаток + РасчетыСКлиентамиОстатки.ПредоплатаРеглОстаток < 0 ТОГДА
		|		-(РасчетыСКлиентамиОстатки.ДолгРеглОстаток + РасчетыСКлиентамиОстатки.ПредоплатаРеглОстаток)
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.ДолгРеглОстаток + РасчетыСКлиентамиОстатки.ПредоплатаРеглОстаток
		|	КОНЕЦ КАК СуммаРегл,
		|
		|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.ДолгУпрОстаток + РасчетыСКлиентамиОстатки.ПредоплатаУпрОстаток < 0 ТОГДА
		|		-(РасчетыСКлиентамиОстатки.ДолгУпрОстаток + РасчетыСКлиентамиОстатки.ПредоплатаУпрОстаток)
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.ДолгУпрОстаток + РасчетыСКлиентамиОстатки.ПредоплатаУпрОстаток
		|	КОНЕЦ КАК СуммаУпр
		|
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&Граница,
		|		АналитикаУчетаПоПартнерам В (
		|			ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)
		|		) КАК РасчетыСКлиентамиОстатки
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
		|	ПО 
		|		РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
		|
		|ГДЕ
		|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
		|		И (РасчетыСКлиентамиОстатки.ДолгОстаток > 0 ИЛИ РасчетыСКлиентамиОстатки.ПредоплатаОстаток > 0)
		|	ТОГДА
		|		ИСТИНА
		|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
		|		И (РасчетыСКлиентамиОстатки.ДолгОстаток < 0 ИЛИ РасчетыСКлиентамиОстатки.ПредоплатаОстаток < 0)
		|	ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ";
		
		ТекстРасчетыСПоставщиками = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|	РегистрАналитикаУчетаПоПартнерам.Партнер     КАК Партнер,
		|	РегистрАналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику  КАК ОбъектРасчетов,
		|	РасчетыСПоставщикамиОстатки.Валюта           КАК ВалютаВзаиморасчетов,
		|	РасчетыСПоставщикамиОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
		|	
		|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.ДолгОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаОстаток < 0 ТОГДА
		|		-(РасчетыСПоставщикамиОстатки.ДолгОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаОстаток)
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиОстатки.ДолгОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаОстаток
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	
		|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.ДолгРеглОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаРеглОстаток < 0 ТОГДА
		|		-(РасчетыСПоставщикамиОстатки.ДолгРеглОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаРеглОстаток)
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиОстатки.ДолгРеглОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаРеглОстаток
		|	КОНЕЦ КАК СуммаРегл,
		|
		|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.ДолгУпрОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаУпрОстаток < 0 ТОГДА
		|		-(РасчетыСПоставщикамиОстатки.ДолгУпрОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаУпрОстаток)
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиОстатки.ДолгУпрОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаУпрОстаток
		|	КОНЕЦ КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&Граница,
		|		АналитикаУчетаПоПартнерам В (
		|			ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)
		|		) КАК РасчетыСПоставщикамиОстатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
		|	ПО 
		|		РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
		|
		|ГДЕ
		|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская) 
		|		И (РасчетыСПоставщикамиОстатки.ДолгОстаток > 0 ИЛИ РасчетыСПоставщикамиОстатки.ПредоплатаОстаток > 0)
		|	ТОГДА
		|		ИСТИНА
		|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
		|		И (РасчетыСПоставщикамиОстатки.ДолгОстаток < 0 ИЛИ РасчетыСПоставщикамиОстатки.ПредоплатаОстаток < 0)
		|	ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ";
		
		ТекстЗапроса = "";
		
		Если Не ЗначениеЗаполнено(ТипРасчетов) Тогда
			
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстРасчетыСПоставщиками;
			
		ИначеЕсли ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами;
		Иначе
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСПоставщиками;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		МоментВремени = КонецДня(Дата);
		Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.УстановитьПараметр("ТипЗадолженности", ТипЗадолженности);
		
	Иначе
		
		ТекстРасчетыСКлиентами = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
			|	РегистрАналитикаУчетаПоПартнерам.Партнер     КАК Партнер,
			|	РегистрАналитикаУчетаПоПартнерам.Организация КАК Организация,
			|	РасчетыСКлиентамиОстатки.ОбъектРасчетов      КАК ОбъектРасчетов,
			|	РасчетыСКлиентамиОстатки.Валюта              КАК ВалютаВзаиморасчетов,
			|	
			|	РасчетыСКлиентамиОстатки.ДолгОстаток + РасчетыСКлиентамиОстатки.ПредоплатаОстаток КАК СуммаВзаиморасчетов,
			|	РасчетыСКлиентамиОстатки.ДолгРеглОстаток + РасчетыСКлиентамиОстатки.ПредоплатаРеглОстаток КАК СуммаРегл,
			|	РасчетыСКлиентамиОстатки.ДолгУпрОстаток + РасчетыСКлиентамиОстатки.ПредоплатаУпрОстаток КАК СуммаУпр
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&Граница,
			|		АналитикаУчетаПоПартнерам В (
			|			ВЫБРАТЬ
			|				ВтАналитика.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
			|			ИЗ
			|				ВтАналитика КАК ВтАналитика)
			|		) КАК РасчетыСКлиентамиОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
			|	ПО
			|		РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
			|ГДЕ
			|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
			|		И РасчетыСКлиентамиОстатки.ДолгОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
			|		И РасчетыСКлиентамиОстатки.ПредоплатаОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|	КОНЕЦ";
		
		ТекстРасчетыСПоставщиками = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
			|	РегистрАналитикаУчетаПоПартнерам.Партнер          КАК Партнер,
			|	РегистрАналитикаУчетаПоПартнерам.Организация      КАК Организация,
			|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов   КАК ОбъектРасчетов,
			|	РасчетыСПоставщикамиОстатки.Валюта           КАК ВалютаВзаиморасчетов,
			|	
			|	РасчетыСПоставщикамиОстатки.ДолгОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаОстаток КАК СуммаВзаиморасчетов,
			|	РасчетыСПоставщикамиОстатки.ДолгРеглОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаРеглОстаток КАК СуммаРегл,
			|	РасчетыСПоставщикамиОстатки.ДолгУпрОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаУпрОстаток КАК СуммаУпр
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&Граница,
			|		АналитикаУчетаПоПартнерам В (
			|			ВЫБРАТЬ
			|				ВтАналитика.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
			|			ИЗ
			|				ВтАналитика КАК ВтАналитика)
			|		) КАК РасчетыСПоставщикамиОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
			|	ПО
			|		РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
			|ГДЕ
			|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская) 
			|		И РасчетыСПоставщикамиОстатки.ПредоплатаОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
			|		И РасчетыСПоставщикамиОстатки.ДолгОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|	КОНЕЦ";
		
		Запрос     = Новый Запрос;
		
		МоментВремени = КонецДня(Дата);
		Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.УстановитьПараметр("ТипЗадолженности", ТипЗадолженности);
		
		Если Не ЗначениеЗаполнено(ТипРасчетов) Тогда
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстРасчетыСПоставщиками;
		ИначеЕсли ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			ТекстЗапроса =  ТекстВтАналитика + ТекстРасчетыСКлиентами;
		Иначе
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСПоставщиками;
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	Остатки = Запрос.Выполнить().Выгрузить();
	Остатки.Свернуть("ТипРасчетов, Партнер, Организация, ОбъектРасчетов, ВалютаВзаиморасчетов","СуммаВзаиморасчетов, СуммаРегл, СуммаУпр");
	
	Для Каждого СтрокаОстатков Из Остатки Цикл
		
		НоваяСтрока = Задолженность.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить колонку "Идентификатор строки" в табличной части документа.
//
// Параметры:
//	ТабличнаяЧасть - КоллекцияОбъектовМетаданных - табличная часть документа.
//
Процедура ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ТабличнаяЧасть, ОбъектИзменен = Неопределено) Экспорт
	
	Уникальность = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторСтроки)
			Или Неопределено <> Уникальность.Получить(СтрокаТаблицы.ИдентификаторСтроки) Тогда
			// Идентификатор в строке не заполнен ИЛИ идентификатор встречался ранее
			СтрокаТаблицы.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			ОбъектИзменен = Истина;
		КонецЕсли;
		Уникальность.Вставить(СтрокаТаблицы.ИдентификаторСтроки, СтрокаТаблицы.ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

// Устарела.
// Процедура проверяет корректность заполнения даты платежа в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ для проверки.
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьДатуПлатежа(ДокументОбъект, Отказ) Экспорт
	
	// Дата оплаты должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ДокументОбъект.ДатаПлатежа)
	 И ДокументОбъект.ДатаПлатежа < НачалоДня(ДокументОбъект.Дата) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Дата платежа должна быть не меньше даты документа %1';uk='Дата платежу повинна бути не менше дати документа %1'"),
			Формат(ДокументОбъект.Дата, "ДЛФ=DD"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументОбъект,
			"ДатаПлатежа",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает суммы расшифровки платежа в выбранную валюту.
//
// Параметры:
//		Объект - ДокументОбъект - Документ для пересчета суммы.
//		СуммаВсего - Число - Сумма документа.
//
Процедура ПересчитатьСуммыВВалютуРасшифровкаПлатежа(Объект, СуммаВсего) Экспорт
	
	СуммаДокумента = СуммаВсего;
	ИтогСумма = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
	// Пересчитаем суммы в табличной части документа.
	Если ИтогСумма <> 0 Тогда
		
		Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			
			Сумма = Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1);
			ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
			СуммаДокумента = СуммаДокумента - Сумма;
			СтрокаТаблицы.Сумма = Сумма;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
				Если СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта Тогда
					СтрокаТаблицы.СуммаВзаиморасчетов = 0;
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
				СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет порядок оплаты в иностранной валюте.
//
// Параметры:
//  ВалютаОплаты       - СправочникСсылка.Валюты - Необязательное, валюта предполагаемой оплаты.
//
// Возвращаемое значение:
//  Булево - оплата производится в иностранной валюте.
//
Функция ПолучитьОплатуВВалютеПоУмолчанию(Знач ВалютаОплаты = Неопределено) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если НЕ ЗначениеЗаполнено(ВалютаОплаты) Тогда
		ВалютаОплаты = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если НЕ ВалютаОплаты = ВалютаРегламентированногоУчета Тогда
		ОплатаВВалюте = Истина;
	Иначе
		ОплатаВВалюте = Ложь;
	КонецЕсли;
	
	Возврат ОплатаВВалюте;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФормированияДвиженийПоРасчетамСКонтрагентами

// Процедура заполняет сумму взаиморасчетов в табличной части "Расшифровка платежка"
// в документах движения денежных средств.
//
// Параметры:
//	Валюта - СправочникСсылка.Валюты - Валюта, указанная в документе.
//	Дата - Дата - Дата документа.
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа.
//
Процедура ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(Валюта, Дата, ТабличнаяЧасть) Экспорт
	
	// Если табличная часть пустая или в табличной части заполнена сумма взаиморасчетов,
	// то выполнение процедуры не требуется.
	Если (ТабличнаяЧасть.Количество() = 0
	 ИЛИ ТабличнаяЧасть.Найти(0, "СуммаВзаиморасчетов") = Неопределено)
	 И ТабличнаяЧасть.Найти(Справочники.Валюты.ПустаяСсылка(), "ВалютаВзаиморасчетов") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ИсходнаяТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.СуммаВзаиморасчетов = 0
	|	ИЛИ ТаблицаДокумента.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.СчетНаОплату.ДокументОснование КАК ДокументОснование
	|
	|ПОМЕСТИТЬ ТаблицаДокументовОснований
	|ИЗ
	|	ИсходнаяТаблицаДокумента КАК Таблица
	|ГДЕ
	|	Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОбъектаРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ДанныеОбъектаРасчетов.Объект КАК Ссылка,
	|	ДанныеОбъектаРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеОбъектаРасчетов.Партнер КАК Партнер
	|
	|ПОМЕСТИТЬ ТаблицаДокументовРасчетов
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ДанныеОбъектаРасчетов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеОбъектаРасчетов.Объект = Таблица.ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.*,
	|	Таблица.Валюта КАК Валюта,
	|
	|	ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|		ТаблицаДокументовРасчетов.ОбъектРасчетов
	|	ИНАЧЕ
	|		Таблица.ОбъектРасчетов
	|	КОНЕЦ КАК ОбъектРасчетов,
	|		
	|	ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|		ТаблицаДокументовРасчетов.Партнер
	|
	|	КОГДА Таблица.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА
	|		Таблица.ОбъектРасчетов.Партнер
	|
	|	ИНАЧЕ
	|		Таблица.Партнер
	|	КОНЕЦ КАК Партнер,
	|	
	|	ВЫБОР КОГДА Таблица.ВалютаВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		Таблица.ВалютаВзаиморасчетов
	|	ИНАЧЕ
	|		ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|			ТаблицаДокументовРасчетов.ВалютаВзаиморасчетов
	|
	|		КОГДА Таблица.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка) ТОГДА
	|			Таблица.ОбъектРасчетов.ВалютаВзаиморасчетов
	|		КОГДА Таблица.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|			Таблица.Валюта
	|
	|		ИНАЧЕ
	|			&Валюта
	|		КОНЕЦ
	|	КОНЕЦ КАК ВалютаВзаиморасчетов
	|	
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ИсходнаяТаблицаДокумента КАК Таблица
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовРасчетов КАК ТаблицаДокументовРасчетов
	|	ПО
	|		Таблица.СчетНаОплату.ДокументОснование = ТаблицаДокументовРасчетов.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаДокумента.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТаблицаДокумента.Партнер КАК Партнер,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СуммаВзаиморасчетов = 0 И КурсыВалютМультивалютногоДокумента.Курс ЕСТЬ NULL ТОГДА
	|		(ТаблицаДокумента.Сумма *
	|		ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалют.Кратность, 1)
	|		) / (
	|		ЕСТЬNULL(КурсыВалют.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|		)
	|	КОГДА ТаблицаДокумента.СуммаВзаиморасчетов = 0 И НЕ КурсыВалютМультивалютногоДокумента.Курс ЕСТЬ NULL ТОГДА
	|		(ТаблицаДокумента.Сумма *
	|		ЕСТЬNULL(КурсыВалютМультивалютногоДокумента.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалют.Кратность, 1)
	|		) / (
	|		ЕСТЬNULL(КурсыВалют.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалютМультивалютногоДокумента.Кратность, 1)
	|		)
	|	ИНАЧЕ
	|		ТаблицаДокумента.СуммаВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|	
	|	// Определим курс валюты документа.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютДокумента
	|	ПО
	|		ИСТИНА
	|	
	|	// Определим курс валюты документа
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютМультивалютногоДокумента
	|	ПО
	|		ТаблицаДокумента.Валюта = КурсыВалютМультивалютногоДокумента.Валюта
	|		
	|	// Определим курс валюты взаиморасчетов.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
	|	ПО
	|		ТаблицаДокумента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	ТаблицаДокумента = ТабличнаяЧасть.Выгрузить();
	Если ТаблицаДокумента.Колонки.Найти("СчетНаОплату") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуКлиенту"));
	КонецЕсли;
	Если ТаблицаДокумента.Колонки.Найти("Партнер") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	КонецЕсли;
	Если ТаблицаДокумента.Колонки.Найти("Валюта") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	// Получим таблицу документа с рассчитанной суммой взаиморасчетов.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.Найти(Выборка.НомерСтроки, "НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, ,"НомерСтроки");
		
	КонецЦикла;
	
КонецПроцедуры

// Устарела.
// Процедура заполняет сумму взаиморасчетов в шапке документа.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ИмяТЧ - Строка - Необязательный, имя табличной части для расчета суммы документа
//	СтруктураКурса - Структура - Необязательный, параметры курса документа
//       * Курс      - Число - Курс валюты.
//       * Кратность - Число - Кратность.
//	Дата - Дата - Дата, на которую будет получен курс, если не задана структура курса.
// 
Процедура ЗаполнитьСуммуВзаиморасчетов(ДокументОбъект, ИмяТЧ = "", СтруктураКурса = Неопределено, Дата = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяТЧ) Тогда
		СуммаДокумента = ДокументОбъект[ИмяТЧ].Итог("Сумма");
		Если Не ДокументОбъект.ЦенаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТЧ].Итог("СуммаНДС");
		КонецЕсли;
	Иначе
		СуммаДокумента = ДокументОбъект.СуммаДокумента;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ДокументОбъект.Дата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураКурса) И ТипЗнч(СтруктураКурса) = Тип("Структура") Тогда
		
		ВалютаРегУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		Если  ДокументОбъект.Валюта = ВалютаРегУчета И НЕ ДокументОбъект.ВалютаВзаиморасчетов = ВалютаРегУчета Тогда
			КурсВалютыДокумента           = 1;
			КратностьВалютыДокумента      = 1;
			КурсВалютыВзаиморасчетов      = СтруктураКурса.Курс;
			КратностьВалютыВзаиморасчетов = СтруктураКурса.Кратность;
		Иначе
			КурсВалютыДокумента           = СтруктураКурса.Курс;
			КратностьВалютыДокумента      = СтруктураКурса.Кратность;
			КурсВалютыВзаиморасчетов      = 1;
			КратностьВалютыВзаиморасчетов = 1;
		КонецЕсли;
		
		ПараметрыВалютыДок = Новый Структура("Валюта, Курс, Кратность",
				ДокументОбъект.Валюта, КурсВалютыДокумента, КратностьВалютыДокумента);
		ПараметрыВалютыВР  = Новый Структура("Валюта, Курс, Кратность",
				ДокументОбъект.ВалютаВзаиморасчетов, КурсВалютыВзаиморасчетов, КратностьВалютыВзаиморасчетов);
			
		ДокументОбъект.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаДокумента,
				ПараметрыВалютыДок,ПараметрыВалютыВР);
			
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	(&СуммаДокумента *
		|	ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
		|	ЕСТЬNULL(КурсыВалют.Кратность, 1)
		|	) / (
		|	ЕСТЬNULL(КурсыВалют.Курс, 1) * 
		|	ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
		|	) КАК СуммаВзаиморасчетов
		|	
		|ИЗ	
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата,
		|		Валюта = &ВалютаДокумента
		|	) КАК КурсыВалютДокумента
		|	
		|	// Определим курс валюты взаиморасчетов.
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, 
		|			Валюта = &ВалютаВзаиморасчетов
		|	) КАК КурсыВалют ПО ИСТИНА
		|");
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.Валюта);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДокументОбъект.ВалютаВзаиморасчетов);
		Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ДокументОбъект.СуммаВзаиморасчетов <> Выборка.СуммаВзаиморасчетов Тогда
				ДокументОбъект.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устарела.
// Процедура заполняет сумму взаиморасчетов в шапке документа.
//
// Параметры:
// ДокументОбъект - ДокументОбъект - Текущий документ
// ИмяТЧ - Строка - Необязательный, имя табличной части, где рассчитывается сумма взаиморасчетов
// СтруктураКурса - Структура - Необязательный, параметры курса документа
//       * Курс      - Число - Курс валюты.
//       * Кратность - Число - Кратность.
//
Процедура ЗаполнитьСуммуВзаиморасчетовВПоступлении(ДокументОбъект, ИмяТЧ = "Товары", СтруктураКурса = Неопределено) Экспорт
	
	Если ДокументОбъект[ИмяТЧ].НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество()=0 Тогда
		
		ДокументОбъект.СуммаВзаиморасчетов = ДокументОбъект[ИмяТЧ].Итог("СуммаВзаиморасчетов");
		
	Иначе
		
		СуммаДокумента = ДокументОбъект[ИмяТЧ].Итог("Сумма");
		Если Не ДокументОбъект.ЦенаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТЧ].Итог("СуммаНДС");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураКурса) И ТипЗнч(СтруктураКурса) = Тип("Структура") Тогда
			
			ВалютаРегУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			
			Если ДокументОбъект.Валюта = ВалютаРегУчета И НЕ ДокументОбъект.ВалютаВзаиморасчетов = ВалютаРегУчета Тогда
				КурсВалютыДокумента           = 1;
				КратностьВалютыДокумента      = 1;
				КурсВалютыВзаиморасчетов      = СтруктураКурса.Курс;
				КратностьВалютыВзаиморасчетов = СтруктураКурса.Кратность;
			Иначе
				КурсВалютыДокумента           = СтруктураКурса.Курс;
				КратностьВалютыДокумента      = СтруктураКурса.Кратность;
				КурсВалютыВзаиморасчетов      = 1;
				КратностьВалютыВзаиморасчетов = 1;
			КонецЕсли;
			
			ПараметрыВалютыДок = Новый Структура("Валюта, Курс, Кратность",
				ДокументОбъект.Валюта, КурсВалютыДокумента, КратностьВалютыДокумента);
			ПараметрыВалютыВР  = Новый Структура("Валюта, Курс, Кратность",
				ДокументОбъект.ВалютаВзаиморасчетов, КурсВалютыВзаиморасчетов, КратностьВалютыВзаиморасчетов);
			
			ДокументОбъект.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаДокумента,
				ПараметрыВалютыДок,ПараметрыВалютыВР);
			
		Иначе
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	(&СуммаДокумента *
			|	ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
			|	ЕСТЬNULL(КурсыВалют.Кратность, 1)
			|	) / (
			|	ЕСТЬNULL(КурсыВалют.Курс, 1) * 
			|	ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
			|	) КАК СуммаВзаиморасчетов
			|	
			|ИЗ	
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата,
			|		Валюта = &ВалютаДокумента
			|	) КАК КурсыВалютДокумента
			|	
			|	// Определим курс валюты взаиморасчетов.
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, 
			|			Валюта = &ВалютаВзаиморасчетов
			|	) КАК КурсыВалют ПО ИСТИНА
			|");
			
			Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
			Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.Валюта);
			Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДокументОбъект.ВалютаВзаиморасчетов);
			Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если ДокументОбъект.СуммаВзаиморасчетов <> Выборка.СуммаВзаиморасчетов Тогда
					ДокументОбъект.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устарела.
// Процедура заполняет сумму НДС взаиморасчетов в табличной части документа.
//
// Параметры:
//	Документ - ДокументОбъект - Текущий документ.
//	ИмяТабличнойЧасти - Строка - Имя табличной части документа для заполнения.
// 
Процедура ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(Документ, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = Документ[ИмяТабличнойЧасти];
	
	ВалютаДокумента = Документ.Валюта;
	ВалютаЗаказа    = Документ.ВалютаВзаиморасчетов;
	
	Если ВалютаДокумента = ВалютаЗаказа Тогда
		
		Для Индекс = 0 По ТабличнаяЧасть.Количество()-1 Цикл
			Если Не ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].СуммаНДСВзаиморасчетов)
			 ИЛИ ТабличнаяЧасть[Индекс].СуммаНДСВзаиморасчетов <> ТабличнаяЧасть[Индекс].СуммаНДС Тогда
				ТабличнаяЧасть[Индекс].СуммаНДСВзаиморасчетов = ТабличнаяЧасть[Индекс].СуммаНДС;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
	
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Строка.СуммаНДСВзаиморасчетов = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Строка.СуммаВзаиморасчетов, Строка.СтавкаНДС);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет сумму расшифровки платежа в соответствии с суммой документа.
//
// Параметры:
//		СуммаДокумента - Число - Сумма документа для заполнения.
//		РасшифровкаПлатежа - ТаблицаЗначений - Таблица для заполнения.
//
Процедура ЗаполнитьСуммуРасшифровкиПлатежаПоСуммеДокумента(Знач СуммаДокумента, РасшифровкаПлатежа, ВалютаВзаиморасчетов = Неопределено) Экспорт
	
	СуммаРасшифровкиПлатежа = РасшифровкаПлатежа.Итог("Сумма");
	Если СуммаДокумента <> СуммаРасшифровкиПлатежа Тогда
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Сумма = СуммаДокумента;
			Если НЕ ВалютаВзаиморасчетов = Неопределено Тогда
				НоваяСтрока.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			КонецЕсли;
		Иначе
			
			Разница = СуммаДокумента - СуммаРасшифровкиПлатежа;
			МассивУдаляемыхСтрок = Новый Массив;
			
			// Корректируются суммы в строках с пустым заказом.
			Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
					СтрокаТаблицы.Сумма = Макс(СтрокаТаблицы.Сумма + Разница, 0);
					СтрокаТаблицы.СуммаВзаиморасчетов = 0;
					Разница = СуммаДокумента - РасшифровкаПлатежа.Итог("Сумма");
				КонецЕсли;
				
				Если СтрокаТаблицы.Сумма = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
				КонецЕсли;
				
				Если Разница = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Уменьшаются суммы в строках с указанным заказом.
			Если Разница < 0 Тогда
				
				Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
						СтрокаТаблицы.Сумма = Макс(СтрокаТаблицы.Сумма + Разница, 0);
						СтрокаТаблицы.СуммаВзаиморасчетов = 0;
						Разница = СуммаДокумента - РасшифровкаПлатежа.Итог("Сумма");
					КонецЕсли;
					
					Если СтрокаТаблицы.Сумма = 0 Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
					КонецЕсли;
					
					Если Разница = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Остаток нераспределенной суммы будет отнесен на новую строку.
			Если Разница <> 0 Тогда
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				НоваяСтрока.Сумма = Разница;
				Если НЕ ВалютаВзаиморасчетов = Неопределено Тогда
					НоваяСтрока.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
			// Строки с нулевой суммой будут удалены.
			Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
				РасшифровкаПлатежа.Удалить(СтрокаТаблицы);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет или очищает табличную часть расшифровка платежа накладной при расчетах по накладным.
//
// Параметры:
//	СуммаДокумента		- Число - Сумма текущего документа.
//	СуммаВзаиморасчетов - Число - Сумма взаиморасчетов документа.
//	РасшифровкаПлатежа	- ТаблицаЗначений - Расшифровка платежа накладной для заполнения.
//		* СуммаВзаиморасчетов	- Число - Сумма взаиморасчетов по строке.
//		* Сумма					- Число - Сумма в валюте документа.
//		* ОбъектРасчетов		- СправочникСсылка.ОбъектыРасчетов - Ссылки на объекты расчетов зачтенных платежи/самого документа
//	ОбъектРасчетов		- СправочникСсылка.ОбъектыРасчетов - Ссылка на объект расчетов документа владельца расшифровки.
//
Процедура ЗаполнитьСуммыРасшифровкиНакладной(Знач СуммаДокумента, ЗНАЧ СуммаВзаиморасчетов, РасшифровкаПлатежа, ОбъектРасчетов) Экспорт
	
	Если СуммаДокумента = 0 ИЛИ СуммаВзаиморасчетов = 0 Тогда
		РасшифровкаПлатежа.Очистить();
		Возврат;
	КонецЕсли;
	
	ТребуетсяПерераспределениеСуммы = Ложь;
	СуммаРасшифровкиПлатежа = РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов");
	НовыйКурсВзаиморасчетов = ?(СуммаДокумента = 0 ИЛИ СуммаВзаиморасчетов = 0, 0, СуммаДокумента / СуммаВзаиморасчетов);
	
	Если СуммаВзаиморасчетов <> СуммаРасшифровкиПлатежа Тогда
		
		Разница = СуммаВзаиморасчетов - СуммаРасшифровкиПлатежа;
		ТребуетсяПерераспределениеСуммы = Истина;
		
		Если Разница > 0 Тогда
			
			Для Сч = 0 По РасшифровкаПлатежа.Количество()-1 Цикл
				СтрокаРасшифровки = РасшифровкаПлатежа[Сч];
				Если СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов Тогда
					СтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровки.СуммаВзаиморасчетов + Разница;
					Разница = 0;
				КонецЕсли;
			КонецЦикла;
			
			Если Разница > 0 Тогда
				СтрокаРасшифровки = РасшифровкаПлатежа.Добавить();
				СтрокаРасшифровки.СуммаВзаиморасчетов = Разница;
				СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Разница < 0 Тогда
			
			Для Сч = 0 По РасшифровкаПлатежа.Количество()-1 Цикл
				СтрокаРасшифровки = РасшифровкаПлатежа[Сч];
				Если СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов Тогда
					СуммаВзаиморасчетовДо = СтрокаРасшифровки.СуммаВзаиморасчетов;
					СтрокаРасшифровки.СуммаВзаиморасчетов = Макс(0,СтрокаРасшифровки.СуммаВзаиморасчетов + Разница);
					Разница = Разница + (СуммаВзаиморасчетовДо - СтрокаРасшифровки.СуммаВзаиморасчетов);
				КонецЕсли;
			КонецЦикла;
			
			Если Разница < 0 Тогда
			
				Для Сч = 0 По РасшифровкаПлатежа.Количество()-1 Цикл
					СтрокаРасшифровки = РасшифровкаПлатежа[Сч];
					Если СтрокаРасшифровки.ОбъектРасчетов <> ОбъектРасчетов Тогда
						СуммаВзаиморасчетовДо = СтрокаРасшифровки.СуммаВзаиморасчетов;
						СтрокаРасшифровки.СуммаВзаиморасчетов = Макс(0,СтрокаРасшифровки.СуммаВзаиморасчетов + Разница);
						Разница = Разница + (СуммаВзаиморасчетовДо - СтрокаРасшифровки.СуммаВзаиморасчетов);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаРасшифровкиПлатежа = РасшифровкаПлатежа.Итог("Сумма");
	Если ТребуетсяПерераспределениеСуммы ИЛИ СуммаДокумента <> СуммаРасшифровкиПлатежа Тогда
		
		Если РасшифровкаПлатежа.Количество() = 1 Тогда
			РасшифровкаПлатежа[0].Сумма = СуммаДокумента;
		ИначеЕсли РасшифровкаПлатежа.Количество() > 1 Тогда
			
			НераспределеннаяСумма = СуммаДокумента;
			Для Сч = 0 По РасшифровкаПлатежа.Количество()-1 Цикл
				СтрокаРасшифровки = РасшифровкаПлатежа[Сч];
				Если Сч = РасшифровкаПлатежа.Количество()-1 Тогда
					СтрокаРасшифровки.Сумма = НераспределеннаяСумма;
				Иначе
					СтрокаРасшифровки.Сумма = СтрокаРасшифровки.СуммаВзаиморасчетов * НовыйКурсВзаиморасчетов;
					НераспределеннаяСумма = НераспределеннаяСумма - СтрокаРасшифровки.Сумма;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Сч = 0;
	Пока Сч < РасшифровкаПлатежа.Количество() Цикл
		
		Если РасшифровкаПлатежа[Сч].СуммаВзаиморасчетов = 0 Тогда
			РасшифровкаПлатежа.Удалить(Сч);
		Иначе
			Сч = Сч +1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма()).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами);
		Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам взаиморасчетов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Область РасчетыСКлиентами
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСКлиентами") Тогда
		
		Если ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами) Тогда
		
			ТипДокумента = ТипЗнч(Движения.РасчетыСКлиентами.Отбор.Регистратор.Значение);
			ДобавитьЗаполнитьПорядокРасчетовСКлиентами(ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами, ТипДокумента);
			ПроверитьЗаполнитьАналитикуУчетаПоПартнерам(ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами);
			
			Если ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами.Колонки.Найти("ПродажаПоЗаказу") <> Неопределено Тогда
				Для Каждого Стр Из ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами Цикл
					Если НЕ ЗначениеЗаполнено(Стр.ПродажаПоЗаказу) И Стр.ПродажаПоЗаказу <> Неопределено Тогда
						Стр.ПродажаПоЗаказу = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Движения.РасчетыСКлиентами.Записывать = Истина;
			Движения.РасчетыСКлиентами.Загрузить(ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами);
			
		ИначеЕсли Движения.РасчетыСКлиентами.Записывать Тогда
			
			Движения.РасчетыСКлиентамиПоДокументам.Записывать = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РасчетыСПоставщиками
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСПоставщиками") Тогда
		
		Если ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками) Тогда
		
			ТипДокумента = ТипЗнч(Движения.РасчетыСПоставщиками.Отбор.Регистратор.Значение);
			ДобавитьЗаполнитьПорядокРасчетовСПоставщиками(ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками, ТипДокумента);
			ПроверитьЗаполнитьАналитикуУчетаПоПартнерам(ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками);
			
			Если ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками.Колонки.Найти("ЗакупкаПоЗаказу") <> Неопределено Тогда
				Для Каждого Стр Из ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками Цикл
					Если НЕ ЗначениеЗаполнено(Стр.ЗакупкаПоЗаказу) И Стр.ЗакупкаПоЗаказу <> Неопределено Тогда
						Стр.ЗакупкаПоЗаказу = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Движения.РасчетыСПоставщиками.Записывать = Истина;
			Движения.РасчетыСПоставщиками.Загрузить(ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками);
			
		ИначеЕсли Движения.РасчетыСПоставщиками.Записывать Тогда
			
			Движения.РасчетыСПоставщикамиПоДокументам.Записывать = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	#Область РасчетыСКлиентами
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменение") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаЗаказы.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ТаблицаЗаказы.Валюта         КАК Валюта,
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
			|				ТаблицаЗаказы.КОплате
			|			ИНАЧЕ 0
			|		КОНЕЦ)                 КАК СуммаЗаказа,
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				ТОГДА ТаблицаЗаказы.КОплате
			|			ИНАЧЕ 0
			|		КОНЕЦ +
			|		ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				ТОГДА -ТаблицаЗаказы.Оплачивается
			|			ИНАЧЕ ТаблицаЗаказы.Оплачивается
			|		КОНЕЦ)                 КАК СуммаОплаты
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК ТаблицаЗаказы
			|ГДЕ
			|	(ТаблицаЗаказы.ОбъектРасчетов, ТаблицаЗаказы.Валюта, ТаблицаЗаказы.Активность) В
			|			(ВЫБРАТЬ
			|				Таблица.ОбъектРасчетов,
			|				Таблица.Валюта,
			|				ИСТИНА
			|			ИЗ
			|				ДвиженияРасчетыСКлиентамиИзменение КАК Таблица)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаЗаказы.Валюта,
			|	ТаблицаЗаказы.ОбъектРасчетов
			|
			|ИМЕЮЩИЕ
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
			|				ТаблицаЗаказы.КОплате
			|			ИНАЧЕ 0
			|		КОНЕЦ) > 0
			|	И
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
			|				ТаблицаЗаказы.КОплате
			|			ИНАЧЕ 0
			|		КОНЕЦ)
			|	>
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				ТОГДА ТаблицаЗаказы.КОплате
			|			ИНАЧЕ 0
			|		КОНЕЦ +
			|		ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				ТОГДА -ТаблицаЗаказы.Оплачивается
			|			ИНАЧЕ ТаблицаЗаказы.Оплачивается
			|		КОНЕЦ)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиРасчетыСКлиентами");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СуммыСрокЗадолженности
		
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга")
		Или ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга.АналитикаУчетаПоПартнерам.Договор КАК Договор
			|ПОМЕСТИТЬ ДанныеДоговоровИзменениеСуммыДолга
			|ИЗ
			|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга КАК ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Договор");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока.АналитикаУчетаПоПартнерам.Договор КАК Договор
			|ПОМЕСТИТЬ ДанныеДоговоровИзменениеКонтрольСрока
			|ИЗ
			|	ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока КАК ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Договор");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ТаблицаДвижений.Договор                             КАК Договор,
			|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
			|	ДанныеДоговора.ОграничиватьСуммуЗадолженности       КАК ОграничиватьСуммуЗадолженности,
			|	ДанныеДоговора.ДопустимаяСуммаЗадолженности         КАК ДопустимаяСуммаЗадолженности,
			|	ЛОЖЬ                                                КАК ЗапрещаетсяПросроченнаяЗадолженность
			|
			|ПОМЕСТИТЬ ДанныеДоговоровПредварительные
			|ИЗ
			|	ДанныеДоговоровИзменениеСуммыДолга КАК ТаблицаДвижений
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|	ПО
			|		ТаблицаДвижений.Договор = ДанныеДоговора.Ссылка
			|
			|ГДЕ
			|	ДанныеДоговора.ОграничиватьСуммуЗадолженности
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаДвижений.ОбъектРасчетов                      КАК Договор,
			|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
			|	ДанныеДоговора.ОграничиватьСуммуЗадолженности       КАК ОграничиватьСуммуЗадолженности,
			|	ДанныеДоговора.ДопустимаяСуммаЗадолженности         КАК ДопустимаяСуммаЗадолженности,
			|	ЛОЖЬ                                                КАК ЗапрещаетсяПросроченнаяЗадолженность
			|
			|ИЗ
			|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга КАК ТаблицаДвижений
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|	ПО
			|		ТаблицаДвижений.ОбъектРасчетов = ДанныеДоговора.Ссылка
			|
			|ГДЕ
			|	ДанныеДоговора.ОграничиватьСуммуЗадолженности
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаДвижений.Договор                             КАК Договор,
			|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
			|	ЛОЖЬ                                                КАК ОграничиватьСуммуЗадолженности,
			|	0                                                   КАК ДопустимаяСуммаЗадолженности,
			|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность КАК ЗапрещаетсяПросроченнаяЗадолженность
			|
			|ИЗ
			|	ДанныеДоговоровИзменениеКонтрольСрока КАК ТаблицаДвижений
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|	ПО
			|		ТаблицаДвижений.Договор = ДанныеДоговора.Ссылка
			|
			|ГДЕ
			|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаДвижений.ОбъектРасчетов                      КАК Договор,
			|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
			|	ЛОЖЬ                                                КАК ОграничиватьСуммуЗадолженности,
			|	0                                                   КАК ДопустимаяСуммаЗадолженности,
			|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность КАК ЗапрещаетсяПросроченнаяЗадолженность
			|
			|ИЗ
			|	ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока КАК ТаблицаДвижений
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|	ПО
			|		ТаблицаДвижений.ОбъектРасчетов = ДанныеДоговора.Ссылка
			|
			|ГДЕ
			|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ДанныеДоговоров.Договор                                        КАК Договор,
			|	ДанныеДоговоров.Валюта                                         КАК Валюта,
			|	МАКСИМУМ(ДанныеДоговоров.ОграничиватьСуммуЗадолженности)       КАК КонтрольСуммы,
			|	МАКСИМУМ(ДанныеДоговоров.ДопустимаяСуммаЗадолженности)         КАК ДопустимаяСумма,
			|	МАКСИМУМ(ДанныеДоговоров.ЗапрещаетсяПросроченнаяЗадолженность) КАК КонтрольСрока
			|
			|ПОМЕСТИТЬ ДанныеДоговоров
			|ИЗ
			|	ДанныеДоговоровПредварительные КАК ДанныеДоговоров
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеДоговоров.Договор,
			|	ДанныеДоговоров.Валюта");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДоговора.Ссылка  КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ПОМЕСТИТЬ ОбъектыПроверки
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДоговора.Ссылка = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДоговора.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ЗаказКлиента КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
			|	И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
			|	И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)	
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ОтчетКомитенту КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен И ДанныеДокумента.ПроведеноБанком
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен");
			
			ТекстыЗапроса.Добавить("
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.Ссылка        КАК ОбъектРасчетов,
			|	ОбъектыПроверки.Договор       КАК Договор,
			|	ОбъектыПроверки.Валюта        КАК Валюта,
			|	ОбъектыПроверки.КонтрольСуммы КАК КонтрольСуммы,
			|	ОбъектыПроверки.КонтрольСрока КАК КонтрольСрока
			|ПОМЕСТИТЬ ОбъектыРасчетов
			|ИЗ ОбъектыПроверки КАК ОбъектыПроверки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|			ПО ОбъектыРасчетов.Объект = ОбъектыПроверки.ОбъектРасчетов");
		
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
			ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
		
		Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга") Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.Договор                                   КАК Договор,
			|	РасчетыСКлиентамиОстатки.Валюта                           КАК Валюта,
			|	МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)                  КАК ДопустимаяСуммаЗадолженности,
			|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) +
			|		СУММА(РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток)    КАК СуммаОстаток,
			|
			|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) +
			|		СУММА(РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток) -
			|		МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)              КАК СуммаПревышения
			|
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(
			|		,
			|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ОбъектРасчетов, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСуммы)
			|	) КАК РасчетыСКлиентамиОстатки
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		ОбъектыРасчетов КАК ОбъектыРасчетов	
			|	ПО
			|		РасчетыСКлиентамиОстатки.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
			|		И РасчетыСКлиентамиОстатки.Валюта = ОбъектыРасчетов.Валюта
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
			|		И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбъектыРасчетов.Договор,
			|	РасчетыСКлиентамиОстатки.Валюта
			|ИМЕЮЩИЕ
			|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток)+
			|		СУММА(РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток) > МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)";
			
			ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиОграничениеСуммыЗадолженности");
			
		КонецЕсли;
		
		Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	ОбъектыРасчетов.Договор                                   КАК Договор,
				|	РасчетыСКлиентамиОстатки.Валюта                           КАК Валюта,
				|	СУММА(ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток >
				|						РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток ТОГДА
				|		РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток
				|	ИНАЧЕ
				|		РасчетыСКлиентамиОстатки.СуммаОстаток
				|	КОНЕЦ) КАК ПросроченнаяЗадолженность
				|
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами.Остатки(
				|		&ПериодКонтроляСрокаДолга,
				|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ОбъектРасчетов, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСрока)
				|	) КАК РасчетыСКлиентамиОстатки
				|	
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|		ОбъектыРасчетов КАК ОбъектыРасчетов
				|	ПО
				|		РасчетыСКлиентамиОстатки.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
				|		И РасчетыСКлиентамиОстатки.Валюта = ОбъектыРасчетов.Валюта
				|	
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|		ДанныеДоговоров КАК ДанныеДоговоров
				|	ПО
				|		ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
				|		И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
				|
				|ГДЕ
				|	НЕ &НоваяАрхитектураВзаиморасчетов
				|	И РасчетыСКлиентамиОстатки.СуммаОстаток > 0
				|	И (РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток) > 0
				|
				|СГРУППИРОВАТЬ ПО
				|	ОбъектыРасчетов.Договор,
				|	РасчетыСКлиентамиОстатки.Валюта
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ОбъектыРасчетов.Договор                                   КАК Договор,
				|	РасчетыСКлиентамиОстатки.Валюта                           КАК Валюта,
				|	СУММА(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
				|			- ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток,0)) КАК ПросроченнаяЗадолженность
				|
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
				|		&ПериодКонтроляСрокаДолга,
				|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ОбъектРасчетов, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСрока)
				|	) КАК РасчетыСКлиентамиПоСрокамОстатки
				|	
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|		ОбъектыРасчетов КАК ОбъектыРасчетов
				|	ПО
				|		РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
				|		И РасчетыСКлиентамиПоСрокамОстатки.Валюта = ОбъектыРасчетов.Валюта
				|	
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|		ДанныеДоговоров КАК ДанныеДоговоров
				|	ПО
				|		ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
				|		И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
				|		&ПериодКонтроляСрокаДолга,
				|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ОбъектРасчетов, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСрока)
				|	) КАК РасчетыСКлиентамиОстатки
				|	ПО
				|		РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов = РасчетыСКлиентамиОстатки.ОбъектРасчетов
				|		И РасчетыСКлиентамиПоСрокамОстатки.Валюта = РасчетыСКлиентамиПоСрокамОстатки.Валюта
				|ГДЕ
				|	&НоваяАрхитектураВзаиморасчетов
				|	И РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения < НАЧАЛОПЕРИОДА(&ПериодКонтроляСрокаДолга,ДЕНЬ)
				|
				|СГРУППИРОВАТЬ ПО
				|	ОбъектыРасчетов.Договор,
				|	РасчетыСКлиентамиОстатки.Валюта
				|
				|ИМЕЮЩИЕ СУММА(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток
				|			- ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток,0)) > 0";
			
			Запрос.УстановитьПараметр("ПериодКонтроляСрокаДолга", Макс(КонецДня(ТекущаяДатаСеанса()), КонецДня(Документ.Дата)));
			Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", Константы.НоваяАрхитектураВзаиморасчетов.Получить());
			
			ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиКонтрольСрокаЗадолженности");
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область АвансыПоНакладным
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеАвансыПоНакладным") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	РасчетыСКлиентамиОстатки.ОбъектРасчетов        КАК ДокументАванса,
			|	РасчетыСКлиентамиОстатки.Валюта                КАК Валюта,
			|	РасчетыСКлиентамиОстатки.СуммаОстаток          КАК СуммаПревышения
			|	
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(
			|		,
			|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ОбъектРасчетов, Валюта ИЗ ДвиженияРасчетыСКлиентамиИзменениеАвансыПоНакладным)
			|	) КАК РасчетыСКлиентамиОстатки
			|
			|ГДЕ
			|	РасчетыСКлиентамиОстатки.СуммаОстаток > 0
			|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиОстатки.ОбъектРасчетов.Объект) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
			|													ТИП(Документ.ПриходныйКассовыйОрдер),
			|													ТИП(Документ.ОперацияПоПлатежнойКарте),
			|													ТИП(Документ.ВводОстатков),
			|													ТИП(Документ.ВводОстатковВзаиморасчетов))";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиКонтрольЗачтенныхАвансовПоНакладнымКлиент");
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСПоставщикамиИзменениеАвансыПоНакладным") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов           КАК ДокументАванса,
			|	РасчетыСПоставщикамиОстатки.Валюта                   КАК Валюта,
			|	РасчетыСПоставщикамиОстатки.СуммаОстаток             КАК СуммаПревышения
			|
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|		,
			|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ОбъектРасчетов, Валюта ИЗ ДвиженияРасчетыСПоставщикамиИзменениеАвансыПоНакладным)
			|	) КАК РасчетыСПоставщикамиОстатки
			|
			|ГДЕ
			|	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
			|	И ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиОстатки.ОбъектРасчетов.Объект) В (ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
			|													ТИП(Документ.РасходныйКассовыйОрдер),
			|													ТИП(Документ.ВводОстатков),
			|													ТИП(Документ.ВводОстатковВзаиморасчетов))";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиКонтрольЗачтенныхАвансовПоНакладнымПоставщик");
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	#Область РасчетыСКлиентами
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменение") Тогда
		
		ШаблонСообщения = НСтр("ru='Нарушены условия оплаты, необходимые для обеспечения/отгрузки по заказу %1,
|Требуется %2 %4 оплачено %3 %4'
|;uk='Порушено умови оплати, необхідні для забезпечення/відвантаження за замовленням %1, 
|Потрібно %2 %4 оплачено %3 %4'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиРасчетыСКлиентами Цикл
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ОбъектРасчетов,
				СтрокаОшибки.СуммаЗаказа, СтрокаОшибки.СуммаОплаты, СтрокаОшибки.Валюта);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СуммыСрокЗадолженности
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга") Тогда
		
		ШаблонСообщения = НСтр("ru='По договору %1 превышена допустимая сумма кредита на %2 %3';uk='За договором %1 перевищена допустима сума кредиту на %2 %3'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиОграничениеСуммыЗадолженности Цикл
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.Договор, СтрокаОшибки.СуммаПревышения,
				СтрокаОшибки.Валюта);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда
		
		ШаблонСообщения = НСтр("ru='По договору %1 имеется просроченная задолженность на сумму %2 %3';uk='За договором %1 є прострочена заборгованість на суму %2 %3'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиКонтрольСрокаЗадолженности Цикл
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.Договор, СтрокаОшибки.ПросроченнаяЗадолженность,
				СтрокаОшибки.Валюта);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область АвансыПоНакладным
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеАвансыПоНакладным") Тогда
		
		ШаблонСообщения = НСтр("ru='Превышена сумма зачета аванса %1 на %2 %3';uk='Перевищена сума заліку авансу %1 на %2 %3'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиКонтрольЗачтенныхАвансовПоНакладнымКлиент Цикл
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ДокументАванса, СтрокаОшибки.СуммаПревышения,
				СтрокаОшибки.Валюта);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСПоставщикамиИзменениеАвансыПоНакладным") Тогда
		
		ШаблонСообщения = НСтр("ru='Превышена сумма зачета аванса %1 на %2 %3';uk='Перевищена сума заліку авансу %1 на %2 %3'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиКонтрольЗачтенныхАвансовПоНакладнымПоставщик Цикл
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ДокументАванса, СтрокаОшибки.СуммаПревышения,
				СтрокаОшибки.Валюта);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область РасчетДатПлатежа_ОфлайнРасчеты
// В менеджер временных таблиц помещает таблицу "ТаблицаОстатковКлиентов",
// содержащую в себе даты платежа. Строится по регистру "Расчеты с клиентами по документам".
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Текущий менеджер временных таблиц для помещения таблиц.
//		ДатаОстатков - Дата - Дата остатков.
//
Процедура РассчитатьДатыПлатежаКлиента(МенеджерВременныхТаблиц, ДатаОстатков) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам)
		И ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентами) 
		И НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                          КАК ЗаказКлиента,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|		ТОГДА Расчеты.КОплатеОстаток
		|		ИНАЧЕ Расчеты.СуммаОстаток
		|	КОНЕЦ                                           КАК ДолгОстаток,
		|	ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|		ТОГДА Расчеты.КОплатеОстаток
		|		ИНАЧЕ Расчеты.СуммаОстаток
		|	КОНЕЦ                                           КАК ДолгОстатокНаКонецПериода,
		|	&ДатаОстатков                                   КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1)        КАК Период,
		|	ИСТИНА                                          КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                          КАК ЗаказКлиента,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	ВЫБОР КОГДА Расчеты.КОплатеОстаток < 0
		|			ТОГДА Расчеты.СуммаОстаток
		|			ИНАЧЕ ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|					ТОГДА Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток
		|					ИНАЧЕ Расчеты.КОплатеОстаток
		|			КОНЕЦ
		|	КОНЕЦ                                           КАК ДолгОстаток,
		|	ВЫБОР КОГДА Расчеты.КОплатеОстаток < 0
		|			ТОГДА Расчеты.СуммаОстаток
		|			ИНАЧЕ ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|					ТОГДА Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток
		|					ИНАЧЕ Расчеты.КОплатеОстаток
		|			КОНЕЦ
		|	КОНЕЦ                                           КАК ДолгОстатокНаКонецПериода,
		|	&ДатаОстатков                                   КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1)        КАК Период,
		|	ЛОЖЬ                                            КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток <= 0
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов
		|");
		
		Параметры = Новый Массив(2);
		Параметры[0] = ДатаОстатков;
		Параметры[1] = ВидГраницы.Включая;
		Граница = Новый(Тип("Граница"),Параметры);
		
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.УстановитьПараметр("Граница", Граница);
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
 		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтгрузокКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                             КАК ЗаказКлиента,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День)) КАК ДатаПлатежа,
		|	МАКСИМУМ(Расчеты.Период)                           КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ОбъектРасчетов = ТаблицаОстатков.ЗаказКлиента
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.ДолгОстаток <> 0
		|ГДЕ
		|	Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
		|	И ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                             КАК ЗаказКлиента,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День))  КАК ДатаПлатежа,
		|	МИНИМУМ(Расчеты.Период)                            КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ОбъектРасчетов = ТаблицаОстатков.ЗаказКлиента
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.ДолгОстаток <> 0
		|ГДЕ
		|	(Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.КОплате < 0))
		|	И Расчеты.Активность
		|	И Расчеты.Период > &ДатаОстатков
		|	И Расчеты.Период > ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
		|	И НЕ ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента                          КАК ЗаказКлиента,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	НАЧАЛОПЕРИОДА(ВЫБОР КОГДА Периоды.ЗаказКлиента.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ, ДЕНЬ)                                  КАК ДатаПлатежа,
		|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(Расчеты.КОплате, 0) < 0
		|			ТОГДА 0 - Расчеты.КОплате
		|			ИНАЧЕ ЕСТЬNULL(Расчеты.КОплате, 0)
		|	КОНЕЦ)                                        КАК Долг,
		|	Периоды.ПросроченнаяЗадолженность             КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов
		|ИЗ
		|	ТаблицаПериодовКлиентов КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказКлиента             = Расчеты.ОбъектРасчетов
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Расчеты.Активность
		|		И Расчеты.Период = Периоды.Период
		|		И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.КОплате < 0))
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	НАЧАЛОПЕРИОДА(ВЫБОР КОГДА Периоды.ЗаказКлиента.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ, ДЕНЬ),
		|	Периоды.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                                КАК ЗаказКлиента,
		|	Остатки.Валюта                                      КАК Валюта,
		|	ВЫБОР КОГДА Остатки.ДолгОстаток > ЕСТЬNULL(Отгрузки.Долг, 0)
		|			ТОГДА Остатки.ДолгОстаток - ЕСТЬNULL(Отгрузки.Долг, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                               КАК НовыйДолгОстаток,
		|	ВЫБОР КОГДА ЕСТЬNULL(Отгрузки.Долг, 0) = 0
		|		ТОГДА Остатки.ДолгОстатокНаКонецПериода
		|		ИНАЧЕ ВЫБОР КОГДА Остатки.ДолгОстаток > Отгрузки.Долг
		|			ТОГДА Отгрузки.Долг
		|			ИНАЧЕ Остатки.ДолгОстаток
		|		КОНЕЦ
		|	КОНЕЦ                                               КАК ДолгОстатокНаКонецПериода,
		|	Отгрузки.Период                                     КАК Период,
		|	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа,
		|	Остатки.ПросроченнаяЗадолженность                   КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ НовыеОстаткиКлиентов
		|ИЗ
		|	ТаблицаОстатковКлиентов КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокКлиентов КАК Отгрузки
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказКлиента = Отгрузки.ЗаказКлиента
		|		И Остатки.Валюта  = Отгрузки.Валюта
		|		И Остатки.ПросроченнаяЗадолженность = Отгрузки.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                 КАК ЗаказКлиента,
		|	Остатки.Валюта                       КАК Валюта,
		|	Остатки.Период                       КАК Период,
		|	Остатки.ДатаПлатежа                  КАК ДатаПлатежа,
		|	Остатки.НовыйДолгОстаток             КАК ДолгОстаток,
		|	Остатки.ДолгОстатокНаКонецПериода    КАК ДолгОстатокНаКонецПериода,
		|	Остатки.ПросроченнаяЗадолженность    КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		|ИЗ
		|	НовыеОстаткиКлиентов КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказКлиента,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовКлиентов
		|";
		
		Результат = Запрос.Выполнить();
		Счетчик = 0;
		МаксимальноеКоличествоИтераций = 1000;
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
			Счетчик = Счетчик + 1;
			Если Счетчик >= МаксимальноеКоличествоИтераций Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                      КАК ЗаказКлиента,
		|	Расчеты.РасчетныйДокумент                 КАК РасчетныйДокумент,
		|	Расчеты.Валюта                            КАК Валюта,
		|	ТаблицаОстатков.ДатаПлатежа               КАК ДатаПлатежа,
		|	ТаблицаОстатков.ДолгОстатокНаКонецПериода КАК Долг
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентовПоДокументам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&Граница, ) КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|ГДЕ
		|	Расчеты.ДолгОстаток > 0
		|;
		|//////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковКлиентов
		|;
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента              КАК ЗаказКлиента,
		|	Расчеты.РасчетныйДокумент         КАК РасчетныйДокумент,
		|	Расчеты.Валюта                    КАК Валюта,
		|	Расчеты.ДатаПлатежа               КАК ДатаПлатежа,
		|	Расчеты.Долг                      КАК КОплате,
		|	Расчеты.Долг                      КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		|ИЗ
		|	ТаблицаОстатковКлиентовПоДокументам КАК Расчеты
		|";
		Запрос.Выполнить();
	Иначе
		Запрос = Новый Запрос("
		 |ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам,
		|	Неопределено                                                     КАК ЗаказКлиента,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК Валюта,
		|	ДАТАВРЕМЯ(1,1,1)                                                 КАК ДатаПлатежа,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
КонецПроцедуры

// В менеджер временных таблиц помещает таблицу "ТаблицаОстатковПоставщиков",
// содержащую в себе даты платежа. Строится по регистру "Расчеты с поставщиками по документам".
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Текущий менеджер временных таблиц для помещения таблиц.
//		ДатаОстатков - Дата - Дата остатков.
//
Процедура РассчитатьДатыПлатежаПоставщика(МенеджерВременныхТаблиц, ДатаОстатков) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам)
		И ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщиками)
		И НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Расчеты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                   КАК ЗаказПоставщику,
		|	Расчеты.Валюта                           КАК Валюта,
		|	-Расчеты.КОплатеОстаток                  КАК КОплатеОстаток,
		|	-Расчеты.КОплатеОстаток                  КАК КОплатеОстатокНаКонецПериода,
		|	&ДатаОстатков                            КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1) КАК Период,
		|	ИСТИНА                                   КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                          КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	(Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) КАК КОплатеОстаток,
		|	(Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) КАК КОплатеОстатокНаКонецПериода,
		|	&ДатаОстатков                                   КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1)        КАК Период,
		|	ЛОЖЬ                                            КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток >= 0 И Расчеты.СуммаОстаток <> 0
		|	И Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток > 0
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПоступленийПоставщиков
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков
		|");
		
		Параметры = Новый Массив(2);
		Параметры[0] = ДатаОстатков;
		Параметры[1] = ВидГраницы.Включая;
		Граница = Новый(Тип("Граница"),Параметры);
		
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПоступленийПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                             КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День)) КАК ДатаПлатежа,
		|	МАКСИМУМ(Расчеты.Период)                           КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ОбъектРасчетов = ТаблицаОстатков.ЗаказПоставщику
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.КОплатеОстаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
		|	И ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                             КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День))  КАК ДатаПлатежа,
		|	МАКСИМУМ(Расчеты.Период)                           КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ОбъектРасчетов = ТаблицаОстатков.ЗаказПоставщику
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.КОплатеОстаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расчеты.Активность
		|	И Расчеты.Период > &ДатаОстатков
		|	И Расчеты.Период > ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
		|	И НЕ ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику                       КАК ЗаказПоставщику,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	ВЫБОР КОГДА Периоды.ЗаказПоставщику.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ                                         КАК ДатаПлатежа,
		|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(Расчеты.КОплате, 0) < 0
		|			ТОГДА 0 - Расчеты.КОплате
		|			ИНАЧЕ ЕСТЬNULL(Расчеты.КОплате, 0)
		|	КОНЕЦ)                                        КАК КОплате,
		|	Периоды.ПросроченнаяЗадолженность             КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаПоступленийПоставщиков
		|ИЗ
		|	ТаблицаПериодовПоставщиков КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказПоставщику          = Расчеты.ОбъектРасчетов
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Расчеты.Активность
		|		И Расчеты.Период = Периоды.Период
		|		И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
		|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	ВЫБОР КОГДА Периоды.ЗаказПоставщику.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ,
		|	Периоды.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику                                КАК ЗаказПоставщику,
		|	Остатки.Валюта                                         КАК Валюта,
		|	ВЫБОР КОГДА Остатки.КОплатеОстаток > ЕСТЬNULL(Поступления.КОплате, 0)
		|			ТОГДА Остатки.КОплатеОстаток - ЕСТЬNULL(Поступления.КОплате, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                  КАК НовыйКОплатеОстаток,
		|	ВЫБОР КОГДА ЕСТЬNULL(Поступления.КОплате, 0) = 0
		|		ТОГДА Остатки.КОплатеОстатокНаКонецПериода
		|		ИНАЧЕ ВЫБОР КОГДА Остатки.КОплатеОстатокНаКонецПериода > Поступления.КОплате
		|			ТОГДА Поступления.КОплате
		|			ИНАЧЕ Остатки.КОплатеОстатокНаКонецПериода
		|		КОНЕЦ
		|	КОНЕЦ                                                  КАК КОплатеОстатокНаКонецПериода,
		|	Поступления.Период                                     КАК Период,
		|	ЕСТЬNULL(Поступления.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа,
		|	Остатки.ПросроченнаяЗадолженность                      КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ НовыеОстаткиПоставщиков
		|ИЗ
		|	ТаблицаОстатковПоставщиков КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПоступленийПоставщиков КАК Поступления
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Поступления.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказПоставщику = Поступления.ЗаказПоставщику
		|		И Остатки.Валюта  = Поступления.Валюта
		|		И Остатки.ПросроченнаяЗадолженность = Поступления.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику              КАК ЗаказПоставщику,
		|	Остатки.Валюта                       КАК Валюта,
		|	Остатки.Период                       КАК Период,
		|	Остатки.ДатаПлатежа                  КАК ДатаПлатежа,
		|	Остатки.НовыйКОплатеОстаток          КАК КОплатеОстаток,
		|	Остатки.КОплатеОстатокНаКонецПериода КАК КОплатеОстатокНаКонецПериода,
		|	Остатки.ПросроченнаяЗадолженность    КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков
		|ИЗ
		|	НовыеОстаткиПоставщиков КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказПоставщику,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовПоставщиков
		|";
		
		Результат = Запрос.Выполнить();
		Счетчик = 0;
		МаксимальноеКоличествоИтераций = 1000;
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
			Счетчик = Счетчик + 1;
			Если Счетчик >= МаксимальноеКоличествоИтераций Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам            КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                      КАК ЗаказПоставщику,
		|	Расчеты.РасчетныйДокумент                    КАК РасчетныйДокумент,
		|	Расчеты.Валюта                               КАК Валюта,
		|	ТаблицаОстатков.ДатаПлатежа                  КАК ДатаПлатежа,
		|	ТаблицаОстатков.КОплатеОстатокНаКонецПериода КАК КОплате
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиковПоДокументам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&Граница, ) КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказПоставщику = ТаблицаОстатков.ЗаказПоставщику
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|ГДЕ
		|	Расчеты.ДолгОстаток < 0
		|;
		|//////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковПоставщиков
		|;
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику           КАК ЗаказПоставщику,
		|	Расчеты.РасчетныйДокумент         КАК РасчетныйДокумент,
		|	Расчеты.Валюта                    КАК Валюта,
		|	Расчеты.ДатаПлатежа               КАК ДатаПлатежа,
		|	Расчеты.КОплате                   КАК КОплате,
		|	Расчеты.КОплате                   КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков
		|ИЗ
		|	ТаблицаОстатковПоставщиковПоДокументам КАК Расчеты
		|";
		Запрос.Выполнить();
	Иначе
		Запрос = Новый Запрос("
		 |ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам,
		|	Неопределено                                                     КАК ЗаказПоставщику,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК Валюта,
		|	ДАТАВРЕМЯ(1,1,1)                                                 КАК ДатаПлатежа,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
КонецПроцедуры

// В менеджер временных таблиц помещает таблицу содержащую в себе даты платежа.
// Строится по регистру "Расчеты с клиентами".
// Параметры:
//	ВременныеТаблицы - МенеджерВременныхТаблиц - Менеджер временных таблиц, в который будет помещен результат расчета.
//	ДатаОстатков - Дата - Период на который выполняется расчет дат платежа.
//	ИмяРесурсаКонтроля - Строка - Имя ресурса регистра, который является контрольным при расчете.
Процедура РассчитатьОперативныеДатыПлатежаКлиента(ВременныеТаблицы, ДатаОстатков, ИмяРесурсаКонтроля) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                   КАК ЗаказКлиента,
		|	Расчеты.Валюта                           КАК Валюта,
		|	Расчеты.%ИмяРесурса%Остаток              КАК %ИмяРесурса%Остаток,
		|	Расчеты.%ИмяРесурса%Остаток              КАК %ИмяРесурса%ОстатокНаКонецПериода,
		|	&ДатаОстатков                            КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1) КАК Период
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов%ИмяРесурса%
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаОстатков, ) КАК Расчеты
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов%ИмяРесурса%
		|");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРесурса%", ИмяРесурсаКонтроля);
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовКлиентов%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                        КАК ЗаказКлиента,
		|	Расчеты.Валюта                                КАК Валюта,
		|	МАКСИМУМ(Расчеты.ДатаПлатежа)                 КАК ДатаПлатежа,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.Период, День)) КАК Период
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов%ИмяРесурса%
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов%ИмяРесурса% КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ОбъектРасчетов = ТаблицаОстатков.ЗаказКлиента
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|		И ТаблицаОстатков.%ИмяРесурса%Остаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И Расчеты.%ИмяРесурса% <> 0
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента                          КАК ЗаказКлиента,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	Периоды.ДатаПлатежа                           КАК ДатаПлатежа,
		|	СУММА(ЕСТЬNULL(Расчеты.%ИмяРесурса%, 0))      КАК %ИмяРесурса%
		|ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов%ИмяРесурса%
		|ИЗ
		|	ТаблицаПериодовКлиентов%ИмяРесурса% КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказКлиента             = Расчеты.ОбъектРасчетов
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Периоды.ДатаПлатежа              = Расчеты.ДатаПлатежа
		|		И Расчеты.Активность
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|		И (Расчеты.Период МЕЖДУ Периоды.Период И КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	Периоды.ДатаПлатежа
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                      КАК ЗаказКлиента,
		|	Остатки.Валюта                            КАК Валюта,
		|	ВЫБОР КОГДА Остатки.%ИмяРесурса%Остаток > ЕСТЬNULL(Отгрузки.%ИмяРесурса%, 0)
		|			ТОГДА Остатки.%ИмяРесурса%Остаток - ЕСТЬNULL(Отгрузки.%ИмяРесурса%, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                     КАК Новый%ИмяРесурса%Остаток,
		|	Остатки.%ИмяРесурса%ОстатокНаКонецПериода КАК %ИмяРесурса%ОстатокНаКонецПериода,
		|	Отгрузки.Период                           КАК Период,
		|	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа
		|ПОМЕСТИТЬ НовыеОстаткиКлиентов%ИмяРесурса%
		|ИЗ
		|	ТаблицаОстатковКлиентов%ИмяРесурса% КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокКлиентов%ИмяРесурса% КАК Отгрузки
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказКлиента = Отгрузки.ЗаказКлиента
		|		И Остатки.Валюта  = Отгрузки.Валюта
		|		И Остатки.%ИмяРесурса%Остаток <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковКлиентов%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтгрузокКлиентов%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                      КАК ЗаказКлиента,
		|	Остатки.ЗаказКлиента.Объект               КАК Объект,
		|	Остатки.Валюта                            КАК Валюта,
		|	Остатки.Период                            КАК Период,
		|	Остатки.ДатаПлатежа                       КАК ДатаПлатежа,
		|	Остатки.Новый%ИмяРесурса%Остаток          КАК %ИмяРесурса%Остаток,
		|	Остатки.Новый%ИмяРесурса%Остаток          КАК %ИмяРесурса%,
		|	Остатки.%ИмяРесурса%ОстатокНаКонецПериода КАК %ИмяРесурса%ОстатокНаКонецПериода
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов%ИмяРесурса%
		|ИЗ
		|	НовыеОстаткиКлиентов%ИмяРесурса% КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказКлиента,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиКлиентов%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовКлиентов%ИмяРесурса%
		|";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРесурса%", ИмяРесурсаКонтроля);
		
		Результат = Запрос.Выполнить();
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// В менеджер временных таблиц помещает таблицу содержащую в себе даты платежа.
// Строится по регистру "Расчеты с поставщиками".
// Параметры:
//	ВременныеТаблицы - МенеджерВременныхТаблиц - Менеджер временных таблиц, в который будет помещен результат расчета.
//	ДатаОстатков - Дата - Период на который выполняется расчет дат платежа.
//	ИмяРесурсаКонтроля - Строка - Имя ресурса регистра, который является контрольным при расчете.
Процедура РассчитатьОперативныеДатыПлатежаПоставщика(ВременныеТаблицы, ДатаОстатков, ИмяРесурсаКонтроля) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                   КАК ЗаказПоставщику,
		|	Расчеты.Валюта                           КАК Валюта,
		|	Расчеты.%ИмяРесурса%Остаток              КАК %ИмяРесурса%Остаток,
		|	Расчеты.%ИмяРесурса%Остаток              КАК %ИмяРесурса%ОстатокНаКонецПериода,
		|	&ДатаОстатков                            КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1) КАК Период
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков%ИмяРесурса%
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОстатков, ) КАК Расчеты
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков%ИмяРесурса%
		|");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРесурса%", ИмяРесурсаКонтроля);
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовПоставщиков%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                        КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                КАК Валюта,
		|	МАКСИМУМ(Расчеты.ДатаПлатежа)                 КАК ДатаПлатежа,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.Период, День)) КАК Период
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков%ИмяРесурса%
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков%ИмяРесурса% КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ОбъектРасчетов = ТаблицаОстатков.ЗаказПоставщику
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|		И ТаблицаОстатков.%ИмяРесурса%Остаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И Расчеты.%ИмяРесурса% <> 0
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику                       КАК ЗаказПоставщику,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	Периоды.ДатаПлатежа                           КАК ДатаПлатежа,
		|	СУММА(ЕСТЬNULL(Расчеты.%ИмяРесурса%, 0))      КАК %ИмяРесурса%
		|ПОМЕСТИТЬ ТаблицаОтгрузокПоставщиков%ИмяРесурса%
		|ИЗ
		|	ТаблицаПериодовПоставщиков%ИмяРесурса% КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказПоставщику          = Расчеты.ОбъектРасчетов
		|		И Периоды.ДатаПлатежа              = Расчеты.ДатаПлатежа
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Расчеты.Активность
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
		|		И (Расчеты.Период МЕЖДУ Периоды.Период И КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	Периоды.ДатаПлатежа
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику                   КАК ЗаказПоставщику,
		|	Остатки.Валюта                            КАК Валюта,
		|	ВЫБОР КОГДА Остатки.%ИмяРесурса%Остаток > ЕСТЬNULL(Отгрузки.%ИмяРесурса%, 0)
		|			ТОГДА Остатки.%ИмяРесурса%Остаток - ЕСТЬNULL(Отгрузки.%ИмяРесурса%, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                     КАК Новый%ИмяРесурса%Остаток,
		|	Остатки.%ИмяРесурса%ОстатокНаКонецПериода КАК %ИмяРесурса%ОстатокНаКонецПериода,
		|	Отгрузки.Период                           КАК Период,
		|	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа
		|ПОМЕСТИТЬ НовыеОстаткиПоставщиков%ИмяРесурса%
		|ИЗ
		|	ТаблицаОстатковПоставщиков%ИмяРесурса% КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокПоставщиков%ИмяРесурса% КАК Отгрузки
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказПоставщику = Отгрузки.ЗаказПоставщику
		|		И Остатки.Валюта  = Отгрузки.Валюта
		|		И Остатки.%ИмяРесурса%Остаток <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковПоставщиков%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтгрузокПоставщиков%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику                   КАК ЗаказПоставщику,
		|	Остатки.ЗаказПоставщику.Объект            КАК Объект,
		|	Остатки.Валюта                            КАК Валюта,
		|	Остатки.Период                            КАК Период,
		|	Остатки.ДатаПлатежа                       КАК ДатаПлатежа,
		|	Остатки.Новый%ИмяРесурса%Остаток          КАК %ИмяРесурса%Остаток,
		|	Остатки.Новый%ИмяРесурса%Остаток          КАК %ИмяРесурса%,
		|	Остатки.%ИмяРесурса%ОстатокНаКонецПериода КАК %ИмяРесурса%ОстатокНаКонецПериода
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков%ИмяРесурса%
		|ИЗ
		|	НовыеОстаткиПоставщиков%ИмяРесурса% КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказПоставщику,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиПоставщиков%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовПоставщиков%ИмяРесурса%
		|";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРесурса%", ИмяРесурсаКонтроля);
		
		Результат = Запрос.Выполнить();
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПорядокРасчетов

// Устарела.
// Возвращает порядок расчетов по документу.
//
// Параметры:
//    Объект - ДокументОбъект - Документ, по которому надо получить порядок расчетов.
//
// Возвращаемое значение:
//    Перечисление.ПорядокРасчетов - Порядок расчетов.
//
Функция ПорядокРасчетовПоДокументу(Объект) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		Возврат ПорядокРасчетовПоУмолчанию(Объект);
	Иначе
		Возврат Объект.ПорядокРасчетов;
	КонецЕсли;
	
КонецФункции

// Устарела.
// Возвращает порядок расчетов по соглашению/договору, указанным в объекте.
//
// Параметры:
//	Объект - ДокументОбъект, Структура - Документ, по которому надо получить порядок расчетов.
//
// Возвращаемое значение:
//	Перечисление.ПорядокРасчетов - Порядок расчетов по умолчанию.
//
Функция ПорядокРасчетовПоУмолчанию(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОбъекта = Новый Структура("Соглашение, Договор");
	ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
	
	Если ЗначениеЗаполнено(СтруктураОбъекта.Соглашение) Тогда
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураОбъекта.Соглашение, "ИспользуютсяДоговорыКонтрагентов, ПорядокРасчетов");
		Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Истина И ЗначениеЗаполнено(СтруктураОбъекта.Договор) Тогда
			ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураОбъекта.Договор, "ПорядокРасчетов");
		ИначеЕсли РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Ложь Тогда
			ПорядокРасчетовПоДокументу = РеквизитыСоглашения.ПорядокРасчетов;
		Иначе
			ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктураОбъекта.Договор) Тогда
		ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураОбъекта.Договор, "ПорядокРасчетов");
	Иначе
		ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	КонецЕсли;
	
	Возврат ПорядокРасчетовПоДокументу;
	
КонецФункции

// Устарела.
// Заполняет в форме документа порядок расчетов по умолчанию,
// изменяет порядок расчетов документа, если его нет в доступных,
// заполняет в форме признак графика исполнения в договоре.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма. Должна иметь экспортную процедуру УстановитьСвойстваЭлементовПоПорядкуРасчетов().
//	ПоЗаказу - Булево - Признак, что документ введен по заказу.
//	ОбновитьОбъект - Булево - Разрешить изменение порядка расчетов по документу.
//	ОбновитьФорму - Булево - Установить свойства элементов по порядку расчетов вне зависимости изменился ли порядок расчетов.
//	Элемент - ПолеФормы - Элемент порядка расчетов на форме.
//
Процедура ЗаполнитьПорядокРасчетовВФорме(Форма, ПоЗаказу, ОбновитьОбъект = Истина, ОбновитьФорму = Ложь, Элемент = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	ПорядокРасчетовСтарый = Объект.ПорядокРасчетов;
	
	СтруктураОбъекта = Новый Структура("Соглашение, Договор");
	ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
	
	Если ЗначениеЗаполнено(СтруктураОбъекта.Договор) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураОбъекта.Договор, "ЗаданГрафикИсполнения");
		УстановитьПривилегированныйРежим(Ложь);
		ЗначениеРеквизитаГрафикИсполненияВДоговоре = Новый Структура("ГрафикИсполненияВДоговоре", Ложь);
		ЗаполнитьЗначенияСвойств(ЗначениеРеквизитаГрафикИсполненияВДоговоре, Форма);
		Если ЗначениеРеквизитаГрафикИсполненияВДоговоре.ГрафикИсполненияВДоговоре <> ГрафикИсполненияВДоговоре Тогда
			ЗаполнитьЗначенияСвойств(Форма, Новый Структура("ГрафикИсполненияВДоговоре", ГрафикИсполненияВДоговоре));
			ОбновитьФорму = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоЗаказу И ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		Форма.ПорядокРасчетов = Объект.ПорядокРасчетов;
	Иначе
		Форма.ПорядокРасчетов = ПорядокРасчетовПоУмолчанию(СтруктураОбъекта);
	КонецЕсли;
	
	ДоступныеПорядкиРасчетов = ДоступныеПорядкиРасчетовПоДокументу(
		Объект.ПорядокРасчетов,
		Форма.ПорядокРасчетов,
		ПоЗаказу);
	
	Если Элемент = Неопределено Тогда
		Форма.ДоступныеПорядкиРасчетов = ДоступныеПорядкиРасчетов;
	Иначе
		Элемент.СписокВыбора.ЗагрузитьЗначения(ДоступныеПорядкиРасчетов.ВыгрузитьЗначения());
		Элемент.ТолькоПросмотр = (ДоступныеПорядкиРасчетов.Количество() = 1);
	КонецЕсли;
	
	Если ОбновитьОбъект
		И Объект.ПорядокРасчетов <> Форма.ПорядокРасчетов
		И (ДоступныеПорядкиРасчетов.НайтиПоЗначению(Объект.ПорядокРасчетов) = Неопределено
			Или (ПорядокРасчетовСтарый <> Форма.ПорядокРасчетов)) Тогда
		
		Объект.ПорядокРасчетов = Форма.ПорядокРасчетов;
		ОбновитьФорму = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет какие порядки расчетов можно использовать в выбранном документе.
//
// Параметры:
//	ЗначениеВДокументе - Перечисление.ПорядокРасчетов - Порядок расчетов, выбранный в документе.
//	ЗначениеПоУмолчанию - Перечисление.ПорядокРасчетов - Порядок расчетов, определяемый по соглашению/договору документа.
//	ПоЗаказу - Булево - Документ введен по заказу.
//	ЭтоЗаказ - Булево - Это заказ.
//
// Возвращаемое значение:
//	СписокЗначений - Список доступных порядков расчета.
//
Функция ДоступныеПорядкиРасчетовПоДокументу(ЗначениеВДокументе, ЗначениеПоУмолчанию, ПоЗаказу = Ложь, ЭтоЗаказ = Ложь) Экспорт
	
	ПорядкиРасчетов = Новый СписокЗначений;
	
	ПорядкиРасчетов.Добавить(ЗначениеВДокументе);
	
	Если НЕ ПоЗаказу Тогда
	
		Если ЗначениеПоУмолчанию = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
		КонецЕсли;
		
		Если ЗначениеПоУмолчанию <> Перечисления.ПорядокРасчетов.ПоНакладным
				И (ПоЗаказу Или ЭтоЗаказ) Тогда
			ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
		КонецЕсли;
		
		ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
		
	КонецЕсли;
	МассивПорядков = ПорядкиРасчетов.ВыгрузитьЗначения();
	МассивПорядков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПорядков);
	ПорядкиРасчетов.ЗагрузитьЗначения(МассивПорядков);
	
	Возврат ПорядкиРасчетов;
	
КонецФункции

// Возвращает порядок расчетов по переданным параметрам.
//
// Параметры:
//    ЭтоЗаказ - Булево - Истина, если это заказ.
//    ЗаказОснование - ДокументСсылка - Необязательный, заказ, по которому введен документ.
//    Соглашение - СправочникСсылка.СоглашенияСКлиентами, СправочникСсылка.СоглашенияСПоставщиками - Необязательный, соглашение документа.
//    Договор - СправочникСсылка.ДоговорыКонтрагентов - Необязательный, договор документа.
//
// Возвращаемое значение:
//    Перечисление.ПорядокРасчетов - Порядок расчетов.
//
Функция ПорядокРасчетов(ЭтоЗаказ, ЗаказОснование = Неопределено, Соглашение = Неопределено, Договор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ЗаказОснование) Тогда
		ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказОснование, "ПорядокРасчетов");
	ИначеЕсли ЗначениеЗаполнено(Соглашение) Тогда
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, "ИспользуютсяДоговорыКонтрагентов, ПорядокРасчетов");
		Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(Договор) Тогда
			ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
		ИначеЕсли РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Ложь Тогда
			ПорядокРасчетовПоДокументу = РеквизитыСоглашения.ПорядокРасчетов;
		Иначе
			ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Договор) Тогда
		ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
	ИначеЕсли ЭтоЗаказ Тогда
		ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	Иначе 
		ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоНакладным;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПорядокРасчетовПоДокументу;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедуры

// Функция определяет вид договора контрагента для обмена
//	с конфигурацией "BAS Бухгалтерия".
//
// Параметры:
//		ДокументРасчетов - ДокументСсылка - Документ расчетов, по которому нужно определить вид договора.
//		Соглашение - СправочникСсылка.СоглашенияСПоставщиками,СправочникСсылка.СоглашенияСКлиентами - Соглашение документа.
//		ХозяйственнаяОперация - перечислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
// 		Строка - Вид договора, например, "СПокупателем".
Функция ВидДоговораКонтрагента(ДокументРасчетов, Соглашение, ХозяйственнаяОперация) Экспорт
	
	ВидДоговора = "";
	
	Если ЗначениеЗаполнено(ДокументРасчетов) Тогда
		
		Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаказКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
			
			ВидДоговора = "СПоставщиком";
		//++ НЕ УТ
		//++ Локализация
		//-- Локализация
		//-- НЕ УТ
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
			
			ВидДоговора = "СПокупателем";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомиссионера")
		 ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
			ВидДоговора = "СКомиссионером";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомитенту")
		 ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
			ВидДоговора = "СКомитентом";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
				ВидДоговора = "СКомитентом";
				
			ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
				ВидДоговора = "СКомиссионером";
				
			Иначе
				ВидДоговора = "СКомитентом";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
				ВидДоговора = "СПоставщиком";
				
			ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
				ВидДоговора = "СПокупателем";
				
			Иначе
				ВидДоговора = "СПоставщиком";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустаяСтрока(ВидДоговора)
	 И ЗначениеЗаполнено(Соглашение) Тогда
		
		Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеСправочника.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Справочник.СоглашенияСПоставщиками КАК ДанныеСправочника
			|ГДЕ
			|	ДанныеСправочника.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", Соглашение);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеСправочника.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК ДанныеСправочника
			|ГДЕ
			|	ДанныеСправочника.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", Соглашение);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустаяСтрока(ВидДоговора)
	 И ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ВидДоговора = "СПокупателем";
		Иначе
			ВидДоговора = "СПоставщиком";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидДоговора;
	
КонецФункции

// Заменяет документы расчетов при вызове отчетов по взаиморасчетов из реализации.
// Если реализация по заказу клиента - документом расчетов является заказ клиента.
//
// Параметры:
// Параметры - ДанныеФормыСтруктура - Параметры отчета.
//
Процедура ЗаменитьДокументыРасчетовСКлиентами(Параметры) Экспорт
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ЗаказКлиентаОтбор") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрЗаказКлиента = Параметры.Отбор.ЗаказКлиентаОтбор;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДанныеДокументов
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.РеализацияПоЗаказам И НЕ ТаблицаТовары.ЗаказКлиента ЕСТЬ NULL
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.РеализацияПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.АктПоЗаказам И НЕ ТаблицаУслуги.ЗаказКлиента ЕСТЬ NULL
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаУслуги.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
		|		ПО ТаблицаУслуги.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.АктПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ПродажаПоЗаказам
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.КорректировкаРеализации КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ВыкупВозвратнойТарыКлиентом КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ЗаявкаНаВозвратТоваровОтКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|			И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ДанныеДокумента.ЗаявкаНаВозвратТоваровОтКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&ЗаказКлиента)
		|	И ДанныеРегистра.ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокументов.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	ДанныеДокументов КАК ДанныеДокументов
		|");
		
		Запрос.УстановитьПараметр("ЗаказКлиента", ПараметрЗаказКлиента);
		
		МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
		
		Если ТипЗнч(ПараметрЗаказКлиента) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из ПараметрЗаказКлиента Цикл
				Если ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаказКлиента")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.АктВыполненныхРабот")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					МассивДокументов.Добавить(ТекЭлемент);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.ЗаказКлиента")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.АктВыполненныхРабот")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		 	МассивДокументов.Добавить(ПараметрЗаказКлиента);
		КонецЕсли;
		
		Параметры.Отбор.ЗаказКлиентаОтбор = МассивДокументов;
		
	КонецЕсли;
	
КонецПроцедуры

// Заменяет документы расчетов при вызове отчетов по взаиморасчетов из поступления.
// Если поступление по заказу поставщику - документом расчетов является заказ поставщику.
//
// Параметры:
// Параметры - ДанныеФормыСтруктура - Параметры отчета.
//
Процедура ЗаменитьДокументыРасчетовСПоставщиками(Параметры) Экспорт
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ЗаказПоставщикуОтбор") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрЗаказПоставщику = Параметры.Отбор.ЗаказПоставщикуОтбор;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДанныеДокументов
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//++ НЕ УТ
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ЗаказПереработчику КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ПоЗаказам
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ДанныеДокумента.ЗаказПереработчику
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ОтчетПереработчика КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//-- НЕ УТ
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ПоступлениеПоЗаказам И НЕ ТаблицаТовары.ЗаказПоставщику ЕСТЬ NULL
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказПоставщику
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.ПоступлениеПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРегистра.ОбъектРасчетов.Объект КАК ОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&ЗаказПоставщику)
		|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.ОбъектРасчетов.Объект) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
		|												ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
		|												ТИП(Документ.ПриходныйКассовыйОрдер),
		|												ТИП(Документ.РасходныйКассовыйОрдер),
		|												ТИП(Документ.ОперацияПоПлатежнойКарте),
		|												ТИП(Документ.ВводОстатков),
		|												ТИП(Документ.ВводОстатковВзаиморасчетов))
		|
		//++ НЕ УТ
		//++ Локализация
		//-- Локализация
		//-- НЕ УТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокументов.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	ДанныеДокументов КАК ДанныеДокументов
		|");
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ПараметрЗаказПоставщику);
		
		МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
		
		Если ТипЗнч(ПараметрЗаказПоставщику) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из ПараметрЗаказПоставщику Цикл
				Если ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаказПоставщику")
				//++ НЕ УТ
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаказПереработчику")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ОтчетПереработчика")
				 //++ Локализация
				 //-- Локализация
				//-- НЕ УТ
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
					МассивДокументов.Добавить(ТекЭлемент);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ЗаказПоставщику")
		//++ НЕ УТ
		 И ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ЗаказПереработчику")
		 И ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ОтчетПереработчика")
		 //++ Локализация
		 //-- Локализация
		//-- НЕ УТ
		 И ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		 И ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		 	МассивДокументов.Добавить(ПараметрЗаказПоставщику);
		КонецЕсли;
		
		Параметры.Отбор.ЗаказПоставщикуОтбор = МассивДокументов;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат проверки количества вариантов классификации при отключенной опции "ИспользоватьНесколькоКлассификацийЗадолженности".
//
// Параметры:
// Количество - Число - количество элементов в справочнике "ВариантыКлассификацииЗадолженности".
// Форма - ФормаКлиентскогоПриложения - форма, источник проверки.
//
// Возвращаемое значение:
// Булево - Ложь, если проверка пройдена, Истина, если проверка не пройдена, выдать сообщение об ошибке.
//
Функция ПроверкаИСообщениеВариантовКлассификацииЗадолженности(Количество, Форма) Экспорт
	Если Форма = Неопределено Тогда
		ПрефиксСообщения = НСтр("ru='Не удалось заполнить поле ""Вариант классификации задолженности"".';uk='Не вдалося заповнити поле ""Варіант класифікації заборгованості"".'");
	Иначе
		ПрефиксСообщения = "";
	КонецЕсли;
	
	СтатусВозврата = Ложь;
	Если Количество > 1 Тогда
		СообщениеОбОшибке = ПрефиксСообщения + НСтр("ru='В информационной базе введено несколько вариантов классификации задолженности.';uk='В інформаційній базі введено декілька варіантів класифікації заборгованості.'") 
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru='Включите функциональную опцию ""Предприятие - Несколько вариантов классификации задолженности"".';uk='Увімкніть функціональну опцію ""Підприємство - Кілька варіантів класифікації заборгованості"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		СтатусВозврата = Истина;
	ИначеЕсли Количество <> 1 Тогда
		СообщениеОбОшибке = ПрефиксСообщения + НСтр("ru='Возможно, в информационной базе не введено ни одного варианта классификации задолженности.';uk='Можливо, в інформаційній базі не введено жодного варіанту класифікації заборгованості.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		СтатусВозврата = Истина;
	КонецЕсли;

	Возврат СтатусВозврата;
КонецФункции 

// Формирует структуру отборов по партнеру и организации для контекстно вызываемых отчетов 
//   по расчетам с клиентом.
//
// Параметры:
//  МассивДокументов  - Массив - массив документов, которыми параметризуется отчет.
//  ИмяОтчета         - Строка - имя вызываемого отчета.
//  ИмяКоманды        - Строка - имя команды, при помощи которой вызывается отчет.вызываемого отчета.
//  Типы              - Массив - Массив типов параметра команды вызывающей отчет.
//
// Возвращаемое значение:
//   Структура   - сформированная структура отбора.
//
Функция СтруктураОтборовОтчетовРасчетыСКлиентами(МассивДокументов, ИмяОтчета, ИмяКоманды, Типы = Неопределено) Экспорт
	
	СтруктураОтборов = Новый Структура;
	
	ШаблонЗапросаПоДокументам = "
	|ВЫБРАТЬ 
	|	Документ.Партнер,
	|	Документ.Организация %ТекстПоместить%
	|ИЗ
	|	Документ.%ИмяТаблицы% КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивДокументов)";
	
	ТекстОбъединить = "
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ЭтоПервыйЗапросОбъединения = Истина;
	
	ТекстЗапроса = "";
	
	Коллекция = ?(ЗначениеЗаполнено(Типы), Типы, Метаданные.Отчеты[ИмяОтчета].Команды[ИмяКоманды].ТипПараметраКоманды.Типы());
	
	Для Каждого ТипПараметраКоманды Из Коллекция Цикл
		
		ОбъектМетаданныхДокумента = Метаданные.НайтиПоТипу(ТипПараметраКоманды);
		Если ПравоДоступа("Чтение", ОбъектМетаданныхДокумента) Тогда
			ИмяТаблицы = ОбъектМетаданныхДокумента.Имя;
			
			ТекстЗапросаПоДокументу = СтрЗаменить(ШаблонЗапросаПоДокументам, "%ИмяТаблицы%", ИмяТаблицы);
			ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, 
			                                      "%ТекстПоместить%",
			                                      ?(ЭтоПервыйЗапросОбъединения,Символы.ПС + "ПОМЕСТИТЬ ДокументыПартнерыОрганизации", ""));
			
			ТекстЗапроса = ТекстЗапроса + ?(ЭтоПервыйЗапросОбъединения, "", ТекстОбъединить) + ТекстЗапросаПоДокументу;
			
			ЭтоПервыйЗапросОбъединения = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументыПартнерыОрганизации.Партнер
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПартнерыОрганизации КАК ДокументыПартнерыОрганизации
	|		ПО Партнеры.Ссылка = ДокументыПартнерыОрганизации.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументыПартнерыОрганизации.Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПартнерыОрганизации КАК ДокументыПартнерыОрганизации
	|		ПО Организации.Ссылка = ДокументыПартнерыОрганизации.Организация";
	
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураОтборов.Вставить("Партнер", Результат[0].Выгрузить().ВыгрузитьКолонку("Партнер"));
	СтруктураОтборов.Вставить("Организация", Результат[1].Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Возврат СтруктураОтборов;
	
КонецФункции

// Устарела.
// Устанавливает видимость группы финансового учета по порядку расчетов документа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой было находится элемент группы финансового учета.
//	ЭтоЗаказ - Булево - Истина - Документ является заказом.
//	ПоЗаказу - Булево - Истина - Документ введен на основании заказа/заказов.
//
Процедура УстановитьВидимостьГруппыФинансовогоУчета(Форма, ЭтоЗаказ = Ложь, ПоЗаказу = Ложь) Экспорт
	
	ВидимостьЭлемента = Ложь;
	ПорядокРасчетов = Форма.Объект.ПорядокРасчетов;
	
	Если ЭтоЗаказ Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
	ИначеЕсли ПоЗаказу Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
	Иначе
		ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	КонецЕсли;
	
	Форма.Элементы.ГруппаФинансовогоУчета.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

// Устарела.
// Устанавливает видимость команд зачета оплаты по порядку расчетов документа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой находится команда зачета оплаты.
//	ЭтоЗаказ - Булево - Истина - Документ является заказом.
//	ПоЗаказу - Булево - Истина - Документ введен на основании заказа/заказов.
//	ЭтоДоговор - Булево - Истина - Документ является графиком исполнения договора.
//
Процедура УстановитьВидимостьЗачетаОплаты(Форма, ЭтоЗаказ = Ложь, ПоЗаказу = Ложь, ЭтоДоговор = Ложь) Экспорт
	
	РольДоступна = РольДоступна("ЗачетОплаты") ИЛИ РольДоступна("ПолныеПрава");
	
	ВидимостьЭлемента = РольДоступна;
	ПорядокРасчетов = Форма.Объект.ПорядокРасчетов;
	
	Если ЭтоЗаказ Тогда
		ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным) И РольДоступна;
	ИначеЕсли ПоЗаказу Тогда
		ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоЗаказамНакладным) И РольДоступна;
	ИначеЕсли ЭтоДоговор Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов) И РольДоступна;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы, 
		"ЗачетОплатыФорма, ЗачетОплаты",
		"Видимость",
		ВидимостьЭлемента);
	
КонецПроцедуры

// Устарела.
// Устанавливает видимость даты платежа по порядку расчетов документа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой находится дата платежа.
//
Процедура УстановитьВидимостьДатыПлатежа(Форма) Экспорт
	
	Форма.Элементы.ДатаПлатежа.Видимость = Форма.Элементы.ДатаПлатежа.Видимость
		И Не (Форма.ГрафикИсполненияВДоговоре И Форма.Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	
КонецПроцедуры

// Формирование таблицы взаимозачета кредиторской задолженности.
//
// Параметры:
//	ДебиторскаяЗадолженность - ТаблицаЗначений, МассивСтрок - таблица дебиторской задолженности.
//	КредиторскаяЗадолженность - ТаблицаЗначений, МассивСтрок - таблица кредиторской задолженности.
//	ТаблицаДвижений - РегистрНакопленияНаборЗаписей - таблица движений по регистру, если задана то будет дополнена движениями иначе будет возвращена в этой переменной.
//
Процедура ПровестиВзаимозачет(ДебиторскаяЗадолженность, КредиторскаяЗадолженность, ТаблицаДвижений) Экспорт
	
	ОбщиеПоля   = "Период,ХозяйственнаяОперация,Организация,Подразделение,Валюта";
	ПоляДебета  = "Партнер,Контрагент,Договор,НаправлениеДеятельности,ОбъектРасчетов,ТипСуммы,ВалютаВзаиморасчетов,ИсточникГФУРасчетов";
	ПоляКредита = "КорПартнер,КорКонтрагент,КорДоговор,КорНаправлениеДеятельности,КорОбъектРасчетов,КорТипСуммы,КорВалютаВзаиморасчетов,КорИсточникГФУРасчетов";
	ПоляСумм    = "Сумма,СуммаРегл,СуммаВВалюте,СуммаВВалютеВзаиморасчетов,КорСуммаВВалютеВзаиморасчетов";
	
	Если ТаблицаДвижений = Неопределено Тогда
		ТаблицаДвижений = РегистрыНакопления.ДвиженияКонтрагентКонтрагент.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	Иначе
		ОбщиеПоля = "Регистратор," + ОбщиеПоля;
	КонецЕсли;
	
	ПоследнийИндекс = КредиторскаяЗадолженность.Количество()-1;
	НашеПредприятие = Справочники.Партнеры.НашеПредприятие;
	Для Каждого Дебет Из ДебиторскаяЗадолженность Цикл
		Индекс = -1;
		Для Каждого Кредит Из КредиторскаяЗадолженность Цикл
			
			Индекс = Индекс + 1;
			Если Кредит.СуммаРегл = 0 Тогда
				Продолжить;
			КонецЕсли;
			ПоследнийПлатеж = Индекс = ПоследнийИндекс;
			
			Сумма        = СписатьСумму(Дебет.Сумма, Кредит.Сумма, ПоследнийПлатеж);
			СуммаРегл    = СписатьСумму(Дебет.СуммаРегл, Кредит.СуммаРегл, ПоследнийПлатеж);
			СуммаВВалюте = СписатьСумму(Дебет.СуммаВВалюте, Кредит.СуммаВВалюте, ПоследнийПлатеж);
			
			СуммаВзаиморасчетов = Окр(СуммаРегл/?(Дебет.КурсВалютыВзаиморасчетов=0,1,Дебет.КурсВалютыВзаиморасчетов),2);
			КорСуммаВзаиморасчетов = Окр(СуммаРегл/?(Кредит.КурсВалютыВзаиморасчетов=0,1,Кредит.КурсВалютыВзаиморасчетов),2);
			
			СуммаВВалютеВзаиморасчетов = СписатьСумму(Дебет.СуммаВВалютеВзаиморасчетов, СуммаВзаиморасчетов, ПоследнийПлатеж);
			КорСуммаВВалютеВзаиморасчетов = СписатьСумму(Кредит.КорСуммаВВалютеВзаиморасчетов, КорСуммаВзаиморасчетов, ПоследнийПлатеж);
			
			Если СуммаРегл <> 0 Тогда
				НовоеДвижение = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеДвижение, Дебет, ОбщиеПоля+","+ПоляДебета, ПоляСумм);
				ЗаполнитьЗначенияСвойств(НовоеДвижение, Кредит, ПоляКредита, ПоляСумм);
				
				НовоеДвижение.Сумма        = Сумма;
				НовоеДвижение.СуммаРегл    = СуммаРегл;
				НовоеДвижение.СуммаВВалюте = СуммаВВалюте;
				НовоеДвижение.СуммаВВалютеВзаиморасчетов    = СуммаВВалютеВзаиморасчетов;
				НовоеДвижение.КорСуммаВВалютеВзаиморасчетов = КорСуммаВВалютеВзаиморасчетов;
				
				Если Дебет.Организация <> Кредит.Организация Тогда
				
					НовоеДвижение.КорПартнер = НашеПредприятие;
					НовоеДвижение.КорКонтрагент = Кредит.Организация;
					
					НовоеДвижениеКор = ТаблицаДвижений.Добавить();
					ЗаполнитьЗначенияСвойств(НовоеДвижениеКор, Дебет, ПоляДебета, ПоляСумм);
					ЗаполнитьЗначенияСвойств(НовоеДвижениеКор, Кредит, ОбщиеПоля+","+ПоляКредита, ПоляСумм);
					ЗаполнитьЗначенияСвойств(НовоеДвижениеКор, НовоеДвижение, ПоляСумм);
					НовоеДвижениеКор.Партнер = НашеПредприятие;
					НовоеДвижениеКор.Контрагент = Дебет.Организация;
					
				КонецЕсли;
				
			КонецЕсли;
			Если Дебет.СуммаРегл <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;// по кредиторской задолженности
	КонецЦикла;// по дебиторской задолженности
	
КонецПроцедуры

// Определяется возможная сумма списания с текущего остатка - весь остаток или только часть остатка равная сумме списания.
// При этом уменьшается текущий остаток на сумму списания и сама сумма списания.
//
// Параметры:
//  СуммаОстатка - Число - Текущий остаток с которого необходимо списать сумму.
//  СуммаКСписанию - Число - Сумма которую необходимо списать.
//  ПоследняяЧасть - Булево - если истина, то списать весь остаток.
//
// Возвращаемое значение:
//  Число - сумма которую необходимо списать или весь остаток целиком в случае если он меньше заданной суммы или
//          ПоследняяЧасть = Истина.
//
Функция СписатьСумму(СуммаОстатка, СуммаКСписанию, ПоследняяЧасть = Ложь) Экспорт
	
	СуммаСписания = 0;
	КСписанию = Макс(СуммаКСписанию, -СуммаКСписанию);
	Знак = ?(КСписанию = 0, 1, СуммаКСписанию/КСписанию);
	
	Если СуммаОстатка >= КСписанию И НЕ ПоследняяЧасть Тогда
		СуммаСписания = КСписанию;
		СуммаОстатка = СуммаОстатка - СуммаСписания;
		КСписанию = 0;
	Иначе
		СуммаСписания = СуммаОстатка;
		КСписанию = КСписанию - СуммаСписания;
		СуммаОстатка = 0;
	КонецЕсли;
	
	СуммаКСписанию = Знак * КСписанию;
	
	Возврат СуммаСписания;
	
КонецФункции

// Определяется возможная сумма списания с текущего остатка одного показателя, 
// пропорционально уже списанной по другому показателю.
// При этом уменьшается текущий остаток.
//
// Параметры:
//	СуммаОстатка - Число - Текущий остаток с которого необходимо списать сумму.
//	СуммаСписано - Число - Сумма которая уже была списана с другого показателя.
//	СуммаВсего - Число - Сумма по другому показателю до списания.
//
// Возвращаемое значение:
//	Число - сумма которую необходимо списать.
//
Функция СписатьСуммуПропорционально(СуммаОстатка, СуммаСписано, СуммаВсего) Экспорт
	
	СуммаКСписанию = 0;
	Если СуммаВсего > 0 Тогда
		СуммаКСписанию = Окр(СуммаСписано * СуммаОстатка / СуммаВсего, 2);
	КонецЕсли;
	
	Возврат СписатьСумму(СуммаОстатка, СуммаКСписанию);
	
КонецФункции

// Устарела.
// Устанавливает видимость порядка оплаты по порядку расчетов документа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой было находится элемент порядка оплаты.
//	ЭтоЗаказ - Булево - Истина - Документ является заказом.
//	ПоЗаказу - Булево - Истина - Документ введен на основании заказа/заказов.
//
Процедура УстановитьВидимостьПорядкаОплаты(Форма, ЭтоЗаказ = Ложь, ПоЗаказу = Ложь) Экспорт
	
	ВидимостьЭлемента = Ложь;
	ПорядокРасчетов = Форма.Объект.ПорядокРасчетов;
	
	Если ЭтоЗаказ Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
	ИначеЕсли ПоЗаказу Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
	Иначе
		ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	КонецЕсли;
	
	Форма.Элементы.ГруппаФинансовогоУчета.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

// Функция - конструктор процедуры ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента.
//
// Возвращаемое значение:
//	Структура - Структура параметров.
//		* Партнер          - СправочникСсылка.Партнеры - Партнер документа-инициатора.
//		* Договор          - СправочникСсылка.ДоговорыКонтрагентов - Договор объекта расчетов.
//		* ЗаказКлиента     - ДокументСсылка.ЗаказКлиента - Объект расчетов.
//		* ВалютаДокумента  - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//		* ОснованиеПлатежа - ДокументСсылка - Документ-основание.
//
Функция ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Партнер");
	Параметры.Вставить("Договор");
	Параметры.Вставить("ЗаказКлиента");
	Параметры.Вставить("ВалютаДокумента");
	Параметры.Вставить("ОснованиеПлатежа");
	
	Возврат Параметры;
КонецФункции

// Функция возвращает максимальную дату из временной таблицы, которая содержит перечень документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит временную таблицу ТаблицаДанныхДокументов,
//														с перечнем документов одного типа.
//
Функция ПолучитьМаксимальнуюДатуВКоллекцииДокументов(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(КоллекцияДокументов.Ссылка.Дата), НЕОПРЕДЕЛЕНО) КАК Период
	|ИЗ
	|	ТаблицаДанныхДокументов КАК КоллекцияДокументов
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		МаксимальнаяДата = Результат.Выгрузить()[0].Период;
		
		Если МаксимальнаяДата = Неопределено Тогда
			МаксимальнаяДата = ТекущаяДатаСеанса();
		КонецЕсли;
	Иначе
		МаксимальнаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат МаксимальнаяДата;
КонецФункции

// Процедура формирует записи в регистре сведений "Задания к распределению расчетов с клиентами",
// если текущий документ изменяет записи в регистре "Расчеты с клиентами".
// Параметры:
//	Документ - Документ.Ссылка - Ссылка на документ-регистратор
//	ДополнительныеСвойства - Структура - Коллекция, содержащая в себе менеджер временных таблиц.
Процедура ОтразитьЗаданияКРаспределениюРасчетовСКлиентами(Документ, МенеджерВременныхТаблиц) Экспорт
	
	ВременныеТаблицы = МенеджерВременныхТаблиц;
	
	Если (ВременныеТаблицы.Таблицы.Найти("РасчетыСКлиентамиИзменения") <> Неопределено
			ИЛИ ВременныеТаблицы.Таблицы.Найти("РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами") <> Неопределено)
		И ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // есть изменения в оперативном регистре
		
		ШаблонВложенныйЗапрос = "
		|ВЫБРАТЬ
		|	Таблица.Месяц                        КАК Месяц,
		|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Ключи.Организация                    КАК Организация,
		|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
		|	Таблица.Документ                     КАК Документ
		|ИЗ
		|	&ТаблицаДанных КАК Таблица
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|	ПО Ключи.Ссылка = Таблица.АналитикаУчетаПоПартнерам
		|";
		
		ШаблонТекстУничтожениеВТ = "
		|;
		|//////////////////////////////
		|УНИЧТОЖИТЬ &ТаблицаДанных
		|";
		
		ТекстУничтожениеВТ = "";
		ВложенныйЗапрос = "";
		КоличествоТаблиц = 0;
		
		Если ВременныеТаблицы.Таблицы.Найти("РасчетыСКлиентамиИзменения") <> Неопределено Тогда
			ВложенныйЗапрос = СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "(" + ТестЗапросаРаспределениеРасчетовСКлиентами() + ")");
			ВложенныйЗапрос = СтрЗаменить(ВложенныйЗапрос, "Ключи.Организация", "Таблица.Организация");
			КоличествоТаблиц = КоличествоТаблиц + 1;
		КонецЕсли;
		
		Если ВременныеТаблицы.Таблицы.Найти("РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами") <> Неопределено Тогда
			Если КоличествоТаблиц = 0 Тогда
				ВложенныйЗапрос = СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами");
				ТекстУничтожениеВТ = СтрЗаменить(ШаблонТекстУничтожениеВТ, "&ТаблицаДанных", "РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами");
			Иначе
				ВложенныйЗапрос = ВложенныйЗапрос + "
					|ОБЪЕДИНИТЬ ВСЕ
					|"
					+ СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами");
				ТекстУничтожениеВТ = ТекстУничтожениеВТ + СтрЗаменить(ШаблонТекстУничтожениеВТ, "&ТаблицаДанных", "РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами");
			КонецЕсли;
			КоличествоТаблиц = КоличествоТаблиц + 1;
		КонецЕсли;
		
		Если КоличествоТаблиц = 1 Тогда
			ТекстЗапроса = ВложенныйЗапрос + ТекстУничтожениеВТ;
		Иначе
			ШаблонТекстаЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.Месяц                        КАК Месяц,
			|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
			|	Таблица.Организация                  КАК Организация,
			|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
			|	Таблица.Документ                     КАК Документ
			|ИЗ
			|	(
			|	&ВложенныйЗапрос
			|	) КАК Таблица
			|
			|";
			ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ВложенныйЗапрос", ВложенныйЗапрос) + ТекстУничтожениеВТ;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Запрос.УстановитьПараметр("НовыеРасчеты", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НаборЗаписей, Выборка);
			НаборЗаписей.НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСКлиентами.Получить();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует записи в регистре сведений "Задания к распределению расчетов с поставщиками",
// если текущий документ изменяет записи в регистре "Расчеты с поставщиками".
//
// Параметры:
//  Документ - Документ.Ссылка - Ссылка на документ-регистратор
//  ДополнительныеСвойства - Структура - Коллекция, содержащая в себе менеджер временных таблиц.
//
Процедура ОтразитьЗаданияКРаспределениюРасчетовСПоставщиками(Документ, МенеджерВременныхТаблиц) Экспорт
	
	ВременныеТаблицы = МенеджерВременныхТаблиц;
	
	Если (ВременныеТаблицы.Таблицы.Найти("РасчетыСПоставщикамиИзменения") <> Неопределено
			ИЛИ ВременныеТаблицы.Таблицы.Найти("РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками") <> Неопределено)
		И ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // есть изменения в оперативном регистре
		
		ШаблонВложенныйЗапрос = "
		|ВЫБРАТЬ
		|	Таблица.Месяц                        КАК Месяц,
		|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Ключи.Организация                    КАК Организация,
		|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
		|	Таблица.Документ                     КАК Документ
		|ИЗ
		|	&ТаблицаДанных КАК Таблица
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|	ПО Ключи.Ссылка = Таблица.АналитикаУчетаПоПартнерам
		|";
		
		ШаблонТекстУничтожениеВТ = "
		|;
		|//////////////////////////////
		|УНИЧТОЖИТЬ &ТаблицаДанных
		|";
		
		ТекстУничтожениеВТ = "";
		ВложенныйЗапрос = "";
		КоличествоТаблиц = 0;
		
		Если ВременныеТаблицы.Таблицы.Найти("РасчетыСПоставщикамиИзменения") <> Неопределено Тогда
			ВложенныйЗапрос = СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "(" + ТестЗапросаРаспределениеРасчетовСПоставщиками() + ")");
			ВложенныйЗапрос = СтрЗаменить(ВложенныйЗапрос, "Ключи.Организация", "Таблица.Организация");
			КоличествоТаблиц = КоличествоТаблиц + 1;
		КонецЕсли;
		
		Если ВременныеТаблицы.Таблицы.Найти("РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками") <> Неопределено Тогда
			Если КоличествоТаблиц = 0 Тогда
				ВложенныйЗапрос = СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками");
				ТекстУничтожениеВТ = СтрЗаменить(ШаблонТекстУничтожениеВТ, "&ТаблицаДанных", "РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками");
			Иначе
				ВложенныйЗапрос = ВложенныйЗапрос + "
					|ОБЪЕДИНИТЬ ВСЕ
					|"
					+ СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками");
				ТекстУничтожениеВТ = ТекстУничтожениеВТ + СтрЗаменить(ШаблонТекстУничтожениеВТ, "&ТаблицаДанных", "РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками");
			КонецЕсли;
			КоличествоТаблиц = КоличествоТаблиц + 1;
		КонецЕсли;
		
		Если КоличествоТаблиц = 1 Тогда
			ТекстЗапроса = ВложенныйЗапрос + ТекстУничтожениеВТ;
		Иначе
			ШаблонТекстаЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.Месяц                        КАК Месяц,
			|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
			|	Таблица.Организация                  КАК Организация,
			|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
			|	Таблица.Документ                     КАК Документ
			|ИЗ
			|	(
			|	&ВложенныйЗапрос
			|	) КАК Таблица
			|
			|";
			ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ВложенныйЗапрос", ВложенныйЗапрос) + ТекстУничтожениеВТ;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Запрос.УстановитьПараметр("НовыеРасчеты", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НаборЗаписей, Выборка);
			НаборЗаписей.НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСПоставщиками.Получить();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Устарела.
// Функция определяет, является ли переданная хозяйственная операция операцией интеркампани.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если является операцией интеркампани.
//
Функция ХозяйственнаяОперацияИнтеркампани(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Устарела.
// Функция определяет, является ли переданная хозяйственная операция операцией с клиентом.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если является операцией с клиентом.
//
Функция ХозяйственнаяОперацияСКлиентом(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Устарела.
// Функция определяет, является ли переданная хозяйственная операция операцией с поставщиком.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если является операцией с поставщиком.
//
Функция ХозяйственнаяОперацияСПоставщиком(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеТаможне") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Устарела.
// Функция определяет, является ли переданная хозяйственная операция операцией возврата денежных средств.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если является операцией возврата денежных средств.
//
Функция ХозяйственнаяОперацияВозвратДенежныхСредств(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получение списка контрагентов по сделкам для отправки приглашений.
//
// Параметры:
//  Организация			 - СправочникСсылка - ссылка на организацию, от которой производится приглашение.
//  РежимЗаполнения		 - Строка - режим заполнения контрагентов: "ЗаполнитьПоПоставкам", "ЗаполнитьПоЗакупкам", "ЗаполнитьПоВсемСделкам".
//  НачалоПериода		 - Дата - начало периода заполнения.
//  СписокКонтрагентов	 - ТаблицаЗначений - список контрагентов:
//    * Ссылка - СправочникСсылка - контрагент.
//    * ЭлектроннаяПочта - Строка - адрес электронной почты.
//
Процедура ПолучитьКонтрагентовПоСделкам(Организация, РежимЗаполнения, НачалоПериода, СписокКонтрагентов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаполнитьПоПоставкам",   РежимЗаполнения = "ЗаполнитьПоПоставкам");
	Запрос.УстановитьПараметр("ЗаполнитьПоЗакупкам",    РежимЗаполнения = "ЗаполнитьПоЗакупкам");
	Запрос.УстановитьПараметр("ЗаполнитьПоВсемСделкам", РежимЗаполнения = "ЗаполнитьПоВсемСделкам");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлючиАналитикиУчетаПоПартнерам.Контрагент КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами.Обороты(&НачалоПериода, , , ) КАК РасчетыСКлиентамиОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|			ПО РасчетыСКлиентамиОбороты.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|	ГДЕ
	|		КлючиАналитикиУчетаПоПартнерам.Организация = &Организация
	|		И (&ЗаполнитьПоПоставкам
	|				ИЛИ &ЗаполнитьПоВсемСделкам)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлючиАналитикиУчетаПоПартнерам.Контрагент
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Обороты(&НачалоПериода, , , ) КАК РасчетыСПоставщикамиОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|			ПО РасчетыСПоставщикамиОбороты.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|	ГДЕ
	|		КлючиАналитикиУчетаПоПартнерам.Организация = &Организация
	|		И (&ЗаполнитьПоЗакупкам
	|				ИЛИ &ЗаполнитьПоВсемСделкам)) КАК Контрагенты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагенты.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			НоваяСтрока = СписокКонтрагентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


// Функция определяет ведутся взаиморасчеты в иностранной валюте или в национальной
//
// Параметры:
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов объекта.
//
// Возвращаемое значение:
//		Булево - Истина, если расчеты в иностранной валюте.
//
Функция ВзаиморасчетыВВалюте(ВалютаВзаиморасчетов) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Возврат ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
	
КонецФункции

// Функция возвращает ссылку на объект расчетов переданной ссылки.
//
// Параметры:
//		ОбъектСсылка - ОпределяемыйТип.ОбъектРасчетов - Документ по которому нужно определить объект расчетов.
//
// Возвращаемое значение:
// 		ОпределяемыйТип.ОбъектРасчетов - Объект расчетов документа..
//
Функция ОбъектРасчетовПоСсылке(ОбъектСсылка) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "ПорядокРасчетов") Тогда 
		Порядок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ПорядокРасчетов");
		Если Порядок = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
				ИЛИ ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
				Возврат ОбъектСсылка
			Иначе
				Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Договор");
			КонецЕсли;
		ИначеЕсли Порядок = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "ЗаказКлиента") Тогда
			Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ЗаказКлиента");
			Если ЗначениеЗаполнено(Заказ) Тогда
				Возврат Заказ;
			КонецЕсли;
		ИначеЕсли Порядок = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "ЗаказПоставщику") Тогда
			Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ЗаказПоставщику");
			Если ЗначениеЗаполнено(Заказ) Тогда
				Возврат Заказ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектСсылка;
	
КонецФункции

// см. ОтчетыУТПереопределяемый.ДополнитьСоответствияРегистраторовОтчетаОДвижениях
//
Процедура ДополнитьСоответствияРегистраторовОтчетаОДвижениях(Документ, СоответствиеРегистров) Экспорт
	
	Если Документ.Метаданные().Движения.Содержит(Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок, "ДокументРегистратор");
	КонецЕсли;
	
	Если Документ.Метаданные().Движения.Содержит(Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок, "ДокументРегистратор");
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасчетКурсовыхРазниц") Тогда
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам, "ДокументРегистратор");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьОплатыВВалюте(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
    ДоступностьОплатаВВалюте = Ложь;
    Если Объект.Организация = Справочники.Организации.УправленческаяОрганизация Тогда
        ДоступностьОплатаВВалюте = Истина;
	Иначе
		ОплатаВВалютеПоУмолчанию = ВзаиморасчетыСервер.ПолучитьОплатуВВалютеПоУмолчанию(Объект.Валюта);
		Если ОплатаВВалютеПоУмолчанию <> Объект.ОплатаВВалюте Тогда
			Объект.ОплатаВВалюте = Истина;
		КонецЕсли; 
        ДоступностьОплатаВВалюте = Ложь;
	КонецЕсли;
    
    ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОплатаВВалюте", "Доступность", ДоступностьОплатаВВалюте);
    
КонецПроцедуры

 

#КонецОбласти

#Область ФормированиеЗаданийКЗакрытиюМесяца

// Дополняет текст запроса механизма формирования заданий закрытия месяца.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
Процедура ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(Запрос, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц) Экспорт
	
	СоответствиеЗапросов = СоответствиеЗапросовКонтрольнымРегистрам(Запрос);
	
	Для Каждого ЭлементСоответствия Из СоответствиеЗапросов Цикл
		ЗакрытиеМесяцаСервер.ДополнитьТекстЗапросаЗаданий(ЭлементСоответствия.Ключ,
			ЭлементСоответствия.Значение,
			Запрос.МенеджерВременныхТаблиц.Таблицы,
			ТекстЗапроса,
			ТекстЗапросаВременныхТаблиц,
			ИменаВременныхТаблиц);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Модульность

#Область ОбщийПрограммныйИнтерфейс

// Возвращает структуру параметров механизма взаиморасчетов.
// Параметры описываются либо путем к данным объекта, либо фиксированным значением типа Булево, Строка и пр.
// Путь к данным может вести как в шапку документа ("Объект.Организация"), так и в табличную часть ("Объект.РасшифровкаПлатежа.Партнер").
// В одном документе может быть задано несколько структур параметров (пример - ОтчетКомиссионера).
// Для встраивания в документы рекомендуется использовать шаблон в конце метода.
//
// Возвращаемое значение:
// 	Структура - Структура параметров с ключами:
// 		* ЭлементыФормы - Структура - Имена элементов формы, используются для связи элемента с текущими параметрами:
// 			* ЗачетОплаты - Строка - Имя элемента, вызывающего помощник зачета оплат.
// 			* СуммаВзаиморасчетовТЧ - Строка - Имя элемента, отображающего колонку Сумма взаиморасчетов в основной табличной части.
// 			* ГиперссылкаРасшифровкаПлатежа - Строка - Имя элемента, отображающего сумму расшифровки платежа и открывающего ее редактирование.
// 			* РасшифровкаПлатежа - Строка - Имя элемента, отображающего табличную часть Расшифровка платежа на форме.
// 			* ПодборВРасшифровкуПлатежа - Строка - Имя кнопки, вызывающего подбор в расшифровку платежа.
// 			* НадписьВалюты - Строка - Имя гиперссылки, отображающей валюты и курс документа и вызывающего форму их редактирования.
// 			* НадписьЭтапы - Строка - Имя гиперссылки, отображающей график оплаты и открывающий форму редактирования правил оплаты.
// 			* НадписьРасчеты - Строка - Имя гиперссылки, отображающей состояние расчетов и открывающей отчет по взаиморасчетам.
// 			* ОграничениеЗадолженностиТекст - Строка - Имя гиперссылки, отображающей текст ограничения задолженности и открывающей соответствующий отчет.
// 			* ОграничениеЗадолженностиКартинка - Строка - Имя картинки, отображающей восклицательный знак при ограничении задолженности.
// 		* ЭтоЗаказ - Булево - Это документ - заказ, на основании которого будут вводиться накладные.
// 		* ЭтоДоговор - Булево - Это справочник договоры.
// 		* ЭтоПродажаЗакупка - Булево - Это документ - накладная.
// 		* ТипРасчетов - Перечисления.ТипыРасчетовСПартнерами - Тип взаиморасчетов.
// 		* ИзменяетПланОплаты - Булево - Уменьшает или увеличивает планы к оплате от клиента или поставщику.
// 		* ИзменяетПланОтгрузкиПоставки - Булево - Уменьшает или увеличивает план отгрузки или поставки.
// 		
// 		* Дата - Строка - Путь к реквизиту объекта, содержащему дату документа.
// 		* ВалютаДокумента - Строка - Путь к реквизиту объекта, содержащему валюту документа.
// 		* СуммаДокумента - Строка - Путь к реквизиту объекта, содержащему сумму документа в валюте документа.
// 		* Организация - Строка- Путь к реквизиту объекта, содержащему организацию, от лица которой производится хозяйственная операция.
// 		* Партнер - Строка - Путь к реквизиту объекта, содержащему партнера, с которым возникают взаиморасчеты у организации.
// 		* Контрагент - Строка - Путь к реквизиту объекта, содержащему контрагента или организацию, с которой возникают взаиморасчеты у организации.
// 		
// 		* ВалютаВзаиморасчетов - Строка - Путь к реквизиту объекта, содержащему валюту, по который ведутся взаиморасчеты организации с контрагентом.
// 		* СуммаВзаиморасчетов - Строка - Путь к реквизиту объекта, содержащему общую сумму взаиморасчетов документа, без учета залога за тару.
// 		* СуммаВзаиморасчетовПоТаре - Строка - Путь к реквизиту объекта, содержащему общую сумму залога за тару.
// 		
// 		* Договор - Строка - Путь к реквизиту объекта, содержащему договор организации с контрагентом, в рамках которого возникают взаиморасчеты.
// 		* НаправлениеДеятельности - Строка - Путь к реквизиту объекта, содержащему направление деятельности организации, в рамках которой следует отражать взаиморасчеты.
// 		* ПорядокРасчетов - Строка - Путь к реквизиту объекта, содержащему порядок расчетов документа.
// 		* СуммаДокументаФорма - Строка - Путь к реквизиту формы, содержащему сумму документа с учетом залоговой тары.
// 		
// 		* ПутьКДаннымТЧ - Строка - Путь к реквизиту объекта, содержащему основную табличную часть документа.
// 		* ИмяРеквизитаТЧСуммаСНДС - Строка - Имя реквизита табличной части, содержащего сумму строки с ндс в валюте документа.
// 		* ИмяРеквизитаТЧСуммаСНДС - Строка - Имя реквизита табличной части, содержащего заказ, по которому производится отгрузка/поставка.
// 		
// 		* ПутьКДаннымТЧРасшифровкаПлатежа - Строка - Путь к реквизиту объекта, содержащему табличную часть "Расшифровка платежа" документа.
// 		* Соглашение - Строка - Путь к реквизиту объекта, содержащему соглашение с клиентом или поставщиком.
// 		* БанковскийСчетОрганизации - Строка - Путь к реквизиту объекта, содержащему банковский счет организации.
// 		* БанковскийСчетКонтрагента - Строка - Путь к реквизиту объекта, содержащему банковский счет контрагента.
// 		* Касса - Строка - Путь к реквизиту объекта, содержащему кассу.
// 		* ФормаОплаты - Строка - Путь к реквизиту объекта, содержащему форму оплаты.
// 		* ОплатаВВалюте - Строка - Путь к реквизиту объекта, содержащему признак "Оплата в валюте".
// 		* ГруппаФинансовогоУчета - Строка - Путь к реквизиту объекта, содержащему группу финансового учета расчетов.
// 		* ОбъектРасчетов - Строка - Пусть к реквизиту объекта или колонке ТЧ, хранящей ссылку /ссылки на справочник Объекты расчетов.
// 		* Ссылка - Строка - Пусть к реквизиту Ссылка, которая будет являться объектом расчетов при расчетах по накладным.
// 		* Подразделение - Строка - Путь к реквизиту объекта, содержащему подразделение.
// 		* Менеджер - Строка - Путь к реквизиту объекта, содержащему ответственного менеджера.
// 		* НомерВходящегоДокумента - Строка - Путь к реквизиту объекта, содержащему номер входящего документа.
// 		* ДатаВходящегоДокумента - Строка - Путь к реквизиту объекта, содержащему дату входящего документа.
// 		
// 		* НакладнаяПоЗаказам - Строка - Путь к реквизиту объекта, содержащему признак того, что документ введен по заказу.
// 		* ЗаказОснование - Строка - Путь к реквизиту объекта, содержащему заказ, по которому введен документ.
// 		* ПартнерПрочиеОтношения - Булево - Истина, если подбирать следует только по партнерам с признаком "Прочие отношения".
// 		* ПодборДебиторскойЗадолженности - Булево - Истина, если подбирается дебиторская задолженность.
// 		* ПодборТолькоБезусловнойЗадолженности - Булево - Истина, если подбирается только фактическая задолженность.
// 		
// 		* Курс - Строка - Путь к реквизиту объекта, содержащему курс валюты документа относительно валюты взаиморасчетов.
// 		* Кратность - Строка - Путь к реквизиту объекта, содержащему кратность валюты документа относительно валюты взаиморасчетов.
// 		* ВалютыИКурсДокументаТолькоПросмотр - Булево - Истина, если в форме редактирования валют и курсов документа ничего нельзя менять.
// 		* ВалютаДокументаТолькоПросмотр - Булево - Истина, если в форме редактирования валют и курсов документа нельзя менять валюту документа.
// 		* ВалютаВзаиморасчетовТолькоПросмотр - Булево - Истина, если в форме редактирования валют и курсов документа  нельзя менять валюту взаиморасчетов.
// 		* НеПоказыватьРасчеты - Булево - Истина, если в форме редактирования валют и курсов документа нужно скрыть валюту и сумму взаиморасчетов.
// 		* НеПересчитыватьСуммуДокумента - Булево - Истина, если в форме редактирования валют и курсов документа не нужно предлагать пересчитывать сумму документа.
// 		
// 		* ПутьКДаннымТЧЭтапыОплаты - Строка - Путь к реквизиту объекта, содержащему табличную часть этапов графика оплаты.
// 		* ДатаПлатежа - Строка - Путь к реквизиту объекта, содержащему дату планового платежа по документу.
// 		* ГрафикОплаты - Строка - Путь к реквизиту объекта, содержащему шаблон графика оплаты документа.
// 		* ДатаОтсчетаГрафика - Строка - Путь к реквизиту объекта, содержащему дату, от которой следует считать кредитные этапы графика оплаты.
// 		* СуммаЗалогаЗаТаруФорма - Строка - Путь к реквизиту формы, содержащему сумму залога за тару в валюте документа.
// 		* ЭтапыОплатыТолькоПросмотр - Булево - Признак Только просмотр для открываемой формы редактирования правил оплаты.
// 		* ВозможнаПредоплатаПоНакладной - Булево - Истина, если по накладной возможна предоплата.
// 		* ВозможнаНакладнаяПоНесколькимЗаказам - Булево - Истина, если накладная может быть введена по нескольким заказам.
//
Функция ПараметрыМеханизма() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	//Имена элементов форм для текущего набора параметров
	ЭлементыФормы = Новый Структура();
	
	#Область ОбязательныеПараметры
	
	//Если все опции ложь, то это платеж или служебный документ.
	СтруктураПараметров.Вставить("ЭтоЗаказ",                         Ложь);
	СтруктураПараметров.Вставить("ЭтоДоговор",                       Ложь);
	СтруктураПараметров.Вставить("ЭтоПродажаЗакупка",                Ложь);
	
	//Определяет какой регистр двигают параметры, какие общие формы, перечисления и справочники использовать.
	СтруктураПараметров.Вставить("ТипРасчетов",                      Перечисления.ТипыРасчетовСПартнерами.ПустаяСсылка());
	СтруктураПараметров.Вставить("Организация",                      "Объект.Организация");
	
	// При определенных значениях реквизитов документа он может не изменять взаиморасчеты в части оплат или отгрузок.
	// Пример - Передача товара на комиссию.
	//
	// Если оба флага отрицательны, то скрывается гиперссылка "Расчеты", очищаются суммы взаиморасчеты и табличные части механизма.
	// При отрицательном значении будут скрыты кнопки ЗачетОплаты и ЭтапыОплаты, но можно будет менять валюты и курс.
	СтруктураПараметров.Вставить("ИзменяетПланОплаты",               Истина);
	СтруктураПараметров.Вставить("ИзменяетПланОтгрузкиПоставки",     Истина);
	
	// Дата отражения документа в системе.
	// Используется для получения остатков просроченной задолженности для функции ограничения задолженности.
	// Используется для получения курсов валют документа. 
	// Используется для заполнения этапов оплаты и расшифровки платежа по умолчанию.
	СтруктураПараметров.Вставить("Дата",                             "Объект.Дата");
	
	// Валюта и сумма операции. Обязательно путь к реквизитам объекта.
	СтруктураПараметров.Вставить("ВалютаДокумента",                  "Объект.Валюта");
	СтруктураПараметров.Вставить("СуммаДокумента",                   "Объект.СуммаДокумента");
	
	// Используются для генерации объектов расчетов и аналитики.
	СтруктураПараметров.Вставить("Партнер",                          "Объект.Партнер");
	СтруктураПараметров.Вставить("Контрагент",                       "Объект.Контрагент");
	
	#КонецОбласти
	
	#Область НеобязательныеПараметры
	
	// Отличные от валюты и суммы документа реквизиты. Если не заполнен, то для чтения будет взята валюта документа.
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов",             "");
	СтруктураПараметров.Вставить("СуммаВзаиморасчетов",              "");
	СтруктураПараметров.Вставить("СуммаВзаиморасчетовПоТаре",        "");
	
	// Используется для генерации аналитики проведения и объекта расчетов, определения графика исполнения договора.
	СтруктураПараметров.Вставить("Договор",                          "Объект.Договор");
	// Используется для генерации аналитики проведения и объекта расчетов.
	СтруктураПараметров.Вставить("НаправлениеДеятельности",          "Объект.НаправлениеДеятельности");
	
	// Порядок расчетов документа.
	СтруктураПараметров.Вставить("ПорядокРасчетов",                  "Объект.ПорядокРасчетов");
	СтруктураПараметров.Вставить("УсловныйПорядокРасчетов",          "");
	
	// Сумма всего с залоговой тарой. Путь к итоговому показателю формы (реквизиту).
	// Используется для отображения гиперссылок, редактирования и заполнения графика плановых оплат
	// редактирования расшифровки платежа и т.д.
	СтруктураПараметров.Вставить("СуммаДокументаФорма",              ""); 
	
	// Реквизит формы итоговых показателей, содержащий сумму залога за тару в валюте документа.
	// Используется в заполнении этапов графика оплаты.
	СтруктураПараметров.Вставить("СуммаЗалогаЗаТаруФорма",               "");
	
	// Табличная часть, по которой распределяется сумма взаиморасчетов, сумма залога за тару или разбивка накладной по заказам.
	// Используется для отображения гиперссылок, редактирования и заполнения графика плановых оплат
	// редактирования расшифровки платежа, если не заполнен параметр СуммаДокументаФорма.
	// В ТЧ заполняются объекты расчетов по заказам.
	СтруктураПараметров.Вставить("ПутьКДаннымТЧ",                    "");
	// Имя реквизита суммы с ндс табличной части.
	СтруктураПараметров.Вставить("ИмяРеквизитаТЧСуммаСНДС",          "СуммаСНДС");
	// Имя реквизита тч, содержащего заказ.
	СтруктураПараметров.Вставить("ИмяРеквизитаТЧЗаказ",              "");
	
	// Путь к табличной части Расшифровка платежа.
	// Используется в функция зачета оплат, распределения взаиморасчетов, распределения оплаты.
	СтруктураПараметров.Вставить("ПутьКДаннымТЧРасшифровкаПлатежа",  "");
	
	// Используется для заполнения значений по умолчанию, заполнения графика плановых оплат и даты платежа.
	СтруктураПараметров.Вставить("Соглашение",                       "Объект.Соглашение");
	
	// Используются для определения значения ОплатаВВалюте и в форме редактирования правил оплаты.
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",        "Объект.БанковскийСчетОрганизации");
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",        "Объект.БанковскийСчетКонтрагента");
	СтруктураПараметров.Вставить("Касса",                            "Объект.Касса");
	СтруктураПараметров.Вставить("ФормаОплаты",                      "Объект.ФормаОплаты");
	СтруктураПараметров.Вставить("ОплатаВВалюте",                    "Объект.ОплатаВВалюте");
	
	// Реквизиты для объекта расчетов, используются в проведении.
	СтруктураПараметров.Вставить("ГруппаФинансовогоУчета",           "Объект.ГруппаФинансовогоУчета");
	СтруктураПараметров.Вставить("Подразделение",                    "Объект.Подразделение");
	СтруктураПараметров.Вставить("Менеджер",                         "");
	СтруктураПараметров.Вставить("НомерВходящегоДокумента",          "");
	СтруктураПараметров.Вставить("ДатаВходящегоДокумента",           "");
	
	// Используется для определения объекта расчетов.
	СтруктураПараметров.Вставить("НакладнаяПоЗаказам",               "");
	
	// Заказ основание из шапки.
	// Используется при определении порядка расчетов по умолчанию и списка доступных порядков для выбора.
	// Используется для определения объекта расчетов.
	СтруктураПараметров.Вставить("ЗаказОснование",                   ""); 
	
	// Имя кнопки, открывающей помощник зачета оплат для текущего набора параметров.
	ЭлементыФормы.Вставить("ЗачетОплаты",                      "");
	// Имя элемента таблицы формы, отображающей сумму взаиморасчетов.
	// Используется для установки условного оформления.
	// Следует заполнить если документ поддерживает построчное ручное редактирование сумм взаиморасчетов.
	ЭлементыФормы.Вставить("СуммаВзаиморасчетовТЧ",            "");
	
	// Имя элемента формы содержащего группу финансового учета для отражения текущего набора параметров по БУ.
	ЭлементыФормы.Вставить("ГруппаФинансовогоУчета",           "");
	
	// Место хранения ссылки/ссылок на справочник Объекты расчетов. Может быть в шапке или в табличной части.
	СтруктураПараметров.Вставить("ОбъектРасчетов",             "");
	
	СтруктураПараметров.Вставить("Ссылка",                     "Объект.Ссылка");
	
	#КонецОбласти
	
	#Область РедактированиеРасшифровкиПлатежа
	
	// Если расшифровка редактируется в общей форме, используется в Зачете возвратов товаров.
	ЭлементыФормы.Вставить("ГиперссылкаРасшифровкаПлатежа",    "");
	
	// Если расшифровка редактируется в документе.
	// Используется в распределении оплаты.
	ЭлементыФормы.Вставить("РасшифровкаПлатежа",               "");
	ЭлементыФормы.Вставить("ПодборВРасшифровкуПлатежа",        "");
	
	// Настройки подбора и выбора в ТЧ Расшифровка платежа
	
	// Для подбора остатков расчетов по партнерам с типом расчетов Прочие отношения, без отбора по партнеру.
	СтруктураПараметров.Вставить("ПартнерПрочиеОтношения",               Ложь); 
	СтруктураПараметров.Вставить("ПодборДебиторскойЗадолженности",       Ложь);
	СтруктураПараметров.Вставить("ПодборТолькоБезусловнойЗадолженности", Ложь);
	
	#КонецОбласти
	
	#Область РедактированиеВалютИВалютныхСуммДокумента
	
	// Курс и кратность документа - одна пара для документа.
	// Используются для расчета суммы взаиморасчетов и в форме редактирования валют и курсов документа.
	СтруктураПараметров.Вставить("Курс",                              "");
	СтруктураПараметров.Вставить("Кратность",                         "");
	
	// Имя гиперссылки, отображающей текущий курс взаиморасчетов документа и открывающей соответствующую форму.
	ЭлементыФормы.Вставить("НадписьВалюты",                    "");
	
	// Используется, когда в вызывающей форме не стоит флаг ТолькоПросмотр, но ограничить редактирование валют нужно.
	СтруктураПараметров.Вставить("ВалютыИКурсДокументаТолькоПросмотр", Ложь);
	
	// Используются в условии через ИЛИ с правом отклонения от условий продаж/закупок.
	СтруктураПараметров.Вставить("ВалютаДокументаТолькоПросмотр",      Ложь);
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетовТолькоПросмотр", Ложь);
	
	// Если не следует показывать сумму и валюту взаиморасчетов исходя из данных документа.
	СтруктураПараметров.Вставить("НеПоказыватьРасчеты",                Ложь);
	// Если не требуется предлагать пересчет суммы документа.
	СтруктураПараметров.Вставить("НеПересчитыватьСуммуДокумента",      Ложь);
	
	#КонецОбласти
	
	#Область ГрафикПлановойОплатыИДатаПлатежа
	
	// Функция Этапы оплаты и дата платежа
	СтруктураПараметров.Вставить("ПутьКДаннымТЧЭтапыОплаты",         "");
	СтруктураПараметров.Вставить("ДатаПлатежа",                      "");
	СтруктураПараметров.Вставить("ГрафикОплаты",                     "");
	СтруктураПараметров.Вставить("ДатаОтсчетаГрафика",               "Объект.Дата");
	
	// Имя гиперссылки, отображающей текущие правила оплаты документа и открывающей форму Правила оплаты.
	ЭлементыФормы.Вставить("НадписьЭтапы",                     "");
	// Поле ввода порядка оплаты
	ЭлементыФормы.Вставить("ПорядокРасчетов",                  "");
	
	// Если требуется ограничить редактирование плавил оплаты.
	СтруктураПараметров.Вставить("ЭтапыОплатыТолькоПросмотр",            Ложь);
	// Если истина, то для редактирования графика оплаты накладной в упрощенном режиме будет выведено поле "Предоплата".
	СтруктураПараметров.Вставить("ВозможнаПредоплатаПоНакладной",        Ложь);
	// Если истина и накладная по заказам то будет отображена расширенная форма графика оплаты, несмотря на функциональную опцию "Упрощенная форма оплаты".
	СтруктураПараметров.Вставить("ВозможнаНакладнаяПоНесколькимЗаказам", Ложь);
	// Если несмотря на порядок расчетов и "по заказу" нужно отображать расширенный режим. Упрощенный будет только если включена опция.
	СтруктураПараметров.Вставить("РасширенныйРежим", Ложь);
	// Скрывает Банковский счет, кассу, оплату в валюте в форме плавил оплаты, используется в самообслуживании.
	СтруктураПараметров.Вставить("НеУказыватьИсточникиОплаты", Ложь);
	
	#КонецОбласти
	
	#Область СостояниеВзаиморасчетов
	
	ЭлементыФормы.Вставить("НадписьРасчеты",                   ""); // Имя гиперссылки, отображающей состояние расчетов и открывающей соответствующий отчет,
	
	#КонецОбласти
	
	#Область ОграниченияЗадолженностиПоДоговору
	
	ЭлементыФормы.Вставить("ОграничениеЗадолженностиТекст",    ""); // Гиперссылка отображающая состояние ограничения задолженности
	ЭлементыФормы.Вставить("ОграничениеЗадолженностиКартинка", ""); // Картинка отображающая запрет отгрузки
	
	#КонецОбласти
	
	СтруктураПараметров.Вставить("ИзменяетРасчетыСтрокой", "ИСТИНА");
	СтруктураПараметров.Вставить("ТолькоОстатки", Ложь);
	СтруктураПараметров.Вставить("ЭлементыФормы", ЭлементыФормы);
	
	Возврат СтруктураПараметров;
	
		// Шаблон для вставки в модуль менеджера документа.
	// Если значение параметра документа не отличается от значения шаблона - строку можно удалить.
	// Если в документе реквизит отсутствует или отличается, а в шаблоне заполнен - стоку нужно раскомментировать и отредактировать.
	
// Возвращает параметры механизма взаиморасчетов.
// 
// Возвращаемое значение:
// 	Массив - Массив параметров функций механизма взаиморасчетов (См. ВзаиморасчетыСервер.ПараметрыМеханизма)
//
//Функция ПараметрыВзаиморасчеты() Экспорт
//	
//	СтруктураПараметров = ВзаиморасчетыСервер.ПараметрыМеханизма();
//	
//	#Область ОбязательныеПараметры
//	
//	//Если все опции ложь, то это платеж или служебный документ.
//	СтруктураПараметров.ЭтоЗаказ                         = Ложь;
//	СтруктураПараметров.ЭтоДоговор                       = Ложь;
//	СтруктураПараметров.ЭтоПродажаЗакупка                = Ложь;
//	
//	//Определяет какой регистр двигают параметры, какие общие формы, перечисления и справочники использовать.
//	СтруктураПараметров.ТипРасчетов                      = Перечисления.ТипыРасчетовСПартнерами.ПустаяСсылка();
//	СтруктураПараметров.Организация                      = "Объект.Организация";
//	
//	//При определенных значениях реквизитов документа он может не изменять взаиморасчеты в части оплат или отгрузок.
//	//Пример - Передача товара на комиссию.
//
//	//Если оба флага отрицательны, то скрывается гиперссылка "Расчеты", очищаются суммы взаиморасчеты и табличные части механизма.
//	//При отрицательном значении будут скрыты кнопки ЗачетОплаты и ЭтапыОплаты, но можно будет менять валюты и курс.
//	СтруктураПараметров.ИзменяетПланОплаты               = Истина;
//	СтруктураПараметров.ИзменяетПланОтгрузкиПоставки     = Истина;
//	
//	//Дата отражения документа в системе.
//	//Используется для получения остатков просроченной задолженности для функции ограничения задолженности.
//	//Используется для получения курсов валют документа. 
//	//Используется для заполнения этапов оплаты и расшифровки платежа по умолчанию.
//	СтруктураПараметров.Дата                             = "Объект.Дата"; 
//	
//	//Валюта и сумма операции. Обязательно путь к реквизитам объекта.
//	СтруктураПараметров.ВалютаДокумента                  = "Объект.Валюта";
//	СтруктураПараметров.СуммаДокумента                   = "Объект.СуммаДокумента";
//	
//	//Используются для генерации объектов расчетов и аналитики.
//	СтруктураПараметров.Партнер                          = "Объект.Партнер";
//	СтруктураПараметров.Контрагент                       = "Объект.Контрагент";
//	
//	#КонецОбласти
//	
//	#Область НеобязательныеПараметры
//	
//	//Отличные от валюты и суммы документа реквизиты. Если не заполнен, то для чтения будет взята валюта документа.
//	СтруктураПараметров.ВалютаВзаиморасчетов             = "";
//	СтруктураПараметров.СуммаВзаиморасчетов              = "";
//	СтруктураПараметров.СуммаВзаиморасчетовПоТаре        = "";
//	
//	//Используется для генерации аналитики проведения и объекта расчетов, определения графика исполнения договора.
//	СтруктураПараметров.Договор                          = "Объект.Договор";
//	//Используется для генерации аналитики проведения и объекта расчетов.
//	СтруктураПараметров.НаправлениеДеятельности          = "Объект.НаправлениеДеятельности";
//	
//	//Порядок расчетов документа.
//	СтруктураПараметров.ПорядокРасчетов                  = "Объект.ПорядокРасчетов";
//	
//	//Сумма всего с залоговой тарой. Путь к итоговому показателю формы (реквизиту).
//	//Используется для отображения гиперссылок, редактирования и заполнения графика плановых оплат
//	//редактирования расшифровки платежа и т.д.
//	СтруктураПараметров.СуммаДокументаФорма              = "";
//	
//	//Реквизит формы итоговых показателей, содержащий сумму залога за тару в валюте документа.
//	//Используется в заполнении этапов графика оплаты.
//	СтруктураПараметров.СуммаЗалогаЗаТаруФорма            = ""; 
//
//	//Табличная часть, по которой распределяется сумма взаиморасчетов и есть поле "заказ".
//	//Используется для отображения гиперссылок, редактирования и заполнения графика плановых оплат
//	//редактирования расшифровки платежа, если не заполнен параметр СуммаДокументаФорма.
//	//В ТЧ заполняются объекты расчетов по заказам.
//	СтруктураПараметров.ПутьКДаннымТЧ                    = "";
//	//Имя реквизита суммы с ндс табличной части.
//	СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС          = "СуммаСНДС";
//	//Имя реквизита тч, содержащего заказ.
//	СтруктураПараметров.ИмяРеквизитаТЧЗаказ              = "";
//	
//	//Путь к табличной части Расшифровка платежа.
//	//Используется в функция зачета оплат, распределения взаиморасчетов, распределения оплаты.
//	СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа  = "";
//	
//	//Используется для заполнения значений по умолчанию, заполнения графика плановых оплат и даты платежа.
//	СтруктураПараметров.Соглашение                       = "Объект.Соглашение";
//	
//	//Используются для определения значения ОплатаВВалюте и в форме редактирования правил оплаты.
//	СтруктураПараметров.БанковскийСчетОрганизации        = "Объект.БанковскийСчетОрганизации";
//	СтруктураПараметров.БанковскийСчетКонтрагента        = "Объект.БанковскийСчетКонтрагента";
//	СтруктураПараметров.Касса                            = "Объект.Касса";
//	СтруктураПараметров.ФормаОплаты                      = "Объект.ФормаОплаты";
//	СтруктураПараметров.ОплатаВВалюте                    = "Объект.ОплатаВВалюте";
//	
//	//Место хранения ссылки/ссылок на справочник Объекты расчетов.
//	СтруктураПараметров.ОбъектРасчетов                   = "";
//	
//	//Реквизиты для объекта расчетов, используются в проведении.
//	СтруктураПараметров.ГруппаФинансовогоУчета           = "Объект.ГруппаФинансовогоУчета";
//	СтруктураПараметров.Подразделение                    = "Объект.Подразделение";
//	СтруктураПараметров.Менеджер                         = "";
//	СтруктураПараметров.НомерВходящегоДокумента          = "";
//	СтруктураПараметров.ДатаВходящегоДокумента           = "";
//	
//	//Используется для определения объекта расчетов.
//	СтруктураПараметров.НакладнаяПоЗаказам               = "";
//	
//	//Используется при определении порядка расчетов по умолчанию и списка доступных порядков для выбора.
//	//Используется для определения объекта расчетов.
//	СтруктураПараметров.ЗаказОснование                   = ""; 
//	
//	//Имя кнопки, открывающей помощник зачета оплат для текущего набора параметров.
//	СтруктураПараметров.ЭлементыФормы.ЗачетОплаты                      = "";
//	//Имя элемента таблицы формы, отображающей сумму взаиморасчетов.
//	//Используется для установки условного оформления.
//	//Следует заполнить если документ поддерживает построчное ручное редактирование сумм взаиморасчетов.
//	СтруктураПараметров.ЭлементыФормы.СуммаВзаиморасчетовТЧ            = "";
//	
//	//Имя элемента формы содержащего группу финансового учета для отражения текущего набора параметров по БУ.
//	СтруктураПараметров.ЭлементыФормы.ГруппаФинансовогоУчета = "")
//	
//	#КонецОбласти
//	
//	#Область РедактированиеРасшифровкиПлатежа
//	
//	//Если расшифровка редактируется в общей форме, используется в Зачете возвратов товаров.
//	СтруктураПараметров.ЭлементыФормы.ГиперссылкаРасшифровкаПлатежа    = "";
//	
//	//Если расшифровка редактируется в документе.
//	//Используется в распределении оплаты.
//	СтруктураПараметров.ЭлементыФормы.РасшифровкаПлатежа               = "";
//	СтруктураПараметров.ЭлементыФормы.ПодборВРасшифровкуПлатежа        = "";
//	
//	//Настройки подбора и выбора в ТЧ Расшифровка платежа
//	
//	//Для подбора остатков расчетов по партнерам с типом расчетов Прочие отношения, без отбора по партнеру.
//	СтруктураПараметров.ПартнерПрочиеОтношения                           = Ложь;
//	СтруктураПараметров.ПодборДебиторскойЗадолженности                   = Ложь;
//	СтруктураПараметров.ПодборТолькоБезусловнойЗадолженности             = Ложь;
//	
//	#КонецОбласти
//	
//	#Область РедактированиеВалютИВалютныхСуммДокумента
//	
//	//Курс и кратность документа - одна пара для документа.
//	//Используются для расчета суммы взаиморасчетов и в форме редактирования валют и курсов документа.
//	СтруктураПараметров.Курс                             = "";
//	СтруктураПараметров.Кратность                        = "";
//	
//	//Имя гиперссылки, отображающей текущий курс взаиморасчетов документа и открывающей соответствующую форму.
//	СтруктураПараметров.ЭлементыФормы.НадписьВалюты                    = "";
//	
//	//Используется, когда в вызывающей форме не стоит флаг ТолькоПросмотр, но ограничить редактирование валют нужно.
//	СтруктураПараметров.ВалютыИКурсДокументаТолькоПросмотр             = Ложь;
//	
//	//Используются в условии через ИЛИ с правом отклонения от условий продаж/закупок.
//	СтруктураПараметров.ВалютаДокументаТолькоПросмотр                  = Ложь;
//	СтруктураПараметров.ВалютаВзаиморасчетовТолькоПросмотр             = Ложь;
//	
//	//Если не следует показывать сумму и валюту взаиморасчетов исходя из данных документа.
//	СтруктураПараметров.НеПоказыватьРасчеты                            = Ложь;
//	//Если не требуется предлагать пересчет суммы документа.
//	СтруктураПараметров.НеПересчитыватьСуммуДокумента                  = Ложь;
//	
//	#КонецОбласти
//	
//	#Область ГрафикПлановойОплатыИДатаПлатежа
//	
//	//Функция Этапы оплаты и дата платежа
//	СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты         = "";
//	СтруктураПараметров.ДатаПлатежа                      = "";
//	СтруктураПараметров.ГрафикОплаты                     = "";
//	СтруктураПараметров.ДатаОтсчетаГрафика               = "Объект.Дата";
//	
//	//Имя гиперссылки, отображающей текущие правила оплаты документа и открывающей форму Правила оплаты.
//	СтруктураПараметров.ЭлементыФормы.НадписьЭтапы             = "";
//	
//	//Если требуется ограничить редактирование плавил оплаты.
//	СтруктураПараметров.ЭтапыОплатыТолькоПросмотр                      = Ложь;
//	//Если истина, то для редактирования графика оплаты накладной в упрощенном режиме будет выведено поле "Предоплата".
//	СтруктураПараметров.ВозможнаПредоплатаПоНакладной                  = Ложь;
//	//Если истина и накладная по заказам то будет отображена расширенная форма графика оплаты, несмотря на функциональную опцию "Упрощенная форма оплаты".
//	СтруктураПараметров.ВозможнаНакладнаяПоНесколькимЗаказам           = Ложь;
//	//Если несмотря на порядок расчетов и "по заказу" нужно отображать расширенный режим. Упрощенный будет только если включена опция.
//	СтруктураПараметров.РасширенныйРежим = Ложь;
//	//Скрывает Банковский счет, кассу, оплату в валюте в форме плавил оплаты, используется в самообслуживании.
//	СтруктураПараметров.НеУказыватьИсточникиОплаты = Ложь;
//	
//	#КонецОбласти
//	
//	#Область СостояниеВзаиморасчетов
//	
//	//Имя гиперссылки, отображающей состояние расчетов и открывающей соответствующий отчет,
//	СтруктураПараметров.ЭлементыФормы.НадписьРасчеты                   = "";
//	
//	#КонецОбласти
//	
//	#Область ОграниченияЗадолженностиПоДоговору
//	
//	//Гиперссылка отображающая состояние ограничения задолженности
//	СтруктураПараметров.ЭлементыФормы.ОграничениеЗадолженностиТекст    = "";
//	//Картинка отображающая запрет отгрузки
//	СтруктураПараметров.ЭлементыФормы.ОграничениеЗадолженностиКартинка = ""; 
//	
//	#КонецОбласти
//	
//	Возврат СтруктураПараметров;
//КонецФункции
	
КонецФункции

// Дополняет структуру/ массив структур данными настроек ИБ, задает соответствие элементов формы индексам элементов массива параметров.
// 
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект, см. ВзаиморасчетыСервер.ОписаниеФормыВзаиморасчеты - Объект, по которому требуется дополнить параметры.
// 	ПараметрыМеханизма - Массив из см. ВзаиморасчетыСервер.ПараметрыМеханизма, Структура см. ВзаиморасчетыСервер.ПараметрыМеханизма - Параметры для дополнения.
//
Функция ДополненныеПараметрыМеханизма(Объект, ПараметрыМеханизма) Экспорт
	
	Если ТипЗнч(ПараметрыМеханизма) = Тип("Массив") Тогда
		МассивПараметров = ПараметрыМеханизма;
	Иначе
		МассивПараметров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыМеханизма);
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		
		СтруктураПараметров.Вставить("ЗаданГрафикИсполнения", Ложь);
		СтруктураПараметров.Вставить("ГрафикИсполненияДоговора", Неопределено);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Договор) Тогда
			Договор = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
			Если ЗначениеЗаполнено(Договор) И ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЗаданГрафикИсполнения, ГрафикИсполненияДоговора");
				СтруктураПараметров.ЗаданГрафикИсполнения = РеквизитыДоговора.ЗаданГрафикИсполнения;
				СтруктураПараметров.ГрафикИсполненияДоговора = РеквизитыДоговора.ГрафикИсполненияДоговора;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		
			МассивИспользуемыхЭлементовФормы = Новый Массив;
			Для Каждого Элемент Из СтруктураПараметров.ЭлементыФормы Цикл
				Если ЗначениеЗаполнено(Элемент.Значение) Тогда
					МассивИспользуемыхЭлементовФормы.Добавить(Элемент.Значение);
				КонецЕсли;
			КонецЦикла;
			СтруктураПараметров.Вставить("ИспользуемыеЭлементыФормы", МассивИспользуемыхЭлементовФормы);
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
				МетаданныеОбъекта = Объект.Объект.Ссылка.Метаданные();
				СтруктураПараметров.Вставить("ПараметрыВыбораРеквизитов", ЭтапыОплатыСервер.ПараметрыВыбораРеквизитовОплаты(МетаданныеОбъекта));
			КонецЕсли;
			
			СоответствиеИспользуемыхРеквизитов = Новый Соответствие;
			Для Каждого Элемент Из СтруктураПараметров Цикл
				Если ЗначениеЗаполнено(Элемент.Значение) Тогда
					СоответствиеИспользуемыхРеквизитов.Вставить(Элемент.Значение, Элемент.Ключ);
				КонецЕсли;
			КонецЦикла;
			СтруктураПараметров.Вставить("ИспользуемыеРеквизиты", СоответствиеИспользуемыхРеквизитов);
		
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ИзменяетРасчеты", СтруктураПараметров.ИзменяетПланОплаты ИЛИ СтруктураПараметров.ИзменяетПланОтгрузкиПоставки);
		
		СтруктураПараметров.Вставить("ДокументРасчетовСКлиентами", СтруктураПараметров.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"));
		СтруктураПараметров.Вставить("ДокументРасчетовСПоставщиками", СтруктураПараметров.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком"));
		
		СтруктураПараметров.Вставить("ЭтоПлатежИлиПрочийДокумент", НЕ СтруктураПараметров.ЭтоЗаказ И НЕ СтруктураПараметров.ЭтоДоговор И НЕ СтруктураПараметров.ЭтоПродажаЗакупка);
		
		СтруктураПараметров.Вставить("АдресЭтапыОплаты", "");
		СтруктураПараметров.Вставить("АдресСуммПоЗаказам", "");
		СтруктураПараметров.Вставить("АдресРасшифровкаПлатежа", "");
		
		Если НЕ СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент Тогда
			ОбъектМетаданных = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.Ссылка").Метаданные();
			СтруктураПараметров.Вставить("ПараметрыВыбораРеквизитов", ЭтапыОплатыСервер.ПараметрыВыбораРеквизитовОплаты(ОбъектМетаданных))
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ОрганизацияВСтроках", СтрЧислоВхождений(СтруктураПараметров.Организация, ".") > 1
			И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа)
			И СтрРазделить(СтруктураПараметров.Организация, ".")[1] = СтрРазделить(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа, ".")[1]);
		СтруктураПараметров.Вставить("КонтрагентВСтроках", СтрЧислоВхождений(СтруктураПараметров.Контрагент, ".") > 1
			И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа)
			И СтрРазделить(СтруктураПараметров.Контрагент, ".")[1] = СтрРазделить(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа, ".")[1]);
		СтруктураПараметров.Вставить("ПартнерВСтроках", СтрЧислоВхождений(СтруктураПараметров.Партнер, ".") > 1
			И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа)
			И СтрРазделить(СтруктураПараметров.Партнер, ".")[1] = СтрРазделить(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа, ".")[1]);
		
	КонецЦикла;
	
	СистемныеНастройки = Новый Структура();
	СистемныеНастройки.Вставить("ИспользоватьГрафикиОплаты",                                    ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
	СистемныеНастройки.Вставить("ИспользоватьСоглашенияСКлиентами",                             ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	СистемныеНастройки.Вставить("ИспользоватьСоглашенияСПоставщиками",                          ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками"));
	СистемныеНастройки.Вставить("ИспользоватьДоговорыСКлиентами",                               ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами"));
	СистемныеНастройки.Вставить("ИспользоватьДоговорыСПоставщиками",                            ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками"));
	СистемныеНастройки.Вставить("ИспользоватьДоговорыМеждуОрганизациями",                       ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями"));
	СистемныеНастройки.Вставить("ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ПолучитьФункциональнуюОпцию("ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров"));
	СистемныеНастройки.Вставить("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках",                   ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках"));
	СистемныеНастройки.Вставить("ИспользоватьУпрощеннуюСхемуОплатыВПродажах",                   ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах"));
	СистемныеНастройки.Вставить("ИспользоватьРеализациюПоНесколькимЗаказам",                    ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам"));
	
	СистемныеНастройки.Вставить("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	СистемныеНастройки.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	СистемныеНастройки.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	ДополненныеПараметрыМеханизма = Новый Структура();
	ДополненныеПараметрыМеханизма.Вставить("МассивПараметров", МассивПараметров);
	ДополненныеПараметрыМеханизма.Вставить("СистемныеНастройки", СистемныеНастройки);
	ДополненныеПараметрыМеханизма.Вставить("ОповеститьОЗаполненииЭтапов", Ложь);
	
	Возврат ДополненныеПараметрыМеханизма;
	
КонецФункции

#Область МодульОбъекта

//Выполняет первоначальное заполнение валют, порядка расчетов, оплата в валюте, этапов графика оплат, курса и кратности
//значениями по умолчанию, если значения еще не заполнены.
//
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект - обрабатываемый объект.
// 	ПараметрыМеханизма - Структура, Массив - См. ВзаиморасчетыСервер.ПараметрыМеханизма()
// 	ДанныеЗаполнения - Структура, ДокументОбъект - ДанныеЗаполнения из обработки заполнения документа.
// 
Процедура ОбработкаЗаполнения(Объект, ПараметрыМеханизма, ДанныеЗаполнения) Экспорт
	
	ДополненныеПараметрыМеханизма = ДополненныеПараметрыМеханизма(Объект, ПараметрыМеханизма);
	СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		ОбработатьЗаполнить(Объект, СтруктураПараметров, ДанныеЗаполнения, "ВалютаДокумента", СистемныеНастройки.ВалютаРегламентированногоУчета);
		ОбработатьЗаполнить(Объект, СтруктураПараметров, ДанныеЗаполнения, "ВалютаВзаиморасчетов", СистемныеНастройки.ВалютаРегламентированногоУчета);
		ОбработатьЗаполнить(Объект, СтруктураПараметров, ДанныеЗаполнения, "ПорядокРасчетов", ПорядокРасчетовПоПараметрам(Объект, СтруктураПараметров));
		ОбработатьЗаполнить(Объект, СтруктураПараметров, ДанныеЗаполнения, "ОплатаВВалюте", ОплатаВВалютеПоУмолчанию(Объект, СтруктураПараметров, СистемныеНастройки));
		
		ПроверитьЗаполнитьЭтапыГрафикаОплаты(Объект, СтруктураПараметров, СистемныеНастройки);
		
	КонецЦикла;
	Если ЗначениеЗаполнено(ДополненныеПараметрыМеханизма.МассивПараметров[0].Курс)
		И ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ДополненныеПараметрыМеханизма.МассивПараметров[0].Курс) = 0 Тогда
		ЗаполнитьКурсКратностьПоУмолчанию(Объект, ДополненныеПараметрыМеханизма);
	КонецЕсли;
	
КонецПроцедуры

//Выполняет очистку реквизитов при копировании документов.
//В продажах и закупках чистится расшифровка платежа, этапы графика оплат, суммы взаиморасчетов.
//
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект - обрабатываемый объект.
// 	ПараметрыМеханизма - Структура, Массив - См. ВзаиморасчетыСервер.ПараметрыМеханизма()
// 
Процедура ПриКопировании(Объект, ПараметрыМеханизма) Экспорт
	
	ДополненныеПараметрыМеханизма = ДополненныеПараметрыМеханизма(Объект, ПараметрыМеханизма);
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		ОчиститьРасшифровкуПлатежа(Объект, СтруктураПараметров);
		ОчиститьЭтапыГрафикаОплаты(Объект, СтруктураПараметров);
		ОчиститьСуммыВзаиморасчетовТЧ(Объект, СтруктураПараметров);
		ОчиститьОбъектРасчетов(Объект, СтруктураПараметров);
	КонецЦикла;
	
КонецПроцедуры

//Проверяет и заполняет необходимые данные механизма и документа:
//	Сумму взаиморасчетов документа.
//	Сумму взаиморасчетов в основных табличных частях документа.
//	Порядок расчетов
//	Оплату в валюте
//	Расшифровку платежа
//	Этапы графика оплат
//
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект - обрабатываемый объект.
// 	Отказ - Булево - Флаг отказ из обработчика документа ПередЗаписью.
// 	ПараметрыМеханизма - Структура - См. ВзаиморасчетыСервер.ПараметрыМеханизма()
// 	РежимЗаписи - РежимЗаписиДокумента - Режим записи документа.
// 
Процедура ПередЗаписью(Объект, Отказ, ПараметрыМеханизма, ЗНАЧ РежимЗаписи = Неопределено) Экспорт
	
	ДополненныеПараметрыМеханизма = ДополненныеПараметрыМеханизма(Объект, ПараметрыМеханизма);
	СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;
	
	Ссылка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.Ссылка");
	
	Если Объект.ЭтоНовый() Тогда
		СсылкаНового = Объект.ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаНового) Тогда
			СсылкаНового = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка).ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Если Объект.ЭтоНовый() Тогда
			СтруктураПараметров.Вставить("СсылкаНового", СсылкаНового);
		КонецЕсли;
		ПроверитьЗаполнитьРеквизит(Объект, СтруктураПараметров, "ПорядокРасчетов", ПорядокРасчетовПоПараметрам(Объект, СтруктураПараметров));
		ПроверитьЗаполнитьРеквизит(Объект, СтруктураПараметров, "ОплатаВВалюте", ОплатаВВалютеПоУмолчанию(Объект, СтруктураПараметров, СистемныеНастройки));
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПроверитьЗаполнитьСуммуВзаиморасчетов(Объект, СтруктураПараметров, СистемныеНастройки);
			ПроверитьЗаполнитьСуммыВзаиморасчетовВТабличнойЧасти(Объект, СтруктураПараметров, СистемныеНастройки);
			ПроверитьЗаполнитьЭтапыГрафикаОплаты(Объект, СтруктураПараметров, СистемныеНастройки);
			ПроверитьЗаполнениеЭтаповГрафикаОплаты(Объект, Отказ, СтруктураПараметров, СистемныеНастройки);
			ПроверитьЗаполнитьРасшифровкуПлатежа(Объект, СтруктураПараметров, РежимЗаписи);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектыРасчетовСервер.ПроверитьОбъектыРасчетовПередЗаписью(Объект, ДополненныеПараметрыМеханизма.МассивПараметров, РежимЗаписи, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область МодульФормы

//Выполняет дополнение и кэширование параметров механизма в реквизит формы, обновляет тексты гиперссылок
//и устанавливает видимость команды "Зачет оплаты" для новых документов.
//
// Параметры:
// 	Форма - см. ВзаиморасчетыСервер.ОписаниеФормыВзаиморасчеты
// 	ПараметрыМеханизма - Структура, Массив - См. ВзаиморасчетыСервер.ПараметрыМеханизма()
// 
Процедура ФормаПриСозданииНаСервере(Форма, ПараметрыМеханизма) Экспорт
	
	ДополнитьИЗакэшироватьПараметры(Форма, ПараметрыМеханизма);
	
	УстановитьУсловноеОформление(Форма);
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Возврат;
	Иначе
		ФормаПриЧтенииСозданииНаСервере(Форма, ПараметрыМеханизма)
	КонецЕсли;

КонецПроцедуры

//Выполняет кэширование параметров механизма в реквизит формы, обновляет тексты гиперссылок
//и устанавливает видимость команды "Зачет оплаты" для существующих документов.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 	ПараметрыМеханизма - Структура, Массив - См. ВзаиморасчетыСервер.ПараметрыМеханизма()
// 
Процедура ФормаПриЧтенииНаСервере(Форма, ПараметрыМеханизма) Экспорт
	
	ДополнитьИЗакэшироватьПараметры(Форма, ПараметрыМеханизма);
	
	ФормаПриЧтенииСозданииНаСервере(Форма, ПараметрыМеханизма)
	
КонецПроцедуры

//Выполняет перезаполнение этапов графика оплаты, обновляет гиперссылку графика оплаты.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 	Отказ - Булево - Флаг "Отказ" из обработчика формы ПередЗаписьюНаСервере.
// 	Объект - Неопределено - Если вызов происходит из обработчика оповещения формы, то заполнять не требуется.
// 			ДокументОбъект, СправочникОбъект -ТекущийОбъект, обязателен, если вызов происходит из метода формы ПередЗаписьюНаСервере.
// 
Процедура ФормаПередЗаписьюНаСервере(Форма, Отказ, Объект = Неопределено) Экспорт
	ДополненныеПараметры = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	ПроверитьЗаполнитьЭтапыГрафикаОплаты(Форма, ДополненныеПараметры.МассивПараметров, ДополненныеПараметры.СистемныеНастройки);
	
	Если Объект <> Неопределено Тогда
		Для Каждого СтруктураПараметров Из ДополненныеПараметры.МассивПараметров Цикл
			Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
				ЭтапыОбъекта = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
				ЭтапыОбъекта.Загрузить(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты).Выгрузить());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиЭтапыОплаты(Форма);
КонецПроцедуры

//Обновляет тексты гиперссылок после записи.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 
Процедура ФормаПослеЗаписиНаСервере(Форма) Экспорт
	
	ВзаиморасчетыВызовСервера.ОбновитьТекстГиперссылкиОграничениеЗадолженности(Форма);
	ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма);
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма);
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиЭтапыОплаты(Форма);
	ОбновитьРаспределеннуюСуммаРасшифровки(Форма);
	
КонецПроцедуры

//Выполняет необходимые действия при изменении ключевых реквизитов документа/справочника.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 	ИзмененныеРеквизиты - Массив элементов "Строка", Структура (будут использованы ключи), Строка (пример: "Организация, Контрагент, Валюта)
// 		- Перечень имен измененных реквизитов в терминах документа.
// 	ЭтоИзмененияМеханизма - Булево - Флаг того, что вызов производит сам механизм.
// 
// Возвращаемое значение:
// 	Структура - Структура измененных реквизитов документа после обработки, 
//							где ключ - имя реквизита, значение - значение реквизита до изменения.
//
Функция ФормаПриИзмененииРеквизитов(Форма, ИзмененныеРеквизиты, ЭтоИзмененияМеханизма = Ложь) Экспорт
	
	Если ТипЗнч(ИзмененныеРеквизиты) = Тип("Массив") Тогда
		МассивРеквизитов = ИзмененныеРеквизиты;
	ИначеЕсли ТипЗнч(ИзмененныеРеквизиты) = Тип("Структура") Тогда
		МассивРеквизитов = Новый Массив;
		Для Каждого Элемент Из ИзмененныеРеквизиты Цикл
			МассивРеквизитов.Добавить(Элемент.Ключ);
		КонецЦикла;
	Иначе //строка
		МассивРеквизитов = Новый Массив;
		Реквизиты = СтрРазделить(ИзмененныеРеквизиты, ",");
		Для Каждого Реквизит Из Реквизиты Цикл
			МассивРеквизитов.Добавить(СокрЛП(Реквизит));
		КонецЦикла;
	КонецЕсли;
	
	СтарыеЗначенияИзмененныхРеквизитов = Новый Структура;
	ЕстьИзмененияВалют = Ложь;
	
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;
	
	//Возвращает какие из измененных реквизитов используются в структурах параметров.
	Результаты = МассивСтруктурПараметровПоРеквизитам(ДополненныеПараметрыМеханизма.МассивПараметров, МассивРеквизитов);
	
	Для Каждого Результат Из Результаты Цикл
		
		СтруктураПараметров = Результат.СтруктураПараметров;
		МассивИспользуемыхРеквизитов = Результат.ИспользуемыеРеквизиты;
		
		//График исполнения договора
		Если МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено Тогда
			
			ВзаиморасчетыВызовСервера.ОбновитьТекстГиперссылкиОграничениеЗадолженности(Форма);
			
			Договор = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма.Объект, СтруктураПараметров.Договор);
			Если ЗначениеЗаполнено(Договор) И ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЗаданГрафикИсполнения, ГрафикИсполненияДоговора");
				СтруктураПараметров.ЗаданГрафикИсполнения = РеквизитыДоговора.ЗаданГрафикИсполнения;
				СтруктураПараметров.ГрафикИсполненияДоговора = РеквизитыДоговора.ГрафикИсполненияДоговора;
			Иначе
				СтруктураПараметров.ЗаданГрафикИсполнения = Ложь;
				СтруктураПараметров.ГрафикИсполненияДоговора = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		//Порядок расчетов
		Если (МассивИспользуемыхРеквизитов.Найти("Соглашение") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("НакладнаяПоЗаказам") <> Неопределено)
			И ЗначениеЗаполнено(СтруктураПараметров.ПорядокРасчетов)
			И ТипЗнч(СтруктураПараметров.ПорядокРасчетов) = Тип("Строка") 
			И СтрЧислоВхождений(СтруктураПараметров.ПорядокРасчетов, ".") = 1 Тогда
			
			ПорядокРасчетовПоУмолчанию = ПорядокРасчетовПоПараметрам(Форма, СтруктураПараметров);
			ПорядокРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ПорядокРасчетов);
			
			Если ПорядокРасчетов.Данные[ПорядокРасчетов.Имя]<> ПорядокРасчетовПоУмолчанию Тогда
				СтарыеЗначенияИзмененныхРеквизитов.Вставить(ПорядокРасчетов.Имя, ПорядокРасчетов.Данные);
				ПорядокРасчетов.Данные[ПорядокРасчетов.Имя] = ПорядокРасчетовПоУмолчанию;
				
				Если МассивИспользуемыхРеквизитов.Найти("ПорядокРасчетов") = Неопределено Тогда
					МассивИспользуемыхРеквизитов.Добавить("ПорядокРасчетов");
				КонецЕсли;
				
				ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма);
				ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиЭтапыОплаты(Форма, СтруктураПараметров, СистемныеНастройки);
				УстановитьВидимостьЗачетОплаты(Форма, СтруктураПараметров);
				УстановитьВидимостьГФУ(Форма, СтруктураПараметров);
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("НакладнаяПоЗаказам") <> Неопределено Тогда
			УстановитьВидимостьЗачетОплаты(Форма, СтруктураПараметров);
			УстановитьВидимостьГФУ(Форма, СтруктураПараметров);
		КонецЕсли;
		
		//Оплата в валюте
		Если МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено Тогда
			
			ОплатаВВалютеПоУмолчанию = ОплатаВВалютеПоУмолчанию(Форма, СтруктураПараметров, СистемныеНастройки);
			ОплатаВВалюте = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ОплатаВВалюте);
			
			Если ОплатаВВалюте <> Неопределено И ОплатаВВалюте.Данные[ОплатаВВалюте.Имя]<> ОплатаВВалютеПоУмолчанию Тогда
				СтарыеЗначенияИзмененныхРеквизитов.Вставить(ОплатаВВалюте.Имя, ОплатаВВалюте.Данные);
				ОплатаВВалюте.Данные[ОплатаВВалюте.Имя] = ОплатаВВалютеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		//График оплаты
		Если МассивИспользуемыхРеквизитов.Найти("Соглашение") <> Неопределено 
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Дата") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ДатаОтсчетаГрафика") <> Неопределено Тогда
			
			//Перезаполнение графика этапов оплаты
			ОчиститьЭтапыГрафикаОплаты(Форма, СтруктураПараметров);
			ПроверитьЗаполнитьЭтапыГрафикаОплаты(Форма, СтруктураПараметров, СистемныеНастройки);
			
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("Организация") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Соглашение") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Партнер") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Контрагент") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("НаправлениеДеятельности") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ВалютаВзаиморасчетов") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ВалютаДокумента") <> Неопределено Тогда
			
			
			ОчиститьОбъектИСуммуРасшифровкиПлатежа(Форма, СтруктураПараметров);
			
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("ВалютаДокумента") <> Неопределено 
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ВалютаВзаиморасчетов") <> Неопределено 
			ИЛИ МассивИспользуемыхРеквизитов.Найти("СуммаДокумента") <> Неопределено 
			ИЛИ МассивИспользуемыхРеквизитов.Найти("СуммаВзаиморасчетов") <> Неопределено Тогда
			
			МассивОчищаемыхПолейЭтапов = Новый Массив;
			Если МассивИспользуемыхРеквизитов.Найти("ВалютаДокумента") <> Неопределено
				ИЛИ МассивИспользуемыхРеквизитов.Найти("СуммаДокумента") <> Неопределено Тогда
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаПлатежа");
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаЗалогаЗаТару");
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаВзаиморасчетов");
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаВзаиморасчетовПоТаре");
			ИначеЕсли МассивИспользуемыхРеквизитов.Найти("ВалютаВзаиморасчетов") <> Неопределено 
				ИЛИ МассивИспользуемыхРеквизитов.Найти("СуммаВзаиморасчетов") <> Неопределено Тогда
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаВзаиморасчетов");
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаВзаиморасчетовПоТаре");
			КонецЕсли;
			
			ОчиститьПоляЭтаповГрафикаОплаты(Форма, СтруктураПараметров, МассивОчищаемыхПолейЭтапов);
			ОчиститьСуммыВзаиморасчетовТЧ(Форма, СтруктураПараметров);
			
			Если НЕ ЭтоИзмененияМеханизма И ЗначениеЗаполнено(СтруктураПараметров.СуммаВзаиморасчетов) Тогда
				Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.СуммаВзаиморасчетов);
				Реквизит.Данные[Реквизит.Имя] = 0;
			КонецЕсли;
			
			ПроверитьЗаполнитьСуммыВзаиморасчетовВТабличнойЧасти(Форма, СтруктураПараметров, СистемныеНастройки);
			ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма,СтруктураПараметров,СистемныеНастройки);
			
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("ВалютаДокумента") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ВалютаВзаиморасчетов") <> Неопределено Тогда
			ЕстьИзмененияВалют = Истина;
        КонецЕсли;
        
		
		Если МассивИспользуемыхРеквизитов.Найти("ПорядокРасчетов") <> Неопределено 
			ИЛИ ЕстьИзмененияВалют Тогда
			УстановитьВидимостьЗачетОплаты(Форма, СтруктураПараметров);
			ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма);
		КонецЕсли;
		
		//При изменении порядка расчетов проверить видимость ЗачетОплаты
		//При изменении суммы документа на форме, переформировывать надпись валюты, все гиперссылки
		//При изменении даты, даты банка, проведено банком, очистить суммы взаиморасчетов расшифровки
	КонецЦикла;
	
	Если НЕ ЭтоИзмененияМеханизма И ЕстьИзмененияВалют И ЗначениеЗаполнено(СтруктураПараметров.Курс) Тогда
		СтарыеЗначенияИзмененныхРеквизитов.Вставить("Курс", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, "Объект.Курс"));
		СтарыеЗначенияИзмененныхРеквизитов.Вставить("Кратность", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, "Объект.Кратность"));
		ЗаполнитьКурсКратностьПоУмолчанию(Форма, ДополненныеПараметрыМеханизма);
		ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма,СтруктураПараметров,СистемныеНастройки);
	КонецЕсли;
	
	Возврат СтарыеЗначенияИзмененныхРеквизитов;
	
КонецФункции

//Обновляет тексты гиперссылок, видимость команды "Зачет оплаты".
//Очищает все реквизиты взаиморасчетов, если документ более не изменяет взаиморасчеты.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 	ПараметрыМеханизма - Структура, Массив - См. ВзаиморасчетыСервер.ПараметрыМеханизма()
// 
Процедура ПриИзмененииПараметровМеханизма(Форма, ПараметрыМеханизма) Экспорт
	
	ДанныеНастройки = ДополненныеПараметрыМеханизма(Форма, ПараметрыМеханизма);
	
	Если ДанныеНастройки.МассивПараметров.Количество() = Форма.КэшДанныхМеханизмов["Взаиморасчеты"].МассивПараметров.Количество() Тогда
		сч = 0;
		Пока сч < ДанныеНастройки.МассивПараметров.Количество() Цикл
			ИзмененныеПараметры = ОбщегоНазначенияУТ.ИзмененныеПараметры(ДанныеНастройки.МассивПараметров[сч], Форма.КэшДанныхМеханизмов["Взаиморасчеты"].МассивПараметров[сч]);
			
			Если ИзмененныеПараметры.Свойство("ТипРасчетов") Тогда
				ОчиститьРасшифровкуПлатежа(Форма,ДанныеНастройки.МассивПараметров[сч]);
			КонецЕсли;
			
			сч = сч + 1;
		КонецЦикла;
	Иначе
		Для Каждого Структура Из ДанныеНастройки.МассивПараметров Цикл
			ОчиститьРасшифровкуПлатежа(Форма, Структура);
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "Взаиморасчеты", ДанныеНастройки);
	
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		// Очищаем все сущности механизма, если нет расчетов с клиентами или поставщиками.
		Если НЕ СтруктураПараметров.ИзменяетРасчеты Тогда
			
			СуммаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.СуммаВзаиморасчетов);
			Если ЗначениеЗаполнено(СуммаВзаиморасчетов) Тогда
				СуммаВзаиморасчетов.Данные[СуммаВзаиморасчетов.Имя] = 0;
			КонецЕсли;
			
			СуммаВзаиморасчетовПоТаре = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.СуммаВзаиморасчетовПоТаре);
			Если ЗначениеЗаполнено(СуммаВзаиморасчетовПоТаре) Тогда
				СуммаВзаиморасчетовПоТаре.Данные[СуммаВзаиморасчетовПоТаре.Имя] = 0;
			КонецЕсли;
			
			ОчиститьСуммыВзаиморасчетовТЧ(Форма, СтруктураПараметров);
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.ИзменяетПланОплаты 
			// Возвраты товаров.
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.ГиперссылкаРасшифровкаПлатежа) Тогда
			ОчиститьЭтапыГрафикаОплаты(Форма, СтруктураПараметров);
			ОчиститьРасшифровкуПлатежа(Форма, СтруктураПараметров);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьВидимостьЗачетОплаты(Форма);
	УстановитьВидимостьГФУ(Форма);
	ВзаиморасчетыВызовСервера.ОбновитьТекстГиперссылкиОграничениеЗадолженности(Форма);
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиЭтапыОплаты(Форма);
	ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма);
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма);
	
КонецПроцедуры

// Используется для обработке оповещений, связанных с механизмами взаиморасчетов.
// 
// Параметры:
// 	Форма -см. ВзаиморасчетыСервер.ОписаниеФормыВзаиморасчеты
// 	ИмяСобытия - Строка - Имя события.
// 	Параметр - Произвольный - Параметр события.
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр) Экспорт
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = Форма.Объект.Ссылка) 
		Или ИзменилисьДокументыОплатыКлиентам(ИмяСобытия)
		Или ИзменилисьДокументыОплатыПоставщиком(ИмяСобытия) Тогда
		ВзаиморасчетыВызовСервера.ОбновитьТекстГиперссылкиОграничениеЗадолженности(Форма);
		ВзаиморасчетыСервер.ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма);
		
		Параметры = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
		Для Каждого Структура Из Параметры.МассивПараметров Цикл
			Структура.АдресРасшифровкаПлатежа = "";
		КонецЦикла;
		Форма.Прочитать();
		
	КонецЕсли;
	
	//Обновить ограничение задолженности
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЭтапыОплаты

//Выполняет заполнение/очистку/перераспределение этапов графика оплат
//
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект, ФормаКлиентскогоПриложения - обрабатываемый объект.
// 	ПараметрыМеханизма - Структура, Массив - См. ВзаиморасчетыСервер.ПараметрыМеханизма(), требуется если передан Объект типа отличного от ФормаКлиентскогоПриложения.
// 	СистемныеНастройки - Структура См. ВзаиморасчетыСервер.ДополненныеПараметрыМеханизма(), требуется если передан Объект типа отличного от ФормаКлиентскогоПриложения.
// 
Процедура ПроверитьЗаполнитьЭтапыГрафикаОплаты(Объект, ПараметрыМеханизма = Неопределено, СистемныеНастройки = Неопределено) Экспорт
	
	Если ПараметрыМеханизма <> Неопределено И СистемныеНастройки <> Неопределено ИЛИ ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") Тогда
		ДополненныеПараметрыМеханизма = ДополненныеПараметрыМеханизма(Объект, ПараметрыМеханизма);
	Иначе
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Объект, "Взаиморасчеты");
	КонецЕсли;
	
	СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) И Не ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") И ЗначениеЗаполнено(СтруктураПараметров.СуммаДокументаФорма) Тогда
			СуммаЗалогаЗаТару            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаЗалогаЗаТаруФорма, , 0);
			СуммаДокументаБезЗалога      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаДокументаФорма) - СуммаЗалогаЗаТару;
			СуммаВзаиморасчетовПоТаре    = 0;
			СуммаВзаиморасчетовБезЗалога = 0;
		ИначеЕсли ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения")
			И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) 
			И (ЗначениеЗаполнено(СтруктураПараметров.ИмяРеквизитаТЧЗаказ) 
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.СуммаЗалогаЗаТаруФорма)) Тогда
			ТаблицаТовары = ПолучитьИзВременногоХранилища(Объект.ПоместитьСуммыПоЗаказамВоВременноеХранилище());
			СуммаЗалогаЗаТару            = ТаблицаТовары.Итог("СуммаЗалогаЗаТару");
			СуммаДокументаБезЗалога      = ТаблицаТовары.Итог("СуммаПлатежа");
			СуммаВзаиморасчетовПоТаре    = ТаблицаТовары.Итог("СуммаВзаиморасчетовПоТаре");
			СуммаВзаиморасчетовБезЗалога = ТаблицаТовары.Итог("СуммаВзаиморасчетов");
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
			ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ);
			СуммаДокументаБезЗалога      = ТЧ.Итог(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС);
			СуммаВзаиморасчетовБезЗалога = 0;
			Если ТЧ.Количество() > 0 Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧ[0],"СуммаВзаиморасчетов") Тогда
					СуммаВзаиморасчетовБезЗалога = ТЧ.Итог("СуммаВзаиморасчетов");
				КонецЕсли;
			КонецЕсли;
			СуммаЗалогаЗаТару = 0;
			СуммаВзаиморасчетовПоТаре = 0;
		Иначе
			СуммаЗалогаЗаТару            = 0;
			СуммаДокументаБезЗалога      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаДокумента);
			СуммаВзаиморасчетовБезЗалога = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаВзаиморасчетов, , 0);
			СуммаВзаиморасчетовПоТаре    = 0;
		КонецЕсли;
		
		ИзменяетПланОплаты            = СтруктураПараметров.ИзменяетПланОплаты;
		ЗаданГрафикИсполнения         = СтруктураПараметров.ЗаданГрафикИсполнения;
		ГрафикИсполненияДоговора      = СтруктураПараметров.ГрафикИсполненияДоговора;
		ЭтоПродажаЗакупка             = СтруктураПараметров.ЭтоПродажаЗакупка;
		ЭтоЗаказ                      = СтруктураПараметров.ЭтоЗаказ;
		ВозможнаПредоплатаПоНакладной = СтруктураПараметров.ВозможнаПредоплатаПоНакладной;
		
		ПорядокРасчетов           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
		Соглашение                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Соглашение);
		ГрафикОплаты              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ГрафикОплаты);
		НакладнаяПоЗаказам        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.НакладнаяПоЗаказам, , Ложь);
		
		ДатаОтсчетаГрафика        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаОтсчетаГрафика);
		Дата                      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
		ДатаСеанса                = ТекущаяДатаСеанса();
		
		Если СтруктураПараметров.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом") Тогда
			ГрафикСоглашенияЗаполнен = СистемныеНастройки.ИспользоватьСоглашенияСКлиентами
					И ЗначениеЗаполнено(Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Соглашение);
			ВариантОплатыПоУмолчаниюПредоплата = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки");
			ВариантОплатыПоУмолчаниюКредит = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки");
		Иначе
			ГрафикСоглашенияЗаполнен = СистемныеНастройки.ИспользоватьСоглашенияСПоставщиками
					И ЗначениеЗаполнено(Соглашение) И ЗакупкиВызовСервера.ГрафикСоглашенияЗаполнен(Соглашение);
			ВариантОплатыПоУмолчаниюПредоплата = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления");
			ВариантОплатыПоУмолчаниюКредит = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления");
		КонецЕсли;
		
		ДатаПлатежаПоУмолчанию = Дата(1,1,1);
		
		Если ЗначениеЗаполнено(ДатаОтсчетаГрафика) И СтруктураПараметров.ЭтоЗаказ Тогда
			ДатаПлатежаПоУмолчанию = ?(ЗначениеЗаполнено(Дата), Макс(ДатаОтсчетаГрафика, Дата), ДатаОтсчетаГрафика);
		ИначеЕсли ЗаданГрафикИсполнения И НЕ СтруктураПараметров.ЭтоЗаказ Тогда
			ДатаПлатежаПоУмолчанию = ЭтапыОплатыСервер.ДатаПервогоНеоплаченногоЭтапаГрафика(ГрафикИсполненияДоговора, Дата);
		ИначеЕсли (ГрафикСоглашенияЗаполнен ИЛИ ЗначениеЗаполнено(ГрафикОплаты)) И НЕ СтруктураПараметров.ЭтоЗаказ Тогда
			Если СтруктураПараметров.ДокументРасчетовСКлиентами Тогда
				ДатаПлатежаПоУмолчанию = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(
					Дата,
					ГрафикОплаты,
					Соглашение);
			Иначе
				ДатаПлатежаПоУмолчанию =  ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(Дата, Соглашение);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Дата) И НЕ ЗначениеЗаполнено(ДатаПлатежаПоУмолчанию) Тогда
			ДатаПлатежаПоУмолчанию = Дата;
		ИначеЕсли НЕ ЗначениеЗаполнено(ДатаПлатежаПоУмолчанию) Тогда
			ДатаПлатежаПоУмолчанию = ДатаСеанса;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
			Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ДатаПлатежа);
			
			Если НЕ ЗначениеЗаполнено(Реквизит.Данные[Реквизит.Имя])
				ИЛИ Реквизит.Данные[Реквизит.Имя] < НачалоДня(Дата) Тогда
				Реквизит.Данные[Реквизит.Имя] = ДатаПлатежаПоУмолчанию;
			КонецЕсли;
			
			Возврат;
		Иначе
			ЭтапыОплатыРеквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
			ЭтапыГрафикаОплаты = ЭтапыОплатыРеквизит.Данные[ЭтапыОплатыРеквизит.Имя];
		КонецЕсли;
		
		//Отклонения мерных товаров
		ЕстьОтклоненияМерныхТоваров = Ложь;
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			ЕстьОтклоненияМерныхТоваров = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0],"СуммаОтклоненияМерныхТоваров");
		КонецЕсли;
		
		Если ИзменяетПланОплаты
			И НЕ (ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") И ЭтоЗаказ И НЕ ЭтоПродажаЗакупка)
			И НЕ (ЗаданГрафикИсполнения И ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов") И ЭтоЗаказ) Тогда
			
			СуммаЭтаповОплаты       = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
			Если ЭтапыГрафикаОплаты.Количество() > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0], "СуммаЗалогаЗаТару") Тогда
				СуммаЗалогаПоЭтапам     = ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
			Иначе
				СуммаЗалогаПоЭтапам = 0;
			КонецЕсли;
			
			Если ЭтоПродажаЗакупка 
				И ЭтапыГрафикаОплаты.Количество() > 0 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0], "СуммаВзаиморасчетов")Тогда
				СуммаВзаиморасчетовЭтапы = ЭтапыГрафикаОплаты.Итог("СуммаВзаиморасчетов");
			Иначе
				СуммаВзаиморасчетовЭтапы = 0;
			КонецЕсли;
			
			Если ЭтоПродажаЗакупка И ЗначениеЗаполнено(СтруктураПараметров.СуммаВзаиморасчетовПоТаре) Тогда
				СуммаВзаиморасчетовПоТареЭтапы = ЭтапыГрафикаОплаты.Итог("СуммаВзаиморасчетовПоТаре");
			Иначе
				СуммаВзаиморасчетовПоТареЭтапы = 0;
			КонецЕсли;
			
			Если ЕстьОтклоненияМерныхТоваров Тогда
				СуммаОтклоненияПоЭтапам = ЭтапыГрафикаОплаты.Итог("СуммаОтклоненияМерныхТоваров");
			Иначе
				СуммаОтклоненияПоЭтапам = 0;
			КонецЕсли;
			
			СуммаОтклоненияПоОплате = ?(СуммаЭтаповОплаты+СуммаЗалогаПоЭтапам = 0,0,
			                            Окр(СуммаОтклоненияПоЭтапам * СуммаЭтаповОплаты /(СуммаЭтаповОплаты+СуммаЗалогаПоЭтапам),2));
			
			КоличествоЭтапов        = ЭтапыГрафикаОплаты.Количество();
			
			Если СуммаДокументаБезЗалога = 0 И СуммаЗалогаЗаТару = 0 И КоличествоЭтапов > 0 Тогда
				ЭтапыГрафикаОплаты.Очистить();
			ИначеЕсли СуммаДокументаБезЗалога - СуммаОтклоненияПоОплате <> СуммаЭтаповОплаты
				ИЛИ СуммаЗалогаЗаТару-(СуммаОтклоненияПоЭтапам - СуммаОтклоненияПоОплате) <> СуммаЗалогаПоЭтапам 
				ИЛИ СуммаВзаиморасчетовБезЗалога <> СуммаВзаиморасчетовЭтапы 
				ИЛИ СуммаВзаиморасчетовПоТаре <> СуммаВзаиморасчетовПоТареЭтапы Тогда
				
				ГрафикЗаполнен = СистемныеНастройки.ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(ГрафикОплаты);
				
				Если КоличествоЭтапов = 0 Тогда
					
					Если НЕ ЭтоЗаказ 
						И НакладнаяПоЗаказам
						И ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")
						И НЕ ЗаданГрафикИсполнения Тогда //накладная
						
						ЗаполнитьЭтапыОплатыДокументаПоЗаказам(Объект, СтруктураПараметров);
						
					ИначеЕсли Не (ГрафикЗаполнен Или ГрафикСоглашенияЗаполнен) И ЭтоЗаказ Тогда
						
						НовСтр = ЭтапыГрафикаОплаты.Добавить();
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "ВариантОплаты") Тогда
							НовСтр.ВариантОплаты         = ВариантОплатыПоУмолчаниюКредит;
						КонецЕсли;
						НовСтр.ДатаПлатежа           = ДатаПлатежаПоУмолчанию;
						НовСтр.СуммаПлатежа          = СуммаДокументаБезЗалога;
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "СуммаЗалогаЗаТару") Тогда
							НовСтр.СуммаЗалогаЗаТару     = СуммаЗалогаЗаТару;
						КонецЕсли;
						
					ИначеЕсли НЕ ЭтоЗаказ Тогда //накладная
						
						СуммаПредоплаты = 0;
						СуммаПредоплатыЗаТару = 0;
						СуммаВзаиморасчетовКРаспределению = СуммаВзаиморасчетовБезЗалога;
						СуммаВзаиморасчетовПоТареКРаспределению = СуммаВзаиморасчетовПоТаре;
						//Предоплата по накладной
						Если (ЗначениеЗаполнено(ГрафикОплаты) ИЛИ ГрафикСоглашенияЗаполнен) И Не НакладнаяПоЗаказам И ВозможнаПредоплатаПоНакладной Тогда
						
							СтруктураПредоплаты = ПродажиСервер.СуммаПредоплатыПоСоглашению(
								Новый Структура("Соглашение, Дата",Соглашение,Дата),
								ЭтапыГрафикаОплаты,
								СуммаДокументаБезЗалога,
								СуммаЗалогаЗаТару);
							
							СуммаПредоплаты = СтруктураПредоплаты.СуммаПредоплаты;
							СуммаПредоплатыЗаТару = СтруктураПредоплаты.СуммаПредоплатыЗаТару;
							
							Если СуммаПредоплаты <> 0 ИЛИ СуммаПредоплатыЗаТару <> 0 Тогда
								
								НовСтр = ЭтапыГрафикаОплаты.Добавить();
								Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "ВариантОплаты") Тогда
									НовСтр.ВариантОплаты         = ВариантОплатыПоУмолчаниюПредоплата;
								КонецЕсли;
								НовСтр.ДатаПлатежа           = Дата;
								НовСтр.СуммаПлатежа          = СуммаПредоплаты;
								Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "СуммаЗалогаЗаТару") Тогда
									НовСтр.СуммаЗалогаЗаТару     = СуммаПредоплатыЗаТару;
								КонецЕсли;
								Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "СуммаВзаиморасчетов") 
									И СуммаДокументаБезЗалога <> 0 Тогда
									НовСтр.СуммаВзаиморасчетов = СуммаВзаиморасчетовБезЗалога * СуммаПредоплаты/СуммаДокументаБезЗалога;
									СуммаВзаиморасчетовКРаспределению = СуммаВзаиморасчетовКРаспределению - НовСтр.СуммаВзаиморасчетов;
								КонецЕсли;
								Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "СуммаВзаиморасчетовПоТаре") 
									И СуммаДокументаБезЗалога <> 0 Тогда
									НовСтр.СуммаВзаиморасчетов = СуммаВзаиморасчетовБезЗалога * СуммаПредоплаты/СуммаДокументаБезЗалога;
									СуммаВзаиморасчетовКРаспределению = СуммаВзаиморасчетовКРаспределению - НовСтр.СуммаВзаиморасчетов;
								КонецЕсли;
								Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "СуммаВзаиморасчетовПоТаре")
									И НовСтр.СуммаЗалогаЗаТару <> 0 Тогда
									НовСтр.СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТаре * СуммаЗалогаЗаТару/НовСтр.СуммаЗалогаЗаТару;
									СуммаВзаиморасчетовПоТареКРаспределению = СуммаВзаиморасчетовПоТареКРаспределению - НовСтр.СуммаВзаиморасчетовПоТаре;
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли;
						
						Если СуммаДокументаБезЗалога - СуммаПредоплаты <> 0 ИЛИ СуммаЗалогаЗаТару - СуммаПредоплатыЗаТару <> 0 Тогда
							
							НовСтр = ЭтапыГрафикаОплаты.Добавить();
							Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "ВариантОплаты") Тогда
								НовСтр.ВариантОплаты         = ВариантОплатыПоУмолчаниюКредит;
							КонецЕсли;
							НовСтр.ДатаПлатежа           = ДатаПлатежаПоУмолчанию;
							НовСтр.СуммаПлатежа          = СуммаДокументаБезЗалога - СуммаПредоплаты;
							
							Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "СуммаВзаиморасчетов") Тогда
								НовСтр.СуммаВзаиморасчетов   = СуммаВзаиморасчетовКРаспределению;
							КонецЕсли;
							Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "СуммаЗалогаЗаТару") Тогда
								НовСтр.СуммаЗалогаЗаТару     = СуммаЗалогаЗаТару - СуммаПредоплатыЗаТару;
							КонецЕсли;
							Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр, "СуммаВзаиморасчетовПоТаре") Тогда
								НовСтр.СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТареКРаспределению;
							КонецЕсли;;
							
						КонецЕсли;
						
					Иначе //заказ
						Если СтруктураПараметров.ДокументРасчетовСКлиентами Тогда
							ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажи(
								ЭтапыОплатыРеквизит.Данные,
								ГрафикСоглашенияЗаполнен,
								ГрафикЗаполнен,
								СуммаДокументаБезЗалога,
								СуммаЗалогаЗаТару);
						Иначе
							ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаЗакупки(
								ЭтапыОплатыРеквизит.Данные,
								ГрафикСоглашенияЗаполнен,
								СуммаДокументаБезЗалога,
								СуммаЗалогаЗаТару);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
						
					Если НакладнаяПоЗаказам И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным И НЕ ЗаданГрафикИсполнения Тогда
						
						РаспределитьСуммыЭтаповОплатыДокументаПоЗаказам(Объект, СтруктураПараметров);
						
					Иначе
						
						ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
							ЭтапыГрафикаОплаты,
							СуммаДокументаБезЗалога,
							СуммаЗалогаЗаТару,
							СуммаВзаиморасчетовБезЗалога,
							СуммаВзаиморасчетовПоТаре);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЗаполнитьПроцентыПоСуммам(Объект, СтруктураПараметров);
				
			КонецЕсли;
			
			ДополненныеПараметрыМеханизма.ОповеститьОЗаполненииЭтапов = ИСТИНА;
			
		Иначе
			ЭтапыГрафикаОплаты.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиЭтапыОплаты(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьЭтапыОплатыВоВременноеХранилище(Форма, ИмяЭлемента) Экспорт
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, ИмяЭлемента);
	
	ЭтапыОплаты = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	ТЗ = ЭтапыОплаты.Выгрузить();
	
	Если ТЗ.Колонки.Найти("ВариантОплаты") = Неопределено Тогда
		Если СтруктураПараметров.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			ТЗ.Колонки.Добавить("ВариантОплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОплатыКлиентом"));
			ТЗ.ЗаполнитьЗначения(Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки, "ВариантОплаты");
		Иначе
			ТЗ.Колонки.Добавить("ВариантОплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОплатыПоставщику"));
			ТЗ.ЗаполнитьЗначения(Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления, "ВариантОплаты");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.АдресЭтапыОплаты = ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор());
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ИмяРеквизитаТЧЗаказ)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.СуммаЗалогаЗаТаруФорма) Тогда
		ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
		СтруктураПараметров.АдресСуммПоЗаказам = ДокументОбъект.ПоместитьСуммыПоЗаказамВоВременноеХранилище();
	КонецЕсли;
	
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "Взаиморасчеты", ПараметрыМеханизма);
	
КонецПроцедуры

Процедура ЗагрузитьЭтапыОплатыИзВременногоХранилища(Форма) Экспорт
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	МассивПараметров = ПараметрыМеханизма.МассивПараметров;
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		Если ЗначениеЗаполнено(СтруктураПараметров.АдресЭтапыОплаты) Тогда
			
			ЭтапыОплаты = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма,СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
			НовыеЭтапыОплаты = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресЭтапыОплаты);
			
			Если НовыеЭтапыОплаты <> Неопределено Тогда
				ЭтапыОплаты.Очистить();
				Для Каждого ТекСтрока Из НовыеЭтапыОплаты Цикл
					НоваяСтрока = ЭтапыОплаты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЦикла;
				УдалитьИзВременногоХранилища(СтруктураПараметров.АдресЭтапыОплаты);
				СтруктураПараметров.АдресЭтапыОплаты = "";
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиЭтапыОплаты(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Добавляет команду отчета "Ведомость расчетов с клиентами" в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
Функция ВедомостьРасчетовСПартнерами_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	
	ВидРасчетов = ?(Константы.ИспользоватьПартнеровКакКонтрагентов.Получить(), НСтр("ru='контрагентами';uk='контрагентами'"), НСтр("ru='партнерами';uk='партнерами'"));
	НазваниеОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ведомость расчетов с %1';uk='Відомість розрахунків з %1'"),
				ВидРасчетов);
	
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьРасчетовСПартнерами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ВедомостьРасчетовСПартнерами.ПолноеИмя();
			КомандаОтчет.Представление = НазваниеОтчета;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РасчетыСПартнерами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.РасчетыСПартнерами.ПолноеИмя();
			КомандаОтчет.Представление = НазваниеОтчета;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета "Задолженность клиентов" в стандартном виде в список команд.
// Отчет группируется по партнерам.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
Функция ЗадолженностьКлиентов_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЗадолженностьКлиентов) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ЗадолженностьКлиентов.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Задолженность клиентов';uk='Заборгованість клієнтів'");
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСКлиентом");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСКлиентами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеРасчетовСКлиентами.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Задолженность клиентов';uk='Заборгованість клієнтів'");
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСКлиентом");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Задолженность клиентов" в список команд. 
// Отчет группируется по объекту расчетов.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
Функция ЗадолженностьКлиентов_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЗадолженностьКлиентов) Тогда
		
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ЗадолженностьКлиентов.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Задолженность клиентов';uk='Заборгованість клієнтів'");
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСКлиентомПоДокументам");
			
			Возврат КомандаОтчет;
		
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСКлиентами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеРасчетовСКлиентами.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Задолженность клиентов';uk='Заборгованість клієнтів'");
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСКлиентомПоДокументам");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Карточка расчетов с клиентом" в список команд.
// Группировка по партнеру/контрагенту
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
Функция КарточкаРасчетовСКлиентом_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСКлиентами24) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСКлиентами24.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Карточка расчетов с клиентами';uk='Картка розрахунків з клієнтами'");
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "Карточка");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСКлиентами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСКлиентами.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Карточка расчетов с клиентами';uk='Картка розрахунків з клієнтами'");
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСКлиентом");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Карточка расчетов с клиентом" в список команд.
// Группировка по объекту расчетов.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
Функция КарточкаРасчетовСКлиентом_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСКлиентами24) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСКлиентами24.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Карточка расчетов с клиентами';uk='Картка розрахунків з клієнтами'");
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "Карточка");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСКлиентами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСКлиентами.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Карточка расчетов с клиентами';uk='Картка розрахунків з клієнтами'");
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСКлиентомПоДокументам");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Задолженность поставщикам" в стандартном виде в список команд.
// Отчет группируется по партнерам.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
Функция ЗадолженностьПоставщикам_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЗадолженностьПоставщикам) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ЗадолженностьПоставщикам.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Задолженность поставщикам';uk='Заборгованість постачальникам'");
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСПоставщиком");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСПоставщиками) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеРасчетовСПоставщиками.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Задолженность поставщикам';uk='Заборгованість постачальникам'");
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСПоставщиком");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Задолженность поставщикам" в список команд. 
// Отчет группируется по объекту расчетов.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
Функция ЗадолженностьПоставщикам_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЗадолженностьПоставщикам) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ЗадолженностьПоставщикам.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Задолженность поставщикам';uk='Заборгованість постачальникам'");
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСПоставщикомПоДокументам");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСПоставщиками) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеРасчетовСПоставщиками.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Задолженность поставщикам';uk='Заборгованість постачальникам'");
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСПоставщикомПоДокументам");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Карточка расчетов с поставщиком" в список команд.
// Группировка по партнеру/контрагенту
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
Функция КарточкаРасчетовСПоставщиком_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками24) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками24.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Карточка расчетов с поставщиками';uk='Картка розрахунків з постачальниками'");
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "Карточка");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Карточка расчетов с поставщиками';uk='Картка розрахунків з постачальниками'");
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСПоставщиком");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Карточка расчетов с поставщиком" в список команд.
// Группировка по объекту расчетов.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
Функция КарточкаРасчетовСПоставщиком_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками24) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками24.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Карточка расчетов с поставщиками';uk='Картка розрахунків з постачальниками'");
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "Карточка");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Карточка расчетов с поставщиками';uk='Картка розрахунків з постачальниками'");
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСПоставщикомПоДокументам");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ЗачетОплатыРасшифровкаПлатежа

//Заполняет табличные части "Расшифровка платежа" остатками задолженности.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 
Процедура ЗаполнитьРасшифровкуПлатежаОстатками(Форма) Экспорт
	
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация);
		Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Контрагент);
		Дата = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата);
		Валюта = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента);
		РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
		
		ТипЗадолженности = ?(СтруктураПараметров.ДокументРасчетовСКлиентами, Перечисления.ТипыЗадолженности.Дебиторская, Перечисления.ТипыЗадолженности.Кредиторская);
		
		ЗаполнитьЗадолженностьПоОстаткам(
			Организация, 
			Контрагент,
			ТипЗадолженности,
			Неопределено, //ТипРасчетов
			Дата,
			Валюта,
			РасшифровкаПлатежа);
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			РасшифровкаПлатежа.Добавить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Помещает табличную часть Расшифровка платежа во временное хранилище и записывает ссылку на него в структуру параметров взаиморасчетов.
//
// Параметры:
// 	Форма - УправляемаяФорма - Форма документа/справочника.
// 	ИмяЭлемента - Строка - Имя элемента, по которому можно определить для какой структуры параметров взаиморасчетов помещается расшифровка.
//
Процедура ПоместитьРасшифровкуПлатежаВоВременноеХранилище(Форма, ИмяЭлемента = Неопределено) Экспорт
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	Если ИмяЭлемента <> Неопределено Тогда
		СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, ИмяЭлемента);
	Иначе
		СтруктураПараметров = ПараметрыМеханизма.МассивПараметров[0];
	КонецЕсли;
	
	РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
	ТЗ = РасшифровкаПлатежа.Выгрузить();
	СтруктураПараметров.АдресРасшифровкаПлатежа = ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор());
	
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "Взаиморасчеты", ПараметрыМеханизма);
	
КонецПроцедуры

Процедура ЗагрузитьРасшифровкуПлатежаИзВременногоХранилища(Форма) Экспорт
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	МассивПараметров = ПараметрыМеханизма.МассивПараметров;
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		Если ЗначениеЗаполнено(СтруктураПараметров.АдресРасшифровкаПлатежа) Тогда
			
			РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
			НоваяРасшифровкаПлатежа = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресРасшифровкаПлатежа);
			Копия = РасшифровкаПлатежа.Выгрузить();
			
			РасшифровкаПлатежа.Очистить();
			Для Каждого ТекСтрока Из НоваяРасшифровкаПлатежа Цикл
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Поставщик") 
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекСтрока, "Партнер") Тогда
					НоваяСтрока.Поставщик = ТекСтрока.Партнер;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "СтатьяДвиженияДенежныхСредств") Тогда
					СтрокиКопии = Копия.НайтиСтроки(Новый Структура("ОбъектРасчетов", НоваяСтрока.ОбъектРасчетов));
					Если СтрокиКопии.Количество()> 0 Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтрокиКопии[0].СтатьяДвиженияДенежныхСредств;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			УдалитьИзВременногоХранилища(СтруктураПараметров.АдресРасшифровкаПлатежа);
			СтруктураПараметров.АдресРасшифровкаПлатежа = "";
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьРаспределеннуюСуммаРасшифровки(Форма) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма,"РаспределеннаяСуммаРасшифровки") Тогда
		Возврат;
	КонецЕсли;
	
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	МассивПараметров = ДополненныеПараметрыМеханизма.МассивПараметров;
	
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		
		ОбъектРасчетов         = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ОбъектРасчетов);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
			ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СуммаРаспределнная = 0;
	
	Если ТЧ <> Неопределено Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Расшифровка.Сумма КАК Сумма,
		|	Расшифровка.ОбъектРасчетов КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ВтРасшифровка 
		|ИЗ &ТЧ КАК Расшифровка
		|;
		|ВЫБРАТЬ
		|	СУММА(Расшифровка.Сумма) КАК Сумма
		|ИЗ
		|	ВтРасшифровка КАК Расшифровка
		|ГДЕ
		|	Расшифровка.ОбъектРасчетов <> &ОбъектРасчетов
		|	И Расшифровка.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)");
		Запрос.УстановитьПараметр("ТЧ", ТЧ.Выгрузить());
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаРаспределнная =  Выборка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Форма.РаспределеннаяСуммаРасшифровки = СуммаРаспределнная;
	
КонецПроцедуры

#КонецОбласти

#Область ГиперссылкаРасчеты

// Описание
// 
// Параметры:
// 	Форма - см. ВзаиморасчетыСервер.ОписаниеФормыВзаиморасчеты
Процедура ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма) Экспорт
	
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.НадписьРасчеты) Тогда
			Продолжить;
		КонецЕсли;
		
		ПорядокРасчетов       = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов);
		ПутьКДаннымВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов), СтруктураПараметров.ВалютаВзаиморасчетов, СтруктураПараметров.ВалютаДокумента);
		ВалютаВзаиморасчетов  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, ПутьКДаннымВалютаВзаиморасчетов);
		НакладнаяПоЗаказам    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.НакладнаяПоЗаказам, , Ложь);
		ЗаказОснование        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ЗаказОснование);
		ИзменяетРасчеты       = СтруктураПараметров.ИзменяетПланОплаты;
		ЭлементНадписьРасчеты = СтруктураПараметров.ЭлементыФормы.НадписьРасчеты;
		ЭтоЗаказ              = СтруктураПараметров.ЭтоЗаказ;
		ЭтоДоговор            = СтруктураПараметров.ЭтоДоговор;
		
		ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧ);
		СписокЗаказов = Новый Массив;
		Если ЗначениеЗаполнено(ТЧ) И ЗначениеЗаполнено(СтруктураПараметров.ИмяРеквизитаТЧЗаказ) Тогда
			Заказы = ТЧ.Выгрузить(, СтруктураПараметров.ИмяРеквизитаТЧЗаказ).ВыгрузитьКолонку(СтруктураПараметров.ИмяРеквизитаТЧЗаказ);
			СписокЗаказов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Заказы);
			сч = 0;
			Пока сч < СписокЗаказов.Количество() Цикл
				Если Не ЗначениеЗаполнено(СписокЗаказов[сч]) Тогда
					СписокЗаказов.Удалить(сч);
				Иначе
					сч= сч + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементНадписьРасчеты) Тогда
			
			Элемент = Форма.Элементы[ЭлементНадписьРасчеты]; // ПолеФормы
			
			Если ИзменяетРасчеты 
				И НЕ (ЭтоЗаказ И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
				И НЕ (ЭтоДоговор И НЕ ЗначениеЗаполнено(СтруктураПараметров.ГрафикИсполненияДоговора)) Тогда
					
				Если ЭтоДоговор Тогда
					
					Если СтруктураПараметров.ДокументРасчетовСКлиентами Тогда
						СтрокаОтгружено = НСтр("ru='Отгружено';uk='Відвантажено'");
					Иначе
						СтрокаОтгружено = НСтр("ru='Поступило';uk='Надійшло'");
					КонецЕсли;
				
					СостояниеВзаиморасчетов = ВзаиморасчетыСервер.СостояниеВзаиморасчетов(Форма, СтруктураПараметров);
					СуммаОплат   = СостояниеВзаиморасчетов.СуммаОплат;
					ПроцентОплат = Окр(СостояниеВзаиморасчетов.ПроцентОплат,2);
					СуммаОтгрузокПоставок = СостояниеВзаиморасчетов.СуммаОтгрузок + СостояниеВзаиморасчетов.СуммаПоставок;
					ПроцентОтгрузкиПоставки = СостояниеВзаиморасчетов.ПроцентОтгрузок + СостояниеВзаиморасчетов.ПроцентПоставок;
				
					Расчеты = НСтр("ru='Оплачено';uk='Оплачено'") + ": " + Формат(СуммаОплат, "ЧДЦ=2; ЧН=") 
						+ " " + ВалютаВзаиморасчетов + "  " + ПроцентОплат + "%";
					Элемент.Заголовок = Расчеты + ", " + СтрокаОтгружено + ": " + Формат(СуммаОтгрузокПоставок, "ЧДЦ=2; ЧН=") 
						+ " " + ВалютаВзаиморасчетов + "  " + ПроцентОтгрузкиПоставки + "%";
				
				ИначеЕсли ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					Элемент.Заголовок = НСтр("ru='Расчеты по договору';uk='Розрахунки за договором'");
				Иначе
				
					СостояниеВзаиморасчетов = ВзаиморасчетыСервер.СостояниеВзаиморасчетов(Форма, СтруктураПараметров);
					СуммаОплат   = СостояниеВзаиморасчетов.СуммаОплат;
					ПроцентОплат = Окр(СостояниеВзаиморасчетов.ПроцентОплат,2);
					
					Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным И НакладнаяПоЗаказам И ЗначениеЗаполнено(ЗаказОснование)
						ИЛИ ЭтоЗаказ Тогда
						Элемент.Заголовок = НСтр("ru='Оплачено по заказу:';uk='Оплачено за замовленням:'") + " " + Формат(СуммаОплат, "ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетов + " " + ПроцентОплат + "%";
					ИначеЕсли СписокЗаказов.Количество() > 1 Тогда
						Элемент.Заголовок = НСтр("ru='Расчеты по заказам (';uk='Розрахунки по замовленнях ('")+ Строка(СписокЗаказов.Количество()) + ")";
					Иначе
						Элемент.Заголовок = НСтр("ru='Оплачено';uk='Оплачено'") + ": " + Формат(СуммаОплат, "ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетов + " " + ПроцентОплат + "%";
					КонецЕсли;
				
				КонецЕсли;
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ЭлементНадписьРасчеты, "Видимость", Истина);
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ЭлементНадписьРасчеты, "Видимость", Ложь);
			КонецЕсли;
		
			Если СтруктураПараметров.ДокументРасчетовСКлиентами Тогда
				Элемент.Доступность = ПравоДоступа("Использование", Метаданные.Отчеты.КарточкаРасчетовСКлиентами24);
			ИначеЕсли СтруктураПараметров.ДокументРасчетовСПоставщиками Тогда
				Элемент.Доступность = ПравоДоступа("Использование", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками24);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

#Область РасчетыСКлиентами

// Дополняет тексты запроса проведения документа текстами проведения графика исполнения договора  с клиентом по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстПланыОплат - Строка - Текст запроса получения данных плановой оплаты документа.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация договора.
// 	     * Партнер - СправочникСсылка.Партнеры - Покупатель.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией продавцом и покупателем.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты.
// 	     * ВариантОплаты - Перечисление.ВариантыОплатыКлиентом - Вариант оплаты.
// 	     * КОплате - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма плановой оплаты.
// 	     * ИсключатьПриКонтроле - Булево - Флаг контроля суммы плановой оплаты при проведении.
// 	ТекстПланыОтгрузок - Строка - Текст запроса получения данных плановой отгрузки документа.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация договора.
// 	     * Партнер - СправочникСсылка.Партнеры - Покупатель.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией продавцом и покупателем.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ДатаОтгрузки - Дата - Плановая дата оплаты.
// 	     * КОтгрузке - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма плановой отгрузки.
// 
Процедура ПроведениеГрафикаИсполненияДоговораСКлиентом(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОплат, ТекстПланыОтгрузок) Экспорт
	
	Операция = "ГрафикИсполненияКлиент";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОплатыКлиентом");
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОтгрузкиКлиенту");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыКлиентом", ТекстПланыОплат);
	МассивТекстов.Добавить(УвеличитьПланОплатыОтКлиента(Запрос, Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОтгрузкиКлиенту", ТекстПланыОтгрузок);
	МассивТекстов.Добавить(УвеличитьПланОтгрузкиКлиенту(Запрос, Операция));
	
	ТекстРасчетыСКлиентами = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения заказа клиента по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстПланыОплаты - Строка - Текст запроса получения данных для отражения плана оплат.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация осуществляющая продажу.
// 	     * Партнер - СправочникСсылка.Партнеры - Заказчик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Заказчик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией продавцом и заказчиком.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     [Реквизиты механизма]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты всего документа/этапа оплаты.
// 	     * ИсключатьПриКонтроле - Булево - Исключить ли проверку на наличие оплаты по данной строке движений.
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыОплатыКлиентом - Вариант оплаты этапа графика.
// 	     * КОплате - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма к оплате в валюте взаиморасчетов (с учетом залога за тару).
// 	     * СуммаОтклоненияМерныхТоваров - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма отклонения мерных товаров в валюте взаиморасчетов к оплате.
// 	ТекстПланыОтгрузки - Строка - Текст запроса получения данных документа для отражения плана отгрузки.
// 	     Запрос должен возвращать выборку полей
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация осуществляющая продажу.
// 	     * Партнер - СправочникСсылка.Партнеры - Заказчик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Заказчик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией продавцом и заказчиком.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
// 	     [Общие]
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     [Реквизиты документа]
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * ДатаОтгрузки - Дата - Плановая дата отгрузки строки/документа.
// 	     * КОтгрузке - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма к отгрузке в валюте взаиморасчетов (с учетом залога за тару).
// 	     * Отгружается - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма увеличения Отгружается.
// 
Процедура ПроведениеЗаказаКлиента(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОплат, ТекстПланыОтгрузок) Экспорт
	
	Операция = "ЗаказКлиента";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОплатыКлиентом");
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОтгрузкиКлиенту");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыКлиентом", ТекстПланыОплат);
	МассивТекстов.Добавить(УвеличитьПланОплатыОтКлиента(Запрос, Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОтгрузкиКлиенту", ТекстПланыОтгрузок);
	МассивТекстов.Добавить(УвеличитьПланОтгрузкиКлиенту(Запрос, Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеОтгружается", ТекстПланыОтгрузок);
	МассивТекстов.Добавить(УвеличитьОтгружается(Операция));
	
	ТекстРасчетыСКлиентами = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения продажи и переноса расчетов по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстПродажа - Строка - Текст запроса получения данных продажи и плановых дат ее погашения.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация, осуществляющая продажу.
// 	     * Партнер - СправочникСсылка.Партнеры - Покупатель.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией продавцом и покупателем.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты продажи.
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыОплатыКлиентом - Вариант оплаты продажи.
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * НакладнаяПоЗаказам - Булево - Накладная введена по заказу(ам).
// 	     * СверхЗаказа - Булево - Это отгрузка сверх заказа.
// 	     * ЗаказПродажи - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента, 
// 	     		ДокументСсылка.ЗаказДавальца, Неопределено - Заказ, по которому происходит продажа.
// 	     * ДатаКурса - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте взаиморасчетов.
// 	     * СуммаВзаиморасчетовПоТаре - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма залога за тару в валюте взаиморасчетов.
// 	     * Отгружается - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма, на которую следует уменьшить ресурс "Отгружается". 
// 	     Ресурс используется для контроля максимальной допустимой суммы задолженности. Т.е. если заказ уже увеличил Отгружается, то это значит, что отгрузка в процессе и сумма заказа войдет в сумму контролируемой задолженности.
// 	     * УменьшениеКОтгрузке - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма, на которую следует уменьшить план оплаты. Нужно когда, например, заказ увеличил план отгрузок.
// 	     * СвязанныйДокумент - ДокументСсылка.РеализацияТоваровУслуг,
// 	                           ДокументСсылка.РеализацияУслугПрочихАктивов - Связанный документ корректировки для определения курса отражения.
// 	ТекстПланОплат - Строка - Текст запроса получения данных увеличения планов оплат.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация, осуществляющая продажу.
// 	     * Партнер - СправочникСсылка.Партнеры - Покупатель.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией продавцом и покупателем.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты.
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыОплатыКлиентом - Вариант оплаты плана оплаты.
// 	     * ИсключатьПриКонтроле - Булево - Исключить ли проверку на наличие оплаты по данной строке движений.
// 	     * НакладнаяПоЗаказам - Булево - Накладная введена по заказу(ам).
// 	     * СверхЗаказа - Булево - Это отгрузка сверх заказа.
// 	     * ЗаказПродажи - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента, 
// 	     		ДокументСсылка.ЗаказДавальца, Неопределено - Заказ, по которому происходит продажа.
// 	     * ДатаКурса - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * КОплате - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма к оплате в валюте взаиморасчетов.
// 	ТекстПланОтгрузок - Строка - Текст запроса получения данных увеличения планов отгрузок и "Отгружается".
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация, осуществляющая продажу.
// 	     * Партнер - СправочникСсылка.Партнеры - Покупатель.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией продавцом и покупателем.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * НакладнаяПоЗаказам - Булево - Накладная введена по заказу(ам).
// 	     * ЗаказПродажи - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента, 
// 	     		ДокументСсылка.ЗаказДавальца, Неопределено - Заказ, по которому происходит продажа.
// 	     * СверхЗаказа - Булево - Это отгрузка сверх заказа.
// 	     * ДатаОтгрузки - Дата - Плановая дата отгрузки.
// 	     * КОтгрузке - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма к отгрузке в валюте взаиморасчетов.
// 	     * Отгружается - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма увеличения "Отгружается".
// 	     * ЗалогЗаТару - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма залога за тару.
// 	ТекстПереносАванса - Строка - Необязательный. Текст запроса получения данных зачтенных авансов.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация осуществляющая продажу.
// 	     * Партнер - СправочникСсылка.Партнеры - Покупатель.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией продавцом и покупателем.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция переноса или резервирования аванса.
// 	     [Реквизиты документа]
// 	     * Заказ - ОпределяемыйТип.ОбъектРасчетовАванс - Объект расчетов, с которого необходимо перенести аванс на текущую продажу.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте взаиморасчетов.
// 	ТекстОплата - Строка - Необязательный. Текст запроса получения данных зачета продажи на отгрузки управленческой организации.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Управленческая организация.
// 	     * Партнер - СправочникСсылка.Партнеры - Покупатель.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между управленческой организацией и покупателем.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация -  Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * Заказ - ОпределяемыйТип.ОбъектРасчетовАванс - Объект расчетов по управленческой организации, на который следует выполнить зачет текущей продажи.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте взаиморасчетов.
// 	     * КОплате - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма уменьшения плана оплаты по объекту управленческой организации.
//
Процедура ПроведениеПродажи(Запрос, ТекстыЗапроса, Регистры, ТекстПродажа, ТекстПланОплат, ТекстПереносАванса = "", ТекстПланОтгрузок = "", ТекстОплата = "") Экспорт
	
	Операция = "Продажа";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	//Курсы валют на даты документов
	ТаблицыДляКурсов = Новый Массив();
	ТаблицыДляКурсов.Добавить("УвеличениеЗадолженностиКлиента");
	Если ТекстОплата <> "" Тогда
		ТаблицыДляКурсов.Добавить("ТаблицаОплатаОтКлиента");
	КонецЕсли;
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, ТаблицыДляКурсов);
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютКлиент", ТекстКурсы);
	
	//Направления деятельности для проведения
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	Если ЗначениеЗаполнено(ТекстПереносАванса) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежа");
	КонецЕсли;
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОплатыКлиентом");
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеЗадолженностиКлиента");
	Если ЗначениеЗаполнено(ТекстПланОтгрузок) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОтгрузкиКлиенту");
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстОплата) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаОплатаОтКлиента");
	КонецЕсли;
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	//Зачет аванса
	Если ЗначениеЗаполнено(ТекстПереносАванса) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаРасшифровкаПлатежа", ТекстПереносАванса);
		МассивТекстов.Добавить(ОтразитьПереносРасчетовСКлиентом(Запрос, Операция)); //Перенос авансов по накладным
	КонецЕсли;
	
	//Увеличение плана оплат
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыКлиентом", ТекстПланОплат);
	МассивТекстов.Добавить(УвеличитьПланОплатыОтКлиента(Запрос, Операция));
	
	//Увеличение задолженности клиента
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеЗадолженностиКлиента", ТекстПродажа);
	МассивТекстов.Добавить(УвеличитьЗадолженностьКлиента(Операция));
	
	//Уменьшение Отгружается
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеОтгружается", ТекстПродажа);
	МассивТекстов.Добавить(УменьшитьОтгружается(Запрос));
	
	//Уменьшение плана отгрузки
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаОтгрузкиКлиенту", ТекстПродажа);
	МассивТекстов.Добавить(УменьшитьПланОтгрузкиКлиенту(Запрос));
	
	Если ЗначениеЗаполнено(ТекстПланОтгрузок) Тогда
		//Увеличение плана отгрузки - сверх заказа
		ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОтгрузкиКлиенту", ТекстПланОтгрузок);
		МассивТекстов.Добавить(УвеличитьПланОтгрузкиКлиенту(Запрос, Операция));
		
		//Увеличение Отгружается - сверх заказа
		ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеОтгружается", ТекстПланОтгрузок);
		МассивТекстов.Добавить(УвеличитьОтгружается(Операция));
	КонецЕсли;
	
	//Увеличение задолженности по упр организации при проведении реализации только регл
	Если ЗначениеЗаполнено(ТекстОплата) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаОплатаОтКлиента", ТекстОплата);
		ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаОплатыОтКлиента", ТекстОплата);
		МассивТекстов.Добавить(УвеличитьНашуЗадолженностьКлиенту(Операция));
		МассивТекстов.Добавить(УменьшитьПланОплатыОтКлиента(Операция)); 
	КонецЕсли;
	
	ТекстРасчетыСКлиентами = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения оплаты от клиента по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстОплата - Строка - Текст запроса получения данных оплаты.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация расчетного счета/кассы.
// 	     * Партнер - СправочникСсылка.Партнеры - Плательщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Плательщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, по которому происходит оплата.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, по которому происходит оплата.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * Заказ - ОпределяемыйТип.ОбъектыРасчетов - Объект расчетов, по которому производится платеж.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма оплаты в валюте взаиморасчетов.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте документа.
// 	     * Оплачивается - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма увеличения "Оплачивается".
// 	     * ДатаКурса - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС.
// 	     * СчетНаОплату - ДокументСсылка.СчетНаОплатуКлиенту - Счет, по которому производится оплата.
// 	     * СвязанныйДокумент - ДокументСсылка.РеализацияТоваровУслуг,
// 	                           ДокументСсылка.РеализацияУслугПрочихАктивов - Связанный документ корректировки для определения курса отражения.
//
Процедура ПроведениеОплатыОтКлиента(Запрос, ТекстыЗапроса, Регистры, ТекстОплата) Экспорт
	
	Операция = "ОплатаОтКлиента";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УменьшениеПланаОплатыОтКлиента");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, "ТаблицаОплатаОтКлиента");
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютКлиент", ТекстКурсы);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаОплатыОтКлиента", ТекстОплата);
	МассивТекстов.Добавить(УменьшитьПланОплатыОтКлиента(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаОплатаОтКлиента", ТекстОплата);
	МассивТекстов.Добавить(УвеличитьНашуЗадолженностьКлиенту(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеОплачивается", ТекстОплата);
	МассивТекстов.Добавить(УвеличитьОплачиваетсяКлиентом(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеОплачивается", ТекстОплата);
	МассивТекстов.Добавить(УменьшитьОплачиваетсяКлиентом(Операция));
	
	ТекстРасчетыСКлиентами = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения заявки на возврат ДС клиенту по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстВзаиморасчеты - Строка - Текст запроса получения данных документа.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация расчетного счета/кассы.
// 	     * Партнер - СправочникСсылка.Партнеры - Покупатель, получатель ДС.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель, получатель ДС.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, по которому производится возврат.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, по которому производится возврат.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * Заказ - ОпределяемыйТип.ОбъектыРасчетов - Объект расчетов, по которому планируется платеж.
// 	     * Оплачивается - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма уменьшения "Оплачивается" (планирование возврата).
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС
// 
Процедура ПроведениеЗаявкиНаВозвратОплатыКлиенту(Запрос, ТекстыЗапроса, Регистры, ТекстВзаиморасчеты) Экспорт
	
	Операция = "ЗаявкаНаВозвратОплатыКлиенту";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УменьшениеОплачивается");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеОплачивается", ТекстВзаиморасчеты);
	ТекстРасчетыСКлиентами = УменьшитьОплачиваетсяКлиентом(Операция);
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения возврата оплаты клиенту по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстЗадолженность - Строка - Текст запроса получения данных платежа.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация расчетного счета/кассы.
// 	     * Партнер - СправочникСсылка.Партнеры - Покупатель, получатель платежа.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель, получатель платежа.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, по которому происходит возврат.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, по которому происходит возврат.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС.
// 	     * ДатаКурса - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма возврата в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма возврата в валюте взаиморасчетов.
// 	ТекстПереносРасчетов - Строка - Текст запроса получения данных зачета возврата ДС клиенту на объекты расчетов расшифровки.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель, получатель платежа.
// 	     * ОрганизацияИсточник - СправочникСсылка.Организации - Организация расчетного счета/кассы.
// 	     * ПартнерИсточник - СправочникСсылка.Партнеры - Покупатель, по которому проходит возврат.
// 	     * ДоговорИсточник - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, по которому происходит возврат.
// 	     * НаправлениеДеятельностиИсточник - СправочникСсылка.НаправленияДеятельности - Направление деятельности, по которому происходит возврат.
// 	     * ОрганизацияПриемник - СправочникСсылка.Организации - Организация, на которую зачитывается возврат ДС.
// 	     * ПартнерПриемник - СправочникСсылка.Партнеры - Покупатель, которому зачитывается возврат ДС.
// 	     * ДоговорПриемник - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, на который зачитывается возврат ДС.
// 	     * НаправлениеДеятельностиПриемник - СправочникСсылка.НаправленияДеятельности - Направление деятельности, на который зачитывается возврат ДС.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * Заказ - ОпределяемыйТип.ОбъектыРасчетов - Объект расчетов, по которому возвращаются денежные средства.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте взаиморасчетов.
// 	ТекстОплачивается - Строка - Текст запроса получения данных возврата, по которым необходимо уменьшить "Оплачивается".
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация, по которой следует уменьшить "Оплачивается".
// 	     * Партнер - СправочникСсылка.Партнеры - Покупатель, по которому следует уменьшить "Оплачивается".
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель, по которому следует уменьшить "Оплачивается".
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, по которому следует уменьшить "Оплачивается".
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, по которому следует уменьшить "Оплачивается".
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * Заказ - ОпределяемыйТип.ОбъектыРасчетов - Объект расчетов, по которому следует уменьшить "Оплачивается".
// 	     * Оплачивается - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма уменьшения "Оплачивается".
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС.
// 
Процедура ПроведениеВозвратаОплатыКлиенту(Запрос, ТекстыЗапроса, Регистры, ТекстЗадолженность, ТекстПереносРасчетов = "", ТекстОплачивается = "") Экспорт
	
	Операция = "ВозвратОплатыКлиенту";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеЗадолженностиКлиента");
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежа", "НаправлениеДеятельностиИсточник");
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежа", "НаправлениеДеятельностиПриемник");
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстОплачивается) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "УменьшениеОплачивается");
	КонецЕсли;
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, "УвеличениеЗадолженностиКлиента");
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютКлиент", ТекстКурсы);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеЗадолженностиКлиента", ТекстЗадолженность);
	МассивТекстов.Добавить(УвеличитьЗадолженностьКлиента(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыКлиентом", ТекстЗадолженность);
	МассивТекстов.Добавить(УвеличитьПланОплатыОтКлиента(Запрос, Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеОплачивается", ТекстЗадолженность);
	МассивТекстов.Добавить(УвеличитьОплачиваетсяКлиентом(Операция));
	
	//Перенос аванса
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаРасшифровкаПлатежа", ТекстПереносРасчетов);
		МассивТекстов.Добавить(ОтразитьПереносРасчетовСКлиентом(Запрос, Операция));
	КонецЕсли;
	
	//Уменьшить оплачивается
	Если ЗначениеЗаполнено(ТекстОплачивается) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеОплачивается", ТекстОплачивается);
		МассивТекстов.Добавить(УменьшитьОплачиваетсяКлиентом(Операция));
	КонецЕсли;
	
	ТекстРасчетыСКлиентами = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения возврата товаров(ценностей) от клиента по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстВозврат - Строка - Текст запроса получения данных документа возврата. Отражает сам возврат товаров.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация продавец.
// 	     * Партнер - СправочникСсылка.Партнеры - Покупатель, возвращающий товар.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель, возвращающий товар.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор возврата.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности возврата.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хоз операция документа.
// 	     [Реквизиты документа]
// 	     * ДатаКурса - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * Заказ - ОпределяемыйТип.ОбъектыРасчетов - Объект расчетов возврата товаров.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма возврата в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма возврата в валюте взаиморасчетов.
// 	     * КОплате - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма возврата в валюте взаиморасчетов, на которую следует уменьшить план оплаты клиента.
// 	ТекстПереносРасчетов - Строка - Текст запроса получения данных расшифровки платежа. Отражает зачет возврата на другие объекты расчетов.
// 	     Запрос должен возвращать выборку полей
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация продавец.
// 	     * Партнер - СправочникСсылка.Партнеры - Покупатель, возвращающий товар.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель, возвращающий товар.
// 	     * ДоговорИсточник - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор возврата.
// 	     * НаправлениеДеятельностиИсточник - СправочникСсылка.НаправленияДеятельности - Направление деятельности возврата.
// 	     * ДоговорПриемник- СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор объекта расчетов, на который зачитывается возврат.
// 	     * НаправлениеДеятельностиПриемник - СправочникСсылка.НаправленияДеятельности - Направление деятельности объекта расчетов, на который зачитывается возврат.
// 	     [Общие]
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов объекта расчетов, на который производится перенос.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хоз операция документа.
// 	     [Реквизиты табличной части]
// 	     * ДатаКурса - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * ЗаказИсточник - ОпределяемыйТип.ОбъектыРасчетов - Объект расчетов возврата товаров.
// 	     * ЗаказПриемник - ОпределяемыйТип.ОбъектыРасчетов - Объект расчетов, на который производится перенос.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма переноса в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма переноса в валюте взаиморасчетов.
//
Процедура ПроведениеВозвратаОтКлиента(Запрос, ТекстыЗапроса, Регистры, ТекстВозврат, ТекстПереносРасчетов = "") Экспорт
	
	Операция = "ВозвратТоваров";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыДляКурсов = Новый Массив;
	ТаблицыДляКурсов.Добавить("ТаблицаОплатаОтКлиента");
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ТаблицыДляКурсов.Добавить("ТаблицаРасшифровкаПлатежа");
	КонецЕсли;
	
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, ТаблицыДляКурсов);
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютКлиент", ТекстКурсы);
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаОплатаОтКлиента");
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежа", "НаправлениеДеятельностиИсточник");
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежа", "НаправлениеДеятельностиПриемник");
	КонецЕсли;
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	УстановитьПараметрыЗапроса(Запрос);
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаОплатыОтКлиента", ТекстВозврат);
	МассивТекстов.Добавить(УменьшитьПланОплатыОтКлиента(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаОплатаОтКлиента", ТекстВозврат);
	МассивТекстов.Добавить(УвеличитьНашуЗадолженностьКлиенту(Операция));
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаРасшифровкаПлатежа", ТекстПереносРасчетов);
		МассивТекстов.Добавить(ОтразитьПереносРасчетовСКлиентом(Запрос, Операция));
	КонецЕсли;
	
	ТекстРасчетыСКлиентами = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетыСПоставщиками

// Дополняет тексты запроса проведения документа текстами проведения графика исполнения договора с поставщиком
// по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстПланыОплаты - Строка - Текст запроса получения данных для отражения плана оплат поставщику.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация заказчик.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией заказчиком и поставщиком.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     [Реквизиты механизма]
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты этапа.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма к оплате в валюте взаиморасчетов. 
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыОплатыПоставщику - Вариант оплаты этапа графика.
// 	ТекстПланыПоставки - Строка - Текст запроса получения данных документа для отражения плана поставки.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация закупщик.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией заказчиком и поставщиком.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     [Реквизиты документа]
// 	     * ДатаПоступления - Дата - Плановая дата поставки строки/документа.
// 	     * КПоступлению - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма к поступлению в валюте взаиморасчетов.
//
Процедура ПроведениеГрафикаИсполненияДоговораСПоставщиком(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОплат, ТекстПланыПоставок) Экспорт
	
	Операция = "ГрафикИсполненияПоставщик";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОплатыПоставщику");
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаПоставки");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыПоставщику", ТекстПланыОплат);
	МассивТекстов.Добавить(УвеличитьПланОплатыПоставщику(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаПоставки", ТекстПланыПоставок);
	МассивТекстов.Добавить(УвеличитьПланПоставкиОтПоставщика(Операция));
	
	ТекстРасчетыСПоставщиками = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения заказа поставщику по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстПланыОплат - Строка - Текст запроса получения данных для отражения плана оплат поставщику.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация осуществляющая закупку.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией заказчиком и поставщиком.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности документа.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     [Реквизиты механизма]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты всего документа/этапа оплаты.
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыОплатыПоставщику - Вариант оплаты этапа графика.
// 	     * КОплате - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма к оплате в валюте взаиморасчетов (с учетом залога за тару).
// 	ТекстПланыПоставок - Строка - Текст запроса получения данных документа для отражения плана отгрузки.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация осуществляющая закупку.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией заказчиком и поставщиком.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности документа.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     [Реквизиты документа]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * ДатаПоступления - Дата - Плановая дата поставки строки/документа.
// 	     * КПоступлению - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма к поступлению в валюте документа (с учетом залога за тару).
// 
Процедура ПроведениеЗаказаПоставщику(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОплат, ТекстПланыПоставок) Экспорт
	
	Операция = "ЗаказПоставщику";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОплатыПоставщику");
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаПоставки");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыПоставщику", ТекстПланыОплат);
	МассивТекстов.Добавить(УвеличитьПланОплатыПоставщику(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаПоставки", ТекстПланыПоставок);
	МассивТекстов.Добавить(УвеличитьПланПоставкиОтПоставщика(Операция));
	
	ТекстРасчетыСПоставщиками = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения оплаты поставщику по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстВзаиморасчеты - Строка - Текст запроса получения данных оплаты.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация расчетного счета/кассы.
// 	     * Партнер - СправочникСсылка.Партнеры - Получатель платежа, поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Получатель платежа, поставщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, по которому производится оплата.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, по которому производится оплата.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * Заказ - СправочникСсылка.ОбъектыРасчетов - Объект расчетов, по которому производится платеж.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма платежа в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма платежа в валюте взаиморасчетов.
// 	     * УменьшениеОплачивается - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма к уменьшению "Оплачивается", например, при оплате по заявке.
// 	     * УвеличениеОплачивается - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма к увеличению "Оплачивается", например, когда платежка проведена в системе, но не подтверждена банком.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС.
// 	     * ЗаявкаНаРасходованиеДенежныхСредств - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - Заявка, по которой происходит оплата.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ДатаКурса - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
//
Процедура ПроведениеОплатыПоставщику(Запрос, ТекстыЗапроса, Регистры, ТекстОплата) Экспорт
	
	Операция = "ОплатаПоставщику";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, "УвеличениеЗадолженностиПоставщика");
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютПоставщик", ТекстКурсы);
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УменьшениеПланаОплатыПоставщику");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаОплатыПоставщику", ТекстОплата);
	МассивТекстов.Добавить(УменьшитьПланОплатыПоставщику(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеЗадолженностиПоставщика", ТекстОплата);
	МассивТекстов.Добавить(УвеличитьЗадолженностьПоставщика(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеОплачиваетсяПоставщику", ТекстОплата);
	МассивТекстов.Добавить(УвеличитьОплачиваетсяПоставщику(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеОплачиваетсяПоставщику", ТекстОплата);
	МассивТекстов.Добавить(УменьшитьОплачиваетсяПоставщику());
	
	ТекстРасчетыСПоставщиками = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения закупки по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстЗакупка - Строка - Текст запроса получения данных документа. Отражает саму закупку.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация осуществляющая закупку.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией закупщиком и поставщиком.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности закупки.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты всего документа/этапа оплаты.
// 	     * ЗаказЗакупки - ДокументСсылка.ЗаказПоставщику, ДокументСсылка.ЗаказПереработчику - Заказ, по которому происходит закупка.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма закупки в валюте документа (включая залог за тару).
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма закупки в валюте взаиморасчетов (включая залог за тару).
// 	     * ЗалогЗаТару - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма залога за тару в валюте взаиморасчетов.
// 	     * КПоступлению - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма уменьшения плана поставки.
// 	     * ДатаКурса - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * НакладнаяПоЗаказам - Булево - Накладная введена по заказу(ам).
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	ТекстПланОплат - Строка - Текст запроса получения данных документа плановой оплаты поставщику. Отражает увеличение плана оплаты поставщику.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация осуществляющая закупку.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией закупщиком и поставщиком.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности закупки.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты всего документа/этапа оплаты.
// 	     * НакладнаяПоЗаказам - Булево - Накладная введена по заказу(ам).
// 	     * СверхЗаказа - Булево - Это приобретение сверх заказа.
// 	     * ЗаказЗакупки - ДокументСсылка.ЗаказПоставщику, ДокументСсылка.ЗаказПереработчику - Заказ, по которому происходит закупка.
// 	     * КОплате - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма к оплате в валюте взаиморасчетов.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыОплатыПоставщику - Вариант оплаты этапа графика.
// 	ТекстПланПоставок - Строка - Текст запроса получения данных документа плановой поставки от поставщика. Отражает увеличение плана поставки поставщиком.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация осуществляющая закупку.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией закупщиком и поставщиком.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности закупки.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * НакладнаяПоЗаказам - Булево - Накладная введена по заказу(ам).
// 	     * СверхЗаказа - Булево - Это приобретение сверх заказа.
// 	     * ЗаказЗакупки - ДокументСсылка.ЗаказПоставщику, ДокументСсылка.ЗаказПереработчику - Заказ, по которому происходит закупка.
// 	     * КПоступлению - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма к поступлению в валюте взаиморасчетов.
// 	ТекстПереносАванса - Строка - Текст запроса получения данных документа по зачтенным авансам.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация осуществляющая закупку.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между организацией закупщиком и поставщиком.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности закупки.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция переноса или резервирования аванса.
// 	     [Реквизиты документа]
// 	     * Заказ - ОпределяемыйТип.ОбъектРасчетовАванс - Объект расчетов, с которого необходимо перенести аванс на текущую закупку.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте взаиморасчетов.
// 	ТекстОплата - Строка - Текст запроса получения данных зачета закупки (Только регл.) на закупки управленческой организации.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Управленческая организация.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор между управленческой организацией и поставщиком.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности закупки.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция переноса или резервирования аванса.
// 	     [Реквизиты документа]
// 	     * Заказ - ОпределяемыйТип.ОбъектРасчетовАванс - Объект расчетов по управленческой организации, на который следует выполнить зачет текущей закупки.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма зачета в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма зачета в валюте взаиморасчетов.
// 	     * КОплате - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма уменьшения плана оплаты в валюте взаиморасчетов.
//
Процедура ПроведениеЗакупки(Запрос, ТекстыЗапроса, Регистры, ТекстЗакупка, ТекстПланОплат, ТекстПереносАванса = "", ТекстПланПоставок = "", ТекстОплата = "") Экспорт
	
	Операция = "Закупка";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	//Курсы валют на даты документов
	ТаблицыДляКурсов = Новый Массив;
	ТаблицыДляКурсов.Добавить("УвеличениеНашейЗадолженностиПоставщику");
	Если ТекстОплата <> "" Тогда
		ТаблицыДляКурсов.Добавить("УвеличениеЗадолженностиПоставщика");
	КонецЕсли;
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, ТаблицыДляКурсов);
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютПоставщик", ТекстКурсы);
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	Если ЗначениеЗаполнено(ТекстПереносАванса) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежаПоставщик");
	КонецЕсли;
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОплатыПоставщику");
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеНашейЗадолженностиПоставщику");
	Если ЗначениеЗаполнено(ТекстПланПоставок) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаПоставки");
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстОплата) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеЗадолженностиПоставщика");
	КонецЕсли;
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	//Зачет аванса
	Если ЗначениеЗаполнено(ТекстПереносАванса) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаРасшифровкаПлатежаПоставщик", ТекстПереносАванса);
		МассивТекстов.Добавить(ОтразитьПереносРасчетовСПоставщиком(Запрос, Операция)); //Перенос авансов по накладным
	КонецЕсли;
	
	//Увеличение плана оплат
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыПоставщику", ТекстПланОплат);
	МассивТекстов.Добавить(УвеличитьПланОплатыПоставщику(Операция));
	
	//Увеличение задолженности поставщику
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеНашейЗадолженностиПоставщику", ТекстЗакупка);
	МассивТекстов.Добавить(УвеличитьНашуЗадолженностьПоставщику(Операция));
	
	//Уменьшение плана поставки
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаПоставки", ТекстЗакупка);
	МассивТекстов.Добавить(УменьшитьПланПоставкиОтПоставщика());
	
	//Увеличение плана поставки - сверх заказа
	Если ЗначениеЗаполнено(ТекстПланПоставок) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаПоставки", ТекстПланПоставок);
		МассивТекстов.Добавить(УвеличитьПланПоставкиОтПоставщика(Операция));
	КонецЕсли;
	
	//Увеличение задолженности по упр организации при проведении реализации только регл
	Если ЗначениеЗаполнено(ТекстОплата) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеЗадолженностиПоставщика", ТекстОплата);
		ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаОплатыПоставщику", ТекстОплата);
		МассивТекстов.Добавить(УвеличитьЗадолженностьПоставщика(Операция));
		МассивТекстов.Добавить(УменьшитьПланОплатыПоставщику(Операция)); 
	КонецЕсли;
	
	ТекстРасчетыСПоставщиками = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения заявки на оплату поставщику по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстВзаиморасчеты - Строка - Текст запроса получения данных заявки.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация заявки.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, по которому планируется оплата.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, по которому планируется оплата.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * Заказ - СправочникСсылка.ОбъектыРасчетов - Объект расчетов, по которому планируется платеж.
// 	     * УвеличениеОплачивается - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма заявки в валюте взаиморасчетов к оплате.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
//
Процедура ПроведениеЗаявкиНаОплатуПоставщику(Запрос, ТекстыЗапроса, Регистры, ТекстВзаиморасчеты) Экспорт
	
	Операция = "ЗаявкаНаОплатуПоставщику";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеОплачиваетсяПоставщику");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеОплачиваетсяПоставщику", ТекстВзаиморасчеты);
	ТекстУвеличенияПланаОплаты = УвеличитьОплачиваетсяПоставщику(Операция);
	
	ТекстРасчетыСПоставщиками = ТекстУвеличенияПланаОплаты;
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения возврата оплаты от поставщика по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстЗадолженность - Строка - Текст запроса получения данных возврата. Отражает сам возврат ДС.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация банковского счета, кассы.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик, возвращающий ДС.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик, возвращающий ДС.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, по которому возвращаются ДС.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, по которому возвращаются ДС.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма возврата в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма возврата в валюте взаиморасчетов.
// 	     * ДатаКурса - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС.
// 	ТекстПереносРасчетов - Строка - Необязательный, текст запроса получения данных расшифровки платежа, на которую необходимо перенести возврат ДС.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик, возвращающий ДС.
// 	     * ПартнерИсточник - СправочникСсылка.Партнеры - Поставщик, возвращающий ДС.
// 	     * ОрганизацияИсточник - СправочникСсылка.Организации - Организация банковского счета, кассы.
// 	     * ДоговорИсточник - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, по которому возвращаются ДС.
// 	     * НаправлениеДеятельностиИсточник - СправочникСсылка.НаправленияДеятельности - Направление деятельности, по которому возвращаются ДС.
// 	     * ОрганизацияПриемник - СправочникСсылка.Организации - Организация, на которую зачитывается возврат ДС.
// 	     * ПартнерПриемник - СправочникСсылка.Партнеры - Поставщик, которому зачитывается возврат ДС.
// 	     * ДоговорПриемник - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, на который зачитывается возврат ДС.
// 	     * НаправлениеДеятельностиПриемник - СправочникСсылка.НаправленияДеятельности - Направление деятельности, на который зачитывается возврат ДС.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция переноса расчетов.
// 	     [Реквизиты табличной части]
// 	     * Заказ - СправочникСсылка.ОбъектРасчетов - Объект расчетов, на который зачитывается возврат ДС.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма зачета в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма зачета в валюте взаиморасчетов.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ДатаКурса - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
//
Процедура ПроведениеВозвратаОплатыОтПоставщика(Запрос, ТекстыЗапроса, Регистры, ТекстЗадолженность, ТекстПереносРасчетов = "") Экспорт
	
	Операция = "ВозвратОплатыОтПоставщика";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, "УвеличениеНашейЗадолженностиПоставщику");
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютПоставщик", ТекстКурсы);
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеНашейЗадолженностиПоставщику");
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежаПоставщик", "НаправлениеДеятельностиИсточник");
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежаПоставщик", "НаправлениеДеятельностиПриемник");
	КонецЕсли;
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеНашейЗадолженностиПоставщику", ТекстЗадолженность);
	МассивТекстов.Добавить(УвеличитьНашуЗадолженностьПоставщику(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыПоставщику", ТекстЗадолженность);
	МассивТекстов.Добавить(УвеличитьПланОплатыПоставщику(Операция));
	
	//Перенос аванса
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаРасшифровкаПлатежаПоставщик", ТекстПереносРасчетов);
		МассивТекстов.Добавить(ОтразитьПереносРасчетовСПоставщиком(Запрос, Операция));
	КонецЕсли;
	
	ТекстРасчетыСПоставщиками = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения возврата товаров поставщику по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстВозврат - Строка - Текст запроса получения данных документа.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация - закупщик, возвращающий товар.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор возврата.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности возврата.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * Заказ - ОпределяемыйТип.ОбъектыРасчетов - Объект расчетов возврата товаров.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма возврата в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма возврата в валюте взаиморасчетов.
// 	     * ДатаКурса - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	ТекстПереносРасчетов - Строка - Текст запроса получения данных расшифровки платежа возврата, на которую происходит зачет возврата.
// 	     Запрос должен возвращать выборку полей
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Аналитика]
// 	     * Организация - СправочникСсылка.Организации - Организация - закупщик, возвращающий товар.
// 	     * Партнер - СправочникСсылка.Партнеры - Поставщик.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик.
// 	     * ДоговорИсточник - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор возврата.
// 	     * НаправлениеДеятельностиИсточник - СправочникСсылка.НаправленияДеятельности - Направление деятельности возврата.
// 	     * ДоговорПриемник - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, на который происходит зачет возврата.
// 	     * НаправлениеДеятельностиПриемник - СправочникСсылка.НаправленияДеятельности - Направление деятельности, на который происходит зачет возврата
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов объекта расчетов, на который происходит зачет возврата.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственнаяОперация - Хозяйственная операция документа.
// 	     [Реквизиты табличной части]
// 	     * ЗаказИсточник - ОпределяемыйТип.ОбъектыРасчетов - Объект расчетов возврата товаров.
// 	     * ЗаказПриемник - ОпределяемыйТип.ОбъектыРасчетов - Объект расчетов, на который происходит зачет возврата.
// 	     * Сумма - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежноеПолеЛюбойЗнак - Сумма расчетов в валюте взаиморасчетов.
// 	     * ДатаКурса - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
//
Процедура ПроведениеВозвратаПоставщику(Запрос, ТекстыЗапроса, Регистры, ТекстВозврат, ТекстПереносРасчетов) Экспорт
	
	Операция = "ВозвратТоваровПоставщику";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыДляКурсов = Новый Массив;
	ТаблицыДляКурсов.Добавить("УвеличениеЗадолженностиПоставщика");
	ТаблицыДляКурсов.Добавить("ТаблицаРасшифровкаПлатежаПоставщик");
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, ТаблицыДляКурсов);
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютПоставщик", ТекстКурсы);
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УменьшениеПланаОплатыПоставщику");
	ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежаПоставщик", "НаправлениеДеятельностиИсточник");
	ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежаПоставщик", "НаправлениеДеятельностиПриемник");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаОплатыПоставщику", ТекстВозврат);
	МассивТекстов.Добавить(УменьшитьПланОплатыПоставщику(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеЗадолженностиПоставщика", ТекстВозврат);
	МассивТекстов.Добавить(УвеличитьЗадолженностьПоставщика(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаРасшифровкаПлатежаПоставщик", ТекстПереносРасчетов);
	МассивТекстов.Добавить(ОтразитьПереносРасчетовСПоставщиком(Запрос, Операция));
	
	ТекстРасчетыСПоставщиками = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВзаиморасчетыСервер.Использование_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	НоваяСтрока.ДействиеОформление = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВзаиморасчетыСервер.Оформление_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	НоваяСтрока.ДействиеВыполнить = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ВзаиморасчетыСервер.Выполнить_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
КонецПроцедуры

// Обработчики этапа.

// Параметры:
// 	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа
Процедура Использование_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитики
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аналитики.Организация В (&МассивОрганизаций)
	|	И Расчеты.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитики
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аналитики.Организация В (&МассивОрганизаций)
	|	И Расчеты.Активность";
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ЕстьДвиженияПоРасчетам = НЕ Запрос.Выполнить().Пустой();
	
	Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
		АналитикиРасчета.Организации = ПараметрыРасчета.МассивОрганизаций;
		
		НачалоРасчета = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(КонецМесяца(ПараметрыРасчета.Период), АналитикиРасчета);
		ПериодВДиапазонеПересчета = (ЗначениеЗаполнено(НачалоРасчета) И НачалоРасчета <= ПараметрыРасчета.ПериодРегистрации);
		
	Иначе
		
		НачалоРасчета = ЗакрытиеМесяцаСервер.НачалоРасчета(
			ПараметрыОбработчика.ДанныеЭтапа.Код,
			ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,
			Неопределено,
			ПараметрыРасчета.МассивОрганизаций);
		
		ПериодВДиапазонеПересчета = ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина);
		ПараметрыОбработчика.ТаблицаПояснения.Очистить();
		
		Если ПериодВДиапазонеПересчета Тогда
			Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.ПериодРегистрации));
		Иначе
			Запрос.УстановитьПараметр("НачалоМесяца", Дата(1,1,1,1,1,2));
		КонецЕсли;
		
		Запрос.Текст = ОперативныеВзаиморасчетыСервер.ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам("ВТНекорректныеОстаткиВзаиморасчетов");
		Запрос.Выполнить();
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика";
		Запрос.Выполнить();
		
		Запрос.Текст = ОперативныеВзаиморасчетыСервер.ТекстЗапросаРазвернутоеСальдо("ВТРазвернутоеСальдоВзаиморасчетов");
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками);
	РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами, РегистрыДляРасчета);
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ЕстьВалютныеОстатки = Документы.РасчетКурсовыхРазниц.ЕстьВалютныеОстатки(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.КонецПериода,
		РегистрыДляРасчета);
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценкаВзаиморасчетов(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.ПериодРегистрации);
		
	Если НЕ ТребуетсяПереоценка И НЕ ПериодВДиапазонеПересчета Тогда
		
		Если НЕ ЕстьДвиженияПоРасчетам Тогда
			
			// Расчет не требуется.
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru='Нет движений по регистрам расчетов с клиентами и поставщиками.';uk='Немає рухів по регістрах розрахунків з клієнтами та постачальниками.'",ОбщегоНазначения.КодОсновногоЯзыка()));
			
			Если НЕ ЕстьВалютныеОстатки Тогда
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
					ПараметрыОбработчика,
					НСтр("ru='Нет валютных остатков по регистрам расчетов с клиентами и поставщиками.';uk='Немає валютних залишків по регістрах розрахунків з клієнтами та постачальниками.'",ОбщегоНазначения.КодОсновногоЯзыка()));
			КонецЕсли;
			
		Иначе
			// Расчет выполнен успешно.
		КонецЕсли;
		
	Иначе
		
		// Требуется перерасчет.
		Если ПериодВДиапазонеПересчета Тогда
			
			ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета = НачалоМесяца(НачалоРасчета);
			
			ТекстОперации = НСтр("ru='Формирование движений начиная с периода %1';uk='Формування рухів починаючи з періоду %1'",ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОперации,
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоРасчета)));
			
		КонецЕсли;
		
		Если ТребуетсяПереоценка Тогда
			
			Если ПериодВДиапазонеПересчета Тогда
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
					ПараметрыОбработчика,
					НСтр("ru='Расчет курсовых разниц по регистрам расчетов с клиентами и поставщиками.';uk='Розрахунок курсових різниць по регістрах розрахунків з клієнтами та постачальниками.'",ОбщегоНазначения.КодОсновногоЯзыка()),
					ЗакрытиеМесяцаСервер.ТекстПодробнееПоУмолчанию(),  
					);
			Иначе
				ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
					ПараметрыОбработчика,
					НСтр("ru='Расчет курсовых разниц по регистрам расчетов с клиентами и поставщиками.';uk='Розрахунок курсових різниць по регістрах розрахунків з клієнтами та постачальниками.'",ОбщегоНазначения.КодОсновногоЯзыка()),
					ЗакрытиеМесяцаСервер.ТекстПодробнееПоУмолчанию(),
					);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа
Процедура Оформление_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru='Актуализация движений документов по данным взаиморасчетов';uk='Актуалізація рухів документів за даними взаєморозрахунків'");
		ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Выполнить';uk='Виконати'");
	Иначе
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru='Формирование движений по данным взаиморасчетов';uk='Формування рухів за даними взаєморозрахунків'");
		ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Сформировать';uk='Сформувати'");
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

Процедура ОписаниеПроверок_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ТаблицаПроверок) Экспорт
	
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		
		// Расхождения остатков оперативных и финансовых регистров взаиморасчетов.
		ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
			"ПроверкаОстатковВзаиморасчетов",
			Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов,
			Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
			"ВзаиморасчетыСервер.ПроверкаОстатковВзаиморасчетов");
		
		ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
			НСтр("ru='Расхождения в регистрах взаиморасчетов';uk='Розбіжності в регістрах взаєморозрахунків'"),
			НСтр("ru='Существует 2 способа исправления: 
|1) Закрытие месяца выявит расхождения и скорректирует остатки на начало закрываемого месяца.
|Задания к переотражению в БУ, МФУ, НДС и к закрытию месяца при этом созданы не будут.
|2) Для исправления движений документов, приведших к некорректным остаткам необходимо перепровести соответствующие документы.'
|;uk='Існує 2 способи виправлення: 
|1) Закриття місяця виявить розбіжності і скоригує залишки на початок місяця, що закривається. 
|Завдання до перевідображеня в БО, МФО, ПДВ і до закриття місяця при цьому створені не будуть. 
|2) Для виправлення рухів документів, що призвели до некоректних залишкам необхідно перепровести відповідні документи.'"));
		
		// Развернутое сальдо по взаиморасчетам.
		ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
			"ПроверкаРазвернутогоСальдо",
			Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов,
			Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
			"ВзаиморасчетыСервер.ПроверкаРазвернутогоСальдо");
		
		ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
			НСтр("ru='Развернутое сальдо по регистрам взаиморасчетов';uk='Розгорнуте сальдо по регістрах взаєморозрахунків'"),
			НСтр("ru='При наличии развернутого сальдо по взаиморасчетам в рамках одного объекта расчетов и аналитики
|могут возникать ошибки распределения взаиморасчетов в финансовых регистрах.'
|;uk='При наявності розгорнутого сальдо по взаєморозрахунках в рамках одного об''єкта розрахунків та аналітики 
|можуть виникати помилки розподілу взаєморозрахунків в фінансових регістрах.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаОстатковВзаиморасчетов(ПараметрыПроверки) Экспорт
	
	Если НЕ ЗакрытиеМесяцаСервер.ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("ТипРасчетов", НСтр("ru='Тип расчетов';uk='Тип розрахунків'"));
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаПоПартнерам", НСтр("ru='Аналитика учета по партнерам';uk='Аналітика обліку за партнерами'"));
	СписокПолей.Добавить("ОбъектРасчетов",            НСтр("ru='Объект расчетов';uk='Об''єкт розрахунків'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНекорректныеОстаткиВзаиморасчетов",
		НСтр("ru='Исправление некорректных остатков по финансовым регистрам взаиморасчетов на начало периода %2.';uk='Виправлення некоректних залишків по фінансових регістрах взаєморозрахунків на початок періоду %2.'"),
		СписокПолей,,);
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

Процедура ПроверкаРазвернутогоСальдо(ПараметрыПроверки) Экспорт 
	
	Если НЕ ЗакрытиеМесяцаСервер.ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("ТипРасчетов", НСтр("ru='Тип расчетов';uk='Тип розрахунків'"));
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаПоПартнерам", НСтр("ru='Аналитика учета по партнерам';uk='Аналітика обліку за партнерами'"));
	СписокПолей.Добавить("ОбъектРасчетов",            НСтр("ru='Объект расчетов';uk='Об''єкт розрахунків'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРазвернутоеСальдоВзаиморасчетов",
		НСтр("ru='Исправление развернутого сальдо по финансовым регистрам взаиморасчетов на начало периода %2.';uk='Виправлення розгорнутого сальдо по фінансових регістрах взаєморозрахунків на початок періоду %2.'"),
		СписокПолей,,);
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
		
КонецПроцедуры

Процедура Выполнить_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
		АналитикиРасчета.Организации = ПараметрыРасчета.МассивОрганизаций;
		
		РаспределениеВзаиморасчетовВызовСервера.РассчитатьВсе(ПараметрыРасчета.КонецПериода, АналитикиРасчета);
		
		//Переоценка на конец месяца или по дням если не было взаиморасчетов
		Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСКлиентами(
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСПоставщиками(
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		
	Иначе
		
		ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
		НачалоРасчета = ЗакрытиеМесяцаСервер.НачалоРасчета(
			ПараметрыОбработчика.ДанныеЭтапа.Код,
			ПараметрыРасчета.КонецПериода,
			,
			ПараметрыРасчета.МассивОрганизаций);
			
		ИмяКлючевойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ЗакрытиеМесяца.%1",
				СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код));
		ОписаниеЗамера 		= ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации);
		КоличествоДанных	= 0;
		
		Пока НачалоРасчета <= ПараметрыОбработчика.ПараметрыРасчета.КонецПериода Цикл
		
			НомерЗадания 	 	= ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
			ОкончаниеПериода 	= КонецМесяца(НачалоРасчета);
			
			НачатьТранзакцию();
			
			Попытка
				
				ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
					НомерЗадания,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ДанныеКРасчетуЗаМесяц = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(
					НачалоРасчета,
					ОкончаниеПериода,
					НомерЗадания,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
|%2'
|;uk='При виконанні розрахунку за період %1 сталася помилка:
|%2'",ОбщегоНазначения.КодОсновногоЯзыка()),
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
			//Исправления ошибок.
			
			ОперативныеВзаиморасчетыСервер.ИсправитьОстаткиВзаиморасчетов(НачалоРасчета, ДанныеКРасчетуЗаМесяц.Организация);
			ОперативныеВзаиморасчетыСервер.ИсправитьРазвернутоеСальдо(НачалоРасчета, ДанныеКРасчетуЗаМесяц.Организация);
			
			//Актуализация движений.
			
			Для Каждого Организация Из ДанныеКРасчетуЗаМесяц.Организация Цикл
				
				БылиОшибки = Ложь;
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(ОкончаниеПериода, ВидГраницы.Включая));
				Запрос.УстановитьПараметр("КонецПериода", ОкончаниеПериода);
				Запрос.УстановитьПараметр("НачалоПериода", НачалоРасчета);
				Запрос.УстановитьПараметр("Организация",   Организация);
				Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", Истина);
				Запрос.УстановитьПараметр("ПоВсемДокументам", Ложь);
				Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
				Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());

				#Область СуммыДокументовВВалютахУчета
				//Пересчет построчного распределения валютных сумм документов.
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РасчетыСКлиентами.Регистратор КАК ДокументРегистратор
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
				|ГДЕ 
				|	РасчетыСКлиентами.Период <= &КонецПериода И РасчетыСКлиентами.Период >= &НачалоПериода
				|	И РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация = &Организация
				|	И РасчетыСКлиентами.Сумма <> 0
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РасчетыСПоставщиками.Регистратор КАК ДокументРегистратор
				|ИЗ
				|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
				|ГДЕ 
				|	РасчетыСПоставщиками.Период <= &КонецПериода И РасчетыСПоставщиками.Период >= &НачалоПериода
				|	И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация = &Организация
				|	И РасчетыСПоставщиками.Сумма <> 0";
				МассивВсехДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументРегистратор");
				РегистрыСведений.СуммыДокументовВВалютахУчета.РассчитатьСуммыДокументовВВалютахУчета(МассивВсехДокументов);
				
				КоличествоДанных = КоличествоДанных + МассивВсехДокументов.Количество();
				
				Запрос = Новый Запрос;
				Запрос.Текст = РегистрыСведений.СуммыДокументовВВалютахУчета.ТекстЗапросаДокументовДляПересчета();
				Запрос.УстановитьПараметр("МассивДокументов", МассивВсехДокументов);
				Запрос.УстановитьПараметр("ЭтоПроверка", Истина);
				Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
				Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
				Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", Истина);
				Запрос.УстановитьПараметр("ПоВсемДокументам", Ложь);
				
				ТаблицаНерасчитанныхДокументов = Запрос.Выполнить().Выгрузить();
				
				//Попытка перепровести проблемные документы.
				Для Каждого СтрокаДокумента Из ТаблицаНерасчитанныхДокументов Цикл
					Попытка
						Если НЕ ЗначениеЗаполнено(СтрокаДокумента.РасчетныйДокумент) Тогда
							Продолжить;
						КонецЕсли;
						ДокументОбъект = СтрокаДокумента.РасчетныйДокумент.ПолучитьОбъект(); // ДокументОбъект
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='При формировании движений по данным взаиморасчетов за период %1 
|при попытке перепроведения документа %2 произошла ошибка:
|%3'
|;uk='При формуванні рухів за даними взаєморозрахунків за період %1 
|при спробі перепроведення документа %2 сталася помилка: 
|%3'"),
							РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
							СтрокаДокумента.РасчетныйДокумент,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(
							НСтр("ru='Попытка перепроведения документов';uk='Спроба перепроведення документів'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Ошибка,
							Метаданные.ОбщиеМодули.ЗакрытиеМесяцаСервер,
							,
							ТекстОшибки);
					КонецПопытки;
				КонецЦикла;
				
				Если ТаблицаНерасчитанныхДокументов.Количество() > 0 Тогда
					
					Шаблон = НСтр("ru='Не удалось выполнить распределение суммы взаиморасчетов на строки документа %1.
|Итоги движений документа по регистрам взаиморасчетов отличается от движений по регистру сумм документа в валютах учёта.
|Попробуйте перепровести документ вручную.'
|;uk='Не вдалося виконати розподіл суми взаєморозрахунків на рядки документу %1.
|Підсумки рухів документа по регістрах взаєморозрахунків відрізняється від рухів за регістром сум документа в валютах обліку.
|Спробуйте перепровести документ вручну.'",ОбщегоНазначения.КодОсновногоЯзыка());
					
					ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
						ПараметрыОбработчика.ДанныеЭтапа.Код,
						Организация,
						ПараметрыРасчета.ПериодРегистрации);
					
					Для Каждого СтрокаДокумента Из ТаблицаНерасчитанныхДокументов Цикл
						
						ГруппаПроблем = НСтр("ru='При выполнении операции были диагностированы ошибки';uk='При виконанні операції були діагностовані помилки'",ОбщегоНазначения.КодОсновногоЯзыка());
						
						ПолныйТекстПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаДокумента.РасчетныйДокумент);
						
						ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
							ПараметрыРегистрации,
							ГруппаПроблем,
							Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка,
							ПолныйТекстПроблемы,
							СтрокаДокумента.РасчетныйДокумент);
					КонецЦикла;
					
					БылиОшибки = Истина;
				КонецЕсли;
				
				//Обновление движений по оборотным регистрам платежных документов и взаимозачетов задолженности.
				РегистрыСведений.СуммыДокументовВВалютахУчета.ОбновитьДвиженияПоОборотнымРегистрамНепересчитываемыхДокументов(МассивВсехДокументов);
				
				Если БылиОшибки Тогда
					Возврат;
				КонецЕсли;
				
				#КонецОбласти
				
				//Переоценка на конец месяца или по дням если не было взаиморасчетов
				Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСКлиентами(
					Организация,
					ОкончаниеПериода);
				Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСПоставщиками(
					Организация,
					ОкончаниеПериода);
				
			КонецЦикла;
			
			НачатьТранзакцию();
			
			Попытка
				
				ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
					НомерЗадания,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(
					Неопределено,
					НомерЗадания,
					ПараметрыОбработчика.ДанныеЭтапа.Код,
					ДанныеКРасчетуЗаМесяц);
				
				РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(
					ДанныеКРасчетуЗаМесяц.ВременныеТаблицы,
					ОкончаниеПериода + 1);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
|%2'
|;uk='При виконанні розрахунку за період %1 сталася помилка:
|%2'",ОбщегоНазначения.КодОсновногоЯзыка()),
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
			НачалоРасчета = ОкончаниеПериода + 1;
			
		КонецЦикла;
		
		ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценкаВзаиморасчетов(
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.КонецПериода);
		
		Если ТребуетсяПереоценка Тогда
			ОперативныеВзаиморасчетыСервер.ВыполнитьПереоценкуНаДату(ПараметрыРасчета.МассивОрганизаций, ПараметрыРасчета.КонецПериода);
		КонецЕсли;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Модульность

// Возвращает структуру состояния взаиморасчетов.
// 
// Параметры:
// 	Объект - ФормаКлиентскогоПриложения - Описание:
// * Объект - СправочникСсылка, ДокументСсылка - Объект формы.
// 	СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма
// Возвращаемое значение:
// 	Структура - Описание:
// * ПроцентПоставок - Число -
// * СуммаПоставок - Число -
// * ПроцентОтгрузок - Число -
// * СуммаОтгрузок - Число -
// * ПроцентОплат - Число -
// * СуммаОплат - Число -
Функция СостояниеВзаиморасчетов(Объект, СтруктураПараметров) Экспорт
	
	ПутьКДаннымСуммаВзаиморасчетов = ?(СтруктураПараметров.СуммаВзаиморасчетов="",СтруктураПараметров.СуммаДокумента,СтруктураПараметров.СуммаВзаиморасчетов);
	Организация         = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
	Ссылка              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка);
	ТЧ                  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ);
	ЗаказОснование      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
	ПорядокРасчетов     = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
	ТипРасчетов         = СтруктураПараметров.ТипРасчетов;
	
	СписокЗаказов = Новый Массив;
	Если ЗначениеЗаполнено(ТЧ) И ЗначениеЗаполнено(СтруктураПараметров.ИмяРеквизитаТЧЗаказ) 
		И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
		Заказы = ТЧ.Выгрузить(, СтруктураПараметров.ИмяРеквизитаТЧЗаказ).ВыгрузитьКолонку(СтруктураПараметров.ИмяРеквизитаТЧЗаказ);
		СписокЗаказов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Заказы);
		сч = 0;
		Пока сч < СписокЗаказов.Количество() Цикл
			Если Не ЗначениеЗаполнено(СписокЗаказов[сч]) Тогда
				СписокЗаказов.Удалить(сч);
			Иначе
				сч= сч + 1;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ЗаказОснование) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
		СписокЗаказов.Добавить(ЗаказОснование);
	КонецЕсли;
	
	Если СписокЗаказов.Количество() = 1 Тогда
		ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(СписокЗаказов[0], Организация, ТипРасчетов);
		СуммаВзаиморасчетов = ?(ЗначениеЗаполнено(ОбъектРасчетов), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов, "Сумма"),0);
	Иначе
		ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Ссылка, Организация, ТипРасчетов);
		СуммаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПутьКДаннымСуммаВзаиморасчетов,,0);
	КонецЕсли;
	
	Возврат СостояниеВзаиморасчетовОбъектаРасчетов(ОбъектРасчетов, СуммаВзаиморасчетов, СтруктураПараметров.ТипРасчетов, Организация);
	
КонецФункции

Функция СостояниеВзаиморасчетовОбъектаРасчетов(ОбъектРасчетов, СуммаВзаиморасчетов, ТипРасчетов, Организация = Неопределено) Экспорт
	
	СтруктураРасчетов = Новый Структура;
	СтруктураРасчетов.Вставить("СуммаОплат", 0 );
	СтруктураРасчетов.Вставить("ПроцентОплат", 0 );
	СтруктураРасчетов.Вставить("СуммаОтгрузок", 0 );
	СтруктураРасчетов.Вставить("ПроцентОтгрузок", 0 );
	СтруктураРасчетов.Вставить("СуммаПоставок", 0 );
	СтруктураРасчетов.Вставить("ПроцентПоставок", 0 );
	
	Запрос = Новый Запрос;
	Если Организация = Неопределено Тогда
		Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов,"Организация"));
	Иначе
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	Запрос.УстановитьПараметр("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	Если ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом") 
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.КОплатеРасход < 0 
		|		ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|		ТОГДА 0
		|		ИНАЧЕ РасчетыОстаткиИОбороты.КОплатеРасход
		|	КОНЕЦ),0) КАК СуммаОплат,
		|	ЕСТЬNULL(ВЫБОР КОГДА СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.КОплатеРасход < 0 
		|						ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|							ТОГДА 0
		|						ИНАЧЕ РасчетыОстаткиИОбороты.КОплатеРасход
		|					КОНЕЦ) = 0 ИЛИ &СуммаВзаиморасчетов = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.КОплатеРасход < 0 
		|								ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|									ТОГДА 0
		|								ИНАЧЕ РасчетыОстаткиИОбороты.КОплатеРасход
		|							КОНЕЦ)* 100 / &СуммаВзаиморасчетов КАК ЧИСЛО(20, 2))
		|	КОНЕЦ,0) КАК ПроцентОплат,
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА ЕСТЬNULL(РасчетыОстаткиИОбороты.СуммаПриход, 0) < 0
		|		ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации 
		|		ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыОстаткиИОбороты.СуммаПриход, 0) КАК ЧИСЛО(31,2))
		|	КОНЕЦ),0) КАК СуммаОтгрузок,
		|	ЕСТЬNULL(ВЫБОР КОГДА СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.СуммаПриход < 0
		|								ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации 
		|							ТОГДА 0
		|						ИНАЧЕ РасчетыОстаткиИОбороты.СуммаПриход
		|				КОНЕЦ) = 0 ИЛИ &СуммаВзаиморасчетов = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.СуммаПриход < 0
		|									ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации 
		|								ТОГДА 0
		|							ИНАЧЕ РасчетыОстаткиИОбороты.СуммаПриход
		|					КОНЕЦ) * 100 / &СуммаВзаиморасчетов КАК ЧИСЛО(20, 2))
		|	КОНЕЦ,0) КАК ПроцентОтгрузок
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, , Регистратор, , ОбъектРасчетов = &ОбъектРасчетов) КАК РасчетыОстаткиИОбороты
		|ГДЕ
		|	РасчетыОстаткиИОбороты.АналитикаУчетаПоПартнерам.Организация = &Организация";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураРасчетов, Результат.Выгрузить()[0]);
		КонецЕсли;
		
	ИначеЕсли ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
			
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.КОплатеПриход < 0 
		|				ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|			ТОГДА 0
		|		ИНАЧЕ РасчетыОстаткиИОбороты.КОплатеПриход
		|	КОНЕЦ), 0) КАК СуммаОплат,
		|	ЕСТЬNULL(ВЫБОР КОГДА СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.КОплатеПриход < 0 
		|								ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|							ТОГДА 0
		|						ИНАЧЕ РасчетыОстаткиИОбороты.КОплатеПриход
		|					КОНЕЦ) = 0 ИЛИ &СуммаВзаиморасчетов = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВЫРАЗИТЬ(СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.КОплатеПриход < 0
		|											ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|										ТОГДА 0
		|									ИНАЧЕ РасчетыОстаткиИОбороты.КОплатеПриход
		|								КОНЕЦ) * 100 / &СуммаВзаиморасчетов КАК ЧИСЛО(20, 2))
		|	КОНЕЦ, 0) КАК ПроцентОплат,
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.СуммаРасход < 0
		|					ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|			ТОГДА 0
		|		ИНАЧЕ РасчетыОстаткиИОбороты.СуммаРасход
		|	КОНЕЦ), 0) КАК СуммаПоставок,
		|	ЕСТЬNULL(ВЫБОР КОГДА СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.СуммаРасход < 0 
		|									ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|								ТОГДА 0
		|							ИНАЧЕ РасчетыОстаткиИОбороты.СуммаРасход
		|						КОНЕЦ) = 0 ИЛИ &СуммаВзаиморасчетов = 0
		|					ТОГДА 0
		|				ИНАЧЕ ВЫРАЗИТЬ(СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.СуммаРасход < 0 
		|											ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|										ТОГДА 0
		|									ИНАЧЕ РасчетыОстаткиИОбороты.СуммаРасход
		|								КОНЕЦ) * 100 / &СуммаВзаиморасчетов КАК ЧИСЛО(20, 2))
		|	КОНЕЦ, 0) КАК ПроцентПоставок
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(, , Регистратор, , ОбъектРасчетов = &ОбъектРасчетов) КАК РасчетыОстаткиИОбороты
		|ГДЕ
		|	РасчетыОстаткиИОбороты.АналитикаУчетаПоПартнерам.Организация = &Организация";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураРасчетов, Результат.Выгрузить()[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРасчетов;
	
КонецФункции

// Служебная функция описания формы для механизма взаиморасчетов
// 
// Возвращаемое значение:
// 	ФормаКлиентскогоПриложения - Форма документа:
// 	* Объект - СправочникСсылка, ДокументСсылка - объект формы.
Функция ОписаниеФормыВзаиморасчеты() Экспорт
	
КонецФункции

#КонецОбласти

Функция ТекстЗапросаВыбораОснованияПлатежа() Экспорт
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Регистратор             КАК ОснованиеПлатежа,
	|	ОбъектыРасчетов.Ссылка                    КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Партнер                   КАК Партнер,
	|	ОбъектыРасчетов.Организация               КАК Организация,
	|	ОбъектыРасчетов.Контрагент                КАК Контрагент,
	|	ОбъектыРасчетов.Договор                   КАК Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	ОбъектыРасчетов.ВалютаВзаиморасчетов      КАК ВалютаВзаиморасчетов,
	|	ОбъектыРасчетов.Номер                     КАК Номер,
	|	ОбъектыРасчетов.Дата                      КАК Дата,
	|	ОбъектыРасчетов.ДатаВходящегоДокумента    КАК ДатаВходящегоДокумента,
	|	ОбъектыРасчетов.НомерВходящегоДокумента   КАК НомерВходящегоДокумента,
	|	ОбъектыРасчетов.Сумма                     КАК Сумма,
	|	ОбъектыРасчетов.Валюта                    КАК Валюта,
	|	ОбъектыРасчетов.Состояние                 КАК Состояние
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|			ПО РасчетыСКлиентами.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|				И (РасчетыСКлиентами.Сумма <> 0 ИЛИ РасчетыСКлиентами.КОплате <> 0)
	|				И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО РеестрДокументов.Ссылка = РасчетыСКлиентами.Регистратор
	|// Условия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.Регистратор          КАК ОснованиеПлатежа,
	|	ОбъектыРасчетов.Ссылка                    КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Партнер                   КАК Партнер,
	|	ОбъектыРасчетов.Организация               КАК Организация,
	|	ОбъектыРасчетов.Контрагент                КАК Контрагент,
	|	ОбъектыРасчетов.Договор                   КАК Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	ОбъектыРасчетов.ВалютаВзаиморасчетов      КАК ВалютаВзаиморасчетов,
	|	ОбъектыРасчетов.Номер                     КАК Номер,
	|	ОбъектыРасчетов.Дата                      КАК Дата,
	|	ОбъектыРасчетов.ДатаВходящегоДокумента    КАК ДатаВходящегоДокумента,
	|	ОбъектыРасчетов.НомерВходящегоДокумента   КАК НомерВходящегоДокумента,
	|	ОбъектыРасчетов.Сумма                     КАК Сумма,
	|	ОбъектыРасчетов.Валюта                    КАК Валюта,
	|	ОбъектыРасчетов.Состояние                 КАК Состояние
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|			ПО РасчетыСПоставщиками.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|				И (РасчетыСПоставщиками.Сумма <> 0 ИЛИ РасчетыСПоставщиками.КОплате <> 0)
	|				И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|ГДЕ
	|	ИСТИНА
	|";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииДляВыбораДокументаРасчетов

// Возвращает параметры, используемые при выборе документа расчетов с клиентами.
// Используется в общей форме "ВыборДокументаРасчетов" и в обработке получения данных выбора основания платежа.
// 
// Возвращаемое значение: 
// Структура с ключами
//	ВводПоСтроке - Булево - Признак получения данных выбора.
//	ОтборПоОрганизацииИКонтрагенту - Булево - Есть отбор по организации и контрагенту.
//	ИсключитьРедактируемыйДокумент - Булево - Не включать документ из которого вызывается подбор в данные выбора.
//	ЗапретитьДоговорыПоДокументам - Булево - Запретить договоры с порядком расчетов "по заказам/накладным".
//
Функция ПараметрыОтбораПриВыбореДокументаРасчетовСКлиентами() Экспорт 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВводПоСтроке",                   Ложь);
	ПараметрыОтбора.Вставить("ОтборПоОрганизацииИКонтрагенту", Ложь);
	ПараметрыОтбора.Вставить("ИсключитьРедактируемыйДокумент", Ложь);
	ПараметрыОтбора.Вставить("ЗапретитьДоговорыПоДокументам",  Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Функция формирует массив организаций, доступных для подбора остатков расчетов с партнером.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, указанная в документе.
//	ЕстьРасчетыСПоставщиками - Булево - Признак наличия расчетов с партнерами.
//	ЕстьРасчетыСКлиентами - Булево - Признак наличия расчетов с поставщиками.
//
// Возвращаемое значение:
//	Массив - Массив доступных организаций.
//
Функция ДоступныеОрганизацийДляПодбораОстатков(Организация)
	
	ДоступныеОрганизации = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
		|	И Организации.ОбособленноеПодразделение
		|");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		ДоступныеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	ДоступныеОрганизации.Добавить(Организация);
	
	Возврат ДоступныеОрганизации;
	
КонецФункции

Функция ТекстЗапросаПоОстаткамРасчетовСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	ВЫБОР КОГДА ТаблицаПлатежей.Сумма ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК Выбран,
	|	ЕСТЬNULL(ТаблицаПлатежей.Сумма, 0) КАК Сумма,
	|	&ВалютаДокумента КАК ВалютаДокумента,
	|
	|	ОбъектыРасчетов.Дата КАК Дата,
	|	ОбъектыРасчетов.Номер КАК Номер,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	"""" КАК ИдентификаторПлатежа,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
	|	ОбъектыРасчетов.Организация КАК Организация,
	|	ОбъектыРасчетов.Партнер КАК Партнер,
	|	ОбъектыРасчетов.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|
	|	ЕСТЬNULL(ОбъектыРасчетов.Договор.СтатьяДвиженияДенежныхСредств,
	|		ЕСТЬNULL(ОбъектыРасчетов.Соглашение.СтатьяДвиженияДенежныхСредств,
	|			ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))) КАК СтатьяДвиженияДенежныхСредств,
	|
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщиками.СуммаОстаток > 0 ТОГДА
	|		РасчетыСПоставщиками.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДолгПартнера,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток > 0
	|		И НЕ &ТолькоБезусловнаяЗадолженность
	|	ТОГДА
	|		РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КОплате,
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщиками.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСПоставщиками.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НашДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
	|		ОбъектРасчетов В (
	|			ВЫБРАТЬ
	|				ОбъектыРасчетов.ОбъектРасчетов
	|			ИЗ
	|				ОбъектыРасчетов КАК ОбъектыРасчетов)
	|	) КАК РасчетыСПоставщиками
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО 
	|		РасчетыСПоставщиками.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПлатежей КАК ТаблицаПлатежей
	|	ПО
	|		РасчетыСПоставщиками.ОбъектРасчетов = ТаблицаПлатежей.ОбъектРасчетов
	|		И РасчетыСПоставщиками.Валюта = ТаблицаПлатежей.Валюта
	|
	|ГДЕ
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСПоставщиками.СуммаОстаток > 0)
	|	ИЛИ 
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток > 0
	|	И НЕ &ТолькоБезусловнаяЗадолженность
	|	)
	|	ИЛИ 
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.СуммаОстаток > 0
	|	)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоОстаткамРасчетовСКлиентами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	ВЫБОР КОГДА ТаблицаПлатежей.Сумма ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК Выбран,
	|	ЕСТЬNULL(ТаблицаПлатежей.Сумма, 0) КАК Сумма,
	|	&ВалютаДокумента КАК ВалютаДокумента,
	|
	|	ОбъектыРасчетов.Дата КАК Дата,
	|	ОбъектыРасчетов.Номер КАК Номер,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОбъектыРасчетов.Организация КАК Организация,
	|	ОбъектыРасчетов.Партнер КАК Партнер,
	|	ОбъектыРасчетов.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	
	|	ЕСТЬNULL(ОбъектыРасчетов.Договор.СтатьяДвиженияДенежныхСредств,
	|		ЕСТЬNULL(ОбъектыРасчетов.Соглашение.СтатьяДвиженияДенежныхСредств,
	|			ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))) КАК СтатьяДвиженияДенежныхСредств,
	|
	|	ВЫБОР КОГДА РасчетыСКлиентами.СуммаОстаток > 0 ТОГДА
	|		РасчетыСКлиентами.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДолгПартнера,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток > 0
	|		И НЕ &ТолькоБезусловнаяЗадолженность
	|	ТОГДА
	|		РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КОплате,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСКлиентами.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НашДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, 
	|		ОбъектРасчетов В (
	|			ВЫБРАТЬ
	|				ОбъектыРасчетов.ОбъектРасчетов
	|			ИЗ
	|				ОбъектыРасчетов КАК ОбъектыРасчетов)
	|	) КАК РасчетыСКлиентами
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО 
	|		РасчетыСКлиентами.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПлатежей КАК ТаблицаПлатежей
	|	ПО
	|		РасчетыСКлиентами.ОбъектРасчетов = ТаблицаПлатежей.ОбъектРасчетов
	|		И РасчетыСКлиентами.Валюта = ТаблицаПлатежей.Валюта
	|
	|ГДЕ
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.СуммаОстаток < 0)
	|	ИЛИ 
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток > 0
	|	И НЕ &ТолькоБезусловнаяЗадолженность
	|	)
	|	ИЛИ 
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.СуммаОстаток > 0
	|	)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура заполняет таблицу остатков расчетов с партнером.
//
// Параметры:
//	Реквизиты - Структура - Структура должна содержать значения: 
//				Дата, Организация, СуммаДокумента, Валюта, Контрагент, Партнер, ХозяйственнаяОперация
//	АдресПлатежейВХранилище - Строка - Адрес во временном хранилище, в которое помещена табличная часть документа.
//	ТаблицаОстатковРасчетов - ТаблицаЗначений - Таблица с остатками расчетов.
//	УчитыватьФилиалы - Булево - Признак включения остатков по филиалам организации.
//
Процедура ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов, ДополнительныеОтборы = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаДокумента", Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ПоВсемПартнерам", Не ЗначениеЗаполнено(Реквизиты.Партнер));
	Запрос.УстановитьПараметр("Партнер", Реквизиты.Партнер);
	Запрос.УстановитьПараметр("ПартнерПрочиеОтношения", Реквизиты.ПартнерПрочиеОтношения);
	
	УчитыватьФилиалы = ?(Реквизиты.Свойство("УчитыватьФилиалы"), Реквизиты.УчитыватьФилиалы, Истина);
	
	Если УчитыватьФилиалы Тогда
		ДоступныеОрганизации = ДоступныеОрганизацийДляПодбораОстатков(Реквизиты.Организация);
	Иначе
		ДоступныеОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Реквизиты.Организация);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	Запрос.УстановитьПараметр("ДебиторскаяЗадолженность", Реквизиты.ПодборДебиторскойЗадолженности);
	Запрос.УстановитьПараметр("ТолькоБезусловнаяЗадолженность", Реквизиты.ПодборТолькоБезусловнойЗадолженности);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
	|	РасшифровкаПлатежа.Сумма КАК Сумма
	|
	|ПОМЕСТИТЬ ТаблицаПлатежей
	|ИЗ
	|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
	|
	|ПОМЕСТИТЬ ОбъектыРасчетов
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Организация В (&Организация)
	|	И (ОбъектыРасчетов.Партнер = &Партнер ИЛИ &ПоВсемПартнерам)
	|	И ОбъектыРасчетов.Контрагент = &Контрагент
	|	И (&ПартнерПрочиеОтношения И ОбъектыРасчетов.Партнер.ПрочиеОтношения
	|		ИЛИ НЕ &ПартнерПрочиеОтношения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|
	|//ТекстЗапросаРасчеты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Дата,
	|	Номер
	|";
	Если Реквизиты.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"//ТекстЗапросаРасчеты",
			ТекстЗапросаПоОстаткамРасчетовСКлиентами());
	Иначе
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"//ТекстЗапросаРасчеты",
			ТекстЗапросаПоОстаткамРасчетовСПоставщиками());
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Если ЗначениеЗаполнено(АдресПлатежейВХранилище) Тогда
		РасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище);
	Иначе
		Если ТаблицаОстатковРасчетов = Неопределено Тогда
			РасшифровкаПлатежа = Новый ТаблицаЗначений;
			РасшифровкаПлатежа.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
			РасшифровкаПлатежа.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			РасшифровкаПлатежа.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		Иначе
			РасшифровкаПлатежа = ТаблицаОстатковРасчетов.Выгрузить(,).СкопироватьКолонки();
		КонецЕсли;
	КонецЕсли;
	РасшифровкаПлатежа.Свернуть("ОбъектРасчетов, ВалютаВзаиморасчетов", "Сумма");
	
	Если РасшифровкаПлатежа.Количество() = 1 И Не ЗначениеЗаполнено(РасшифровкаПлатежа[0].ОбъектРасчетов) Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	Если ДополнительныеОтборы <> Неопределено Тогда
		
		СхемаЗапросаОстатков = Новый СхемаЗапроса;
		СхемаЗапросаОстатков.УстановитьТекстЗапроса(Запрос.Текст);
		Оператор = СхемаЗапросаОстатков.ПакетЗапросов[2].Операторы[0];
		
		сч = 0;
		Для Каждого КлючИЗначение Из ДополнительныеОтборы Цикл
			Отбор = "ЕСТЬNULL(ОбъектыРасчетов."+КлючИЗначение.Ключ+", Неопределено) = &Параметр"+Строка(сч);
			Запрос.УстановитьПараметр("Параметр"+Строка(сч), КлючИЗначение.Значение);
			Оператор.Отбор.Добавить(Отбор);
		КонецЦикла;
		
		Запрос.Текст = СхемаЗапросаОстатков.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Если ТаблицаОстатковРасчетов = Неопределено Тогда
		ТаблицаОстатковРасчетов = Запрос.Выполнить().Выгрузить();
	Иначе
		ТаблицаОстатковРасчетов.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		СуммаКРаспределению = Реквизиты.СуммаДокумента;
	Иначе
		СуммаКРаспределению = 0;
	КонецЕсли;
	
	СоответствиеВалютаКурс = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		
		Если Не СтрокаТаблицы.Выбран Тогда
			
			Если СтрокаТаблицы.КОплате <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.КОплате;
				
			ИначеЕсли СтрокаТаблицы.НашДолг <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.НашДолг;
				
			ИначеЕсли СтрокаТаблицы.ДолгПартнера <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.ДолгПартнера;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизиты.Валюта) И Реквизиты.Валюта <> СтрокаТаблицы.ВалютаВзаиморасчетов Тогда
				
				Коэффициенты = СоответствиеВалютаКурс.Получить(СтрокаТаблицы.ВалютаВзаиморасчетов);
				Если Коэффициенты = Неопределено Тогда
					Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Реквизиты.Валюта, СтрокаТаблицы.ВалютаВзаиморасчетов, ?(Реквизиты.Дата <> '00010101', Реквизиты.Дата, ТекущаяДатаСеанса()));
					СоответствиеВалютаКурс.Вставить(СтрокаТаблицы.ВалютаВзаиморасчетов, Коэффициенты);
				КонецЕсли;
					
				СтрокаТаблицы.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, СтрокаТаблицы.Сумма / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаКРаспределению > 0 Тогда
			
			СтрокаТаблицы.Выбран = Истина;
			Если СтрокаТаблицы.Сумма > СуммаКРаспределению Тогда
				СтрокаТаблицы.Сумма = СуммаКРаспределению;
			КонецЕсли;
			СуммаКРаспределению = СуммаКРаспределению - СтрокаТаблицы.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует массив допустимых хозяйственных операций договора с контрагентом.
//
// Параметры:
//	ОперацияДокумента - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
//	Массив - Массив хозяйственных операций.
//
Функция ХозяйственнаяОперацияДоговора(ОперацияДокумента) Экспорт
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если ОперацияДокумента = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
	 ИЛИ ОперацияДокумента = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		
	ИначеЕсли ОперацияДокумента = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
	 ИЛИ ОперацияДокумента = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		
	КонецЕсли;
	
	Возврат ХозяйственнаяОперацияДоговора;
	
КонецФункции

Процедура ДобавитьЗаполнитьПорядокРасчетовСКлиентами(ТаблицаРасчеты, ТипДокумента) Экспорт
	
	ТаблицаРасчеты.Колонки.Добавить("ПорядокОперации",            Новый ОписаниеТипов("Строка"));
	ТаблицаРасчеты.Колонки.Добавить("ПорядокЗачетаПоДатеПлатежа", Новый ОписаниеТипов("Строка"));
	
	ВидТипДокумента = ОперативныеВзаиморасчетыСервер.ВидТипДокумента(ТипДокумента);
	
	ЕстьДатаПлатежа = ТаблицаРасчеты.Колонки.Найти("ДатаПлатежа") <> Неопределено;
	ЕстьСумма = ТаблицаРасчеты.Колонки.Найти("Сумма") <> Неопределено;
	ЕстьКОплате = ТаблицаРасчеты.Колонки.Найти("КОплате") <> Неопределено;
	ЕстьКОтгрузке = ТаблицаРасчеты.Колонки.Найти("КОтгрузке") <> Неопределено;
	
	Для Каждого Стр Из ТаблицаРасчеты Цикл
		
		ДатаПлатежа = ?(ЕстьДатаПлатежа И ЗначениеЗаполнено(Стр.ДатаПлатежа), Стр.ДатаПлатежа, Стр.ДатаРегистратора);
		
		//План оплаты
		Если (НЕ ЕстьСумма ИЛИ Стр.Сумма = 0) И Стр.КОплате <> 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаРегистратора, Стр.НомерРегистратора, ВидТипДокумента);
			Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(ДатаПлатежа, Стр.НомерРегистратора, ВидТипДокумента);
		//Платежные документы и сторно отгрузки.
		ИначеЕсли Стр.ВидДвижения = ВидДвиженияНакопления.Расход И ЕстьСумма И  Стр.Сумма > 0
			Или Стр.ВидДвижения = ВидДвиженияНакопления.Приход И ЕстьСумма И Стр.Сумма < 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.Период, Стр.НомерРегистратора, ВидТипДокумента);
			Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
		//Накладные и пр.
		ИначеЕсли ЕстьСумма И Стр.Сумма <> 0 ИЛИ ЕстьКОплате И Стр.КОплате <> 0 ИЛИ ЕстьКОтгрузке И Стр.КОтгрузке <> 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаРегистратора, Стр.НомерРегистратора,,
				ТипДокумента, Стр.ВидДвижения);
			Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(ДатаПлатежа,
				Стр.НомерРегистратора,, ТипДокумента, Стр.ВидДвижения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗаполнитьПорядокРасчетовСПоставщиками(ТаблицаРасчеты, ТипДокумента) Экспорт
	
	ТаблицаРасчеты.Колонки.Добавить("ПорядокОперации",            Новый ОписаниеТипов("Строка"));
	ТаблицаРасчеты.Колонки.Добавить("ПорядокЗачетаПоДатеПлатежа", Новый ОписаниеТипов("Строка"));
	
	ВидТипДокумента = ОперативныеВзаиморасчетыСервер.ВидТипДокумента(ТипДокумента);
	
	ЕстьДатаПлатежа = ТаблицаРасчеты.Колонки.Найти("ДатаПлатежа") <> Неопределено;
	ЕстьСумма = ТаблицаРасчеты.Колонки.Найти("Сумма") <> Неопределено;
	ЕстьКОплате = ТаблицаРасчеты.Колонки.Найти("КОплате") <> Неопределено;
	ЕстьКПоступлению = ТаблицаРасчеты.Колонки.Найти("КПоступлению") <> Неопределено;
	
	Для Каждого Стр Из ТаблицаРасчеты Цикл
		
		ДатаПлатежа = ?(ЕстьДатаПлатежа И ЗначениеЗаполнено(Стр.ДатаПлатежа), Стр.ДатаПлатежа, Стр.ДатаРегистратора);
		
		Если (НЕ ЕстьСумма ИЛИ Стр.Сумма = 0) И Стр.КОплате <> 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаРегистратора, Стр.НомерРегистратора, ВидТипДокумента);
			Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(ДатаПлатежа, Стр.НомерРегистратора, ВидТипДокумента);
		ИначеЕсли Стр.ВидДвижения = ВидДвиженияНакопления.Приход И ЕстьСумма И Стр.Сумма > 0
			Или Стр.ВидДвижения = ВидДвиженияНакопления.Расход И ЕстьСумма И Стр.Сумма < 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.Период, Стр.НомерРегистратора, ВидТипДокумента);
			Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
		ИначеЕсли ЕстьСумма И Стр.Сумма <> 0 ИЛИ ЕстьКОплате И Стр.КОплате <> 0 ИЛИ ЕстьКПоступлению И Стр.КПоступлению <> 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаРегистратора, Стр.НомерРегистратора,,
				ТипДокумента, Стр.ВидДвижения);
			Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(ДатаПлатежа,
				Стр.НомерРегистратора,, ТипДокумента, Стр.ВидДвижения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТестЗапросаРаспределениеРасчетовСКлиентами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц КАК Месяц,
	|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
	|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
	|	ВЫБОР КОГДА &НовыеРасчеты
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Таблица.Документ
	|	КОНЕЦ								 КАК Документ,
	|	Таблица.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов) КАК Операция
	|ИЗ РасчетыСКлиентамиИзменения КАК Таблица
	|ГДЕ
	|	Таблица.Сумма <> 0 ИЛИ Таблица.СуммаРегл <> 0 ИЛИ Таблица.СуммаУпр <> 0
	|";
	Возврат ТекстЗапроса
КонецФункции

Функция ТестЗапросаРаспределениеРасчетовСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц КАК Месяц,
	|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
	|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
	|	ВЫБОР КОГДА &НовыеРасчеты
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Таблица.Документ
	|	КОНЕЦ								 КАК Документ,
	|	Таблица.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов) КАК Операция
	|ИЗ РасчетыСПоставщикамиИзменения КАК Таблица
	|ГДЕ
	|	Таблица.Сумма <> 0 ИЛИ Таблица.СуммаРегл <> 0 ИЛИ Таблица.СуммаУпр <> 0
	|";
	Возврат ТекстЗапроса
КонецФункции

Процедура ПроверитьЗаполнитьАналитикуУчетаПоПартнерам(ТаблицаДвижений)
	
	Если ТаблицаДвижений.Колонки.Найти("Партнер") = Неопределено 
		ИЛИ ТаблицаДвижений.Колонки.Найти("Организация") = Неопределено 
		ИЛИ ТаблицаДвижений.Колонки.Найти("Контрагент") = Неопределено 
		ИЛИ ТаблицаДвижений.Колонки.Найти("Договор") = Неопределено 
		ИЛИ ТаблицаДвижений.Колонки.Найти("НаправлениеДеятельности") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоляАналитики = "Партнер, Организация, Контрагент, Договор, НаправлениеДеятельности";
	ТаблицаНайденнойАналитики = ТаблицаДвижений.Скопировать(,ПоляАналитики); // ТаблицаЗначений
	ТаблицаНайденнойАналитики.Очистить();
	ТаблицаНайденнойАналитики.Колонки.Добавить("АналитикаУчетаПоПартнерам", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам"));
	ПараметрыАналитики = Новый Структура(ПоляАналитики);
	
	Для Каждого Запись Из ТаблицаДвижений Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.АналитикаУчетаПоПартнерам) Тогда
			
			ЗаполнитьЗначенияСвойств(ПараметрыАналитики, Запись);
			Если НЕ ЗначениеЗаполнено(ПараметрыАналитики.Договор) Тогда
				Если ТипЗнч(ПараметрыАналитики.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					ПараметрыАналитики.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				ИначеЕсли ТипЗнч(ПараметрыАналитики.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					ПараметрыАналитики.Договор = Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			
			СтрокиАналитики = ТаблицаНайденнойАналитики.НайтиСтроки(ПараметрыАналитики);
			Если СтрокиАналитики.Количество() > 0 Тогда
				Запись.АналитикаУчетаПоПартнерам = СтрокиАналитики[0].АналитикаУчетаПоПартнерам;
			Иначе
				Запись.АналитикаУчетаПоПартнерам = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(ПараметрыАналитики);
				НовСтр = ТаблицаНайденнойАналитики.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Запись);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныПолейДляОтчетов

Функция ШаблонПоляОтгруженоКлиенту() Экспорт
	
	Возврат "ВЫБОР
	|		//Корректировка задолженности всегда отображается только по отгружено.
	|		//Возврат оплаты клиенту отражаем как отгрузку
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|																ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|																ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту),
	|																ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
	|			ТОГДА -ДолгРегл + ПредоплатаРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|			ТОГДА ДолгРегл - ПредоплатаРегл
	|		//Обычная отгрузка, долг всегда есть
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОПерации.ВзаимозачетЗадолженности))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Функция ШаблонПоляЗачтеноКлиенту() Экспорт
	
	Возврат "ВЫБОР
	|		//Перенос аванса с объекта расчетов платежки и взаимозачет
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|			ТОГДА -РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ПредоплатаРегл - РасчетыПоСрокам.ДолгРегл
	|		//Обычный зачет аванса
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту))
	|			ТОГДА -РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Функция ШаблонПоляОплаченоКлиентом() Экспорт
	
	Возврат "ВЫБОР
	|		//Обычная оплата
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ПредоплатаРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Функция ШаблонПоляПоставленоПоставщиком() Экспорт
	
	Возврат "ВЫБОР
	|		//Корректировка задолженности всегда отображается только по отгружено
	|		//Возврат оплаты от поставщика отражаем как поставку
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
	|			ТОГДА -ДолгРегл + ПредоплатаРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|			ТОГДА ДолгРегл - ПредоплатаРегл
	|		//Обычная отгрузка, долг всегда есть
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОПерации.ВзаимозачетЗадолженности))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Функция ШаблонПоляЗачтеноПоставщиком() Экспорт
	
	Возврат "ВЫБОР
	|		//Перенос аванса с объекта расчетов платежки и взаимозачет
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|			ТОГДА -РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ПредоплатаРегл - РасчетыПоСрокам.ДолгРегл
	|		//Обычный зачет аванса
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту))
	|			ТОГДА -РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Функция ШаблонПоляОплаченоПоставщику() Экспорт
	
	Возврат "ВЫБОР
	|		//Обычная оплата
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ПредоплатаРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Функция ШаблонПоляСписаниеПереоценкаЗадолженности() Экспорт
	
	Возврат "ВЫБОР
	|		//Обычная оплата
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА ВЫБОР КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыПоСрокам.ДолгРегл - РасчетыПоСрокам.ПредоплатаРегл
	|				ИНАЧЕ РасчетыПоСрокам.ДолгРегл + РасчетыПоСрокам.ПредоплатаРегл
	|			КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

// Параметры:
// 	ТекстЗапроса - Строка -
// 	НастройкиОтчета - НастройкиКомпоновкиДанных - 
// 	ВычисляемыеПоля - ВычисляемыеПоляСхемыКомпоновкиДанных -
// 	ИмяТаблицы - Строка -
Процедура ДобавитьОтборыВыбранныхПолейВЗапрос(ТекстЗапроса, НастройкиОтчета, ВычисляемыеПоля, ИмяТаблицы) Экспорт
	
	ТекстОтборов = "";
	
	МассивВыбранныхПолей = Новый Массив;
	НайтиВыбранныеПоляРекурсивно(НастройкиОтчета.Выбор.Элементы, МассивВыбранныхПолей);
	
	Для Каждого ВыбранноеПоле Из МассивВыбранныхПолей Цикл
		Если ВычисляемыеПоля.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
			Если СтрНайти(Строка(ВыбранноеПоле.Поле),"ПользовательскиеПоля") = 0 Тогда
				ТекстОтборов = ТекстОтборов + ?(ТекстОтборов = "","", "ИЛИ") +"
					|	СУММА("+ИмяТаблицы+"." + Строка(ВыбранноеПоле.Поле) + ") <> 0 ";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборыВыбранныхПолей", ?(ТекстОтборов = "", "ИСТИНА", ТекстОтборов));
	
КонецПроцедуры

Процедура НайтиВыбранныеПоляРекурсивно(КоллекцияЭлементов, МассивЭлементов)

	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если Элемент.Использование Тогда
				МассивЭлементов.Добавить(Элемент);
			КонецЕсли;
		Иначе
			НайтиВыбранныеПоляРекурсивно(Элемент.Элементы, МассивЭлементов);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ФормированиеЗаданийКЗакрытиюМесяцаСлужебные

Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос)
	
	СоответствиеЗаданий = Новый Соответствие();
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		СоответствиеЗаданий.Вставить("РасчетыСКлиентамиИзменения", ТекстЗапросаРасчетыСКлиентами(Запрос));
		СоответствиеЗаданий.Вставить("РасчетыСПоставщикамиИзменения", ТекстЗапросаРасчетыСПоставщиками(Запрос));
		СоответствиеЗаданий.Вставить("СуммыДокументовВВалютахУчетаИзменения", ТекстЗапросаСуммыДокументовВВалютахУчета(Запрос));
	КонецЕсли;
	Возврат СоответствиеЗаданий;
	
КонецФункции

#Область ТекстыЗапросовЗаданийКЗакрытиюМесяца

Функция ТекстЗапросаРасчетыСКлиентами(Запрос) Экспорт
	
	Если НЕ Запрос.Параметры.Свойство("НовыеРасчеты") Тогда
		Запрос.УстановитьПараметр("НовыеРасчеты", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов) КАК Операция,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Документ Документ
	|ИЗ
	|	РасчетыСКлиентамиИзменения КАК Таблица
	|ГДЕ
	|	Таблица.Сумма <> 0 ИЛИ Таблица.СуммаРегл <> 0 ИЛИ Таблица.СуммаУпр <> 0
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаРасчетыСПоставщиками(Запрос) Экспорт
	
	Если НЕ Запрос.Параметры.Свойство("НовыеРасчеты") Тогда
		Запрос.УстановитьПараметр("НовыеРасчеты", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов) КАК Операция,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Документ КАК Документ
	|ИЗ
	|	РасчетыСПоставщикамиИзменения КАК Таблица
	|ГДЕ
	|	Таблица.Сумма <> 0 ИЛИ Таблица.СуммаРегл <> 0 ИЛИ Таблица.СуммаУпр <> 0
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаСуммыДокументовВВалютахУчета(Запрос) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов) КАК Операция,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Документ КАК Документ
	|ИЗ
	|	СуммыДокументовВВалютахУчетаИзменения КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Модульность

#Область Общее

Процедура ДополнитьИЗакэшироватьПараметры(Форма, ПараметрыЗаполнения) 
	
	ДанныеНастройки = ДополненныеПараметрыМеханизма(Форма, ПараметрыЗаполнения);
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "Взаиморасчеты", ДанныеНастройки);
	
КонецПроцедуры

Процедура ПроверитьПараметры(СтруктураПараметров, ОбязательныеПараметры)
	
	Параметры = СтрРазделить(ОбязательныеПараметры, ",");
	Для Каждого Параметр Из Параметры Цикл
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров[СокрЛП(Параметр)]) Тогда
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В модуле менеджера документа не заполнен путь к необходимому параметру %1';uk='У модулі менеджера документа не заповнений шлях до необхідного параметру %1'"),
				СокрЛП(Параметр)))
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапроса(Запрос) 
	
	Если НЕ Запрос.Параметры.Свойство("ВалютаРегламентированногоУчета") Тогда
		Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	КонецЕсли; 
	
	Если НЕ Запрос.Параметры.Свойство("ВалютаУправленческогоУчета") Тогда
		Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	КонецЕсли;
	
КонецПроцедуры

//Очищает табличные части этапов графика оплат.
Процедура ОчиститьЭтапыГрафикаОплаты(Объект, СтруктураПараметров)
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
		ЭтапыГрафикаОплаты = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
		ЭтапыГрафикаОплаты.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) Тогда
		Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ДатаПлатежа);
		Реквизит.Данные[Реквизит.Имя] = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

//Очищает суммы взаиморасчетов в табличной части документа
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки.
// 	ПутьКДаннымТЧ - Строка - Путь к данным табличной части, в которой требуется очистить сумму взаиморасчетов.
//
Процедура ОчиститьСуммыВзаиморасчетовТЧ(Объект, СтруктураПараметров)
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		Возврат;
	КонецЕсли;
	
	ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ);
	
	Если ТЧ.Количество() > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧ[0], "СуммаВзаиморасчетов") Тогда
		ЕстьНДС = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧ[0], "СуммаНДСВзаиморасчетов");
		
		Для Каждого Стр Из ТЧ Цикл
			Стр.СуммаВзаиморасчетов = 0;
			Если ЕстьНДС Тогда
				Стр.СуммаНДСВзаиморасчетов = 0;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Очищает определенные поля этапов графика оплаты.
Процедура ОчиститьПоляЭтаповГрафикаОплаты(Форма, СтруктураПараметров, МассивПолейОчистки)
	
	ЭтапыГрафикаОплаты = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	
	Если ЭтапыГрафикаОплаты = Неопределено 
		ИЛИ ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивИмеющихсяПолей = Новый Массив;
	Для Каждого Поле Из МассивПолейОчистки Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0], Поле) Тогда
			МассивИмеющихсяПолей.Добавить(Поле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из ЭтапыГрафикаОплаты Цикл
		Для Каждого Поле Из МассивИмеющихсяПолей Цикл
			Стр[Поле] = 0;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

//Очищает расшифровку платежа
Процедура ОчиститьРасшифровкуПлатежа(Объект, СтруктураПараметров)
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
	
	Если СтруктураПараметров.ЭтоПродажаЗакупка Тогда
		РасшифровкаПлатежа.Очистить();
	Иначе
		Для Каждого Стр Из РасшифровкаПлатежа Цикл
			Стр.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьОбъектИСуммуРасшифровкиПлатежа(Объект, СтруктураПараметров)
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
	Для Каждого Стр Из РасшифровкаПлатежа Цикл
		Стр.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		Стр.СуммаВзаиморасчетов = 0;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Стр, "ВалютаВзаиморасчетов") Тогда
			Стр.ВалютаВзаиморасчетов = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		КонецЕсли
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбновитьРаспределеннуюСуммаРасшифровки(Объект);
	КонецЕсли;
	
КонецПроцедуры

//Очищает ссылки на справочник Объекты расчетов.
Процедура ОчиститьОбъектРасчетов(Объект, СтруктураПараметров)
	
	РеквизитОбъектРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ОбъектРасчетов);
	ЧислоВхождений = СтрЧислоВхождений(СтруктураПараметров.ОбъектРасчетов, ".");
	
	Если ЧислоВхождений = 0 Тогда
		Возврат;
	ИначеЕсли ЧислоВхождений = 1 Тогда
		РеквизитОбъектРасчетов.Данные[РеквизитОбъектРасчетов.Имя] = Справочники.ОбъектыРасчетов.ПустаяСсылка();
	Иначе 
		Для Каждого СтрокаТЧ Из РеквизитОбъектРасчетов.Данные Цикл
			СтрокаТЧ[РеквизитОбъектРасчетов.Имя] = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция КоэффициентПоКурсуИКратности(СистемныеНастройки, Валюта, ВалютаВзаиморасчетов, Курс, Кратность)
		
	Если Курс = 0 Или Кратность = 0 Тогда
		Возврат 0;
	ИначеЕсли Валюта = ВалютаВзаиморасчетов Тогда
		Возврат 1;
	ИначеЕсли НЕ ВалютаВзаиморасчетов = СистемныеНастройки.ВалютаРегламентированногоУчета
			И Валюта = СистемныеНастройки.ВалютаРегламентированногоУчета Тогда
		Возврат Кратность / Курс;
	Иначе
		Возврат Курс * Кратность;
	КонецЕсли;
	
КонецФункции

Функция МассивСтруктурПараметровПоРеквизитам(МассивПараметров, ИменаРеквизитов)
	Если ТипЗнч(ИменаРеквизитов) = Тип("Массив") Тогда
		Реквизиты = ИменаРеквизитов;
	Иначе
		Реквизиты = Новый Массив;
		Реквизиты.Добавить(ИменаРеквизитов);
	КонецЕсли;
	Результат = Новый Массив;
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		МассивНайденныхРеквизитов = Новый Массив;
		Для Каждого Реквизит Из Реквизиты Цикл
			Если СтруктураПараметров.ИспользуемыеРеквизиты["Объект."+Реквизит] <> Неопределено Тогда
				МассивНайденныхРеквизитов.Добавить(СтруктураПараметров.ИспользуемыеРеквизиты["Объект."+Реквизит]);
			КонецЕсли;
		КонецЦикла;
		Если МассивНайденныхРеквизитов.Количество() > 0 Тогда
			СтруктураРезультата = Новый Структура;
			СтруктураРезультата.Вставить("СтруктураПараметров", СтруктураПараметров);
			СтруктураРезультата.Вставить("ИспользуемыеРеквизиты", МассивНайденныхРеквизитов);
			Результат.Добавить(СтруктураРезультата);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Параметры:
// 	Объект - СправочникОбъект, ДокументОбъект - Описание
// 	СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма
// 	СистемныеНастройки - Структура - Описание
Процедура ПроверитьЗаполнитьСуммуВзаиморасчетов(Объект, СтруктураПараметров, СистемныеНастройки)
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.СуммаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("СуммаВзаиморасчетов", 0);
	
	СуммаВзаиморасчетовРеквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.СуммаВзаиморасчетов);
	СуммаВзаиморасчетовПоТареРеквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.СуммаВзаиморасчетовПоТаре);
	
	Курс                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Курс);
	Кратность            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Кратность);
	ВалютаДокумента      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента);
	ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаВзаиморасчетов);
	Ссылка               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка);
	
	КоэффициентПересчета = КоэффициентПоКурсуИКратности(СистемныеНастройки,
																		ВалютаДокумента,
																		ВалютаВзаиморасчетов,
																		Курс,
																		Кратность);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		
		ТаблицаТовары = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ).Выгрузить();
		СуммаДокумента = ТаблицаТовары.Итог(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС);
		Если ТаблицаТовары.Количество() = 0 ИЛИ НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТаблицаТовары[0], "СуммаВзаиморасчетов") Тогда
			СуммаВзаиморасчетовПоТаре = 0;
			СуммаВзаиморасчетов = СуммаДокумента;
		Иначе
			Если ТаблицаТовары.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				Если ТаблицаТовары.Колонки.Найти("СуммаВзаиморасчетовПоТаре") <> Неопределено Тогда
					СуммаВзаиморасчетовПоТаре = ТаблицаТовары.Итог("СуммаВзаиморасчетовПоТаре");
				Иначе
					СуммаВзаиморасчетовПоТаре = 0;
				КонецЕсли;
				СуммаВзаиморасчетов       = ТаблицаТовары.Итог("СуммаВзаиморасчетов") + СуммаВзаиморасчетовПоТаре;
			Иначе
				
				Если ЗначениеЗаполнено(СтруктураПараметров.ИмяРеквизитаТЧЗаказ) ИЛИ ЗначениеЗаполнено(СтруктураПараметров.СуммаЗалогаЗаТаруФорма) Тогда
					ТаблицаТоварыЗалог = ПолучитьИзВременногоХранилища(Объект.ПоместитьСуммыПоЗаказамВоВременноеХранилище());
					СуммаВзаиморасчетовПоТаре   = Окр(ТаблицаТоварыЗалог.Итог("СуммаЗалогаЗаТару") * КоэффициентПересчета, 2);
				Иначе
					СуммаВзаиморасчетовПоТаре = 0;
				КонецЕсли;
					
				СуммаВзаиморасчетов         = Окр(ТаблицаТовары.Итог(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС) * КоэффициентПересчета, 2) + СуммаВзаиморасчетовПоТаре;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		СуммаДокумента       = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаДокумента);
		СуммаВзаиморасчетов = Окр(СуммаДокумента * КоэффициентПересчета, 2);
		СуммаВзаиморасчетовПоТаре = 0;
		
	КонецЕсли;
	
	СуммаВзаиморасчетовРеквизит.Данные[СуммаВзаиморасчетовРеквизит.Имя] = СуммаВзаиморасчетов;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаНДСВзаиморасчетов", Ссылка.Метаданные()) Тогда
		Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, "Объект.СуммаНДСВзаиморасчетов");
		СтавкаНДС = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.СтавкаНДС");
		Реквизит.Данные[Реквизит.Имя] = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаВзаиморасчетов, СтавкаНДС);
	КонецЕсли;
	
	Если СуммаВзаиморасчетовПоТареРеквизит <> Неопределено Тогда
		СуммаВзаиморасчетовПоТареРеквизит.Данные[СуммаВзаиморасчетовПоТареРеквизит.Имя] = СуммаВзаиморасчетовПоТаре;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьСуммыВзаиморасчетовВТабличнойЧасти(Объект, СтруктураПараметров, СистемныеПараметры)
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) ИЛИ Не ЗначениеЗаполнено(СтруктураПараметров.СуммаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	ВзаиморасчетыКлиентСервер.ПроверитьОбязательныеПараметры(СтруктураПараметров, "ПутьКДаннымТЧ, Курс, Кратность, СуммаВзаиморасчетов,
		| ВалютаДокумента, ВалютаВзаиморасчетов, ИмяРеквизитаТЧСуммаСНДС");
	
	ДанныеТЧ             = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ);
	Курс                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Курс);
	Кратность            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Кратность);
	СуммаВзаиморасчетов  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаВзаиморасчетов);
	ВалютаДокумента      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента);
	ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаВзаиморасчетов);
	ИмяСуммаСНДС         = СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС;
	
	Если ДанныеТЧ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Колонки = ДанныеТЧ.Выгрузить().Колонки;
	ЕстьСуммаВзаиморасчетов = Колонки.Найти("СуммаВзаиморасчетов") <> Неопределено;
	ЕстьСуммаНДСВзаиморасчетов = Колонки.Найти("СуммаНДСВзаиморасчетов") <> Неопределено;
	
	Если НЕ ЕстьСуммаВзаиморасчетов Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("СуммаВзаиморасчетов", 0);
	
	СуммаВзаиморасчетовТЧПлюс  = 0;
	СуммаВзаиморасчетовТЧМинус = 0;
	СуммаПлюс                  = 0;
	СуммаМинус                 = 0;
	
	Для Каждого Стр Из ДанныеТЧ Цикл
		Если Стр[ИмяСуммаСНДС] > 0 Тогда
			СуммаПлюс = СуммаПлюс + Стр[ИмяСуммаСНДС];
			Если ЗначениеЗаполнено(Стр.СуммаВзаиморасчетов) Тогда
				СуммаВзаиморасчетовТЧПлюс = СуммаВзаиморасчетовТЧПлюс + Стр.СуммаВзаиморасчетов;
			КонецЕсли;
		Иначе
			СуммаМинус = СуммаМинус + Стр[ИмяСуммаСНДС];
			Если ЗначениеЗаполнено(Стр.СуммаВзаиморасчетов) Тогда
				СуммаВзаиморасчетовТЧМинус = СуммаВзаиморасчетовТЧМинус + Стр.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СуммаВзаиморасчетовПоТЧ = ДанныеТЧ.Итог("СуммаВзаиморасчетов");
	
	Если ДанныеТЧ.НайтиСтроки(СтруктураПоиска).Количество() = 0
		И СуммаВзаиморасчетов = СуммаВзаиморасчетовПоТЧ Тогда
		Возврат;
	ИначеЕсли СуммаПлюс = 0 
			И СуммаМинус = 0 Тогда
		ОчиститьСуммыВзаиморасчетовТЧ(Объект, СтруктураПараметров);
		Возврат;
	КонецЕсли;
	
	Если ВалютаДокумента = ВалютаВзаиморасчетов Тогда
		
		Для Индекс = 0 По ДанныеТЧ.Количество()-1 Цикл
			Если Не ЗначениеЗаполнено(ДанныеТЧ[Индекс].СуммаВзаиморасчетов)
			 ИЛИ ДанныеТЧ[Индекс].СуммаВзаиморасчетов <> ДанныеТЧ[Индекс][ИмяСуммаСНДС] Тогда
				ДанныеТЧ[Индекс].СуммаВзаиморасчетов = ДанныеТЧ[Индекс][ИмяСуммаСНДС];
				Если ЕстьСуммаНДСВзаиморасчетов Тогда
					ДанныеТЧ[Индекс].СуммаНДСВзаиморасчетов = ДанныеТЧ[Индекс].СуммаНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		КоэффициентПересчета = КоэффициентПоКурсуИКратности(СистемныеПараметры,
																		ВалютаДокумента,
																		ВалютаВзаиморасчетов,
																		Курс,
																		Кратность); 
		
		// Сумму, которая должна быть распределена по табличной части,
		// 		получим из разности общей суммы взаиморасчетов
		// 		и итога по заполненным значениям колонки "СуммаВзаиморасчетов".
		СуммаВзаиморасчетовКРаспределениюПлюс = Окр(СуммаПлюс*КоэффициентПересчета, 2) - СуммаВзаиморасчетовТЧПлюс;
		СуммаВзаиморасчетовКРаспределениюМинус = Окр(СуммаМинус*КоэффициентПересчета, 2) - СуммаВзаиморасчетовТЧМинус;
		
		//Распределяем положильное отклонение.
		МассивСумм = Новый Массив;
		Для Индекс = 0 По ДанныеТЧ.Количество()-1 Цикл
			Если Не ЗначениеЗаполнено(ДанныеТЧ[Индекс].СуммаВзаиморасчетов) И ДанныеТЧ[Индекс][ИмяСуммаСНДС] > 0 Тогда
				МассивСумм.Добавить(Окр(ДанныеТЧ[Индекс][ИмяСуммаСНДС] * КоэффициентПересчета, 2));
			КонецЕсли;
		КонецЦикла;
		
		МассивСумм = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаВзаиморасчетовКРаспределениюПлюс, МассивСумм);
		
		ИндексМассиваСумм = 0;
		Если МассивСумм <> Неопределено Тогда
			Для Индекс=0 По ДанныеТЧ.Количество()-1 Цикл
				Если Не ЗначениеЗаполнено(ДанныеТЧ[Индекс].СуммаВзаиморасчетов) И ДанныеТЧ[Индекс][ИмяСуммаСНДС] > 0 Тогда
					ДанныеТЧ[Индекс].СуммаВзаиморасчетов = МассивСумм[ИндексМассиваСумм];
					Если ЕстьСуммаНДСВзаиморасчетов Тогда
						ДанныеТЧ[Индекс].СуммаНДСВзаиморасчетов = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ДанныеТЧ[Индекс].СуммаВзаиморасчетов, ДанныеТЧ[Индекс].СтавкаНДС);
					КонецЕсли;
					ИндексМассиваСумм = ИндексМассиваСумм + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Распределяем отрицательное отклонение.
		МассивСумм = Новый Массив;
		Для Индекс = 0 По ДанныеТЧ.Количество()-1 Цикл
			Если Не ЗначениеЗаполнено(ДанныеТЧ[Индекс].СуммаВзаиморасчетов) И ДанныеТЧ[Индекс][ИмяСуммаСНДС] < 0 Тогда
				МассивСумм.Добавить(Окр(ДанныеТЧ[Индекс][ИмяСуммаСНДС] * КоэффициентПересчета, 2));
			КонецЕсли;
		КонецЦикла;
		
		МассивСумм = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаВзаиморасчетовКРаспределениюМинус, МассивСумм);
		
		ИндексМассиваСумм = 0;
		Если МассивСумм <> Неопределено Тогда
			Для Индекс=0 По ДанныеТЧ.Количество()-1 Цикл
				Если Не ЗначениеЗаполнено(ДанныеТЧ[Индекс].СуммаВзаиморасчетов) И ДанныеТЧ[Индекс][ИмяСуммаСНДС] < 0 Тогда
					ДанныеТЧ[Индекс].СуммаВзаиморасчетов = МассивСумм[ИндексМассиваСумм];
					Если ЕстьСуммаНДСВзаиморасчетов Тогда
						ДанныеТЧ[Индекс].СуммаНДСВзаиморасчетов = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ДанныеТЧ[Индекс].СуммаВзаиморасчетов, ДанныеТЧ[Индекс].СтавкаНДС);
					КонецЕсли;
					ИндексМассиваСумм = ИндексМассиваСумм + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаПриЧтенииСозданииНаСервере(Форма, ПараметрыМеханизма)
	
	ВзаиморасчетыВызовСервера.ОбновитьТекстГиперссылкиОграничениеЗадолженности(Форма);
	УстановитьВидимостьЗачетОплаты(Форма);
	УстановитьВидимостьГФУ(Форма);
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиЭтапыОплаты(Форма);
	ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма);
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма);
	ОбновитьРаспределеннуюСуммаРасшифровки(Форма);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма)
	
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.СуммаВзаиморасчетовТЧ) ИЛИ Не ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов) Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(СтруктураПараметров.ЭлементыФормы.СуммаВзаиморасчетовТЧ);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтруктураПараметров.ВалютаДокумента);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(СтруктураПараметров.ВалютаВзаиморасчетов);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЗаполнить(Объект, СтруктураПараметров, ДанныеЗаполнения, ИмяПараметра, ЗначениеПоУмолчанию)
	
	Если ЗначениеЗаполнено(СтруктураПараметров[ИмяПараметра]) 
		И ТипЗнч(СтруктураПараметров[ИмяПараметра]) = Тип("Строка")
		И СтрЧислоВхождений(СтруктураПараметров[ИмяПараметра], ".") = 1 Тогда
		Реквизит = СтрРазделить(СтруктураПараметров[ИмяПараметра],".")[1];
		
		РеквизитВДанных = Неопределено;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство(Реквизит) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения[Реквизит]) Тогда
				ДанныеЗаполнения[Реквизит] = ЗначениеПоУмолчанию;
			Иначе
				РеквизитВДанных = ДанныеЗаполнения[Реквизит];
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитВДанных) Тогда
			ПроверитьЗаполнитьРеквизит(Объект, СтруктураПараметров, ИмяПараметра, ЗначениеПоУмолчанию);
		Иначе
			ПроверитьЗаполнитьРеквизит(Объект, СтруктураПараметров, ИмяПараметра, РеквизитВДанных);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеЭтаповГрафикаОплаты(Объект, Отказ, МассивИлиСтруктура = Неопределено, СистемныеНастройки = Неопределено)
	
	Если МассивИлиСтруктура <> Неопределено И СистемныеНастройки <> Неопределено ИЛИ ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") Тогда
		ДополненныеПараметрыМеханизма = ДополненныеПараметрыМеханизма(Объект, МассивИлиСтруктура);
	Иначе
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Объект, "Взаиморасчеты");
		СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		ЗаданГрафикИсполнения     = СтруктураПараметров.ЗаданГрафикИсполнения;
		ПорядокРасчетов           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
		ДатаПлатежа               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаПлатежа);
		Дата                      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) 
			И Не ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) 
			ИЛИ НЕ СтруктураПараметров.ИзменяетПланОплаты
			ИЛИ (ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") И СтруктураПараметров.ЭтоЗаказ)
			ИЛИ (ЗаданГрафикИсполнения И ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов") И СтруктураПараметров.ЭтоЗаказ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") И ЗначениеЗаполнено(СтруктураПараметров.СуммаДокументаФорма) Тогда
			СуммаЗалогаЗаТару       = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаЗалогаЗаТаруФорма);
			СуммаДокументаБезЗалога = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаДокументаФорма) - СуммаЗалогаЗаТару;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
			
			ТаблицаТовары = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ);
			
			Если (ЗначениеЗаполнено(СтруктураПараметров.ИмяРеквизитаТЧЗаказ)
				 ИЛИ ЗначениеЗаполнено(СтруктураПараметров.СуммаЗалогаЗаТаруФорма))Тогда
				ТаблицаТоварыЗалог = ПолучитьИзВременногоХранилища(Объект.ПоместитьСуммыПоЗаказамВоВременноеХранилище());
				СуммаЗалогаЗаТару            = ТаблицаТоварыЗалог.Итог("СуммаЗалогаЗаТару");
				СуммаДокументаБезЗалога      = ТаблицаТоварыЗалог.Итог("СуммаПлатежа");
			Иначе
				СуммаЗалогаЗаТару = 0;
				СуммаДокументаБезЗалога      = ТаблицаТовары.Итог(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС) - СуммаЗалогаЗаТару;
			КонецЕсли;
			
		Иначе
			СуммаЗалогаЗаТару            = 0;
			СуммаДокументаБезЗалога      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаДокумента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
			
			ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты).ВыгрузитьКолонки(); // ТаблицаЗначений
			УчитыватьВариантОплаты = ТЧ.Колонки.Найти("ВариантОплаты") <> Неопределено;
			
			Если СтруктураПараметров.ДокументРасчетовСКлиентами Тогда
				ПродажиСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(
					Объект,
					СуммаДокументаБезЗалога,
					СуммаЗалогаЗаТару,
					УчитыватьВариантОплаты,
					Отказ,
					Истина);
			Иначе
				ЗакупкиСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(
					Объект,
					СуммаДокументаБезЗалога,
					СуммаЗалогаЗаТару,
					УчитыватьВариантОплаты,
					Отказ,
					Истина);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) Тогда
			
			ЭтапыОплатыСервер.ПроверитьЗаполнениеКорректностьДатыПлатежа(ДатаПлатежа, Дата, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьРеквизит(Объект, СтруктураПараметров, ИмяРеквизита, ЗначениеПоУмолчанию)
	
	Если СтруктураПараметров[ИмяРеквизита] = "" 
		ИЛИ ТипЗнч(СтруктураПараметров[ИмяРеквизита]) <> Тип("Строка")
		ИЛИ СтрЧислоВхождений(СтруктураПараметров[ИмяРеквизита],".") <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров[ИмяРеквизита]);
	Если Не ЗначениеЗаполнено(Реквизит.Данные[Реквизит.Имя]) Тогда
		Реквизит.Данные[Реквизит.Имя] = ЗначениеПоУмолчанию; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет курс и кратность документа по умолчанию
//
// Обязательные параметры:
//	Дата
//	ВалютаДокумента
//	ВалютаВзаиморасчетов
//
Процедура ЗаполнитьКурсКратностьПоУмолчанию(Объект, ДополненныеПараметрыМеханизма)
	
	ВалютаРеглУчета = ДополненныеПараметрыМеханизма.СистемныеНастройки.ВалютаРегламентированногоУчета;
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Если СтруктураПараметров.Курс = "" Или ТипЗнч(СтруктураПараметров.Курс)<> Тип("Строка")
			Или СтруктураПараметров.Кратность = "" Или ТипЗнч(СтруктураПараметров.Кратность)<> Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверитьПараметры(СтруктураПараметров, "ВалютаДокумента,ВалютаВзаиморасчетов");
		
		Дата                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
		ВалютаДокумента      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента);
		ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаВзаиморасчетов);
		Курс                 = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.Курс);
		Кратность            = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.Кратность);
		
		Если Не ЗначениеЗаполнено(Дата) Тогда
			Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если ВалютаДокумента = ВалютаВзаиморасчетов 
			ИЛИ НЕ ЗначениеЗаполнено(ВалютаДокумента) 
			ИЛИ НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			
			Курс.Данные[Курс.Имя]           = 1;
			Кратность.Данные[Кратность.Имя] = 1;
			Возврат;
			
		ИначеЕсли ВалютаДокумента = ВалютаРеглУчета И НЕ ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
			
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата);
			
		ИначеЕсли НЕ ВалютаДокумента = ВалютаРеглУчета И ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
			
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			
		Иначе
			
			КурсВалютыВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата);
			КурсВалютыДокумента      = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			СтруктураКурса           = РаботаСКурсамиВалютУТ.ПолучитьКроссКурсВалют(КурсВалютыДокумента, КурсВалютыВзаиморасчетов);
			
		КонецЕсли;
		
		Курс.Данные[Курс.Имя]           = СтруктураКурса.Курс;
		Кратность.Данные[Кратность.Имя] = СтруктураКурса.Кратность;
	КонецЦикла;
	
КонецПроцедуры

//Возвращает порядок оплаты по умолчанию.
Функция ОплатаВВалютеПоУмолчанию(Объект, СтруктураПараметров, СистемныеНастройки)
	
	ФормаОплаты               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ФормаОплаты);
	БанковскийСчет            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.БанковскийСчетОрганизации);
	Касса                     = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Касса);
	ЗаказОснование            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
	Соглашение                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Соглашение);
	Договор                   = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
	
	ВалютаРегламентированногоУчета = СистемныеНастройки.ВалютаРегламентированногоУчета;
	
	ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(ФормаОплаты, БанковскийСчет, Касса);
	ОплатаВВалюте = ПолучитьОплатуВВалютеПоУмолчанию(ВалютаОплаты);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ЗаказОснование) Тогда
		ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказОснование, "ОплатаВВалюте");
	ИначеЕсли ЗначениеЗаполнено(Соглашение) Тогда
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, "ИспользуютсяДоговорыКонтрагентов, ОплатаВВалюте");
		Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(Договор) Тогда
			ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ОплатаВВалюте");
		ИначеЕсли РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Ложь Тогда
			ОплатаВВалюте = РеквизитыСоглашения.ОплатаВВалюте;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Договор) Тогда
		ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ОплатаВВалюте");
	Иначе 
		ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(ФормаОплаты, БанковскийСчет, Касса);
		Если НЕ ЗначениеЗаполнено(ВалютаОплаты) Тогда
			ВалютаОплаты = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		Если НЕ ВалютаОплаты = ВалютаРегламентированногоУчета Тогда
			ОплатаВВалюте = Истина;
		Иначе
			ОплатаВВалюте = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОплатаВВалюте;
	
КонецФункции

//Возвращает порядок расчетов по умолчанию.
Функция ПорядокРасчетовПоПараметрам(Объект, СтруктураПараметров)
	
	ЗаказОснование = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
	Соглашение     = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Соглашение);
	Договор        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
	ЭтоЗаказ       = СтруктураПараметров.ЭтоЗаказ;
	
	Возврат ПорядокРасчетов(ЭтоЗаказ, ЗаказОснование, Соглашение, Договор);
	
КонецФункции

// Проверяет является ли оповещение в форме событием изменения документов оплаты.
//
// Параметры:
//   ИмяСобытия - Строка - имя события из процедуры формы "ОбработкаОповещения".
//
// Возвращаемое значение:
//   Булево - Истина, если оповещение является оплатой.
//
Функция ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Экспорт
	
	Возврат
		ИмяСобытия = "Запись_ОперацияПоПлатежнойКарте"
		Или ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ПриходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ВзаимозачетЗадолженности"
		Или ИмяСобытия = "Запись_СписаниеЗадолженности";
	
КонецФункции

Функция ИзменилисьДокументыОплатыПоставщиком(ИмяСобытия) Экспорт
	
	Возврат
		ИмяСобытия = "Запись_АвансовыйОтчет"
		Или ИмяСобытия = "Запись_СписаниеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_РасходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ВзаимозачетЗадолженности"
		Или ИмяСобытия = "Запись_СписаниеЗадолженности";
	
КонецФункции

Функция ТаблицыИсточникиНД()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Таблица", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
	Возврат ТЗ;
КонецФункции

Функция ДобавитьИсточник(Источники, Таблица, Поле = Неопределено)
	НовСтр = Источники.Добавить();
	НовСтр.Таблица = Таблица;
	Если ЗначениеЗаполнено(Поле) Тогда
		НовСтр.Поле = Поле;
	Иначе
		НовСтр.Поле = "НаправлениеДеятельности";
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ЭтапыОплаты

// Параметры:
// 	Объект - ФормаКлиентскогоПриложения, СправочникОбъект, ДокументОбъект - Описание
// 	СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма
Процедура РаспределитьСуммыЭтаповОплатыДокументаПоЗаказам(Объект, СтруктураПараметров)
	
	ЭтапыОплатыРеквизит       = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	ЕстьТара = ЗначениеЗаполнено(СтруктураПараметров.СуммаЗалогаЗаТаруФорма) ИЛИ ЗначениеЗаполнено(СтруктураПараметров.СуммаВзаиморасчетовПоТаре);
	
	Если НЕ ЗначениеЗаполнено(ЭтапыОплатыРеквизит.Имя) Тогда
		Возврат;
	Иначе
		ЭтапыГрафикаОплаты = ЭтапыОплатыРеквизит.Данные[ЭтапыОплатыРеквизит.Имя];
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		ТипОбъект = СтрЗаменить(ОбщегоНазначения.МенеджерОбъектаПоСсылке(
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка)),"ДокументМенеджер","ДокументОбъект");
		Суммы = ПолучитьИзВременногоХранилища(ДанныеФормыВЗначение(Объект.Объект, Тип(ТипОбъект)).ПоместитьСуммыПоЗаказамВоВременноеХранилище());
	Иначе
		Суммы = ПолучитьИзВременногоХранилища(Объект.ПоместитьСуммыПоЗаказамВоВременноеХранилище());
	КонецЕсли;
	
	ТребуетсяПерезаполнение = Ложь;
	Для Каждого СтрокаЭтапов Из ЭтапыГрафикаОплаты Цикл
		СтрокиСумм = Суммы.НайтиСтроки(Новый Структура("Заказ, СверхЗаказа", СтрокаЭтапов.Заказ, СтрокаЭтапов.СверхЗаказа));
		Если СтрокиСумм.Количество() = 0 Тогда
			ТребуетсяПерезаполнение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСумм Из Суммы Цикл
		СтрокиГрафика = ЭтапыГрафикаОплаты.НайтиСтроки(Новый Структура("Заказ, СверхЗаказа", СтрокаСумм.Заказ, СтрокаСумм.СверхЗаказа));
		Если СтрокиГрафика.Количество() = 0 Тогда
			ТребуетсяПерезаполнение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяПерезаполнение Тогда
		ЗаполнитьЭтапыОплатыДокументаПоЗаказам(Объект, СтруктураПараметров);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСумм Из Суммы Цикл
		
		СуммаПлатежа              = СтрокаСумм.СуммаПлатежа;
		СуммаВзаиморасчетов       = СтрокаСумм.СуммаВзаиморасчетов;
		СуммаЗалогаЗаТару         = СтрокаСумм.СуммаЗалогаЗаТару;
		СуммаВзаиморасчетовПоТаре = СтрокаСумм.СуммаВзаиморасчетовПоТаре;
		
		ВалютыСовпадают = СуммаПлатежа = СуммаВзаиморасчетов;
		
		СтрокиГрафика = ЭтапыГрафикаОплаты.НайтиСтроки(Новый Структура("Заказ, СверхЗаказа", СтрокаСумм.Заказ, СтрокаСумм.СверхЗаказа));
		
		СуммаПроцентовПлатежа = 0;
		СуммаПроцентовЗалога = 0;
		Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
			СуммаПроцентовПлатежа = СуммаПроцентовПлатежа + СтрокаГрафика.ПроцентПлатежа;
			Если ЕстьТара Тогда
				СуммаПроцентовЗалога = СуммаПроцентовЗалога + СтрокаГрафика.ПроцентЗалогаЗаТару;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
			
			ЭтоПоследняяСтрока = СтрокаГрафика = СтрокиГрафика[СтрокиГрафика.Количество()-1];
			
			Если СуммаПлатежа <> 0 Тогда
				Если ЭтоПоследняяСтрока Тогда
					СтрокаГрафика.СуммаПлатежа = СуммаПлатежа;
				Иначе
					СтрокаГрафика.СуммаПлатежа = СтрокаГрафика.ПроцентПлатежа / СуммаПроцентовПлатежа * СуммаПлатежа;
				КонецЕсли;
				СуммаПлатежа = СуммаПлатежа - СтрокаГрафика.СуммаПлатежа;
			Иначе
				СтрокаГрафика.СуммаПлатежа = 0;
			КонецЕсли;
			
			Если СуммаВзаиморасчетов <> 0 Тогда
				Если ВалютыСовпадают Тогда
					СтрокаГрафика.СуммаВзаиморасчетов = СтрокаГрафика.СуммаПлатежа;
				ИначеЕсли ЭтоПоследняяСтрока Тогда
					СтрокаГрафика.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
				Иначе
					СтрокаГрафика.СуммаВзаиморасчетов = СтрокаГрафика.СуммаПлатежа / СтрокаСумм.СуммаПлатежа * СуммаВзаиморасчетов;
				КонецЕсли;
				СуммаВзаиморасчетов = СуммаВзаиморасчетов - СтрокаГрафика.СуммаВзаиморасчетов;
			Иначе
				СтрокаГрафика.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
			Если СуммаЗалогаЗаТару <> 0 Тогда
				Если ЭтоПоследняяСтрока Тогда
					СтрокаГрафика.СуммаЗалогаЗаТару = СуммаЗалогаЗаТару;
				Иначе
					СтрокаГрафика.СуммаЗалогаЗаТару = СтрокаГрафика.ПроцентЗалогаЗаТару / СуммаПроцентовЗалога * СуммаЗалогаЗаТару;
				КонецЕсли;
				СуммаЗалогаЗаТару = СуммаЗалогаЗаТару - СтрокаГрафика.СуммаЗалогаЗаТару;
			ИначеЕсли ЕстьТара Тогда
				СтрокаГрафика.СуммаЗалогаЗаТару = 0;
			КонецЕсли;
			
			Если СуммаВзаиморасчетовПоТаре <> 0 Тогда
				Если ВалютыСовпадают Тогда
					СтрокаГрафика.СуммаВзаиморасчетовПоТаре = СтрокаГрафика.СуммаЗалогаЗаТару;
				ИначеЕсли ЭтоПоследняяСтрока Тогда
					СтрокаГрафика.СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТаре;
				Иначе
					СтрокаГрафика.СуммаВзаиморасчетовПоТаре = СтрокаГрафика.СуммаЗалогаЗаТару / СтрокаСумм.СуммаЗалогаЗаТару * СуммаВзаиморасчетовПоТаре;
				КонецЕсли;
				СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТаре - СтрокаГрафика.СуммаВзаиморасчетовПоТаре;
			ИначеЕсли ЕстьТара Тогда
				СтрокаГрафика.СуммаВзаиморасчетовПоТаре = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет ТЧ ЭтапыГрафикаОплаты по переданной структуре параметров.
Процедура ЗаполнитьЭтапыОплатыДокументаПоЗаказам(Объект, СтруктураПараметров)
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		ТипОбъект = СтрЗаменить(ОбщегоНазначения.МенеджерОбъектаПоСсылке(
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка)),"ДокументМенеджер","ДокументОбъект");
		ТаблицаТовары = ПолучитьИзВременногоХранилища(ДанныеФормыВЗначение(Объект.Объект, Тип(ТипОбъект)).ПоместитьСуммыПоЗаказамВоВременноеХранилище());
	Иначе
		ТаблицаТовары = ПолучитьИзВременногоХранилища(Объект.ПоместитьСуммыПоЗаказамВоВременноеХранилище());
	КонецЕсли;
	
	Дата                  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
	СписокЗаказов         = ТаблицаТовары.ВыгрузитьКолонку("Заказ");
	
	ЭтапыОплатыРеквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	Если НЕ ЗначениеЗаполнено(ЭтапыОплатыРеквизит.Имя) Тогда
		Возврат;
	Иначе
		ЭтапыГрафикаОплаты = ЭтапыОплатыРеквизит.Данные[ЭтапыОплатыРеквизит.Имя];
	КонецЕсли;
	
	Если СтруктураПараметров.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом") Тогда
		ВариантОплатыСдвиг = Перечисления.ВариантыОплатыКлиентом.КредитСдвиг;
		ВариантОплатыКредит = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
	Иначе
		ВариантОплатыСдвиг = Перечисления.ВариантыОплатыПоставщику.КредитСдвиг;
		ВариантОплатыКредит = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления;
	КонецЕсли;
	
	Запрос   = Новый Запрос;
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Запрос.Текст = "
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ &ТаблицаТовары КАК ТаблицаТовары";
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.Выполнить();
	
	ТекстВТ = "
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.Ссылка КАК Заказ,
	|	ЗаказыКлиентов.Сдвиг КАК Сдвиг,
	|	ЗаказыКлиентов.ВариантОплаты КАК ВариантОплаты,
	|	ЗаказыКлиентов.ДатаПлатежа КАК ДатаПлатежа,
	|	ЗаказыКлиентов.СуммаПлатежа КАК СуммаПлатежа,
	|	ЗаказыКлиентов.СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	|	ЕСТЬNULL(ЗаказыКлиентов.Ссылка.Соглашение.ГрафикОплаты.Календарь,
	|		ЕСТЬNULL(ЗаказыКлиентов.Ссылка.Соглашение.Календарь, 
	|			ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка))) КАК Календарь
	|ПОМЕСТИТЬ ВтЭтапы
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЗаказыКлиентов
	|ГДЕ
	|	ЗаказыКлиентов.Ссылка В (&СписокЗаказов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	Заявки.Ссылка КАК Заказ,
	|	Заявки.Сдвиг КАК Сдвиг,
	|	Заявки.ВариантОплаты КАК ВариантОплаты,
	|	Заявки.ДатаПлатежа КАК ДатаПлатежа,
	|	Заявки.СуммаПлатежа КАК СуммаПлатежа,
	|	Заявки.СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	|	ЕСТЬNULL(Заявки.Ссылка.Соглашение.ГрафикОплаты.Календарь,
	|		ЕСТЬNULL(Заявки.Ссылка.Соглашение.Календарь, 
	|			ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка))) КАК Календарь
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЭтапыГрафикаОплаты КАК Заявки
	|ГДЕ
	|	Заявки.Ссылка В (&СписокЗаказов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЗаказыПоставщикам.Ссылка КАК Заказ,
	|	ЗаказыПоставщикам.Сдвиг КАК Сдвиг,
	|	ЗаказыПоставщикам.ВариантОплаты КАК ВариантОплаты,
	|	ЗаказыПоставщикам.ДатаПлатежа КАК ДатаПлатежа,
	|	ЗаказыПоставщикам.СуммаПлатежа КАК СуммаПлатежа,
	|	ЗаказыПоставщикам.СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	|	ЕСТЬNULL(ЗаказыПоставщикам.Ссылка.Соглашение.Календарь,
	|		ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)) КАК Календарь
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Ссылка В (&СписокЗаказов)";
	
	
	Запрос.Текст = ТекстВТ + "
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Заказ                                                      КАК Заказ,
	|	Заказы.СверхЗаказа                                                КАК СверхЗаказа,
	|	Заказы.СуммаПлатежа                                               КАК СуммаПлатежа,
	|	Заказы.СуммаВзаиморасчетов                                        КАК СуммаВзаиморасчетов,
	|	Заказы.СуммаЗалогаЗаТару                                          КАК СуммаЗалогаЗаТару,
	|	Заказы.СуммаВзаиморасчетовПоТаре                                  КАК СуммаВзаиморасчетовПоТаре,
	|	МАКСИМУМ(Этапы.Сдвиг)                                             КАК Сдвиг,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР КОГДА Этапы.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитСдвиг)
	|								ИЛИ Этапы.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитСдвиг)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаОтгрузки, ДЕНЬ, Этапы.Сдвиг)
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ, &ДатаОтгрузки))                                             КАК ДатаПлатежаСдвиг,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР КОГДА Этапы.ВариантОплаты <> ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитСдвиг)
	|								И Этапы.ВариантОплаты <> ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитСдвиг)
	|			ТОГДА ВЫБОР КОГДА Этапы.ДатаПлатежа < &ДатаОтгрузки ТОГДА &ДатаОтгрузки ИНАЧЕ Этапы.ДатаПлатежа КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ, &ДатаОтгрузки))                                             КАК ДатаПлатежа,
	|	ЕСТЬNULL(Этапы.Календарь, Неопределено)                           КАК Календарь
	|ИЗ ВТЗаказы КАК Заказы
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтЭтапы КАК Этапы
	|		ПО Этапы.Заказ = Заказы.Заказ
	|			И (Этапы.СуммаПлатежа > 0 И Заказы.СуммаПлатежа > 0 
	|				ИЛИ Этапы.СуммаЗалогаЗаТару > 0 И Заказы.СуммаЗалогаЗаТару > 0)
	|ГДЕ
	|	Заказы.СуммаПлатежа <> 0 ИЛИ Заказы.СуммаЗалогаЗаТару <> 0
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Заказ,
	|	Заказы.СуммаПлатежа,
	|	Заказы.СуммаВзаиморасчетов,
	|	Заказы.СуммаВзаиморасчетовПоТаре,
	|	Заказы.СуммаЗалогаЗаТару,
	|	Заказы.СверхЗаказа,
	|	ЕСТЬNULL(Этапы.Календарь, Неопределено)
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(Этапы.ДатаПлатежа)
	|";
	
	ДатаОтгрузки = ?(Дата=Дата(1,1,1), ТекущаяДатаСеанса(), Дата);
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
	УстановитьПривилегированныйРежим(Истина);
	Заказы = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЭтапыГрафикаОплаты.Очистить();
	
	Для Каждого СтрокаЗаказа Из Заказы Цикл
		НовСтр = ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрокаЗаказа);
		
		Если СтрокаЗаказа.ДатаПлатежаСдвиг > СтрокаЗаказа.ДатаПлатежа Тогда
			Если ЗначениеЗаполнено(СтрокаЗаказа.Календарь) Тогда
				НовСтр.ДатаПлатежа = КалендарныеГрафики.ДатаПоКалендарю(СтрокаЗаказа.Календарь, ДатаОтгрузки, СтрокаЗаказа.Сдвиг);
			Иначе
				НовСтр.ДатаПлатежа = СтрокаЗаказа.ДатаПлатежаСдвиг;
			КонецЕсли;
		КонецЕсли;
		
		Если НовСтр.ДатаПлатежа < НачалоДня(Дата) Тогда
			НовСтр.ДатаПлатежа = Дата;
		КонецЕсли;
		
		Если СтрокаЗаказа.ДатаПлатежаСдвиг > СтрокаЗаказа.ДатаПлатежа Тогда
			НовСтр.ВариантОплаты = ВариантОплатыСдвиг;
		Иначе
			НовСтр.ВариантОплаты = ВариантОплатыКредит;
			НовСтр.Сдвиг = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПроцентыПоСуммам(Объект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьПроцентыПоСуммам(Объект, СтруктураПараметров) 
	
	ЭтапыОплатыРеквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	Если НЕ ЗначениеЗаполнено(ЭтапыОплатыРеквизит.Имя) Тогда
		Возврат;
	Иначе
		ЭтапыГрафикаОплаты = ЭтапыОплатыРеквизит.Данные[ЭтапыОплатыРеквизит.Имя];
	КонецЕсли;
	ЕстьТара = ЗначениеЗаполнено(СтруктураПараметров.СуммаЗалогаЗаТаруФорма) ИЛИ ЗначениеЗаполнено(СтруктураПараметров.СуммаВзаиморасчетовПоТаре);
	
	СуммаПлатежей            = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
	СуммаПлатежейПоЗалогу    = ?(ЕстьТара, ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару"),0);
	
	ПоследняяСтрокаЗалога      = -1;
	
	СуммаПроцентов             = 100;
	СуммаПроцентовПоЗалогу     = ?(ЕстьТара,100,0);
	Множитель                  = ?(СуммаПлатежей<0,-1,1);
	
	Сч = 0;
	Пока Сч < ЭтапыГрафикаОплаты.Количество() Цикл
		
		Если СуммаПлатежей * Множитель > 0 Тогда
			ЭтапыГрафикаОплаты[Сч].ПроцентПлатежа = ?(Сч = ЭтапыГрафикаОплаты.Количество()-1,
																СуммаПроцентов,
																ЭтапыГрафикаОплаты[Сч].СуммаПлатежа / СуммаПлатежей * 100);
			
			СуммаПроцентов = СуммаПроцентов - ЭтапыГрафикаОплаты[Сч].ПроцентПлатежа*Множитель;
		КонецЕсли;
	
		Если ЕстьТара И ЭтапыГрафикаОплаты[Сч].СуммаЗалогаЗаТару <> 0 Тогда
			ЭтапыГрафикаОплаты[Сч].ПроцентЗалогаЗаТару = ЭтапыГрафикаОплаты[Сч].СуммаЗалогаЗаТару/СуммаПлатежейПоЗалогу*100;
			СуммаПроцентовПоЗалогу = СуммаПроцентовПоЗалогу - ЭтапыГрафикаОплаты[Сч].ПроцентЗалогаЗаТару;
			ПоследняяСтрокаЗалога = Сч;
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	Если ПоследняяСтрокаЗалога <> -1 Тогда
		ЭтапыГрафикаОплаты[ПоследняяСтрокаЗалога].ПроцентЗалогаЗаТару = 
			ЭтапыГрафикаОплаты[ПоследняяСтрокаЗалога].ПроцентЗалогаЗаТару + СуммаПроцентовПоЗалогу;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗачетОплатыРасшифровкаПлатежа

Процедура УстановитьВидимостьЗачетОплаты(Форма, СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров <> Неопределено Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СтруктураПараметров);
	Иначе
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
		МассивПараметров = ДополненныеПараметрыМеханизма.МассивПараметров;
	КонецЕсли;
	
	РольДоступна = РольДоступна("ЗачетОплаты") ИЛИ РольДоступна("ПолныеПрава");
	
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.ЗачетОплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		ПорядокРасчетов    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов);
		НакладнаяПоЗаказу  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.НакладнаяПоЗаказам, ,Ложь);
		ЭтоЗаказ           = СтруктураПараметров.ЭтоЗаказ;
		ЭтоДоговор         = СтруктураПараметров.ЭтоДоговор;
		ИмяЭлемента        = СтруктураПараметров.ЭлементыФормы.ЗачетОплаты;
		ИзменяетПланОплаты = СтруктураПараметров.ИзменяетПланОплаты;
		
		Если ЭтоЗаказ Тогда
			ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным) И РольДоступна И ИзменяетПланОплаты;
		ИначеЕсли НакладнаяПоЗаказу Тогда
			ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоЗаказамНакладным) И РольДоступна И ИзменяетПланОплаты;
		ИначеЕсли ЭтоДоговор Тогда
			ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов) И РольДоступна;
		Иначе
			ВидимостьЭлемента = РольДоступна И ИзменяетПланОплаты;
		КонецЕсли;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Видимость", ВидимостьЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьГФУ(Форма, СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров <> Неопределено Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СтруктураПараметров);
	Иначе
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
		МассивПараметров = ДополненныеПараметрыМеханизма.МассивПараметров;
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.ГруппаФинансовогоУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ПорядокРасчетов    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов);
		НакладнаяПоЗаказу  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.НакладнаяПоЗаказам, ,Ложь);
		ЭтоЗаказ           = СтруктураПараметров.ЭтоЗаказ;
		ЭтоДоговор         = СтруктураПараметров.ЭтоДоговор;
		ИмяЭлемента        = СтруктураПараметров.ЭлементыФормы.ГруппаФинансовогоУчета;
		ИзменяетПланОплаты = СтруктураПараметров.ИзменяетПланОплаты;
		
		Если ЭтоЗаказ Тогда
			ВидимостьЭлемента = ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным И ИзменяетПланОплаты;
		ИначеЕсли НакладнаяПоЗаказу Тогда
			ВидимостьЭлемента = ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным И ИзменяетПланОплаты;
		ИначеЕсли ЭтоДоговор Тогда
			ВидимостьЭлемента = Истина;
		Иначе
			ВидимостьЭлемента = ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов И ИзменяетПланОплаты;
		КонецЕсли;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Видимость", ВидимостьЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьРасшифровкуПлатежа(Объект, СтруктураПараметров, РежимЗаписи) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа)
		ИЛИ НЕ СтруктураПараметров.ИзменяетРасчеты Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежа    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа); // ТабличнаяЧасть
	Если СтруктураПараметров.Свойство("СсылкаНового") Тогда
		Ссылка                = СтруктураПараметров.СсылкаНового;
	Иначе
		Ссылка                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка);
	КонецЕсли;
	Валюта                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента);
	Дата                  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
	ЗаказОснование        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
	Договор               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
	ПорядокРасчетов       = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
	Организация           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
	ТипРасчетов           = СтруктураПараметров.ТипРасчетов;
	
	Если ПорядокРасчетов = Неопределено Тогда
		Договор = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
		Если ЗначениеЗаполнено(Договор) Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов")
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент
		И Метаданные.ОпределяемыеТипы.ОбъектРасчетовАванс.Тип.СодержитТип(ТипЗнч(Ссылка))
		И СтруктураПараметров.ИзменяетРасчеты Тогда
		
		ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
			Валюта,
			Дата,
			РасшифровкаПлатежа);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Расшифровка.ОбъектРасчетов
		|ПОМЕСТИТЬ Расшифровка
		|ИЗ &Расшифровка КАК Расшифровка
		|;
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Расшифровка
		|ГДЕ
		|	Расшифровка.ОбъектРасчетов.Объект = &Ссылка";
		Запрос.УстановитьПараметр("Расшифровка", РасшифровкаПлатежа);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		ТребуетсяОбъектРасчетов = Выборка.Следующий();
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
				ТребуетсяОбъектРасчетов = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ТребуетсяОбъектРасчетов Тогда
			Если ЗначениеЗаполнено(ЗаказОснование) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
				ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ЗаказОснование, Организация, ТипРасчетов);
				Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
						СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(Договор) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
				ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Договор, Организация, ТипРасчетов);
				Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
						СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ОбъектыРасчетов = ОбъектыРасчетовСервер.ПроверитьЗаполнитьОбъектРасчетовПоСтруктуре(Объект, СтруктураПараметров, Истина);
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Организация");
				СтруктураПоиска.Вставить("Контрагент");СтруктураПоиска.Вставить("Партнер");
				
				Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
						
						Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
							Идентификатор = СтрокаРасшифровки.ПолучитьИдентификатор();
						Иначе
							Идентификатор = СтрокаРасшифровки.НомерСтроки;
						КонецЕсли;
						
						Если СтруктураПараметров.ОрганизацияВСтроках Тогда
							СтруктураПоиска.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация, Идентификатор);
						Иначе
							СтруктураПоиска.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
						КонецЕсли;
						
						Если СтруктураПараметров.КонтрагентВСтроках Тогда
							СтруктураПоиска.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент, Идентификатор);
						Иначе
							СтруктураПоиска.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент);
						КонецЕсли;
						
						Если СтруктураПараметров.ПартнерВСтроках Тогда
							СтруктураПоиска.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер, Идентификатор);
						Иначе
							СтруктураПоиска.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер);
						КонецЕсли;
						
						СтрокаРасшифровки.ОбъектРасчетов = ОбъектыРасчетов.НайтиСтроки(СтруктураПоиска)[0].ОбъектРасчетов;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаРасшифровки, "ОснованиеПлатежа") Тогда
					СтрокаРасшифровки.ОснованиеПлатежа = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли СтруктураПараметров.ЭтоПродажаЗакупка Тогда
		
		СуммаДокумента        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаДокумента,, 0);
		СуммаВзаиморасчетов   = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаВзаиморасчетов,, 0);
		
		Если ЗначениеЗаполнено(ЗаказОснование) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
			ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ЗаказОснование, Организация, ТипРасчетов);
		ИначеЕсли ЗначениеЗаполнено(Договор) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Договор, Организация, ТипРасчетов);
		Иначе
			ОбъектРасчетов = ОбъектыРасчетовСервер.ПроверитьЗаполнитьОбъектРасчетовПоСтруктуре(Объект, СтруктураПараметров);
			Если Объект.Проведен Тогда
				Состояние = СостояниеВзаиморасчетовОбъектаРасчетов(ОбъектРасчетов, СуммаВзаиморасчетов, ТипРасчетов, Организация);
				СуммаВзаиморасчетов = ?(Состояние.СуммаОтгрузок = 0, СуммаВзаиморасчетов, Состояние.СуммаОтгрузок);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСуммыРасшифровкиНакладной(СуммаДокумента, СуммаВзаиморасчетов, РасшифровкаПлатежа, ОбъектРасчетов);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Проведение

#Область РасчетыСКлиентами

Функция ОтразитьПереносРасчетовСКлиентом(Запрос, Операция)
	
	Если НЕ Запрос.Параметры.Свойство("ОбъектРасчетовАванс") Тогда
		ОбъектРасчетовАванс = Метаданные.ОпределяемыеТипы.ОбъектРасчетовАванс.Тип.Типы();
		Запрос.УстановитьПараметр("ОбъектРасчетовАванс", ОбъектРасчетовАванс);
	КонецЕсли; 
	
	Если Операция = "Продажа" Тогда
		
		КредиторскаяЗадолженность = "ИСТИНА"; // что в источнике
		СторноИсточник = "ЛОЖЬ";
		СторноПриемник = "ЛОЖЬ";
		ЗаполнятьКорОбъект = "ИСТИНА";
		
		УсловиеОперации = "
		|	(ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
		|		ИЛИ ТаблицаРасшифровкаПлатежа.Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) 
		|			И ТИПЗНАЧЕНИЯ(ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник.Объект) = ТИПЗНАЧЕНИЯ(ТаблицаРасшифровкаПлатежа.Ссылка))";
		
		ОбъектРасчетовИсточник = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник";
		ОбъектРасчетовПриемник = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник";
		
		ПартнерИсточник = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник.Партнер";
		ОрганизацияИсточник = "ТаблицаРасшифровкаПлатежа.Организация";
		КонтрагентИсточник = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник.Контрагент";
		ДоговорИсточник = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник.Договор";
		НаправлениеДеятельностиИсточник = "ТаблицаРасшифровкаПлатежа.НаправлениеДеятельности";
		
		ПартнерПриемник = "ТаблицаРасшифровкаПлатежа.Партнер";
		ОрганизацияПриемник = "ТаблицаРасшифровкаПлатежа.Организация";
		КонтрагентПриемник = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник.Контрагент";
		ДоговорПриемник = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник.Договор";
		НаправлениеДеятельностиПриемник = "ТаблицаРасшифровкаПлатежа.НаправлениеДеятельности";
		
		ФормаОплаты = "Неопределено";
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		ОплачиваетсяИсточник = "0";
		ОплачиваетсяПриемник = "0";
		
		ДатаПлатежа = "ТаблицаРасшифровкаПлатежа.ДатаРегистратора";
		ВариантОплаты = "ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		
	ИначеЕсли Операция = "ВозвратОплатыКлиенту" Тогда
		
		КредиторскаяЗадолженность = "ЛОЖЬ";
		СторноИсточник = "ЛОЖЬ";
		СторноПриемник = "ИСТИНА";
		ЗаполнятьКорОбъект = "ЛОЖЬ";
		
		УсловиеОперации = "ИСТИНА";
		
		ОбъектРасчетовИсточник = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник";
		ОбъектРасчетовПриемник = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник";
		
		ПартнерИсточник = "ТаблицаРасшифровкаПлатежа.ПартнерИсточник";
		ОрганизацияИсточник = "ТаблицаРасшифровкаПлатежа.ОрганизацияИсточник";
		КонтрагентИсточник = "ТаблицаРасшифровкаПлатежа.Контрагент";
		ДоговорИсточник = "ТаблицаРасшифровкаПлатежа.ДоговорИсточник";
		НаправлениеДеятельностиИсточник = "ТаблицаРасшифровкаПлатежа.НаправлениеДеятельностиИсточник";
		
		ПартнерПриемник = "ТаблицаРасшифровкаПлатежа.ПартнерПриемник";
		ОрганизацияПриемник = "ТаблицаРасшифровкаПлатежа.ОрганизацияПриемник";
		КонтрагентПриемник = "ТаблицаРасшифровкаПлатежа.Контрагент";
		ДоговорПриемник = "ТаблицаРасшифровкаПлатежа.ДоговорПриемник";
		НаправлениеДеятельностиПриемник = "ТаблицаРасшифровкаПлатежа.НаправлениеДеятельностиПриемник";
		
		ФормаОплаты = "ТаблицаРасшифровкаПлатежа.ФормаОплаты";
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		ОплачиваетсяИсточник = "ВЫБОР КОГДА ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник.Объект <> ТаблицаРасшифровкаПлатежа.Ссылка
								|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
								|		ИНАЧЕ 0
								|	КОНЕЦ";
		ОплачиваетсяПриемник = "ВЫБОР КОГДА ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник.Объект <> ТаблицаРасшифровкаПлатежа.Ссылка
								|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
								|		ИНАЧЕ 0
								|	КОНЕЦ";
		
		ДатаПлатежа = "ТаблицаРасшифровкаПлатежа.ДатаРегистратора";
		ВариантОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
		
	ИначеЕсли Операция = "ВозвратТоваров" Тогда
		
		КредиторскаяЗадолженность = "ИСТИНА";
		СторноИсточник = "ЛОЖЬ";
		СторноПриемник = "ЛОЖЬ";
		ЗаполнятьКорОбъект = "ИСТИНА";
		
		УсловиеОперации = "ИСТИНА";
		
		ОбъектРасчетовИсточник = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник";
		ОбъектРасчетовПриемник = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник";
		
		ПартнерИсточник = "ТаблицаРасшифровкаПлатежа.Партнер";
		ОрганизацияИсточник = "ТаблицаРасшифровкаПлатежа.Организация";
		КонтрагентИсточник = "ТаблицаРасшифровкаПлатежа.Контрагент";
		ДоговорИсточник = "ТаблицаРасшифровкаПлатежа.ДоговорИсточник";
		НаправлениеДеятельностиИсточник = "ТаблицаРасшифровкаПлатежа.НаправлениеДеятельностиИсточник";
		
		ПартнерПриемник = "ТаблицаРасшифровкаПлатежа.Партнер";
		ОрганизацияПриемник = "ТаблицаРасшифровкаПлатежа.Организация";
		КонтрагентПриемник = "ТаблицаРасшифровкаПлатежа.Контрагент";
		ДоговорПриемник = "ТаблицаРасшифровкаПлатежа.ДоговорПриемник";
		НаправлениеДеятельностиПриемник = "ТаблицаРасшифровкаПлатежа.НаправлениеДеятельностиПриемник";
		
		ФормаОплаты = "Неопределено";
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.ВалютаДокумента";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.Сумма";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежа.Сумма";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		ОплачиваетсяИсточник = "0";
		ОплачиваетсяПриемник = "0";
		
		ДатаПлатежа = "Неопределено";
		ВариантОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		
	КонецЕсли;
		
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.ДатаРегистратора              КАК Период,
		|	ВЫБОР
		|		КОГДА НЕ &СторноИсточник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноИсточник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ                                                   КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
		|	&ОбъектРасчетовИсточник                                 КАК ОбъектРасчетов,
		|	&ВалютаВзаиморасчетовИсточник                           КАК Валюта,
		|	
		|	СУММА(&СуммаВзаиморасчетовИсточник *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК Сумма,
		|	СУММА(&КОплатеИсточник *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК КОплате,
		|	СУММА(&ОплачиваетсяИсточник *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК Оплачивается,
		|	0                                                       КАК КОтгрузке,
		|	0                                                       КАК Отгружается,
		|	
		|	ТаблицаРасшифровкаПлатежа.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                            КАК ФормаОплаты,
		|	Неопределено                                            КАК СчетНаОплату,
		|	Неопределено                                            КАК ПродажаПоЗаказу,
		|	ТаблицаРасшифровкаПлатежа.ДатаРегистратора              КАК ДатаРегистратора,
		|	&ДатаПлатежа                                            КАК ДатаПлатежа,
		|	
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовИсточник = &ВалютаРегламентированногоУчета
		|				ТОГДА &СуммаВзаиморасчетовИсточник
		|			КОГДА ТаблицаРасшифровкаПлатежа.ВалютаДокумента = &ВалютаРегламентированногоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовИсточник = &ВалютаУправленческогоУчета
		|				ТОГДА &СуммаВзаиморасчетовИсточник
		|			КОГДА ТаблицаРасшифровкаПлатежа.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК СуммаУпр,
		|
		|	ЛОЖЬ                                                    КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДоговорыСуммы.ДопустимаяСуммаЗадолженности, 0) КАК ДопустимаяСуммаЗадолженности,
		|	0                                                       КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                          КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                            КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                            КАК СвязанныйДокумент,
		|	&ВариантОплаты                                          КАК ВариантОплаты,
		|	ТаблицаРасшифровкаПлатежа.ВалютаДокумента               КАК ВалютаДокумента,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ОбъектРасчетовПриемник
		|	КОНЕЦ                                                   КАК КорОбъектРасчетов,
		|	ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено) КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	&ПартнерИсточник                                        КАК Партнер,
		|	&ОрганизацияИсточник                                    КАК Организация,
		|	&КонтрагентИсточник                                     КАК Контрагент,
		|	&ДоговорИсточник                                        КАК Договор,
		|	НаправленияДеятельностиИсточник.НаправлениеАналитики    КАК НаправлениеДеятельности,
		|
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ПартнерПриемник
		|	КОНЕЦ                                                   КАК КорПартнер,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ОрганизацияПриемник
		|	КОНЕЦ                                                   КАК КорОрганизация,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &КонтрагентПриемник
		|	КОНЕЦ                                                   КАК КорКонтрагент,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ДоговорПриемник
		|	КОНЕЦ                                                   КАК КорДоговор,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ НаправленияДеятельностиПриемник.НаправлениеАналитики
		|	КОНЕЦ                                                   КАК КорНаправлениеДеятельности,
		|	ТаблицаРасшифровкаПлатежа.НомерРегистратора             КАК НомерРегистратора
		|ИЗ
		|	#ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельностиИсточник
		|			ПО &НаправлениеДеятельностиИсточник = НаправленияДеятельностиИсточник.НаправлениеДеятельности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельностиПриемник
		|			ПО &НаправлениеДеятельностиПриемник = НаправленияДеятельностиПриемник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаИсточник
		|			ПО &ОрганизацияИсточник = АналитикаИсточник.Организация
		|				И &КонтрагентИсточник = АналитикаИсточник.Контрагент
		|				И &ПартнерИсточник = АналитикаИсточник.Партнер
		|				И &ДоговорИсточник = АналитикаИсточник.Договор
		|				И НаправленияДеятельностиИсточник.НаправлениеАналитики = АналитикаИсточник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПриемник
		|			ПО НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|				И &ОрганизацияПриемник = АналитикаПриемник.Организация
		|				И &КонтрагентПриемник = АналитикаПриемник.Контрагент
		|				И &ПартнерПриемник = АналитикаПриемник.Партнер
		|				И &ДоговорПриемник = АналитикаПриемник.Договор
		|				И НаправленияДеятельностиПриемник.НаправлениеАналитики = АналитикаПриемник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютКлиент КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
		|				И Коэффициенты.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетовИсточник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыСуммы
		|			ПО ДоговорыСуммы.Ссылка = &ДоговорИсточник
		|ГДЕ
		|	&ОбъектРасчетовИсточник <> &ОбъектРасчетовПриемник
		|	И &СуммаВзаиморасчетовИсточник > 0
		|	И &УсловиеОперации
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.ДатаРегистратора,
		|	ВЫБОР
		|		КОГДА НЕ &СторноИсточник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноИсточник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ,
		|	ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено),
		|	&ОбъектРасчетовИсточник,
		|	&ВалютаВзаиморасчетовИсточник,
		|	ТаблицаРасшифровкаПлатежа.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	ЕСТЬNULL(ДоговорыСуммы.ДопустимаяСуммаЗадолженности, 0),
		|	ТаблицаРасшифровкаПлатежа.ВалютаДокумента,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ОбъектРасчетовПриемник
		|	КОНЕЦ,
		|	ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено),
		|	&ПартнерИсточник,
		|	&ОрганизацияИсточник,
		|	&КонтрагентИсточник,
		|	&ДоговорИсточник,
		|	НаправленияДеятельностиИсточник.НаправлениеАналитики,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ПартнерПриемник
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ОрганизацияПриемник
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &КонтрагентПриемник
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ДоговорПриемник
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ НаправленияДеятельностиПриемник.НаправлениеАналитики
		|	КОНЕЦ,
		|	ТаблицаРасшифровкаПлатежа.НомерРегистратора,
		|	&СтатьяДвиженияДенежныхСредств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.ДатаРегистратора              КАК Период,
		|	ВЫБОР
		|		КОГДА НЕ &СторноПриемник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноПриемник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	КОНЕЦ                                                   КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
		|	&ОбъектРасчетовПриемник                                 КАК ОбъектРасчетов,
		|	&ВалютаВзаиморасчетовПриемник                           КАК Валюта,
		|	
		|	СУММА(&СуммаВзаиморасчетовПриемник *
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК Сумма,
		|	СУММА(&КОплатеПриемник *
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК КОплате,
		|	СУММА(&ОплачиваетсяПриемник *
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК Оплачивается,
		|	0                                                       КАК КОтгрузке,
		|	0                                                       КАК Отгружается,
		|	
		|	ТаблицаРасшифровкаПлатежа.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                            КАК ФормаОплаты,
		|	Неопределено                                            КАК СчетНаОплату,
		|	Неопределено                                            КАК ПродажаПоЗаказу,
		|	ТаблицаРасшифровкаПлатежа.ДатаРегистратора              КАК ДатаРегистратора,
		|	&ДатаПлатежа                                            КАК ДатаПлатежа,
		|	
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовПриемник = &ВалютаРегламентированногоУчета
		|				ТОГДА &СуммаВзаиморасчетовПриемник
		|			КОГДА ТаблицаРасшифровкаПлатежа.ВалютаДокумента = &ВалютаРегламентированногоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ*
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовПриемник = &ВалютаУправленческогоУчета
		|				ТОГДА &СуммаВзаиморасчетовПриемник
		|			КОГДА ТаблицаРасшифровкаПлатежа.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ*
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК СуммаУпр,
		|
		|	ЛОЖЬ                                                    КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДоговорыСуммы.ДопустимаяСуммаЗадолженности, 0) КАК ДопустимаяСуммаЗадолженности,
		|	0                                                       КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                          КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                            КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                            КАК СвязанныйДокумент,
		|	&ВариантОплаты                                          КАК ВариантОплаты,
		|	ТаблицаРасшифровкаПлатежа.ВалютаДокумента               КАК ВалютаДокумента,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ОбъектРасчетовИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорОбъектРасчетов,
		|	ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено) КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	&ПартнерПриемник                                        КАК Партнер,
		|	&ОрганизацияПриемник                                    КАК Организация,
		|	&КонтрагентПриемник                                     КАК Контрагент,
		|	&ДоговорПриемник                                        КАК Договор,
		|	НаправленияДеятельностиПриемник.НаправлениеАналитики    КАК НаправлениеДеятельности,
		|
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ПартнерИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорПартнер,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ОрганизацияИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорОрганизация,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &КонтрагентИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорКонтрагент,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ДоговорИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорДоговор,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА НаправленияДеятельностиИсточник.НаправлениеАналитики
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорНаправлениеДеятельности,
		|
		|	ТаблицаРасшифровкаПлатежа.НомерРегистратора             КАК НомерРегистратора
		|ИЗ
		|	#ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельностиИсточник
		|			ПО &НаправлениеДеятельностиИсточник = НаправленияДеятельностиИсточник.НаправлениеДеятельности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельностиПриемник
		|			ПО &НаправлениеДеятельностиПриемник = НаправленияДеятельностиПриемник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПриемник
		|			ПО &ОрганизацияПриемник = АналитикаПриемник.Организация
		|				И &КонтрагентПриемник = АналитикаПриемник.Контрагент
		|				И &ПартнерПриемник = АналитикаПриемник.Партнер
		|				И &ДоговорПриемник = АналитикаПриемник.Договор
		|				И НаправленияДеятельностиПриемник.НаправлениеАналитики = АналитикаПриемник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаИсточник
		|			ПО &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|				И &ОрганизацияИсточник = АналитикаИсточник.Организация
		|				И &КонтрагентИсточник = АналитикаИсточник.Контрагент
		|				И &ПартнерИсточник = АналитикаИсточник.Партнер
		|				И &ДоговорИсточник = АналитикаИсточник.Договор
		|				И НаправленияДеятельностиИсточник.НаправлениеАналитики = АналитикаИсточник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютКлиент КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
		|				И Коэффициенты.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетовПриемник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыСуммы
		|			ПО ДоговорыСуммы.Ссылка = &ДоговорПриемник
		|ГДЕ
		|	&ОбъектРасчетовИсточник <> &ОбъектРасчетовПриемник
		|	И &СуммаВзаиморасчетовПриемник > 0
		|	И &УсловиеОперации
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.ДатаРегистратора,
		|	ВЫБОР
		|		КОГДА НЕ &СторноПриемник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноПриемник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	КОНЕЦ,
		|	ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено),
		|	&ОбъектРасчетовПриемник,
		|	&ВалютаВзаиморасчетовПриемник,
		|	ТаблицаРасшифровкаПлатежа.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	ЕСТЬNULL(ДоговорыСуммы.ДопустимаяСуммаЗадолженности, 0),
		|	ТаблицаРасшифровкаПлатежа.ВалютаДокумента,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ОбъектРасчетовИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено),
		|	&ПартнерПриемник,
		|	&ОрганизацияПриемник,
		|	&КонтрагентПриемник,
		|	&ДоговорПриемник,
		|	НаправленияДеятельностиПриемник.НаправлениеАналитики,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ПартнерИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ОрганизацияИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &КонтрагентИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ДоговорИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА НаправленияДеятельностиИсточник.НаправлениеАналитики
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ТаблицаРасшифровкаПлатежа.НомерРегистратора,
		|	&СтатьяДвиженияДенежныхСредств";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОперации",УсловиеОперации);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КредиторскаяЗадолженность", КредиторскаяЗадолженность);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СторноИсточник",            СторноИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СторноПриемник",СторноПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОбъектРасчетовИсточник",ОбъектРасчетовИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПартнерИсточник",ПартнерИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОрганизацияИсточник",ОрганизацияИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КонтрагентИсточник",КонтрагентИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДоговорИсточник",ДоговорИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НаправлениеДеятельностиИсточник",НаправлениеДеятельностиИсточник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплатеИсточник",КОплатеИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОплачиваетсяИсточник",ОплачиваетсяИсточник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОбъектРасчетовПриемник",ОбъектРасчетовПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПартнерПриемник",ПартнерПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОрганизацияПриемник",ОрганизацияПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КонтрагентПриемник",КонтрагентПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДоговорПриемник",ДоговорПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НаправлениеДеятельностиПриемник",НаправлениеДеятельностиПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",ФормаОплаты);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплатеПриемник",КОплатеПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОплачиваетсяПриемник",ОплачиваетсяПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВалютаВзаиморасчетовИсточник",ВалютаВзаиморасчетовИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВалютаВзаиморасчетовПриемник",ВалютаВзаиморасчетовПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СуммаВзаиморасчетовИсточник",СуммаВзаиморасчетовИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СуммаВзаиморасчетовПриемник",СуммаВзаиморасчетовПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа", ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты", ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаполнятьКорОбъект",              ЗаполнятьКорОбъект);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьПланОплатыОтКлиента(Запрос, Операция)
	
	Если НЕ Запрос.Параметры.Свойство("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	КонецЕсли;
	
	Если Операция = "ГрафикИсполненияКлиент" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ЛОЖЬ";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыКлиентом.ДатаПлатежа, ДЕНЬ)";
		
		ПорядокРасчетов = "ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		СверхЗаказа = "ЛОЖЬ";
		ЗаказПродажи = "Неопределено";
		
		КОплате = "УвеличениеПланаОплатыКлиентом.КОплате";
		
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		ДатаПлатежа = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыКлиентом.ДатаПлатежа, ДЕНЬ)";
		СуммаОтклоненияМерныхТоваров = "0";
		ВариантОплаты = "УвеличениеПланаОплатыКлиентом.ВариантОплаты";
		ИсключатьПриКонтроле = "УвеличениеПланаОплатыКлиентом.ИсключатьПриКонтроле";
		СвязанныйДокумент = "Неопределено";
		
	ИначеЕсли Операция = "ЗаказКлиента" Тогда
		
		ЭтоЗаказ = "ИСТИНА";
		ЭтоНакладная = "ЛОЖЬ";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыКлиентом.ДатаПлатежа, ДЕНЬ)";
		
		ПорядокРасчетов = "УвеличениеПланаОплатыКлиентом.ПорядокРасчетов";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		СверхЗаказа = "ЛОЖЬ";
		ЗаказПродажи = "Неопределено";
		
		КОплате = "УвеличениеПланаОплатыКлиентом.КОплате";
		
		ФормаОплаты = "УвеличениеПланаОплатыКлиентом.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		ДатаПлатежа = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыКлиентом.ДатаПлатежа, ДЕНЬ)";
		СуммаОтклоненияМерныхТоваров = "УвеличениеПланаОплатыКлиентом.СуммаОтклоненияМерныхТоваров";
		ВариантОплаты = "УвеличениеПланаОплатыКлиентом.ВариантОплаты";
		ИсключатьПриКонтроле = "УвеличениеПланаОплатыКлиентом.ИсключатьПриКонтроле";
		СвязанныйДокумент = "Неопределено";
		
	ИначеЕсли Операция = "Продажа" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ИСТИНА";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыКлиентом.ДатаПлатежа, ДЕНЬ)";
		
		ПорядокРасчетов = "УвеличениеПланаОплатыКлиентом.ПорядокРасчетов";
		НакладнаяПоЗаказам = "УвеличениеПланаОплатыКлиентом.НакладнаяПоЗаказам";
		СверхЗаказа = "УвеличениеПланаОплатыКлиентом.СверхЗаказа";
		ЗаказПродажи = "УвеличениеПланаОплатыКлиентом.ЗаказПродажи";
		
		КОплате = "УвеличениеПланаОплатыКлиентом.КОплате";
		
		ФормаОплаты = "УвеличениеПланаОплатыКлиентом.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		ДатаПлатежа = "УвеличениеПланаОплатыКлиентом.ДатаПлатежа";
		СуммаОтклоненияМерныхТоваров = "0";
		ВариантОплаты = "УвеличениеПланаОплатыКлиентом.ВариантОплаты";
		ИсключатьПриКонтроле = "УвеличениеПланаОплатыКлиентом.ИсключатьПриКонтроле";
		СвязанныйДокумент = "УвеличениеПланаОплатыКлиентом.СвязанныйДокумент";
		
	ИначеЕсли Операция = "ВозвратОплатыКлиенту" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ЛОЖЬ";
		Период = "УвеличениеПланаОплатыКлиентом.ДатаРегистратора";
		
		ПорядокРасчетов = "Неопределено";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		СверхЗаказа = "ЛОЖЬ";
		ЗаказПродажи = "Неопределено";
		
		КОплате = "УвеличениеПланаОплатыКлиентом.СуммаВзаиморасчетов";
		
		ФормаОплаты = "УвеличениеПланаОплатыКлиентом.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "УвеличениеПланаОплатыКлиентом.СтатьяДвиженияДенежныхСредств";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		СуммаОтклоненияМерныхТоваров = "0";
		ВариантОплаты = "Неопределено";
		ИсключатьПриКонтроле = "Ложь";
		СвязанныйДокумент = "Неопределено";
		
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период                                                 КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                  КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)         КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов            КАК ОбъектРасчетов,
		|	УвеличениеПланаОплатыКлиентом.ВалютаВзаиморасчетов      КАК Валюта,
		|	
		|	0                                                       КАК Сумма,
		|	СУММА(&КОплате)                                         КАК КОплате,
		|	0                                                       КАК Оплачивается,
		|	0                                                       КАК КОтгрузке,
		|	0                                                       КАК Отгружается,
		|	
		|	УвеличениеПланаОплатыКлиентом.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                            КАК ФормаОплаты,
		|	Неопределено                                            КАК СчетНаОплату,
		|	&ЗаказПродажи                                           КАК ПродажаПоЗаказу,
		|	УвеличениеПланаОплатыКлиентом.ДатаРегистратора          КАК ДатаРегистратора,
		|	&ДатаПлатежа                                            КАК ДатаПлатежа,
		|	0                                                       КАК СуммаРегл,
		|	0                                                       КАК СуммаУпр,
		|	&ИсключатьПриКонтроле                                   КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДоговорыСумма.ДопустимаяСуммаЗадолженности, 0) КАК ДопустимаяСуммаЗадолженности,
		|	0                                                       КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                          КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                            КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	&СвязанныйДокумент                                      КАК СвязанныйДокумент,
		|	&ВариантОплаты                                          КАК ВариантОплаты,
		|	УвеличениеПланаОплатыКлиентом.ВалютаДокумента           КАК ВалютаДокумента,
		|	Неопределено                                            КАК КорОбъектРасчетов,
		|	Неопределено                                            КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеПланаОплатыКлиентом.Партнер                   КАК Партнер,
		|	УвеличениеПланаОплатыКлиентом.Организация               КАК Организация,
		|	УвеличениеПланаОплатыКлиентом.Контрагент                КАК Контрагент,
		|	УвеличениеПланаОплатыКлиентом.Договор                   КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики            КАК НаправлениеДеятельности,
		|	Неопределено                                            КАК КорПартнер,
		|	Неопределено                                            КАК КорОрганизация,
		|	Неопределено                                            КАК КорКонтрагент,
		|	Неопределено                                            КАК КорДоговор,
		|	Неопределено                                            КАК КорНаправлениеДеятельности,
		|	УвеличениеПланаОплатыКлиентом.НомерРегистратора         КАК НомерРегистратора
		|ИЗ
		|	#УвеличениеПланаОплатыКлиентом КАК УвеличениеПланаОплатыКлиентом
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УвеличениеПланаОплатыКлиентом.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыСумма
		|			ПО ДоговорыСумма.Ссылка = УвеличениеПланаОплатыКлиентом.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УвеличениеПланаОплатыКлиентом.Организация = Аналитика.Организация
		|				И УвеличениеПланаОплатыКлиентом.Контрагент = Аналитика.Контрагент
		|				И УвеличениеПланаОплатыКлиентом.Партнер = Аналитика.Партнер
		|				И УвеличениеПланаОплатыКлиентом.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&КОплате <> 0
		|	И НЕ ((&ЭтоЗаказ ИЛИ &ЭтоНакладная)
		|			И ЕСТЬNULL(ДоговорыСумма.ЗаданГрафикИсполнения, ЛОЖЬ)
		|			И &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
		|	И (&ЭтоЗаказ И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ (&ЭтоНакладная
		|			И (НЕ &НакладнаяПоЗаказам ИЛИ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)))
		|		ИЛИ (&ЭтоНакладная
		|			И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|			И &НакладнаяПоЗаказам
		|			И (&СверхЗаказа
		|				ИЛИ НЕ &СверхЗаказа И НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента)
		|		ИЛИ НЕ (&ЭтоНакладная ИЛИ &ЭтоЗаказ))
		|		)
		|СГРУППИРОВАТЬ ПО
		|	&Период,
		|	&ДатаПлатежа,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов,
		|	УвеличениеПланаОплатыКлиентом.ВалютаВзаиморасчетов,
		|	УвеличениеПланаОплатыКлиентом.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&ЗаказПродажи,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&ДатаПлатежа,
		|	УвеличениеПланаОплатыКлиентом.ДатаРегистратора,
		|	УвеличениеПланаОплатыКлиентом.НомерРегистратора,
		|	&ИсключатьПриКонтроле,
		|	&СвязанныйДокумент,
		|	ЕСТЬNULL(ДоговорыСумма.ДопустимаяСуммаЗадолженности, 0),
		|	&ВариантОплаты,
		|	УвеличениеПланаОплатыКлиентом.ВалютаДокумента,
		|	УвеличениеПланаОплатыКлиентом.Партнер,
		|	УвеличениеПланаОплатыКлиентом.Организация,
		|	УвеличениеПланаОплатыКлиентом.Контрагент,
		|	УвеличениеПланаОплатыКлиентом.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период                                               КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)       КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов          КАК ОбъектРасчетов,
		|	УвеличениеПланаОплатыКлиентом.ВалютаВзаиморасчетов    КАК Валюта,
		|	
		|	0                                                     КАК Сумма,
		|	СУММА(&СуммаОтклоненияМерныхТоваров)                  КАК КОплате,
		|	0                                                     КАК Оплачивается,
		|	0                                                     КАК КОтгрузке,
		|	0                                                     КАК Отгружается,
		|
		|	УвеличениеПланаОплатыКлиентом.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                          КАК ФормаОплаты,
		|	Неопределено                                          КАК СчетНаОплату,
		|	Неопределено                                          КАК ПродажаПоЗаказу,
		|	УвеличениеПланаОплатыКлиентом.ДатаРегистратора        КАК ДатаРегистратора,
		|	&ДатаПлатежа                                          КАК ДатаПлатежа,
		|	0                                                     КАК СуммаРегл,
		|	0                                                     КАК СуммаУпр,
		|	ИСТИНА                                                КАК ИсключатьПриКонтроле,
		|	0                                                     КАК ДопустимаяСуммаЗадолженности,
		|	0                                                     КАК ЗалогЗаТару,
		|	Неопределено                                          КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                          КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                          КАК СвязанныйДокумент,
		|	&ВариантОплаты                                        КАК ВариантОплаты,
		|	УвеличениеПланаОплатыКлиентом.ВалютаДокумента         КАК ВалютаДокумента,
		|	Неопределено                                          КАК КорОбъектРасчетов,
		|	Неопределено                                          КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеПланаОплатыКлиентом.Партнер                 КАК Партнер,
		|	УвеличениеПланаОплатыКлиентом.Организация             КАК Организация,
		|	УвеличениеПланаОплатыКлиентом.Контрагент              КАК Контрагент,
		|	УвеличениеПланаОплатыКлиентом.Договор                 КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики          КАК НаправлениеДеятельности,
		|	Неопределено                                          КАК КорПартнер,
		|	Неопределено                                          КАК КорОрганизация,
		|	Неопределено                                          КАК КорКонтрагент,
		|	Неопределено                                          КАК КорДоговор,
		|	Неопределено                                          КАК КорНаправлениеДеятельности,
		|	УвеличениеПланаОплатыКлиентом.НомерРегистратора       КАК НомерРегистратора
		|ИЗ
		|	#УвеличениеПланаОплатыКлиентом КАК УвеличениеПланаОплатыКлиентом
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УвеличениеПланаОплатыКлиентом.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УвеличениеПланаОплатыКлиентом.Организация = Аналитика.Организация
		|				И УвеличениеПланаОплатыКлиентом.Контрагент = Аналитика.Контрагент
		|				И УвеличениеПланаОплатыКлиентом.Партнер = Аналитика.Партнер
		|				И УвеличениеПланаОплатыКлиентом.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&СуммаОтклоненияМерныхТоваров <> 0
		|	И &ЭтоЗаказ И НЕ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|СГРУППИРОВАТЬ ПО
		|	&Период,
		|	&ДатаПлатежа,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов,
		|	УвеличениеПланаОплатыКлиентом.ВалютаВзаиморасчетов,
		|	УвеличениеПланаОплатыКлиентом.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&ДатаПлатежа,
		|	УвеличениеПланаОплатыКлиентом.ДатаРегистратора,
		|	УвеличениеПланаОплатыКлиентом.НомерРегистратора,
		|	&ВариантОплаты,
		|	УвеличениеПланаОплатыКлиентом.ВалютаДокумента,
		|	УвеличениеПланаОплатыКлиентом.Партнер,
		|	УвеличениеПланаОплатыКлиентом.Организация,
		|	УвеличениеПланаОплатыКлиентом.Контрагент,
		|	УвеличениеПланаОплатыКлиентом.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПорядокРасчетов",ПорядокРасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СуммаОтклоненияМерныхТоваров",СуммаОтклоненияМерныхТоваров);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоЗаказ",ЭтоЗаказ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоНакладная",ЭтоНакладная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НакладнаяПоЗаказам", НакладнаяПоЗаказам);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СверхЗаказа", СверхЗаказа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказПродажи", ЗаказПродажи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплате", КОплате);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Период", Период);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа", ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты", ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИсключатьПриКонтроле", ИсключатьПриКонтроле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент", СвязанныйДокумент);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьПланОплатыОтКлиента(Операция)
	
	Если Операция = "ВозвратТоваров" Тогда
		
		СчетНаОплату = "Неопределено";
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		КОплате = "УменьшениеПланаОплатыОтКлиента.КОплате";
		СвязанныйДокумент = "Неопределено";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		ВариантОплаты = "Неопределено";
		ИсключатьПриКонтроле = "ЛОЖЬ";
		
	ИначеЕсли Операция = "Продажа" Тогда
		
		СчетНаОплату = "Неопределено";
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		КОплате = "УменьшениеПланаОплатыОтКлиента.КОплате";
		СвязанныйДокумент = "Неопределено";
		ДатаПлатежа = "УменьшениеПланаОплатыОтКлиента.ДатаРегистратора";
		ВариантОплаты = "ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)";
		ИсключатьПриКонтроле = "ИСТИНА";
		
	ИначеЕсли Операция = "ОплатаОтКлиента" Тогда
		
		СчетНаОплату = "УменьшениеПланаОплатыОтКлиента.СчетНаОплату";
		ФормаОплаты = "УменьшениеПланаОплатыОтКлиента.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "УменьшениеПланаОплатыОтКлиента.СтатьяДвиженияДенежныхСредств";
		КОплате = "УменьшениеПланаОплатыОтКлиента.СуммаВзаиморасчетов";
		СвязанныйДокумент = "УменьшениеПланаОплатыОтКлиента.СвязанныйДокумент";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		ВариантОплаты = "Неопределено";
		ИсключатьПриКонтроле = "ЛОЖЬ";
		
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	УменьшениеПланаОплатыОтКлиента.ДатаРегистратора           КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                    КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)           КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеПланаОплатыОтКлиента.ОбъектРасчетов             КАК ОбъектРасчетов,
		|	УменьшениеПланаОплатыОтКлиента.ВалютаВзаиморасчетов       КАК Валюта,
		|	
		|	0                                                         КАК Сумма,
		|	СУММА(&КОплате)                                           КАК КОплате,
		|	0                                                         КАК Оплачивается,
		|	0                                                         КАК КОтгрузке,
		|	0                                                         КАК Отгружается,
		|	
		|	УменьшениеПланаОплатыОтКлиента.ХозяйственнаяОперация      КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                              КАК ФормаОплаты,
		|	&СчетНаОплату                                             КАК СчетНаОплату,
		|	Неопределено                                              КАК ПродажаПоЗаказу,
		|	УменьшениеПланаОплатыОтКлиента.ДатаРегистратора           КАК ДатаРегистратора,
		|	&ДатаПлатежа                                              КАК ДатаПлатежа,
		|	0                                                         КАК СуммаРегл,
		|	0                                                         КАК СуммаУпр,
		|	&ИсключатьПриКонтроле                                     КАК ИсключатьПриКонтроле,
		|	0                                                         КАК ДопустимаяСуммаЗадолженности,
		|	0                                                         КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                            КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                              КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	&СвязанныйДокумент                                        КАК СвязанныйДокумент,
		|	&ВариантОплаты                                            КАК ВариантОплаты,
		|	УменьшениеПланаОплатыОтКлиента.ВалютаДокумента            КАК ВалютаДокумента,
		|	Неопределено                                              КАК КорОбъектРасчетов,
		|	Неопределено                                              КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеПланаОплатыОтКлиента.Партнер                    КАК Партнер,
		|	УменьшениеПланаОплатыОтКлиента.Организация                КАК Организация,
		|	УменьшениеПланаОплатыОтКлиента.Контрагент                 КАК Контрагент,
		|	УменьшениеПланаОплатыОтКлиента.Договор                    КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики              КАК НаправлениеДеятельности,
		|	Неопределено                                              КАК КорПартнер,
		|	Неопределено                                              КАК КорОрганизация,
		|	Неопределено                                              КАК КорКонтрагент,
		|	Неопределено                                              КАК КорДоговор,
		|	Неопределено                                              КАК КорНаправлениеДеятельности,
		|	УменьшениеПланаОплатыОтКлиента.НомерРегистратора          КАК НомерРегистратора
		|ИЗ
		|	#УменьшениеПланаОплатыОтКлиента КАК УменьшениеПланаОплатыОтКлиента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УменьшениеПланаОплатыОтКлиента.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УменьшениеПланаОплатыОтКлиента.Организация = Аналитика.Организация
		|				И УменьшениеПланаОплатыОтКлиента.Контрагент = Аналитика.Контрагент
		|				И УменьшениеПланаОплатыОтКлиента.Партнер = Аналитика.Партнер
		|				И УменьшениеПланаОплатыОтКлиента.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&КОплате <> 0
		|СГРУППИРОВАТЬ ПО
		|	УменьшениеПланаОплатыОтКлиента.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеПланаОплатыОтКлиента.ОбъектРасчетов,
		|	УменьшениеПланаОплатыОтКлиента.ВалютаВзаиморасчетов,
		|	УменьшениеПланаОплатыОтКлиента.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&СчетНаОплату,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&СвязанныйДокумент,
		|	УменьшениеПланаОплатыОтКлиента.ВалютаДокумента,
		|	УменьшениеПланаОплатыОтКлиента.Партнер,
		|	УменьшениеПланаОплатыОтКлиента.Организация,
		|	УменьшениеПланаОплатыОтКлиента.Контрагент,
		|	УменьшениеПланаОплатыОтКлиента.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеПланаОплатыОтКлиента.НомерРегистратора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                   ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СчетНаОплату",                  СчетНаОплату);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплате",                       КОплате);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",             СвязанныйДокумент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты",                 ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                   ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИсключатьПриКонтроле",          ИсключатьПриКонтроле);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьЗадолженностьКлиента(Операция)
	
	Если Операция = "Продажа" Тогда
		
		ЗаказПродажи = "УвеличениеЗадолженностиКлиента.ЗаказПродажи";
		СуммаВзаиморасчетовПоТаре = "УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетовПоТаре";
		ВариантОплаты = "УвеличениеЗадолженностиКлиента.ВариантОплаты";
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		ИсключатьПриКонтроле = "ИСТИНА";
		ДатаПлатежа = "УвеличениеЗадолженностиКлиента.ДатаПлатежа";
		СвязанныйДокумент = "УвеличениеЗадолженностиКлиента.СвязанныйДокумент";
		
	ИначеЕсли Операция = "ВозвратОплатыКлиенту" Тогда
		
		ЗаказПродажи = "Неопределено";
		СуммаВзаиморасчетовПоТаре = "0";
		ВариантОплаты = "ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПустаяСсылка)";
		ФормаОплаты = "УвеличениеЗадолженностиКлиента.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "УвеличениеЗадолженностиКлиента.СтатьяДвиженияДенежныхСредств";
		ИсключатьПриКонтроле = "ЛОЖЬ";
		ДатаПлатежа = "УвеличениеЗадолженностиКлиента.ДатаРегистратора";
		СвязанныйДокумент = "Неопределено";
		
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	УвеличениеЗадолженностиКлиента.ДатаРегистратора           КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                    КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)           КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеЗадолженностиКлиента.ОбъектРасчетов             КАК ОбъектРасчетов,
		|	УвеличениеЗадолженностиКлиента.ВалютаВзаиморасчетов       КАК Валюта,
		|	
		|	СУММА(УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетов) КАК Сумма,
		|	0                                                         КАК КОплате,
		|	0                                                         КАК Оплачивается,
		|	0                                                         КАК КОтгрузке,
		|	0                                                         КАК Отгружается,
		|	
		|	УвеличениеЗадолженностиКлиента.ХозяйственнаяОперация      КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                              КАК ФормаОплаты,
		|	Неопределено                                              КАК СчетНаОплату,
		|	&ЗаказПродажи                                             КАК ПродажаПоЗаказу,
		|	УвеличениеЗадолженностиКлиента.ДатаРегистратора           КАК ДатаРегистратора,
		|	&ДатаПлатежа                                              КАК ДатаПлатежа,
		|	
		|	СУММА(ВЫБОР КОГДА УвеличениеЗадолженностиКлиента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
		|				ТОГДА УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетов
		|			КОГДА УвеличениеЗадолженностиКлиента.ВалютаДокумента = &ВалютаРегламентированногоУчета
		|				ТОГДА УвеличениеЗадолженностиКлиента.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(УвеличениеЗадолженностиКлиента.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                    КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА УвеличениеЗадолженностиКлиента.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
		|				ТОГДА УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетов
		|			КОГДА УвеличениеЗадолженностиКлиента.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА УвеличениеЗадолженностиКлиента.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ((УвеличениеЗадолженностиКлиента.Сумма * Коэффициенты.КоэффициентУпр) КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                    КАК СуммаУпр,
		|
		|	&ИсключатьПриКонтроле                                     КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДоговорыСуммы.ДопустимаяСуммаЗадолженности, 0)   КАК ДопустимаяСуммаЗадолженности,
		|	СУММА(&СуммаВзаиморасчетовПоТаре)                         КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                            КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                              КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	&СвязанныйДокумент                                        КАК СвязанныйДокумент,
		|	&ВариантОплаты                                            КАК ВариантОплаты,
		|	УвеличениеЗадолженностиКлиента.ВалютаДокумента            КАК ВалютаДокумента,
		|	Неопределено                                              КАК КорОбъектРасчетов,
		|	Неопределено                                              КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеЗадолженностиКлиента.Партнер                    КАК Партнер,
		|	УвеличениеЗадолженностиКлиента.Организация                КАК Организация,
		|	УвеличениеЗадолженностиКлиента.Контрагент                 КАК Контрагент,
		|	УвеличениеЗадолженностиКлиента.Договор                    КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики              КАК НаправлениеДеятельности,
		|	Неопределено                                              КАК КорПартнер,
		|	Неопределено                                              КАК КорОрганизация,
		|	Неопределено                                              КАК КорКонтрагент,
		|	Неопределено                                              КАК КорДоговор,
		|	Неопределено                                              КАК КорНаправлениеДеятельности,
		|	УвеличениеЗадолженностиКлиента.НомерРегистратора          КАК НомерРегистратора
		|ИЗ
		|	#УвеличениеЗадолженностиКлиента КАК УвеличениеЗадолженностиКлиента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УвеличениеЗадолженностиКлиента.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыСуммы
		|			ПО ДоговорыСуммы.Ссылка = УвеличениеЗадолженностиКлиента.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УвеличениеЗадолженностиКлиента.Организация = Аналитика.Организация
		|				И УвеличениеЗадолженностиКлиента.Контрагент = Аналитика.Контрагент
		|				И УвеличениеЗадолженностиКлиента.Партнер = Аналитика.Партнер
		|				И УвеличениеЗадолженностиКлиента.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютКлиент КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = УвеличениеЗадолженностиКлиента.Ссылка
		|				И Коэффициенты.ВалютаВзаиморасчетов = УвеличениеЗадолженностиКлиента.ВалютаВзаиморасчетов
		|ГДЕ 
		|	УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетов <> 0
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеЗадолженностиКлиента.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеЗадолженностиКлиента.ОбъектРасчетов,
		|	УвеличениеЗадолженностиКлиента.ВалютаВзаиморасчетов,
		|	УвеличениеЗадолженностиКлиента.ХозяйственнаяОперация,
		|	&ЗаказПродажи,
		|	&ДатаПлатежа,
		|	ЕСТЬNULL(ДоговорыСуммы.ДопустимаяСуммаЗадолженности, 0),
		|	&ВариантОплаты,
		|	&ФормаОплаты,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&СвязанныйДокумент,
		|	УвеличениеЗадолженностиКлиента.ВалютаДокумента,
		|	УвеличениеЗадолженностиКлиента.Партнер,
		|	УвеличениеЗадолженностиКлиента.Организация,
		|	УвеличениеЗадолженностиКлиента.Контрагент,
		|	УвеличениеЗадолженностиКлиента.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеЗадолженностиКлиента.НомерРегистратора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказПродажи",                  ЗаказПродажи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СуммаВзаиморасчетовПоТаре",     СуммаВзаиморасчетовПоТаре);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты",                 ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                   ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИсключатьПриКонтроле",          ИсключатьПриКонтроле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                   ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",             СвязанныйДокумент);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьНашуЗадолженностьКлиенту(Операция)
	
	Если Операция = "ВозвратТоваров" Тогда
		
		СчетНаОплату = "Неопределено";
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "Неопределено";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		ВариантОплаты = "Неопределено";
		ИсключатьПриКонтроле = "ЛОЖЬ";
		
	ИначеЕсли Операция = "Продажа" Тогда
		
		СчетНаОплату = "Неопределено";
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "Неопределено";
		ДатаПлатежа = "ТаблицаОплатаОтКлиента.ДатаРегистратора";
		ВариантОплаты = "ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)";
		ИсключатьПриКонтроле = "ИСТИНА";
		
	ИначеЕсли Операция = "ОплатаОтКлиента" Тогда
		
		СчетНаОплату = "ТаблицаОплатаОтКлиента.СчетНаОплату";
		ФормаОплаты = "ТаблицаОплатаОтКлиента.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "ТаблицаОплатаОтКлиента.СтатьяДвиженияДенежныхСредств";
		СвязанныйДокумент = "ТаблицаОплатаОтКлиента.СвязанныйДокумент";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		ВариантОплаты = "Неопределено";
		ИсключатьПриКонтроле = "ЛОЖЬ";
		
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаОплатаОтКлиента.ДатаРегистратора              КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)               КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)      КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаОплатаОтКлиента.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	ТаблицаОплатаОтКлиента.ВалютаВзаиморасчетов          КАК Валюта,
		|	
		|	СУММА(ТаблицаОплатаОтКлиента.СуммаВзаиморасчетов)    КАК Сумма,
		|	0                                                    КАК КОплате,
		|	0                                                    КАК Оплачивается,
		|	0                                                    КАК КОтгрузке,
		|	0                                                    КАК Отгружается,
		|	
		|	ТаблицаОплатаОтКлиента.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                         КАК ФормаОплаты,
		|	&СчетНаОплату                                        КАК СчетНаОплату,
		|	Неопределено                                         КАК ПродажаПоЗаказу,
		|	ТаблицаОплатаОтКлиента.ДатаРегистратора              КАК ДатаРегистратора,
		|	&ДатаПлатежа                                         КАК ДатаПлатежа,
		|	
		|	СУММА(ВЫБОР КОГДА ТаблицаОплатаОтКлиента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
		|				ТОГДА ТаблицаОплатаОтКлиента.СуммаВзаиморасчетов
		|			КОГДА ТаблицаОплатаОтКлиента.ВалютаДокумента = &ВалютаРегламентированногоУчета
		|				ТОГДА ТаблицаОплатаОтКлиента.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаОплатаОтКлиента.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                               КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА ТаблицаОплатаОтКлиента.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
		|				ТОГДА ТаблицаОплатаОтКлиента.СуммаВзаиморасчетов
		|			КОГДА ТаблицаОплатаОтКлиента.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА ТаблицаОплатаОтКлиента.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаОплатаОтКлиента.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                               КАК СуммаУпр,
		|
		|	&ИсключатьПриКонтроле                                КАК ИсключатьПриКонтроле,
		|	0                                                    КАК ДопустимаяСуммаЗадолженности,
		|	0                                                    КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                       КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                         КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	&СвязанныйДокумент                                   КАК СвязанныйДокумент,
		|	&ВариантОплаты                                       КАК ВариантОплаты,
		|	ТаблицаОплатаОтКлиента.ВалютаДокумента               КАК ВалютаДокумента,
		|	Неопределено                                         КАК КорОбъектРасчетов,
		|	Неопределено                                         КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	ТаблицаОплатаОтКлиента.Партнер                        КАК Партнер,
		|	ТаблицаОплатаОтКлиента.Организация                    КАК Организация,
		|	ТаблицаОплатаОтКлиента.Контрагент                     КАК Контрагент,
		|	ТаблицаОплатаОтКлиента.Договор                        КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики          КАК НаправлениеДеятельности,
		|	Неопределено                                          КАК КорПартнер,
		|	Неопределено                                          КАК КорОрганизация,
		|	Неопределено                                          КАК КорКонтрагент,
		|	Неопределено                                          КАК КорДоговор,
		|	Неопределено                                          КАК КорНаправлениеДеятельности,
		|	ТаблицаОплатаОтКлиента.НомерРегистратора              КАК НомерРегистратора
		|ИЗ
		|	#ТаблицаОплатаОтКлиента КАК ТаблицаОплатаОтКлиента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО ТаблицаОплатаОтКлиента.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО ТаблицаОплатаОтКлиента.Организация = Аналитика.Организация
		|				И ТаблицаОплатаОтКлиента.Контрагент = Аналитика.Контрагент
		|				И ТаблицаОплатаОтКлиента.Партнер = Аналитика.Партнер
		|				И ТаблицаОплатаОтКлиента.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютКлиент КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = ТаблицаОплатаОтКлиента.Ссылка
		|				И Коэффициенты.ВалютаВзаиморасчетов = ТаблицаОплатаОтКлиента.ВалютаВзаиморасчетов
		|ГДЕ
		|	ТаблицаОплатаОтКлиента.СуммаВзаиморасчетов <> 0 
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОплатаОтКлиента.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	ТаблицаОплатаОтКлиента.ОбъектРасчетов,
		|	ТаблицаОплатаОтКлиента.ВалютаВзаиморасчетов,
		|	ТаблицаОплатаОтКлиента.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&СчетНаОплату,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&СвязанныйДокумент,
		|	ТаблицаОплатаОтКлиента.ВалютаДокумента,
		|	ТаблицаОплатаОтКлиента.Партнер,
		|	ТаблицаОплатаОтКлиента.Организация,
		|	ТаблицаОплатаОтКлиента.Контрагент,
		|	ТаблицаОплатаОтКлиента.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	ТаблицаОплатаОтКлиента.НомерРегистратора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                   ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СчетНаОплату",                  СчетНаОплату);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",             СвязанныйДокумент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты",                 ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                   ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИсключатьПриКонтроле",          ИсключатьПриКонтроле);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьОплачиваетсяКлиентом(Операция)
	
	Если Операция = "ОплатаОтКлиента" Тогда
		Оплачивается = "УвеличениеОплачивается.УвеличениеОплачивается";
		СчетНаОплату = "УвеличениеОплачивается.СчетНаОплату";
	ИначеЕсли Операция = "ВозвратОплатыКлиенту" Тогда
		Оплачивается = "УвеличениеОплачивается.СуммаВзаиморасчетов";
		СчетНаОплату = "Неопределено";
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	УвеличениеОплачивается.ДатаРегистратора              КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)               КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)      КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеОплачивается.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	
		|	УвеличениеОплачивается.ВалютаВзаиморасчетов          КАК Валюта,
		|	
		|	0                                                    КАК Сумма,
		|	0                                                    КАК КОплате,
		|	СУММА(&Оплачивается)                                 КАК Оплачивается,
		|	0                                                    КАК КОтгрузке,
		|	0                                                    КАК Отгружается,
		|	
		|	УвеличениеОплачивается.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
		|	УвеличениеОплачивается.ФормаОплаты                   КАК ФормаОплаты,
		|	&СчетНаОплату                                        КАК СчетНаОплату,
		|	Неопределено                                         КАК ПродажаПоЗаказу,
		|	УвеличениеОплачивается.ДатаРегистратора              КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                     КАК ДатаПлатежа,
		|	0                                                    КАК СуммаРегл,
		|	0                                                    КАК СуммаУпр,
		|	ЛОЖЬ                                                 КАК ИсключатьПриКонтроле,
		|	0                                                    КАК ДопустимаяСуммаЗадолженности,
		|	0                                                    КАК ЗалогЗаТару,
		|	УвеличениеОплачивается.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                         КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                         КАК СвязанныйДокумент,
		|	Неопределено                                         КАК ВариантОплаты,
		|	УвеличениеОплачивается.ВалютаДокумента               КАК ВалютаДокумента,
		|	Неопределено                                         КАК КорОбъектРасчетов,
		|	Неопределено                                         КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеОплачивается.Партнер                       КАК Партнер,
		|	УвеличениеОплачивается.Организация                   КАК Организация,
		|	УвеличениеОплачивается.Контрагент                    КАК Контрагент,
		|	УвеличениеОплачивается.Договор                       КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики         КАК НаправлениеДеятельности,
		|	Неопределено                                         КАК КорПартнер,
		|	Неопределено                                         КАК КорОрганизация,
		|	Неопределено                                         КАК КорКонтрагент,
		|	Неопределено                                         КАК КорДоговор,
		|	Неопределено                                         КАК КорНаправлениеДеятельности,
		|	УвеличениеОплачивается.НомерРегистратора             КАК НомерРегистратора
		|ИЗ
		|	#УвеличениеОплачивается КАК УвеличениеОплачивается
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УвеличениеОплачивается.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УвеличениеОплачивается.Организация = Аналитика.Организация
		|				И УвеличениеОплачивается.Контрагент = Аналитика.Контрагент
		|				И УвеличениеОплачивается.Партнер = Аналитика.Партнер
		|				И УвеличениеОплачивается.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&Оплачивается <> 0
		|	И УвеличениеОплачивается.ОбъектРасчетов.Объект <> УвеличениеОплачивается.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеОплачивается.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеОплачивается.ОбъектРасчетов,
		|	УвеличениеОплачивается.ВалютаВзаиморасчетов,
		|	УвеличениеОплачивается.ХозяйственнаяОперация,
		|	УвеличениеОплачивается.ФормаОплаты,
		|	&СчетНаОплату,
		|	УвеличениеОплачивается.СтатьяДвиженияДенежныхСредств,
		|	УвеличениеОплачивается.ВалютаДокумента,
		|	УвеличениеОплачивается.Партнер,
		|	УвеличениеОплачивается.Организация,
		|	УвеличениеОплачивается.Контрагент,
		|	УвеличениеОплачивается.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеОплачивается.НомерРегистратора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Оплачивается", Оплачивается);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СчетНаОплату", СчетНаОплату);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьОплачиваетсяКлиентом(Операция)
	
	Если Операция = "ОплатаОтКлиента" Тогда
		
		Оплачивается = "УменьшениеОплачивается.УменьшениеОплачивается";
		СчетНаОплату = "УменьшениеОплачивается.СчетНаОплату";
		
	ИначеЕсли Операция = "ЗаявкаНаВозвратОплатыКлиенту" Тогда
		
		Оплачивается = "УменьшениеОплачивается.Оплачивается";
		СчетНаОплату = "Неопределено";
		
	ИначеЕсли Операция = "ВозвратОплатыКлиенту" Тогда
		
		Оплачивается = "УменьшениеОплачивается.Оплачивается";
		СчетНаОплату = "Неопределено";
		
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	УменьшениеОплачивается.ДатаРегистратора              КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)               КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)      КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеОплачивается.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	УменьшениеОплачивается.ВалютаВзаиморасчетов          КАК Валюта,
		|	
		|	0                                                    КАК Сумма,
		|	0                                                    КАК КОплате,
		|	СУММА(&Оплачивается)                                 КАК Оплачивается,
		|	0                                                    КАК КОтгрузке,
		|	0                                                    КАК Отгружается,
		|	
		|	УменьшениеОплачивается.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
		|	УменьшениеОплачивается.ФормаОплаты                   КАК ФормаОплаты,
		|	&СчетНаОплату                                        КАК СчетНаОплату,
		|	Неопределено                                         КАК ПродажаПоЗаказу,
		|	УменьшениеОплачивается.ДатаРегистратора              КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                     КАК ДатаПлатежа,
		|	0                                                    КАК СуммаРегл,
		|	0                                                    КАК СуммаУпр,
		|	ЛОЖЬ                                                 КАК ИсключатьПриКонтроле,
		|	0                                                    КАК ДопустимаяСуммаЗадолженности,
		|	0                                                    КАК ЗалогЗаТару,
		|	УменьшениеОплачивается.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                         КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                         КАК СвязанныйДокумент,
		|	Неопределено                                         КАК ВариантОплаты,
		|	УменьшениеОплачивается.ВалютаДокумента               КАК ВалютаДокумента,
		|	Неопределено                                         КАК КорОбъектРасчетов,
		|	Неопределено                                         КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеОплачивается.Партнер                        КАК Партнер,
		|	УменьшениеОплачивается.Организация                    КАК Организация,
		|	УменьшениеОплачивается.Контрагент                     КАК Контрагент,
		|	УменьшениеОплачивается.Договор                        КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики          КАК НаправлениеДеятельности,
		|	Неопределено                                          КАК КорПартнер,
		|	Неопределено                                          КАК КорОрганизация,
		|	Неопределено                                          КАК КорКонтрагент,
		|	Неопределено                                          КАК КорДоговор,
		|	Неопределено                                          КАК КорНаправлениеДеятельности,
		|	УменьшениеОплачивается.НомерРегистратора              КАК НомерРегистратора
		|ИЗ
		|	#УменьшениеОплачивается КАК УменьшениеОплачивается
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УменьшениеОплачивается.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УменьшениеОплачивается.Организация = Аналитика.Организация
		|				И УменьшениеОплачивается.Контрагент = Аналитика.Контрагент
		|				И УменьшениеОплачивается.Партнер = Аналитика.Партнер
		|				И УменьшениеОплачивается.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&Оплачивается <> 0
		|	И УменьшениеОплачивается.ОбъектРасчетов.Объект <> УменьшениеОплачивается.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	УменьшениеОплачивается.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеОплачивается.ОбъектРасчетов,
		|	УменьшениеОплачивается.ВалютаВзаиморасчетов,
		|	УменьшениеОплачивается.ХозяйственнаяОперация,
		|	УменьшениеОплачивается.ФормаОплаты,
		|	&СчетНаОплату,
		|	УменьшениеОплачивается.СтатьяДвиженияДенежныхСредств,
		|	УменьшениеОплачивается.ВалютаДокумента,
		|	УменьшениеОплачивается.Партнер,
		|	УменьшениеОплачивается.Организация,
		|	УменьшениеОплачивается.Контрагент,
		|	УменьшениеОплачивается.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеОплачивается.НомерРегистратора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Оплачивается", Оплачивается);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СчетНаОплату", СчетНаОплату);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьОтгружается(Операция)
	
	Если Операция = "ЗаказКлиента" Тогда
		
		ЭтоЗаказ = "ИСТИНА";
		ЭтоНакладная = "ЛОЖЬ";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		
	ИначеЕсли Операция = "Продажа" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ИСТИНА";
		НакладнаяПоЗаказам = "УвеличениеОтгружается.НакладнаяПоЗаказам";
		
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	УвеличениеОтгружается.ДатаОтгрузки                  КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)              КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)     КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеОтгружается.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	УвеличениеОтгружается.ВалютаВзаиморасчетов          КАК Валюта,
		|	
		|	0                                                   КАК Сумма,
		|	0                                                   КАК КОплате,
		|	0                                                   КАК Оплачивается,
		|	0                                                   КАК КОтгрузке,
		|	СУММА(УвеличениеОтгружается.Отгружается)            КАК Отгружается,
		|	
		|	УвеличениеОтгружается.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
		|	Неопределено                                        КАК ФормаОплаты,
		|	Неопределено                                        КАК СчетНаОплату,
		|	Неопределено                                        КАК ПродажаПоЗаказу,
		|	УвеличениеОтгружается.ДатаРегистратора              КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                    КАК ДатаПлатежа,
		|	0                                                   КАК СуммаРегл,
		|	0                                                   КАК СуммаУпр,
		|	ИСТИНА                                              КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(Договоры.ДопустимаяСуммаЗадолженности, 0)  КАК ДопустимаяСуммаЗадолженности,
		|	0                                                   КАК ЗалогЗаТару,
		|	Неопределено                                        КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                        КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                          КАК СвязанныйДокумент,
		|	Неопределено                                          КАК ВариантОплаты,
		|	УвеличениеОтгружается.ВалютаДокумента                 КАК ВалютаДокумента,
		|	Неопределено                                          КАК КорОбъектРасчетов,
		|	Неопределено                                          КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеОтгружается.Партнер                         КАК Партнер,
		|	УвеличениеОтгружается.Организация                     КАК Организация,
		|	УвеличениеОтгружается.Контрагент                      КАК Контрагент,
		|	УвеличениеОтгружается.Договор                         КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики          КАК НаправлениеДеятельности,
		|	Неопределено                                          КАК КорПартнер,
		|	Неопределено                                          КАК КорОрганизация,
		|	Неопределено                                          КАК КорКонтрагент,
		|	Неопределено                                          КАК КорДоговор,
		|	Неопределено                                          КАК КорНаправлениеДеятельности,
		|	УвеличениеОтгружается.НомерРегистратора               КАК НомерРегистратора
		|ИЗ
		|	#УвеличениеОтгружается КАК УвеличениеОтгружается
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УвеличениеОтгружается.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|			ПО Договоры.Ссылка = УвеличениеОтгружается.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УвеличениеОтгружается.Организация = Аналитика.Организация
		|				И УвеличениеОтгружается.Контрагент = Аналитика.Контрагент
		|				И УвеличениеОтгружается.Партнер = Аналитика.Партнер
		|				И УвеличениеОтгружается.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УвеличениеОтгружается.Отгружается <> 0 
		|	И (&ЭтоЗаказ И УвеличениеОтгружается.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ &ЭтоНакладная И (УвеличениеОтгружается.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|			ИЛИ НЕ &НакладнаяПоЗаказам))
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеОтгружается.ДатаОтгрузки,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеОтгружается.ОбъектРасчетов,
		|	УвеличениеОтгружается.ВалютаВзаиморасчетов,
		|	УвеличениеОтгружается.ХозяйственнаяОперация,
		|	УвеличениеОтгружается.ДатаРегистратора,
		|	ЕСТЬNULL(Договоры.ДопустимаяСуммаЗадолженности, 0),
		|	УвеличениеОтгружается.ВалютаДокумента,
		|	УвеличениеОтгружается.Партнер,
		|	УвеличениеОтгружается.Организация,
		|	УвеличениеОтгружается.Контрагент,
		|	УвеличениеОтгружается.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеОтгружается.НомерРегистратора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоЗаказ", ЭтоЗаказ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоНакладная", ЭтоНакладная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НакладнаяПоЗаказам", НакладнаяПоЗаказам);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьОтгружается(Запрос)
	
	Если НЕ Запрос.Параметры.Свойство("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	КонецЕсли;
	
	Возврат 
		"ВЫБРАТЬ
		|	УменьшениеОтгружается.ДатаРегистратора              КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)              КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)     КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеОтгружается.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	УменьшениеОтгружается.ВалютаВзаиморасчетов          КАК Валюта,
		|	
		|	0                                                   КАК Сумма,
		|	0                                                   КАК КОплате,
		|	0                                                   КАК Оплачивается,
		|	0                                                   КАК КОтгрузке,
		|	СУММА(УменьшениеОтгружается.Отгружается)            КАК Отгружается,
		|	
		|	УменьшениеОтгружается.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
		|	Неопределено                                        КАК ФормаОплаты,
		|	Неопределено                                        КАК СчетНаОплату,
		|	УменьшениеОтгружается.ЗаказПродажи                  КАК ПродажаПоЗаказу,
		|	УменьшениеОтгружается.ДатаРегистратора              КАК ДатаРегистратора,
		|	УменьшениеОтгружается.ДатаПлатежа                   КАК ДатаПлатежа,
		|	0                                                   КАК СуммаРегл,
		|	0                                                   КАК СуммаУпр,
		|	ИСТИНА                                              КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(Договоры.ДопустимаяСуммаЗадолженности, 0)  КАК ДопустимаяСуммаЗадолженности,
		|	0                                                   КАК ЗалогЗаТару,
		|	Неопределено                                        КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                        КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                        КАК СвязанныйДокумент,
		|	Неопределено                                        КАК ВариантОплаты,
		|	УменьшениеОтгружается.ВалютаДокумента               КАК ВалютаДокумента,
		|	Неопределено                                        КАК КорОбъектРасчетов,
		|	Неопределено                                        КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеОтгружается.Партнер                       КАК Партнер,
		|	УменьшениеОтгружается.Организация                   КАК Организация,
		|	УменьшениеОтгружается.Контрагент                    КАК Контрагент,
		|	УменьшениеОтгружается.Договор                       КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики        КАК НаправлениеДеятельности,
		|	Неопределено                                        КАК КорПартнер,
		|	Неопределено                                        КАК КорОрганизация,
		|	Неопределено                                        КАК КорКонтрагент,
		|	Неопределено                                        КАК КорДоговор,
		|	Неопределено                                        КАК КорНаправлениеДеятельности,
		|	УменьшениеОтгружается.НомерРегистратора             КАК НомерРегистратора
		|ИЗ
		|	#УменьшениеОтгружается КАК УменьшениеОтгружается
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УменьшениеОтгружается.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|			ПО Договоры.Ссылка = УменьшениеОтгружается.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УменьшениеОтгружается.Организация = Аналитика.Организация
		|				И УменьшениеОтгружается.Контрагент = Аналитика.Контрагент
		|				И УменьшениеОтгружается.Партнер = Аналитика.Партнер
		|				И УменьшениеОтгружается.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УменьшениеОтгружается.Отгружается <> 0
		|	И УменьшениеОтгружается.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|	И УменьшениеОтгружается.НакладнаяПоЗаказам
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	И НЕ УменьшениеОтгружается.СверхЗаказа
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеОтгружается.ОбъектРасчетов,
		|	УменьшениеОтгружается.ЗаказПродажи,
		|	УменьшениеОтгружается.ДатаПлатежа,
		|	УменьшениеОтгружается.ВалютаВзаиморасчетов,
		|	УменьшениеОтгружается.ХозяйственнаяОперация,
		|	УменьшениеОтгружается.ДатаРегистратора,
		|	ЕСТЬNULL(Договоры.ДопустимаяСуммаЗадолженности, 0),
		|	УменьшениеОтгружается.ВариантОплаты,
		|	УменьшениеОтгружается.ВалютаДокумента,
		|	УменьшениеОтгружается.Партнер,
		|	УменьшениеОтгружается.Организация,
		|	УменьшениеОтгружается.Контрагент,
		|	УменьшениеОтгружается.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеОтгружается.НомерРегистратора";
КонецФункции

Функция УвеличитьПланОтгрузкиКлиенту(Запрос, Операция)
	
	Если НЕ Запрос.Параметры.Свойство("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	КонецЕсли;
	
	Если Операция = "ГрафикИсполненияКлиент" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ЛОЖЬ";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		СверхЗаказа = "ЛОЖЬ";
		ЗаказПродажи = "Неопределено";
		ПорядокРасчетов = "ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		
	ИначеЕсли Операция = "ЗаказКлиента" Тогда
		
		ЭтоЗаказ = "ИСТИНА";
		ЭтоНакладная = "ЛОЖЬ";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		СверхЗаказа = "ЛОЖЬ";
		ЗаказПродажи = "Неопределено";
		ПорядокРасчетов = "УвеличениеПланаОтгрузкиКлиенту.ПорядокРасчетов";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		
	ИначеЕсли Операция = "Продажа" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ИСТИНА";
		НакладнаяПоЗаказам = "УвеличениеПланаОтгрузкиКлиенту.НакладнаяПоЗаказам";
		СверхЗаказа = "УвеличениеПланаОтгрузкиКлиенту.СверхЗаказа";
		ЗаказПродажи = "УвеличениеПланаОтгрузкиКлиенту.ЗаказПродажи";
		ПорядокРасчетов = "УвеличениеПланаОтгрузкиКлиенту.ПорядокРасчетов";
		ДатаПлатежа = "УвеличениеПланаОтгрузкиКлиенту.ДатаРегистратора";
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УвеличениеПланаОтгрузкиКлиенту.ДатаОтгрузки             КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                  КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)         КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов           КАК ОбъектРасчетов,
		|	УвеличениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов     КАК Валюта,
		|	
		|	0                                                       КАК Сумма,
		|	0                                                       КАК КОплате,
		|	0                                                       КАК Оплачивается,
		|	СУММА(УвеличениеПланаОтгрузкиКлиенту.КОтгрузке)         КАК КОтгрузке,
		|	0                                                       КАК Отгружается,
		|
		|	УвеличениеПланаОтгрузкиКлиенту.ХозяйственнаяОперация    КАК ХозяйственнаяОперация,
		|	Неопределено                                            КАК ФормаОплаты,
		|	Неопределено                                            КАК СчетНаОплату,
		|	&ЗаказПродажи                                           КАК ПродажаПоЗаказу,
		|	УвеличениеПланаОтгрузкиКлиенту.ДатаРегистратора         КАК ДатаРегистратора,
		|	&ДатаПлатежа                                            КАК ДатаПлатежа,
		|	0                                                       КАК СуммаРегл,
		|	0                                                       КАК СуммаУпр,
		|	ИСТИНА                                                  КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДоговорыСумма.ДопустимаяСуммаЗадолженности, 0) КАК ДопустимаяСуммаЗадолженности,
		|	0                                                       КАК ЗалогЗаТару,
		|	Неопределено                                            КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                            КАК РасчетныйДокумент,
		|	//ПорядокОплаты
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                            КАК СвязанныйДокумент,
		|	Неопределено                                            КАК ВариантОплаты,
		|	УвеличениеПланаОтгрузкиКлиенту.ВалютаДокумента          КАК ВалютаДокумента,
		|	Неопределено                                            КАК КорОбъектРасчетов,
		|	Неопределено                                            КАК КорАналитикаУчетаПоПартнерам,
		|
		|	УвеличениеПланаОтгрузкиКлиенту.Партнер                  КАК Партнер,
		|	УвеличениеПланаОтгрузкиКлиенту.Организация              КАК Организация,
		|	УвеличениеПланаОтгрузкиКлиенту.Контрагент               КАК Контрагент,
		|	УвеличениеПланаОтгрузкиКлиенту.Договор                  КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики            КАК НаправлениеДеятельности,
		|	Неопределено                                            КАК КорПартнер,
		|	Неопределено                                            КАК КорОрганизация,
		|	Неопределено                                            КАК КорКонтрагент,
		|	Неопределено                                            КАК КорДоговор,
		|	Неопределено                                            КАК КорНаправлениеДеятельности,
		|	УвеличениеПланаОтгрузкиКлиенту.НомерРегистратора        КАК НомерРегистратора
		|ИЗ
		|	#УвеличениеПланаОтгрузкиКлиенту КАК УвеличениеПланаОтгрузкиКлиенту
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УвеличениеПланаОтгрузкиКлиенту.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыСумма
		|			ПО ДоговорыСумма.Ссылка = УвеличениеПланаОтгрузкиКлиенту.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УвеличениеПланаОтгрузкиКлиенту.Организация = Аналитика.Организация
		|				И УвеличениеПланаОтгрузкиКлиенту.Контрагент = Аналитика.Контрагент
		|				И УвеличениеПланаОтгрузкиКлиенту.Партнер = Аналитика.Партнер
		|				И УвеличениеПланаОтгрузкиКлиенту.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	НЕ ((&ЭтоЗаказ ИЛИ &ЭтоНакладная) 
		|		И ЕСТЬNULL(ДоговорыСумма.ЗаданГрафикИсполнения, ЛОЖЬ) 
		|		И &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|		И НЕ &СверхЗаказа)
		|	И УвеличениеПланаОтгрузкиКлиенту.КОтгрузке <> 0
		|	И (&ЭтоЗаказ 
		|			И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ &НакладнаяПоЗаказам
		|			И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|			И &СверхЗаказа
		|			И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|		ИЛИ НЕ (&ЭтоЗаказ ИЛИ &ЭтоНакладная))
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеПланаОтгрузкиКлиенту.ДатаОтгрузки,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов,
		|	УвеличениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов,
		|	УвеличениеПланаОтгрузкиКлиенту.ХозяйственнаяОперация,
		|	&ЗаказПродажи,
		|	УвеличениеПланаОтгрузкиКлиенту.ДатаРегистратора,
		|	УвеличениеПланаОтгрузкиКлиенту.НомерРегистратора,
		|	ЕСТЬNULL(ДоговорыСумма.ДопустимаяСуммаЗадолженности, 0),
		|	УвеличениеПланаОтгрузкиКлиенту.ВалютаДокумента,
		|	УвеличениеПланаОтгрузкиКлиенту.Партнер,
		|	УвеличениеПланаОтгрузкиКлиенту.Организация,
		|	УвеличениеПланаОтгрузкиКлиенту.Контрагент,
		|	УвеличениеПланаОтгрузкиКлиенту.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоЗаказ",           ЭтоЗаказ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоНакладная",       ЭтоНакладная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НакладнаяПоЗаказам", НакладнаяПоЗаказам);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СверхЗаказа",        СверхЗаказа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказПродажи",       ЗаказПродажи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПорядокРасчетов",    ПорядокРасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",        ДатаПлатежа);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьПланОтгрузкиКлиенту(Запрос)
	
	Если НЕ Запрос.Параметры.Свойство("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	КонецЕсли;
	
	ТекстКОтгрузке = "
		|ВЫБРАТЬ
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора                 КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                          КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                 КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов                   КАК ОбъектРасчетов,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов             КАК Валюта,
		|	
		|	0                                                               КАК Сумма,
		|	0                                                               КАК КОплате,
		|	0                                                               КАК Оплачивается,
		|	СУММА(УменьшениеПланаОтгрузкиКлиенту.УменьшениеКОтгрузке)       КАК КОтгрузке,
		|	0                                                               КАК Отгружается,
		|	
		|	УменьшениеПланаОтгрузкиКлиенту.ХозяйственнаяОперация            КАК ХозяйственнаяОперация,
		|	Неопределено                                                    КАК ФормаОплаты,
		|	Неопределено                                                    КАК СчетНаОплату,
		|	УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи                     КАК ПродажаПоЗаказу,
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора                 КАК ДатаРегистратора,
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора                 КАК ДатаПлатежа,
		|	0                                                               КАК СуммаРегл,
		|	0                                                               КАК СуммаУпр,
		|	ИСТИНА                                                          КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДоговорыСуммы.ДопустимаяСуммаЗадолженности, 0)         КАК ДопустимаяСуммаЗадолженности,
		|	0                                                               КАК ЗалогЗаТару,
		|	Неопределено                                                    КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                    КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                                    КАК СвязанныйДокумент,
		|	Неопределено                                                    КАК ВариантОплаты,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаДокумента                  КАК ВалютаДокумента,
		|	Неопределено                                                    КАК КорОбъектРасчетов,
		|	Неопределено                                                    КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеПланаОтгрузкиКлиенту.Партнер                          КАК Партнер,
		|	УменьшениеПланаОтгрузкиКлиенту.Организация                      КАК Организация,
		|	УменьшениеПланаОтгрузкиКлиенту.Контрагент                       КАК Контрагент,
		|	УменьшениеПланаОтгрузкиКлиенту.Договор                          КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                    КАК НаправлениеДеятельности,
		|	Неопределено                                                    КАК КорПартнер,
		|	Неопределено                                                    КАК КорОрганизация,
		|	Неопределено                                                    КАК КорКонтрагент,
		|	Неопределено                                                    КАК КорДоговор,
		|	Неопределено                                                    КАК КорНаправлениеДеятельности,
		|	УменьшениеПланаОтгрузкиКлиенту.НомерРегистратора                КАК НомерРегистратора
		|ИЗ
		|	#УменьшениеПланаОтгрузкиКлиенту КАК УменьшениеПланаОтгрузкиКлиенту
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УменьшениеПланаОтгрузкиКлиенту.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыСуммы
		|			ПО ДоговорыСуммы.Ссылка = УменьшениеПланаОтгрузкиКлиенту.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УменьшениеПланаОтгрузкиКлиенту.Организация = Аналитика.Организация
		|				И УменьшениеПланаОтгрузкиКлиенту.Контрагент = Аналитика.Контрагент
		|				И УменьшениеПланаОтгрузкиКлиенту.Партнер = Аналитика.Партнер
		|				И УменьшениеПланаОтгрузкиКлиенту.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	(ЕСТЬNULL(ДоговорыСуммы.ЗаданГрафикИсполнения, ЛОЖЬ) И УменьшениеПланаОтгрузкиКлиенту.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|		ИЛИ УменьшениеПланаОтгрузкиКлиенту.НакладнаяПоЗаказам И &ИспользоватьРасширенныеВозможностиЗаказаКлиента)
		|	И УменьшениеПланаОтгрузкиКлиенту.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|	И УменьшениеПланаОтгрузкиКлиенту.УменьшениеКОтгрузке <> 0 
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов,
		|	УменьшениеПланаОтгрузкиКлиенту.ХозяйственнаяОперация,
		|	УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи,
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора,
		|	ЕСТЬNULL(ДоговорыСуммы.ДопустимаяСуммаЗадолженности, 0),
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаДокумента,
		|	УменьшениеПланаОтгрузкиКлиенту.Партнер,
		|	УменьшениеПланаОтгрузкиКлиенту.Организация,
		|	УменьшениеПланаОтгрузкиКлиенту.Контрагент,
		|	УменьшениеПланаОтгрузкиКлиенту.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеПланаОтгрузкиКлиенту.НомерРегистратора";
		
		Возврат ТекстКОтгрузке;
КонецФункции

#КонецОбласти

#Область РасчетыСПоставщиками

Функция ОтразитьПереносРасчетовСПоставщиком(Запрос, Операция)
	
	Если НЕ Запрос.Параметры.Свойство("ОбъектРасчетовАванс") Тогда
		ОбъектРасчетовАванс = Метаданные.ОпределяемыеТипы.ОбъектРасчетовАванс.Тип.Типы();
		Запрос.УстановитьПараметр("ОбъектРасчетовАванс", ОбъектРасчетовАванс);
	КонецЕсли;
	
	Если Операция = "Закупка" Тогда
		
		КредиторскаяЗадолженность = "ЛОЖЬ"; // что в источнике
		СторноИсточник = "ЛОЖЬ";
		СторноПриемник = "ЛОЖЬ";
		ЗаполнятьКорОбъект = "ИСТИНА";
		
		УсловиеОперации = "
		|	(ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
		|		ИЛИ ТаблицаРасшифровкаПлатежаПоставщик.Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) 
		|			И ТИПЗНАЧЕНИЯ(ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник.Объект) = ТИПЗНАЧЕНИЯ(ТаблицаРасшифровкаПлатежаПоставщик.Ссылка))";
		
		ОбъектРасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник";
		ОбъектРасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник";
		
		ПартнерИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник.Партнер";
		ОрганизацияИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.Организация";
		КонтрагентИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.Контрагент";
		ДоговорИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.Договор";
		НаправлениеДеятельностиИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.НаправлениеДеятельности";
		
		ПартнерПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.Партнер";
		ОрганизацияПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.Организация";
		КонтрагентПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.Контрагент";
		ДоговорПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.Договор";
		НаправлениеДеятельностиПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.НаправлениеДеятельности";
		
		ФормаОплаты = "Неопределено";
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаВзаиморасчетов";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		ДатаПлатежа = "ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора";
		
		ВариантОплаты = "ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления)";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		
	ИначеЕсли Операция = "ВозвратОплатыОтПоставщика" Тогда
		
		КредиторскаяЗадолженность = "ИСТИНА";
		СторноИсточник = "ЛОЖЬ";
		СторноПриемник = "ИСТИНА";
		ЗаполнятьКорОбъект = "ЛОЖЬ";
		
		УсловиеОперации = "ИСТИНА";
		
		ОбъектРасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник";
		ОбъектРасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник";
		
		ПартнерИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ПартнерИсточник";
		ОрганизацияИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ОрганизацияИсточник";
		КонтрагентИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.Контрагент";
		ДоговорИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ДоговорИсточник";
		НаправлениеДеятельностиИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.НаправлениеДеятельностиИсточник";
		
		ПартнерПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ПартнерПриемник";
		ОрганизацияПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ОрганизацияПриемник";
		КонтрагентПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.Контрагент";
		ДоговорПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ДоговорПриемник";
		НаправлениеДеятельностиПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.НаправлениеДеятельностиПриемник";
		
		ФормаОплаты = "ТаблицаРасшифровкаПлатежаПоставщик.ФормаОплаты";
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаВзаиморасчетов";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		ДатаПлатежа = "Неопределено";
		ВариантОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "ТаблицаРасшифровкаПлатежаПоставщик.СтатьяДвиженияДенежныхСредств";
		
	ИначеЕсли Операция = "ВозвратТоваровПоставщику" Тогда
		
		КредиторскаяЗадолженность = "ЛОЖЬ";
		СторноИсточник = "ЛОЖЬ";
		СторноПриемник = "ЛОЖЬ";
		ЗаполнятьКорОбъект = "ИСТИНА";
		
		УсловиеОперации = "ИСТИНА";
		
		ОбъектРасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник";
		ОбъектРасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник";
		
		ПартнерИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.Партнер";
		ОрганизацияИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.Организация";
		КонтрагентИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.Контрагент";
		ДоговорИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ДоговорИсточник";
		НаправлениеДеятельностиИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.НаправлениеДеятельностиИсточник";
		
		ПартнерПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.Партнер";
		ОрганизацияПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.Организация";
		КонтрагентПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.Контрагент";
		ДоговорПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ДоговорПриемник";
		НаправлениеДеятельностиПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.НаправлениеДеятельностиПриемник";
		
		ФормаОплаты = "Неопределено";
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.Сумма";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.Сумма";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		ДатаПлатежа = "Неопределено";
		ВариантОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
	КонецЕсли;
		
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора      КАК Период,
		|	ВЫБОР
		|		КОГДА НЕ &СторноИсточник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноИсточник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ                                                    КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено)  КАК АналитикаУчетаПоПартнерам,
		|	&ОбъектРасчетовИсточник                                  КАК ОбъектРасчетов,
		|	&ВалютаВзаиморасчетовИсточник                            КАК Валюта,
		|	
		|	СУММА(&СуммаВзаиморасчетовИсточник *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ)  КАК Сумма,
		|	0                                                        КАК Оплачивается,
		|	СУММА(&КОплатеИсточник *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ)  КАК КОплате,
		|	0                                                        КАК КПоступлению,
		|	
		|	ТаблицаРасшифровкаПлатежаПоставщик.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                             КАК ФормаОплаты,
		|	Неопределено                                             КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Неопределено                                             КАК ЗакупкаПоЗаказу,
		|	ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора      КАК ДатаРегистратора,
		|	&ДатаПлатежа                                             КАК ДатаПлатежа,
		|	
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовИсточник = &ВалютаРегламентированногоУчета
		|				ТОГДА &СуммаВзаиморасчетовИсточник
		|			КОГДА ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента = &ВалютаРегламентированногоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежаПоставщик.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежаПоставщик.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовИсточник = &ВалютаУправленческогоУчета
		|				ТОГДА &СуммаВзаиморасчетовИсточник
		|			КОГДА ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежаПоставщик.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежаПоставщик.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК СуммаУпр,
		|
		|	0                                                       КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                          КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                            КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                            КАК СвязанныйДокумент,
		|	&ВариантОплаты                                          КАК ВариантОплаты,
		|	ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента      КАК ВалютаДокумента,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ОбъектРасчетовПриемник
		|	КОНЕЦ                                                   КАК КорОбъектРасчетов,
		|	ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено) КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	&ПартнерИсточник                                        КАК Партнер,
		|	&ОрганизацияИсточник                                    КАК Организация,
		|	&КонтрагентИсточник                                     КАК Контрагент,
		|	&ДоговорИсточник                                        КАК Договор,
		|	НаправленияДеятельностиИсточник.НаправлениеАналитики    КАК НаправлениеДеятельности,
		|
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ПартнерПриемник
		|	КОНЕЦ                                                   КАК КорПартнер,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ОрганизацияПриемник
		|	КОНЕЦ                                                   КАК КорОрганизация,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &КонтрагентПриемник
		|	КОНЕЦ                                                   КАК КорКонтрагент,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ДоговорПриемник
		|	КОНЕЦ                                                   КАК КорДоговор,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ НаправленияДеятельностиПриемник.НаправлениеАналитики
		|	КОНЕЦ                                                   КАК КорНаправлениеДеятельности,
		|	ТаблицаРасшифровкаПлатежаПоставщик.НомерРегистратора    КАК НомерРегистратора
		|ИЗ
		|	#ТаблицаРасшифровкаПлатежаПоставщик КАК ТаблицаРасшифровкаПлатежаПоставщик
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельностиИсточник
		|			ПО &НаправлениеДеятельностиИсточник = НаправленияДеятельностиИсточник.НаправлениеДеятельности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельностиПриемник
		|			ПО &НаправлениеДеятельностиПриемник = НаправленияДеятельностиПриемник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаИсточник
		|			ПО &ОрганизацияИсточник = АналитикаИсточник.Организация
		|				И &КонтрагентИсточник = АналитикаИсточник.Контрагент
		|				И &ПартнерИсточник = АналитикаИсточник.Партнер
		|				И &ДоговорИсточник = АналитикаИсточник.Договор
		|				И НаправленияДеятельностиИсточник.НаправлениеАналитики = АналитикаИсточник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПриемник
		|			ПО &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|				И &ОрганизацияПриемник = АналитикаПриемник.Организация
		|				И &КонтрагентПриемник = АналитикаПриемник.Контрагент
		|				И &ПартнерПриемник = АналитикаПриемник.Партнер
		|				И &ДоговорПриемник = АналитикаПриемник.Договор
		|				И НаправленияДеятельностиПриемник.НаправлениеАналитики = АналитикаПриемник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютПоставщик КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = ТаблицаРасшифровкаПлатежаПоставщик.Ссылка
		|				И Коэффициенты.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетовИсточник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыСуммы
		|			ПО ДоговорыСуммы.Ссылка = &ДоговорИсточник
		|ГДЕ
		|	&ОбъектРасчетовИсточник <> &ОбъектРасчетовПриемник
		|	И &СуммаВзаиморасчетовИсточник > 0
		|	И &УсловиеОперации
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора,
		|	ВЫБОР
		|		КОГДА НЕ &СторноИсточник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноИсточник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ,
		|	ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено),
		|	&ОбъектРасчетовИсточник,
		|	&ВалютаВзаиморасчетовИсточник,
		|	ТаблицаРасшифровкаПлатежаПоставщик.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	ЕСТЬNULL(ДоговорыСуммы.ДопустимаяСуммаЗадолженности, 0),
		|	ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ОбъектРасчетовПриемник
		|	КОНЕЦ,
		|	ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено),
		|	&ПартнерИсточник,
		|	&ОрганизацияИсточник,
		|	&КонтрагентИсточник,
		|	&ДоговорИсточник,
		|	НаправленияДеятельностиИсточник.НаправлениеАналитики,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ПартнерПриемник
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ОрганизацияПриемник
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &КонтрагентПриемник
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ДоговорПриемник
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ НаправленияДеятельностиПриемник.НаправлениеАналитики
		|	КОНЕЦ,
		|	ТаблицаРасшифровкаПлатежаПоставщик.НомерРегистратора,
		|	&СтатьяДвиженияДенежныхСредств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора      КАК Период,
		|	ВЫБОР
		|		КОГДА НЕ &СторноПриемник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноПриемник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	КОНЕЦ                                                    КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено)  КАК АналитикаУчетаПоПартнерам,
		|	&ОбъектРасчетовПриемник                                  КАК ОбъектРасчетов,
		|	&ВалютаВзаиморасчетовПриемник                            КАК Валюта,
		|	
		|	СУММА(&СуммаВзаиморасчетовПриемник *
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ)  КАК Сумма,
		|	0                                                        КАК Оплачивается,
		|	СУММА(&КОплатеПриемник *
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ)  КАК КОплате,
		|	0                                                        КАК КПоступлению,
		|	
		|	ТаблицаРасшифровкаПлатежаПоставщик.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                             КАК ФормаОплаты,
		|	Неопределено                                             КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Неопределено                                             КАК ЗакупкаПоЗаказу,
		|	ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора      КАК ДатаРегистратора,
		|	&ДатаПлатежа                                             КАК ДатаПлатежа,
		|	
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовПриемник = &ВалютаРегламентированногоУчета
		|				ТОГДА &СуммаВзаиморасчетовПриемник
		|			КОГДА ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента = &ВалютаРегламентированногоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежаПоставщик.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежаПоставщик.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ*
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ)          КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовПриемник = &ВалютаУправленческогоУчета
		|				ТОГДА &СуммаВзаиморасчетовПриемник
		|			КОГДА ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежаПоставщик.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежаПоставщик.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ*
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ)          КАК СуммаУпр,
		|
		|	0                                                        КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                           КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                             КАК РасчетныйДокумент,
		|	//ПорядокОперации
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                             КАК СвязанныйДокумент,
		|	&ВариантОплаты                                           КАК ВариантОплаты,
		|	ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента       КАК ВалютаДокумента,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ОбъектРасчетовИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                    КАК КорОбъектРасчетов,
		|	ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено)  КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	&ПартнерПриемник                                                 КАК Партнер,
		|	&ОрганизацияПриемник                                             КАК Организация,
		|	&КонтрагентПриемник                                              КАК Контрагент,
		|	&ДоговорПриемник                                                 КАК Договор,
		|	НаправленияДеятельностиПриемник.НаправлениеАналитики             КАК НаправлениеДеятельности,
		|
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ПартнерИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                            КАК КорПартнер,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ОрганизацияИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                            КАК КорОрганизация,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &КонтрагентИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                            КАК КорКонтрагент,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ДоговорИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                            КАК КорДоговор,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА НаправленияДеятельностиИсточник.НаправлениеАналитики
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                            КАК КорНаправлениеДеятельности,
		|
		|	ТаблицаРасшифровкаПлатежаПоставщик.НомерРегистратора             КАК НомерРегистратора
		|ИЗ
		|	#ТаблицаРасшифровкаПлатежаПоставщик КАК ТаблицаРасшифровкаПлатежаПоставщик
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельностиИсточник
		|			ПО &НаправлениеДеятельностиИсточник = НаправленияДеятельностиИсточник.НаправлениеДеятельности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельностиПриемник
		|			ПО &НаправлениеДеятельностиПриемник = НаправленияДеятельностиПриемник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПриемник
		|			ПО &ОрганизацияПриемник = АналитикаПриемник.Организация
		|				И &КонтрагентПриемник = АналитикаПриемник.Контрагент
		|				И &ПартнерПриемник = АналитикаПриемник.Партнер
		|				И &ДоговорПриемник = АналитикаПриемник.Договор
		|				И НаправленияДеятельностиПриемник.НаправлениеАналитики = АналитикаПриемник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаИсточник
		|			ПО НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|				И &ОрганизацияИсточник = АналитикаИсточник.Организация
		|				И &КонтрагентИсточник = АналитикаИсточник.Контрагент
		|				И &ПартнерИсточник = АналитикаИсточник.Партнер
		|				И &ДоговорИсточник = АналитикаИсточник.Договор
		|				И НаправленияДеятельностиИсточник.НаправлениеАналитики = АналитикаИсточник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютПоставщик КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = ТаблицаРасшифровкаПлатежаПоставщик.Ссылка
		|				И Коэффициенты.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетовПриемник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыСуммы
		|			ПО ДоговорыСуммы.Ссылка = &ДоговорПриемник
		|ГДЕ
		|	&ОбъектРасчетовИсточник <> &ОбъектРасчетовПриемник
		|	И &СуммаВзаиморасчетовПриемник > 0
		|	И &УсловиеОперации
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора,
		|	ВЫБОР
		|		КОГДА НЕ &СторноПриемник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноПриемник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	КОНЕЦ,
		|	ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено),
		|	&ОбъектРасчетовПриемник,
		|	&ВалютаВзаиморасчетовПриемник,
		|	ТаблицаРасшифровкаПлатежаПоставщик.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	ЕСТЬNULL(ДоговорыСуммы.ДопустимаяСуммаЗадолженности, 0),
		|	ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ОбъектРасчетовИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено),
		|	&ПартнерПриемник,
		|	&ОрганизацияПриемник,
		|	&КонтрагентПриемник,
		|	&ДоговорПриемник,
		|	НаправленияДеятельностиПриемник.НаправлениеАналитики,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ПартнерИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ОрганизацияИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &КонтрагентИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ДоговорИсточник
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА НаправленияДеятельностиИсточник.НаправлениеАналитики
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ТаблицаРасшифровкаПлатежаПоставщик.НомерРегистратора,
		|	&СтатьяДвиженияДенежныхСредств";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОперации",УсловиеОперации);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КредиторскаяЗадолженность",       КредиторскаяЗадолженность);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СторноИсточник",                  СторноИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СторноПриемник",                  СторноПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОбъектРасчетовИсточник",          ОбъектРасчетовИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПартнерИсточник",                 ПартнерИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОрганизацияИсточник",             ОрганизацияИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КонтрагентИсточник",              КонтрагентИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДоговорИсточник",                 ДоговорИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НаправлениеДеятельностиИсточник", НаправлениеДеятельностиИсточник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплатеИсточник",                 КОплатеИсточник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОбъектРасчетовПриемник",          ОбъектРасчетовПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПартнерПриемник",                 ПартнерПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОрганизацияПриемник",             ОрганизацияПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КонтрагентПриемник",              КонтрагентПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДоговорПриемник",                 ДоговорПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НаправлениеДеятельностиПриемник", НаправлениеДеятельностиПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                     ФормаОплаты);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплатеПриемник",                 КОплатеПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВалютаВзаиморасчетовИсточник",    ВалютаВзаиморасчетовИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВалютаВзаиморасчетовПриемник",    ВалютаВзаиморасчетовПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СуммаВзаиморасчетовИсточник",     СуммаВзаиморасчетовИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СуммаВзаиморасчетовПриемник",     СуммаВзаиморасчетовПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                     ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты",                   ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств",   СтатьяДвиженияДенежныхСредств);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаполнятьКорОбъект",              ЗаполнятьКорОбъект);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьПланОплатыПоставщику(Операция)
	
	Если Операция = "ГрафикИсполненияПоставщик" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ЛОЖЬ";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыПоставщику.ДатаПлатежа, ДЕНЬ)";
		
		ПорядокРасчетов = "ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		ЗаказЗакупки = "Неопределено";
		СверхЗаказа = "ЛОЖЬ";
		КОплате = "УвеличениеПланаОплатыПоставщику.КОплате";
		
		СвязанныйДокумент = "Неопределено";
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		ДатаПлатежа = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыПоставщику.ДатаПлатежа, ДЕНЬ)";
		ВариантОплаты = "УвеличениеПланаОплатыПоставщику.ВариантОплаты";
		
	ИначеЕсли Операция = "ЗаказПоставщику" Тогда
		
		ЭтоЗаказ = "ИСТИНА";
		ЭтоНакладная = "ЛОЖЬ";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыПоставщику.ДатаПлатежа)";
		
		ПорядокРасчетов = "УвеличениеПланаОплатыПоставщику.ПорядокРасчетов";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		ЗаказЗакупки = "Неопределено";
		СверхЗаказа = "ЛОЖЬ";
		
		КОплате = "УвеличениеПланаОплатыПоставщику.КОплате";
		
		СвязанныйДокумент = "Неопределено";
		ФормаОплаты = "УвеличениеПланаОплатыПоставщику.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		ДатаПлатежа = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыПоставщику.ДатаПлатежа)";
		ВариантОплаты = "УвеличениеПланаОплатыПоставщику.ВариантОплаты";
		
	ИначеЕсли Операция = "Закупка" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ИСТИНА";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыПоставщику.ДатаПлатежа, ДЕНЬ)";
		
		ПорядокРасчетов = "УвеличениеПланаОплатыПоставщику.ПорядокРасчетов";
		НакладнаяПоЗаказам = "УвеличениеПланаОплатыПоставщику.НакладнаяПоЗаказам";
		ЗаказЗакупки = "УвеличениеПланаОплатыПоставщику.ЗаказЗакупки";
		СверхЗаказа = "УвеличениеПланаОплатыПоставщику.СверхЗаказа";
		
		КОплате = "УвеличениеПланаОплатыПоставщику.КОплате";
		
		СвязанныйДокумент = "УвеличениеПланаОплатыПоставщику.СвязанныйДокумент";
		ФормаОплаты = "УвеличениеПланаОплатыПоставщику.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		ДатаПлатежа = "УвеличениеПланаОплатыПоставщику.ДатаПлатежа";
		ВариантОплаты = "Неопределено";
		
	ИначеЕсли Операция = "ВозвратОплатыОтПоставщика" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ЛОЖЬ";
		Период = "УвеличениеПланаОплатыПоставщику.ДатаРегистратора";
		
		ПорядокРасчетов = "Неопределено";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		ЗаказЗакупки = "Неопределено";
		СверхЗаказа = "ЛОЖЬ";
		
		КОплате = "УвеличениеПланаОплатыПоставщику.СуммаВзаиморасчетов";
		
		СвязанныйДокумент = "Неопределено";
		ФормаОплаты = "УвеличениеПланаОплатыПоставщику.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "УвеличениеПланаОплатыПоставщику.СтатьяДвиженияДенежныхСредств";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		ВариантОплаты = "Неопределено";
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Период                                                             КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                              КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                     КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеПланаОплатыПоставщику.ОбъектРасчетов                      КАК ОбъектРасчетов,
		|	УвеличениеПланаОплатыПоставщику.ВалютаВзаиморасчетов                КАК Валюта,
		|	
		|	0                                                                   КАК Сумма,
		|	0                                                                   КАК Оплачивается,
		|	СУММА(&КОплате)                                                     КАК КОплате,
		|	0                                                                   КАК КПоступлению,
		|	
		|	УвеличениеПланаОплатыПоставщику.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                                        КАК ФормаОплаты,
		|	Неопределено                                                        КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&ЗаказЗакупки                                                       КАК ЗакупкаПоЗаказу,
		|	УвеличениеПланаОплатыПоставщику.ДатаРегистратора                    КАК ДатаРегистратора,
		|	&ДатаПлатежа                                                        КАК ДатаПлатежа,
		|	0                                                                   КАК СуммаРегл,
		|	0                                                                   КАК СуммаУпр,
		|	0                                                                   КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                                      КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                        КАК РасчетныйДокумент,
		|	//Порядок оплаты
		|	//Порядок зачета по дате платежа
		|	&СвязанныйДокумент                                                  КАК СвязанныйДокумент,
		|	
		|	&ВариантОплаты                                                      КАК ВариантОплаты,
		|	УвеличениеПланаОплатыПоставщику.ВалютаДокумента                     КАК ВалютаДокумента,
		|	Неопределено                                                        КАК КорОбъектРасчетов,
		|	Неопределено                                                        КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеПланаОплатыПоставщику.Партнер                             КАК Партнер,
		|	УвеличениеПланаОплатыПоставщику.Организация                         КАК Организация,
		|	УвеличениеПланаОплатыПоставщику.Контрагент                          КАК Контрагент,
		|	УвеличениеПланаОплатыПоставщику.Договор                             КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                        КАК НаправлениеДеятельности,
		|	
		|	Неопределено                                                        КАК КорПартнер,
		|	Неопределено                                                        КАК КорОрганизация,
		|	Неопределено                                                        КАК КорКонтрагент,
		|	Неопределено                                                        КАК КорДоговор,
		|	Неопределено                                                        КАК КорНаправлениеДеятельности,
		|	УвеличениеПланаОплатыПоставщику.НомерРегистратора                   КАК НомерРегистратора
		|ИЗ
		|	#УвеличениеПланаОплатыПоставщику КАК УвеличениеПланаОплатыПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УвеличениеПланаОплатыПоставщику.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыГрафик
		|			ПО ДоговорыГрафик.Ссылка = УвеличениеПланаОплатыПоставщику.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УвеличениеПланаОплатыПоставщику.Организация = Аналитика.Организация
		|					И УвеличениеПланаОплатыПоставщику.Контрагент = Аналитика.Контрагент
		|					И УвеличениеПланаОплатыПоставщику.Партнер = Аналитика.Партнер
		|					И УвеличениеПланаОплатыПоставщику.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&КОплате <> 0
		|	И НЕ ((&ЭтоЗаказ ИЛИ &ЭтоНакладная)
		|			И ЕСТЬNULL(ДоговорыГрафик.ЗаданГрафикИсполнения, ЛОЖЬ)
		|			И &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
		|	И (&ЭтоЗаказ И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ &ЭтоНакладная И (&СверхЗаказа
		|							ИЛИ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|							ИЛИ НЕ &НакладнаяПоЗаказам)
		|		ИЛИ НЕ (&ЭтоНакладная ИЛИ &ЭтоЗаказ))
		|СГРУППИРОВАТЬ ПО
		|	&Период,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеПланаОплатыПоставщику.ОбъектРасчетов,
		|	УвеличениеПланаОплатыПоставщику.ВалютаВзаиморасчетов,
		|	УвеличениеПланаОплатыПоставщику.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&СтатьяДвиженияДенежныхСредств,
		|	УвеличениеПланаОплатыПоставщику.ДатаРегистратора,
		|	&ДатаПлатежа,
		|	&ВариантОплаты,
		|	&СвязанныйДокумент,
		|	&ЗаказЗакупки,
		|	УвеличениеПланаОплатыПоставщику.ВалютаДокумента,
		|	УвеличениеПланаОплатыПоставщику.Партнер,
		|	УвеличениеПланаОплатыПоставщику.Организация,
		|	УвеличениеПланаОплатыПоставщику.Контрагент,
		|	УвеличениеПланаОплатыПоставщику.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеПланаОплатыПоставщику.НомерРегистратора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПорядокРасчетов",               ПорядокРасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                   ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоЗаказ",                      ЭтоЗаказ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоНакладная",                  ЭтоНакладная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НакладнаяПоЗаказам",            НакладнаяПоЗаказам);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказЗакупки",                  ЗаказЗакупки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СверхЗаказа",                   СверхЗаказа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Период",                        Период);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплате",                       КОплате);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                   ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты",                 ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",             СвязанныйДокумент);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьПланОплатыПоставщику(Операция)
	
	Если Операция = "ОплатаПоставщику" Тогда
		
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		КОплате = "УменьшениеПланаОплатыПоставщику.СуммаВзаиморасчетов";
		ФормаОплаты = "УменьшениеПланаОплатыПоставщику.ФормаОплаты";
		ЗаявкаНаРасходованиеДенежныхСредств = "УменьшениеПланаОплатыПоставщику.ЗаявкаНаРасходованиеДенежныхСредств";
		СтатьяДвиженияДенежныхСредств = "УменьшениеПланаОплатыПоставщику.СтатьяДвиженияДенежныхСредств";
		СвязанныйДокумент = "УменьшениеПланаОплатыПоставщику.СвязанныйДокумент";
		
	ИначеЕсли Операция = "Закупка" Тогда
		
		ДатаПлатежа = "УменьшениеПланаОплатыПоставщику.ДатаРегистратора";
		КОплате = "УменьшениеПланаОплатыПоставщику.КОплате";
		ФормаОплаты = "Неопределено";
		ЗаявкаНаРасходованиеДенежныхСредств = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "Неопределено";
		
	ИначеЕсли Операция = "ВозвратТоваровПоставщику" Тогда
		
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		КОплате = "УменьшениеПланаОплатыПоставщику.СуммаВзаиморасчетов";
		ФормаОплаты = "Неопределено";
		ЗаявкаНаРасходованиеДенежныхСредств = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "Неопределено";
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УменьшениеПланаОплатыПоставщику.ДатаРегистратора                    КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                              КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                     КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеПланаОплатыПоставщику.ОбъектРасчетов                      КАК ОбъектРасчетов,
		|	УменьшениеПланаОплатыПоставщику.ВалютаВзаиморасчетов                КАК Валюта,
		|	
		|	0                                                                   КАК Сумма,
		|	0                                                                   КАК Оплачивается,
		|	СУММА(&КОплате)                                                     КАК КОплате,
		|	0                                                                   КАК КПоступлению,
		|	
		|	УменьшениеПланаОплатыПоставщику.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                                        КАК ФормаОплаты,
		|	&ЗаявкаНаРасходованиеДенежныхСредств                                КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Неопределено                                                        КАК ЗакупкаПоЗаказу,
		|	УменьшениеПланаОплатыПоставщику.ДатаРегистратора                    КАК ДатаРегистратора,
		|	&ДатаПлатежа                                                        КАК ДатаПлатежа,
		|	0                                                                   КАК СуммаРегл,
		|	0                                                                   КАК СуммаУпр,
		|	0                                                                   КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                                      КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                        КАК РасчетныйДокумент,
		|	//Порядок оплаты
		|	//Порядок зачета по дате платежа
		|	&СвязанныйДокумент                                                  КАК СвязанныйДокумент,
		|	Неопределено                                                        КАК ВариантОплаты,
		|	УменьшениеПланаОплатыПоставщику.ВалютаДокумента                     КАК ВалютаДокумента,
		|	Неопределено                                                        КАК КорОбъектРасчетов,
		|	Неопределено                                                        КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеПланаОплатыПоставщику.Партнер                             КАК Партнер,
		|	УменьшениеПланаОплатыПоставщику.Организация                         КАК Организация,
		|	УменьшениеПланаОплатыПоставщику.Контрагент                          КАК Контрагент,
		|	УменьшениеПланаОплатыПоставщику.Договор                             КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                        КАК НаправлениеДеятельности,
		|	
		|	Неопределено                                                        КАК КорПартнер,
		|	Неопределено                                                        КАК КорОрганизация,
		|	Неопределено                                                        КАК КорКонтрагент,
		|	Неопределено                                                        КАК КорДоговор,
		|	Неопределено                                                        КАК КорНаправлениеДеятельности,
		|	УменьшениеПланаОплатыПоставщику.НомерРегистратора                   КАК НомерРегистратора
		|ИЗ
		|	#УменьшениеПланаОплатыПоставщику КАК УменьшениеПланаОплатыПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УменьшениеПланаОплатыПоставщику.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УменьшениеПланаОплатыПоставщику.Организация = Аналитика.Организация
		|					И УменьшениеПланаОплатыПоставщику.Контрагент = Аналитика.Контрагент
		|					И УменьшениеПланаОплатыПоставщику.Партнер = Аналитика.Партнер
		|					И УменьшениеПланаОплатыПоставщику.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&КОплате <> 0
		|СГРУППИРОВАТЬ ПО
		|	УменьшениеПланаОплатыПоставщику.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеПланаОплатыПоставщику.ОбъектРасчетов,
		|	УменьшениеПланаОплатыПоставщику.ВалютаВзаиморасчетов,
		|	УменьшениеПланаОплатыПоставщику.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&ДатаПлатежа,
		|	&СвязанныйДокумент,
		|	&ЗаявкаНаРасходованиеДенежныхСредств,
		|	&СтатьяДвиженияДенежныхСредств,
		|	УменьшениеПланаОплатыПоставщику.ВалютаДокумента,
		|	УменьшениеПланаОплатыПоставщику.Партнер,
		|	УменьшениеПланаОплатыПоставщику.Организация,
		|	УменьшениеПланаОплатыПоставщику.Контрагент,
		|	УменьшениеПланаОплатыПоставщику.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеПланаОплатыПоставщику.НомерРегистратора
		|	";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                         ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплате",                             КОплате);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                         ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаявкаНаРасходованиеДенежныхСредств", ЗаявкаНаРасходованиеДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств",       СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",                   СвязанныйДокумент);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьПланПоставкиОтПоставщика(Операция)
	
	Если Операция = "ГрафикИсполненияПоставщик" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ЛОЖЬ";
		ПорядокРасчетов = "ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаПоставки.ДатаПоступления, ДЕНЬ)";
		ЗаказЗакупки = "Неопределено";
		СверхЗаказа = "ЛОЖЬ";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		
	ИначеЕсли Операция = "ЗаказПоставщику" Тогда
		
		ЭтоЗаказ = "ИСТИНА";
		ЭтоНакладная = "ЛОЖЬ";
		ПорядокРасчетов = "УвеличениеПланаПоставки.ПорядокРасчетов";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаПоставки.ДатаПоступления, ДЕНЬ)";
		ЗаказЗакупки = "Неопределено";
		СверхЗаказа = "ЛОЖЬ";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		
	ИначеЕсли Операция = "Закупка" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ИСТИНА";
		ПорядокРасчетов = "УвеличениеПланаПоставки.ПорядокРасчетов";
		Период = "УвеличениеПланаПоставки.ДатаРегистратора";
		ЗаказЗакупки = "УвеличениеПланаПоставки.ЗаказЗакупки";
		СверхЗаказа = "УвеличениеПланаПоставки.СверхЗаказа";
		НакладнаяПоЗаказам = "УвеличениеПланаПоставки.НакладнаяПоЗаказам";
		
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&Период                                                  КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                   КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)          КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеПланаПоставки.ОбъектРасчетов            КАК ОбъектРасчетов,
		|	УвеличениеПланаПоставки.ВалютаВзаиморасчетов      КАК Валюта,
		|	
		|	0                                                 КАК Сумма,
		|	0                                                 КАК Оплачивается,
		|	0                                                 КАК КОплате,
		|	СУММА(УвеличениеПланаПоставки.КПоступлению)       КАК КПоступлению,
		|	
		|	УвеличениеПланаПоставки.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
		|	Неопределено                                      КАК ФормаОплаты,
		|	Неопределено                                      КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&ЗаказЗакупки                                     КАК ЗакупкаПоЗаказу,
		|	УвеличениеПланаПоставки.ДатаРегистратора          КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                  КАК ДатаПлатежа,
		|	0                                                 КАК СуммаРегл,
		|	0                                                 КАК СуммаУпр,
		|	0                                                 КАК ЗалогЗаТару,
		|	Неопределено                                      КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                      КАК РасчетныйДокумент,
		|	//ПорядокОплаты
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                      КАК СвязанныйДокумент,
		|	Неопределено                                      КАК ВариантОплаты,
		|	УвеличениеПланаПоставки.ВалютаДокумента           КАК ВалютаДокумента,
		|	Неопределено                                      КАК КорОбъектРасчетов,
		|	Неопределено                                      КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеПланаПоставки.Партнер                          КАК Партнер,
		|	УвеличениеПланаПоставки.Организация                      КАК Организация,
		|	УвеличениеПланаПоставки.Контрагент                       КАК Контрагент,
		|	УвеличениеПланаПоставки.Договор                          КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики             КАК НаправлениеДеятельности,
		|	Неопределено                                             КАК КорПартнер,
		|	Неопределено                                             КАК КорОрганизация,
		|	Неопределено                                             КАК КорКонтрагент,
		|	Неопределено                                             КАК КорДоговор,
		|	Неопределено                                             КАК КорНаправлениеДеятельности,
		|	УвеличениеПланаПоставки.НомерРегистратора                КАК НомерРегистратора
		|ИЗ
		|	#УвеличениеПланаПоставки КАК УвеличениеПланаПоставки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УвеличениеПланаПоставки.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыГрафик
		|			ПО ДоговорыГрафик.Ссылка = УвеличениеПланаПоставки.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УвеличениеПланаПоставки.Организация = Аналитика.Организация
		|					И УвеличениеПланаПоставки.Контрагент = Аналитика.Контрагент
		|					И УвеличениеПланаПоставки.Партнер = Аналитика.Партнер
		|					И УвеличениеПланаПоставки.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УвеличениеПланаПоставки.КПоступлению <> 0
		|	И НЕ ((&ЭтоЗаказ ИЛИ &ЭтоНакладная) 
		|		И ЕСТЬNULL(ДоговорыГрафик.ЗаданГрафикИсполнения, ЛОЖЬ) 
		|		И &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|		И НЕ &СверхЗаказа)
		|	И (&ЭтоЗаказ 
		|			И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ &ЭтоНакладная
		|			И &НакладнаяПоЗаказам
		|			И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|			И &СверхЗаказа
		|		ИЛИ НЕ (&ЭтоЗаказ ИЛИ &ЭтоНакладная))
		|СГРУППИРОВАТЬ ПО
		|	&Период,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеПланаПоставки.ОбъектРасчетов,
		|	УвеличениеПланаПоставки.ВалютаВзаиморасчетов,
		|	УвеличениеПланаПоставки.ХозяйственнаяОперация,
		|	УвеличениеПланаПоставки.ДатаРегистратора,
		|	УвеличениеПланаПоставки.НомерРегистратора,
		|	УвеличениеПланаПоставки.ВалютаДокумента,
		|	УвеличениеПланаПоставки.Партнер,
		|	УвеличениеПланаПоставки.Организация,
		|	УвеличениеПланаПоставки.Контрагент,
		|	УвеличениеПланаПоставки.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	&ЗаказЗакупки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПорядокРасчетов",ПорядокРасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоЗаказ",ЭтоЗаказ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоНакладная",ЭтоНакладная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Период",Период);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказЗакупки",ЗаказЗакупки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СверхЗаказа",СверхЗаказа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НакладнаяПоЗаказам",НакладнаяПоЗаказам);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьПланПоставкиОтПоставщика()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	УменьшениеПланаПоставки.ДатаРегистратора          КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)            КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)          КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеПланаПоставки.ОбъектРасчетов            КАК ОбъектРасчетов,
		|	УменьшениеПланаПоставки.ВалютаВзаиморасчетов      КАК Валюта,
		|	
		|	0                                                 КАК Сумма,
		|	0                                                 КАК Оплачивается,
		|	0                                                 КАК КОплате,
		|	СУММА(УменьшениеПланаПоставки.КПоступлению)       КАК КПоступлению,
		|	
		|	УменьшениеПланаПоставки.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
		|	Неопределено                                      КАК ФормаОплаты,
		|	Неопределено                                      КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	УменьшениеПланаПоставки.ЗаказЗакупки              КАК ЗакупкаПоЗаказу,
		|	УменьшениеПланаПоставки.ДатаРегистратора          КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                  КАК ДатаПлатежа,
		|	0                                                 КАК СуммаРегл,
		|	0                                                 КАК СуммаУпр,
		|	0                                                 КАК ЗалогЗаТару,
		|	Неопределено                                      КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                      КАК РасчетныйДокумент,
		|	//ПорядокОплаты
		|	//ПорядокЗачетаПоДатеПлатежа
		|	Неопределено                                      КАК СвязанныйДокумент,
		|	Неопределено                                      КАК ВариантОплаты,
		|	УменьшениеПланаПоставки.ВалютаДокумента           КАК ВалютаДокумента,
		|	Неопределено                                      КАК КорОбъектРасчетов,
		|	Неопределено                                      КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеПланаПоставки.Партнер                          КАК Партнер,
		|	УменьшениеПланаПоставки.Организация                      КАК Организация,
		|	УменьшениеПланаПоставки.Контрагент                       КАК Контрагент,
		|	УменьшениеПланаПоставки.Договор                          КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики             КАК НаправлениеДеятельности,
		|	Неопределено                                             КАК КорПартнер,
		|	Неопределено                                             КАК КорОрганизация,
		|	Неопределено                                             КАК КорКонтрагент,
		|	Неопределено                                             КАК КорДоговор,
		|	Неопределено                                             КАК КорНаправлениеДеятельности,
		|	УменьшениеПланаПоставки.НомерРегистратора                КАК НомерРегистратора
		|ИЗ
		|	#УменьшениеПланаПоставки КАК УменьшениеПланаПоставки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УменьшениеПланаПоставки.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыГрафик
		|			ПО ДоговорыГрафик.Ссылка = УменьшениеПланаПоставки.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УменьшениеПланаПоставки.Организация = Аналитика.Организация
		|					И УменьшениеПланаПоставки.Контрагент = Аналитика.Контрагент
		|					И УменьшениеПланаПоставки.Партнер = Аналитика.Партнер
		|					И УменьшениеПланаПоставки.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УменьшениеПланаПоставки.КПоступлению <> 0
		|	И УменьшениеПланаПоставки.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|	И (ЕСТЬNULL(ДоговорыГрафик.ЗаданГрафикИсполнения, ЛОЖЬ) ИЛИ УменьшениеПланаПоставки.НакладнаяПоЗаказам)
		|СГРУППИРОВАТЬ ПО
		|	УменьшениеПланаПоставки.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеПланаПоставки.ОбъектРасчетов,
		|	УменьшениеПланаПоставки.ВалютаВзаиморасчетов,
		|	УменьшениеПланаПоставки.ХозяйственнаяОперация,
		|	УменьшениеПланаПоставки.ЗаказЗакупки,
		|	УменьшениеПланаПоставки.ВалютаДокумента,
		|	УменьшениеПланаПоставки.Партнер,
		|	УменьшениеПланаПоставки.Организация,
		|	УменьшениеПланаПоставки.Контрагент,
		|	УменьшениеПланаПоставки.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеПланаПоставки.НомерРегистратора";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьЗадолженностьПоставщика(Операция)
	
	Если Операция = "ОплатаПоставщику" Тогда
		
		ФормаОплаты = "УвеличениеЗадолженностиПоставщика.ФормаОплаты";
		ЗаявкаНаРасходованиеДенежныхСредств = "УвеличениеЗадолженностиПоставщика.ЗаявкаНаРасходованиеДенежныхСредств";
		СтатьяДвиженияДенежныхСредств = "УвеличениеЗадолженностиПоставщика.СтатьяДвиженияДенежныхСредств";
		СвязанныйДокумент = "УвеличениеЗадолженностиПоставщика.СвязанныйДокумент";
		
	ИначеЕсли Операция = "ВозвратТоваровПоставщику" Тогда
		
		ФормаОплаты = "Неопределено";
		ЗаявкаНаРасходованиеДенежныхСредств = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "Неопределено";
		
	ИначеЕсли Операция = "Закупка" Тогда
		
		ФормаОплаты = "Неопределено";
		ЗаявкаНаРасходованиеДенежныхСредств = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "Неопределено";
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УвеличениеЗадолженностиПоставщика.ДатаРегистратора                   КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                               КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                      КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеЗадолженностиПоставщика.ОбъектРасчетов                     КАК ОбъектРасчетов,
		|	УвеличениеЗадолженностиПоставщика.ВалютаВзаиморасчетов               КАК Валюта,
		|	
		|	СУММА(УвеличениеЗадолженностиПоставщика.СуммаВзаиморасчетов)         КАК Сумма,
		|	0                                                                    КАК Оплачивается,
		|	0                                                                    КАК КОплате,
		|	0                                                                    КАК КПоступлению,
		|	
		|	УвеличениеЗадолженностиПоставщика.ХозяйственнаяОперация              КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                                         КАК ФормаОплаты,
		|	&ЗаявкаНаРасходованиеДенежныхСредств                                 КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Неопределено                                                         КАК ЗакупкаПоЗаказу,
		|	УвеличениеЗадолженностиПоставщика.ДатаРегистратора                   КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                                     КАК ДатаПлатежа,
		|	СУММА(ВЫБОР КОГДА УвеличениеЗадолженностиПоставщика.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
		|				ТОГДА УвеличениеЗадолженностиПоставщика.СуммаВзаиморасчетов
		|			КОГДА УвеличениеЗадолженностиПоставщика.ВалютаДокумента = &ВалютаРегламентированногоУчета
		|				ТОГДА УвеличениеЗадолженностиПоставщика.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(УвеличениеЗадолженностиПоставщика.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                               КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА УвеличениеЗадолженностиПоставщика.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
		|				ТОГДА УвеличениеЗадолженностиПоставщика.СуммаВзаиморасчетов
		|			КОГДА УвеличениеЗадолженностиПоставщика.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА УвеличениеЗадолженностиПоставщика.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(УвеличениеЗадолженностиПоставщика.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                              КАК СуммаУпр,
		|	0                                                                   КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                                      КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                        КАК РасчетныйДокумент,
		|	//Порядок оплаты
		|	//Порядок зачета по дате платежа
		|	&СвязанныйДокумент                                                  КАК СвязанныйДокумент,
		|	Неопределено                                                        КАК ВариантОплаты,
		|	УвеличениеЗадолженностиПоставщика.ВалютаДокумента                   КАК ВалютаДокумента,
		|	Неопределено                                                        КАК КорОбъектРасчетов,
		|	Неопределено                                                        КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеЗадолженностиПоставщика.Партнер                           КАК Партнер,
		|	УвеличениеЗадолженностиПоставщика.Организация                       КАК Организация,
		|	УвеличениеЗадолженностиПоставщика.Контрагент                        КАК Контрагент,
		|	УвеличениеЗадолженностиПоставщика.Договор                           КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                        КАК НаправлениеДеятельности,
		|	
		|	Неопределено                                                        КАК КорПартнер,
		|	Неопределено                                                        КАК КорОрганизация,
		|	Неопределено                                                        КАК КорКонтрагент,
		|	Неопределено                                                        КАК КорДоговор,
		|	Неопределено                                                        КАК КорНаправлениеДеятельности,
		|	УвеличениеЗадолженностиПоставщика.НомерРегистратора                 КАК НомерРегистратора
		|ИЗ
		|	#УвеличениеЗадолженностиПоставщика КАК УвеличениеЗадолженностиПоставщика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УвеличениеЗадолженностиПоставщика.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УвеличениеЗадолженностиПоставщика.Организация = Аналитика.Организация
		|					И УвеличениеЗадолженностиПоставщика.Контрагент = Аналитика.Контрагент
		|					И УвеличениеЗадолженностиПоставщика.Партнер = Аналитика.Партнер
		|					И УвеличениеЗадолженностиПоставщика.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютПоставщик КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = УвеличениеЗадолженностиПоставщика.Ссылка
		|				И Коэффициенты.ВалютаВзаиморасчетов = УвеличениеЗадолженностиПоставщика.ВалютаВзаиморасчетов
		|ГДЕ
		|	УвеличениеЗадолженностиПоставщика.СуммаВзаиморасчетов <> 0
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеЗадолженностиПоставщика.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеЗадолженностиПоставщика.ОбъектРасчетов,
		|	УвеличениеЗадолженностиПоставщика.ВалютаВзаиморасчетов,
		|	УвеличениеЗадолженностиПоставщика.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&ЗаявкаНаРасходованиеДенежныхСредств,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&СвязанныйДокумент,
		|	УвеличениеЗадолженностиПоставщика.ВалютаДокумента,
		|	УвеличениеЗадолженностиПоставщика.Партнер,
		|	УвеличениеЗадолженностиПоставщика.Организация,
		|	УвеличениеЗадолженностиПоставщика.Контрагент,
		|	УвеличениеЗадолженностиПоставщика.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеЗадолженностиПоставщика.НомерРегистратора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                         ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаявкаНаРасходованиеДенежныхСредств", ЗаявкаНаРасходованиеДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств",       СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",                   СвязанныйДокумент);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьНашуЗадолженностьПоставщику(Операция)
	
	Если Операция = "Закупка" Тогда
		
		ЗаказЗакупки = "УвеличениеНашейЗадолженностиПоставщику.ЗаказЗакупки";
		ДатаПлатежа = "УвеличениеНашейЗадолженностиПоставщику.ДатаПлатежа";
		ЗалогЗаТару = "УвеличениеНашейЗадолженностиПоставщику.СуммаВзаиморасчетовПоТаре";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "УвеличениеНашейЗадолженностиПоставщику.СвязанныйДокумент";
		
	ИначеЕсли Операция = "ВозвратОплатыОтПоставщика" Тогда
		
		ЗаказЗакупки = "Неопределено";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		ЗалогЗаТару = "0";
		СтатьяДвиженияДенежныхСредств = "УвеличениеНашейЗадолженностиПоставщику.СтатьяДвиженияДенежныхСредств";
		СвязанныйДокумент = "Неопределено";
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УвеличениеНашейЗадолженностиПоставщику.ДатаРегистратора               КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                                КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                       КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов                 КАК ОбъектРасчетов,
		|	УвеличениеНашейЗадолженностиПоставщику.ВалютаВзаиморасчетов           КАК Валюта,
		|	
		|	СУММА(УвеличениеНашейЗадолженностиПоставщику.СуммаВзаиморасчетов)     КАК Сумма,
		|	0                                                                     КАК Оплачивается,
		|	0                                                                     КАК КОплате,
		|	0                                                                     КАК КПоступлению,
		|	
		|	УвеличениеНашейЗадолженностиПоставщику.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
		|	УвеличениеНашейЗадолженностиПоставщику.ФормаОплаты                    КАК ФормаОплаты,
		|	Неопределено                                                          КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&ЗаказЗакупки                                                         КАК ЗакупкаПоЗаказу,
		|	УвеличениеНашейЗадолженностиПоставщику.ДатаРегистратора               КАК ДатаРегистратора,
		|	&ДатаПлатежа                                                          КАК ДатаПлатежа,
		|	СУММА(ВЫБОР КОГДА УвеличениеНашейЗадолженностиПоставщику.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
		|				ТОГДА УвеличениеНашейЗадолженностиПоставщику.СуммаВзаиморасчетов
		|			КОГДА УвеличениеНашейЗадолженностиПоставщику.ВалютаДокумента = &ВалютаРегламентированногоУчета
		|				ТОГДА УвеличениеНашейЗадолженностиПоставщику.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(УвеличениеНашейЗадолженностиПоставщику.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                                КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА УвеличениеНашейЗадолженностиПоставщику.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
		|				ТОГДА УвеличениеНашейЗадолженностиПоставщику.СуммаВзаиморасчетов
		|			КОГДА УвеличениеНашейЗадолженностиПоставщику.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА УвеличениеНашейЗадолженностиПоставщику.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(УвеличениеНашейЗадолженностиПоставщику.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                                КАК СуммаУпр,
		|	СУММА(&ЗалогЗаТару)                                                   КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                                        КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                          КАК РасчетныйДокумент,
		|	//Порядок оплаты
		|	//Порядок зачета по дате платежа
		|	&СвязанныйДокумент                                                    КАК СвязанныйДокумент,
		|	Неопределено                                                          КАК ВариантОплаты,
		|	УвеличениеНашейЗадолженностиПоставщику.ВалютаДокумента                КАК ВалютаДокумента,
		|	Неопределено                                                          КАК КорОбъектРасчетов,
		|	Неопределено                                                          КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеНашейЗадолженностиПоставщику.Партнер                        КАК Партнер,
		|	УвеличениеНашейЗадолженностиПоставщику.Организация                    КАК Организация,
		|	УвеличениеНашейЗадолженностиПоставщику.Контрагент                     КАК Контрагент,
		|	УвеличениеНашейЗадолженностиПоставщику.Договор                        КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                          КАК НаправлениеДеятельности,
		|	
		|	Неопределено                                                          КАК КорПартнер,
		|	Неопределено                                                          КАК КорОрганизация,
		|	Неопределено                                                          КАК КорКонтрагент,
		|	Неопределено                                                          КАК КорДоговор,
		|	Неопределено                                                          КАК КорНаправлениеДеятельности,
		|	УвеличениеНашейЗадолженностиПоставщику.НомерРегистратора              КАК НомерРегистратора
		|ИЗ
		|	#УвеличениеНашейЗадолженностиПоставщику КАК УвеличениеНашейЗадолженностиПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УвеличениеНашейЗадолженностиПоставщику.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УвеличениеНашейЗадолженностиПоставщику.Организация = Аналитика.Организация
		|					И УвеличениеНашейЗадолженностиПоставщику.Контрагент = Аналитика.Контрагент
		|					И УвеличениеНашейЗадолженностиПоставщику.Партнер = Аналитика.Партнер
		|					И УвеличениеНашейЗадолженностиПоставщику.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютПоставщик КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = УвеличениеНашейЗадолженностиПоставщику.Ссылка
		|				И Коэффициенты.ВалютаВзаиморасчетов = УвеличениеНашейЗадолженностиПоставщику.ВалютаВзаиморасчетов
		|ГДЕ
		|	УвеличениеНашейЗадолженностиПоставщику.СуммаВзаиморасчетов <> 0
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеНашейЗадолженностиПоставщику.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов,

		|	УвеличениеНашейЗадолженностиПоставщику.ВалютаВзаиморасчетов,
		|	УвеличениеНашейЗадолженностиПоставщику.ХозяйственнаяОперация,
		|	УвеличениеНашейЗадолженностиПоставщику.ФормаОплаты,
		|	&ЗаказЗакупки,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&ДатаПлатежа,
		|	&СвязанныйДокумент,
		|	УвеличениеНашейЗадолженностиПоставщику.ВалютаДокумента,
		|	УвеличениеНашейЗадолженностиПоставщику.Партнер,
		|	УвеличениеНашейЗадолженностиПоставщику.Организация,
		|	УвеличениеНашейЗадолженностиПоставщику.Контрагент,
		|	УвеличениеНашейЗадолженностиПоставщику.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеНашейЗадолженностиПоставщику.НомерРегистратора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказЗакупки",                  ЗаказЗакупки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                   ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗалогЗаТару",                   ЗалогЗаТару);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",             СвязанныйДокумент);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьОплачиваетсяПоставщику(Операция)
	
	Если Операция = "ЗаявкаНаОплатуПоставщику" Тогда
		ЗаявкаНаРасходованиеДенежныхСредств = "УвеличениеОплачиваетсяПоставщику.Ссылка";
	ИначеЕсли Операция = "ОплатаПоставщику" Тогда
		ЗаявкаНаРасходованиеДенежныхСредств = "УвеличениеОплачиваетсяПоставщику.ЗаявкаНаРасходованиеДенежныхСредств";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УвеличениеОплачиваетсяПоставщику.ДатаРегистратора                   КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                              КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                     КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеОплачиваетсяПоставщику.ОбъектРасчетов                     КАК ОбъектРасчетов,
		|	УвеличениеОплачиваетсяПоставщику.ВалютаВзаиморасчетов               КАК Валюта,
		|	
		|	0                                                                   КАК Сумма,
		|	СУММА(УвеличениеОплачиваетсяПоставщику.УвеличениеОплачивается)      КАК Оплачивается,
		|	0                                                                   КАК КОплате,
		|	0                                                                   КАК КПоступлению,
		|	
		|	УвеличениеОплачиваетсяПоставщику.ХозяйственнаяОперация              КАК ХозяйственнаяОперация,
		|	УвеличениеОплачиваетсяПоставщику.ФормаОплаты                        КАК ФормаОплаты,
		|	&ЗаявкаНаРасходованиеДенежныхСредств                                КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Неопределено                                                        КАК ЗакупкаПоЗаказу,
		|	УвеличениеОплачиваетсяПоставщику.ДатаРегистратора                   КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                                    КАК ДатаПлатежа,
		|	0                                                                   КАК СуммаРегл,
		|	0                                                                   КАК СуммаУпр,
		|	0                                                                   КАК ЗалогЗаТару,
		|	УвеличениеОплачиваетсяПоставщику.СтатьяДвиженияДенежныхСредств      КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                        КАК РасчетныйДокумент,
		|	//Порядок оплаты
		|	//Порядок зачета по дате платежа
		|	Неопределено                                                        КАК СвязанныйДокумент,
		|	Неопределено                                                        КАК ВариантОплаты,
		|	УвеличениеОплачиваетсяПоставщику.ВалютаДокумента                    КАК ВалютаДокумента,
		|	Неопределено                                                        КАК КорОбъектРасчетов,
		|	Неопределено                                                        КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеОплачиваетсяПоставщику.Партнер                            КАК Партнер,
		|	УвеличениеОплачиваетсяПоставщику.Организация                        КАК Организация,
		|	УвеличениеОплачиваетсяПоставщику.Контрагент                         КАК Контрагент,
		|	УвеличениеОплачиваетсяПоставщику.Договор                            КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                        КАК НаправлениеДеятельности,
		|	
		|	Неопределено                                                        КАК КорПартнер,
		|	Неопределено                                                        КАК КорОрганизация,
		|	Неопределено                                                        КАК КорКонтрагент,
		|	Неопределено                                                        КАК КорДоговор,
		|	Неопределено                                                        КАК КорНаправлениеДеятельности,
		|	УвеличениеОплачиваетсяПоставщику.НомерРегистратора                  КАК НомерРегистратора
		|ИЗ
		|	#УвеличениеОплачиваетсяПоставщику КАК УвеличениеОплачиваетсяПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УвеличениеОплачиваетсяПоставщику.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УвеличениеОплачиваетсяПоставщику.Организация = Аналитика.Организация
		|					И УвеличениеОплачиваетсяПоставщику.Контрагент = Аналитика.Контрагент
		|					И УвеличениеОплачиваетсяПоставщику.Партнер = Аналитика.Партнер
		|					И УвеличениеОплачиваетсяПоставщику.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УвеличениеОплачиваетсяПоставщику.УвеличениеОплачивается > 0
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеОплачиваетсяПоставщику.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеОплачиваетсяПоставщику.ОбъектРасчетов,
		|	УвеличениеОплачиваетсяПоставщику.ВалютаВзаиморасчетов,
		|	УвеличениеОплачиваетсяПоставщику.ХозяйственнаяОперация,
		|	УвеличениеОплачиваетсяПоставщику.ФормаОплаты,
		|	&ЗаявкаНаРасходованиеДенежныхСредств,
		|	УвеличениеОплачиваетсяПоставщику.СтатьяДвиженияДенежныхСредств,
		|	УвеличениеОплачиваетсяПоставщику.ВалютаДокумента,
		|	УвеличениеОплачиваетсяПоставщику.Партнер,
		|	УвеличениеОплачиваетсяПоставщику.Организация,
		|	УвеличениеОплачиваетсяПоставщику.Контрагент,
		|	УвеличениеОплачиваетсяПоставщику.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеОплачиваетсяПоставщику.НомерРегистратора
		|	";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаявкаНаРасходованиеДенежныхСредств",ЗаявкаНаРасходованиеДенежныхСредств);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьОплачиваетсяПоставщику()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УменьшениеОплачиваетсяПоставщику.ДатаРегистратора                    КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                               КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                      КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеОплачиваетсяПоставщику.ОбъектРасчетов                      КАК ОбъектРасчетов,
		|	УменьшениеОплачиваетсяПоставщику.ВалютаВзаиморасчетов                КАК Валюта,
		|	
		|	0                                                                    КАК Сумма,
		|	СУММА(УменьшениеОплачиваетсяПоставщику.УменьшениеОплачивается)       КАК Оплачивается,
		|	0                                                                    КАК КОплате,
		|	0                                                                    КАК КПоступлению,
		|	
		|	УменьшениеОплачиваетсяПоставщику.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
		|	УменьшениеОплачиваетсяПоставщику.ФормаОплаты                         КАК ФормаОплаты,
		|	УменьшениеОплачиваетсяПоставщику.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Неопределено                                                         КАК ЗакупкаПоЗаказу,
		|	УменьшениеОплачиваетсяПоставщику.ДатаРегистратора                    КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                                     КАК ДатаПлатежа,
		|	0                                                                    КАК СуммаРегл,
		|	0                                                                    КАК СуммаУпр,
		|	0                                                                    КАК ЗалогЗаТару,
		|	УменьшениеОплачиваетсяПоставщику.СтатьяДвиженияДенежныхСредств       КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                         КАК РасчетныйДокумент,
		|	//Порядок оплаты
		|	//Порядок зачета по дате платежа
		|	Неопределено                                                         КАК СвязанныйДокумент,
		|	Неопределено                                                         КАК ВариантОплаты,
		|	УменьшениеОплачиваетсяПоставщику.ВалютаДокумента                     КАК ВалютаДокумента,
		|	Неопределено                                                         КАК КорОбъектРасчетов,
		|	Неопределено                                                         КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеОплачиваетсяПоставщику.Партнер                             КАК Партнер,
		|	УменьшениеОплачиваетсяПоставщику.Организация                         КАК Организация,
		|	УменьшениеОплачиваетсяПоставщику.Контрагент                          КАК Контрагент,
		|	УменьшениеОплачиваетсяПоставщику.Договор                             КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                         КАК НаправлениеДеятельности,
		|	
		|	Неопределено                                                         КАК КорПартнер,
		|	Неопределено                                                         КАК КорОрганизация,
		|	Неопределено                                                         КАК КорКонтрагент,
		|	Неопределено                                                         КАК КорДоговор,
		|	Неопределено                                                         КАК КорНаправлениеДеятельности,
		|	УменьшениеОплачиваетсяПоставщику.НомерРегистратора                   КАК НомерРегистратора
		|ИЗ
		|	#УменьшениеОплачиваетсяПоставщику КАК УменьшениеОплачиваетсяПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УменьшениеОплачиваетсяПоставщику.НаправлениеДеятельности = НаправленияДеятельности.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УменьшениеОплачиваетсяПоставщику.Организация = Аналитика.Организация
		|					И УменьшениеОплачиваетсяПоставщику.Контрагент = Аналитика.Контрагент
		|					И УменьшениеОплачиваетсяПоставщику.Партнер = Аналитика.Партнер
		|					И УменьшениеОплачиваетсяПоставщику.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УменьшениеОплачиваетсяПоставщику.УменьшениеОплачивается > 0
		|СГРУППИРОВАТЬ ПО
		|	УменьшениеОплачиваетсяПоставщику.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеОплачиваетсяПоставщику.ОбъектРасчетов,
		|	УменьшениеОплачиваетсяПоставщику.ВалютаВзаиморасчетов,
		|	УменьшениеОплачиваетсяПоставщику.ХозяйственнаяОперация,
		|	УменьшениеОплачиваетсяПоставщику.ФормаОплаты,
		|	УменьшениеОплачиваетсяПоставщику.ЗаявкаНаРасходованиеДенежныхСредств,
		|	УменьшениеОплачиваетсяПоставщику.СтатьяДвиженияДенежныхСредств,
		|	УменьшениеОплачиваетсяПоставщику.ВалютаДокумента,
		|	УменьшениеОплачиваетсяПоставщику.Партнер,
		|	УменьшениеОплачиваетсяПоставщику.Организация,
		|	УменьшениеОплачиваетсяПоставщику.Контрагент,
		|	УменьшениеОплачиваетсяПоставщику.Договор,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеОплачиваетсяПоставщику.НомерРегистратора
		|	";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ТекстЗапросаВТКурсовВалютДокументов(Операция, Таблицы)
	
	Если Операция = "Продажа" ИЛИ Операция = "ОплатаОтКлиента" ИЛИ Операция = "ВозвратОплатыКлиенту" ИЛИ Операция = "ВозвратТоваров" Тогда
		ТипРасчетов = "Клиент";
	ИначеЕсли Операция = "ОплатаПоставщику" ИЛИ Операция = "Закупка" ИЛИ Операция = "ВозвратОплатыОтПоставщика" ИЛИ Операция = "ВозвратТоваровПоставщику" Тогда
		ТипРасчетов = "Поставщик";
	КонецЕсли;
	
	Если ТипЗнч(Таблицы) = Тип("Массив") Тогда
		ИменаТаблиц = Таблицы;
	Иначе
		ИменаТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Таблицы);
	КонецЕсли;
	
	ТекстВыбрать = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	%ИмяТаблицы%.Ссылка                                                       КАК Ссылка,
		|	%ИмяТаблицы%.ДатаКурса                                                    КАК ДатаКурса,
		|	%ИмяТаблицы%.ВалютаДокумента                                              КАК ВалютаДокумента,
		|	%ИмяТаблицы%.ВалютаВзаиморасчетов                                         КАК ВалютаВзаиморасчетов,
		|	(%ИмяТаблицы%.ВалютаДокумента = &ВалютаРегламентированногоУчета 
		|			ИЛИ %ИмяТаблицы%.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета)
		|		И (%ИмяТаблицы%.ВалютаДокумента = &ВалютаУправленческогоУчета 
		|			ИЛИ %ИмяТаблицы%.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета)
		|		И %ИмяТаблицы%.ВалютаДокумента = %ИмяТаблицы%.ВалютаВзаиморасчетов              КАК КурсыНеТребуются";
	ТекстИз = "
		|ИЗ
		|	#%ИмяТаблицы% КАК %ИмяТаблицы%
		|";
	ТекстПоместить = "
		|ПОМЕСТИТЬ ВтДанныеДокументов";
	ТекстВыборкаКурсов = "";
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		ТекстПодзапроса = "";
		
		Если ТекстВыборкаКурсов <> "" Тогда
			ТекстПодзапроса = ТекстПодзапроса + " 
			|
			|ОБЪЕДИНИТЬ
			|";
		КонецЕсли;
		
		ТекстПодзапроса = ТекстПодзапроса + ТекстВыбрать;
		
		Если ИмяТаблицы = ИменаТаблиц[0] Тогда
			ТекстПодзапроса = ТекстПодзапроса + ТекстПоместить;
		КонецЕсли;
		
		ТекстПодзапроса = ТекстПодзапроса + ТекстИз;
		
		ТекстВыборкаКурсов = ТекстВыборкаКурсов + СтрЗаменить(ТекстПодзапроса, "%ИмяТаблицы%", ИмяТаблицы);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстВыборкаКурсов + "
		|;
		|ВЫБРАТЬ 
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	МАКСИМУМ(ВложенныйЗапрос.ДатаКурса) КАК ДатаКурса,
		|	МАКСИМУМ(ВложенныйЗапрос.ВалютаДокумента) КАК ВалютаДокумента,
		|	МИНИМУМ(ВложенныйЗапрос.КурсыНеТребуются) КАК КурсыНеТребуются
		|ПОМЕСТИТЬ ВтДанныеДляКурсов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеДокументов.Ссылка КАК Ссылка,
		|		ДанныеДокументов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|		ДанныеДокументов.ДатаКурса КАК ДатаКурса,
		|		ДанныеДокументов.ВалютаДокумента КАК ВалютаДокумента,
		|		ДанныеДокументов.КурсыНеТребуются КАК КурсыНеТребуются
		|	ИЗ
		|		ВтДанныеДокументов КАК ДанныеДокументов) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.ВалютаВзаиморасчетов
		|;
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.ВалютаДокумента КАК ВалютаДокумента,
		|	ВложенныйЗапрос.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	МАКСИМУМ(ВложенныйЗапрос.ПериодДокументов) КАК ПериодДокументов,
		|	МАКСИМУМ(ВложенныйЗапрос.ПериодРегл) КАК ПериодРегл,
		|	МАКСИМУМ(ВложенныйЗапрос.ПериодУпр) КАК ПериодУпр,
		|	МАКСИМУМ(ВложенныйЗапрос.ПериодРасчеты) КАК ПериодРасчеты
		|ПОМЕСТИТЬ ВтПериодыКурсовДокументов
		|ИЗ
		|	(ВЫБРАТЬ 
		|		ДанныеДляКурсов.Ссылка               КАК Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента      КАК ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|		МАКСИМУМ(Курсы.Период) КАК ПериодДокументов,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодРегл,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодУпр,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодРасчеты
		|	ИЗ ВтДанныеДляКурсов КАК ДанныеДляКурсов
		|	   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК Курсы
		|			ПО Курсы.Период <= ДанныеДляКурсов.ДатаКурса И 
		|				Курсы.Валюта = ДанныеДляКурсов.ВалютаДокумента
		|	ГДЕ
		|		НЕ ДанныеДляКурсов.КурсыНеТребуются
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеДляКурсов.Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ 
		|		ДанныеДляКурсов.Ссылка               КАК Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента      КАК ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодДокументов,
		|		МАКСИМУМ(Курсы.Период) КАК ПериодРегл,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодУпр,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодРасчеты
		|	ИЗ ВтДанныеДляКурсов КАК ДанныеДляКурсов
		|	   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК Курсы
		|			ПО Курсы.Период <= ДанныеДляКурсов.ДатаКурса И 
		|				Курсы.Валюта = &ВалютаРегламентированногоУчета
		|	ГДЕ
		|		НЕ ДанныеДляКурсов.КурсыНеТребуются
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеДляКурсов.Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ 
		|		ДанныеДляКурсов.Ссылка               КАК Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента      КАК ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодДокументов,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодРегл,
		|		МАКСИМУМ(Курсы.Период) КАК ПериодУпр,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодРасчеты
		|	ИЗ ВтДанныеДляКурсов КАК ДанныеДляКурсов
		|	   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК Курсы
		|			ПО Курсы.Период <= ДанныеДляКурсов.ДатаКурса И 
		|				Курсы.Валюта = &ВалютаУправленческогоУчета
		|	ГДЕ
		|		НЕ ДанныеДляКурсов.КурсыНеТребуются
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеДляКурсов.Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ 
		|		ДанныеДляКурсов.Ссылка               КАК Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента      КАК ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|		ДАТАВРЕМЯ(1,1,1)					 КАК ПериодДокументов,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодРегл,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодУпр,
		|		МАКСИМУМ(Курсы.Период) КАК ПериодРасчеты
		|	ИЗ ВтДанныеДляКурсов КАК ДанныеДляКурсов
		|	   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК Курсы
		|			ПО Курсы.Период <= ДанныеДляКурсов.ДатаКурса И 
		|				Курсы.Валюта = ДанныеДляКурсов.ВалютаВзаиморасчетов
		|	ГДЕ
		|		НЕ ДанныеДляКурсов.КурсыНеТребуются
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеДляКурсов.Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.ВалютаДокумента,
		|	ВложенныйЗапрос.ВалютаВзаиморасчетов
		|;
		|ВЫБРАТЬ
		|	ПериодыКурсов.Ссылка                                                         КАК Ссылка,
		|	ПериодыКурсов.ВалютаВзаиморасчетов                                           КАК ВалютаВзаиморасчетов,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КурсыВалютДокументов.Курс,1) * ЕСТЬNULL(КурсыВалютУпр.Кратность,1) /
		|		(ЕСТЬNULL(КурсыВалютДокументов.Кратность,1) * ЕСТЬNULL(КурсыВалютУпр.Курс,1)) КАК ЧИСЛО(31,17)) КАК КоэффициентУпр,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КурсыВалютДокументов.Курс,1) * ЕСТЬNULL(КурсыВалютРегл.Кратность,1) /
		|		(ЕСТЬNULL(КурсыВалютДокументов.Кратность,1) * ЕСТЬNULL(КурсыВалютРегл.Курс,1)) КАК ЧИСЛО(31,17)) КАК КоэффициентРегл,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КурсыВалютДокументов.Курс,1) * ЕСТЬNULL(КурсыВалютРасчеты.Кратность,1) /
		|		(ЕСТЬNULL(КурсыВалютДокументов.Кратность,1) * ЕСТЬNULL(КурсыВалютРасчеты.Курс,1)) КАК ЧИСЛО(31,17)) КАК КоэффициентВзаиморасчетов
		|ПОМЕСТИТЬ ВтКоэффициентыПересчетаВалют" + ТипРасчетов + "
		|ИЗ
		|	ВтПериодыКурсовДокументов КАК ПериодыКурсов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютДокументов
		|			ПО ПериодыКурсов.ПериодДокументов = КурсыВалютДокументов.Период
		|				И ПериодыКурсов.ВалютаДокумента = КурсыВалютДокументов.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютРегл
		|			ПО ПериодыКурсов.ПериодРегл = КурсыВалютРегл.Период
		|				И КурсыВалютРегл.Валюта = &ВалютаРегламентированногоУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютУпр
		|			ПО ПериодыКурсов.ПериодУпр = КурсыВалютУпр.Период
		|				И КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютРасчеты
		|			ПО ПериодыКурсов.ПериодРасчеты = КурсыВалютРасчеты.Период
		|				И ПериодыКурсов.ВалютаВзаиморасчетов = КурсыВалютРасчеты.Валюта
		|;
		|УНИЧТОЖИТЬ ВтДанныеДокументов;
		|УНИЧТОЖИТЬ ВтДанныеДляКурсов;
		|УНИЧТОЖИТЬ ВтПериодыКурсовДокументов";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстВыборкаКурсов%", ТекстВыборкаКурсов);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтНаправленияДеятельности(Операция,ТаблицыИсточники)
	
	Если Операция = "Продажа" ИЛИ Операция = "ОплатаОтКлиента" ИЛИ Операция = "ВозвратОплатыКлиенту" 
		ИЛИ Операция = "ВозвратТоваров" ИЛИ Операция = "ГрафикИсполненияКлиент" ИЛИ Операция = "ЗаказКлиента" 
		ИЛИ Операция = "ЗаявкаНаВозвратОплатыКлиенту" Тогда
		ТипРасчетов = "Клиент";
	ИначеЕсли Операция = "ОплатаПоставщику" ИЛИ Операция = "Закупка" ИЛИ Операция = "ВозвратОплатыОтПоставщика"
		ИЛИ Операция = "ВозвратТоваровПоставщику" ИЛИ Операция = "ЗаказПоставщику" ИЛИ Операция = "ГрафикИсполненияПоставщик"
		ИЛИ Операция = "ЗаявкаНаОплатуПоставщику" Тогда
		ТипРасчетов = "Поставщик";
	КонецЕсли;
	
	ТекстВыбрать = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	%ИмяТаблицы%.%ИмяПоля% КАК НаправлениеДеятельности";
	ТекстИз = "
		|ИЗ
		|	#%ИмяТаблицы% КАК %ИмяТаблицы%
		|";
	ТекстПоместить = "
		|ПОМЕСТИТЬ ВтНаправленияДокументов";
	ТекстНД = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицыИсточники Цикл
		
		ТекстПодзапроса = "";
		
		Если ТекстНД <> "" Тогда
			ТекстПодзапроса = ТекстПодзапроса + " 
			|
			|ОБЪЕДИНИТЬ
			|";
		КонецЕсли;
		
		ТекстПодзапроса = ТекстПодзапроса + ТекстВыбрать;
		
		Если СтрокаТаблицы = ТаблицыИсточники[0] Тогда
			ТекстПодзапроса = ТекстПодзапроса + ТекстПоместить;
		КонецЕсли;
		
		ТекстПодзапроса = ТекстПодзапроса + ТекстИз;
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "%ИмяТаблицы%", СтрокаТаблицы.Таблица);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "%ИмяПоля%", СтрокаТаблицы.Поле);
		ТекстНД = ТекстНД + ТекстПодзапроса
		
	КонецЦикла;
	
	Если ТипРасчетов = "Клиент" Тогда
		ТекстЗапроса = ТекстНД + "
			|;
			|ВЫБРАТЬ
			|	НаправленияДокументов.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ВЫБОР 
			|		КОГДА ЕСТЬNULL(НаправленияДокументов.НаправлениеДеятельности.УчетДоходов, ЛОЖЬ)
			|			ТОГДА НаправленияДокументов.НаправлениеДеятельности
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
			|	КОНЕЦ                                         КАК НаправлениеАналитики
			|ПОМЕСТИТЬ ВтНаправленияДеятельностиКлиент
			|ИЗ
			|	ВтНаправленияДокументов КАК НаправленияДокументов
			|;
			|УНИЧТОЖИТЬ ВтНаправленияДокументов";
	Иначе
		ТекстЗапроса = ТекстНД + "
			|;
			|ВЫБРАТЬ
			|	НаправленияДокументов.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ВЫБОР 
			|		КОГДА ЕСТЬNULL(НаправленияДокументов.НаправлениеДеятельности.УчетРасчетовСПоставщиками, ЛОЖЬ)
			|			ТОГДА НаправленияДокументов.НаправлениеДеятельности
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
			|	КОНЕЦ                                         КАК НаправлениеАналитики
			|ПОМЕСТИТЬ ВтНаправленияДеятельностиПоставщик
			|ИЗ
			|	ВтНаправленияДокументов КАК НаправленияДокументов
			|;
			|УНИЧТОЖИТЬ ВтНаправленияДокументов";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
