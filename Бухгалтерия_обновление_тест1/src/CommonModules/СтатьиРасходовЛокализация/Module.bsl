
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийОбъекта

// Вызывается из соответствующего обработчика плана видов характеристик
//
// Параметры:
//  Объект - ПланВидовХарактеристикОбъект.СтатьиРасходов - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика плана видов характеристик
//
// Параметры:
//  Объект - ПланВидовХарактеристик.СтатьиРасходов - Обрабатываемый объект
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика плана видов характеристик
//
// Параметры:
//  Объект - ПланВидовХарактеристик.СтатьиРасходов - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПередЗаписью(Объект, Отказ) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика плана видов характеристик
//
// Параметры:
//  Объект - ПланВидовХарактеристик.СтатьиРасходов - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область МетодыМодуляМенеджера

// Дополняет массив блокируемых реквизитов объекта (см. ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьБлокируемыеРеквизитыОбъекта).
//
// Параметры:
// 	БлокируемыеРеквизиты - Массив - Блокируемые реквизиты объекта
// 	БезЭлементовФорм - Булево - Добавлять в массив только реквизиты, без управляющих элементов форм.
//
Процедура ДополнитьБлокируемыеРеквизитыОбъекта(БлокируемыеРеквизиты, БезЭлементовФорм = Ложь) Экспорт
	//++ Локализация
    БлокируемыеРеквизиты.Добавить("РасходыНаРемонтОС");
    БлокируемыеРеквизиты.Добавить("СчетУчета8Класс");
    БлокируемыеРеквизиты.Добавить("СебестоимостьРеализации");
	//-- Локализация
КонецПроцедуры

// Дополняет список недоступных для выбора предопределенных статей расходов
//
// Параметры:
// 	ЗаблокированныеСтатьи - Массив - Ссылки на недоступные статьи расходов 
//
Процедура ДополнитьСписокЗаблокированныхСтатей(ЗаблокированныеСтатьи) Экспорт
    Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
        ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РаспределениеНачальныхОстатковНЗП);
    КонецЕсли;
КонецПроцедуры

// Заполняет реквизиты параметров настройки счетов учета расходов, которые влияют на настройку,
// 	соответствующими им именам реквизитов аналитики учета.
//
// Параметры:
// 	СоответствиеИмен - Соответствие - ключом выступает имя реквизита, используемое в настройке счетов учета,
// 		значением является соответствующее имя реквизита аналитики учета.
// 
Процедура ЗаполнитьСоответствиеРеквизитовНастройкиСчетовУчета(СоответствиеИмен) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры


// Параметры:
// 	СтатьяРасходов - ПланВидовХарактеристикОбъект.СтатьиРасходов - 
//
Процедура ЗаполнитьРеквизитыПредопределеннойСтатьиРасходов(СтатьяРасходов) Экспорт
	
	
	//++ Локализация
	//++ НЕ УТ
    
    //-- НЕ УТ
    
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Вызывается из соответствующего обработчика формы плана видов характеристик
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма плана видов характеристик
//
Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт
	//++ Локализация
	Объект = Форма.Объект;
	ЗаполнитьСписокВыбораКорСчета(Форма);
	УправлениеЭлементамиФормы(Форма);
	//-- Локализация
КонецПроцедуры

Процедура ВидДеятельностиРасходовПриИзменении(Форма) Экспорт
	//++ Локализация
	ЗаполнитьСписокВыбораКорСчета(Форма);
	//-- Локализация
КонецПроцедуры

Процедура ТипЗначенияПриИзмененииСервер(Форма) Экспорт
	//++ Локализация
	ИзмененныеРеквизиты = Новый СписокЗначений;
	//-- Локализация
КонецПроцедуры

Процедура ВариантРаспределенияРасходовРеглПриИзменении(Форма) Экспорт
	//++ Локализация
	ИзмененныеРеквизиты = Новый СписокЗначений;
	УправлениеЭлементамиФормы(Форма);
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика формы объекта
//
// Параметры:
// 	ИмяЭлемента - Строка - Имя элемента управления
// 	Форма - ФормаКлиентскогоПриложения - Форма плана видов характеристик
//
Процедура ПриИзмененииРеквизита(ИмяЭлемента, Форма) Экспорт
	//++ Локализация
	//++ НЕ УТ
	ИзмененныеРеквизиты = Новый СписокЗначений;
	ИзмененныйРеквизит = Форма.Элементы[ИмяЭлемента].ПутьКДанным;
	ИзмененныеРеквизиты.Добавить(СтрЗаменить(ИзмененныйРеквизит, "Объект.", ""));
	УправлениеЭлементамиФормы(Форма);
	//-- НЕ УТ
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика формы объекта
//
// Параметры:
// 	ИмяКоманды - Строка - Имя команды
// 	Форма - ФормаКлиентскогоПриложения - Форма плана видов характеристик
//
Процедура ВыполнитьКоманду(ИмяКоманды, Форма) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Дополняет список типов аналитик описанием объектов производства 2.1
//
// Параметры:
// 	СписокТипов - СписокЗначений - Список типов аналитик:
// 		* Значение - Строка - Строковое описание типа (Например, "ДокументСсылка.ЗаказНаПроизводство")
// 		* Представление - Строка - Представление типа для отображения на форме.
//
Процедура ДополнитьСписокТиповАналитикамиПроизводством21(СписокТипов) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Дополняет список типов аналитик описанием учета зарплаты
//
// Параметры:
// 	СписокТипов - СписокЗначений - Список типов аналитик:
// 		* Значение - Строка - Строковое описание типа (Например, "ПеречислениеСсылка.ВидыОперацийПоЗарплате")
// 		* Представление - Строка - Представление типа для отображения на форме.
//
Процедура ДополнитьСписокТиповАналитикамиУчетаЗарплаты(СписокТипов) Экспорт
	//++ Локализация
	//++ НЕ УТ
	//-- НЕ УТ
	//-- Локализация
КонецПроцедуры

//++ НЕ УТ
// Дополняет список выбора типов аналитик расходов для типа расходов "ФормированиеСтоимостиВНА".
//
// Параметры:
// 	СписокВыбора - СписокЗначений - Список типов аналитик:
// 		* Значение - Строка - Строковое описание типа (Например, "ПеречислениеСсылка.ВидыОперацийПоЗарплате")
// 		* Представление - Строка - Представление типа для отображения на форме.
//
Процедура ДополнитьСписокВыбораФормированиеСтоимостиВНА(СписокВыбора) Экспорт
	//++ Локализация
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") И ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
        СписокВыбора.Добавить("СправочникСсылка.ОбъектыСтроительства22",НСтр("ru='Объекты строительства (2.1)';uk='Об''єкти будівництва (2.1)'"));
        СписокВыбора.Добавить("СправочникСсылка.ОбъектыСтроительства", 	НСтр("ru='Объекты строительства (2.5)';uk='Об''єкти будівництва (2.5)'"));
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		СписокВыбора.Добавить("СправочникСсылка.ОбъектыСтроительства22",НСтр("ru='Объекты строительства';uk='Об''єкти будівництва'"));
	КонецЕсли;
	//-- Локализация
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#КонецОбласти

//++ Локализация

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов


//++ НЕ УТ








//-- НЕ УТ

#КонецОбласти

#Область НастройкаСчетовРеглУчета

Процедура ЗаполнитьСписокВыбораКорСчета(Форма)
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СписокВыбора = Элементы.КорреспондирующийСчет.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность
		 ИЛИ Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность Тогда
    	СписокВыбора.Добавить("23", НСтр("ru='Производство (23)';uk='Виробництво (23)'"));
    	СписокВыбора.Добавить("91", НСтр("ru='Общепроизводственные затраты (91)';uk='Загальновиробничі витрати (91)'"));
    	СписокВыбора.Добавить("92", НСтр("ru='Административные затраты (92)';uk='Адміністративні витрати (92)'"));
    	СписокВыбора.Добавить("93", НСтр("ru='Затраты на сбыт (93)';uk='Витрати на збут (93)'"));
	КонецЕсли;
	Если Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность
		 ИЛИ Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность Тогда
        СписокВыбора.Добавить("949", НСтр("ru='Другие затраты операционной деятельности (949)';uk='Інші витрати операційної діяльності (949)'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура УправлениеЭлементамиФормы(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ВариантРаспределенияРегл = Объект.ВариантРаспределенияРасходовРегл;
	НаПрочиеАктивы = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы);
	НаВнеоборотныеАктивы = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы);
	НаСебестоимостьТоваровРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров);
	НаНаправленияДеятельностиРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	НаРасходыБудущихПериодовРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	НаПроизводственныеЗатратыРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	НеРаспределятьРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	
	Элементы.ГруппаДоступностьДляВыбораВДокументах.Видимость = НЕ НаПрочиеАктивы;
	
	//++ НЕ УТ	
	
    
	//-- НЕ УТ
	
КонецПроцедуры

    
#КонецОбласти

#КонецОбласти

//-- Локализация
