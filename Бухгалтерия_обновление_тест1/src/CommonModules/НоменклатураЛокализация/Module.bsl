#Область СлужебныеПроцедурыИФункции

#Область ВидНоменклатуры

Процедура СвязьОсобенностейУчетаИФО(СвязьОсобенностейУчетаИФО) Экспорт
	
	
	Возврат;

КонецПроцедуры

Процедура ПодсказкаПоОсобенностиУчетаНоменклатуры(ТекстПодсказки, ОсобенностьУчета) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	РеквизитыНастройкиУказанияСерий - Массив из Строка
//
Процедура РеквизитыНастройкиУказанияСерий(РеквизитыНастройкиУказанияСерий) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

Процедура ОписаниеИспользованияРеквизитовСерии(ОписанияИспользованияРеквизитовСерии, НастройкиИспользованияСерий = Неопределено, ПараметрыУказанияСерий = Неопределено, ЗначенияПолейСвязи = Неопределено) Экспорт
	

	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета(ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

Процедура ПредусмотренаАвтоматическаяГенерацияСерий(ПредусмотренаАвтоматическаяГенерацияСерий, НастройкиИспользованияСерий) Экспорт
	
    ПредусмотренаАвтоматическаяГенерацияСерий = Ложь;
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыВидаНоменклатурыПоУмолчанию(ВидНоменклатуры) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

Процедура ОтборПолитикУчетаСерийПоПараметрам(Отбор, Параметры) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

Процедура РеквизитыНеРедактируемыеВГрупповойОбработкеНоменклатура(НеРедактируемыеРеквизиты) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
// 
// Параметры:
// 	БлокируемыеРеквизиты - Массив из Строка - имена блокируемых реквизитов
// 
Процедура ПолучитьБлокируемыеРеквизитыОбъекта(БлокируемыеРеквизиты) Экспорт
	
	БлокируемыеРеквизиты.Добавить("ВестиУчетПоГТД");
	БлокируемыеРеквизиты.Добавить("ПодакцизныйТовар");
	БлокируемыеРеквизиты.Добавить("ЛьготаНДС");
	БлокируемыеРеквизиты.Добавить("ИзмеряетсяТолькоВСуммовомВыражении");
	БлокируемыеРеквизиты.Добавить("ТекстДляПечатиВКолонкеЦенаНалоговойНакладной");
	БлокируемыеРеквизиты.Добавить("ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной");
    БлокируемыеРеквизиты.Добавить("СтатьяДекларацииПоАкцизномуНалогу");
	БлокируемыеРеквизиты.Добавить("УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека");
    БлокируемыеРеквизиты.Добавить("НоменклатураГТД");
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	СтрогоБерутсяИзВида - Массив из Строка
// 	ЗаполняютсяТолькоПриСозданииНоменклатуры - Массив из Строка
// 	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию - Массив из Строка
// 	ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены - Массив из Строка
// 	ЗначенияПоУмолчанию - Структура
//
Процедура ЗаполнитьРеквизитыПоВидуНоменклатуры(СтрогоБерутсяИзВида,
		ЗаполняютсяТолькоПриСозданииНоменклатуры,
		ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию,
		ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены,
		ЗначенияПоУмолчанию) Экспорт
	
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ВестиУчетПоГТД");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ПодакцизныйТовар");
    ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("СтатьяДекларацииПоАкцизномуНалогу");
    ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ЛьготаНДС");
	
	
	Возврат;
	
КонецПроцедуры

Процедура ОтработатьЛогикуСвязиРеквизитов(Номенклатура) Экспорт
	
    ТипНоменклатуры = Номенклатура.ТипНоменклатуры;
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		Или ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда 

		Номенклатура.СтатьяДекларацииПоАкцизномуНалогу = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
		Номенклатура.УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека = Ложь;
		Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
			Номенклатура.НоменклатураГТД      = Неопределено;
		КонецЕсли;
    КонецЕсли;    
    
	Если НЕ (Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор) Тогда 
		
		Номенклатура.ИзмеряетсяТолькоВСуммовомВыражении = Ложь;
		Номенклатура.ТекстДляПечатиВКолонкеЦенаНалоговойНакладной = "";
		Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной = "";
		
	КонецЕсли;
	
	Если Не Номенклатура.ИзмеряетсяТолькоВСуммовомВыражении Тогда
		Номенклатура.ТекстДляПечатиВКолонкеЦенаНалоговойНакладной       = "";
		Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной = "";
	КонецЕсли;
    
	Возврат;
	
КонецПроцедуры

Функция ТекстЗначенияНеЗаполнен(ИмяРаздела) Экспорт
	
	Если ИмяРаздела = "НоменклатураГТД" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
    КонецЕсли;    
	
	Возврат "";
	
КонецФункции

// Параметры:
// 	ТабличныйДокументПраво - ТабличныйДокумент
// 	Объект - СправочникОбъект.Номенклатура
// 	НастройкиВидимостиИЗаголовков - см. Справочники.Номенклатура.НастройкиВидимостиИЗаголовков
// 	ДляПечати - Булево
//   ПараметрыВывода - Структура - Параметры формирования табличных документов
//
Процедура ВывестиГлавы(ТабличныйДокументПраво, Объект, НастройкиВидимостиИЗаголовков, ДляПечати, ПараметрыВывода = Неопределено) Экспорт
	
	//++ Локализация
	
	Перем Заголовок;
	
	СтруктураВидимости = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	СтруктураЗаголовков = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Макет = Справочники.Номенклатура.ПолучитьМакет("ПФ_MXL_КарточкаНоменклатурыЛокализация");
    Если ПараметрыВывода <> Неопределено Тогда
    	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
    Иначе
    	КодЯзыкаПечать = МультиязычностьУкр.ПолучитьЯзыкФормированияПечатныхФорм();
    КонецЕсли; 
    Если ЗначениеЗаполнено(КодЯзыкаПечать) Тогда
    	Макет.КодЯзыкаМакета = КодЯзыкаПечать; 
    КонецЕсли;
		
	#Область РегламентированныйУчет
	
	Если ГлаваВидна("РегламентированныйУчет", СтруктураВидимости) Тогда 
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("РегламентированныйУчетЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
        
		
		Если Справочники.Номенклатура.РазделВиден("ПодакцизныйТовар", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ПодакцизныйТоварСтрока");
			Картинка = Справочники.Номенклатура.КартинкаФлагаПоЗначению(Объект.ПодакцизныйТовар);
			Область.Область("ПодакцизныйТоварФлаг").Картинка = Картинка;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ПодакцизныйТовар";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);		
		КонецЕсли;

        Если Справочники.Номенклатура.РазделВиден("ВестиУчетПоГТД", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ВестиУчетПоГТДСтрока");
			Картинка = Справочники.Номенклатура.КартинкаФлагаПоЗначению(Объект.ВестиУчетПоГТД);
			Область.Область("ВестиУчетПоГТДФлаг").Картинка = Картинка;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ВестиУчетПоГТД";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);		
		КонецЕсли;
        
        
		
        
        Если Справочники.Номенклатура.РазделВиден("НоменклатураГТД", СтруктураВидимости) Тогда
        	Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, "НоменклатураГТД", Объект.НоменклатураГТД);
        КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	

	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	РеквизитыОтключенныеПоФО - Массив из Строка
// 
Процедура РеквизитыОтключенныеПоФО(РеквизитыОтключенныеПоФО) Экспорт
	
    ИспользоватьИмпортныеТовары					= ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеТовары");
	Если Не ИспользоватьИмпортныеТовары Тогда
		РеквизитыОтключенныеПоФО.Добавить("ВестиУчетПоГТД");
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	ОбязательноОтображаемыеПриСозданииРеквизиты - Массив из Строка
// 	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
// 	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
//
Процедура ОбязательноОтображаемыеПриСозданииРеквизиты(ОбязательноОтображаемыеПриСозданииРеквизиты, ТипНоменклатуры, ОсобенностьУчета) Экспорт
	
	ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("ВестиУчетПоГТД");
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("ПодакцизныйТовар");
	КонецЕсли;
	
    ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("НоменклатураГТД");
    ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("СтатьяДекларацииПоАкцизномуНалогу");
	ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека");
    ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("ЛьготаНДС");
    ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("ИзмеряетсяТолькоВСуммовомВыражении");
	
	Возврат;
	
КонецПроцедуры

Процедура РеквизитыСПереопределеннойОбязательностьюЗаполнения(РеквизитыСПереопределеннойОбязательностьюЗаполнения, ТипНоменклатуры, ОсобенностьУчета, Объект) Экспорт
	
	
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	НеотображаемыеВТаблицеНастроекРеквизиты - Массив из Строка
// 
Процедура НеотображаемыеВТаблицеНастроекРеквизиты(НеотображаемыеВТаблицеНастроекРеквизиты) Экспорт
	
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ТекстДляПечатиВКолонкеЦенаНалоговойНакладной");       // Используется совместно с ИзмеряетсяТолькоВСуммовомВыражении
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной"); // Используется совместно с ИзмеряетсяТолькоВСуммовомВыражении
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	НеиспользуемыеДляКонтроляУникальностиРеквизиты - Массив из Строка
// 
Процедура НеиспользуемыеДляКонтроляУникальностиРеквизиты(НеиспользуемыеДляКонтроляУникальностиРеквизиты) Экспорт
	
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ЛьготаНДС");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ИзмеряетсяТолькоВСуммовомВыражении");
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("НоменклатураГТД");
	
	Возврат;
	
КонецПроцедуры

Процедура НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы(НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура РекомендуемыеДляКонтроляУникальностиРеквизиты(РекомендуемыеДляКонтроляУникальностиРеквизиты, ТипНоменклатуры, ОсобенностьУчета) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	ТаблицаРеквизитов - см. Справочники.Номенклатура.ЗависимостьРеквизитовОтТипаНоменклатуры
// 	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
// 	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
// 	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры
// 	ЭтоРеквизитыХарактеристик - Булево
//  ВестиУчетПоГТД - Булево - признак ведения учета по ГТД 
//  ИзмеряетсяТолькоВСуммовомВыражении - Булево - признак измерения номенклатуры только в суммовом выражении 
//  ПодакцизныйТовар - Булево - признак подакцизного товара 
// 
Процедура ЗависимостьРеквизитовОтТипаНоменклатуры(ТаблицаРеквизитов,
    ТипНоменклатуры,
	ОсобенностьУчета,
	ИспользованиеХарактеристик,
	ЭтоРеквизитыХарактеристик,
    ВестиУчетПоГТД = Ложь, 
    ИзмеряетсяТолькоВСуммовомВыражении = Ложь, 
    ПодакцизныйТовар = Ложь
    ) Экспорт
	
	Если ТипЗнч(ИспользованиеХарактеристик) = Тип("ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры") Тогда
		ИспользоватьХарактеристики = ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	Иначе
		ИспользоватьХарактеристики = ИспользованиеХарактеристик;
	КонецЕсли;
	
	ЭтоТовар 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоУслуга 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоРабота 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоМногооборотнаяТара 	= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
    ЭтоНабор 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Реквизиты = Метаданные.Справочники.ХарактеристикиНоменклатуры.Реквизиты;
	Иначе
		Реквизиты = Метаданные.Справочники.Номенклатура.Реквизиты;
	КонецЕсли;
	
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Возврат;
	КонецЕсли;
	
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВестиУчетПоГТД;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ПодакцизныйТовар;
	НоваяСтрока.Использование = ЭтоТовар;
	
	
	
	
    
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.НоменклатураГТД;
	НоваяСтрока.Использование       = НЕ ЭтоНабор;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ИзмеряетсяТолькоВСуммовомВыражении;
	НоваяСтрока.Использование       = НЕ (ЭтоТовар Или ЭтоМногооборотнаяТара);
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ТекстДляПечатиВКолонкеЦенаНалоговойНакладной;
	НоваяСтрока.Использование       = НЕ(ЭтоТовар Или ЭтоМногооборотнаяТара) И (ИзмеряетсяТолькоВСуммовомВыражении);
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной;
	НоваяСтрока.Использование       = НЕ(ЭтоТовар Или ЭтоМногооборотнаяТара) И (ИзмеряетсяТолькоВСуммовомВыражении);
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.СтатьяДекларацииПоАкцизномуНалогу;
	НоваяСтрока.Использование       = (ЭтоТовар Или ЭтоМногооборотнаяТара) И ПодакцизныйТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека;
	НоваяСтрока.Использование 		= (ЭтоТовар Или ЭтоМногооборотнаяТара) И ПодакцизныйТовар;
	
	Возврат;
	
КонецПроцедуры

Процедура ИспользованиеЭлементов(ВидимостьЭлементов, Объект, РежимВидимостиПоказатьТолькоВажные, РежимПроверкиИспользованияРеквизитов) Экспорт
		

	Если Не РежимПроверкиИспользованияРеквизитов Тогда	
    	ВидимостьЭлементов.Вставить("НоменклатураГТДДекорация", ВидимостьЭлементов.НоменклатураГТД);
	КонецЕсли;
	ЭтоСтавкаБезНДСИлиНеНДС = (Объект.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС")) ИЛИ (Объект.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.НеНДС"));
	ВидимостьЭлементов.Вставить("ЛьготаНДС", ЭтоСтавкаБезНДСИлиНеНДС);
	ВидимостьЭлементов.Вставить("КодЛьготы", ЭтоСтавкаБезНДСИлиНеНДС);
    
	Возврат;
	
КонецПроцедуры

Процедура ЗаголовкиЭлементов(ЗаголовкиЭлементов, Объект, ВидимостьЭлементов) Экспорт
    
	Если Объект.ВестиУчетПоГТД Тогда
		ЗаголовкиЭлементов.Вставить("НоменклатураГТДДекорация", НСтр("ru='Код номенклатуры для налоговых документов указывается для любых товаров, номер ГТД указывается только для импортных товаров';uk='Код номенклатури для податкових документів вказується для будь-яких товарів, номер ВМД зазначається тільки для імпортних товарів'"));
	Иначе
		ЗаголовкиЭлементов.Вставить("НоменклатураГТДДекорация", НСтр("ru='Указывается справочно, только для заполнения в налоговых документах';uk='Вказується довідково, тільки для заповнення в податкових документах'"));
	КонецЕсли;
    
	Возврат;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияНоменклатура(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ПараметрыКопированияДополнительныхДанных(Объект, ПараметрыСоздания, ПараметрыКопированияДополнительныхДанных, СоответствияСкопированныхОбъектов) Экспорт
	
	ВариантПереносаНастроекПоХарактеристикам =
	 НоменклатураСервер.ВариантПереносаНастроекПоХарактеристикам(Объект,
	 		ПараметрыСоздания.ИсточникКопирования,
			СоответствияСкопированныхОбъектов);
			
	Если ВариантПереносаНастроекПоХарактеристикам = "НеПереносить" Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьПоПараметрамСоздания(Объект, ПараметрыСоздания) Экспорт
	
	//++ Локализация
	//-- Локализация
	
	Возврат;

КонецПроцедуры

Процедура СкопироватьДополнительныеДанные(Объект, ПараметрыСоздания, ПараметрыКопированияДополнительныхДанных, СоответствияСкопированныхОбъектов) Экспорт
	
	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик - Массив из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
// 
Процедура ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик(ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ХарактеристикиНоменклатуры

Процедура ОбработкаПроверкиЗаполненияХарактеристикиНоменклатуры(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

Процедура ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов, ПараметрыПроверки) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

Процедура ПроверитьВозможностьОткрытияФормыУказанияСерий(НастройкиИспользованияСерий, ПараметрыУказанияСерий, ЗначенияПолейСвязи) Экспорт
	
	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ПредставлениеТовараВФормеУказанияСерий(ТоварПредставление, ЗначенияПолейСвязи) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	Объект - ОбработкаОбъектИмяОбработки - должна содержать:
// 		* Серии - ТабличнаяЧасть
Процедура ПроверитьЗаполнениеРеквизитовСерий(Объект, МассивНепроверяемыхРеквизитов, ПараметрыПроверки, Отказ) Экспорт
	
	НастройкиИспользованияСерий        = ПараметрыПроверки.НастройкиИспользованияСерий;
	ПараметрыУказанияСерий             = ПараметрыПроверки.ПараметрыУказанияСерий;
	ЗначенияПолейСвязи                 = ПараметрыПроверки.ЗначенияПолейСвязи;
	
	//++ Локализация
	//-- Локализация
	
	
	Возврат;
	
КонецПроцедуры

Функция ДобавитьСериюПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки) Экспорт
	
	ОбрабатываемаяСтрока = Неопределено;
	
	//++ Локализация
	//-- Локализация
	
	Возврат ОбрабатываемаяСтрока;
	
КонецФункции

Процедура РеквизитыСерииИзСтроки(РеквизитыСерии, Знач ВведеннаяСтрока, НастройкиИспользованияСерий) Экспорт
	
	ГоденДо = Неопределено;
	Номер   = Неопределено;
	
	ВведеннаяСтрока = СтрЗаменить(ВведеннаяСтрока, " "+" "," ");
	
	Если НастройкиИспользованияСерий.ИспользоватьСрокГодностиСерии Тогда
		СтрокаГоденДо			= "";
		ФорматСтрокиГодности	= "";
		
		Для Каждого ОписаниеРеквизита Из НастройкиИспользованияСерий.ОписанияИспользованияРеквизитовСерии Цикл
			Если ОписаниеРеквизита.ИмяРеквизита = "ГоденДо" Тогда
				ФорматСтрокиГодности = ОписаниеРеквизита.Формат;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов") Тогда
			ДлинаСтрокиГоденДо = СтрДлина(ФорматСтрокиГодности) - 5; // 5 = СтрДлина("ДФ=''")
		Иначе	
			ДлинаСтрокиГоденДо = СтрДлина(ФорматСтрокиГодности) - 3; // 3 = СтрДлина("ДФ=")
		КонецЕсли;
		
        СтрокаГоденДо = Прав(СокрЛП(ВведеннаяСтрока), ДлинаСтрокиГоденДо);
		
	КонецЕсли;
	
	Если НастройкиИспользованияСерий.ИспользоватьСрокГодностиСерии Тогда
		
		Если СтрДлина(СтрокаГоденДо) <> ДлинаСтрокиГоденДо Тогда
			ГоденДо = '00010101';
		КонецЕсли;
		
		Если ГоденДо = Неопределено Тогда
			МассивЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаГоденДо,".");
			
			Если (НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев")
					И МассивЧастей.Количество() < 2)
				Или (НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии <> ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев")
					И МассивЧастей.Количество() < 3) Тогда
				
				ГоденДо = '00010101';
				
			КонецЕсли;
		КонецЕсли;
		
		Если ГоденДо = Неопределено Тогда
			Если НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии <> ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев") Тогда
				День  = МассивЧастей[0];
				Месяц = МассивЧастей[1];
			Иначе
				День  = "01";
				Месяц = МассивЧастей[0];
				Год   = МассивЧастей[1];
			КонецЕсли;
			
			Если НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов") Тогда
				ГодЧас =  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МассивЧастей[2]," ");
				Если ГодЧас.Количество() = 2 Тогда
					Год = ГодЧас[0];
					Час = ГодЧас[1];
				ИначеЕсли ГодЧас.Количество() = 1 Тогда
					Год = ГодЧас[0];
					Час = "00";
				Иначе
					Год = "00";
					Час = "00";
				КонецЕсли;	
			Иначе
				Если НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоДней") Тогда
					Год = МассивЧастей[2];
				КонецЕсли;
				Час = "00";
			КонецЕсли;
			
			Если СтрНайти(Час, ":") > 0 Тогда
				Час = Лев(Час, СтрНайти(Час, ":") - 1);
			КонецЕсли;
			
			ДатаСтрокой = "20" + Год + Месяц + День + Час + "0000";
			
			ТипДата = Новый ОписаниеТипов("Дата");
			ГоденДо = ТипДата.ПривестиЗначение(ДатаСтрокой);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкиИспользованияСерий.ИспользоватьНомерСерии Тогда
		Если ЗначениеЗаполнено(ГоденДо) Тогда
			Номер = СтрЗаменить(ВведеннаяСтрока," " + НСтр("ru='до';uk='до'") + " " + СтрокаГоденДо, "");
		Иначе
			Номер = ВведеннаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
	
	Если Номер <> Неопределено Тогда
		РеквизитыСерии.Номер = Номер;
	КонецЕсли;
	
	Если ГоденДо <> Неопределено Тогда
		РеквизитыСерии.ГоденДо = ГоденДо;
	КонецЕсли;
	
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	ШтрихкодыПоТипам - см. ШтрихкодированиеНоменклатурыСервер.СтруктураПоТипамШтрихкодов
// 	ШтрихКод - см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода
// 	
// Возвращаемое значение:
// 	Булево - это типизированный штрих-код
// 
Функция ОтнестиШтрихкодКТипу(ШтрихкодыПоТипам, ШтрихКод) Экспорт
	
	ЭтоТипизированныйШтрихКод = Ложь;
	
	//++ Локализация
	//-- Локализация
	
	Возврат ЭтоТипизированныйШтрихКод; 
	
КонецФункции

#КонецОбласти

#Область ПолитикиУчетаСерий

Процедура ПередЗаписьюПолитикиУчетаСерий(Объект) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Возвращает массив областей поиска товаров.
//
// Параметры:
// 	ОбластиПоиска - Массив - Массив метаданных областей поиска товаров.
// 	Форма - ФормаКлиентскогоПриложения - форма, из которой была вызвана функция поиска.
// 	ПараметрыПоиска - Структура
//
Процедура ОписанияОбластейПоиска(ОбластиПоиска, Форма, ПараметрыПоиска) Экспорт
    
	//++ Локализация
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

//++ Локализация

Функция ГлаваВидна(ИмяГлавы, СтруктураВидимости)
	
	Если ИмяГлавы = "РегламентированныйУчет" Тогда
		Возврат Справочники.Номенклатура.РазделВиден("ПодакцизныйТовар", СтруктураВидимости)
					Или Справочники.Номенклатура.РазделВиден("ВестиУчетПоГТД", СтруктураВидимости)
                    Или Справочники.Номенклатура.РазделВиден("НоменклатураГТД", СтруктураВидимости);
	КонецЕсли;
				
	
	Возврат Ложь;
	
КонецФункции

//-- Локализация




Процедура ЗаполнитьТекстМаркируемаяПродукция(ПолеЗапроса, ПутьКПолюНоменклатура) Экспорт
	
	//++ Локализация
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#КонецОбласти