///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается для обновления данных бизнес-процесса в регистре сведений ДанныеБизнесПроцессов.
//
// Параметры:
//  Запись - РегистрСведенийЗапись.ДанныеБизнесПроцессов - Запись данных бизнес-процесса.
//
Процедура ПриЗаписиСпискаБизнесПроцессов(Запись) Экспорт
	
КонецПроцедуры

// Вызывается для проверки прав на остановку и продолжение бизнес-процесса
// у текущего пользователя.
//
// Параметры:
//  БизнесПроцесс        - БизнесПроцессСсылка - ссылка на бизнес-процесс.
//  ЕстьПрава            - Булево              - если установить Ложь, то прав нет.
//  СтандартнаяОбработка - Булево              - если установить Ложь, то стандартная проверка прав не будет выполнена.
//
Процедура ПриПроверкеПравНаОстановкуБизнесПроцесса(БизнесПроцесс, ЕстьПрава, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Истина;	

КонецПроцедуры

// Вызывается для заполнения реквизита ГлавнаяЗадача из данных заполнения.
//
// Параметры:
//  БизнесПроцессОбъект  - БизнесПроцессОбъект - бизнес-процесс.
//  ДанныеЗаполнения     - Произвольный        - данные заполнения, которые передаются в обработчик заполнения.
//  СтандартнаяОбработка - Булево              - если установить Ложь, то стандартная обработка заполнения не будет
//                                               выполнена.
//
Процедура ПриЗаполненииГлавнойЗадачиБизнесПроцесса(БизнесПроцессОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Истина;	
	
КонецПроцедуры

// Вызывается для заполнения параметров формы задачи.
//
// Параметры:
//  ИмяБизнесПроцесса           - Строка                         - название бизнес-процесса.
//  ЗадачаСсылка                - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//  ТочкаМаршрутаБизнесПроцесса - ТочкаМаршрутаБизнесПроцессаСсылка.Задание - действие.
//  ПараметрыФормы              - Структура                      - описание выполнения задачи со свойствами:
//   * ИмяФормы       - имя формы, передаваемое в метод ОткрытьФорму. 
//   * ПараметрыФормы - содержит параметры открываемой формы.
//
// Пример:
//  Если ИмяБизнесПроцесса = "Задание" Тогда
//      ИмяФормы = "БизнесПроцесс.Задание.Форма.ВнешнееДействие" + ТочкаМаршрутаБизнесПроцесса.Имя;
//      ПараметрыФормы.Вставить("ИмяФормы", ИмяФормы);
//  КонецЕсли;
//
Процедура ПриПолученииФормыВыполненияЗадачи(ИмяБизнесПроцесса, ЗадачаСсылка,
	ТочкаМаршрутаБизнесПроцесса, ПараметрыФормы) Экспорт
	
КонецПроцедуры

// Заполняет список бизнес-процессов, которые подключены к подсистеме
// и модули менеджеров которых содержат следующие экспортные процедуры и функции:
//  - ПриПеренаправленииЗадачи.
//  - ФормаВыполненияЗадачи.
//  - ОбработкаВыполненияПоУмолчанию.
//
// Параметры:
//   ПодключенныеБизнесПроцессы - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                                               подключенного к подсистеме "Бизнес-процессы и задачи".
//                                               В качестве значения - пустую строку.
//
// Пример:
//   ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.ЗаданиеСРолевойАдресацией.ПолноеИмя(), "");
//
Процедура ПриОпределенииБизнесПроцессов(ПодключенныеБизнесПроцессы) Экспорт
	
	ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.Задание.ПолноеИмя(), "");
//++ НЕ БЗК	
	ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.СогласованиеЗакупки.ПолноеИмя(), "");
	ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.СогласованиеЗаявкиНаВозвратТоваровОтКлиента.ПолноеИмя(), "");
	ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.СогласованиеПродажи.ПолноеИмя(), "");
	ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.СогласованиеЦенНоменклатуры.ПолноеИмя(), "");
	ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.ТиповаяПродажа.ПолноеИмя(), "");
//-- НЕ БЗК
	
КонецПроцедуры

// Вызывается из модулей объектов подсистемы БизнесПроцессыИЗадачи для
// возможности настройки логики ограничения в прикладном решении.
//
// Пример заполнения наборов значений доступа см. в комментарии
// к процедуре УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа.
//
// Параметры:
//  Объект - БизнесПроцессОбъект.Задание - объект, для которого нужно заполнить наборы.
//  
//  Таблица - ТаблицаЗначений - возвращаемая функцией УправлениеДоступом.ТаблицаНаборыЗначенийДоступа.
//
Процедура ПриЗаполненииНаборовЗначенийДоступа(Объект, Таблица) Экспорт
	
	БизнесПроцессыИЗадачиЛокализация.ПриЗаполненииНаборовЗначенийДоступа(Объект, Таблица);
	
КонецПроцедуры

// Вызывается из модуля менеджера справочника РолиИсполнителей при начальном заполнении
// ролей исполнителей в прикладном решении.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов 
//                                 справочника РолиИсполнителей.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением. Например:
//                                  Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                  ЭлементТЧ = Элемент.Ключи.Добавить();
//                                  ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииРолейИсполнителей(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	#Область СогласующийЗаявкиНаВозвратТоваровОтКлиентов
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СогласующийЗаявкиНаВозвратТоваровОтКлиентов";
	Элемент.Наименование = НСтр("ru='Согласующий заявки на возврат товаров от клиентов';uk='Погоджуючий заявки на повернення товарів від клієнтів'",КодОсновногоЯзыка);
	Элемент.Код = "000000007";
	Элемент.ИспользуетсяБезОбъектовАдресации = Истина;
	Элемент.ИспользуетсяСОбъектамиАдресации = Ложь;
	Элемент.ВнешняяРоль = Ложь;
	
	Назначение = ТабличныеЧасти.Назначение.Скопировать(); // СправочникТабличнаяЧасть.РолиИсполнителей.Назначение -
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	Элемент.Назначение = Назначение;
	#КонецОбласти

	#Область СогласующийКоммерческиеУсловияЗакупок
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СогласующийКоммерческиеУсловияЗакупок";
	Элемент.Наименование = НСтр("ru='Согласующий коммерческие условия закупок';uk='Погоджуючий комерційні умови купівель'",КодОсновногоЯзыка);
	Элемент.Код = "000000008";
	Элемент.ИспользуетсяБезОбъектовАдресации = Истина;
	Элемент.ИспользуетсяСОбъектамиАдресации = Ложь;
	Элемент.ВнешняяРоль = Ложь;
	
	Назначение = ТабличныеЧасти.Назначение.Скопировать(); // СправочникТабличнаяЧасть.РолиИсполнителей.Назначение -
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	Элемент.Назначение = Назначение;
	#КонецОбласти

	#Область СогласующийКоммерческиеУсловияПродаж
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СогласующийКоммерческиеУсловияПродаж";
	Элемент.Наименование = НСтр("ru='Согласующий коммерческие условия продаж';uk='Погоджуючий комерційні умови продажів'",КодОсновногоЯзыка);
	Элемент.Код = "000000005";
	Элемент.ИспользуетсяБезОбъектовАдресации = Истина;
	Элемент.ИспользуетсяСОбъектамиАдресации = Ложь;
	Элемент.ВнешняяРоль = Ложь;
	
	Назначение = ТабличныеЧасти.Назначение.Скопировать(); // СправочникТабличнаяЧасть.РолиИсполнителей.Назначение -
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	Элемент.Назначение = Назначение;
	#КонецОбласти

	#Область СогласующийЛогистическиеУсловияЗакупок
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СогласующийЛогистическиеУсловияЗакупок";
	Элемент.Наименование = НСтр("ru='Согласующий логистические условия закупок';uk='Погоджуючий логістичні умови купівель'",КодОсновногоЯзыка);
	Элемент.Код = "000000011";
	Элемент.ИспользуетсяБезОбъектовАдресации = Истина;
	Элемент.ИспользуетсяСОбъектамиАдресации = Ложь;
	Элемент.ВнешняяРоль = Ложь;
	
	Назначение = ТабличныеЧасти.Назначение.Скопировать(); // СправочникТабличнаяЧасть.РолиИсполнителей.Назначение -
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	Элемент.Назначение = Назначение;
	#КонецОбласти

	#Область СогласующийЛогистическиеУсловияПродаж
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СогласующийЛогистическиеУсловияПродаж";
	Элемент.Наименование = НСтр("ru='Согласующий логистические условия продаж';uk='Погоджуючий логістичні умови продажів'",КодОсновногоЯзыка);
	Элемент.Код = "000000004";
	Элемент.ИспользуетсяБезОбъектовАдресации = Истина;
	Элемент.ИспользуетсяСОбъектамиАдресации = Ложь;
	Элемент.ВнешняяРоль = Ложь;
	
	Назначение = ТабличныеЧасти.Назначение.Скопировать(); // СправочникТабличнаяЧасть.РолиИсполнителей.Назначение -
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	Элемент.Назначение = Назначение;
	#КонецОбласти

	#Область СогласующийУстановкиЦенНоменклатуры
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СогласующийУстановкиЦенНоменклатуры";
	Элемент.Наименование = НСтр("ru='Согласующий установки цен номенклатуры';uk='Погоджуючий встановлення цін номенклатури'",КодОсновногоЯзыка);
	Элемент.Код = "000000011";
	Элемент.ИспользуетсяБезОбъектовАдресации = Истина;
	Элемент.ИспользуетсяСОбъектамиАдресации = Ложь;
	Элемент.ВнешняяРоль = Ложь;
	
	Назначение = ТабличныеЧасти.Назначение.Скопировать(); // СправочникТабличнаяЧасть.РолиИсполнителей.Назначение -
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	Элемент.Назначение = Назначение;
	#КонецОбласти

	#Область СогласующийФинансовыеУсловияЗакупок
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СогласующийФинансовыеУсловияЗакупок";
	Элемент.Наименование = НСтр("ru='Согласующий финансовые условия закупок';uk='Погоджуючий фінансові умови купівель'",КодОсновногоЯзыка);
	Элемент.Код = "000000010";
	Элемент.ИспользуетсяБезОбъектовАдресации = Истина;
	Элемент.ИспользуетсяСОбъектамиАдресации = Ложь;
	Элемент.ВнешняяРоль = Ложь;
	
	Назначение = ТабличныеЧасти.Назначение.Скопировать(); // СправочникТабличнаяЧасть.РолиИсполнителей.Назначение -
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	Элемент.Назначение = Назначение;
	#КонецОбласти

	#Область СогласующийФинансовыеУсловияПродаж
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СогласующийФинансовыеУсловияПродаж";
	Элемент.Наименование = НСтр("ru='Согласующий финансовые условия продаж';uk='Погоджуючий фінансові умови продажів'",КодОсновногоЯзыка);
	Элемент.Код = "000000003";
	Элемент.ИспользуетсяБезОбъектовАдресации = Истина;
	Элемент.ИспользуетсяСОбъектамиАдресации = Ложь;
	Элемент.ВнешняяРоль = Ложь;
	
	Назначение = ТабличныеЧасти.Назначение.Скопировать(); // СправочникТабличнаяЧасть.РолиИсполнителей.Назначение -
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	Элемент.Назначение = Назначение;
	#КонецОбласти

	#Область СогласующийЦеновыеУсловияЗакупок
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СогласующийЦеновыеУсловияЗакупок";
	Элемент.Наименование = НСтр("ru='Согласующий ценовые условия закупок';uk='Погоджуючий цінові умови купівель'",КодОсновногоЯзыка);
	Элемент.Код = "000000009";
	Элемент.ИспользуетсяБезОбъектовАдресации = Истина;
	Элемент.ИспользуетсяСОбъектамиАдресации = Ложь;
	Элемент.ВнешняяРоль = Ложь;
	
	Назначение = ТабличныеЧасти.Назначение.Скопировать(); // СправочникТабличнаяЧасть.РолиИсполнителей.Назначение -
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	Элемент.Назначение = Назначение;
	#КонецОбласти

	#Область СогласующийЦеновыеУсловияПродаж
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СогласующийЦеновыеУсловияПродаж";
	Элемент.Наименование = НСтр("ru='Согласующий ценовые условия продаж';uk='Погоджуючий цінові умови продажів'",КодОсновногоЯзыка);
	Элемент.Код = "000000002";
	Элемент.ИспользуетсяБезОбъектовАдресации = Истина;
	Элемент.ИспользуетсяСОбъектамиАдресации = Ложь;
	Элемент.ВнешняяРоль = Ложь;
	
	Назначение = ТабличныеЧасти.Назначение.Скопировать(); // СправочникТабличнаяЧасть.РолиИсполнителей.Назначение -
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	Элемент.Назначение = Назначение;
	#КонецОбласти
	
КонецПроцедуры

// Вызывается из модуля менеджера справочника РолиИсполнителей при начальном заполнении
// элемента роль исполнителя в прикладном решении.
//
// Параметры:
//  Объект                  - СправочникОбъект.РолиИсполнителей - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииРолиИсполнителя(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается из модуля менеджера ПВХ ОбъектыАдресацииЗадач при начальном заполнении
// объектов адресации задача в прикладном решении.
// Стандартный реквизит ТипЗначения следует заполнять в процедуре ПриНачальномЗаполненииЭлементаОбъектаАдресацииЗадачи.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов объекта ПВХ ОбъектыАдресацииЗада.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением. Например:
//                                  Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                  ЭлементТЧ = Элемент.Ключи.Добавить();
//                                  ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииОбъектовАдресацииЗадач(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	
	
КонецПроцедуры

// Вызывается из модуля менеджера ПВХ ОбъектыАдресацииЗадач при начальном заполнении
// элемента адресации задача в прикладном решении.
//
// Параметры:
//  Объект                  - ПланВидовХарактеристикОбъект.ОбъектыАдресацииЗадач - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлементаОбъектаАдресацииЗадачи(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти
