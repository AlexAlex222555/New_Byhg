#Область ПрограммныйИнтерфейс

#Область ПолучениеНастроекИПараметровУчетаНДС

// Возвращает настройки учета НДС.
//
// Возвращаемое значение:
// 	 Структура - Параметры учета НДС:
// 	   * ИспользоватьУчетНДС - Булево - Значение опции использования учета НДС
// 	   * ОсновноеНалогообложениеНДСПродажи - ПеречислениеСсылка.ТипыНалогообложенияНДС - Основное налогообложение НДС организации.
// 	   * ОсновнойВидДеятельностиНДСЗакупки - ПеречислениеСсылка.ТипыНалогообложенияНДС - Основной вид деятельности НДС закупки товаров.
// 	   * РаздельныйУчетНДС - Булево - Признак наличия в ИБ организаций, использующих раздельный учет НДС по налогообложению.
// 	   * ПродажиНаЭкспорт - Булево - Применения экспортных операций.
//
Функция НастройкиУчета() Экспорт
	
	НастройкиУчета = Новый Структура();
	НастройкиУчета.Вставить("ИспользоватьУчетНДС", ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"));
	НастройкиУчета.Вставить("ОсновноеНалогообложениеНДСПродажи",
		?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"),
			Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС,
			Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС));
	НастройкиУчета.Вставить("ОсновнойВидДеятельностиНДСЗакупки",
		?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"),
			Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС,
			Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС));
	НастройкиУчета.Вставить("ОсновноеНалоговоеНазначение",
		?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"),
			Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая,
			Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность));
	НастройкиУчета.Вставить("РаздельныйУчетНДС",                             ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению"));
	НастройкиУчета.Вставить("ПродажиНаЭкспорт",                              ПолучитьФункциональнуюОпцию("ИспользоватьПродажиНаЭкспорт"));
	
	УчетНДСЛокализация.ДополнитьНастройкиУчета(НастройкиУчета);
	
	Возврат НастройкиУчета;
	
КонецФункции

// Возвращает параметры учета НДС, установленные для организации в заданном периоде.
//
// Параметры:
// 	Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить параметры.
// 	Дата - Дата - Дата, на которую необходимо получить параметры учета.
//
// Возвращаемое значение:
// 	 Структура - Параметры учета НДС по организации
// 		* ОсновноеНалогообложениеНДСПродажи - ПеречислениеСсылка.ТипыНалогообложенияНДС - Основное налогообложение НДС организации.
// 		* ОсновнойВидДеятельностиНДСЗакупки - ПеречислениеСсылка.ТипыНалогообложенияНДС - Основной вид деятельности НДС закупки товаров.
// 		* РаздельныйУчетНДС - Булево - Признак использование раздельного учета НДС.
//
Функция ПараметрыУчетаПоОрганизации(Знач Организация, Знач Дата, Знач Склад = Неопределено) Экспорт
	
	ПараметрыУчета = Новый Структура();
	
	ОсновноеНалогообложениеИБ = ?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"),
			Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС,
			Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	
	ПараметрыУчета.Вставить("ОсновноеНалогообложениеНДСПродажи",  ОсновноеНалогообложениеИБ);
	ПараметрыУчета.Вставить("ОсновнойВидДеятельностиНДСЗакупки",  ОсновноеНалогообложениеИБ);
	ПараметрыУчета.Вставить("ОсновноеНалоговоеНазначение",
		?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"),
			Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая,
			Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность));
	ПараметрыУчета.Вставить("РаздельныйУчетНДС", Ложь);
	
	
	УчетНДСЛокализация.ДополнитьПараметрыУчетаОрганизации(ПараметрыУчета, Организация, Дата, Склад);
	
	Возврат ПараметрыУчета;
	
КонецФункции

// Возвращает список типов налогообложения, НДС по которым никогда не принимается к возмещению.
//
// Возвращаемое значение:
// 	Массив - Виды деятельности НДС, по которым НДС включается в стоимость.
//
Функция ВидыДеятельностиНДСУчитываетсяВСтоимости() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	УчетНДСЛокализация.ДополнитьВидыДеятельностиНДСУчитываетсяВСтоимости(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает список видов деятельности, НДС по которым принимается к возмещению:
// - в полном объеме или частично;
// - по общим или особым правилам.
//
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ТипыНалогообложенияНДС - Виды деятельности НДС, по которым НДС принимается к вычету.
//
Функция ВидыДеятельностиНДСПринимаетсяКВозмещению() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	Результат.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт);
	УчетНДСЛокализация.ДополнитьВидыДеятельностиНДСПринимаетсяКВозмещению(Результат);
	
	Возврат Результат;
	
КонецФункции


// Возвращает массив типов налогообложения.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ТипыНалогообложенияНДС - массив типов налогообложения
Функция ТипыНалогообложенияНДСНеоблагаемые() Экспорт
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	УчетНДСЛокализация.ДополнитьТипыНалогообложенияНДСНеоблагаемые(МассивТипов);
	
	Возврат МассивТипов;
	
КонецФункции


// Возвращает, является ли контрагент плательщиком НДС
//
// Параметры:
// 	Контрагент - СправочникСсылка.Контрагент
//
// Возвращаемое значение:
// 	Булево -  Истина - Контрагент плательщик НДС, Ложь - Контрагент неплательщик НДС
//
Функция КонтрагентПлательщикНДС(Знач Контрагент, Знач Дата = Неопределено) Экспорт
    Если ЗначениеЗаполнено(Контрагент) Тогда
        ДатаСведений = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());    
        РеквизитыКонтрагента = ПартнерыИКонтрагенты.РеквизитыКонтрагента(Контрагент, ДатаСведений);
		Возврат РеквизитыКонтрагента.ПлательщикНДС;
	Иначе
		Возврат Истина;
	КонецЕсли; 
КонецФункции // КонтрагентПлательщикНДС()


#КонецОбласти

#Область СтавкиНДС

// Возвращает ставку НДС операции по номенклатуре и типу налогообложения НДС.
//
// Параметры:
//   Дата - Дата - Дата операции
//   Номенклатура - СправочникСсылка.Номенклатура - Номенклатура из которой необходимо получить ставку НДС.
//   НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС операции.
//   РеквизитыНоменклатуры - Структура - Реквизиты номенклатуры:
//   							* СтавкаНДС - СправочникСсылка.СтавкиНДС - Ставка НДС, указанная в номенклатуре
//   							* ПодакцизныйТовар - Булево - Признак того, что товар является подакцизным.
//   СтавкаНДСПоТипуНалогообложения - СправочникСсылка.СтавкиНДС - Ставка НДС, однозначно соответствующая типу налогообложения (См. УчетНДСУП.ПолучитьСтавкуНДСПоТипуНалогообложения).
//   
// Возвращаемое значение:
//   СправочникСсылка.СтавкиНДС - Ставка НДС по номенклатуре и типу налогообложения
//
Функция СтавкаНДСПоНоменклатуреИНалогообложению(Дата, Номенклатура, НалогообложениеНДС, РеквизитыНоменклатуры = Неопределено, СтавкаНДСПоТипуНалогообложения = Неопределено) Экспорт
	
	СтавкаНДС = Неопределено;
	
	Если ЗначениеЗаполнено(Номенклатура) И РеквизитыНоменклатуры = Неопределено Тогда
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "СтавкаНДС, ПодакцизныйТовар, ТипНоменклатуры");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НалогообложениеНДС) И СтавкаНДСПоТипуНалогообложения = Неопределено Тогда
		СтавкаНДСПоТипуНалогообложения = СтавкаНДСПоТипуНалогообложения(НалогообложениеНДС);
	КонецЕсли;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		Если РеквизитыНоменклатуры <> Неопределено Тогда
			СтавкаНДС = РеквизитыНоменклатуры.СтавкаНДС;
		Иначе
			СтавкаНДС = СтавкаНДСПоУмолчанию(Дата, Ложь);
		КонецЕсли;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
        СтавкаНДС = Справочники.СтавкиНДС.НеНДС;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОсвобожденаОтНДС Тогда
        СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	ИначеЕсли ЗначениеЗаполнено(СтавкаНДСПоТипуНалогообложения) Тогда
		СтавкаНДС = СтавкаНДСПоТипуНалогообложения;
	КонецЕсли;
	
	УчетНДСЛокализация.ЗаполнитьСтавкуНДСПоНоменклатуреИНалогообложению(
		СтавкаНДС, Дата, Номенклатура, НалогообложениеНДС, РеквизитыНоменклатуры, СтавкаНДСПоТипуНалогообложения);
	
	СкорректироватьСтавкуНДС(СтавкаНДС, Дата);
	
	Возврат СтавкаНДС;

КонецФункции

// Возвращает значение ставки НДС по умолчанию.
//
// Параметры:
//  Дата - Дата - дата на которую необходимо получить ставку НДС по умолчанию,
//               если дата пустая, то будет получена ставка НДС на текущую дату.
//  РасчетнаяСтавка - Булево - указывает необходимость получения расчетной ставки НДС X/(100 + X).
//   НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС, для которого необходимо получить ставку.
//   			Если Неопределено, то ставка получается для налогообложения ПродажаОблгаетсяНДС.
// Возвращаемое значение:
//  СправочникСсылка.СтавкиНДС - значение ставки НДС.
//
Функция СтавкаНДСПоУмолчанию(Дата = Неопределено, РасчетнаяСтавка = Ложь, НалогообложениеНДС = Неопределено) Экспорт
	
	СтавкаНДС = Неопределено;
	
	ДатаСтавки = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	УчетНДСЛокализация.УстановитьСтавкуНДСПоУмолчанию(СтавкаНДС, ДатаСтавки, РасчетнаяСтавка, НалогообложениеНДС);
	
	Если СтавкаНДС = Неопределено Тогда
		СтавкаНДС = СтавкаНДСПоТипуНалогообложения(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

// Заменяет переданную ставку НДС на актуальную на указанную дату.
//
// Параметры:
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - значение ставки НДС, которое необходимо скорректировать
//  Дата - Дата - дата на которую необходимо получить актуальную ставку НДС.
//
// Возвращаемое значение:
//  Булево - Истина, если значение ставки НДС было заменено.
//
Функция СкорректироватьСтавкуНДС(СтавкаНДС, Дата) Экспорт
	
	НоваяСтавкаНДС = Неопределено;
	
	ДатаСтавки = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	УчетНДСЛокализация.СкорректироватьСтавкуНДС(НоваяСтавкаНДС, СтавкаНДС, ДатаСтавки);
	
	Если НоваяСтавкаНДС <> Неопределено И СтавкаНДС <> НоваяСтавкаНДС Тогда
		СтавкаНДС = НоваяСтавкаНДС;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Заменяет ставки НДС в табличной части документа на актуальную на дату документа,
// а также пересчитывает соответствующие суммы НДС.
//
// Параметры:
//  Документ - ДокументОбъект - объект документа, в табличной части которого необходимо заменить ставки НДС
//  ТабличнаяЧасть - ТабличнаяЧасть - табличная часть документа
//  СтруктураПересчетаСуммы - Структура - см. ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ().
//
Процедура СкорректироватьСтавкуНДСВТЧДокумента(Документ, ТабличнаяЧасть, СтруктураПересчетаСуммы = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ТабличнаяЧасть) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПересчетаСуммы = Неопределено Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Документ);
	КонецЕсли;
	НалогообложениеНДС = Неопределено;
	СтруктураПересчетаСуммы.Свойство("НалогообложениеНДС", НалогообложениеНДС);
	ДатаАктуальности = ?(ЗначениеЗаполнено(Документ.Дата), Документ.Дата, ТекущаяДатаСеанса());
	
	ЕстьСуммаПродажи = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "СуммаПродажи");
	
	ПоляНДС = Новый Структура("СуммаНДС, СуммаСНДС, СуммаПродажиНДС, СуммаВознаграждения, СуммаНДСВознаграждения");
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		Если СкорректироватьСтавкуНДС(СтрокаТЧ.СтавкаНДС, ДатаАктуальности) Тогда
			ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтрокаТЧ.СтавкаНДС);
			
			ПоляНДС.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, ПроцентНДС,
				СтруктураПересчетаСуммы.ЦенаВключаетНДС, НалогообложениеНДС);
			ПоляНДС.СуммаСНДС = СтрокаТЧ.Сумма + ?(СтруктураПересчетаСуммы.ЦенаВключаетНДС, 0, ПоляНДС.СуммаНДС);
			Если ЕстьСуммаПродажи Тогда
				ПоляНДС.СуммаПродажиНДС = Окр(СтрокаТЧ.СуммаПродажи * ПроцентНДС / (100 + ПроцентНДС), 2, РежимОкругления.Окр15как20);
			Иначе
				ПоляНДС.СуммаПродажиНДС = 0;
			КонецЕсли;
			ПоляНДС.СуммаВознаграждения = 0;
			ПоляНДС.СуммаНДСВознаграждения = 0;
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПоляНДС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список незначащих ставок НДС (процент = 0)
//
// Возвращаемое значение:
//  СписокЗначений - СписокЗначений - Список ставок НДС с процентной ставкой 0
//
Функция СписокНезначащихСтавок() Экспорт
	
	СписокЗначений = новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК Ссылка,
		|	СтавкиНДС.Представление КАК Представление
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокЗначений.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Представление);
	КонецЦикла;
	
	СписокЗначений.Добавить(Справочники.СтавкиНДС.ПустаяСсылка());
	
	Возврат СписокЗначений;
	
КонецФункции

// Определяет является ли ставка незначащей (Процент = 0)
//
// // Параметры:
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - Значение ставки НДС.
//
// Возвращаемое значение:
//  Булево -
//
Функция НезначащаяСтавка(СтавкаНДС) Экспорт
	
	СписокСтавокСЧислителем0 = СписокНезначащихСтавок();
	
	ВходитВСписокНезначащихСтавок = Не СписокСтавокСЧислителем0.НайтиПоЗначению(СтавкаНДС) = Неопределено;
	
	Возврат ВходитВСписокНезначащихСтавок;
	
КонецФункции

// Устанавливает значение параметра СтавкаНДСНаЭкспорт исходя из налогообложения ПродажаНаЭкспорт
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса получения данных, в котором есть параметр СтавкаНДСНаЭкспорт.
//
Процедура УстановитьПараметрЗапросаСтавкаНДСНаЭкспорт(ПараметрыЗапроса) Экспорт
	
	Если ПараметрыЗапроса.Свойство("СтавкаНДСНаЭкспорт") Тогда
		Возврат;
	КонецЕсли;
	СтавкаНДСНаЭкспорт = Неопределено;
	СтавкаНДСНаЭкспорт = СтавкаНДСПоТипуНалогообложения(Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт);
	ПараметрыЗапроса.Вставить("СтавкаНДСНаЭкспорт", СтавкаНДСНаЭкспорт);
	
КонецПроцедуры

// Заполняет ставку НДС для платежей по типу налогообложения
// 
// Параметры:
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - Текущее значение ставки НДС.
//  ТипНалогообложенияНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогобложение для поиска ставки НДС.
Процедура ЗаполнитьСтавкуНДСДляПлатежей(СтавкаНДС, ТипНалогообложенияНДС) Экспорт
	
	НоваяСтавкаНДС = Неопределено;
	
	СтавкаНДСПоНалогообложению = СтавкаНДСПоТипуНалогообложения(ТипНалогообложенияНДС);
	Если ЗначениеЗаполнено(СтавкаНДСПоНалогообложению) Тогда
		НоваяСтавкаНДС = СтавкаНДСПоНалогообложению;
	КонецЕсли;
	
	УчетНДСЛокализация.ЗаполнитьСтавкаНДСДляПлатежей(НоваяСтавкаНДС, ТипНалогообложенияНДС);
	
	Если НоваяСтавкаНДС <> Неопределено Тогда
		СтавкаНДС = НоваяСтавкаНДС;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные выбора ставки НДС
//
// Параметры:
// 	 ДанныеВыбора - СписокЗначений - Данные выбора
// 	 Параметры - Структура - Параметры выбора:
// 	 	* Отбор - Структура - содержит:
// 	 		** Ссылка - ПеречислениеСсылка.ТипыНалогообложенияНДС - 
// 	 СтандартнаяОбработка - Булево - флаг стандартной обработки события
//
Процедура ПолучитьДанныеВыбораСтавкиНДС(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтавкиНДСТипыНалогообложенияНДС.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(СтавкиНДСТипыНалогообложенияНДС.Ссылка) КАК Представление
	|ИЗ
	|	Справочник.СтавкиНДС.ТипыНалогообложенияНДС КАК СтавкиНДСТипыНалогообложенияНДС
	| ГДЕ
	|	&ОтборПоТипамНалогообложения
	|	И &ОтборПоПараметрам
	|   И &ФильтрПоРассчетнойСтавке
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкиНДСТипыНалогообложенияНДС.Ссылка.Представление";
	
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоТипамНалогообложения", "ИСТИНА");
	
	Если Параметры.Отбор.Свойство("Ссылка") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоПараметрам", "СтавкиНДСТипыНалогообложенияНДС.Ссылка В (&ОтборПоСсылке)");
		Запрос.УстановитьПараметр("ОтборПоСсылке", Параметры.Отбор.Ссылка);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоПараметрам", "ИСТИНА");
	КонецЕсли;
	
	Если Параметры.Свойство("ИсключатьДробныеСтавки") И Параметры.ИсключатьДробныеСтавки Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ФильтрПоРассчетнойСтавке", "СтавкиНДСТипыНалогообложенияНДС.Ссылка.РасчетнаяСтавка = ЛОЖЬ"); 
	ИначеЕсли Параметры.Свойство("ТолькоДробныеСтавки") И Параметры.ТолькоДробныеСтавки Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ФильтрПоРассчетнойСтавке", "СтавкиНДСТипыНалогообложенияНДС.Ссылка.РасчетнаяСтавка = ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ФильтрПоРассчетнойСтавке", "ИСТИНА");
	КонецЕсли; 
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Параметры.СтрокаПоиска)
			ИЛИ СтрНайти(НРег(Выборка.Представление), НРег(Параметры.СтрокаПоиска)) = 1 Тогда
			ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает ставку НДС по типу налогообложения из табличной части справочника СтавкиНДС
// 
// Параметры:
//  ТипНалогообложенияНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Данные для поиска ставки НДС.
// 
// Возвращаемое значение:
//  СправочникСсылка.СтавкиНДС -
//
Функция СтавкаНДСПоТипуНалогообложения(ТипНалогообложенияНДС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтавкиНДСТипыНалогообложенияНДС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС.ТипыНалогообложенияНДС КАК СтавкиНДСТипыНалогообложенияНДС
	|ГДЕ
	|	СтавкиНДСТипыНалогообложенияНДС.ТипНалогообложенияНДС = &ТипНалогообложенияНДС";
	
	Запрос.УстановитьПараметр("ТипНалогообложенияНДС", ТипНалогообложенияНДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Справочники.СтавкиНДС.ПустаяСсылка();
	
КонецФункции


// Возвращает массив значащих ставок НДС (процент > 0)
//
// Возвращаемое значение:
//  МассивСтавок - Массив - массив ставок НДС с процентной ставкой > 0
//
Функция МассивЗначащихСтавок() Экспорт
	
	МассивСтавок = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК Ссылка,
		|	СтавкиНДС.Представление КАК Представление
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка > 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСтавок.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат МассивСтавок;
	
КонецФункции


// Возвращает массив облагаемых ставок НДС (не НеНДС и БезНДС)
//
// Возвращаемое значение:
//  МассивСтавок - Массив - массив облагаемых ставок НДС
//
Функция МассивОблагаемыхСтавок() Экспорт
	
	МассивСтавок = Новый Массив;
    
    МассивНеоблагаемыхПеречисленийСтавок = Новый Массив;
    МассивНеоблагаемыхПеречисленийСтавок.Добавить(Перечисления.СтавкиНДС.БезНДС);
    МассивНеоблагаемыхПеречисленийСтавок.Добавить(Перечисления.СтавкиНДС.НеНДС);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	НЕ СтавкиНДС.ПеречислениеСтавкаНДС В (&МассивНеоблагаемыхПеречисленийСтавок)";
    
    Запрос.УстановитьПараметр("МассивНеоблагаемыхПеречисленийСтавок", МассивНеоблагаемыхПеречисленийСтавок); 
    
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСтавок.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат МассивСтавок;
	
КонецФункции

// Возвращает массив необлагаемых ставок НДС (НеНДС и БезНДС)
//
// Возвращаемое значение:
//  МассивСтавок - Массив - массив необлагаемых ставок НДС
//
Функция МассивНеОблагаемыхСтавок() Экспорт
	
	МассивСтавок = Новый Массив;
    
    МассивНеоблагаемыхПеречисленийСтавок = Новый Массив;
    МассивНеоблагаемыхПеречисленийСтавок.Добавить(Перечисления.СтавкиНДС.БезНДС);
    МассивНеоблагаемыхПеречисленийСтавок.Добавить(Перечисления.СтавкиНДС.НеНДС);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.ПеречислениеСтавкаНДС В (&МассивНеоблагаемыхПеречисленийСтавок)";
    
    Запрос.УстановитьПараметр("МассивНеоблагаемыхПеречисленийСтавок", МассивНеоблагаемыхПеречисленийСтавок); 
    
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСтавок.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат МассивСтавок;
	
КонецФункции


#КонецОбласти

#Область УчетВходящегоНДС

#Область ЗаполнениеНалогообложенияНДСЗакупки

// Проверяет соответствие указанного в документе закупки Налогообложения НДС операции документа. 
// Если переданное значение не заполнено или некорректное, 
// то оно заполняется значением из договора закупки или значением по умолчанию.
//
// Параметры:
// 	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложения НДС документа закупки.
// 	ПараметрыЗаполнения - Структура - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСЗакупки().
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьНалогообложениеНДСЗакупки(НалогообложениеНДС, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
	
	ИзмененныеПараметры = УчетНДСУПСлужебный.ИзмененныеПараметры("ПараметрыЗаполненияНалогообложенияНДСЗакупки", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияНалогообложенияНДСЗакупки", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	
    КонтрагентПлательщикНДС = НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ПараметрыЗаполнения.Контрагент, ПараметрыЗаполнения.Дата);
    Если НЕ КонтрагентПлательщикНДС Тогда
        НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
        Возврат;
    КонецЕсли; 
	
	МассивДоступных = УчетНДСУПСлужебный.ДоступныеНалогообложенияНДСЗакупки(ПараметрыЗаполнения);
    
    НовоеНалогообложениеНДС = НалогообложениеНДС;
    НалогообложениеДоговора = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Договор) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыМеждуОрганизациями.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
		|ГДЕ
		|	ДоговорыМеждуОрганизациями.Ссылка = &Договор
		|";
		Запрос.УстановитьПараметр("Договор", ПараметрыЗаполнения.Договор);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
            НалогообложениеДоговора = Выборка.НалогообложениеНДС;
		КонецЕсли;
		
    КонецЕсли;
    
	НалогообложениеСоглашения = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Соглашение) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияСПоставщиками.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|ГДЕ
		|	СоглашенияСПоставщиками.Ссылка = &Соглашение
		|";
		Запрос.УстановитьПараметр("Соглашение", ПараметрыЗаполнения.Соглашение);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			НалогообложениеСоглашения = Выборка.НалогообложениеНДС;
		КонецЕсли;
	КонецЕсли;
    
	Если ЗначениеЗаполнено(НалогообложениеДоговора) Тогда
		НовоеНалогообложениеНДС = НалогообложениеДоговора;
	ИначеЕсли ЗначениеЗаполнено(НалогообложениеСоглашения) Тогда
		НовоеНалогообложениеНДС = НалогообложениеСоглашения;
	КонецЕсли;
	
	Если МассивДоступных.Найти(НовоеНалогообложениеНДС) = Неопределено Тогда
		НовоеНалогообложениеНДС = Неопределено;
	КонецЕсли;
	
    ИзменилсяКонтрагент = (ИзмененныеПараметры.Свойство("Контрагент") И ЗначениеЗаполнено(ПараметрыЗаполнения.Контрагент));
    Если (ИзменилсяКонтрагент И НалогообложениеДоговора = Неопределено И НалогообложениеСоглашения = Неопределено)
			ИЛИ НовоеНалогообложениеНДС = Неопределено Тогда
       
    	ИспользоватьУчетНДС = ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС");
    	НовоеНалогообложениеНДС = ?(ИспользоватьУчетНДС, 
     			                        Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС,
     			                        Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС
                                  );
        
    КонецЕсли;
    
    НалогообложениеНДС = НовоеНалогообложениеНДС;
	
КонецПроцедуры

// Заполняет список доступных для выбора значений налогообложения НДС исходя из операции документа.
// 
// Параметры:
// 	ЭлементНалогообложениеНДС - ПолеФормы - Элемент формы, в котором указывается налогообложение НДС.
// 	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Выбранное в документе значение налогообложения НДС.
// 	ПараметрыЗаполнения - Структура - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСЗакупки().
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(ЭлементНалогообложениеНДС, НалогообложениеНДС, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
    
	ПрименяемыеТипыНалогообложенияЗакупки = УчетНДСУПСлужебный.ПрименяемыеТипыНалогообложенияНДС(Ложь, Истина);
	// Переопределим представление по операции документа
	Для каждого Элемент Из ПрименяемыеТипыНалогообложенияЗакупки Цикл
        Если Элемент.Значение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			Если ПараметрыЗаполнения.ВозвратТоваровКомитенту ИЛИ ПараметрыЗаполнения.ПриемНаКомиссию Тогда
                Элемент.Представление = НСтр("ru='Продажа облагается НДС (20%, 14%, 7%)';uk='Продаж оподатковується ПДВ (20%, 14%, 7%)'");
			ИначеЕсли ПараметрыЗаполнения.ВозвратТоваровПоставщику Тогда
                Элемент.Представление = НСтр("ru='Возврат товаров облагается НДС (20%, 14%, 7%)';uk='Повернення товарів оподатковується ПДВ (20%, 14%, 7%)'");
			КонецЕсли;
		ИначеЕсли Элемент.Значение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			Если ПараметрыЗаполнения.ВозвратТоваровКомитенту ИЛИ ПараметрыЗаполнения.ПриемНаКомиссию Тогда
                Элемент.Представление = НСтр("ru='Продажа не облагается НДС (Не НДС)';uk='Продаж не оподатковується ПДВ (Не ПДВ)'");
			ИначеЕсли ПараметрыЗаполнения.ВозвратТоваровПоставщику Тогда
                Элемент.Представление = НСтр("ru='Возврат товаров не облагается НДС (Не НДС)';uk='Повернення товарів не оподатковується ПДВ (Не ПДВ)'");
            КонецЕсли;
		ИначеЕсли Элемент.Значение = Перечисления.ТипыНалогообложенияНДС.ПродажаОсвобожденаОтНДС Тогда
			Если ПараметрыЗаполнения.ВозвратТоваровКомитенту ИЛИ ПараметрыЗаполнения.ПриемНаКомиссию Тогда
                Элемент.Представление = НСтр("ru='Продажа освобождена от НДС (Без НДС)';uk='Продаж звільнений від ПДВ (Без ПДВ)'");
			ИначеЕсли ПараметрыЗаполнения.ВозвратТоваровПоставщику Тогда
                Элемент.Представление = НСтр("ru='Возврат товаров освобожден от НДС (Без НДС)';uk='Повернення товарів звільнене від ПДВ (Без ПДВ)'");
            КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеТипыНалогообложенияЗакупки = УчетНДСУПСлужебный.ДоступныеНалогообложенияНДСЗакупки(ПараметрыЗаполнения);
	Если ЗначениеЗаполнено(НалогообложениеНДС) И ДоступныеТипыНалогообложенияЗакупки.Найти(НалогообложениеНДС) = Неопределено Тогда
		ДоступныеТипыНалогообложенияЗакупки.Добавить(НалогообложениеНДС);
	КонецЕсли;
	ЭлементНалогообложениеНДС.СписокВыбора.Очистить();
	
	Для каждого Значение Из ДоступныеТипыНалогообложенияЗакупки Цикл
		ЭлементСписка = ПрименяемыеТипыНалогообложенияЗакупки.НайтиПоЗначению(Значение);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементНалогообложениеНДС.СписокВыбора.Добавить(Значение, ЭлементСписка.Представление);
		Иначе
			ЭлементНалогообложениеНДС.СписокВыбора.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
    
	
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияНалогообложенияНДСЗакупки", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	
КонецПроцедуры

// Проверяет возможность проведения документа с указанным налогообложением НДС. 
//
// Параметры:
//	Объект - ДокументОбъект - Данные документа закупки.
// 	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложения НДС документа закупки.
// 	ПараметрыПроверки - Структура - См. УчетНДСУП.ПараметрыПроверкиЗаполнениеДокументаЗакупкиПоНалогообложениюНДС().
// 	Отказ - Булево - Признак отказа проведения документа.
//
Процедура ПроверитьЗаполнениеДокументаЗакупкиПоНалогообложениюНДС(Объект, НалогообложениеНДС, ПараметрыПроверки, Отказ) Экспорт
	
	УчетНДСЛокализация.ПроверитьЗаполнениеДокументаЗакупкиПоНалогообложениюНДС(Объект, НалогообложениеНДС, ПараметрыПроверки, Отказ);
	
КонецПроцедуры

// Возвращает структуру параметров для проверки заполнения документа закупки по налогообложению НДС.
//
// Возвращаемое значение:
//	Структура - Структура с полями
//	         * ИмяТабличнойЧасти - Строка - Имя табличной части закупаемых ценностей.
//	         * ИмяРеквизитаСтатьяРасходов - Строка - Имя реквизита табличной части, в которой указывается статья отражения расходов.
//	         * ИмяРеквизитаАналитикаРасходов - Строка - Имя реквизита табличной части, в которой указывается аналитика отражения расходов.
//
Функция ПараметрыПроверкиЗаполнениеДокументаПоНалогообложениюНДСЗакупки() Экспорт
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("ИмяТабличнойЧасти",             "");
	ПараметрыПроверки.Вставить("ИмяРеквизитаСтатьяРасходов",    "");
	ПараметрыПроверки.Вставить("ИмяРеквизитаАналитикаРасходов", "");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Устанавливаем условное оформление для ставки НДС, суммы НДС, суммы с НДС по налогообложению закупки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Содержит данную форму.
//  ИмяПоляВводаСтавкиНДС - Строка - Наименование элемента формы, содержащего ставку НДС,
//                                   если оно отличается от "ТоварыСтавкаНДС".
//  ИмяПоляВводаСуммыНДС - Строка - Наименование элемента формы, содержащего сумму НДС,
//                                  если оно отличается от "ТоварыСуммаНДС".
//  ИмяПоляВводаСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС,
//                                   если оно отличается от "ТоварыСуммаСНДС".
//
Процедура УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюЗакупки(Форма,
	                                          ИмяПоляВводаСтавкиНДС = "ТоварыСтавкаНДС",
	                                          ИмяПоляВводаСуммыНДС  = "ТоварыСуммаНДС",
	                                          ИмяПоляВводаСуммыСНДС = "ТоварыСуммаСНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ЭлементФормы = ЭлементыФормы[ИмяПоляВводаСтавкиНДС]; // ПолеФормы, ГруппаФормы -
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);

	ЭлементФормы = ЭлементыФормы[ИмяПоляВводаСуммыНДС]; // ПолеФормы, ГруппаФормы -
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);

	ЭлементФормы = ЭлементыФормы[ИмяПоляВводаСуммыСНДС]; // ПолеФормы, ГруппаФормы -
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
	
	
	СписокНалогообложений = Новый СписокЗначений();
	СписокНалогообложений.ЗагрузитьЗначения(УчетНДСУПКлиентСервер.ТипыНалогообложенияСкрывающиеРеквизитыНДС());
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НалогообложениеНДСПоУмолчанию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокНалогообложений;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	УчетНДСЛокализация.ДополнитьУсловноеОформлениеСуммНДСПоНалогообложениюЗакупки(
		Форма, ИмяПоляВводаСтавкиНДС, ИмяПоляВводаСуммыНДС, ИмяПоляВводаСуммыСНДС);

КонецПроцедуры

// Устанавливаем условное оформление для суммы НДС, суммы с НДС по ставке НДС закупки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Содержит данную форму
//  ИмяПоляВводаСтавкиНДС - Строка - Наименование элемента формы, содержащего ставку НДС,
//                                  если оно отличается от "ТоварыСтавкаНДС".
//  ИмяПоляВводаСуммыНДС - Строка - Наименование элемента формы, содержащего сумму НДС,
//                                  если оно отличается от "ТоварыСуммаНДС".
//
Процедура УстановитьУсловноеОформлениеСуммНДСПоСтавкеНДСЗакупки(Форма,
	                                          ИмяПоляВводаСтавкиНДС = "ТоварыСтавкаНДС",
	                                          ИмяПоляВводаСуммыНДС  = "ТоварыСуммаНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПутьКДаннымСтавкаНДС = ЭлементыФормы[ИмяПоляВводаСтавкиНДС].ПутьКДанным;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВводаСуммыНДС);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымСтавкаНДС);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокНезначащихСтавок();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеВидаДеятельностиНДС

// Заполняет вид деятельности раздельного учета НДС по переданным параметрам заполнения.
// Параметры:
// 	ВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Реквизит документа приобретения.
// 	ПараметрыЗаполнения - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьВидДеятельностиНДС(ВидДеятельностиНДС, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения.Организация = Справочники.Организации.ПустаяСсылка() Тогда
		// Организация для объекта задается, но не указана.
		// В этом случае нет смысла заполнять/проверять вид деятельности НДС, 
		// т.к. нет возможности получить учетную политику.
		Возврат;
	КонецЕсли;
	
	ИзмененныеПараметры = УчетНДСУПСлужебный.ИзмененныеПараметры("ПараметрыЗаполненияВидаДеятельностиНДС", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияВидаДеятельностиНДС", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	
	ТолькоЕслиПустоеИлиНекорректное = Истина;
	Если ИзмененныеПараметры.Свойство("Договор")
		ИЛИ ИзмененныеПараметры.Свойство("НаправлениеДеятельности")
		ИЛИ ИзмененныеПараметры.Свойство("Организация")
		ИЛИ ИзмененныеПараметры.Свойство("Склад") Тогда
		ТолькоЕслиПустоеИлиНекорректное = Ложь;
	КонецЕсли;

	МассивДоступных = УчетНДСУПСлужебный.ДоступныеВидыДеятельностиНДС(ПараметрыЗаполнения);
	
	Если ТолькоЕслиПустоеИлиНекорректное Тогда
		Если МассивДоступных.Найти(ВидДеятельностиНДС) <> Неопределено Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйВидДеятельностиНДС = ВидДеятельностиНДС;
	
	ЗаполненоПоДоговоруИлиНапралениюДеятельности = Ложь;
	Если (ИзмененныеПараметры.Свойство("Договор") 
			И ЗначениеЗаполнено(ПараметрыЗаполнения.Договор))
		ИЛИ (ИзмененныеПараметры.Свойство("НаправлениеДеятельности") 
			И ЗначениеЗаполнено(ПараметрыЗаполнения.НаправлениеДеятельности))  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ДоговорыКонтрагентов.ЗакупкаПодДеятельность КАК ВидДеятельностиНДС
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор
		|	И НЕ ДоговорыКонтрагентов.ЗакупкаПодДеятельностьОпределяетсяВДокументе
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ДоговорыМеждуОрганизациями.ЗакупкаПодДеятельность КАК ВидДеятельностиНДС
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
		|ГДЕ
		|	ДоговорыМеждуОрганизациями.Ссылка = &Договор
		|	И НЕ ДоговорыМеждуОрганизациями.ЗакупкаПодДеятельностьОпределяетсяВДокументе
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2 КАК Приоритет,
		|	НаправленияДеятельности.НалогообложениеНДС КАК ВидДеятельностиНДС
		|ИЗ
		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|ГДЕ
		|	НаправленияДеятельности.Ссылка = &НаправлениеДеятельности
		|	И НЕ НаправленияДеятельности.НалогообложениеНДСОпределяетсяВДокументе
		|	И (НаправленияДеятельности.УчетДоходов
		|		ИЛИ НаправленияДеятельности.УчетЗатрат)
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		Запрос.УстановитьПараметр("Договор", ПараметрыЗаполнения.Договор);
		Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыЗаполнения.НаправлениеДеятельности);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			НовыйВидДеятельностиНДС = Выборка.ВидДеятельностиНДС;
			ЗаполненоПоДоговоруИлиНапралениюДеятельности = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивДоступных.Найти(НовыйВидДеятельностиНДС) = Неопределено Тогда
		НовыйВидДеятельностиНДС = Неопределено;
	КонецЕсли;
	
	Если МассивДоступных.Найти(Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка()) <> Неопределено Тогда
		НовыйВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
	КонецЕсли;
	
	Если (Не ЗаполненоПоДоговоруИлиНапралениюДеятельности
			И (ИзмененныеПараметры.Свойство("Организация") И ЗначениеЗаполнено(ПараметрыЗаполнения.Организация))
				ИЛИ (ИзмененныеПараметры.Свойство("Склад") И ЗначениеЗаполнено(ПараметрыЗаполнения.Склад)))
			ИЛИ НовыйВидДеятельностиНДС = Неопределено Тогда
		УчетНДСЛокализация.ЗаполнитьВидДеятельностиНДСПоПараметрам(НовыйВидДеятельностиНДС, ВидДеятельностиНДС, ПараметрыЗаполнения);
	КонецЕсли;
	
	Если НовыйВидДеятельностиНДС = Неопределено Тогда
		ПараметрыУчетаПоОрганизации = ПараметрыУчетаПоОрганизации(
				ПараметрыЗаполнения.Организация,
				ПараметрыЗаполнения.Дата,
				ПараметрыЗаполнения.Склад);
		НовыйВидДеятельностиНДС = ПараметрыУчетаПоОрганизации.ОсновноеНалогообложениеНДСПродажи;
	КонецЕсли;
	
	ВидДеятельностиНДС = НовыйВидДеятельностиНДС;
	
КонецПроцедуры

// Заполняет список доступных для выбора видов деятельности раздельного учета НДС исходя учетной политики и операций документа.
//
// Параметры:
// 	ЭлементВидДеятельностиНДС - ПолеФормы - Элемент формы, в котором указывается вид деятельности НДС.
// 	ВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Выбранное в документе значение вида деятельности раздельного учета НДС.
// 	ПараметрыЗаполнения - Структура - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС().
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьСписокВыбораВидаДеятельностиНДС(ЭлементВидДеятельностиНДС, ВидДеятельностиНДС, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
	
	Представления = УчетНДСУПСлужебный.ПрименяемыеВидыДеятельностиНДС();
	МассивДоступных = УчетНДСУПСлужебный.ДоступныеВидыДеятельностиНДС(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ВидДеятельностиНДС) И МассивДоступных.Найти(ВидДеятельностиНДС) = Неопределено Тогда
		МассивДоступных.Добавить(ВидДеятельностиНДС);
	КонецЕсли;
	
	ЭлементВидДеятельностиНДС.СписокВыбора.Очистить();
	Для каждого Значение Из МассивДоступных Цикл
		ЭлементПредставления = Представления.НайтиПоЗначению(Значение);
		Если ЭлементПредставления <> Неопределено Тогда 
			ЭлементВидДеятельностиНДС.СписокВыбора.Добавить(Значение, ЭлементПредставления.Представление);
		Иначе
			ЭлементВидДеятельностиНДС.СписокВыбора.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	ЭлементВидДеятельностиНДС.Видимость = (ЭлементВидДеятельностиНДС.СписокВыбора.Количество() > 1);
	
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияВидаДеятельностиНДС", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	
КонецПроцедуры

// Проверяет возможность проведения документа с указанным видом деятельности раздельного учета НДС.
//
// Параметры:
// 	Объект - ДокументОбъект - Данные документа.
// 	ВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Вид деятельности раздельного учета НДС.
// 	ПараметрыПроверки - Структура - См. УчетНДСУП.ПараметрыПроверкиЗаполнениеДокументаПоВидуДеятельностиНДС()
// 	Отказ - Булево - Признак отказа проведения документа.
//
Процедура ПроверитьЗаполнениеДокументаПоВидуДеятельностиНДС(Объект, ВидДеятельностиНДС, ПараметрыПроверки, Отказ) Экспорт
	
 	УчетНДСЛокализация.ПроверитьЗаполнениеДокументаПоВидуДеятельностиНДС(Объект, ВидДеятельностиНДС, ПараметрыПроверки, Отказ)
	
КонецПроцедуры

// Возвращает структуру параметров для проверки заполнения документа по виду деятельности раздельного учета НДС.
//
// Возвращаемое значение:
// Структура - Структура с ключами
// 			* ИмяТабличнойЧасти - Строка - Имя табличной части, в которой указываются ценности.
// 			* ИмяРеквизитаСтатьяРасходов - Строка - Имя реквизита табличной части, в которой указывается статья отражения расходов (необязательный).
// 			* ИмяРеквизитаАналитикаРасходов - Строка - Имя реквизита табличной части, в которой указывается аналитика отражения расходов (необязательный).
// 			* ИмяРеквизитаСтатьяАктивовПассивов - Строка - Имя реквизита табличной части, в которой указывается статья отражения прочих активов (необязательный).
// 			* ИмяРеквизитаАналитикаАктивовПассивов Строка - Имя реквизита табличной части, в которой указывается аналитика отражения прочих активов (необязательный).
//
Функция ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС() Экспорт

	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("ИмяТабличнойЧасти", "");
	ПараметрыПроверки.Вставить("ИмяРеквизитаСтатьяРасходов", "");
	ПараметрыПроверки.Вставить("ИмяРеквизитаАналитикаРасходов", "");
	ПараметрыПроверки.Вставить("ИмяРеквизитаСтатьяАктивовПассивов", "");
	ПараметрыПроверки.Вставить("ИмяРеквизитаАналитикаАктивовПассивов", "");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

#КонецОбласти


#Область ЗаполнениеНалоговыхНазначений

// Заполняет налоговое назначение НДС по переданным параметрам заполнения.
// Параметры:
// 	НалоговоеНазначение - СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат - Реквизит документа.
// 	ПараметрыЗаполнения - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалоговогоНазначения
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьНалоговоеНазначение(НалоговоеНазначение, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения.Организация = Справочники.Организации.ПустаяСсылка() Тогда
		// Организация для объекта задается, но не указана.
		// В этом случае нет смысла заполнять/проверять налоговое назначение, 
		// т.к. нет возможности получить учетную политику.
		Возврат;
	КонецЕсли;
	
	ИзмененныеПараметры = УчетНДСУПСлужебный.ИзмененныеПараметры("ПараметрыЗаполненияНалоговогоНазначения", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияНалоговогоНазначения", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	
	ТолькоЕслиПустоеИлиНекорректное = Истина;
	Если ИзмененныеПараметры.Свойство("НаправлениеДеятельности")
		ИЛИ ИзмененныеПараметры.Свойство("Организация") Тогда
		ТолькоЕслиПустоеИлиНекорректное = Ложь;
	КонецЕсли;

	МассивДоступных = УчетНДСУПСлужебный.ДоступныеНалоговыеНазначения(ПараметрыЗаполнения);
	
	Если ТолькоЕслиПустоеИлиНекорректное Тогда
		Если МассивДоступных.Найти(НалоговоеНазначение) <> Неопределено Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовоеНалоговоеНазначение = НалоговоеНазначение;
	
	Если (ИзмененныеПараметры.Свойство("НаправлениеДеятельности") 
			И ЗначениеЗаполнено(ПараметрыЗаполнения.НаправлениеДеятельности))  Тогда
            
        Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НаправленияДеятельности.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|ГДЕ
		|	НаправленияДеятельности.Ссылка = &НаправлениеДеятельности
		|	И (НаправленияДеятельности.УчетДоходов
		|		ИЛИ НаправленияДеятельности.УчетЗатрат)
        |";
        
		Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыЗаполнения.НаправлениеДеятельности);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			НалогообложениеНаправленияДеятельности = Выборка.НалогообложениеНДС;
            Если ЗначениеЗаполнено(НалогообложениеНаправленияДеятельности) Тогда
                НовоеНалоговоеНазначение = НДСОбщегоНазначенияПовтИсп.ОпределитьНалоговоеНазначениеПоНалогообложениюНДС(НалогообложениеНаправленияДеятельности);
            КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивДоступных.Найти(НовоеНалоговоеНазначение) = Неопределено Тогда
		НовоеНалоговоеНазначение = Неопределено;
	КонецЕсли;
	
	Если МассивДоступных.Найти(Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка()) <> Неопределено Тогда
		НовоеНалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
	КонецЕсли;
	
	Если НовоеНалоговоеНазначение = Неопределено Тогда
		ПараметрыУчетаПоОрганизации = ПараметрыУчетаПоОрганизации(
				ПараметрыЗаполнения.Организация,
				ПараметрыЗаполнения.Дата);
		НовоеНалоговоеНазначение = ПараметрыУчетаПоОрганизации.ОсновноеНалоговоеНазначение;
	КонецЕсли;
	
	НалоговоеНазначение = НовоеНалоговоеНазначение;
	
КонецПроцедуры

// Заполняет список доступных для выбора налоговых назначений исходя из учетной политики и операций документа.
//
// Параметры:
// 	ЭлементНалоговоеНазначение - ПолеФормы - Элемент формы, в котором указывается налоговое назначение
// 	НалоговоеНазначение - СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат - Выбранное в документе значение налогового назначения
// 	ПараметрыЗаполнения - Структура - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалоговогоНазначения().
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//  ДобавлятьПустуюСсылку - Булево - Добавлять ли в список для выбора (в начало) пустую ссылку
//  ПредставлениеПустойСсылки - Строка - представление пустой ссылки
//
Процедура ЗаполнитьСписокВыбораНалоговыхНазначений(ЭлементНалоговоеНазначение, НалоговоеНазначение, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено, ДобавлятьПустуюСсылку = Ложь, ПредставлениеПустойСсылки = "") Экспорт
	
	Представления = УчетНДСУПСлужебный.ПрименяемыеНалоговыеНазначения();
	МассивДоступных = УчетНДСУПСлужебный.ДоступныеНалоговыеНазначения(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(НалоговоеНазначение) И МассивДоступных.Найти(НалоговоеНазначение) = Неопределено Тогда
		МассивДоступных.Добавить(НалоговоеНазначение);
	КонецЕсли;
	
	ЭлементНалоговоеНазначение.СписокВыбора.Очистить(); 
	Если ДобавлятьПустуюСсылку Тогда
		ЭлементНалоговоеНазначение.СписокВыбора.Добавить(
			Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(), 
			ПредставлениеПустойСсылки
		);
	КонецЕсли;
	Для каждого Значение Из МассивДоступных Цикл
		ЭлементПредставления = Представления.НайтиПоЗначению(Значение);
		Если ЭлементПредставления <> Неопределено Тогда 
			ЭлементНалоговоеНазначение.СписокВыбора.Добавить(Значение, ЭлементПредставления.Представление);
		Иначе
			ЭлементНалоговоеНазначение.СписокВыбора.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
    
	ЭлементНалоговоеНазначение.Видимость = (ЭлементНалоговоеНазначение.СписокВыбора.Количество() > 1) И НЕ ПараметрыЗаполнения.ВыпускПоРаспоряжениям;
	
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияНалоговогоНазначения", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	
КонецПроцедуры


Процедура ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокументаПоступление(
	ДокументОбъект, 
	ИмяТабличнойЧасти = "Товары"
	) Экспорт
    
    МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
    ПараметрыЗаполнения = МенеджерДокумента.ПараметрыЗаполненияНалоговогоНазначения(ДокументОбъект);
    
    ИспользоватьРаздельныйУчетПоНалогообложению = НастройкиНалоговУчетныхПолитикПовтИсп.РаздельныйУчетТоваровПоНалогообложениюНДС(ПараметрыЗаполнения.Организация, ПараметрыЗаполнения.Дата);
    ЭтоИмпорт  = ПараметрыЗаполнения.ИмпортТоваров;
    ОрганизацияПлательщикНДС = Справочники.Организации.ПлательщикНДС(ПараметрыЗаполнения.Организация, ПараметрыЗаполнения.Дата);
    ОрганизацияНалоговоеНазначениеНДС = Справочники.Организации.НалоговоеНазначениеНДС(ПараметрыЗаполнения.Организация, ПараметрыЗаполнения.Дата);
    ЕстьСтавкаНДС = ПараметрыЗаполнения.ЕстьСтавкаНДС;
    
    НалоговоеНазначениеВоВсехСтроках = Неопределено;
    
    Если ПараметрыЗаполнения.Организация = Справочники.Организации.УправленческаяОрганизация Тогда 
        НалоговоеНазначениеВоВсехСтроках = Справочники.Организации.НалоговоеНазначениеУправленческойОрганизации();
    ИначеЕсли НЕ ИспользоватьРаздельныйУчетПоНалогообложению Тогда	
        НалоговоеНазначениеВоВсехСтроках = ОрганизацияНалоговоеНазначениеНДС;	
	ИначеЕсли НЕ ОрганизацияПлательщикНДС Тогда	
		НалоговоеНазначениеВоВсехСтроках = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
    КонецЕсли;    
    
    НалоговоеНазначениеНаправленияДеятельности = Неопределено;
    Если НалоговоеНазначениеВоВсехСтроках = Неопределено Тогда 
    	НалогообложениеНаправленияДеятельности = Неопределено;
    	Если ЗначениеЗаполнено(ПараметрыЗаполнения.НаправлениеДеятельности) Тогда
    		Запрос = Новый Запрос;
    		Запрос.Текст = "
    		|ВЫБРАТЬ
    		|	НаправленияДеятельности.НалогообложениеНДС КАК НалогообложениеНДС
    		|ИЗ
    		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
    		|ГДЕ
    		|	НаправленияДеятельности.Ссылка = &НаправлениеДеятельности
    		|	И НаправленияДеятельности.УчетДоходов
    		|";
            
    		Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыЗаполнения.НаправлениеДеятельности);
    		УстановитьПривилегированныйРежим(Истина);
    		Выборка = Запрос.Выполнить().Выбрать();
    		УстановитьПривилегированныйРежим(Ложь);
    		Если Выборка.Следующий() Тогда
    			НалогообложениеНаправленияДеятельности = Выборка.НалогообложениеНДС;
            КонецЕсли;
        КонецЕсли;
        НалоговоеНазначениеНаправленияДеятельности = Перечисления.ТипыНалогообложенияНДС.НалоговоеНазначение(НалогообложениеНаправленияДеятельности);
    КонецЕсли;   
    
    ТабличнаяЧасть = ДокументОбъект[ИмяТабличнойЧасти];
    Для Каждого Строка Из ТабличнаяЧасть Цикл
        Если НалоговоеНазначениеВоВсехСтроках <> Неопределено Тогда 
            Строка.НалоговоеНазначение = НалоговоеНазначениеВоВсехСтроках;
        Иначе
            Если Не ЗначениеЗаполнено(Строка.НалоговоеНазначение) Тогда
                НалоговоеНазначениеПоСтавкеНДС = Неопределено;
                Если ЕстьСтавкаНДС И УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(Строка.СтавкаНДС) = 0 Тогда 
                    Если ЭтоИмпорт Тогда
                        НалоговоеНазначениеПоСтавкеНДС = ОрганизацияНалоговоеНазначениеНДС;
                    Иначе
                        НалоговоеНазначениеПоСтавкеНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;	
                    КонецЕсли; 
                Иначе
                    НалоговоеНазначениеПоСтавкеНДС = ОрганизацияНалоговоеНазначениеНДС;    
                КонецЕсли;       
                Если НалоговоеНазначениеНаправленияДеятельности <> Неопределено Тогда
                    Строка.НалоговоеНазначение = НалоговоеНазначениеНаправленияДеятельности;    
                Иначе
                    Строка.НалоговоеНазначение = НалоговоеНазначениеПоСтавкеНДС;    
                КонецЕсли; 
            КонецЕсли;               
        КонецЕсли;       
    КонецЦикла;    
    
КонецПроцедуры // ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокументаПоступление()

#КонецОбласти



// Описание
// 
// Параметры:
// 	СтароеНалогообложение - ПеречислениеСсылка.ТипыНалогообложенияНДС -
// 	НовоеНалогообложение - ПеречислениеСсылка.ТипыНалогообложенияНДС - 
// Возвращаемое значение:
// 	Булево - Описание
Функция ВозможноСписаниеНДС(СтароеНалогообложение, НовоеНалогообложение) Экспорт
	
	ВидыДеятельностиНДСВСтоимости = ВидыДеятельностиНДСУчитываетсяВСтоимости();
	ВидыДеятельностиНДСКВозмещению = ВидыДеятельностиНДСПринимаетсяКВозмещению();
	
	Возврат (ВидыДеятельностиНДСКВозмещению.Найти(СтароеНалогообложение) <> Неопределено
					И ВидыДеятельностиНДСВСтоимости.Найти(НовоеНалогообложение) <> Неопределено);
	
КонецФункции

#КонецОбласти

#Область УчетИсходящегоНДС

#Область ЗаполнениеНалогообложенияНДСПродажи

// Проверяет соответствие указанного в документе продажи Налогообложения НДС настройкам учета НДС и операции документа. 
// Если переданное значение не заполнено или некорректное, то оно заполняется значением из НСИ.
//
// Параметры:
// 	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложения НДС документа продажи.
// 	ПараметрыЗаполнения - Структура - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи().
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения.Организация = Справочники.Организации.ПустаяСсылка() Тогда
		// Организация для объекта в принципе задается, но не указана.
		// В этом случае нет смысла заполнять/проверять налогообложение, 
		// т.к. нет возможности получить учетную политику.
		Возврат;
	КонецЕсли;
	
	ИзмененныеПараметры = УчетНДСУПСлужебный.ИзмененныеПараметры("ПараметрыЗаполненияНалогообложенияНДСПродажи",
								ПараметрыЗаполнения,
								КэшированныеЗначенияПараметров);
								
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияНалогообложенияНДСПродажи",
								ПараметрыЗаполнения,
								КэшированныеЗначенияПараметров);

	МассивДоступных = УчетНДСУПСлужебный.ДоступныеНалогообложенияНДСПродажи(ПараметрыЗаполнения);
	
	НовоеНалогообложениеНДС = НалогообложениеНДС;
    
	НалогообложениеДоговора = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Договор) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыМеждуОрганизациями.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
		|ГДЕ
		|	ДоговорыМеждуОрганизациями.Ссылка = &Договор
		|";
		Запрос.УстановитьПараметр("Договор", ПараметрыЗаполнения.Договор);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			НалогообложениеДоговора = Выборка.НалогообложениеНДС;
		КонецЕсли;
	КонецЕсли;
	
	НалогообложениеНаправленияДеятельности = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.НаправлениеДеятельности) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	2 КАК Приоритет,
		|	НаправленияДеятельности.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|ГДЕ
		|	НаправленияДеятельности.Ссылка = &НаправлениеДеятельности
		|	И НаправленияДеятельности.УчетДоходов
		|";
		Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыЗаполнения.НаправлениеДеятельности);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			НалогообложениеНаправленияДеятельности = Выборка.НалогообложениеНДС;
		КонецЕсли;
    КонецЕсли;
    
	НалогообложениеСоглашения = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Соглашение) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияСКлиентами.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ГДЕ
		|	СоглашенияСКлиентами.Ссылка = &Соглашение
		|";
		Запрос.УстановитьПараметр("Соглашение", ПараметрыЗаполнения.Соглашение);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			НалогообложениеСоглашения = Выборка.НалогообложениеНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НалогообложениеДоговора) Тогда
		НовоеНалогообложениеНДС = НалогообложениеДоговора;
	ИначеЕсли ЗначениеЗаполнено(НалогообложениеСоглашения) Тогда
		НовоеНалогообложениеНДС = НалогообложениеСоглашения;
	ИначеЕсли ЗначениеЗаполнено(НалогообложениеНаправленияДеятельности) Тогда
		НовоеНалогообложениеНДС = НалогообложениеНаправленияДеятельности;
	КонецЕсли;
	
	Если МассивДоступных.Найти(НовоеНалогообложениеНДС) = Неопределено Тогда
		НовоеНалогообложениеНДС = Неопределено;
	КонецЕсли;
	
	Если НовоеНалогообложениеНДС = Неопределено Тогда
        ПараметрыУчетаОрганизации = ПараметрыУчетаПоОрганизации(ПараметрыЗаполнения.Организация, ПараметрыЗаполнения.Дата);
		НовоеНалогообложениеНДС = ПараметрыУчетаОрганизации.ОсновноеНалогообложениеНДСПродажи;
	КонецЕсли;
	
	НалогообложениеНДС = НовоеНалогообложениеНДС;
	
КонецПроцедуры

// Заполняет список доступных для выбора значений налогообложения НДС исходя из настроек учета НДС операции документа.
//
// Параметры:
// 	ЭлементНалогообложениеНДС - ПолеФормы - Элемент формы, в котором указывается налогообложение НДС.
// 	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Выбранное в документе значение налогообложения НДС.
// 	ПараметрыЗаполнения - Структура - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи().
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(ЭлементНалогообложениеНДС, НалогообложениеНДС, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
	
	ПрименяемыеТипыНалогообложенияПродажи = УчетНДСУПСлужебный.ПрименяемыеТипыНалогообложенияНДС(Истина, Ложь);
	Для каждого Элемент Из ПрименяемыеТипыНалогообложенияПродажи Цикл
		Если Элемент.Значение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			Если ПараметрыЗаполнения.ВозвратТоваровОтКлиента ИЛИ ПараметрыЗаполнения.ВозвратТоваровОтКомиссионера Тогда
                Элемент.Представление = НСтр("ru='Возврат облагается НДС (20%, 14%, 7%)';uk='Повернення оподатковується ПДВ (20%, 14%, 7%)'");
			КонецЕсли;
		КонецЕсли;
		Если Элемент.Значение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			Если ПараметрыЗаполнения.ВозвратТоваровОтКлиента ИЛИ ПараметрыЗаполнения.ВозвратТоваровОтКомиссионера Тогда
                Элемент.Представление = НСтр("ru='Возврат не облагается НДС (Не НДС)';uk='Повернення не оподатковується ПДВ (Не ПДВ)'");
			КонецЕсли;
        КонецЕсли;
		Если Элемент.Значение = Перечисления.ТипыНалогообложенияНДС.ПродажаОсвобожденаОтНДС Тогда
			Если ПараметрыЗаполнения.ВозвратТоваровОтКлиента ИЛИ ПараметрыЗаполнения.ВозвратТоваровОтКомиссионера Тогда
                Элемент.Представление = НСтр("ru='Возврат освобожден от НДС (Без НДС)';uk='Повернення звільнене від ПДВ (Без ПДВ)'");
			КонецЕсли;
        КонецЕсли;
	КонецЦикла;
		
	ДоступныеНалогообложенияПродажи = УчетНДСУПСлужебный.ДоступныеНалогообложенияНДСПродажи(ПараметрыЗаполнения);
	Если ЗначениеЗаполнено(НалогообложениеНДС) И ДоступныеНалогообложенияПродажи.Найти(НалогообложениеНДС) = Неопределено Тогда
		ДоступныеНалогообложенияПродажи.Добавить(НалогообложениеНДС);
	КонецЕсли;
	ЭлементНалогообложениеНДС.СписокВыбора.Очистить();
	
	Для каждого Значение Из ДоступныеНалогообложенияПродажи Цикл
		ЭлементСписка = ПрименяемыеТипыНалогообложенияПродажи.НайтиПоЗначению(Значение);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементНалогообложениеНДС.СписокВыбора.Добавить(Значение, ЭлементСписка.Представление);
		Иначе
			ЭлементНалогообложениеНДС.СписокВыбора.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
    
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияНалогообложенияНДСПродажи", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);

КонецПроцедуры


// Устанавливает ограничения на типы запасов, которые можно продавать по указанному налогообложению
// 
// Параметры:
// 	ОтборыВидовЗапасов - см. Справочники.ВидыЗапасов.ПараметрыОтбораВидовЗапасов
// 	Организация - СправочникСсылка.Организации - 
// 	Дата - Дата -
// 	НалогообложениеНДС - Неопределено, ПеречислениеСсылка.ТипыНалогообложенияНДС -
Процедура ПараметрыЗаполненияВидовЗапасовПоНалогообложению(ОтборыВидовЗапасов, Организация, Дата, НалогообложениеНДС = Неопределено) Экспорт
	
	УчетНДСЛокализация.ДополнитьПараметрыЗаполненияВидовЗапасовПоНалогообложению(ОтборыВидовЗапасов, Организация, Дата, НалогообложениеНДС);
	
КонецПроцедуры


// Устанавливаем условное оформление для ставки НДС, суммы НДС, суммы с НДС по налогообложению продажи.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Содержит данную форму
//  ИмяПоляВводаСтавкиНДС - Строка - Наименование элемента формы, содержащего ставку НДС,
//                                   если оно отличается от "ТоварыСтавкаНДС".
//  ИмяПоляВводаСуммыНДС - Строка - Наименование элемента формы, содержащего сумму НДС,
//                                  если оно отличается от "ТоварыСуммаНДС".
//  ИмяПоляВводаСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС,
//                                   если оно отличается от "ТоварыСуммаСНДС".
//
Процедура УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи(Форма,
	                                          ИмяПоляВводаСтавкиНДС = "ТоварыСтавкаНДС",
	                                          ИмяПоляВводаСуммыНДС  = "ТоварыСуммаНДС",
	                                          ИмяПоляВводаСуммыСНДС = "ТоварыСуммаСНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСтавкиНДС].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСуммыНДС].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСуммыСНДС].Имя);
	
	СписокНалогообложений = Новый СписокЗначений();
	СписокНалогообложений.ЗагрузитьЗначения(УчетНДСУПКлиентСервер.ТипыНалогообложенияСкрывающиеРеквизитыНДС());
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НалогообложениеНДСПоУмолчанию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокНалогообложений;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПутьКДаннымСтавкаНДС = ЭлементыФормы[ИмяПоляВводаСтавкиНДС].ПутьКДанным;
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСуммыНДС].Имя);
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымСтавкаНДС);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокНезначащихСтавок();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	УчетНДСЛокализация.ДополнитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи(Форма, ИмяПоляВводаСтавкиНДС, ИмяПоляВводаСуммыНДС, ИмяПоляВводаСуммыСНДС);
	
КонецПроцедуры

// Определяет вид деятельности раздельного учета НДС исходя из налогообложения НДС продажи.
//
// Параметры:
//	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС -
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ТипыНалогообложенияНДС -
//
Функция ВидДеятельностиПоНалогообложениюНДС(НалогообложениеНДС) Экспорт
	
	ВидДеятельностиНДС = Неопределено;
	УчетНДСЛокализация.УстановитьВидДеятельностиПоНалогообложениюНДС(ВидДеятельностиНДС, НалогообложениеНДС);
	Если ВидДеятельностиНДС = Неопределено Тогда
		ВидДеятельностиНДС = НалогообложениеНДС;
	КонецЕсли;
	
	Возврат ВидДеятельностиНДС;
		
КонецФункции

// Возвращает текст запроса проверки корректности выбора номенклатуры по налогообложению НДС в документе продажи
//
// Параметры:
//	ПараметрыЗапроса - Структура - Параметры запроса контроля, который могут быть дополнены
//
// Возвращаемое значение:
// 	Строка - Текст запроса
//
Функция ТекстЗапросаКорректностьВыбораНоменклатурыПоНалогообложениюНДСПродажи(ПараметрыЗапроса) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ ИСТИНА КАК Результат;";
	УчетНДСЛокализация.ДополнитьТекстЗапросаКорректностьВыбораНоменклатурыПоНалогообложениюНДСПродажи(ТекстЗапроса, ПараметрыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Обрабатывает результат выполнения контроля корректности выбора номенклатуры по налогообложению НДС в документе продажи
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - Результат запроса контроля
//	ДокументПродажи - ДокументСсылка - Документ, по которому выполнялся контроль
//	ИмяТЧ - Строка - Имя табличной части для формирования сообщения об ошибке
//	ПредставлениеТЧ - Строка - Представление табличной части для формирования сообщения об ошибке
//	Отказ - Булево - Флаг отказа, который надо установить в случае наличия проблем.
//
Процедура СообщитьОбОшибкахКорректностьВыбораНоменклатурыПоНалогообложениюНДСПродажи(Знач Выборка, Знач ДокументПродажи, Знач ИмяТЧ, Знач ПредставлениеТЧ, Отказ) Экспорт
	
	УчетНДСЛокализация.СообщитьОбОшибкахКорректностьВыбораНоменклатурыПоНалогообложениюНДСПродажи(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);
	
КонецПроцедуры

#КонецОбласти




#КонецОбласти



#Область ПрочийПрограммныйИнтерфейс

#Область ОписаниеЭтаповЗакрытияМесяца

//++ НЕ УТ
#Область КорректировкаНалоговогоНазначенияКапитальныхИнвестиций

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - ТаблицаЗначений - См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - Идентификатор группы
//
Процедура ДобавитьЭтап_КорректировкаНалоговогоНазначенияКапитальныхИнвестиций(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.КорректировкаНалоговогоНазначенияКапитальныхИнвестиций,,,,
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Корректировка налогового назначения капитальных инвестиций';uk='Коригування податкового призначення капітальних інвестицій'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УчетНДСУП.Использование_КорректировкаНалоговогоНазначенияКапитальныхИнвестиций");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"УчетНДСУП.Выполнить_КорректировкаНалоговогоНазначенияКапитальныхИнвестиций");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.КорректировкаНалоговогоНазначенияКапитальныхИнвестиций.Формы.ФормаСписка.ПолноеИмя());
	
КонецПроцедуры

// Обработчики этапа.

#Область ОбработчикиЭтапа

Процедура Использование_КорректировкаНалоговогоНазначенияКапитальныхИнвестиций(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Ложь);
	
	Если ЗакрытиеМесяцаСервер.СостояниеЭтапаОпределено(ПараметрыОбработчика.ДанныеЭтапа)
	 И ЗакрытиеМесяцаСервер.ТребуетсяПересчетЭтапа(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(
		ПараметрыОбработчика,
		Метаданные.Документы.КорректировкаНалоговогоНазначенияКапитальныхИнвестиций.Имя);
	
КонецПроцедуры

Процедура Выполнить_КорректировкаНалоговогоНазначенияКапитальныхИнвестиций(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецПериода  = КонецМесяца(ПараметрыРасчета.ПериодРегистрации);
	
	НомерЗаданияДоРасчета = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций, ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ДанныеКРаспределению = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(
			НачалоПериода,
			КонецПериода,
			НомерЗаданияДоРасчета,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
|%2'
|;uk='При виконанні розрахунку за період %1 сталася помилка:
|%2'",ОбщегоНазначения.КодОсновногоЯзыка()),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		
	КонецПопытки;
	
	РезультатКорректировкиНалоговогоНазначенияКапитальныхИнвестиций = Документы.КорректировкаНалоговогоНазначенияКапитальныхИнвестиций.КорректироватьНалоговыеНазначенияКапитальныхИнвестиций(
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации, 
		ДанныеКРаспределению.Организация);
	
	Если РезультатКорректировкиНалоговогоНазначенияКапитальныхИнвестиций.РассчитанныеОрганизации.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗаданияДоРасчета,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(
				Неопределено,
				НомерЗаданияДоРасчета,
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРаспределению);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
|%2'
|;uk='При виконанні розрахунку за період %1 сталася помилка:
|%2'",ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыРасчета.ПериодРегистрации);
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- НЕ УТ


#КонецОбласти

#Область ФормированиеЗаданий


#Область ЗаданияКЗакрытиюМесяца

// Дополняет текст запроса механизма формирования заданий закрытия месяца.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
Процедура ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(Запрос, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц) Экспорт
	СоответствиеЗапросов = УчетНДСУПСлужебный.СоответствиеЗапросовКонтрольнымРегистрам(Запрос);
	
	Для Каждого ЭлементСоответствия Из СоответствиеЗапросов Цикл
		ЗакрытиеМесяцаСервер.ДополнитьТекстЗапросаЗаданий(ЭлементСоответствия.Ключ,
			ЭлементСоответствия.Значение,
			Запрос.МенеджерВременныхТаблиц.Таблицы,
			ТекстЗапроса,
			ТекстЗапросаВременныхТаблиц,
			ИменаВременныхТаблиц);
	КонецЦикла;
КонецПроцедуры

// Выполняет доп. обработку заданий к закрытию месяца перед записью.
//
// Параметры:
// 	Месяц - Дата - Месяц, на который формируется задание.
// 	Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - Операция закрытия месяца, на выполнение которой формируется задание.
// 	Организация - СправочникСсылка.Организации - Организация, по которой формируется задание.
// 	Документ - ДокументСсылка - Документ, проведение которого инициирует задание.
//
Процедура ПередЗаписьюЗаданияКЗакрытиюМесяца(Месяц, Операция, Организация, Документ) Экспорт
	
	УчетНДСЛокализация.ПередЗаписьюЗаданияКЗакрытиюМесяца(Месяц, Операция, Организация, Документ);
		
КонецПроцедуры

#КонецОбласти


#КонецОбласти


#Область ОписаниеДокументовДляЖурналов

// Добавляет в переданную таблицу хозяйственные операции и документы учета НДС для журнала документов Закупки
//
// Параметры:
//  ХозяйственныеОперацииИДокументы - ТаблицаЗначений - Состав колонок см. ОбщегоНазначенияУТ.НоваяТаблицаХозяйственныеОперацииИДокументы
//
Процедура ОписаниеОперацийИТиповДокументовДляЖурналаДокументовЗакупки(ХозяйственныеОперацииИДокументы) Экспорт
	
	УчетНДСЛокализация.ДополнитьОписаниеОперацийИТиповДокументовДляЖурналаДокументовЗакупки(ХозяйственныеОперацииИДокументы);
	
КонецПроцедуры

// Добавляет в переданную таблицу хозяйственные операции и документы учета НДС для журнала документов Продажи
//
// Параметры:
//  ТЗХозОперацииИТипыДокументов - ТаблицаЗначений - Состав колонок см. Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов.ХозяйственныеОперацииИДокументы
//
Процедура ОписаниеОперацийИТиповДокументовДляЖурналаДокументовПродажи(ТЗХозОперацииИТипыДокументов) Экспорт
	
	УчетНДСЛокализация.ДополнитьОписаниеОперацийИТиповДокументовДляЖурналаДокументовПродажи(ТЗХозОперацииИТипыДокументов);

КонецПроцедуры

// Добавляет в переданную таблицу хозяйственные операции и документы учета НДС для журнала документов Переработки
//
// Параметры:
//  ТЗХозОперацииИТипыДокументов - ТаблицаЗначений - Состав колонок см. Обработка.ЖурналДокументовПереработки.Форма.СписокДокументов.ХозяйственныеОперацииИДокументы
//
Процедура ОписаниеОперацийИТиповДокументовДляЖурналаДокументовПереработки(ТЗХозОперацииИТипыДокументов) Экспорт
	
	УчетНДСЛокализация.ДополнитьОписаниеОперацийИТиповДокументовДляЖурналаДокументовПереработки(ТЗХозОперацииИТипыДокументов);

КонецПроцедуры

#КонецОбласти

#Область ПодключениеКБСП

// См. ОбщийМодуль.ВариантыОтчетовПереопределяемый.ОпределитьОбъектыСКомандамиОтчетов()
//
// Параметры:
//  Объекты - Массив -
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	УчетНДСЛокализация.ОпределитьОбъектыСКомандамиОтчетов(Объекты);

КонецПроцедуры

// См. ОбщийМодуль.ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов()
// 
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	УчетНДСЛокализация.НастроитьВариантыОтчетов(Настройки);
	
КонецПроцедуры

// См. ОбщийМодуль.ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения()
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт

	УчетНДСЛокализация.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);

КонецПроцедуры

// См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту()
//	
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	УчетНДСЛокализация.ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	
КонецПроцедуры

// См. ОбщийМодуль.СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании()
//
// Параметры:
//  Объекты - Массив -
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	УчетНДСЛокализация.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты)
	
КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	//++ НЕ УТ
    СписокОбъектов.Добавить(Документы.КорректировкаНалоговогоНазначенияКапитальныхИнвестиций);
	//-- НЕ УТ
	УчетНДСЛокализация.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	
КонецПроцедуры

// Переопределяет список команд печати, получаемый функцией УправлениеПечатью.КомандыПечатиФормы.
// Используется для общих форм, у которых нет модуля менеджера для размещения в нем процедуры ДобавитьКомандыПечати,
// для случаев, когда штатных средств добавления команд в такие формы недостаточно. Например, если нужны свои команды,
// которых нет в других объектах.
// 
// Параметры:
//  ИмяФормы             - Строка - полное имя формы, в которой добавляются команды печати;
//  КомандыПечати        - ТаблицаЗначений - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати;
//  СтандартнаяОбработка - Булево - при установке значения Ложь не будет автоматически заполняться коллекция КомандыПечати.
//
Процедура ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка) Экспорт
	
	УчетНДСЛокализация.ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка);
	
КонецПроцедуры

// См. ОбщийМодуль.УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа()
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
    //++ НЕ УТ
	Списки.Вставить(Метаданные.Документы.КорректировкаНалоговогоНазначенияКапитальныхИнвестиций, Истина);	
	//-- НЕ УТ

	УчетНДСЛокализация.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
КонецПроцедуры

#КонецОбласти

// Возвращает список типов налогообложения НДС, по которым НДС не учитывается в стоимости, 
// а подлежит принятию к вычету (при выполнении условий).
//
// Возвращаемое значение:
//	Массив - элементы перечисления ТипыНалогообложенияНДС.
//
Функция ТипыНалогообложенияНДСНеУчитываетсяВСтоимости() Экспорт

	Возврат ВидыДеятельностиНДСПринимаетсяКВозмещению();
	
КонецФункции

// Возвращает структуру регистров учета НДС
// 
// Возвращаемое значение:
// 	Структура - Структура регистров НДС, где
// 	     Ключ - Имя регистра
// 	     Значение - Менеджер регистра.
Функция РегистрыУчетаНДС() Экспорт
	
	РегистрыНДС = Новый Структура();
	//++ Локализация
	//-- Локализация
	Возврат РегистрыНДС;
	
КонецФункции

// Возвращает регистры учета НДС, которые могут быть использованы в качестве источник данных по хоз. операциям в МФУ и Бюджетировании.
// 
// Возвращаемое значение:
// 	СписокЗначений - Список регистров.
//
Функция ИсточникиДанныхХозяйственныхОпераций() Экспорт
	
	РегистрыНДС = Новый СписокЗначений();
	//++ Локализация
	РегистрыНДС.Добавить(Метаданные.РегистрыНакопления.НДСРеестрПолученныхНалоговыхДокументов.Имя, Метаданные.РегистрыНакопления.НДСРеестрПолученныхНалоговыхДокументов.Синоним);
	РегистрыНДС.Добавить(Метаданные.РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.Имя, Метаданные.РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.Синоним);
	//-- Локализация
	Возврат РегистрыНДС;
	
КонецФункции

// Возвращает отбор для списка подбора номенклатуры в соответствии с налогообложением операции 
// 
// Параметры:
// 	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - налогообложение операции, в рамках которой производится подбор
// 
// Возвращаемое значение:
// 	Массив - массив структур отбора для справочника Номенклатура
//
Функция ОграничениеТоваровПоНалогообложению(НалогообложениеНДС) Экспорт
	
	Ограничения = Новый Массив;
	
	УчетНДСЛокализация.ДополнитьОграничениеТоваровПоНалогообложению(Ограничения, НалогообложениеНДС);
	
	Возврат Ограничения;
	
КонецФункции

#КонецОбласти


#КонецОбласти



