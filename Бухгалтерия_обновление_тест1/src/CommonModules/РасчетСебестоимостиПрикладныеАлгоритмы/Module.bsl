
#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыВызываемыеИзРегистров

// Возвращает признак записи движений по регистру механизмом расчета партий и себестоимости.
//
// Параметры:
//	НаборЗаписей - РегистрНакопленияНаборЗаписей - набор записей регистра.
//	
//
// Возвращаемое значение:
//	Булево - Истина, если движения записываются регламентной операцией закрытия месяца.
//
Функция ДвиженияЗаписываютсяРасчетомПартийИСебестоимости(НаборЗаписей) Экспорт

// Проверим наличие служебного дополнительного свойства у набора записей
	Возврат НаборЗаписей.ДополнительныеСвойства.Свойство(ИмяСлужебногоДополнительногоСвойстваОбъекта());

КонецФункции

// Проверяет необходимость формирования движений по регистрам учета себестоимости при проведении документов.
// Если формирование движений не требуется, то набор записей будет очищен.
//
// Параметры:
//	НаборЗаписей - РегистрНакопленияНаборЗаписей - набор записей регистра.
//
// Возвращаемое значение:
//	Булево - Истина, если требуется формирование движений.
//
Функция ФормироватьДвиженияРегистровУчетаСебестоимости(НаборЗаписей) Экспорт

	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ФормироватьДвиженияРегистровУчетаСебестоимости") Тогда
		ФормироватьДвижения = НаборЗаписей.ДополнительныеСвойства.ФормироватьДвиженияРегистровУчетаСебестоимости;
		НаборЗаписей.ДополнительныеСвойства.Удалить("ФормироватьДвиженияРегистровУчетаСебестоимости");
		Возврат ФормироватьДвижения; // проверка уже выполнена перед записью набора
	ИначеЕсли ДвиженияЗаписываютсяРасчетомПартийИСебестоимости(НаборЗаписей)
			И НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДополнитьДвижениямиИзИБЗаПериод") Тогда
		Возврат Истина; // если идет расчет себестоимости, то проверять не нужно
	ИначеЕсли НЕ РасчетСебестоимостиПовтИсп.ВозможныНеиспользуемыеДвиженияПоРегистрамСебестоимости() Тогда
		Возврат Истина; // учет себестоимости ведется во всех периодах
	КонецЕсли;

	НаборЗаписей.ДополнительныеСвойства.Вставить("ФормироватьДвиженияРегистровУчетаСебестоимости", Истина);

	МетаданныеРегистра = НаборЗаписей.Метаданные();

	Если МетаданныеРегистра = Метаданные.РегистрыСведений.ЗаданияКРасчетуСебестоимости Тогда

		КоличествоЗаписей = НаборЗаписей.Количество();

		Для НомерЗаписи = 0 По КоличествоЗаписей - 1 Цикл

			ИндексЗаписи = КоличествоЗаписей - 1 - НомерЗаписи; // обходим набор записей от конца к началу
			ПериодРасчета = НачалоМесяца(НаборЗаписей[ИндексЗаписи].Месяц);

			Если НЕ РасчетСебестоимостиПовтИсп.ВозможенРасчетСебестоимости(ПериодРасчета) Тогда

				Если НаборЗаписей.ДополнительныеСвойства.Свойство("СформированПрограммно") Тогда
					НаборЗаписей.Удалить(ИндексЗаписи);
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В периоде %1 учет себестоимости не ведется.';uk='У періоді %1 облік собівартості не ведеться.'",ОбщегоНазначения.КодОсновногоЯзыка()), РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПериодРасчета));
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		Возврат Истина;

	КонецЕсли;

	РегистрНеИспользуется = РасчетСебестоимостиПовтИсп.РегистрыНеИспользуемыеПриВыключенномУчетеСебестоимости().Получить(МетаданныеРегистра) <> Неопределено;

	Если НЕ РегистрНеИспользуется Тогда
		Возврат Истина;
	КонецЕсли;

	КоличествоЗаписей = НаборЗаписей.Количество();
	Если КоличествоЗаписей = 0 Тогда
		Возврат Истина;
	КонецЕсли;

	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	ЭтоВводОстатков = РасчетСебестоимостиПовтИсп.РегистраторыСДвижениямиПриВыключенномУчетеСебестоимости().Получить(Регистратор.Метаданные()) <> Неопределено;

	ПериодыЗаписей = НаборЗаписей.Выгрузить(, "Период");
	ПериодыЗаписей.Сортировать("Период");

	Если РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(НачалоМесяца(ПериодыЗаписей[0].Период), ЭтоВводОстатков) Тогда
		Возврат Истина;
	КонецЕсли;

	Для НомерЗаписи = 0 По КоличествоЗаписей - 1 Цикл

		ИндексЗаписи = КоличествоЗаписей - 1 - НомерЗаписи; // обходим набор записей от конца к началу
		ПериодЗаписи = НачалоМесяца(НаборЗаписей[ИндексЗаписи].Период);

		Если НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(ПериодЗаписи, ЭтоВводОстатков) Тогда
			НаборЗаписей.Удалить(ИндексЗаписи);
		КонецЕсли;

	КонецЦикла;

	НаборЗаписей.ДополнительныеСвойства.Вставить("ФормироватьДвиженияРегистровУчетаСебестоимости", НаборЗаписей.Количество() > 0);

	Возврат НаборЗаписей.Количество() > 0;

КонецФункции

// Вызывается ПередЗаписью набора записей регистра - сохраняет движения документа, сформированные расчетом партий и себестоимости.
// Такие движения имеют реквизит РасчетПартий = Истина или РасчетСебестоимости = Истина.
// При перепроведении документа эти движения добавляются к набору движений, сформированному самим документом.
//
// Параметры:
//	НаборЗаписей - РегистрНакопленияНаборЗаписей - свойство ЭтотОбъект модуля набора записей.
//	Замещение - Булево - режим записи набора (параметр события ПередЗаписью).
//
Процедура СохранитьДвиженияСформированныеРасчетомПартийИСебестоимости(НаборЗаписей,
		Замещение) Экспорт

	Если РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров().НеСохранятьРасчетныеДвижения Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Замещение Тогда
		Возврат; // движения, сформированные расчетом партий и себестоимости, не затираются
	КонецЕсли;

	Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("ТочноНужноСохранитьДвижения") Тогда
		Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("СвойстваДокумента")
				Или НаборЗаписей.ДополнительныеСвойства.СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Возврат; // движения, сформированные расчетом партий и себестоимости, надо удалить
		КонецЕсли;
	КонецЕсли;

	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ФормированиеУправленческогоБаланса") Тогда
		Возврат; // движения сформированные для упр.баланса содержат в себе движения расчета себестоимости - сохранять не надо
	КонецЕсли;

	// Готовим вспомогательные данные
	МетаданныеРегистра = НаборЗаписей.Метаданные(); // ОбъектМетаданныхРегистрНакопления, ОбъектМетаданныхРегистрСведений
	ОписаниеРегистра = СформироватьОписаниеРегистра(МетаданныеРегистра);
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Если ОписаниеРегистра.ЕстьРасчетСебестоимости
			И ОписаниеРегистра.ЕстьРасчетПартий Тогда
		ТекстОтборРасчетныеДвижения = "И (Т.РасчетСебестоимости ИЛИ Т.РасчетПартий)";
	ИначеЕсли ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
		ТекстОтборРасчетныеДвижения = "И Т.РасчетСебестоимости";
	ИначеЕсли ОписаниеРегистра.ЕстьРасчетПартий Тогда
		Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		// Для регистров партионного учета при использовании партионного учета ниже версии 2.2
			// сохранить оффлайновые движения не получится, т.к. у них не заполняется реквизит "РасчетПартий".
			Возврат;
		КонецЕсли;
		ТекстОтборРасчетныеДвижения = "И Т.РасчетПартий";
	Иначе
	// Регистр не обслуживается расчетом партий и себестоимости
		Возврат;
	КонецЕсли;

	ТекстОтборРасчетныеДвижения = ТекстОтборРасчетныеДвижения + "
		|	И Т.Активность";

	Если МетаданныеРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров
			ИЛИ МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы
			ИЛИ МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура
			ИЛИ МетаданныеРегистра = Метаданные.РегистрыНакопления.Закупки
			ИЛИ МетаданныеРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж Тогда

		Запрос.УстановитьПараметр("ПериодыДвижений", НаборЗаписей.Выгрузить(, "Период, РасчетПартий, РасчетСебестоимости"));
		Запрос.УстановитьПараметр("ЭтоЭтапПроизводства", Ложь);

		// Движения с признаком РасчетПартий сохраним в случае, если (по ИЛИ)
		//	- у документа нет первичных движений (необходимость наличия движений определит механизм партионного учета)
		//	- есть первичные движения в периоде движения с признаком РасчетПартий
		// Движения с признаком РасчетСебестоимости сохраним в случае, если (по ИЛИ)
		//	- есть первичные движения в периоде движения с признаком РасчетСебестоимости
		//	- есть движения с признаком РасчетПартий в периоде движения с признаком РасчетСебестоимости
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Месяц
			|ПОМЕСТИТЬ ПериодыПервичныхДвижений
			|ИЗ
			|	&ПериодыДвижений КАК Т
			|ГДЕ
			|	%ОтборПервичныеДвижения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	%ПолеРасчетПартий КАК РасчетПартий,
			|	%ПолеРасчетСебестоимости КАК РасчетСебестоимости,
			|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Месяц
			|ПОМЕСТИТЬ ПериодыРасчетныхДвижений
			|ИЗ
			|	РегистрНакопления.%ИмяРегистра КАК Т
			|ГДЕ
			|	Т.Регистратор = &Регистратор
			|	И Т.Активность
			|	И %ОтборРасчетныеДвижения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Месяц КАК Месяц
			|ПОМЕСТИТЬ ПериодыРасчетаПартий
			|ИЗ
			|	ПериодыРасчетныхДвижений КАК Т
			|ГДЕ
			|	Т.РасчетПартий
			|	И НЕ &ЭтоЭтапПроизводства
			|	И НЕ 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					ПериодыПервичныхДвижений КАК Т)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Месяц
			|ИЗ
			|	ПериодыРасчетныхДвижений КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыПервичныхДвижений КАК Первичные
			|		ПО Т.Месяц = Первичные.Месяц
			|ГДЕ
			|	Т.РасчетПартий
			|	И (Первичные.Месяц ЕСТЬ НЕ NULL 
			|			ИЛИ &ЭтоЭтапПроизводства)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Месяц КАК Месяц
			|ПОМЕСТИТЬ ПериодыРасчетаСебестоимости
			|ИЗ
			|	ПериодыРасчетныхДвижений КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыПервичныхДвижений КАК ПериодыПервичныхДвижений
			|		ПО Т.Месяц = ПериодыПервичныхДвижений.Месяц
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыРасчетаПартий КАК ПериодыРасчетаПартий
			|		ПО (Т.Месяц = ПериодыПервичныхДвижений.Месяц)
			|ГДЕ
			|	Т.РасчетСебестоимости
			|	И (НЕ ПериодыПервичныхДвижений.Месяц ЕСТЬ NULL
			|			ИЛИ НЕ ПериодыРасчетаПартий.Месяц ЕСТЬ NULL)";

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", МетаданныеРегистра.Имя);

		Если ОписаниеРегистра.ЕстьРасчетСебестоимости
				И ОписаниеРегистра.ЕстьРасчетПартий Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПервичныеДвижения", "(НЕ Т.РасчетПартий И НЕ Т.РасчетСебестоимости)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборРасчетныеДвижения", "(Т.РасчетПартий ИЛИ Т.РасчетСебестоимости)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПолеРасчетПартий", "Т.РасчетПартий");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПолеРасчетСебестоимости", "Т.РасчетСебестоимости");

			ТекстСоединениеСТаблицамиПериодов = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодыРасчетаПартий КАК ПериодыРасчетаПартий
				|		ПО НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) = ПериодыРасчетаПартий.Месяц
				|		И Т.РасчетПартий
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодыРасчетаСебестоимости КАК ПериодыРасчетаСебестоимости
				|		ПО НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) = ПериодыРасчетаСебестоимости.Месяц
				|		И Т.РасчетСебестоимости
				|";

			ТекстОтборПоПериодам = "
				|	И (НЕ ПериодыРасчетаПартий.Месяц ЕСТЬ NULL
				|			ИЛИ НЕ ПериодыРасчетаСебестоимости.Месяц ЕСТЬ NULL)
				|";

		ИначеЕсли ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПервичныеДвижения", "(НЕ Т.РасчетСебестоимости)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборРасчетныеДвижения", "(Т.РасчетСебестоимости)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПолеРасчетПартий", "ЛОЖЬ");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПолеРасчетСебестоимости", "Т.РасчетСебестоимости");

			ТекстСоединениеСТаблицамиПериодов = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодыРасчетаСебестоимости КАК ПериодыРасчетаСебестоимости
				|		ПО НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) = ПериодыРасчетаСебестоимости.Месяц
				|		И Т.РасчетСебестоимости
				|";

			ТекстОтборПоПериодам = "
				|	И (НЕ ПериодыРасчетаСебестоимости.Месяц ЕСТЬ NULL)
				|";

		ИначеЕсли ОписаниеРегистра.ЕстьРасчетПартий Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПервичныеДвижения", "(НЕ Т.РасчетПартий)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборРасчетныеДвижения", "(Т.РасчетПартий)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПолеРасчетПартий", "Т.РасчетПартий");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПолеРасчетСебестоимости", "ЛОЖЬ");

			ТекстСоединениеСТаблицамиПериодов = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодыРасчетаПартий КАК ПериодыРасчетаПартий
				|		ПО НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) = ПериодыРасчетаПартий.Месяц
				|		И Т.РасчетПартий
				|";

			ТекстОтборПоПериодам = "
				|	И (НЕ ПериодыРасчетаПартий.Месяц ЕСТЬ NULL)
				|";

		Иначе
		// Регистр не обслуживается расчетом партий и себестоимости
			Возврат;
		КонецЕсли;

		Запрос.Выполнить();

	Иначе

		ТекстСоединениеСТаблицамиПериодов = "";
		ТекстОтборПоПериодам = "";

	КонецЕсли;

	ТекстПоляОсновнойТаблицыРегистра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "
		|	Т.");

		// Готовим запрос для выборки движений, сформированных расчетом партий и себестоимости.
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ДополнитьДвижениямиИзИБЗаПериод") Тогда
		ТекстОтборПериод = "И Т.Период <= &КонецПериода";
		Запрос.УстановитьПараметр("КонецПериода", НаборЗаписей.ДополнительныеСвойства.ДополнитьДвижениямиИзИБЗаПериод.КонецПериода);
	Иначе
		ТекстОтборПериод = "";
	КонецЕсли;

	РегистрНеИспользуется = РасчетСебестоимостиПовтИсп.РегистрыНеИспользуемыеПриВыключенномУчетеСебестоимости().Получить(МетаданныеРегистра) <> Неопределено;
	ЭтоВводОстатков = РасчетСебестоимостиПовтИсп.РегистраторыСДвижениямиПриВыключенномУчетеСебестоимости().Получить(Регистратор.Метаданные()) <> Неопределено;

	Если НЕ РегистрНеИспользуется Тогда

		ТекстВозможныДвижения = "";

	ИначеЕсли НЕ РасчетСебестоимостиПовтИсп.ВозможенРасчетСебестоимости() Тогда

		ТекстВозможныДвижения = "И ЛОЖЬ";

	Иначе

		ДатаУчета = НачалоМесяца(Константы.ДатаНачалаУчетаСебестоимости.Получить());

		Если НЕ ЗначениеЗаполнено(ДатаУчета) Тогда

			ТекстВозможныДвижения = "";

		Иначе

			Если ЭтоВводОстатков Тогда
				ДатаУчета = НачалоМесяца(ДатаУчета - 1);
			КонецЕсли;

			Запрос.УстановитьПараметр("ДатаНачалаУчетаСебестоимости", ДатаУчета);

			ТекстВозможныДвижения = "И Т.Период >= &ДатаНачалаУчетаСебестоимости";

		КонецЕсли;

	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ %1
		|ИЗ
		|	РегистрНакопления.%2 КАК Т
		|%6
		|ГДЕ
		|	Т.Регистратор = &Регистратор
		|	%3
		|	%4
		|	%5
		|	%7
		|";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ТекстПоляОсновнойТаблицыРегистра, ОписаниеРегистра.ИмяРегистра, ТекстОтборПериод, ТекстОтборРасчетныеДвижения, ТекстВозможныДвижения, ТекстСоединениеСТаблицамиПериодов, ТекстОтборПоПериодам);

	// Дополним набор записей документа движениями, сформированных расчетом партий и себестоимости.
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;

	// Упорядочим набор записей так же, как это делается при расчете партий и себестоимости.
	ТекстПоляСортировки = СокрЛП(СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", ""));
	ТекстПоляСортировки = "Регистратор, Период"
		+ ?(ТекстПоляСортировки = "", "", ", ") + ТекстПоляСортировки
		+ ?(ОписаниеРегистра.ЕстьРасчетСебестоимости, ", РасчетСебестоимости", "")
		+ ?(ОписаниеРегистра.ЕстьРасчетПартий, ", РасчетПартий", "");

	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаЗаписей.Сортировать(ТекстПоляСортировки, Новый СравнениеЗначений);

	НаборЗаписей.Загрузить(ТаблицаЗаписей);

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВызываемыеИзДокументов

// Устанавливает параметры запроса выборки данных для проведения документа по регистрам партионного учета.
// Имена параметров см. в коде функции СформироватьСтруктуруПараметровЗапросаДляПроведения().
//
// Параметры:
//	Запрос - Запрос - запрос для установки параметров
//	Реквизиты - Произвольный - реквизиты документа для определения параметров партионного учета
//
Процедура ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты) Экспорт

	Если Запрос.Параметры.Свойство("ПараметрыПартийИСебестоимостиИнициализированы") Тогда
		Возврат;
	КонецЕсли;

	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Период") Тогда
		Период = Реквизиты.Период;
	Иначе
		Период = Реквизиты.Дата;
	КонецЕсли;

	СтруктураПараметров = СформироватьСтруктуруПараметровЗапросаДляПроведения(Реквизиты, НачалоМесяца(Период));

	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

	Запрос.УстановитьПараметр("ПараметрыПартийИСебестоимостиИнициализированы", Истина);

КонецПроцедуры

// Формирует временную таблицу ВТПараметрыПартионногоУчетаДляПроведения, содержащую параметры для проведения документа по регистрам партионного учета.
// Процедуру следует использовать в том случае, если документ формирует движения в нескольких периодах
// и в каждом периоде надо учитывать действующие в нем (а не на дату документа) параметры партионного учета.
// Имена полей временной таблицы см. в коде функции СформироватьСтруктуруПараметровЗапросаДляПроведения()
// Кроме того, во временную таблицу добавляется колонка Период, содержащую дату из параметра Периоды, приведенную к началу месяца.
//
// Параметры:
//	Запрос - Запрос - запрос для установки параметров
//	Реквизиты - Произвольный - реквизиты документа для определения параметров партионного учета
// 	Периоды - Массив (элемент - Дата) - периоды, в которых документ формирует движения;
//		Параметр должен содержать хотя бы одну непустую дату;
//		Если в данном параметре переданы несколько дат, относящихся к одному месяцу, то во временной таблице для них будет сформирована одна строка на начало этого месяца
//	ИмяТаблицыПериодов - Строка - имя временной таблицы, из которой можно выгрузить массив периодов;
//		Временная таблица должна содержать колонку "Период".
//
Процедура ЗаполнитьПараметрыИнициализацииПоПериодам(Запрос, Реквизиты,
		Периоды = Неопределено, ИмяТаблицыПериодов = "") Экспорт

	Если Запрос.Параметры.Свойство("ПараметрыПартийИСебестоимостиИнициализированы") Тогда
		Возврат;
	КонецЕсли;

	ЗапросДляПараметров = Новый Запрос;
	ЗапросДляПараметров.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;

	МассивПараметров = Новый Массив;
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТипыКолонок = Новый Структура;
	ОбработанныеПериоды = Новый Соответствие;

	Если Периоды = Неопределено Тогда
		Периоды = ВыгрузитьВременнуюТаблицу(ЗапросДляПараметров, ИмяТаблицыПериодов).ВыгрузитьКолонку("Период");
	КонецЕсли;

	// Соберем информацию о параметрах по периодам.
	Для Каждого Период Из Периоды Цикл

		ТекущийПериод = НачалоМесяца(Период);

		Если НЕ ЗначениеЗаполнено(ТекущийПериод)
				ИЛИ ОбработанныеПериоды.Получить(ТекущийПериод) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ОбработанныеПериоды.Вставить(ТекущийПериод, Истина);

		СтруктураПараметров = СформироватьСтруктуруПараметровЗапросаДляПроведения(Реквизиты, ТекущийПериод);
		СтруктураПараметров.Вставить("Период", ТекущийПериод);

		// Запомним все возможные типы колонок таблицы параметров.
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл

			Если НЕ ТипыКолонок.Свойство(КлючИЗначение.Ключ) Тогда
				МассивТиповКолонки = Новый Массив;
			Иначе
				МассивТиповКолонки = ТипыКолонок[КлючИЗначение.Ключ]; // Массив
			КонецЕсли;

			МассивТиповКолонки.Добавить(ТипЗнч(КлючИЗначение.Значение));
			ТипыКолонок.Вставить(КлючИЗначение.Ключ, МассивТиповКолонки);

		КонецЦикла;

		МассивПараметров.Добавить(СтруктураПараметров);

	КонецЦикла;

	// Создадим колонки таблицы параметров.
	ТипыКолонок.Вставить("Период", "Строка");

	Для Каждого КлючИЗначение Из ТипыКолонок Цикл

		ТипКолонки = Новый ОписаниеТипов(Новый ОписаниеТипов(КлючИЗначение.Значение), , "NULL");

		Если ТипКолонки.Типы().Количество() = 0 Тогда
			ТипКолонки = Новый ОписаниеТипов("Строка"); // если все значений данного параметра равны Неопределено, то присвоим колонке "фиктивный" тип, который можно будет выбрать в запросе
		КонецЕсли;

		ТаблицаПараметров.Колонки.Добавить(КлючИЗначение.Ключ, ТипКолонки);

	КонецЦикла;

	// Переложим параметры из массива в таблицу значений.
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПараметров.Добавить(), СтруктураПараметров);
	КонецЦикла;

	// Поместить таблицу значений во временную таблицу ВТПараметрыПартионногоУчетаДляПроведения.
	ЗапросДляПараметров.УстановитьПараметр("ТаблицаПараметровПартионногоУчета", ТаблицаПараметров);

	ЗапросДляПараметров.Текст = "ВЫБРАТЬ
		|	Т.*
		|ПОМЕСТИТЬ ВТПараметрыПартионногоУчетаДляПроведения
		|ИЗ
		|	&ТаблицаПараметровПартионногоУчета КАК Т";

	ЗапросДляПараметров.Выполнить();

	Запрос.УстановитьПараметр("ПараметрыПартийИСебестоимостиИнициализированы", Истина);

КонецПроцедуры

// Формирует структуру параметров, влияющих на логику проведения документа по регистрам партионного учета.
//
// Параметры:
// 	Реквизиты - ДокументСсылка - или выборка из результат запроса реквизитов документа
// 	Период - Дата -
// Возвращаемое значение:
// 	Структура - Описание:
// * ЭтоВводОстатковВНА_2_4 - Булево -
// * ИспользуетсяУправлениеВНА_2_4 - Булево -
// * ИспользоватьУчетПрочихДоходовРасходовРегл - Булево -
// * ИспользоватьУчетПрочихДоходовРасходов - Произвольный -
// * ВариантОбособленногоУчетаТоваров 
// * ОбособленныйУчетТоваровПоСделке 
// * Сделка 
// * ФормироватьВидыЗапасовПоПодразделениямМенеджерам - Произвольный -
// * ФормироватьВидыЗапасовПоСделкам - Произвольный -
// * ФИФОСкользящаяОценка - Булево -
// * УчитыватьСебестоимостьТоваровПоНазначениям - Булево -
// * УправленческийУчетОрганизаций - Булево -
// * ПартионныйУчетВерсии22 - Булево -
// * ПартионныйУчетВерсии21 - Булево, Неопределено -
// * ПартионныйУчетНеИспользуется - Булево -
//
Функция СформироватьСтруктуруПараметровЗапросаДляПроведения(Реквизиты, Период)

	СтруктураПараметров = Новый Структура;

	СтруктураПараметров.Вставить("ПартионныйУчетНеИспользуется", РасчетСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(Период));
	СтруктураПараметров.Вставить("ПартионныйУчетВерсии21", РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21(Период));
	СтруктураПараметров.Вставить("ПартионныйУчетВерсии22", РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(Период));

	СтруктураПараметров.Вставить("УправленческийУчетОрганизаций", РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(Период));

	СтруктураПараметров.Вставить("УчитыватьСебестоимостьТоваровПоНазначениям", РасчетСебестоимостиПовтИсп.СебестоимостьТоваровПоНазначениям(НачалоМесяца(Период)));

	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Организация")
			И ЗначениеЗаполнено(Реквизиты.Организация) Тогда

		ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик("УчетнаяПолитикаФинансовогоУчета", Реквизиты.Организация, Период);

		СтруктураПараметров.Вставить("ФИФОСкользящаяОценка", (ПараметрыУчетнойПолитики <> Неопределено
			И ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка));

	Иначе

		СтруктураПараметров.Вставить("ФИФОСкользящаяОценка", Ложь);

	КонецЕсли;

	СтруктураПараметров.Вставить("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	СтруктураПараметров.Вставить("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));

	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Сделка") Тогда
		СтруктураПараметров.Вставить("Сделка", Реквизиты.Сделка);
	КонецЕсли;

	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "ОбособленныйУчетТоваровПоСделке") Тогда
		СтруктураПараметров.Вставить("ОбособленныйУчетТоваровПоСделке", Реквизиты.ОбособленныйУчетТоваровПоСделке);
	КонецЕсли;

	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "ВариантОбособленногоУчетаТоваров") Тогда
		СтруктураПараметров.Вставить("ВариантОбособленногоУчетаТоваров", Реквизиты.ВариантОбособленногоУчетаТоваров);
	КонецЕсли;

	СтруктураПараметров.Вставить("ИспользоватьУчетПрочихДоходовРасходов", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	СтруктураПараметров.Вставить("ИспользоватьУчетПрочихДоходовРасходовРегл", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходовРегл"));

	ИспользуетсяУправлениеВНА_2_4 = Ложь;
	ЭтоВводОстатковВНА_2_4 = Ложь;
	//++ НЕ УТ
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Ссылка")
			И ТипЗнч(Реквизиты.Ссылка) = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4") Тогда
			// При переходе на учет 2.4 остатки вводятся на день раньше, чем дата начала учета 2.4.
		ИспользуетсяУправлениеВНА_2_4 = Истина;
		ЭтоВводОстатковВНА_2_4 = Истина;
	Иначе
		ИспользуетсяУправлениеВНА_2_4 = ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Период);
	КонецЕсли;
	//-- НЕ УТ
	СтруктураПараметров.Вставить("ИспользуетсяУправлениеВНА_2_4", ИспользуетсяУправлениеВНА_2_4);
	СтруктураПараметров.Вставить("ЭтоВводОстатковВНА_2_4", ЭтоВводОстатковВНА_2_4);

	РасчетСебестоимостиЛокализация.ДополнитьПараметрыЗапросаДляПроведения(Реквизиты, Период, СтруктураПараметров);

	Возврат СтруктураПараметров;

КонецФункции

// Проверяет наличие изменений в табличных частях документа.
// Табличная часть документа-объекта сворачивается по суммовым/количественным реквизитам
// и сверяется с табличной частью документа в ИБ.
// Если в табличной части документа есть реквизит-дата, то определяется его минимальное значение в измененных строках.
// При этом строки, в которых дата не заполнена, на модифицированность не проверяются.
// 
// Параметры:
//	ДокументОбъект - ДокументОбъект -
//	ОписаниеТабличныхЧастей - Структура
//		Ключ - имя табличной части
//		Значение - Структура с обязательными ключами
//			"Ресурсы" - в строковом значении этого ключа через запятую перечисляются суммовые и количественные реквизиты табличной части
//			"Дата"    - в строковом значении этого ключа указывается имя реквизита с датой (если даты нет, то значение не заполняется).
//
// Возвращаемое значение:
//	Структура с ключами
//		ЕстьИзменения - Булево - признак наличия изменений в табличной части
//		Дата - Дата или Неопределено - минимальное значение реквизита даты в измененных строка табличной части.
//
Функция ИзмененыТабличныеЧастиДокумента(ДокументОбъект,
		ОписаниеТабличныхЧастей) Экспорт

	Результат = Новый Структура("ЕстьИзменения, Дата", Ложь, Неопределено);

	УстановитьПривилегированныйРежим(Истина);

	МетаДокумент = ДокументОбъект.Метаданные();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);

	ШаблонЗапроса = "ВЫБРАТЬ
		|%ПоляТаблицы
		|ПОМЕСТИТЬ ВТТабличнаяЧасть
		|ИЗ
		|	&Таблица КАК Т
		|;
		|
		|ВЫБРАТЬ
		|%ПоляСвернутые
		|ПОМЕСТИТЬ ВТИзменения
		|ИЗ
		|(ВЫБРАТЬ
		|%ПоляТаблицы
		|ИЗ
		|	ВТТабличнаяЧасть КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|%ПоляСМинусом
		|ИЗ
		|	%ТаблицаДокумента КАК Т
		|ГДЕ
		|	Т.Ссылка = &Ссылка
		|) КАК Т
		|%Группировка
		|%УсловиеОтбора
		|;
		|
		|ВЫБРАТЬ
		|	МИНИМУМ(%Дата) КАК Результат
		|ИЗ
		|	ВТИзменения КАК Т
		|ГДЕ
		|	%Дата <> ДАТАВРЕМЯ(1,1,1,0,0,0)
		|";

	Для Каждого КлючИЗначение Из ОписаниеТабличныхЧастей Цикл

	// Подготовим тексты фрагментов запроса.
		СтрокаИзмерения = "";
		СтрокаРесурсы = "";
		СтрокаРесурсыСумма = "";
		СтрокаРесурсыОтбор = "";
		СтруктураРесурсы = Новый Структура(?(ЗначениеЗаполнено(КлючИЗначение.Значение.Ресурсы), КлючИЗначение.Значение.Ресурсы, ""));
		СтрокаДата = ?(ЗначениеЗаполнено(КлючИЗначение.Значение.Дата), "Т."
			+ КлючИЗначение.Значение.Дата, "Неопределено");

		Для Каждого МетаРеквизит Из МетаДокумент.ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты Цикл

			Если МетаРеквизит.Тип = Новый ОписаниеТипов("УникальныйИдентификатор")
					ИЛИ МетаРеквизит.Тип = Новый ОписаниеТипов("Строка") Тогда
				Продолжить;
			КонецЕсли;

			Если СтруктураРесурсы.Свойство(МетаРеквизит.Имя) Тогда
				СтрокаРесурсы = СтрокаРесурсы + ?(СтрокаРесурсы = "", "", ",
					|	") + "Т." + МетаРеквизит.Имя;
				СтрокаРесурсыСумма = СтрокаРесурсыСумма
					+ ?(СтрокаРесурсыСумма = "", "", ",
					|	") + "СУММА(Т." + МетаРеквизит.Имя + ") КАК " + МетаРеквизит.Имя;
				СтрокаРесурсыОтбор = СтрокаРесурсыОтбор
					+ ?(СтрокаРесурсыОтбор = "", "	", "
					|	ИЛИ ") + "СУММА(Т." + МетаРеквизит.Имя + ") <> 0";
			Иначе
				СтрокаИзмерения = СтрокаИзмерения + ?(СтрокаИзмерения = "", "", ",
					|") + "	Т." + МетаРеквизит.Имя;
			КонецЕсли;

		КонецЦикла;

		СтрокаПоля = СтрокаИзмерения + ?(СтрокаИзмерения = ""
			ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрокаРесурсы;
		СтрокаПоляСМинусом = СтрокаИзмерения + ?(СтрокаИзмерения = ""
			ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрЗаменить(СтрокаРесурсы, "Т.", "-Т.");
		СтрокаПоляСвернутые = СтрокаИзмерения + ?(СтрокаИзмерения = ""
			ИЛИ СтрокаРесурсыСумма = "", "", ",
			|	") + СтрокаРесурсыСумма;
		СтрокаТаблицаДокумента = "Документ." + МетаДокумент.Имя + "."
			+ КлючИЗначение.Ключ;

			// Сформируем текст запроса и выполним запрос.
		Запрос.УстановитьПараметр("Таблица", ДокументОбъект[КлючИЗначение.Ключ].Выгрузить());

		Запрос.Текст = ШаблонЗапроса;

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляТаблицы", СтрокаПоля);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСМинусом", СтрокаПоляСМинусом);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТаблицаДокумента", СтрокаТаблицаДокумента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСвернутые", СтрокаПоляСвернутые);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Группировка", ?(СтрокаИзмерения = "", "", "СГРУППИРОВАТЬ ПО"
			+ Символы.ПС + СтрокаИзмерения));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеОтбора", ?(СтрокаРесурсыОтбор = "", "", "ИМЕЮЩИЕ"
			+ Символы.ПС + СтрокаРесурсыОтбор));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Дата", СтрокаДата);

		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		Если Выборка.Результат <> Null Тогда // найдены отличия
			Результат.ЕстьИзменения = Истина;

			Если ТипЗнч(Выборка.Результат) = Тип("Дата") Тогда
				Результат.Дата = ?(Результат.Дата = Неопределено, Выборка.Результат, Мин(Результат.Дата, Выборка.Результат));
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

// Устанавливает в документе и его движениях признак того, что документ проводится при выполнении расчета партий/себестоимости.
//
Процедура УстановитьПризнакВыполненияРасчетаПартийИСебестоимости(ДокументОбъект) Экспорт

	ДокументОбъект.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);

	Для Каждого Движение Из ДокументОбъект.Движения Цикл
		Движение.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВызываемыеИзОтчетов

// При формировании отчета проверяет актуальность расчета партий и при необходимости запускает расчет партий в фоновом задании.
// Также в шапку отчета выводится информация о текущем состоянии расчета партий.
// Параметры запуска расчета партий помещаются в КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.
//
// Параметры:
//	ДокументРезультат   - ТабличныйДокумент - табличный документ отчета, вызывающего проверку.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек отчета, вызывающего проверку.
//	ИмяПоляОрганизация  - Строка - имя поля реквизита организации.
//
Процедура АктуализироватьПартииДляОтчетов(ДокументРезультат,
		КомпоновщикНастроек, ИмяПоляОрганизация = "Организация") Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ПараметрыРасчета = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ПараметрыРасчета.Вставить("РасчетПартийИСебестоимости", Ложь);
	ПараметрыРасчета.Вставить("НачалоПериодаРасчета", Неопределено);
	ПараметрыРасчета.Вставить("КонецПериодаРасчета", Неопределено);
	ПараметрыРасчета.Вставить("МассивОрганизаций", Неопределено);
	ПараметрыРасчета.Вставить("КоличествоДокументов", 0);
	ПараметрыРасчета.Вставить("НомерЗадания", РегистрыСведений.ЗаданияКРасчетуСебестоимости.ПолучитьНомерЗадания());

	ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	ПериодОтчета = ПараметрПериодОтчета.Значение; // СтандартныйПериод
	ГраницаРасчета = ?(ПараметрПериодОтчета.Использование, ПериодОтчета.ДатаОкончания, ТекущаяДатаСеанса());

	// Проверим дату запрета изменений.
	ТаблицаДанных = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.Дата = НачалоМесяца(ГраницаРасчета);
	НоваяСтрока.Раздел = "РегламентныеОперации";

	ИзмененияЗапрещены = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ТаблицаДанных);

	Если ПланыОбмена.ГлавныйУзел() = Неопределено И НЕ ИзмененияЗапрещены
			И Константы.АктуализироватьДанныеПриФормированииОтчетов.Получить()
			И РасчетСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(ГраницаРасчета)) Тогда

		ПараметрыРасчета.МассивОрганизаций = ОрганизацииДляОтбораИзНастроекОтчета(КомпоновщикНастроек, ИмяПоляОрганизация);

		СхемаРасчета = СхемаРасчетаПартий(ГраницаРасчета, ПараметрыРасчета.МассивОрганизаций);

		Если СхемаРасчета.Количество() > 0 Тогда

			ПараметрыРасчета.НачалоПериодаРасчета = НачалоМесяца(СхемаРасчета[0].Дата);
			ПараметрыРасчета.КонецПериодаРасчета = КонецМесяца(ГраницаРасчета);

			ПараметрыРасчета.МассивОрганизаций = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СхемаРасчета[СхемаРасчета.Количество()
				- 1].Организации); // в последней строке есть все организации, по которым будет выполнен расчет
			ПараметрыРасчета.КоличествоДокументов = КоличествоНеактуальныхДокументов(ПараметрыРасчета);

			АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ПроверитьНаличиеАктивныхРасчетов(ПараметрыРасчета.МассивОрганизаций);

			Если НЕ АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
				ПараметрыРасчета.РасчетПартийИСебестоимости = РасчетСебестоимости.РассчитатьФоновымЗаданием(ПараметрыРасчета.КонецПериодаРасчета, ПараметрыРасчета.МассивОрганизаций);
			КонецЕсли;

			ВывестиОписаниеАктуальностиРасчета(ДокументРезультат, ПараметрыРасчета, АктивныеРасчеты.ЕстьАктивныеРасчеты);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Проверяет, что расчета партий, запущенный при формировании отчета, завершен.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры запуска расчета партий;
//		ключи структуры см. в АктуализироватьПартииДляОтчетов() и в ОтчетыУТКлиентПереопределяемый.ВосстановитьОффлайновыеРасчеты().
//
// Возвращаемое значение:
//	Булево - признак окончания расчета.
//
Функция ПартииДляОтчетовАктуализированы(ПараметрыРасчета) Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено
			ИЛИ НЕ ПараметрыРасчета.Свойство("КонецПериодаРасчета")
			ИЛИ НЕ ЗначениеЗаполнено(ПараметрыРасчета.КонецПериодаРасчета) Тогда
		Возврат Истина; // расчет не выполнялся
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(Очередь.Месяц, МЕСЯЦ)) КАК НачалоПериодаРасчета
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Очередь
		|ГДЕ
		|	Очередь.НомерЗадания <= &НомерЗадания
		|	И Очередь.Организация В (&МассивОрганизаций)
		|ИМЕЮЩИЕ 
		|	НЕ (МИНИМУМ(Очередь.Месяц) ЕСТЬ NULL)
		|	И МИНИМУМ(НАЧАЛОПЕРИОДА(Очередь.Месяц, МЕСЯЦ)) <= &КонецПериодаРасчета
		|";

	Запрос.УстановитьПараметр("КонецПериодаРасчета", ПараметрыРасчета.КонецПериодаРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("НомерЗадания", ПараметрыРасчета.НомерЗадания);

	Результат = Запрос.Выполнить();

	Возврат Результат.Пустой();

КонецФункции

// Возвращает количество документов, измененных после прошлого закрытия месяца.
//
Функция КоличествоНеактуальныхДокументов(ПараметрыРасчета)

	КоличествоДокументов = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задания.Документ) КАК Количество
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
		|ГДЕ
		|	Задания.Документ <> НЕОПРЕДЕЛЕНО
		|	И НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ) <= &Период
		|	И (&ПоВсемОрганизациям ИЛИ Задания.Организация В (&МассивОрганизаций))";

	Запрос.УстановитьПараметр("Период", ПараметрыРасчета.КонецПериодаРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.МассивОрганизаций));

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		КоличествоДокументов = Выборка.Количество;
	КонецЕсли;

	Возврат КоличествоДокументов;

КонецФункции

// Возвращает массив организаций, по которым будет строиться отчет.
// Распознает в отборах отчета только одно условие отбора по организации с видами сравнения "равно", "в списке", "не равно", "не в списке".
//
Функция ОрганизацииДляОтбораИзНастроекОтчета(КомпоновщикНастроек,
		ИмяПоляОрганизация = "Организация")

	Если КомпоновщикНастроек = Неопределено Тогда
		Возврат Справочники.Организации.ДоступныеОрганизации(Истина);
	КонецЕсли;

	ОперацииСравнения = Новый Массив;
	ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);

	ОтборОрганизация = ОтчетыУТКлиентСервер.ПолучитьЗначениеОтбора(КомпоновщикНастроек, ИмяПоляОрганизация, ОперацииСравнения);
	ОтборРегистратор = ОтчетыУТКлиентСервер.ПолучитьЗначениеОтбора(КомпоновщикНастроек, "Регистратор", ОперацииСравнения);

	Если ОтборОрганизация = Неопределено Тогда

		Если ОтборРегистратор = Неопределено Тогда

			ПоВсемОрганизациям = Истина;
			МассивОрганизаций = Новый Массив;

		Иначе

		// При контекстном выполнении отчетов устанавливается отбор по регистратору, без отбора по организации.
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Т.Организация КАК Организация
				|ИЗ
				|	РегистрСведений.РеестрДокументов КАК Т
				|ГДЕ
				|	Т.Ссылка В(&Регистраторы)
				|	И Т.Ссылка <> НЕОПРЕДЕЛЕНО
				|";

			Запрос.УстановитьПараметр("Регистраторы", ОбщегоНазначенияУТКлиентСервер.Массив(ОтборРегистратор));

			МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
			ПоВсемОрганизациям = НЕ ЗначениеЗаполнено(МассивОрганизаций);

		КонецЕсли;

	Иначе

		ПоВсемОрганизациям = Ложь;
		МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизация);

	КонецЕсли;

	ОперацииСравнения = Новый Массив;
	ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
	ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);

	ОтборОрганизация = ОтчетыУТКлиентСервер.ПолучитьЗначениеОтбора(КомпоновщикНастроек, ИмяПоляОрганизация, ОперацииСравнения);

	Если ОтборОрганизация = Неопределено Тогда
		МассивИсключаемыхОрганизаций = Новый Массив;
	Иначе
		МассивИсключаемыхОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизация);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", ПоВсемОрганизациям);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("МассивИсключаемыхОрганизаций", МассивИсключаемыхОрганизаций);
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Т
		|ГДЕ
		|	(Т.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
		|		ИЛИ &ИспользоватьУправленческуюОрганизацию)
		|	И (Т.Ссылка В (&МассивОрганизаций)
		|			ИЛИ &ПоВсемОрганизациям)
		|	И НЕ Т.Ссылка В (&МассивИсключаемыхОрганизаций)";

	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат Организации;

КонецФункции

// Выводит в табличный документ предупреждение, если отчет формируется по неактуальным данным.
//
Процедура ВывестиОписаниеАктуальностиРасчета(ДокументРезультат,
		ПараметрыРасчета, ЕстьАктивныеРасчеты)

	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Расчет партий выполнен до %1. Данные отчета могут быть не актуальны.';uk='Розрахунок партій виконаний до %1. Дані звіту можуть бути не актуальні.'"), Формат(КонецМесяца(ПараметрыРасчета.НачалоПериодаРасчета
		- 1), "ДЛФ=D"));

	Если ЕстьАктивныеРасчеты Тогда

		ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
			+ НСтр("ru='В настоящий момент есть активный сеанс закрытия месяца, по окончании которого Вам будет нужно переформировать отчет.';uk='На даний момент є активний сеанс закриття місяця, після закінчення якого Вам буде потрібно переформувати звіт.'")

	Иначе

		Если ПараметрыРасчета.РасчетПартийИСебестоимости Тогда

			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Запущено фоновое задание расчета партий до %1.
|После окончания расчета Вам будет предложено переформировать отчет.'
|;uk='Запущено фонове завдання розрахунку партій до %1. 
|Після закінчення розрахунку Вам буде запропоновано переформувати звіт.'"), Формат(ПараметрыРасчета.КонецПериодаРасчета, "ДЛФ=D"));

			Если ЗначениеЗаполнено(ПараметрыРасчета.КоличествоДокументов) Тогда
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(требуется распределить партии для %1)';uk='(потрібно розподілити партії для %1)'"), ОбщегоНазначенияУТ.ЧислоДокументовПрописью(ПараметрыРасчета.КоличествоДокументов));
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ТаблицаПредупреждение = Новый ТабличныйДокумент;
	ОбластьПредупреждение = ТаблицаПредупреждение.Область(1, 1, 1, 1);

	ОбластьПредупреждение.Текст = ТекстПредупреждения;
	ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;

	ДокументРезультат.ВставитьОбласть(ОбластьПредупреждение, ДокументРезультат.Область(1, 1, 1, 1), ТипСмещенияТабличногоДокумента.ПоВертикали);

КонецПроцедуры

// Возвращает массив организаций, по которым есть выручка за указанный период,
// но метод оценки стоимости отличается от "ФИФО (скользящая)".
//
// Параметры:
//	НачалоПериода - Дата - начало периода для получения движений
//	КонецПериода - Дата - конец периода для получения движений.
//
Функция ОрганизацииБезФИФОСкользящая(НачалоПериода, КонецПериода,
		КомпоновщикНастроек, ИмяПоляОрганизация)

	МассивОрганизаций = ОрганизацииДляОтбораИзНастроекОтчета(КомпоновщикНастроек, ИмяПоляОрганизация);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик("УчетнаяПолитикаФинансовогоУчета", Запрос.МенеджерВременныхТаблиц, , НачалоПериода);

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Аналитика.Организация КАК Ссылка
		|ПОМЕСТИТЬ ВТОрганизацииСДвижениями
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &КонецПериода, ,) КАК Выручка
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
		|		ПО Аналитика.Ссылка = Выручка.АналитикаУчетаПоПартнерам
		|ГДЕ
		|	Аналитика.Организация В (&МассивОрганизаций)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизацииСДвижениями КАК ОрганизацииСДвижениями
		|		ПО Т.Ссылка = ОрганизацииСДвижениями.Ссылка
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУчетнаяПолитикаФинансовогоУчета КАК УчетныеПолитикиОрганизаций
		|		ПО Т.Ссылка = УчетныеПолитикиОрганизаций.Организация
		|ГДЕ
		|	УчетныеПолитикиОрганизаций.МетодОценкиСтоимостиТоваров <> ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);

	УстановитьПривилегированныйРежим(Истина);

	МассивИсключенныхОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат МассивИсключенныхОрганизаций;

КонецФункции

// Выводит текст предупреждения в шапку отчета.
//
Процедура ДобавитьПредупреждениеОбОсобенностяхФормированияОтчета(ДокументРезультат,
		КомпоновщикНастроек, ПроверяемыеПоля, АктуализироватьПартии = Истина,
		ИмяПоляОрганизация = "Организация") Экспорт

	ИспользуютсяПроверяемыеПоля = Ложь;
	ИспользуемыеПоля = Новый Массив;
	ТекстИспользуемыеПоля = "";
	Для Каждого Поле Из ПроверяемыеПоля Цикл
		Если КомпоновкаДанныхКлиентСервер.ПолеИспользуется(КомпоновщикНастроек, Поле) Тогда
			ИспользуемыеПоля.Добавить(Поле);
			Если ПустаяСтрока(ТекстИспользуемыеПоля) Тогда
				ТекстИспользуемыеПоля = Поле;
			Иначе
				ТекстИспользуемыеПоля = ТекстИспользуемыеПоля + ", " + Поле;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ИспользуемыеПоля.Количество() > 0 Тогда

		ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
		ПериодОтчета = ПараметрПериодОтчета.Значение; // СтандартныйПериод
		НачалоПериода = ?(ПараметрПериодОтчета.Использование, ПериодОтчета.ДатаНачала, НачалоГода(ТекущаяДатаСеанса()));
		КонецПериода = ?(ПараметрПериодОтчета.Использование, ПериодОтчета.ДатаОкончания, ТекущаяДатаСеанса());

		МассивИсключенныхОрганизаций = ОрганизацииБезФИФОСкользящая(НачалоПериода, КонецПериода, КомпоновщикНастроек, ИмяПоляОрганизация);

		ПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоПериода);
		Если НЕ ПартионныйУчетВерсии22 Тогда

		// Отчет не сформирован - сообщим о причинах.
			ДатаПереходаНаПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22();

			Если НЕ ЗначениеЗаполнено(ДатаПереходаНаПартионныйУчетВерсии22) Тогда
				Если ИспользуемыеПоля.Количество() = 1 Тогда
                    ТекстПредупреждения = НСтр("ru='Поле ""%1"" заполняется только при включенном партионном учете версии 2.5.';uk='Поле ""%1"" заповнюється тільки при включеному партіоному обліку версії 2.5.'");
				Иначе
                    ТекстПредупреждения = НСтр("ru='Поля ""%1"" заполняются только при включенном партионном учете версии 2.5.';uk='Поля ""%1"" заповнюються тільки при включеному партіонному обліку версії 2.5.'");
				КонецЕсли;
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ТекстИспользуемыеПоля);
			Иначе
				Если ИспользуемыеПоля.Количество() = 1 Тогда
					ТекстПредупреждения = НСтр("ru='Поле ""%1"" заполняется только в периодах использования партионного учета версии 2.5.
|Дата перехода на партионный учет версии 2.5: %2'
|;uk='Поле ""%1"" заповнюється тільки в періодах використання партіонного обліку версії 2.5. 
|Дата переходу на партіонний облік версії 2.5: %2'");
				Иначе
					ТекстПредупреждения = НСтр("ru='Поля ""%1"" заполняются только в периодах использования партионного учета версии 2.5.
|Дата перехода на партионный учет версии 2.5: %2'
|;uk='Поля ""%1"" заповнюються тільки в періодах використання партіонного обліку версії 2.5.
|Дата переходу на партіонний облік версії 2.5: %2'");
				КонецЕсли;
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ТекстИспользуемыеПоля, РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ДатаПереходаНаПартионныйУчетВерсии22));
			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(МассивИсключенныхОрганизаций) Тогда

			Если ИспользуемыеПоля.Количество() = 1 Тогда
				ТекстПредупреждения = НСтр("ru='Поле ""%1"" не заполняется для организаций, имеющих метод оценки стоимости, отличный от ""ФИФО (скользящая оценка)"": %2';uk='Поле ""%1"" не заповнюється для організацій, що мають метод оцінки вартості, відмінний від ""ФІФО (змінна оцінка)"": %2'");
			Иначе
				ТекстПредупреждения = НСтр("ru='Поля ""%1"" не заполняются для организаций, имеющих метод оценки стоимости, отличный от ""ФИФО (скользящая оценка)"": %2';uk='Поля ""%1"" не заповнюються для організацій, що мають метод оцінки вартості, відмінний від ""ФІФО (змінна оцінка)"": %2'");
			КонецЕсли;
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ТекстИспользуемыеПоля, ПредставлениеОрганизаций(МассивИсключенныхОрганизаций, ", "));

		Иначе

		// Отчет сформирован без особенностей.
			ТекстПредупреждения = "";

		КонецЕсли;

		Если ПартионныйУчетВерсии22 Тогда
			АктуализироватьПартииДляОтчетов(ДокументРезультат, КомпоновщикНастроек, ИмяПоляОрганизация);
		КонецЕсли;

		Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
			ТаблицаПредупреждение = Новый ТабличныйДокумент;
			ОбластьПредупреждение = ТаблицаПредупреждение.Область(1, 1, 1, 1);

			ОбластьПредупреждение.Текст = СокрЛП(ТекстПредупреждения);
			ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;

			ДокументРезультат.ВставитьОбласть(ОбластьПредупреждение, ДокументРезультат.Область(1, 1, 1, 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//++ НЕ УТ

// Возвращает текст предупреждения об организациях, по которым невозможно формирование отчета.
//
Функция ТекстПредупрежденияНеподдерживаемыеОрганизации(НачалоПериода,
		КонецПериода, КомпоновщикНастроек,
		ИмяПоляОрганизация = "Организация") Экспорт

	МассивИсключенныхОрганизаций = ОрганизацииСВыпускомПродукцииБезФИФОСкользящая(НачалоПериода, КонецПериода, КомпоновщикНастроек, ИмяПоляОрганизация);

	ПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоПериода);
	Если НЕ ПартионныйУчетВерсии22 Тогда
		ДатаПереходаНаПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22();
		Если НЕ ЗначениеЗаполнено(ДатаПереходаНаПартионныйУчетВерсии22) Тогда
            ТекстПредупреждения = НСтр("ru='Фактические данные доступны только при включенном партионном учете версии 2.5.';uk='Фактичні дані доступні тільки при включеному партіонному обліку версії 2.5.'");
		Иначе
			ТекстПредупреждения = НСтр("ru='Фактические данные доступны только в периодах использования партионного учета версии 2.5.
|Дата перехода на партионный учет версии 2.5: %1'
|;uk='Фактичні дані доступні тільки в періодах використання партіонний обліку версії 2.5.
|Дата переходу на партіонний облік версії 2.5: %1'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ДатаПереходаНаПартионныйУчетВерсии22));
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(МассивИсключенныхОрганизаций) Тогда

		ТекстПредупреждения = НСтр("ru='Невозможно получить фактические данные для организаций, имеющих метод оценки стоимости, отличный от ""ФИФО (скользящая оценка)"": %1';uk='Неможливо отримати фактичні дані для організацій, що мають метод оцінки вартості, відмінний від ""ФІФО (змінна оцінка)"": %1'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ПредставлениеОрганизаций(МассивИсключенныхОрганизаций, ", "));
	Иначе
		ТекстПредупреждения = "";
	КонецЕсли;

	Возврат ТекстПредупреждения;

КонецФункции

// Возвращает массив организаций, по которым есть выпуск за указанный период,
// но метод оценки стоимости отличается от "ФИФО (скользящая)".
//
// Параметры:
//	НачалоПериода - Дата - начало периода для получения движений
//	КонецПериода - Дата - конец периода для получения движений.
//
Функция ОрганизацииСВыпускомПродукцииБезФИФОСкользящая(НачалоПериода,
		КонецПериода, КомпоновщикНастроек, ИмяПоляОрганизация)

	МассивОрганизаций = ОрганизацииДляОтбораИзНастроекОтчета(КомпоновщикНастроек, ИмяПоляОрганизация);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик("УчетнаяПолитикаФинансовогоУчета", Запрос.МенеджерВременныхТаблиц, , НачалоПериода);

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыпускПродукции.Организация КАК Ссылка
		|ПОМЕСТИТЬ ВТОрганизацииСДвижениями
		|ИЗ
		|	РегистрНакопления.ВыпускПродукции.Обороты(&НачалоПериода, &КонецПериода, , Организация В (&МассивОрганизаций)) КАК ВыпускПродукции
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизацииСДвижениями КАК ОрганизацииСДвижениями
		|		ПО Т.Ссылка = ОрганизацииСДвижениями.Ссылка
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУчетнаяПолитикаФинансовогоУчета КАК УчетныеПолитикиОрганизаций
		|		ПО Т.Ссылка = УчетныеПолитикиОрганизаций.Организация
		|ГДЕ
		|	УчетныеПолитикиОрганизаций.МетодОценкиСтоимостиТоваров <> ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);

	УстановитьПривилегированныйРежим(Истина);
	МассивИсключенныхОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат МассивИсключенныхОрганизаций;

КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область ПроцедурыВызываемыеИзОбменов

// При получении из периферийного узла данных, требующих перерасчета себестоимости, добавляет запись в регистр ЗаданияКРасчетуСебестоимости.
//
// Параметры:
//	ПолученныеДанные - Произвольный - это параметр ЭлементДанных одноименного события плана обмена.
//
// Возвращаемое значение:
//	Булево - признак того, что ПолученныеДанные - это данные, относящиеся к механизму расчета себестоимости.
//
Функция СоздатьЗаданиеКРасчетуСебестоимостиПриОбменеДанными(ПолученныеДанные) Экспорт

	Попытка
		МетаданныеПолученныхДанных = ПолученныеДанные.Метаданные();
	Исключение
		Возврат Ложь; // у этого объекта нет метода для получения его метаданных - объект не нужно обрабатывать
	КонецПопытки;

	Если НЕ Метаданные.РегистрыНакопления.Содержит(МетаданныеПолученныхДанных) Тогда
		Возврат Ложь;
	КонецЕсли;

	// Получим описание входящих данных механизмов расчета
	ВходящиеДанные = Новый Соответствие;
	РасчетСебестоимостиКорректировкаСтоимости.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);
	РасчетСебестоимости.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);

	Если ВходящиеДанные.Получить(МетаданныеПолученныхДанных) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Только изменение регистра накопления, являющегося исходными данными для расчета,
	// приводит к необходимости перерасчета партий и себестоимости.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Если МетаданныеПолученныхДанных.Измерения.Найти("Организация") <> Неопределено Тогда
		ИмяПоляОрганизации = "Организация";
		ИмяКонтейнераОрганизации = ""; // организация хранится в реквизите набора
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("ОрганизацияВладелец") <> Неопределено Тогда
		ИмяПоляОрганизации = "ОрганизацияВладелец";
		ИмяКонтейнераОрганизации = ""; // организация хранится в реквизите набора
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("ВидЗапасов") <> Неопределено Тогда
		ИмяПоляОрганизации = "ВидЗапасов";
		ИмяКонтейнераОрганизации = "Справочник.ВидыЗапасов"; // организация хранится "вне набора"
		ИмяПоляСвязиВКонтейнере = "Ссылка";
		ИмяПоляОрганизацииВКонтейнере = "Организация";
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("АналитикаУчетаПоПартнерам") <> Неопределено Тогда
		ИмяПоляОрганизации = "АналитикаУчетаПоПартнерам";
		ИмяКонтейнераОрганизации = "РегистрСведений.АналитикаУчетаПоПартнерам"; // организация хранится "вне набора"
		ИмяПоляСвязиВКонтейнере = "КлючАналитики";
		ИмяПоляОрганизацииВКонтейнере = "Организация";
	Иначе
		Возврат Ложь; // невозможно определить организацию из данных регистра
	КонецЕсли;

	ТаблицаНабора = ПолученныеДанные.Выгрузить(, "Период," + ИмяПоляОрганизации); // ТаблицаЗначений
	ТаблицаНабора.Свернуть("Период," + ИмяПоляОрганизации);

	Запрос.УстановитьПараметр("Т", ТаблицаНабора);
	Запрос.УстановитьПараметр("Ссылка", ПолученныеДанные.Отбор.Регистратор.Значение);

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период,
		|	Т.%ИмяПоляОрганизации          КАК Организация
		|ПОМЕСТИТЬ ВТПолученныеДанные
		|ИЗ
		|	&Т КАК Т
		|";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляОрганизации", ИмяПоляОрганизации);
	Запрос.Выполнить();

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Период,
		|	Т.Организация
		|ПОМЕСТИТЬ ВТПериоды
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Т.Период 	  КАК Период,
		|		Т.Организация КАК Организация
		|	ИЗ
		|		ВТПолученныеДанные КАК Т
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период,
		|		Т.%ИмяПоляОрганизации          КАК Организация
		|	ИЗ
		|		РегистрНакопления.%ИмяПолученныхДанных КАК Т
		|	ГДЕ
		|		Т.Регистратор = &Ссылка
		|	) КАК Т
		|";

	Если ЗначениеЗаполнено(ИмяКонтейнераОрганизации) Тогда

	// Организация хранится не в поле объекта, а в каком-то другом месте - с ним надо сделать соединение.
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Период КАК Период,
			|	Контейнер.%ИмяПоляОрганизацииВКонтейнере КАК Организация
			|ПОМЕСТИТЬ ВТПериоды
			|ИЗ
			|(" + СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТПериоды", "") + ") КАК Т
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ %ИмяКонтейнераОрганизации КАК Контейнер
			|ПО Т.Организация = Контейнер.%ИмяПоляСвязиВКонтейнере
			|";

	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|" + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Период 	  КАК Месяц,
		|	Т.Организация КАК Организация,
		|	&Ссылка 	  КАК Документ
		|ИЗ
		|	ВТПериоды КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК ЗаданияКРасчетуСебестоимости
		|			ПО Т.Период = НАЧАЛОПЕРИОДА(ЗаданияКРасчетуСебестоимости.Месяц, МЕСЯЦ)
		|			 И Т.Организация = ЗаданияКРасчетуСебестоимости.Организация
		|			 И ЗаданияКРасчетуСебестоимости.Документ = &Ссылка
		|ГДЕ
		|	ЗаданияКРасчетуСебестоимости.НомерЗадания ЕСТЬ NULL
		|   И Т.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПолученныхДанных", МетаданныеПолученныхДанных.Имя);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяКонтейнераОрганизации", ИмяКонтейнераОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляСвязиВКонтейнере", ИмяПоляСвязиВКонтейнере);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляОрганизацииВКонтейнере", ИмяПоляОрганизацииВКонтейнере);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляОрганизации", ИмяПоляОрганизации);

	РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписиРегистраПоДаннымВыборки(Запрос.Выполнить().Выбрать());

	Возврат Истина; // данные обработаны успешно
КонецФункции

#КонецОбласти

#Область ПроцедурыЭтапа0_ПодготовкаКРасчету

// Заполняет вид ценности в ключах аналитики учета партий и создает временную таблицу ВТАналитикиПартийСВидомЦенности.
//
Процедура СформироватьАналитикиПартийСВидомЦенности(ПараметрыРасчета,
		ИмяИсходнойТаблицы = "ВТОстаткиПартийПредварительная") Экспорт

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.АналитикаУчетаПартий,
		|	ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаФинансовогоУчета,
		|	Ключи.Поставщик,
		|	Ключи.Контрагент,
        |	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначение,
		|	Ключи.СтавкаНДС,
		|	Т.ВидЦенности,
		|	0 КАК КодСтроки
		|ПОМЕСТИТЬ ВТРеквизитыНовыхКлючейАналитикиУчетаПартий
		|ИЗ
		|	ВТОстаткиПартийПредварительная КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК Ключи
		|		ПО Т.АналитикаУчетаПартий = Ключи.Ссылка
		|ГДЕ
		|	Ключи.ВидЦенности <> Т.ВидЦенности
		|	ИЛИ Ключи.ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
        |	ИЛИ Ключи.НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&НачалоПериода КАК Дата,
		|	Т.ГруппаФинансовогоУчета,
		|	Т.Поставщик,
		|	Т.Контрагент,
        |	Т.НалоговоеНазначение,
		|	Т.СтавкаНДС,
		|	Т.ВидЦенности,
		|	Т.КодСтроки
		|ИЗ
		|	ВТРеквизитыНовыхКлючейАналитикиУчетаПартий КАК Т
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК АналитикаПартий
		|		ПО Т.ГруппаФинансовогоУчета = АналитикаПартий.ГруппаФинансовогоУчета
		|		 И Т.Поставщик 				= АналитикаПартий.Поставщик
		|		 И Т.Контрагент 			= АналитикаПартий.Контрагент
        |		 И Т.НалоговоеНазначение 	= АналитикаПартий.НалоговоеНазначение
		|		 И Т.СтавкаНДС 				= АналитикаПартий.СтавкаНДС
		|		 И Т.ВидЦенности 			= АналитикаПартий.ВидЦенности
		|		 И Т.КодСтроки 				= АналитикаПартий.КодСтроки
		|ГДЕ
		|	ЕСТЬNULL(АналитикаПартий.КлючАналитики, ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
		|";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОстаткиПартийПредварительная", ИмяИсходнойТаблицы);

	Выборка = Запрос.Выполнить().Выбрать(); // получим аналитики учета партий с некорректным видом ценности
	Пока Выборка.Следующий() Цикл

	// Вид ценности в ключе аналитики, по которому есть остатки "старых" партий (из партионных регистров),
	// по всей видимости будет не заполнен.
	// В то же время, при формировании остатков "новых" партий (в регистре себестоимости),
	// мы знаем к какому именно виду ценности относятся эти остатки.
	// Поэтому, если вид ценности в ключе аналитики "старых" остатков не совпадает с видом ценности "новых" остатков,
	// то ключ аналитики "новых" остатков нельзя брать из "старых" остатков - его надо заменить.
    // Аналогичная ситуация и с реквизитами "ГруппаФинансовогоУчета" и "НалоговоеНазначение" - они должны быть пустыми,
	// но в "старых" ключах они скорее всего будут заполнены.
	// При этом, подходящий ключ для "новых" остатков уже может существовать в ИБ:
	// - до выполнения этого кода (при закрытии месяца) в ИБ добавлялись/изменялись документы
	// - при проведении этих документов формировались ключи аналитики с заполненным видом ценности
	// - эти ключи могут оказаться подходящими для "новых" остатков
	// Создадим только ключи, отсутствующие в ИБ на текущий момент.
		НовыйКлючАналитики = Справочники.КлючиАналитикиУчетаПартий.ПолучитьКлючАналитики(Выборка, Ложь);

	КонецЦикла;

	// Теперь в регистре (и в справочнике) ключей есть все необходимые ключи для "новых" остатков.
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.АналитикаУчетаПартий,
		|	Т.ВидЦенности,
		|	АналитикаПартий.КлючАналитики КАК АналитикаУчетаПартийСВидомЦенности
		|ПОМЕСТИТЬ ВТАналитикиПартийСВидомЦенности
		|ИЗ
		|	ВТРеквизитыНовыхКлючейАналитикиУчетаПартий КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК АналитикаПартий
		|		ПО Т.ГруппаФинансовогоУчета = АналитикаПартий.ГруппаФинансовогоУчета
		|		 И Т.Поставщик 				= АналитикаПартий.Поставщик
		|		 И Т.Контрагент 			= АналитикаПартий.Контрагент
        |		 И Т.НалоговоеНазначение 	= АналитикаПартий.НалоговоеНазначение
		|		 И Т.СтавкаНДС 				= АналитикаПартий.СтавкаНДС
		|		 И Т.ВидЦенности 			= АналитикаПартий.ВидЦенности
		|		 И Т.КодСтроки 				= АналитикаПартий.КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРеквизитыНовыхКлючейАналитикиУчетаПартий
		|";

	Запрос.Выполнить(); // формируем ВТАналитикиПартийСВидомЦенности
КонецПроцедуры

// Заполняет вид ценности в ключах аналитики учета партий и создает временную таблицу ВТАналитикиПартийСВидомЦенности.
// Корректирует реквизиты в новых ключах аналитики учета партий и создает временную таблицу ВТАналитикиПартийКорректированные
//
Процедура СформироватьАналитикиПартийКорректированные(ПараметрыРасчета,
		ИмяИсходнойТаблицы = "ВТОстаткиПартийПредварительная") Экспорт

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.АналитикаУчетаПартий,
		|	ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаФинансовогоУчета,
		|	Ключи.Поставщик,
		|	Ключи.Контрагент,
        |	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначение,
		|	Ключи.СтавкаНДС,
		|	0 КАК КодСтроки
		|ПОМЕСТИТЬ ВТРеквизитыНовыхКлючейАналитикиУчетаПартий
		|ИЗ
		|	ВТОстаткиПартийПредварительная КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК Ключи
		|		ПО Т.АналитикаУчетаПартий = Ключи.Ссылка
		|ГДЕ
        |	Ключи.НалоговоеНазначение <> Т.НалоговоеНазначение
	    |	ИЛИ Ключи.ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&НачалоПериода КАК Дата,
		|	Т.ГруппаФинансовогоУчета,
		|	Т.Поставщик,
		|	Т.Контрагент,
        |	Т.НалоговоеНазначение,
		|	Т.СтавкаНДС,
		|	Т.КодСтроки
		|ИЗ
		|	ВТРеквизитыНовыхКлючейАналитикиУчетаПартий КАК Т
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК АналитикаПартий
		|		ПО Т.ГруппаФинансовогоУчета = АналитикаПартий.ГруппаФинансовогоУчета
		|		 И Т.Поставщик 				= АналитикаПартий.Поставщик
		|		 И Т.Контрагент 			= АналитикаПартий.Контрагент
        |		 И Т.НалоговоеНазначение 	= АналитикаПартий.НалоговоеНазначение
		|		 И Т.СтавкаНДС 				= АналитикаПартий.СтавкаНДС
		|		 И Т.КодСтроки 				= АналитикаПартий.КодСтроки
		|ГДЕ
		|	ЕСТЬNULL(АналитикаПартий.КлючАналитики, ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
		|";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОстаткиПартийПредварительная", ИмяИсходнойТаблицы);

    Выборка = Запрос.Выполнить().Выбрать(); // получим аналитики учета партий с некорректными реквизитами
	Пока Выборка.Следующий() Цикл

    // Реквизиты "ГруппаФинансовогоУчета" и "НалоговоеНазначение" в новых ключах аналитики должны быть пустыми,
	// но в "старых" ключах они скорее всего будут заполнены.
	// При этом, подходящий ключ для "новых" остатков уже может существовать в ИБ:
	// - до выполнения этого кода (при закрытии месяца) в ИБ добавлялись/изменялись документы
	// - при проведении этих документов формировались ключи аналитики с заполненным видом ценности
	// - эти ключи могут оказаться подходящими для "новых" остатков
	// Создадим только ключи, отсутствующие в ИБ на текущий момент.
		НовыйКлючАналитики = Справочники.КлючиАналитикиУчетаПартий.ПолучитьКлючАналитики(Выборка, Ложь);

	КонецЦикла;

	// Теперь в регистре (и в справочнике) ключей есть все необходимые ключи для "новых" остатков.
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.АналитикаУчетаПартий,
        |	АналитикаПартий.КлючАналитики КАК АналитикаУчетаПартийКорректированные
        |ПОМЕСТИТЬ ВТАналитикиПартийКорректированные
		|ИЗ
		|	ВТРеквизитыНовыхКлючейАналитикиУчетаПартий КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК АналитикаПартий
		|		ПО Т.ГруппаФинансовогоУчета = АналитикаПартий.ГруппаФинансовогоУчета
		|		 И Т.Поставщик 				= АналитикаПартий.Поставщик
		|		 И Т.Контрагент 			= АналитикаПартий.Контрагент
        |		 И Т.НалоговоеНазначение 	= АналитикаПартий.НалоговоеНазначение
		|		 И Т.СтавкаНДС 				= АналитикаПартий.СтавкаНДС
		|		 И Т.КодСтроки 				= АналитикаПартий.КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРеквизитыНовыхКлючейАналитикиУчетаПартий
		|";

    Запрос.Выполнить(); // формируем ВТАналитикиПартийКорректированные
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЭтапов_Контекстные

// Используется для всех вызовов заполнения расчетной партии.
//
Процедура ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия,
		Расход, Приход) Экспорт

	ПартияЗаполнена = Ложь;
	РасчетСебестоимостиЗаполнениеПартий.ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена);
	РасчетСебестоимостиПостатейныеЗатраты.ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена);
	//++ НЕ УТ
	РасчетСебестоимостиМатериальныеЗатраты.ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена);
	РасчетСебестоимостиТрудозатраты.ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена);
	//-- НЕ УТ
	РасчетСебестоимостиЛокализация.ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена);

	Если НЕ ПартияЗаполнена Тогда

		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для контекста %1 не предусмотрено заполнение полей расчетной партии';uk='Для контексту %1 не передбачено заповнення полів розрахункової партії'",ОбщегоНазначения.КодОсновногоЯзыка()), Контекст);

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий, ТекстДляПротокола);

		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаспределениеПартийПоЦепочкам

#Область ИнициализацияИЗавершение

// Инициализирует данные для механизма распределения партий.
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
// 	ТаблицаДляРаспределенияПартий - ТаблицаЗначений -
// 	ОписаниеЦепочек - Соответствие -
// 	ОписаниеДвижений - Структура -
// 	НезаписываемыеДанные - Структура -
// Возвращаемое значение:
// 	Структура - Описание:
// * ЕстьПереполнениеСтека - Булево -
// * ПараметрыНумерации - Структура -
// * НезаписываемыеДанные - Структура -
// * ОписаниеДвижений - Структура -
// * ОписаниеЦепочек - Соответствие -
// * РасчетныеПартии - ТаблицаЗначений -
// * ВсеРасчетныеПартии - ТаблицаЗначений -
// * ДополнительныеСвойства - Структура -
// * КоличествоПорцийДанных - Число -
// * ИменаТаблицПорций - Строка -
// * ВыгружатьДанные - Булево -
// * ВыгрузкаДанныхРасчета - Структура -
// * СтатистикаРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьЗамерРаспределенияПартий
//
Функция ИнициализироватьРаспределениеПартий(ПараметрыРасчета,
		ТаблицаДляРаспределенияПартий, ОписаниеЦепочек, ОписаниеДвижений,
		НезаписываемыеДанные) Экспорт

	РаспределениеПартий = Новый Структура;

	РаспределениеПартий.Вставить("РасчетныеПартии", ТаблицаДляРаспределенияПартий);
	РаспределениеПартий.Вставить("ОписаниеЦепочек", ОписаниеЦепочек);
	РаспределениеПартий.Вставить("ОписаниеДвижений", ОписаниеДвижений);
	РаспределениеПартий.Вставить("ПараметрыНумерации", Неопределено);
	РаспределениеПартий.Вставить("НезаписываемыеДанные", НезаписываемыеДанные);
	РаспределениеПартий.Вставить("ЕстьПереполнениеСтека", Ложь);
	РаспределениеПартий.Вставить("ДополнительныеСвойства", Новый Структура);
	РаспределениеПартий.Вставить("КоличествоПорцийДанных", 0); // при расчете этапа каждая порция сформированных данных сначала складывается в отдельные ВТ, а в конце этапа все они объединяются
	РаспределениеПартий.Вставить("ИменаТаблицПорций", ""); // имена всех ВТ порций вида <Имя таблицы>_<НомерПорции от 1 до КоличествоПорцийДанных>

	#Область ВыгрузкаПромежуточныхДанных

	РаспределениеПартий.Вставить("ВыгружатьДанные", Ложь);

	Если НРег(ПараметрыРасчета.ПредставлениеЭтапа) = НРег(ПараметрыРасчета.ВыгрузкаДанныхРасчета.ЭтапПартионногоУчета22ДляВыгрузкиВФайлы) Тогда

		ИмяКаталога = СокрЛП(ПараметрыРасчета.ВыгрузкаДанныхРасчета.КаталогДляСохраненияДанныхРасчетаПартий);

		Если ЗначениеЗаполнено(ИмяКаталога) Тогда

			Попытка
				ТекстОшибки = "";
				СоздатьКаталог(ИмяКаталога);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;

			ИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
			Каталог = Новый Файл(ИмяКаталога);

			Если НЕ Каталог.Существует() ИЛИ НЕ Каталог.ЭтоКаталог() Тогда

				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден каталог для сохранения данных расчета партий: ""%1""
|%2'
|;uk='Не вдалося знайти каталог для збереження даних розрахунку партій: ""%1"" 
|%2'",ОбщегоНазначения.КодОсновногоЯзыка()), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(ИмяКаталога), ТекстОшибки);

				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения, ТекстДляПротокола);
			Иначе

				Попытка
					УдалитьФайлы(ИмяКаталога, "*.mxl");
				Исключение
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				КонецПопытки;

				РаспределениеПартий.Вставить("ВыгружатьДанные", Истина);
				РаспределениеПартий.Вставить("ВыгрузкаДанныхРасчета", Новый Структура);

				РаспределениеПартий.ВыгрузкаДанныхРасчета.Вставить("ИмяКаталога", ИмяКаталога);

				// Описание файлов выгрузки таблиц.
				Для Каждого КлючИЗначение Из Новый Структура("Данные, Источники, Приемники, РасчетныеПартии") Цикл

					ОписаниеФайлаВыгрузки = ИнициализироватьОписаниеФайлаВыгрузки();
					ОписаниеФайлаВыгрузки.ИмяФайла = ИмяКаталога + КлючИЗначение.Ключ
						+ ".mxl";

					РаспределениеПартий.ВыгрузкаДанныхРасчета.Вставить(КлючИЗначение.Ключ, ОписаниеФайлаВыгрузки);

				КонецЦикла;

				// Таблица РасчетныеПартии уже существует - можно сразу выгрузить описание шапки таблицы.
				ВыгрузитьШапкуТаблицыПромежуточныхДанныхРасчета(ПараметрыРасчета, "РасчетныеПартии", РаспределениеПартий.РасчетныеПартии);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	#КонецОбласти

	ПараметрыРасчета.Вставить("РаспределениеПартий", РаспределениеПартий);

	ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "ИнициализироватьРаспределениеПартий");

	Возврат РаспределениеПартий;

КонецФункции

// Возвращает описание файла выгрузки промежуточных результатов расчета.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * БылиОшибки - Булево -
// * НомерСтроки - Число -
// * Колонки - Массив -
// * ТабличныйДокумент - ТабличныйДокумент -
// * ИмяФайла - Строка -
Функция ИнициализироватьОписаниеФайлаВыгрузки() Экспорт

	ОписаниеФайлаВыгрузки = Новый Структура;
	ОписаниеФайлаВыгрузки.Вставить("ИмяФайла", "");
	ОписаниеФайлаВыгрузки.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
	ОписаниеФайлаВыгрузки.Вставить("Колонки", Новый Массив);
	ОписаниеФайлаВыгрузки.Вставить("НомерСтроки", 0);
	ОписаниеФайлаВыгрузки.Вставить("БылиОшибки", Ложь);

	Возврат ОписаниеФайлаВыгрузки;

КонецФункции

// Возвращает описание цепочек для указанного типа записи.
// 
// Параметры:
// 	ОписаниеЦепочек - Соответствие -
// 	ТипЗаписи - ПеречислениеСсылка.ТипыЗаписейПартий - 
// Возвращаемое значение:
// 	Структура - Описание:
// * ПоляСвязи - Массив -
// * ТипыПриемников - Соответствие -
// * ТипыИсточников - Соответствие -
//
Функция ОписаниеЦепочки(ОписаниеЦепочек, ТипЗаписи)

	Если ОписаниеЦепочек[ТипЗаписи] = Неопределено Тогда
		ОписаниеЦепочек.Вставить(ТипЗаписи, 
			Новый Структура("ПоляСвязи, ТипыПриемников, ТипыИсточников, ДополнительныеСвязи", 
						Новый Массив, Новый Соответствие, Новый Соответствие, Новый Соответствие
			)
		);
	КонецЕсли;

	Возврат ОписаниеЦепочек[ТипЗаписи];

КонецФункции

Процедура ДобавитьОписаниеПриемника(ОписаниеЦепочек, Приемник, ПоляПриемника,
		Источники = Неопределено, ПоляИсточника = Неопределено) Экспорт

	Для Каждого ОписаниеПоля Из Новый Структура(ПоляПриемника) Цикл
		ОписаниеЦепочки(ОписаниеЦепочек, Приемник).ПоляСвязи.Добавить(ОписаниеПоля.Ключ);
	КонецЦикла;

	Если ЗначениеЗаполнено(Источники) Тогда

		Для Каждого ОписаниеИсточника Из Источники Цикл

			Если ЗначениеЗаполнено(ОписаниеИсточника.Значение) Тогда
				Поля = ОписаниеИсточника.Значение;
			ИначеЕсли ЗначениеЗаполнено(ПоляИсточника) Тогда
				Поля = ПоляИсточника;
			Иначе
				Поля = ПоляПриемника;
			КонецЕсли;

			ДобавитьОписаниеИсточника(ОписаниеЦепочек, Приемник, ОписаниеИсточника.Ключ, Поля);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьОписаниеИсточника(ОписаниеЦепочек, Приемник, Источник,
		ПоляИсточника) Экспорт

	ПоляСвязи = Новый Массив;
	Для Каждого ОписаниеПоля Из Новый Структура(ПоляИсточника) Цикл
		ПоляСвязи.Добавить(ОписаниеПоля.Ключ);
	КонецЦикла;

	ПоляПриемника = ОписаниеЦепочки(ОписаниеЦепочек, Приемник).ПоляСвязи;
	Если ПоляПриемника.Количество() <> ПоляСвязи.Количество() Тогда

		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Различное количество полей связи источника ""%1"" и приемника ""%2"".';uk='Різну кількість полів зв''язку джерела ""%1"" і приймача ""%2"".'",ОбщегоНазначения.КодОсновногоЯзыка()), Источник, Приемник);

		ТекстДляПротокола = ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

		ВызватьИсключение ТекстДляПротокола;

	КонецЕсли;

	ОписаниеЦепочки(ОписаниеЦепочек, Источник).ТипыПриемников.Вставить(Приемник, ПоляСвязи);
	ОписаниеЦепочки(ОписаниеЦепочек, Приемник).ТипыИсточников.Вставить(Источник, ПоляСвязи);

КонецПроцедуры

// Используется в случае, когда тип записи не имеет источников.
// Т.е. такой тип записи получается не распределением другого типа записей,
// а просто формируется по данным выборки (аналог типа записи "Дополнение" в партионном учете версии 2.1).
//
Процедура ДобавитьОписаниеДополнения(ОписаниеЦепочек, Приемник) Экспорт

	ДобавитьОписаниеПриемника(ОписаниеЦепочек, Приемник, "Регистратор");
	ДобавитьОписаниеИсточника(ОписаниеЦепочек, Приемник, "", "Регистратор"); // фиктивный источник
КонецПроцедуры

Процедура ДобавитьДополнительнуюСвязь(ОписаниеЦепочек, Приемник, ПоляПриемника, Источник, ПоляИсточника) Экспорт    
	
	Если ОписаниеЦепочки(ОписаниеЦепочек, Приемник).ДополнительныеСвязи[Источник] = Неопределено Тогда
		ОписаниеЦепочки(ОписаниеЦепочек, Приемник).ДополнительныеСвязи.Вставить(Источник, Новый Структура);
	КонецЕсли;                            
	МассивПолейПриемников = СтрРазделить(ПоляПриемника, ",");
	МассивПолейИсточников = СтрРазделить(ПоляИсточника, ",");
	Для НомерПоля = 0 По МассивПолейПриемников.Количество() - 1 Цикл
		ОписаниеЦепочки(ОписаниеЦепочек, Приемник).ДополнительныеСвязи[Источник].Вставить(
			СокрЛП(МассивПолейПриемников[НомерПоля]), 
			СокрЛП(МассивПолейИсточников[НомерПоля]) 
		);
	КонецЦикла;
	
КонецПроцедуры	

Функция ОписаниеДвижений() Экспорт

	Результат = Новый Структура;

	Результат.Вставить("Контекст", "");
	Результат.Вставить("ПроцедураЗаполнения", "");
	Результат.Вставить("ИмяРегистра", "");
	Результат.Вставить("ПоляРасчета", "");
	Результат.Вставить("КлючиСравнения", "");
	Результат.Вставить("Показатели", "");
	Результат.Вставить("БазисПрихода", "");
	Результат.Вставить("БазисРасхода", "");
	Результат.Вставить("КлючРасхода", "");
	Результат.Вставить("ПолеПорядка", "");
	Результат.Вставить("ПоляСортировки", "");
	Результат.Вставить("СортировкаПоУсловию", ЛОЖЬ);
	Результат.Вставить("БазисПриходаРегл", "");
	Результат.Вставить("БазисРасходаРегл", "");

	Результат.Вставить("ИмяВременнойТаблицы", "");
	Результат.Вставить("ПоляИндексирования", "");
	Результат.Вставить("РаспределениеНеТребуется", ЛОЖЬ);

	Результат.Вставить("ВременныеТаблицыТекущегоЭтапа", "");
	Результат.Вставить("ВременныеТаблицыДляСледующихЭтапов", "");

	Возврат Результат;

КонецФункции

Функция ОписаниеНезаписываемыхДанных(ЗаписыватьНезавершенные,
		НезаписываемыеТипыЗаписей = Неопределено,
		НезаписываемыеРазделы = Неопределено,
		НезаписываемыеРегистраторы = Неопределено) Экспорт

	НезаписываемыеДанные = Новый Структура;
	НезаписываемыеДанные.Вставить("ЗаписыватьНезавершенные", ЗаписыватьНезавершенные);
	НезаписываемыеДанные.Вставить("НезаписываемыеТипыЗаписей", ?(НезаписываемыеТипыЗаписей = Неопределено, Новый Соответствие, НезаписываемыеТипыЗаписей));
	НезаписываемыеДанные.Вставить("НезаписываемыеРегистраторы", ?(НезаписываемыеРегистраторы = Неопределено, Новый Соответствие, НезаписываемыеРегистраторы));
	НезаписываемыеДанные.Вставить("НезаписываемыеРазделы", ?(НезаписываемыеРазделы = Неопределено, Новый Соответствие, НезаписываемыеРазделы));

	// Движения документа корректировки регистров не изменяем
	НезаписываемыеДанные.НезаписываемыеРегистраторы.Вставить(Метаданные.Документы.КорректировкаРегистров.Имя, Истина);

	Возврат НезаписываемыеДанные;

КонецФункции

Функция ТаблицаДляРаспределенияПартий(ПараметрыРасчета, ТекстОписаниеДанных,
		ДобавлятьКолонкуНумерации = Истина) Экспорт

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.Текст = ТекстОписаниеДанных;

	Таблица = Запрос.Выполнить().Выгрузить().СкопироватьКолонки(); // создадим пустую таблицу

	// Уберем тип Null из описания типов колонок.
	Для Каждого ТекущаяКолонка Из Таблица.СкопироватьКолонки().Колонки Цикл

		Если ТекущаяКолонка.ТипЗначения.СодержитТип(Тип("Null")) Тогда

			Таблица.Колонки.Удалить(ТекущаяКолонка.Имя); // удалим колонку
			Таблица.Колонки.Добавить(ТекущаяКолонка.Имя, Новый ОписаниеТипов(ТекущаяКолонка.ТипЗначения, , "Null"), ТекущаяКолонка.Заголовок, ТекущаяКолонка.Ширина); // добавим аналогичную без типа значения Null
		КонецЕсли;

	КонецЦикла;

	Если ДобавлятьКолонкуНумерации Тогда
		ДобавитьКолонкуДляНумерацииСтрок(Таблица);
	КонецЕсли;

	Возврат Таблица;

КонецФункции

Процедура ЗавершитьРаспределениеПартий(ПараметрыРасчета,
		ОкончаниеЭтапа = Истина) Экспорт

	ИменаВременныхТаблиц = "Данные, Источники, Приемники, ОписаниеПодграфов, СтатистикаСвязейУзлов, "
		+ ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений.ВременныеТаблицыТекущегоЭтапа;

	Если ОкончаниеЭтапа Тогда
		КэшироватьСформированныеДвижения(ПараметрыРасчета);
	Иначе
		КэшироватьРаспределенныеПартии(ПараметрыРасчета);
	КонецЕсли;

	Если НЕ ВременнаяТаблицаСуществует(ПараметрыРасчета, "Источники") Тогда

	// Это этап трансляции партий
		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, РазмерВременнойТаблицы(ПараметрыРасчета, "Данные"));

	КонецЕсли;

	УничтожитьВременныеТаблицы(ПараметрыРасчета, ИменаВременныхТаблиц);

	ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "ЗавершитьРаспределениеПартий");

КонецПроцедуры


// Изменяет текст запроса описания данных - данные будут выбираться не во временную таблицу, а в результат запроса.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
// 
// Возвращаемое значение:
//  Строка - измененный текст запроса описания данных
//
Функция ПодготовитьЗапросОписанияДанных(ТекстЗапроса) Экспорт
	Возврат ИзменитьПриемникЗапросаОписанияДанных(ТекстЗапроса);
КонецФункции

// Изменяет таблицу приемник запроса описания данных.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  ИмяПриемника - Строка - Имя таблицы приемника
// 
// Возвращаемое значение:
//  Строка - измененный текст запроса описания данных
//
Функция ИзменитьПриемникЗапросаОписанияДанных(ТекстЗапроса, ИмяПриемника = "") Экспорт
	
	ИмяПустогоПриемника = ИмяПустогоПриемникаЗапросаОписанияДанных();
	
	Если СтрНайти(ТекстЗапроса, ИмяПустогоПриемника) > 0 Тогда
		ИмяИсточника = ИмяПустогоПриемника;
	Иначе
		ИмяИсточника = "ПОМЕСТИТЬ Данные";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяПриемника) Тогда
		ИмяПриемника = ИмяПустогоПриемника;
	Иначе
		ИмяПриемника = "ПОМЕСТИТЬ " + ИмяПриемника;
	КонецЕсли;
	
	Возврат СтрЗаменить(ТекстЗапроса, ИмяИсточника, ИмяПриемника);
	
КонецФункции

// Возвращает строку, подставляемую вместо имени таблицы для помещения результата запроса. 
// 
// Возвращаемое значение:
//  Строка -
//
Функция ИмяПустогоПриемникаЗапросаОписанияДанных() Экспорт
	Возврат "//" + "ВоВременнуюТаблицу";
КонецФункции


#КонецОбласти

#Область ПостроениеЦепочек

// Строит цепочки движений.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//  ОптимизацияДанных - Булево -
//
Процедура ПостроитьЦепочкиДвижений(ПараметрыРасчета,
		ОптимизацияДанных = Ложь) Экспорт

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "Источники", ?(ОптимизацияДанных, НСтр("ru='После оптимизации';uk='Після оптимізації'",ОбщегоНазначения.КодОсновногоЯзыка()), ""));

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Если НЕ ОптимизацияДанных Тогда

	// Проверим, что типы записей в описании цепочек соответствуют выбранным данным.
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.ТипЗаписи 	 КАК ТипЗаписи,
			|	Т.ЗапросИсточник КАК ЗапросИсточник,
			|	Т.Организация    КАК Организация,
			|	Т.Регистратор    КАК Регистратор
			|ИЗ
			|	Данные КАК Т
			|ГДЕ
			|	НЕ Т.ТипЗаписи В (&ДопустимыеТипыЗаписей)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТипЗаписи,
			|	ЗапросИсточник,
			|	Организация,
			|	Регистратор";

		ДопустимыеТипыЗаписей = ИспользуемыеТипыЗаписейВЦепочках(ПараметрыРасчета.РаспределениеПартий.ОписаниеЦепочек, , , Ложь);
		Запрос.УстановитьПараметр("ДопустимыеТипыЗаписей", ДопустимыеТипыЗаписей);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			ОписаниеПроблемы = НСтр("ru='В выбранных данных есть типы записей, отсутствующие в описании цепочек.';uk='В вибраних даних є типи записів, відсутні в описі ланцюжків.'",ОбщегоНазначения.КодОсновногоЯзыка());

			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий, РасчетСебестоимостиПротоколРасчета.СлужебныйСимвол_БезНумерации()
				+ ОписаниеПроблемы);

			Выборка = РезультатЗапроса.Выбрать();

			Пока Выборка.Следующий() Цикл

				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Тип записи: ""%1"", источник: ""%2"", организация ""%3"", регистратор: ""%4""';uk='Тип запису: ""%1"", джерело: ""%2"", організація ""%3"", реєстратор: ""%4""'",ОбщегоНазначения.КодОсновногоЯзыка()), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.ТипЗаписи), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.ЗапросИсточник), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.Организация), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.Регистратор));

				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий, ТекстДляПротокола);

				ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, Выборка.Организация, НСтр("ru='При формировании движений по партиям диагностированы ошибки';uk='При формуванні рухів по партіях діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеПроблемы
					+ Символы.ПС + ТекстДляПротокола, Выборка.Регистратор);

			КонецЦикла;

		КонецЕсли;

		// Проверим, что непересчитываемые типы записей не являются приемниками.
		ТипыЗаписейПриемников = ИспользуемыеТипыЗаписейВЦепочках(ПараметрыРасчета.РаспределениеПартий.ОписаниеЦепочек, , Ложь, Ложь);
		ЕстьНепересчитываемыеТипыЗаписейВПриемниках = Ложь;

		Для Каждого ТекущийТипЗаписи Из ТипыЗаписейПриемников Цикл

			Если РасчетСебестоимостиПовтИсп.ЭтоНепересчитываемыйТипЗаписи(ТекущийТипЗаписи) Тогда

				ТекстДляПротокола = НСтр("ru='В описании цепочек в качестве приемников не могут использоваться непересчитываемые типы записей';uk='В описі ланцюжків як приймачів не можуть використовуватися неперераховувані типи записів'",ОбщегоНазначения.КодОсновногоЯзыка());

				Если НЕ ЕстьНепересчитываемыеТипыЗаписейВПриемниках Тогда
					РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий, РасчетСебестоимостиПротоколРасчета.СлужебныйСимвол_БезНумерации()
						+ ТекстДляПротокола);
				КонецЕсли;

				ЕстьНепересчитываемыеТипыЗаписейВПриемниках = Истина;

				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий, РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(ТекущийТипЗаписи));

				ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, , НСтр("ru='При формировании движений по партиям диагностированы ошибки';uk='При формуванні рухів по партіях діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола
					+ ": "
					+ РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(ТекущийТипЗаписи));

			КонецЕсли;

		КонецЦикла;

	Иначе

		УничтожитьВременныеТаблицы(ПараметрыРасчета, "Источники, Приемники, СтатистикаСвязейУзлов");

	КонецЕсли;

	// Сформируем текст запроса для построения цепочек
	ШаблонЗапроса = "
		|ВЫБРАТЬ
		|	Приемники.К КАК Приемник,
		|	Источники.К КАК Источник
		|ПОМЕСТИТЬ %Результат
		|ИЗ
		|	Данные КАК Приемники
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Данные КАК Источники
		|		ПО %Условия
		|ГДЕ
		|	Приемники.К <> Источники.К
		|	И Приемники.ТипЗаписи = &ТипПриемника
		|	И Источники.ТипЗаписи = &ТипИсточника
		|	И НЕ Приемники.РасчетЗавершен
		|;
		|";

	ТекстЗапроса = "";
	ВременныеТаблицы = Новый Массив;
	НомерТаблицы = 0;

	Для Каждого Описание Из ПараметрыРасчета.РаспределениеПартий.ОписаниеЦепочек Цикл

		ПоляПриемника = Описание.Значение.ПоляСвязи;
        ДополнительныеСвязи = Описание.Значение.ДополнительныеСвязи;
		Если ПоляПриемника.Количество() = 0 И ДополнительныеСвязи.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого ОписаниеИсточника Из Описание.Значение.ТипыИсточников Цикл

			ПоляИсточника = ОписаниеИсточника.Значение;
			ДополнительныеПоляСвязи = ДополнительныеСвязи[ОписаниеИсточника.Ключ];
			Если ПоляИсточника.Количество() = 0 И (ДополнительныеСвязи = Неопределено ИЛИ ДополнительныеСвязи.Количество() = 0) Тогда
				Продолжить;
			КонецЕсли;

			НомерПоля = -1;
			Для Каждого ПолеПриемника Из ПоляПриемника Цикл
				НомерПоля = НомерПоля + 1;
				Если НомерПоля = 0 Тогда
					Условия = "Приемники." + ПолеПриемника + " = " + "Источники."
						+ ПоляИсточника[НомерПоля];
				Иначе
					Условия = Условия + Символы.ПС + " И " + "Приемники." + ПолеПриемника
						+ " = " + "Источники." + ПоляИсточника[НомерПоля];
				КонецЕсли;
			КонецЦикла;

			Если ДополнительныеПоляСвязи <> Неопределено Тогда
				Для Каждого ДопСвязь Из ДополнительныеПоляСвязи Цикл
					НомерПоля = НомерПоля + 1;
					Если НомерПоля = 0 Тогда
						Условия = "Приемники." + ДопСвязь.Ключ + " = " + "Источники."
							+ ДопСвязь.Значение;
					Иначе
						Условия = Условия + Символы.ПС + " И " + "Приемники." + ДопСвязь.Ключ
							+ " = " + "Источники." + ДопСвязь.Значение;
					КонецЕсли;
				КонецЦикла;   
			КонецЕсли;	
			
			НомерТаблицы = НомерТаблицы + 1;
			ИмяТаблицы = "ВТЦепочки" + Формат(НомерТаблицы, "ЧГ=");
			ВременныеТаблицы.Добавить(ИмяТаблицы);

			ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "%Результат", ИмяТаблицы);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условия", Условия);

			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ТипПриемника", Описание.Ключ);
			Запрос.УстановитьПараметр("ТипИсточника", ОписаниеИсточника.Ключ);
			Запрос.Выполнить();
			Если ПараметрыРасчета.РежимОтладки Тогда
				ВременнаяТаблицаРезультат = ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(ПараметрыРасчета.МенеджерВременныхТаблиц, ИмяТаблицы);
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	-1 КАК Приемник,
		|	-1 КАК Источник
		|ПОМЕСТИТЬ
		|	Цепочки
		|";

	ШаблонЗапроса = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ДД.Приемник,
		|	ДД.Источник
		|ИЗ
		|	%ИмяТаблицы КАК ДД
		|";

	Для Каждого ИмяТаблицы Из ВременныеТаблицы Цикл
		ТекстЗапроса = ТекстЗапроса
			+ СтрЗаменить(ШаблонЗапроса, "%ИмяТаблицы", ИмяТаблицы);
	КонецЦикла;

	Для Каждого ИмяТаблицы Из ВременныеТаблицы Цикл
		ТекстЗапроса = ТекстЗапроса + "; УНИЧТОЖИТЬ " + ИмяТаблицы;
	КонецЦикла;

	// Выполним подготовленный запрос.
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();

	// Разобьем временную таблицу Цепочки на таблицы источников и приемников для каждого узла.
	// Поля доп. упорядочивания для ФИФО (Период и Регистратор) пока не заполняются - будут заполнены при оптимизации цепочек.
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДД.Приемник КАК Ключ,
		|	ДД.Источник КАК Источник,
		|	0 			КАК Порядок
		|ПОМЕСТИТЬ Источники
		|ИЗ
		|	Цепочки КАК ДД
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДД.Источник КАК Ключ,
		|	ДД.Приемник КАК Приемник,
		|	0 			КАК Порядок
		|ПОМЕСТИТЬ Приемники
		|ИЗ
		|	Цепочки КАК ДД
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Цепочки
		|";

	Запрос.Выполнить();

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	Если ПараметрыРасчета.РежимОтладки Тогда
		Источники = ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(ПараметрыРасчета.МенеджерВременныхТаблиц, "Источники");
		Приемники = ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(ПараметрыРасчета.МенеджерВременныхТаблиц, "Приемники");
		Данные    = ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(ПараметрыРасчета.МенеджерВременныхТаблиц, "Данные");
	КонецЕсли;
	
	Если НЕ ОптимизацияДанных Тогда
		ОптимизироватьДанныеВЦепочках(ПараметрыРасчета);
		ОптимизироватьНумерациюВЦепочках(ПараметрыРасчета);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Ключ КАК Ключ,
	|	СУММА(Т.КоличествоИсточников) КАК КоличествоИсточников,
	|	СУММА(Т.КоличествоПриемников) КАК КоличествоПриемников,
	|	СУММА(Т.КоличествоИсточников + Т.КоличествоПриемников) КАК КоличествоСвязей
	|ПОМЕСТИТЬ СтатистикаСвязейУзлов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.К КАК Ключ,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(10,0)) КАК КоличествоИсточников,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(10,0)) КАК КоличествоПриемников
	|	ИЗ
	|		Данные КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ключ КАК Ключ,
	|		СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(10,0))),
	|		0
	|	ИЗ
	|		Источники КАК Т
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ключ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ключ,
	|		0,
	|		СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(10,0)))
	|	ИЗ
	|		Приемники КАК Т
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ключ) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ключ
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Ключ";
	
	Запрос.Выполнить();

	Если ПараметрыРасчета.РежимОтладки Тогда
		Источники = ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(ПараметрыРасчета.МенеджерВременныхТаблиц, "Источники");
		Приемники = ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(ПараметрыРасчета.МенеджерВременныхТаблиц, "Приемники");
		Данные    = ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(ПараметрыРасчета.МенеджерВременныхТаблиц, "Данные");
	КонецЕсли;
	
	Если НЕ ОптимизацияДанных Тогда
		ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "ПостроитьЦепочкиДвижений");
	КонецЕсли;
	
КонецПроцедуры

// Оптимизирует данные в цепочках.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//
Процедура ОптимизироватьДанныеВЦепочках(ПараметрыРасчета)

	Если ПараметрыРасчета.Отладка.НеВыполнятьОптимизациюДанных Тогда
		Возврат;
	КонецЕсли;

	РазмерТаблицыДанных = РазмерВременнойТаблицы(ПараметрыРасчета, "Данные");

	Если РазмерТаблицыДанных = 0 Тогда
		Возврат;
	КонецЕсли;

	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;

	Если НЕ ОписаниеДвижений.Свойство("УдалятьСтрокиБезИсточников") Тогда
		Возврат;
	КонецЕсли;

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "Данные", НСтр("ru='Оптимизация исходных данных';uk='Оптимізація вихідних даних'",ОбщегоНазначения.КодОсновногоЯзыка()));

	РазмерТаблицыДанные = РазмерВременнойТаблицы(ПараметрыРасчета, "Данные");
	РазмерТаблицыИсточники = РазмерВременнойТаблицы(ПараметрыРасчета, "Источники");

	СуществующиеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;

	// Выберем узлы с признаком РасчетЗавершен = Ложь, у которых нет источников.
	// Выполнять расчет для таких узлов не имеет смысла. Такие узлы надо удалить из таблицы Данные.
	Запрос.Текст = "ВЫБРАТЬ
		|	Т.К КАК К
		|ПОМЕСТИТЬ УдаляемыеУзлы_0
		|ИЗ
		|	Данные КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ Источники КАК Источники
		|		ПО Т.К = Источники.Ключ
		|ГДЕ
		|	НЕ Т.РасчетЗавершен
		|	И Источники.Ключ ЕСТЬ NULL";

	Запрос.Выполнить();

	КоличествоУдаляемыхУзлов = РазмерВременнойТаблицы(ПараметрыРасчета, "УдаляемыеУзлы_0");
	НомерИтерации = 0;

	Если КоличествоУдаляемыхУзлов > 0 Тогда

		ПродолжатьПоиск = Истина;

		Пока ПродолжатьПоиск Цикл

			НомерИтерации = НомерИтерации + 1;

			ИмяТекущейТаблицы = "УдаляемыеУзлы_" + Формат(НомерИтерации, "ЧН=0; ЧГ=");
			ИмяПредыдущейТаблицы = "УдаляемыеУзлы_" + Формат(НомерИтерации
				- 1, "ЧН=0; ЧГ=");

				// Дополним перечень удаляемых узлов такими узлами, у которых (по И)
			// - признак РасчетЗавершен = Ложь
			// - все источники узла присутствуют в перечне узлов к удалению
			Запрос.Текст = "ВЫБРАТЬ
				|	Т.Ключ КАК К
				|ПОМЕСТИТЬ ИмяТекущейТаблицы
				|ИЗ
				|	Источники КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ ИмяПредыдущейТаблицы КАК УдаляемыеУзлы
				|		ПО Т.Источник = УдаляемыеУзлы.К
				|		ЛЕВОЕ СОЕДИНЕНИЕ Данные КАК Данные
				|		ПО Т.Ключ = Данные.К
				|ГДЕ
				|	НЕ Данные.РасчетЗавершен
				|
				|СГРУППИРОВАТЬ ПО
				|	Т.Ключ
				|
				|ИМЕЮЩИЕ
				|	МИНИМУМ(ВЫБОР
				|			КОГДА УдаляемыеУзлы.К ЕСТЬ NULL
				|				ТОГДА ЛОЖЬ
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ) = ИСТИНА
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	Т.К
				|ИЗ
				|	ИмяПредыдущейТаблицы КАК Т
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ИмяПредыдущейТаблицы";

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТекущейТаблицы", ИмяТекущейТаблицы);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПредыдущейТаблицы", ИмяПредыдущейТаблицы);

			Запрос.Выполнить();

			// Итерацию поиска удаляемых узлов закончим тогда, когда на очередном шаге не будет найдено ни одного нового узла к удалению.
			НовоеКоличествоУдаляемыхУзлов = РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТекущейТаблицы);

			ПродолжатьПоиск = (НовоеКоличествоУдаляемыхУзлов > КоличествоУдаляемыхУзлов);

			КоличествоУдаляемыхУзлов = НовоеКоличествоУдаляемыхУзлов;

		КонецЦикла;

		// Поместим в таблицу НовыеДанные только те строки таблицы Данные, расчет которых даст результат.
		Запрос.Текст = "ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ НовыеДанные
			|ИЗ
			|	Данные КАК Т
			|	ЛЕВОЕ СОЕДИНЕНИЕ ИмяТекущейТаблицы КАК Отбор
			|	ПО Т.К = Отбор.К
			|ГДЕ
			|	Отбор.К ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Данные";

		КолонкиТаблицыДанных = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.Колонки;
		ИменаКолонокТаблицыДанные = "";

		Для Каждого ТекущаяКолонка Из КолонкиТаблицыДанных Цикл

			Если ТекущаяКолонка.Имя <> "К" Тогда
				ИменаКолонокТаблицыДанные = ИменаКолонокТаблицыДанные
					+ ?(ИменаКолонокТаблицыДанные = "", "", ",
					|	Т.") + ТекущаяКолонка.Имя;
			КонецЕсли;

		КонецЦикла;

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "*", ИменаКолонокТаблицыДанные);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТекущейТаблицы", ИмяТекущейТаблицы);

		Запрос.Выполнить();

		// Выполним нумерацию строк таблицы данных.
		ПараметрыНумерации = ПараметрыРасчета.РаспределениеПартий.ПараметрыНумерации;

		Если ЗначениеЗаполнено(ПараметрыНумерации) Тогда

			ЗаполнитьНомераСтрокВременнойТаблицы(ПараметрыРасчета, ПараметрыНумерации, "НовыеДанные", "Данные");

		КонецЕсли;

		// Заново построим цепочки для новых данных.
		ПостроитьЦепочкиДвижений(ПараметрыРасчета, Истина);

	КонецЕсли;

	// Поместим в протокол расчета статистику по оптимизации данных.
	НовыйРазмерТаблицыДанные = РазмерВременнойТаблицы(ПараметрыРасчета, "Данные");
	НовыйРазмерТаблицыИсточники = РазмерВременнойТаблицы(ПараметрыРасчета, "Источники");

	ОписаниеЭтапа = НСтр("ru='Выполнено итераций оптимизации данных - %1,
|	размер таблицы Данные (до/после) - %2 / %3; 
|	размер таблиц Источники и Приемники (до/после) - %4 / %5'
|;uk='Виконано ітерацій оптимізації даних - %1,  		
|  розмір таблиці Дані (до/після) - %2/%3; 
|  розмір таблиць Джерела і Приймачі (до/після) - %4/%5'",ОбщегоНазначения.КодОсновногоЯзыка());

	ОписаниеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеЭтапа, РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(НомерИтерации
		+ 1), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(РазмерТаблицыДанные), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(НовыйРазмерТаблицыДанные), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(РазмерТаблицыИсточники), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(НовыйРазмерТаблицыИсточники));

	РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, ОписаниеЭтапа);

	// Уничтожим ненужные временные таблицы.
	НовыеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета, СуществующиеВТ);
	УничтожитьВременныеТаблицы(ПараметрыРасчета, НовыеВТ);

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);

КонецПроцедуры

// Оптимизирует нумерацию в цепочках.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//
Процедура ОптимизироватьНумерациюВЦепочках(ПараметрыРасчета)

	РазмерТаблицыДанных = РазмерВременнойТаблицы(ПараметрыРасчета, "Данные");

	Если РазмерТаблицыДанных = 0 Тогда
		Возврат;
	КонецЕсли;

	РазмерТаблицыСвязей = РазмерВременнойТаблицы(ПараметрыРасчета, "Источники");

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.УстановитьПараметр("РазмерТаблицыДанных", РазмерТаблицыДанных);
	Запрос.УстановитьПараметр("РазмерТаблицыСвязей", РазмерТаблицыСвязей);
	Запрос.УстановитьПараметр("КоличествоСтрокВТЗ", ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ);

	Если ПараметрыРасчета.Отладка.НеВыполнятьОптимизациюЦепочек Тогда

		Запрос.Текст = "ВЫБРАТЬ
			|	0 							КАК НомерЗаданияРасчета,
			|	0 							КАК НомерПодграфа,
			|	&РазмерТаблицыСвязей 		КАК КоличествоСвязей,
			|	&РазмерТаблицыДанных 		КАК КоличествоУзлов,
			|	&РазмерТаблицыДанных
			|	  + &РазмерТаблицыСвязей	КАК ВесПодграфа,
			|	0 							КАК МинимальныйНомерУзла,
			|	&РазмерТаблицыДанных - 1 	КАК МаксимальныйНомерУзла,
			|	0 							КАК МаксимумПриемниковУзла,
			|	0 							КАК МаксимумИсточниковУзла
			|ПОМЕСТИТЬ ОписаниеПодграфов";

		Запрос.Выполнить(); // создание ОписаниеПодграфов
		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, НСтр("ru='Оптимизация нумерации узлов графа перед расчетом партий по цепочкам пропущена для целей отладки.';uk='Оптимізація нумерації вузлів графа перед розрахунком партій по ланцюжках пропущена для цілей налагодження.'",ОбщегоНазначения.КодОсновногоЯзыка()));

		Возврат;

	КонецЕсли;

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТНовыеНомераУзлов", НСтр("ru='Оптимизация нумерации исходных данных';uk='Оптимізація нумерації вихідних даних'",ОбщегоНазначения.КодОсновногоЯзыка()));

	СуществующиеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета);

	#Область Инициализация

	КолонкиТаблицыДанных = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.Колонки;

	ЕстьПериодПоступленияВДанных = (КолонкиТаблицыДанных.Найти("ПериодПоступления") <> Неопределено);
	ЕстьПериодВДанных = (КолонкиТаблицыДанных.Найти("Период") <> Неопределено);
	ЕстьРегистраторВДанных = (КолонкиТаблицыДанных.Найти("Регистратор") <> Неопределено);

	ИменаКолонокТаблицыДанные = "";
	Для Каждого ТекущаяКолонка Из КолонкиТаблицыДанных Цикл

		ИмяКолонки = ?(ТекущаяКолонка.Имя = "К", "НовыеНомера.НовыйНомерУзла КАК К", "Т."
			+ ТекущаяКолонка.Имя);

		ИменаКолонокТаблицыДанные = ИменаКолонокТаблицыДанные
			+ ?(ИменаКолонокТаблицыДанные = "", "", ",
			|	") + ИмяКолонки;

	КонецЦикла;

	#КонецОбласти

	#Область Упорядочивание

	// Подготовим данные для упорядочивания записей.
	// Упорядочивание выполняется по полям ПериодПоступления, Период, Регистратор
	// Упорядочивание используется для сортировки узлов одной волны подграфа и для сортировки источников и приемников узла.
	Запрос.Текст = "ВЫБРАТЬ
		|	Т.К КАК НомерУзла,
		|	%1 КАК ПериодПоступления,
		|	%2 КАК Период,
		|	%3 КАК Регистратор
		|ПОМЕСТИТЬ ВТДанныеДляУпорядочивания
		|ИЗ
		|	Данные КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодПоступления,
		|	Период,
		|	Регистратор";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ?(ЕстьПериодПоступленияВДанных, "ЕСТЬNULL(Т.ПериодПоступления, ДАТАВРЕМЯ(1,1,1))", "ДАТАВРЕМЯ(1,1,1)"), ?(ЕстьПериодВДанных, "ЕСТЬNULL(Т.Период, ДАТАВРЕМЯ(1,1,1))", "ДАТАВРЕМЯ(1,1,1)"), ?(ЕстьРегистраторВДанных, "ЕСТЬNULL(Т.Регистратор, НЕОПРЕДЕЛЕНО)", "ДАТАВРЕМЯ(1,1,1)"));

	Запрос.Выполнить(); // создание ВТДанныеДляУпорядочивания
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	%1 КАК ЗначениеРазделителя,
		|	Т.ПериодПоступления КАК ПериодПоступления,
		|	Т.Период КАК Период,
		|	Т.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТПоляУпорядочивания
		|ИЗ
		|	ВТДанныеДляУпорядочивания КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодПоступления,
		|	Период,
		|	Регистратор";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ?(ЕстьПериодПоступленияВДанных, "НАЧАЛОПЕРИОДА(Т.ПериодПоступления, ДЕНЬ)", ?(ЕстьПериодВДанных, "НАЧАЛОПЕРИОДА(Т.Период, ДЕНЬ)", "1")));

	Запрос.Выполнить(); // создание ВТПоляУпорядочивания
	ПараметрыНумерации = СформироватьПараметрыНумерацииСтрокВременнойТаблицы("ЗначениеРазделителя", // разделитель
		"", // ресурсы
		"ПериодПоступления, Период, Регистратор", // порядок
		"Порядок", // номер
		"ПериодПоступления, Период, Регистратор", // индекс
		"", // накопление
	Ложь); // не подбирать разделитель
	ЗаполнитьНомераСтрокВременнойТаблицы(ПараметрыРасчета, ПараметрыНумерации, "ВТПоляУпорядочивания");

	Запрос.Текст = "ВЫБРАТЬ
		|	Т.НомерУзла 			   КАК НомерУзла,
		|	ПоляУпорядочивания.Порядок КАК Порядок
		|ПОМЕСТИТЬ ВТПорядокУзлов
		|ИЗ
		|	ВТДанныеДляУпорядочивания КАК Т
		|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоляУпорядочивания КАК ПоляУпорядочивания
		|		ПО Т.ПериодПоступления = ПоляУпорядочивания.ПериодПоступления
		|		 И Т.Период = ПоляУпорядочивания.Период
		|		 И Т.Регистратор = ПоляУпорядочивания.Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла";

	Запрос.Выполнить(); // создание ВТПорядокУзлов
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДанныеДляУпорядочивания, ВТПоляУпорядочивания");

	#КонецОбласти

	#Область РазбиениеГрафаНаПодграфы

	// Выполним разбиение исходного графа данных на несвязанные между собой подграфы.
	// Каждый найденный подграф будет пронумерован от 0 до (количество подграфов - 1) в порядку убывания количества дуг в подграфе.
	// Т.е. подграф с номером 0 будет самым большим, а последние подграфы будут тривиальными (содержат по одному узлу).
	//
	// Разбиение выполняем следующим образов:
	// - для начала каждой вершине присваиваем номер подграфа, равный номеру самой вершины
	// - для каждой вершины i определяем номера подграфов всех ее источников и приемников
	// - если минимальный номер подграфов связанных вершин меньше, чем номер подграфа самой вершины i,
	//	 то присваиваем вершине i этот минимальный номер подграфа
	// - повторяем в цикле действия 2 и 3 до тех пор, пока на очередной итерации ни у одной вершины не изменится номер ее подграфа.
	// Т.е. минимальный номер вершины в каждом подграфе как бы начинает "расползаться" по этому подграфу - от этой вершины
	// сначала "переходит" на смежные вершины, потом на их смежные вершины и т.д, пока не "займет" весь подграф.
	// В результате каждый подграф будет иметь свой уникальный номер, равный номеру минимальной вершины, входящий в него.
	// Затем сделаем сквозную нумерацию этих подграфов (как написано выше).
	// Например, есть исходный граф ((4-2-1-7) (6) (5-3)):
	// - найдем в нем три подграфа с условными номерами 1, 6 и 3
	// - затем присвоим им номера 0, 2 и 1 соответственно.
	Запрос.Текст = "ВЫБРАТЬ
		|	Т.К КАК НомерУзла,
		|	Т.К КАК НомерПодграфа
		|ПОМЕСТИТЬ ВТУзлыПодграфов
		|ИЗ
		|	Данные КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Ключ КАК НомерУзла,
		|	Т.Источник КАК СвязанныйУзел,
		|	ИСТИНА КАК ЭтоИсточник
		|ПОМЕСТИТЬ ВТСвязиУзлов
		|ИЗ
		|	Источники КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ключ,
		|	Т.Приемник,
		|	ЛОЖЬ
		|ИЗ
		|	Приемники КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СвязанныйУзел,
		|	ЭтоИсточник";

	Запрос.Выполнить(); // создание ВТУзлыПодграфов и ВТСвязиУзлов
	ЕстьИзменения = Истина;
	КоличествоИтерацийПоискаПодграфов = 0;

	Пока ЕстьИзменения Цикл

		КоличествоИтерацийПоискаПодграфов = КоличествоИтерацийПоискаПодграфов + 1;

		Запрос.Текст = "ВЫБРАТЬ
			|	СвязиУзлов.НомерУзла КАК НомерУзла,
			|	МИНИМУМ(Т.НомерПодграфа) КАК НомерПодграфа
			|ПОМЕСТИТЬ ВТПодграфыСвязанныхУзлов
			|ИЗ
			|	ВТУзлыПодграфов КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвязиУзлов КАК СвязиУзлов
			|		ПО Т.НомерУзла = СвязиУзлов.СвязанныйУзел
			|
			|СГРУППИРОВАТЬ ПО
			|	СвязиУзлов.НомерУзла
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерУзла
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.НомерУзла КАК НомерУзла,
			|	ПодграфыСвязанныхУзлов.НомерПодграфа КАК НомерПодграфа
			|ПОМЕСТИТЬ ВТИзмененныеПодграфы
			|ИЗ
			|	ВТУзлыПодграфов КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодграфыСвязанныхУзлов КАК ПодграфыСвязанныхУзлов
			|		ПО Т.НомерУзла = ПодграфыСвязанныхУзлов.НомерУзла
			|ГДЕ
			|	ПодграфыСвязанныхУзлов.НомерПодграфа < Т.НомерПодграфа
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерУзла
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПодграфыСвязанныхУзлов";

		Запрос.Выполнить(); // создание ВТИзмененныеПодграфы
		ЕстьИзменения = (РазмерВременнойТаблицы(ПараметрыРасчета, "ВТИзмененныеПодграфы") > 0);

		Если ЕстьИзменения Тогда

			Запрос.Текст = "ВЫБРАТЬ
				|	Т.НомерУзла,
				|	ВЫБОР КОГДА ИзмененныеПодграфы.НомерУзла ЕСТЬ NULL 
				|		ТОГДА Т.НомерПодграфа
				|		ИНАЧЕ ИзмененныеПодграфы.НомерПодграфа
				|	КОНЕЦ КАК НомерПодграфа
				|ПОМЕСТИТЬ ВТНовыеУзлыПодграфов
				|ИЗ
				|	ВТУзлыПодграфов КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИзмененныеПодграфы КАК ИзмененныеПодграфы
				|		ПО Т.НомерУзла = ИзмененныеПодграфы.НомерУзла
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТУзлыПодграфов
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Т.НомерУзла,
				|	Т.НомерПодграфа
				|ПОМЕСТИТЬ ВТУзлыПодграфов
				|ИЗ
				|	ВТНовыеУзлыПодграфов КАК Т
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	НомерУзла
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТНовыеУзлыПодграфов";

			Запрос.Выполнить(); // обновление ВТУзлыПодграфов
		КонецЕсли;

		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТИзмененныеПодграфы");

	КонецЦикла;

	Запрос.Текст = "ВЫБРАТЬ
		|	Т.НомерПодграфа КАК НомерПодграфа,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.НомерУзла) КАК КоличествоУзлов,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА СвязиУзлов.СвязанныйУзел ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ЧИСЛО(15,0))) КАК КоличествоСвязей,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА СвязиУзлов.СвязанныйУзел ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ЧИСЛО(15,0))) КАК ЗначениеРазделителя
		|ПОМЕСТИТЬ ВТПодграфы
		|ИЗ
		|	ВТУзлыПодграфов КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвязиУзлов КАК СвязиУзлов
		|		ПО Т.НомерУзла = СвязиУзлов.СвязанныйУзел
		|			И СвязиУзлов.ЭтоИсточник = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.НомерПодграфа";

	Запрос.Выполнить(); // создание ВТПодграфы
	ПараметрыНумерации = СформироватьПараметрыНумерацииСтрокВременнойТаблицы("", // разделитель
		"", // ресурсы
		"КоличествоСвязей УБЫВ, КоличествоУзлов УБЫВ, НомерПодграфа", // порядок
		"НовыйНомерПодграфа", // номер
		"НомерПодграфа", // индекс
		"ЗначениеРазделителя"); // накопление
	ЗаполнитьНомераСтрокВременнойТаблицы(ПараметрыРасчета, ПараметрыНумерации, "ВТПодграфы");

	#КонецОбласти

	#Область РасчетНовыхНомеровУзлов

	// Рассчитаем новые номера вершин исходного графа:
	// - упорядочим все вершины
	// - обойдем получившийся результат и последовательно пронумеруем вершины от 0 до (количество вершин - 1).
	Запрос.Текст = "ВЫБРАТЬ
		|	Т.НомерУзла КАК НомерУзла,
		|	СУММА(Т.КоличествоПриемников) КАК КоличествоПриемников,
		|	СУММА(Т.КоличествоИсточников) КАК КоличествоИсточников
		|ПОМЕСТИТЬ ВТОписаниеУзлов
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.НомерУзла КАК НомерУзла,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Приемники.Приемник) КАК КоличествоПриемников,
		|		0 КАК КоличествоИсточников
		|	ИЗ
		|		ВТУзлыПодграфов КАК Т
		|			ЛЕВОЕ СОЕДИНЕНИЕ Приемники КАК Приемники
		|			ПО Т.НомерУзла = Приемники.Ключ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Т.НомерУзла
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.НомерУзла,
		|		0,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Источники.Источник)
		|	ИЗ
		|		ВТУзлыПодграфов КАК Т
		|			ЛЕВОЕ СОЕДИНЕНИЕ Источники КАК Источники
		|			ПО Т.НомерУзла = Источники.Ключ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Т.НомерУзла) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.НомерУзла
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Подграфы.ЗначениеРазделителя / &КоличествоСтрокВТЗ КАК ЧИСЛО(15,0)) КАК ЗначениеРазделителя,
		|	Подграфы.НомерПодграфа 			КАК НомерПодграфа,
		|	Подграфы.НовыйНомерПодграфа 	КАК НовыйНомерПодграфа,
		|	Т.НомерУзла 					КАК НомерУзла,
		|	Т.НомерУзла 					КАК НовыйНомерУзла,
		|	ПорядокУзлов.Порядок 			КАК Порядок
		|ПОМЕСТИТЬ ВТНовыеНомераУзлов
		|ИЗ
		|	ВТОписаниеУзлов КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУзлыПодграфов КАК УзлыПодграфов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодграфы КАК Подграфы
		|			ПО УзлыПодграфов.НомерПодграфа = Подграфы.НомерПодграфа
		|		ПО Т.НомерУзла = УзлыПодграфов.НомерУзла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокУзлов КАК ПорядокУзлов
		|		ПО Т.НомерУзла = ПорядокУзлов.НомерУзла";

	Запрос.Выполнить(); // создание ВТОписаниеУзлов, ВТНовыеНомераУзлов
	ПараметрыНумерации = СформироватьПараметрыНумерацииСтрокВременнойТаблицы("ЗначениеРазделителя", // разделитель
		"", // ресурсы
		"НовыйНомерПодграфа, Порядок, НомерУзла", // порядок
		"НовыйНомерУзла", // номер
		"НомерУзла", // индекс
		"", // накопление
	Ложь); // не подбирать разделитель
	ЗаполнитьНомераСтрокВременнойТаблицы(ПараметрыРасчета, ПараметрыНумерации, "ВТНовыеНомераУзлов");

	#КонецОбласти

	#Область ИзменениеНумерацииВТаблицах

	// Заменим старые номера вершин на новые в служебных временных таблицах Данные, Источники, Приемники.
	// В таблицах Источники и Приемники заполним поле Порядок.
	// Это поле относятся к колонкам "Источник" и "Приемник" и предназначено для их сортировки по ФИФО.
	Запрос.Текст = "ВЫБРАТЬ
		|	Т.НомерУзла 			 КАК Ключ,
		|	Т.СвязанныйУзел 		 КАК Источник,
		|	ПорядокУзлов.Порядок 	 КАК Порядок
		|ПОМЕСТИТЬ Источники_Временная
		|ИЗ
		|	ВТСвязиУзлов КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокУзлов КАК ПорядокУзлов
		|		ПО Т.СвязанныйУзел = ПорядокУзлов.НомерУзла
		|			И Т.ЭтоИсточник = ИСТИНА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Источники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеНомераКлючей.НовыйНомерУзла 	 КАК Ключ,
		|	НовыеНомераИсточников.НовыйНомерУзла КАК Источник,
		|	Т.Порядок 				 			 КАК Порядок
		|ПОМЕСТИТЬ Источники
		|ИЗ
		|	Источники_Временная КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНомераУзлов КАК НовыеНомераКлючей
		|		ПО Т.Ключ = НовыеНомераКлючей.НомерУзла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНомераУзлов КАК НовыеНомераИсточников
		|		ПО Т.Источник = НовыеНомераИсточников.НомерУзла
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Источники_Временная";

	Запрос.Выполнить(); // обновление Источники
	Запрос.Текст = "ВЫБРАТЬ
		|	Т.НомерУзла 			 КАК Ключ,
		|	Т.СвязанныйУзел 		 КАК Приемник,
		|	ПорядокУзлов.Порядок 	 КАК Порядок
		|ПОМЕСТИТЬ Приемники_Временная
		|ИЗ
		|	ВТСвязиУзлов КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокУзлов КАК ПорядокУзлов
		|		ПО Т.СвязанныйУзел = ПорядокУзлов.НомерУзла
		|			И (Т.ЭтоИсточник = ЛОЖЬ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Приемники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеНомераКлючей.НовыйНомерУзла 	 КАК Ключ,
		|	НовыеНомераПриемников.НовыйНомерУзла КАК Приемник,
		|	Т.Порядок 				 			 КАК Порядок
		|ПОМЕСТИТЬ Приемники
		|ИЗ
		|	Приемники_Временная КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНомераУзлов КАК НовыеНомераКлючей
		|		ПО Т.Ключ = НовыеНомераКлючей.НомерУзла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНомераУзлов КАК НовыеНомераПриемников
		|		ПО Т.Приемник = НовыеНомераПриемников.НомерУзла
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Приемники_Временная";

	Запрос.Выполнить(); // обновление Приемники
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьРазличия
		|ИЗ
		|	ВТНовыеНомераУзлов КАК Т
		|ГДЕ
		|	Т.НомерУзла <> Т.НовыйНомерУзла";

	ЕстьИзменения = НЕ Запрос.Выполнить().Пустой();

	Если ЕстьИзменения Тогда

		Запрос.Текст = "ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ Данные_Временная
			|ИЗ
			|	Данные КАК Т
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Данные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	%1
			|ПОМЕСТИТЬ Данные
			|ИЗ
			|	Данные_Временная КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНомераУзлов КАК НовыеНомера
			|		ПО Т.К = НовыеНомера.НомерУзла
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	К
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Данные_Временная";

		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИменаКолонокТаблицыДанные);

		Запрос.Выполнить(); // обновление Данные
	КонецЕсли;

	#КонецОбласти

	#Область ФормированиеСтатистикиГрафа

	// Создадим новые служебные таблицы ОписаниеПодграфов и ОписаниеУзловПодграфов.
	Запрос.Текст = "ВЫБРАТЬ
		|	Т.НовыйНомерУзла 					КАК НомерУзла,
		|	Т.НовыйНомерПодграфа 				КАК НомерПодграфа,
		|	Т.Порядок							КАК Порядок,
		|	ОписаниеУзлов.КоличествоПриемников 	КАК КоличествоПриемников,
		|	ОписаниеУзлов.КоличествоИсточников 	КАК КоличествоИсточников
		|ПОМЕСТИТЬ ОписаниеУзловПодграфов
		|ИЗ
		|	ВТНовыеНомераУзлов КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОписаниеУзлов КАК ОписаниеУзлов
		|		ПО Т.НомерУзла = ОписаниеУзлов.НомерУзла
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	0 										КАК НомерЗаданияРасчета,
		|	Т.НомерПодграфа 						КАК НомерПодграфа,
		|	СУММА(Т.КоличествоИсточников) 			КАК КоличествоСвязей,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.НомерУзла) 		КАК КоличествоУзлов,
		|	СУММА(Т.КоличествоИсточников)
		|	  + КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.НомерУзла)	КАК ВесПодграфа,
		|	МИНИМУМ(Т.НомерУзла) 					КАК МинимальныйНомерУзла,
		|	МАКСИМУМ(Т.НомерУзла) 					КАК МаксимальныйНомерУзла,
		|	МАКСИМУМ(Т.КоличествоПриемников) 		КАК МаксимумПриемниковУзла,
		|	МАКСИМУМ(Т.КоличествоИсточников) 		КАК МаксимумИсточниковУзла
		|ПОМЕСТИТЬ ОписаниеПодграфов
		|ИЗ
		|	ОписаниеУзловПодграфов КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.НомерПодграфа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерПодграфа";

	Запрос.Выполнить(); // создание ОписаниеУзловПодграфов и ОписаниеПодграфов

	// Выведем в протокол подробное описание графа.
	ОписаниеГрафа = НСтр("ru='Описание цепочек (графа) для расчета:
|	узлов - %01; дуг - %02; макс. исходящих дуг - %03; макс. входящих дуг - %04;
|	содержит несвязанных подграфов - %05, в т.ч. тривиальных (из одного узла) - %06;
|	макс. узлов в одном подграфе - %07; макс. дуг в одном подграфе - %08;
|	выполнено итераций поиска подграфов - %09'
|;uk='Опис ланцюжків (графа) для розрахунку: 
|  вузлів - %01; дуг - %02; макс. вихідних дуг - %03; макс. вхідних дуг - %04;
|  містить незв''язаних підграфів - %05, в т.ч. тривіальних (з одного вузла) - %06; 
|  макс. вузлів в одному підграфі - %07; макс. дуг в одному підграфі - %08; 
|  виконано ітерацій пошуку підграфів - %09'",ОбщегоНазначения.КодОсновногоЯзыка());

	Запрос.УстановитьПараметр("КоличествоИтерацийПоискаПодграфов", КоличествоИтерацийПоискаПодграфов);

	Запрос.Текст = "ВЫБРАТЬ
		|	1 						 КАК НомерПараметра,
		|	СУММА(Т.КоличествоУзлов) КАК ЗначениеПараметра
		|ИЗ
		|	ОписаниеПодграфов КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	СУММА(Т.КоличествоСвязей)
		|ИЗ
		|	ОписаниеПодграфов КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	МАКСИМУМ(Т.МаксимумПриемниковУзла)
		|ИЗ
		|	ОписаниеПодграфов КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	МАКСИМУМ(Т.МаксимумИсточниковУзла)
		|ИЗ
		|	ОписаниеПодграфов КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5,
		|	КОЛИЧЕСТВО(*)
		|ИЗ
		|	ОписаниеПодграфов КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6,
		|	КОЛИЧЕСТВО(*)
		|ИЗ
		|	ОписаниеПодграфов КАК Т
		|ГДЕ
		|	Т.КоличествоУзлов = 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7,
		|	МАКСИМУМ(Т.КоличествоУзлов)
		|ИЗ
		|	ОписаниеПодграфов КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8,
		|	МАКСИМУМ(Т.КоличествоСвязей)
		|ИЗ
		|	ОписаниеПодграфов КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9,
		|	&КоличествоИтерацийПоискаПодграфов
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерПараметра";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ОписаниеГрафа = СтрЗаменить(ОписаниеГрафа, "%"
			+ Формат(Выборка.НомерПараметра, "ЧЦ=2; ЧВН="), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.ЗначениеПараметра));
	КонецЦикла;

	ПараметрыРасчета.РаспределениеПартий.Вставить("ОписаниеГрафа", ОписаниеГрафа);

	РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, ОписаниеГрафа);

	#КонецОбласти

	// Уничтожим ненужные временные таблицы.
	НовыеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета, СуществующиеВТ
		+ ?(ЗначениеЗаполнено(СуществующиеВТ), ", ", "") + "ОписаниеПодграфов");

	УничтожитьВременныеТаблицы(ПараметрыРасчета, НовыеВТ);

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область АлгоритмРасчетаПартий

// Основная процедура расчета - РассчитатьПартииПоЦепочкам.
// В ней выполняется разделение партий на порции:
//	- одна для основного потока расчета,
//	- остальные для фоновых расчетов (если они используются).
// Порции для фонового расчета передаются в процедуру ЗапуститьРасчетПартийВФоне, которая стартует фоновые задания с
// методом РассчитатьПартииВФоне. Порция для основного потока расчета передается в процедуру РассчитатьПартииНеВФоне.
// Далее процедуры РассчитатьПартииВФоне и РассчитатьПартииНеВФоне подготавливают данные к расчету
// и вызывают процедуру РассчитатьПартииПоГруппамПодграфов, которая выполняет расчет по несвязанным между собой подграфам,
// из которой для обхода подграфов и расчета их узлов вызывается процедура РассчитатьПартиюРекурсивно.
// По окончании расчета в РассчитатьПартииПоЦепочкам собираются вместе результаты расчета основного потока и фоновых расчетов.

#Область ЗапускРасчета

Процедура РассчитатьПартииПоЦепочкам(ПараметрыРасчета) Экспорт

	ПараметрыРасчета.РаспределениеПартий.Вставить("КоличествоСтрокДанных", РазмерВременнойТаблицы(ПараметрыРасчета, "Данные"));

	ВыгрузитьШапкуТаблицыПромежуточныхДанныхРасчета(ПараметрыРасчета, "Данные");
	ВыгрузитьШапкуТаблицыПромежуточныхДанныхРасчета(ПараметрыРасчета, "Источники");
	ВыгрузитьШапкуТаблицыПромежуточныхДанныхРасчета(ПараметрыРасчета, "Приемники");

	Если ПараметрыРасчета.РаспределениеПартий.КоличествоСтрокДанных = 0 Тогда
		ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "РассчитатьПартииПоЦепочкам");
		Возврат;
	КонецЕсли;

	ИнициализироватьЗамерРаспределенияПартий(ПараметрыРасчета);

	КоличествоФЗ = ПараметрыРасчета.ОграниченияФЗ.МаксимальноеКоличествоФЗРасчетаПартий;

	ИмяТаблицыОписаниеПодграфов = "ОписаниеПодграфов";
	МногопоточныйРасчет = Ложь;

	Если НЕ ПараметрыРасчета.ИнформационнаяБазаФайловая
			И НЕ ЭтоФоновыйРасчетПартий(ПараметрыРасчета) И КоличествоФЗ > 0
			И ПараметрыРасчета.РаспределениеПартий.КоличествоСтрокДанных > ПараметрыРасчета.ОграниченияВыборки.ПорцияРасчетаПартий Тогда

		ПараметрыРасчета.ТаблицаЗаданийРасчета.Очистить();
		ПараметрыРасчета.ОбщееКоличествоФЗРасчета = 0;
		МногопоточныйРасчет = Истина;

		// Разобьем данные для расчета на (КоличествоФЗ + 1) порции.
		ОбъемДанных = АгрегатнаяФункцияПоляВременнойТаблицы(ПараметрыРасчета, "ОписаниеПодграфов", "ВесПодграфа");
		РазмерПорции = Цел(ОбъемДанных / (КоличествоФЗ + 1)) + 1;

		РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ОписаниеПодграфов", НСтр("ru='(разделение на порции для фоновых заданий)';uk='(поділ на порції для фонових завдань)'",ОбщегоНазначения.КодОсновногоЯзыка()));

		ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(РазмерПорции, "ВесПодграфа", "МинимальныйНомерУзла", "НомерЗаданияРасчета");

		РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, "ОписаниеПодграфов");

		РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);

		// Порции начиная со второй передадим для расчета в фоновые задания.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;

		Запрос.Текст = "ВЫБРАТЬ
			|	МИНИМУМ(Т.НомерЗаданияРасчета) КАК МинимальныйНомер,
			|	МАКСИМУМ(Т.НомерЗаданияРасчета) КАК МаксимальныйНомер
			|ИЗ
			|	ОписаниеПодграфов КАК Т";

		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		ПараметрыФоновогоРасчета = СформироватьПараметрыФоновогоРасчета(ПараметрыРасчета);

		Для НомерПорции = Выборка.МинимальныйНомер + 1 По Мин(КоличествоФЗ
			+ 1, Выборка.МаксимальныйНомер) Цикл

			ПараметрыРасчета.ОбщееКоличествоФЗРасчета = ПараметрыРасчета.ОбщееКоличествоФЗРасчета
				+ 1;

			ЗапуститьРасчетПартийВФоне(ПараметрыРасчета, ПараметрыФоновогоРасчета, НомерПорции, ?(НомерПорции = КоличествоФЗ
				+ 1, Выборка.МаксимальныйНомер, НомерПорции));

		КонецЦикла;

		// Остальные данные рассчитаем без фоновых заданий.
		Запрос.Текст = "ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ ОписаниеПодграфовДляРасчетаНеВФоне
			|ИЗ
			|	ОписаниеПодграфов КАК Т
			|ГДЕ
			|	Т.НомерЗаданияРасчета = &МинимальныйНомерПорции
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|УНИЧТОЖИТЬ ОписаниеПодграфов";

		Запрос.УстановитьПараметр("МинимальныйНомерПорции", Выборка.МинимальныйНомер);

		Запрос.Выполнить();

		ИмяТаблицыОписаниеПодграфов = "ОписаниеПодграфовДляРасчетаНеВФоне";

	КонецЕсли;

	РассчитатьПартииНеВФоне(ПараметрыРасчета, ИмяТаблицыОписаниеПодграфов);

	Если МногопоточныйРасчет Тогда

		ПолучитьРезультатыФоновыхРасчетовПартий(ПараметрыРасчета);

		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ОписаниеПодграфовДляРасчетаНеВФоне");

	КонецЕсли;

	ЗавершитьЗамерРаспределенияПартий(ПараметрыРасчета);

	ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "РассчитатьПартииПоЦепочкам");

КонецПроцедуры

Процедура РассчитатьПартииНеВФоне(ПараметрыРасчета,
		ИмяТаблицыОписаниеПодграфов)

		// Разделим подграфы на группы - в одну группу целиком входит один или несколько подграфов.
	ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(ПараметрыРасчета.ОграниченияВыборки.ПорцияРасчетаПартий, "КоличествоУзлов", "МинимальныйНомерУзла");

	РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, ИмяТаблицыОписаниеПодграфов);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;

	Запрос.Текст = "ВЫБРАТЬ
		|	Т.НомерПорции,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.НомерПодграфа) КАК КоличествоПодграфов,
		|	СУММА(Т.КоличествоУзлов) КАК КоличествоУзлов,
		|	СУММА(Т.КоличествоСвязей) КАК КоличествоСвязей,
		|	МИНИМУМ(Т.МинимальныйНомерУзла) КАК МинимальныйНомерУзла,
		|	МАКСИМУМ(Т.МаксимальныйНомерУзла) КАК МаксимальныйНомерУзла
		|ИЗ
		|	ИмяТаблицыОписаниеПодграфов КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.НомерПорции
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.НомерПорции";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыОписаниеПодграфов", ИмяТаблицыОписаниеПодграфов);

	ВыборкаГруппаПодграфов = Запрос.Выполнить().Выбрать();

	// Рассчитаем партии.
	РассчитатьПартииПоГруппамПодграфов(ПараметрыРасчета, ВыборкаГруппаПодграфов);

КонецПроцедуры

Процедура РассчитатьПартииПоГруппамПодграфов(ПараметрыРасчета,
		ВыборкаГруппаПодграфов)

	НомерПорции = 0;

	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	ЕстьСторно = ОписаниеДвижений.Свойство("ЕстьСторно");

	Пока СледующийЭлементКоллекции(ВыборкаГруппаПодграфов) Цикл

		НачалоЗамераРасчетаГруппыПодграфов(ПараметрыРасчета, ВыборкаГруппаПодграфов);

		Данные = Новый Структура;
		Данные.Вставить("ЦепочкиДвижений", Новый Соответствие);
		Данные.Вставить("СтрокиЦепочек", Новый ТаблицаЗначений);
		Данные.Вставить("Приходы", Новый Соответствие); // буфер копий партий для покрытия расходов
		Данные.Вставить("Расходы", Новый Соответствие); // буфер не рассчитанных партий для расчета на следующих итерациях
		Данные.Вставить("СтрокиПриходов", ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.СкопироватьКолонки());
		Данные.Вставить("СтрокиРасходов", Данные.СтрокиПриходов.СкопироватьКолонки());
		Данные.Вставить("ИндексыРасходов", Новый Массив);
		Данные.Вставить("ПройденныйПуть", Новый Соответствие); // используется для прерывания циклов
		Данные.Вставить("ИндексСтроки", Неопределено);

		Колонки = Данные.СтрокиЦепочек.Колонки;
		Колонки.Добавить("Источники", Новый ОписаниеТипов("Массив"));
		Колонки.Добавить("Приемники", Новый ОписаниеТипов("Массив"));
		Колонки.Добавить("ПройденныйПуть", Новый ОписаниеТипов("Соответствие"));

		Данные.Вставить("ПараметрыОбхода", Новый Структура); // описание текущей позиции в обходе данных для расчета
		Данные.ПараметрыОбхода.Вставить("ИндексСтроки", ВыборкаГруппаПодграфов.МинимальныйНомерУзла
			- 1);
		Данные.ПараметрыОбхода.Вставить("НачальнаяЦепочка", 0);
		Данные.ПараметрыОбхода.Вставить("КонечнаяЦепочка", ВыборкаГруппаПодграфов.МинимальныйНомерУзла
			- 1);
		Данные.ПараметрыОбхода.Вставить("НомерПорции", НомерПорции); // нужно для фонового расчета
		СтатистикаРасчета = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество()
			- 1];
		СтатистикаРасчета.КоличествоДанных = СтатистикаРасчета.КоличествоДанных
			+ ВыборкаГруппаПодграфов.МаксимальныйНомерУзла
			- Данные.ПараметрыОбхода.ИндексСтроки + 1;

		Пока Данные.ПараметрыОбхода.ИндексСтроки < ВыборкаГруппаПодграфов.МаксимальныйНомерУзла Цикл

			Данные.ПараметрыОбхода.ИндексСтроки = Данные.ПараметрыОбхода.ИндексСтроки
				+ 1;

			Если Данные.ПараметрыОбхода.ИндексСтроки > Данные.ПараметрыОбхода.КонечнаяЦепочка Тогда
			// Прочитаем следующую порцию данных.
				ВыборкаДанных = СледующаяПорцияПартийДляРасчета(ПараметрыРасчета, ВыборкаГруппаПодграфов, Данные);
			КонецЕсли;

			Если НЕ СледующийЭлементКоллекции(ВыборкаДанных)
					ИЛИ ВыборкаДанных.К <> Данные.ПараметрыОбхода.ИндексСтроки Тогда

				ТекстДляПротокола = НСтр("ru='Ошибка нумерации данных для расчета партий';uk='Помилка нумерації даних для розрахунку партій'",ОбщегоНазначения.КодОсновногоЯзыка());

				Если НЕ ЭтоФоновыйРасчетПартий(ПараметрыРасчета) Тогда

					РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий, ТекстДляПротокола);

					ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, ВыборкаДанных.Организация, НСтр("ru='При формировании движений по партиям диагностированы ошибки';uk='При формуванні рухів по партіях діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола);

					ТекстДляПротокола = ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

				КонецЕсли;

				ВызватьИсключение ТекстДляПротокола;

			КонецЕсли;

			ЦепочкаДвижений = Данные.ЦепочкиДвижений[Данные.ПараметрыОбхода.ИндексСтроки];

			Если ЦепочкаДвижений = Неопределено Тогда

				ДобавитьРасчетнуюПартию(ПараметрыРасчета, ВыборкаДанных);

			ИначеЕсли ВыборкаДанных.РасчетЗавершен Тогда

				РасчетнаяПартия = ДобавитьРасчетнуюПартию(ПараметрыРасчета, ВыборкаДанных);

				Если ЦепочкаДвижений.Приемники.Количество() > 0 Тогда

					Приход = Данные.СтрокиПриходов.Добавить();
					ЗаполнитьЗначенияСвойств(Приход, РасчетнаяПартия);

					ИнвертироватьПоказатели(Приход, ОписаниеДвижений.Показатели, Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Сторно
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад
						ИЛИ ЕстьСторно И Приход.Сторно);

					МассивПриходовПоИндексу = Новый Массив;
					МассивПриходовПоИндексу.Добавить(Приход);
					Данные.Приходы.Вставить(Данные.ПараметрыОбхода.ИндексСтроки, МассивПриходовПоИндексу);

				КонецЕсли;

				Данные.ЦепочкиДвижений.Удалить(Данные.ПараметрыОбхода.ИндексСтроки);
				Данные.СтрокиЦепочек.Удалить(ЦепочкаДвижений);
				РасчетнаяПартия = Неопределено;

			Иначе

				Расход = Данные.СтрокиРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(Расход, ВыборкаДанных);

				Данные.Расходы.Вставить(Данные.ПараметрыОбхода.ИндексСтроки, Расход);
				Данные.ИндексыРасходов.Добавить(Данные.ПараметрыОбхода.ИндексСтроки);

			КонецЕсли;

			Если Данные.ПараметрыОбхода.ИндексСтроки = ВыборкаГруппаПодграфов.МаксимальныйНомерУзла // последняя итерация цикла
				ИЛИ (Данные.ПараметрыОбхода.ИндексСтроки
					- ВыборкаГруппаПодграфов.МинимальныйНомерУзла > 0 // не первая итерация цикла
				И (Данные.ПараметрыОбхода.ИндексСтроки
					- ВыборкаГруппаПодграфов.МинимальныйНомерУзла)
					% ПараметрыРасчета.ОграниченияВыборки.ПорцияРасчетаПартий = 0) Тогда

				Данные.ИндексСтроки = Данные.ПараметрыОбхода.ИндексСтроки;

				Если Данные.Приходы.Количество() > 0 // есть записи по которым расчет завершен
					ИЛИ Данные.ПараметрыОбхода.ИндексСтроки = ВыборкаГруппаПодграфов.МаксимальныйНомерУзла Тогда

					Для Каждого ИндексРасхода Из Данные.ИндексыРасходов Цикл

						Если Данные.Расходы[ИндексРасхода] = Неопределено Тогда
							Продолжить; // строка к обсчету НЕ зарегистрирована
						КонецЕсли;

						БазисРасхода = Данные.Расходы[ИндексРасхода][ОписаниеДвижений.БазисРасхода];
						Данные.ПройденныйПуть.Очистить();
						РассчитатьПартиюРекурсивно(ПараметрыРасчета, Данные, ИндексРасхода);

						Если Данные.Расходы[ИндексРасхода] <> Неопределено
								И Данные.Расходы[ИндексРасхода][ОписаниеДвижений.БазисРасхода] > 0
								И Данные.Расходы[ИндексРасхода][ОписаниеДвижений.БазисРасхода] <> БазисРасхода Тогда
							Данные.ИндексыРасходов.Добавить(ИндексРасхода);
						КонецЕсли;

					КонецЦикла;

					Данные.ИндексыРасходов.Очистить();

				КонецЕсли;

				Если Данные.ПараметрыОбхода.ИндексСтроки < ВыборкаГруппаПодграфов.МаксимальныйНомерУзла Тогда

					Для Каждого Строка Из Данные.Расходы Цикл
						Данные.ИндексыРасходов.Добавить(Строка.Ключ);
					КонецЦикла;

					Список = Новый СписокЗначений;
					Список.ЗагрузитьЗначения(Данные.ИндексыРасходов);
					Список.СортироватьПоЗначению();
					Данные.ИндексыРасходов = Список.ВыгрузитьЗначения();

				Иначе

					Для Каждого Строка Из Данные.Расходы Цикл
						ДобавитьРасчетнуюПартию(ПараметрыРасчета, Строка.Значение);
					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		НомерПорции = Данные.ПараметрыОбхода.НомерПорции;

		Данные.Приходы.Очистить();
		Данные.Расходы.Очистить();
		Данные.ЦепочкиДвижений.Очистить();
		Данные.СтрокиПриходов.Очистить();
		Данные.СтрокиРасходов.Очистить();
		Данные.СтрокиЦепочек.Очистить();
		Данные = Неопределено;

	КонецЦикла;

КонецПроцедуры

Функция РассчитатьПартиюРекурсивно(ПараметрыРасчета, Данные, ИндексРасхода)

	СтатистикаРасчета = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество()
		- 1];
	СтатистикаРасчета.КоличествоДанных = СтатистикаРасчета.КоличествоДанных + 1;

	Если НЕ НачалоЗамераРасчетаЦепочек(ПараметрыРасчета, Данные, ИндексРасхода) Тогда
		Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "ПереполнениеСтека");
	КонецЕсли;

	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;

	ЦепочкаРасхода = Данные.ЦепочкиДвижений[ИндексРасхода];
	Если ЦепочкаРасхода = Неопределено Тогда
		Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "НеТребуется");
	КонецЕсли;

	Источники = ЦепочкаРасхода.Источники;
	Если Источники.Количество() = 0 Тогда
		Если ОписаниеДвижений.Свойство("УдалятьСтрокиБезИсточников") Тогда
			Расход = Данные.Расходы[ИндексРасхода];
			Данные.Расходы.Удалить(ИндексРасхода);
			Данные.ЦепочкиДвижений.Удалить(ИндексРасхода);
			Данные.СтрокиРасходов.Удалить(Расход);
			Данные.СтрокиЦепочек.Удалить(ЦепочкаРасхода);
		КонецЕсли;

		Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "НетИсточников");
	КонецЕсли;

	Если ИндексРасхода = Данные.ПройденныйПуть[ИндексРасхода] Тогда
		Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "Зацикливание");
	КонецЕсли;         
	

	ИндексСтроки = Данные.ИндексСтроки;
	Для Каждого ИндексПрихода Из Источники Цикл
		Если ИндексПрихода > ИндексСтроки Тогда  
			Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "НетДанных"); // еще нет всех строк для распределения
		КонецЕсли;
	КонецЦикла;

	Данные.ПройденныйПуть.Вставить(ИндексРасхода, ИндексРасхода);

	НовыеПриходы = Неопределено;

	Расход = Данные.Расходы[ИндексРасхода];
	ЕстьСторно = ОписаниеДвижений.Свойство("ЕстьСторно");
	ЭтоСторно = (Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Сторно
		ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад
		ИЛИ ЕстьСторно И Расход.Сторно);
		
		
	ТребуетсяСортировка = Ложь;
	Если Источники.Количество() > 1
			И ЗначениеЗаполнено(ОписаниеДвижений.ПоляСортировки) Тогда

		ЗначенияПолей = Новый Структура(ОписаниеДвижений.ПоляСортировки);
		ЗаполнитьЗначенияСвойств(ЗначенияПолей, Расход);

		Для Каждого ПолеСортировки Из ЗначенияПолей Цикл
			Если ЗначениеЗаполнено(ПолеСортировки.Значение) Тогда
				ТребуетсяСортировка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Если ТребуетсяСортировка Тогда
		СортироватьИсточникиПоФИФО_ЛИФО(Источники, ОписаниеДвижений.ПолеПорядка, Данные.Приходы, Данные.Расходы, ЭтоСторно);
		СортироватьИсточникиПоЗначениямПолей(Источники, ЗначенияПолей, Данные.Приходы, Данные.Расходы, Расход.Регистратор, ЭтоСторно);
	КонецЕсли;

	Счетчик = 0;
	ВГраница = Источники.ВГраница();

	ИнвертироватьПоказатели(Расход, ОписаниеДвижений.Показатели, ЭтоСторно);

	УменьшатьБазисРасхода = ОписаниеДвижений.Свойство("УменьшатьБазис");
	БазисРасходаДоРасчета = Расход[ОписаниеДвижений.БазисРасхода];
	ТекущийБазисРасхода = БазисРасходаДоРасчета;
	ИсточникиКУдалению = Новый Массив;

	Пока Счетчик <= ВГраница Цикл

		ИндексИсточника = Источники[?(ЭтоСторно, ВГраница - Счетчик, Счетчик)];
		Счетчик = Счетчик + 1;

		МассивПриходов = Данные.Приходы[ИндексИсточника];
		Если МассивПриходов = Неопределено Тогда

			Если Данные.Расходы[ИндексИсточника] = Неопределено Тогда
				ИсточникиКУдалению.Добавить(ИндексИсточника);
				Продолжить;
			КонецЕсли;

			Источник = Данные.Расходы[ИндексИсточника];
			Если НЕ Источник.РасчетЗавершен Тогда
				Результат = РассчитатьПартиюРекурсивно(ПараметрыРасчета, Данные, ИндексИсточника);
				ВГраница = Источники.ВГраница();
				Если Данные.Расходы[ИндексРасхода] = Неопределено Тогда
					Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "НеТребуется");
				КонецЕсли;
				МассивПриходов = Данные.Приходы[ИндексИсточника];
				Если МассивПриходов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				МассивПриходов = Данные.Приходы[ИндексИсточника];
				Если МассивПриходов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		Если ЭтоСторно Тогда
			СортироватьПриходыПоЛИФО(ОписаниеДвижений.ПолеПорядка, МассивПриходов);
		КонецЕсли;

		ПриходыКУдалению = Новый Массив;

		КоличествоДвижений = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.Количество();
		УменьшениеБазисаРасхода = 0;

		Для Каждого Приход Из МассивПриходов Цикл

			Если УменьшатьБазисРасхода Тогда

				Если Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходы
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыБезПартии
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыСПартией
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыРегл
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыУпр
				 		ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ОтклонениеВСтоимости
						ИЛИ (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Прошлое
						И ЗначениеЗаполнено(Приход.Номенклатура))
						ИЛИ (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ОстатокСгруппированный
						И ЗначениеЗаполнено(Приход.Номенклатура))
                    	ИЛИ (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ПартияСгруппированная
                        И ЗначениеЗаполнено(Приход.Номенклатура))
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Остаток Тогда

                    Если ОписаниеДвижений.Контекст = "ПодготовкаДанныхДляУчетаНДС"
							И (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ОстатокСгруппированный
					 		ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ПартияСгруппированная) Тогда
						Расход[ОписаниеДвижений.БазисРасхода] = ТекущийБазисРасхода;
						Если Приход.Количество <> 0 Тогда // данные о партии товара (не доп. расходы)
							УменьшениеБазисаРасхода = Мин(ТекущийБазисРасхода, Приход[ОписаниеДвижений.БазисРасхода]);
						КонецЕсли;
					Иначе
						Если Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.БазаРегл
						 ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.БазаУпр
						 	Тогда
						 
						 	ДополнительныеСвойства = ПараметрыРасчета.РаспределениеПартий.ДополнительныеСвойства;
							Если НЕ ДополнительныеСвойства.Свойство("УзлыБазыРаспределения") Тогда
								ДополнительныеСвойства.Вставить("УзлыБазыРаспределения", Новый Соответствие);
							КонецЕсли;
							
							УзлыИсточникиБазы = ДополнительныеСвойства.УзлыБазыРаспределения.Получить(Расход.К);
							
							Если УзлыИсточникиБазы = Неопределено Тогда
								УзлыИсточникиБазы = Новый Массив;
							КонецЕсли;
							
							Если УзлыИсточникиБазы.Найти(Приход.К) <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							УзлыИсточникиБазы.Добавить(Приход.К);
							ДополнительныеСвойства.УзлыБазыРаспределения.Вставить(Расход.К, УзлыИсточникиБазы);
								
						КонецЕсли;
						Расход[ОписаниеДвижений.БазисРасхода] = БазисРасходаДоРасчета;
					КонецЕсли;

                ИначеЕсли ОписаниеДвижений.Контекст = "ПодготовкаДанныхДляУчетаНДС"
						И (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Партия
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Выпуск
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СписанияНаВыпуск
						ИЛИ (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Потребление
						И Расход.ТипЗаписи <> Перечисления.ТипыЗаписейПартий.Сторно
						И Расход.ТипЗаписи <> Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад)
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ПотреблениеАвто
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ПотреблениеПроизводство) Тогда

					Расход[ОписаниеДвижений.БазисРасхода] = БазисРасходаДоРасчета;

                ИначеЕсли ОписаниеДвижений.Контекст <> "ПодготовкаДанныхДляУчетаНДС"
						И (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СписанияНаВыпуск
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СписанияНаВыпускПостатейные) Тогда

					Расход[ОписаниеДвижений.БазисРасхода] = БазисРасходаДоРасчета;

				Иначе

					УменьшениеБазисаРасхода = Мин(ТекущийБазисРасхода, Приход[ОписаниеДвижений.БазисРасхода]);
					Расход[ОписаниеДвижений.БазисРасхода] = ТекущийБазисРасхода;

				КонецЕсли;

				Если Расход[ОписаниеДвижений.БазисРасхода] <= 0 Тогда
					Продолжить;
				КонецЕсли;

			КонецЕсли;

			РасчетнаяПартия = ДобавитьИЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Расход, Приход, ЭтоСторно);

			Если Приход[ОписаниеДвижений.БазисПрихода] <= 0 Тогда
				ПриходыКУдалению.Добавить(Приход);
			КонецЕсли;

			Если РасчетнаяПартия.РасчетЗавершен Тогда
				Если ЦепочкаРасхода.Приемники.Количество() > 0 Тогда
					Если ОписаниеДвижений.Свойство("ПоляГруппировки") Тогда

						Если НовыеПриходы = Неопределено Тогда
							НовыеПриходы = Данные.СтрокиПриходов.СкопироватьКолонки();
						КонецЕсли;
						НовыйПриход = НовыеПриходы.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйПриход, РасчетнаяПартия);
						ИнвертироватьПоказатели(НовыйПриход, ОписаниеДвижений.Показатели, НовыйПриход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Сторно
							ИЛИ НовыйПриход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад
							ИЛИ ЕстьСторно И НовыйПриход.Сторно);

					Иначе

						НовыйПриход = Данные.СтрокиПриходов.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйПриход, РасчетнаяПартия);
						ИнвертироватьПоказатели(НовыйПриход, ОписаниеДвижений.Показатели, НовыйПриход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Сторно
							ИЛИ НовыйПриход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад
							ИЛИ ЕстьСторно И НовыйПриход.Сторно);

						Если Данные.Приходы[ИндексРасхода] = Неопределено Тогда
							Данные.Приходы.Вставить(ИндексРасхода, Новый Массив);
						КонецЕсли;

						МассивДанныеПриходы = Данные.Приходы[ИндексРасхода]; //Массив
						МассивДанныеПриходы.Добавить(НовыйПриход);

					КонецЕсли;
				КонецЕсли;
			Иначе
				УдалитьРасчетнуюПартию(ПараметрыРасчета, РасчетнаяПартия);
			КонецЕсли;

			РасчетнаяПартия = Неопределено;

			Если НЕ УменьшатьБазисРасхода
					И Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыБезПартии Тогда
				Если Расход.Знаменатель <= 0 Тогда
					Прервать;
				КонецЕсли;
			ИначеЕсли НЕ УменьшатьБазисРасхода
					И Расход[ОписаниеДвижений.БазисРасхода] <= 0 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;

		Если УменьшатьБазисРасхода
				И КоличествоДвижений <> ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.Количество()
				И УменьшениеБазисаРасхода <> 0 Тогда
			ТекущийБазисРасхода = ТекущийБазисРасхода - УменьшениеБазисаРасхода;
		КонецЕсли;

		Для Каждого Приход Из ПриходыКУдалению Цикл
			Индекс = МассивПриходов.Найти(Приход);
			Если Индекс <> Неопределено Тогда
				МассивПриходов.Удалить(Индекс);
			КонецЕсли;
			Данные.СтрокиПриходов.Удалить(Приход);
		КонецЦикла;

		Если МассивПриходов.Количество() = 0 Тогда

			Данные.Приходы.Удалить(ИндексИсточника);

			Если Данные.Расходы[ИндексИсточника] = Неопределено Тогда
				ЦепочкаПрихода = Данные.ЦепочкиДвижений[ИндексИсточника];
				Если ЦепочкаПрихода <> Неопределено Тогда
					Данные.ЦепочкиДвижений.Удалить(ИндексИсточника);
					Данные.СтрокиЦепочек.Удалить(ЦепочкаПрихода);
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ПриходыКУдалению.Количество() > 0 Тогда
			Данные.Приходы.Вставить(ИндексИсточника, МассивПриходов);
		КонецЕсли;

		Если НЕ УменьшатьБазисРасхода
				И Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыБезПартии Тогда
			Если Расход.Знаменатель <= 0 Тогда
				Прервать;
			КонецЕсли;
		ИначеЕсли НЕ УменьшатьБазисРасхода
				И Расход[ОписаниеДвижений.БазисРасхода] <= 0 Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если УменьшатьБазисРасхода Тогда
		Расход[ОписаниеДвижений.БазисРасхода] = ТекущийБазисРасхода;
	КонецЕсли;

	Если ОписаниеДвижений.Свойство("ПоляГруппировки")
			И НовыеПриходы <> Неопределено И НовыеПриходы.Количество() > 0 Тогда
			
			
		НовыеПриходы.Свернуть(ОписаниеДвижений.ПоляГруппировки, ОписаниеДвижений.ПоляСуммирования);

		Если Данные.Приходы[ИндексРасхода] = Неопределено Тогда
			Данные.Приходы.Вставить(ИндексРасхода, Новый Массив);
		КонецЕсли;

		Для Каждого Строка Из НовыеПриходы Цикл
			НовыйПриход = Данные.СтрокиПриходов.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПриход, Строка);  
			// Заполним базис расхода значением базиса, на который были подобраны партии.
			// - БазисРасходаДоРасчета - полный базис по строке
			// - УменьшениеБазисаРасхода - размер уменьшения базиса расхода, равен = 0 если базис расчета не уменьшался
			// - ТекущийБазисРасхода - базис расхода после подбора партий, но он уменьшается не для всех типов записей
			Если НовыйПриход[ОписаниеДвижений.БазисРасхода] = 0 Тогда
				НовыйПриход[ОписаниеДвижений.БазисРасхода] = БазисРасходаДоРасчета - 
					?(УменьшениеБазисаРасхода <> 0, ТекущийБазисРасхода, 0);
			КонецЕсли;
			МассивДанныеПриходы = Данные.Приходы[ИндексРасхода]; //Массив
			МассивДанныеПриходы.Добавить(НовыйПриход);
		КонецЦикла;

		НовыеПриходы = Неопределено;

	КонецЕсли;

	Если ИсточникиКУдалению.Количество() > 0 Тогда
		Для Каждого ИндексИсточника Из ИсточникиКУдалению Цикл
			ИндексВМассиве = Источники.Найти(ИндексИсточника);
			Если ИндексВМассиве <> Неопределено Тогда
				Источники.Удалить(ИндексВМассиве);
			КонецЕсли;
		КонецЦикла;
		Данные.ЦепочкиДвижений[ИндексРасхода].Источники = Источники;
	КонецЕсли;

	Если (Расход[ОписаниеДвижений.БазисРасхода] > 0
			ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыБезПартии
			И Расход.Знаменатель > 0) И (Источники.Количество() > 0
			ИЛИ НЕ ОписаниеДвижений.Свойство("УдалятьСтрокиБезИсточников")) Тогда

		ИнвертироватьПоказатели(Расход, ОписаниеДвижений.Показатели, ЭтоСторно);

	Иначе

		Данные.Расходы.Удалить(ИндексРасхода);
		Данные.ЦепочкиДвижений.Удалить(ИндексРасхода);
		Данные.СтрокиРасходов.Удалить(Расход);
		Данные.СтрокиЦепочек.Удалить(ЦепочкаРасхода);

	КонецЕсли;

	Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "Выполнено");

КонецФункции

#КонецОбласти

#Область ФоновыйРасчетПартий

// Основные процедуры фонового расчета.
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
// 	ПараметрыФоновогоРасчета - Структура - Описание
// 	МинимальныйНомерЗаданияРасчета - Число -
// 	МаксимальныйНомерЗаданияРасчета - Число -
Процедура ЗапуститьРасчетПартийВФоне(ПараметрыРасчета, ПараметрыФоновогоРасчета,
			МинимальныйНомерЗаданияРасчета, МаксимальныйНомерЗаданияРасчета)
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ОписаниеПодграфовФоновыйРасчет",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Запуск фонового расчета партий №%1';uk='Запуск фонового розрахунку партій № %1'",ОбщегоНазначения.КодОсновногоЯзыка()),
			СокрЛП(МинимальныйНомерЗаданияРасчета - 1)));
	
	ИдентификаторРасчета = Новый УникальныйИдентификатор;
	
	// Описание графа.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ОписаниеПодграфовФоновыйРасчет
	|ИЗ
	|	ОписаниеПодграфов КАК Т
	|ГДЕ
	|	Т.НомерЗаданияРасчета >= &МинимальныйНомерЗаданияРасчета
	|	И Т.НомерЗаданияРасчета <= &МаксимальныйНомерЗаданияРасчета";
	
	Запрос.УстановитьПараметр("МинимальныйНомерЗаданияРасчета",  МинимальныйНомерЗаданияРасчета);
	Запрос.УстановитьПараметр("МаксимальныйНомерЗаданияРасчета", МаксимальныйНомерЗаданияРасчета);
	
	Запрос.Выполнить();
	
	ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(
		ПараметрыРасчета.ОграниченияВыборки.ПорцияРасчетаПартий,
		"КоличествоУзлов",
		"МинимальныйНомерУзла");
	
	РазделитьВременнуюТаблицуНаПорции(
		ПараметрыРасчета,
		ПараметрыРазделения,
		"ОписаниеПодграфовФоновыйРасчет");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НомерПорции,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.НомерПодграфа) КАК КоличествоПодграфов,
	|	СУММА(Т.КоличествоУзлов) КАК КоличествоУзлов,
	|	СУММА(Т.КоличествоСвязей) КАК КоличествоСвязей,
	|	МИНИМУМ(Т.МинимальныйНомерУзла) КАК МинимальныйНомерУзла,
	|	МАКСИМУМ(Т.МаксимальныйНомерУзла) КАК МаксимальныйНомерУзла
	|ИЗ
	|	ОписаниеПодграфовФоновыйРасчет КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.НомерПорции
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.НомерПорции";
	
	ОписаниеПодграфов = Запрос.Выполнить().Выгрузить();
	
	ЗаписатьКэшДанныхРасчетаПартий(
		ИдентификаторРасчета,
		Перечисления.ТипыДанныхКэшаПартионногоУчета.ОписаниеГрафа,
		ОписаниеПодграфов,
		,
		ОписаниеПодграфов[0].МинимальныйНомерУзла,
		ОписаниеПодграфов[ОписаниеПодграфов.Количество() - 1].МаксимальныйНомерУзла);
	
	Запрос.УстановитьПараметр("КоличествоСтрокВТЗ",  ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ);
	
	// Узлы и связи.
	ВыборкаГруппаПодграфов = ОписаниеПодграфов;
	НомерПорции = -1;
	
	Пока СледующийЭлементКоллекции(ВыборкаГруппаПодграфов) Цикл
		
		ПродолжатьВыгрузку = Истина;
		НачальнаяЦепочка = ВыборкаГруппаПодграфов.МинимальныйНомерУзла;
		КонечнаяЦепочка = Неопределено;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Ключ КАК Ключ,
		|	Т.КоличествоСвязей КАК КоличествоСвязей
		|ПОМЕСТИТЬ ВТУзлыТекущегоПодграфа
		|ИЗ
		|	СтатистикаСвязейУзлов КАК Т
		|ГДЕ
		|	Т.Ключ >= &МинимальныйНомерУзла
		|	И Т.Ключ <= &МаксимальныйНомерУзла
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Ключ КАК Ключ,
		|	СУММА(Т2.КоличествоСвязей) КАК КоличествоСвязей
		|ПОМЕСТИТЬ ВТОставшиесяУзлы
		|ИЗ
		|	ВТУзлыТекущегоПодграфа КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУзлыТекущегоПодграфа КАК Т2
		|		ПО Т.Ключ >= Т2.Ключ
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТУзлыТекущегоПодграфа";
		
		Запрос.УстановитьПараметр("МинимальныйНомерУзла",  ВыборкаГруппаПодграфов.МинимальныйНомерУзла);
		Запрос.УстановитьПараметр("МаксимальныйНомерУзла", ВыборкаГруппаПодграфов.МаксимальныйНомерУзла);
		
		Запрос.Выполнить();
		
		Пока ПродолжатьВыгрузку Цикл
			
			НомерПорции = НомерПорции + 1;
			
			Если КонечнаяЦепочка <> Неопределено Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Т.КоличествоСвязей КАК КоличествоСвязей
				|ПОМЕСТИТЬ ВТВыгруженныеСвязи
				|ИЗ
				|	ВТОставшиесяУзлы КАК Т
				|ГДЕ
				|	Т.Ключ = &КонечнаяЦепочка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Т.Ключ КАК Ключ,
				|	Т.КоличествоСвязей - ЕСТЬNULL(Т2.КоличествоСвязей, 0) КАК КоличествоСвязей
				|ПОМЕСТИТЬ ВТНоваяОставшиесяУзлы
				|ИЗ
				|	ВТОставшиесяУзлы КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыгруженныеСвязи КАК Т2
				|		ПО (ИСТИНА)
				|ГДЕ
				|	Т.Ключ > &КонечнаяЦепочка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТВыгруженныеСвязи
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТОставшиесяУзлы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Т.Ключ КАК Ключ,
				|	Т.КоличествоСвязей КАК КоличествоСвязей
				|ПОМЕСТИТЬ ВТОставшиесяУзлы
				|ИЗ
				|	ВТНоваяОставшиесяУзлы КАК Т
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТНоваяОставшиесяУзлы";
				
				Запрос.УстановитьПараметр("КонечнаяЦепочка",  КонечнаяЦепочка);
				
				Запрос.Выполнить();
				
			КонецЕсли;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(Т.Ключ) КАК Ключ
			|ИЗ
			|	ВТОставшиесяУзлы КАК Т
			|ГДЕ
			|	Т.КоличествоСвязей <= &КоличествоСтрокВТЗ//*2";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда 
				КонечнаяЦепочка = Мин(
					НачальнаяЦепочка + ПараметрыРасчета.ОграниченияВыборки.ПорцияРасчетаПартий - 1,
					?(ЗначениеЗаполнено(Выборка.Ключ), Выборка.Ключ, НачальнаяЦепочка));
			Иначе
				КонечнаяЦепочка = НачальнаяЦепочка;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("НачальнаяЦепочка", НачальнаяЦепочка);
			Запрос.УстановитьПараметр("КонечнаяЦепочка",  КонечнаяЦепочка);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	Данные КАК Т
			|ГДЕ
			|	Т.К >= &НачальнаяЦепочка
			|	И Т.К <= &КонечнаяЦепочка
			|УПОРЯДОЧИТЬ ПО
			|	Т.К";
			
			ТаблицаКэша = Запрос.Выполнить().Выгрузить();
			
			ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, "Данные", ТаблицаКэша);
			
			ЗаписатьКэшДанныхРасчетаПартий(
				ИдентификаторРасчета,
				Перечисления.ТипыДанныхКэшаПартионногоУчета.Узлы,
				ТаблицаКэша,
				НомерПорции,
				НачальнаяЦепочка,
				КонечнаяЦепочка);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Ключ,
			|	Т.Источник,
			|	Т.Порядок
			|ПОМЕСТИТЬ ПорцияИсточников
			|ИЗ
			|	Источники КАК Т
			|ГДЕ
			|	Т.Ключ >= &НачальнаяЦепочка
			|	И Т.Ключ <= &КонечнаяЦепочка
			|	И Т.Ключ <> Т.Источник
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	Т.Ключ,
			|	Т.Приемник,
			|	Т.Порядок
			|ПОМЕСТИТЬ ПорцияПриемников
			|ИЗ
			|	Приемники КАК Т
			|ГДЕ
			|	Т.Ключ >= &НачальнаяЦепочка
			|	И Т.Ключ <= &КонечнаяЦепочка
			|	И Т.Ключ <> Т.Приемник
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	Т.Ключ 			КАК Ключ,
			|	Т.СвязанныйКлюч КАК СвязанныйКлюч,
			|	Т.ЭтоИсточник 	КАК ЭтоИсточник
			|ИЗ
			|	(ВЫБРАТЬ
			|		Т.Ключ КАК Ключ,
			|		Т.Порядок КАК Порядок,
			|		Т.Источник КАК СвязанныйКлюч,
			|		ИСТИНА КАК ЭтоИсточник
			|	ИЗ
			|		ПорцияИсточников КАК Т
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Т.Ключ,
			|		Т.Порядок,
			|		Т.Приемник,
			|		ЛОЖЬ
			|	ИЗ
			|		ПорцияПриемников КАК Т) КАК Т
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ключ,
			|	Т.Порядок,
			|	СвязанныйКлюч";
			
			ТаблицаКэша = Запрос.Выполнить().Выгрузить();
			
			ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, "Источники", "ПорцияИсточников");
			ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, "Приемники", "ПорцияПриемников");
			
			УничтожитьВременныеТаблицы(ПараметрыРасчета, "ПорцияИсточников, ПорцияПриемников");
			
			Если ТаблицаКэша.Количество() > 0 Тогда
				
				ЗаписатьКэшДанныхРасчетаПартий(
					ИдентификаторРасчета,
					Перечисления.ТипыДанныхКэшаПартионногоУчета.Связи,
					ТаблицаКэша,
					НомерПорции,
					НачальнаяЦепочка,
					КонечнаяЦепочка);
				
			КонецЕсли;
			
			ПродолжатьВыгрузку = (КонечнаяЦепочка < ВыборкаГруппаПодграфов.МаксимальныйНомерУзла);
			НачальнаяЦепочка = КонечнаяЦепочка + 1;
			
		КонецЦикла;
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТОставшиесяУзлы");
		
	КонецЦикла;
	
	// Параметры фонового расчета.
	ПараметрыФоновогоРасчета.Вставить("ИдентификаторРасчета",    ИдентификаторРасчета);
	ПараметрыФоновогоРасчета.Вставить("МаксимальныйНомерПорции", НомерПорции);
	
	ЗаписатьКэшДанныхРасчетаПартий(
		ИдентификаторРасчета,
		Перечисления.ТипыДанныхКэшаПартионногоУчета.ПараметрыРасчета,
		ПараметрыФоновогоРасчета);
	
	// Запустим задание расчета.
	ПараметрыОбработчикаЗадания = Новый Массив;
	ПараметрыОбработчикаЗадания.Добавить(ИдентификаторРасчета);
	
	КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ФЗ №%1 - %2 %3 (%4)';uk='ФЗ №%1 - %2 %3 (%4)'",ОбщегоНазначения.КодОсновногоЯзыка()),
		СокрЛП(МинимальныйНомерЗаданияРасчета - 1),
		НСтр("ru='Фоновый расчет партий';uk='Фоновий розрахунок партій'",ОбщегоНазначения.КодОсновногоЯзыка()),
		ПараметрыФоновогоРасчета.МестоВызоваРасчета,
		СокрЛП(ИдентификаторРасчета));
	
	НовоеЗадание = ФоновыеЗадания.Выполнить(
		"РасчетСебестоимостиПрикладныеАлгоритмы.РассчитатьПартииВФоне",
		ПараметрыОбработчикаЗадания,
		КлючЗадания,
        НСтр("ru='Партионный учет версии 2.5: расчет порции данных.';uk='Партіонний облік версії 2.5: розрахунок порції даних.'",ОбщегоНазначения.КодОсновногоЯзыка()));
		
	СтрокаОписанияЗадания = ПараметрыРасчета.ТаблицаЗаданийРасчета.Добавить();
	СтрокаОписанияЗадания.ИдентификаторЗадания = НовоеЗадание.УникальныйИдентификатор;
	СтрокаОписанияЗадания.КлючЗадания 		   = КлючЗадания;
	СтрокаОписанияЗадания.ИдентификаторРасчета = ИдентификаторРасчета;
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ОписаниеПодграфовФоновыйРасчет");
	
КонецПроцедуры

Процедура РассчитатьПартииВФоне(ИдентификаторРасчета) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	// Получим параметры расчета.
	ПараметрыРасчета = ПрочитатьКэшДанныхРасчетаПартий(Неопределено, ИдентификаторРасчета, Перечисления.ТипыДанныхКэшаПартионногоУчета.ПараметрыРасчета);

	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	ПараметрыРасчета.Вставить("КоличествоПорцийРезультата", 0);

	ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, Ложь);
	ИнициализироватьЗамерРаспределенияПартий(ПараметрыРасчета);

	// Получим описание подграфов.
	ОписаниеПодграфов = ПрочитатьКэшДанныхРасчетаПартий(ПараметрыРасчета, ИдентификаторРасчета, Перечисления.ТипыДанныхКэшаПартионногоУчета.ОписаниеГрафа);

	ВыборкаГруппаПодграфов = ОписаниеПодграфов;

	// Рассчитаем партии.
	РассчитатьПартииПоГруппамПодграфов(ПараметрыРасчета, ВыборкаГруппаПодграфов);

	// Закончим расчет.
	КэшироватьРасчетныеПартииПриРасчетеВФоне(ПараметрыРасчета);

	ЗаписатьКэшДанныхРасчетаПартий(ПараметрыРасчета.ИдентификаторРасчета, Перечисления.ТипыДанныхКэшаПартионногоУчета.СтатистикаРасчета, ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета);

КонецПроцедуры

Процедура КэшироватьРасчетныеПартииПриРасчетеВФоне(ПараметрыРасчета)

	РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии;

	Если РасчетныеПартии.Количество() > 0 Тогда

		ЗаписатьКэшДанныхРасчетаПартий(ПараметрыРасчета.ИдентификаторРасчета, Перечисления.ТипыДанныхКэшаПартионногоУчета.РезультатРасчета, РасчетныеПартии, ПараметрыРасчета.КоличествоПорцийРезультата);

		ПараметрыРасчета.КоличествоПорцийРезультата = ПараметрыРасчета.КоличествоПорцийРезультата
			+ 1;

		РасчетныеПартии.Очистить();

	КонецЕсли;

КонецПроцедуры

// Получает результаты фоновых расчетов партий.
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
Процедура ПолучитьРезультатыФоновыхРасчетовПартий(ПараметрыРасчета)

	КэшироватьРаспределенныеПартии(ПараметрыРасчета, Ложь);

	ПрерватьРасчет = Ложь;

	Пока ПараметрыРасчета.ТаблицаЗаданийРасчета.Количество() > 0 Цикл

		СтрокиКУдалению = Новый Массив;
		АктивныеЗадания = Новый Массив;

		Для Каждого СтрокаОписанияЗадания Из ПараметрыРасчета.ТаблицаЗаданийРасчета Цикл

			Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(СтрокаОписанияЗадания.ИдентификаторЗадания);

			ТекстДляПротокола = "";

			Если Задание = Неопределено Тогда

			// Задание не найдено в списке фоновых заданий.
				СтрокиКУдалению.Добавить(СтрокаОписанияЗадания);

				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Фоновое задание %1 не найдено. Вероятно задание завершено аварийно, см. Журнал регистрации.';uk='Фонове завдання %1 не знайдено. Ймовірно завдання завершено аварійно, див. Журнал реєстрації.'",ОбщегоНазначения.КодОсновногоЯзыка()), """"
					+ СокрЛП(СтрокаОписанияЗадания.КлючЗадания) + """");

				ПрерватьРасчет = Истина;

			ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно
					ИЛИ Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда

					// Состояние задания "ЗавершеноАварийно" или "Отменено".
				СтрокиКУдалению.Добавить(СтрокаОписанияЗадания);

				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Фоновое задание %1 %2:
|%3'
|;uk='Фонове завдання %1 %2: 
|%3'",ОбщегоНазначения.КодОсновногоЯзыка()), """" + СокрЛП(Задание.Ключ)
					+ """", ?(Задание.Состояние = СостояниеФоновогоЗадания.Отменено, НСтр("ru='отменено';uk='скасовано'",ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru='завершено аварийно';uk='завершено аварійно'",ОбщегоНазначения.КодОсновногоЯзыка())), ?(Задание.ИнформацияОбОшибке = Неопределено, НСтр("ru='<Нет описания ошибки>';uk='<Немає опису помилки>'",ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)));

				ПрерватьРасчет = Истина;

			ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда

				СтрокиКУдалению.Добавить(СтрокаОписанияЗадания);

				// Получим результаты расчета.
				КоличествоДанных = КоличествоРезультатовРасчетаВКэшеДанныхРасчетаПартий(СтрокаОписанияЗадания.ИдентификаторРасчета);

				Для НомерПорции = 0 По КоличествоДанных Цикл

					ТаблицаКэша = ПрочитатьКэшДанныхРасчетаПартий(ПараметрыРасчета, СтрокаОписанияЗадания.ИдентификаторРасчета, Перечисления.ТипыДанныхКэшаПартионногоУчета.РезультатРасчета, НомерПорции);

					ПараметрыРасчета.РаспределениеПартий.Вставить("РасчетныеПартии", ТаблицаКэша);

					КэшироватьРаспределенныеПартии(ПараметрыРасчета, Ложь);

				КонецЦикла;

				// Получим статистику расчета.
				ТаблицаКэша = ПрочитатьКэшДанныхРасчетаПартий(ПараметрыРасчета, СтрокаОписанияЗадания.ИдентификаторРасчета, Перечисления.ТипыДанныхКэшаПартионногоУчета.СтатистикаРасчета, , , , Ложь);

				Если ЗначениеЗаполнено(ТаблицаКэша) Тогда

					Для Каждого СтрокаТаблицы Из ТаблицаКэша Цикл

						НоваяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);

					КонецЦикла;

				КонецЕсли;

			Иначе

			// Задание еще активно, ничего с ним делать не нужно.
				АктивныеЗадания.Добавить(Задание);

			КонецЕсли;

			Если ЗначениеЗаполнено(ТекстДляПротокола) Тогда

				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий, ТекстДляПротокола);

				ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, , НСтр("ru='При формировании движений по партиям диагностированы ошибки';uk='При формуванні рухів по партіях діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола);

			КонецЕсли;

		КонецЦикла;

		Для Каждого СтрокаОписанияЗадания Из СтрокиКУдалению Цикл

			ОчиститьКэшДанныхРасчетаПартий(СтрокаОписанияЗадания.ИдентификаторРасчета); // очистим записи регистра для данного задания
			ПараметрыРасчета.ТаблицаЗаданийРасчета.Удалить(СтрокаОписанияЗадания);

		КонецЦикла;

		Если СтрокиКУдалению.Количество() = 0 Тогда

		// Если все задания еще активны, то сделаем паузу перед следующим циклом проверки заданий.
			Попытка
				ФоновыеЗадания.ОжидатьЗавершенияВыполнения(АктивныеЗадания, 1);
			Исключение
				СтрокиКУдалению = Неопределено; // для исключения срабатывания проверки стандарта 499 
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Если ПрерватьРасчет Тогда

		ТекстДляПротокола = ТекстИсключениеДляРегистрацииПроблемы(НСтр("ru='При формировании движений по партиям диагностированы ошибки';uk='При формуванні рухів по партіях діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()));

		ВызватьИсключение ТекстДляПротокола;

	КонецЕсли;

КонецПроцедуры

// Процедуры работы с регистром кэша при фоновом расчете.
Процедура ЗаписатьКэшДанныхРасчетаПартий(ИдентификаторРасчета, ТипДанных,
		Данные, НомерПорцииДанных = 0, МинимальныйНомерУзла = 0,
		МаксимальныйНомерУзла = 0)

	МенеджерЗаписи = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьМенеджерЗаписи();

	МенеджерЗаписи.ИдентификаторРасчета = ИдентификаторРасчета;
	МенеджерЗаписи.ТипДанных = ТипДанных;
	МенеджерЗаписи.НомерПорцииДанных = НомерПорцииДанных;
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
	МенеджерЗаписи.МинимальныйНомерУзла = МинимальныйНомерУзла;
	МенеджерЗаписи.МаксимальныйНомерУзла = МаксимальныйНомерУзла;

	МенеджерЗаписи.Записать(Ложь);

КонецПроцедуры

Функция ПрочитатьКэшДанныхРасчетаПартий(ПараметрыРасчета,
		ИдентификаторРасчета, ТипДанных, НомерПорцииДанных = 0,
		МинимальныйНомерУзла = 0, МаксимальныйНомерУзла = 0,
		ЗаписьДолжнаСуществовать = Истина)

	МенеджерЗаписи = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьМенеджерЗаписи();

	МенеджерЗаписи.ИдентификаторРасчета = ИдентификаторРасчета;
	МенеджерЗаписи.ТипДанных = ТипДанных;
	МенеджерЗаписи.НомерПорцииДанных = НомерПорцииДанных;

	МенеджерЗаписи.Прочитать();

	Если НЕ МенеджерЗаписи.Выбран() Тогда

		Если НЕ ЗаписьДолжнаСуществовать Тогда
			Возврат Неопределено;
		КонецЕсли;

		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найдена запись в кэше данных партионного учета:
|Идентификатор расчета: %1
|Тип данных: %2
|Номер порции: %3'
|;uk='Не знайдено запис в кеші даних партіонного обліку: 
|Ідентифікатор розрахунку: %1 
|Тип даних: %2 
|Номер порції: %3'",ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(ИдентификаторРасчета), СокрЛП(ТипДанных), СокрЛП(НомерПорцииДанных));

		Если ЗначениеЗаполнено(ПараметрыРасчета)
				И НЕ ЭтоФоновыйРасчетПартий(ПараметрыРасчета) Тогда

			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий, ТекстДляПротокола);

			ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, , НСтр("ru='При формировании движений по партиям диагностированы ошибки';uk='При формуванні рухів по партіях діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола);

			ТекстДляПротокола = ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

		КонецЕсли;

		ВызватьИсключение ТекстДляПротокола;

	КонецЕсли;

	МинимальныйНомерУзла = МенеджерЗаписи.МинимальныйНомерУзла;
	МаксимальныйНомерУзла = МенеджерЗаписи.МаксимальныйНомерУзла;

	Возврат МенеджерЗаписи.Данные.Получить();

КонецФункции

Процедура ОчиститьКэшДанныхРасчетаПартий(ИдентификаторРасчета = Неопределено) Экспорт

	НаборЗаписей = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьНаборЗаписей();

	Если ЗначениеЗаполнено(ИдентификаторРасчета) Тогда
		НаборЗаписей.Отбор.ИдентификаторРасчета.Установить(ИдентификаторРасчета);
	КонецЕсли;

	НаборЗаписей.Записать(Истина);

КонецПроцедуры

Функция КоличествоРезультатовРасчетаВКэшеДанныхРасчетаПартий(ИдентификаторРасчета)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(Т.НомерПорцииДанных), -1) КАК НомерПорцииДанных
		|ИЗ
		|	РегистрСведений.КэшДанныхПартионногоУчета КАК Т
		|ГДЕ
		|	Т.ИдентификаторРасчета = &ИдентификаторРасчета
		|	И Т.ТипДанных = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхКэшаПартионногоУчета.РезультатРасчета)";

	Запрос.УстановитьПараметр("ИдентификаторРасчета", ИдентификаторРасчета);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.НомерПорцииДанных;

КонецФункции

// Вспомогательные процедуры фонового расчета.
Функция СформироватьПараметрыФоновогоРасчета(ПараметрыРасчета)

	ВсеСсылки = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
	КопируемыеТипы = Новый ОписаниеТипов("Строка, Дата, Число, Булево, Массив, Соответствие");
	КопируемыеСтруктуры = Новый Структура("РаспределениеПартий, РасчетныйПериод, ФО, УчетныеПолитики");

	ПараметрыФоновогоРасчета = Новый Структура;

	Для Каждого КлючИЗначение Из ПараметрыРасчета Цикл

		ТипПараметра = ТипЗнч(КлючИЗначение.Значение);

		Если КопируемыеТипы.СодержитТип(ТипПараметра)
				ИЛИ ВсеСсылки.СодержитТип(ТипПараметра)
				ИЛИ (ТипПараметра = Тип("Структура")
				И КопируемыеСтруктуры.Свойство(КлючИЗначение.Ключ)) Тогда
			ПараметрыФоновогоРасчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;

	КонецЦикла;

	ПараметрыФоновогоРасчета.МестоВызоваРасчета = РасчетСебестоимостиПротоколРасчета.ПредставлениеТекущегоЭтапа(ПараметрыРасчета);

	УстановитьТехнологическиеПараметрыРасчета(ПараметрыФоновогоРасчета);

	Возврат ПараметрыФоновогоРасчета;

КонецФункции

Функция ЭтоФоновыйРасчетПартий(ПараметрыРасчета)
	Возврат ЗначениеЗаполнено(ПараметрыРасчета.ИдентификаторРасчета);
КонецФункции

#КонецОбласти

#Область ВыборкаДанныхДляРасчета

Функция СледующаяПорцияПартийДляРасчета(ПараметрыРасчета,
		ВыборкаГруппаПодграфов, Данные)

	Запрос = Новый Запрос;

	Данные.ПараметрыОбхода.НачальнаяЦепочка = Данные.ПараметрыОбхода.КонечнаяЦепочка
		+ 1;

	Если НЕ ЭтоФоновыйРасчетПартий(ПараметрыРасчета) Тогда

		Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;

		Запрос.Текст = "ВЫБРАТЬ
			|	*
			|ИЗ
			|	Данные КАК ДД
			|ГДЕ
			|	ДД.К >= &НачальнаяЦепочка
			|	И ДД.К <= &КонечнаяЦепочка
			|УПОРЯДОЧИТЬ ПО
			|	ДД.К";

		Данные.ПараметрыОбхода.КонечнаяЦепочка = Мин(Данные.ПараметрыОбхода.КонечнаяЦепочка
			+ ПараметрыРасчета.ОграниченияВыборки.ПорцияРасчетаПартий, ВыборкаГруппаПодграфов.МаксимальныйНомерУзла);

		Запрос.УстановитьПараметр("НачальнаяЦепочка", Данные.ПараметрыОбхода.НачальнаяЦепочка);
		Запрос.УстановитьПараметр("КонечнаяЦепочка", Данные.ПараметрыОбхода.КонечнаяЦепочка);

		ВыборкаДанных = Запрос.Выполнить().Выбрать();

		ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, "Данные", ВыборкаДанных);

	Иначе

		Если Данные.ПараметрыОбхода.НомерПорции > ПараметрыРасчета.МаксимальныйНомерПорции Тогда
			Возврат Неопределено;
		КонецЕсли;

		ВыборкаДанных = ПрочитатьКэшДанныхРасчетаПартий(ПараметрыРасчета, ПараметрыРасчета.ИдентификаторРасчета, Перечисления.ТипыДанныхКэшаПартионногоУчета.Узлы, Данные.ПараметрыОбхода.НомерПорции, Данные.ПараметрыОбхода.НачальнаяЦепочка, // значение переменной изменяется
		Данные.ПараметрыОбхода.КонечнаяЦепочка); // значение переменной изменяется
	КонецЕсли;

	СледующаяПорцияЦепочекДляРасчета(ПараметрыРасчета, Данные, Запрос);

	Данные.ПараметрыОбхода.НомерПорции = Данные.ПараметрыОбхода.НомерПорции + 1;

	Возврат ВыборкаДанных;

КонецФункции

Процедура СледующаяПорцияЦепочекДляРасчета(ПараметрыРасчета, Данные, Запрос)

	Если НЕ ЭтоФоновыйРасчетПартий(ПараметрыРасчета) Тогда

		ТаблицыСвязейУзлов = Новый Структура("Источники, Приемники", "Источник", "Приемник");

		ШаблонЗапроса = "ВЫБРАТЬ
			|	Т.Ключ КАК Ключ,
			|	Т.Порядок КАК Порядок,
			|	Т.%2 КАК %2
			|ИЗ
			|	%1 КАК Т
			|ГДЕ
			|	Т.Ключ >= &НачальнаяЦепочка
			|	И Т.Ключ <= &КонечнаяЦепочка
			|	И Т.Ключ <> Т.%2
			|	
			|УПОРЯДОЧИТЬ ПО
			|	Ключ,
			|	Т.Порядок,
			|	%2";

		Для Каждого ОписаниеТаблицы Из ТаблицыСвязейУзлов Цикл

			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, ОписаниеТаблицы.Ключ, ОписаниеТаблицы.Значение);

			Строка = Неопределено;
			ТекущийКлюч = Неопределено;

			Выборка = Запрос.Выполнить().Выбрать();

			ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, ОписаниеТаблицы.Ключ, Выборка);

			Пока Выборка.Следующий() Цикл

				Ключ = Выборка.Ключ;

				Если ТекущийКлюч <> Ключ Тогда

					Если ТекущийКлюч <> Неопределено Тогда
						Данные.ЦепочкиДвижений.Вставить(ТекущийКлюч, Строка);
					КонецЕсли;

					ТекущийКлюч = Ключ;

					Строка = Данные.ЦепочкиДвижений[ТекущийКлюч];
					Если Строка = Неопределено Тогда
						Строка = Данные.СтрокиЦепочек.Добавить();
					КонецЕсли;

				КонецЕсли;

				ВложенныйМассив = Строка[ОписаниеТаблицы.Ключ]; // Массив 
				ВложенныйМассив.Добавить(Выборка[ОписаниеТаблицы.Значение]);

			КонецЦикла;

			Если ТекущийКлюч <> Неопределено Тогда
				Данные.ЦепочкиДвижений.Вставить(ТекущийКлюч, Строка);
			КонецЕсли;

		КонецЦикла;

	Иначе

		ТаблицаКэша = ПрочитатьКэшДанныхРасчетаПартий(ПараметрыРасчета, ПараметрыРасчета.ИдентификаторРасчета, Перечисления.ТипыДанныхКэшаПартионногоУчета.Связи, Данные.ПараметрыОбхода.НомерПорции, , , Ложь);

		Если НЕ ЗначениеЗаполнено(ТаблицаКэша) Тогда
			Возврат; // у этой порции узлов нет связей (тривиальные графы)
		КонецЕсли;

		Строка = Неопределено;
		ТекущийКлюч = Неопределено;

		Для Каждого ТекущаяСтрокаКэша Из ТаблицаКэша Цикл

			Ключ = ТекущаяСтрокаКэша.Ключ;

			Если ТекущийКлюч <> Ключ Тогда

				Если ТекущийКлюч <> Неопределено Тогда
					Данные.ЦепочкиДвижений.Вставить(ТекущийКлюч, Строка);
				КонецЕсли;

				ТекущийКлюч = Ключ;

				Строка = Данные.ЦепочкиДвижений[ТекущийКлюч];
				Если Строка = Неопределено Тогда
					Строка = Данные.СтрокиЦепочек.Добавить();
				КонецЕсли;

			КонецЕсли;

			ВложенныйМассив = Строка[?(ТекущаяСтрокаКэша.ЭтоИсточник, "Источники", "Приемники")]; // Массив 
			ВложенныйМассив.Добавить(ТекущаяСтрокаКэша.СвязанныйКлюч);

		КонецЦикла;

		Если ТекущийКлюч <> Неопределено Тогда
			Данные.ЦепочкиДвижений.Вставить(ТекущийКлюч, Строка);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция СледующийЭлементКоллекции(Данные)

	Если ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда

		Если Данные.Количество() > 0 Тогда
			Данные = Данные[0];
			Возврат Истина;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Данные) = Тип("СтрокаТаблицыЗначений") Тогда

		ИсходнаяТаблица = Данные.Владелец();
		Индекс = ИсходнаяТаблица.Индекс(Данные);

		Если Индекс < ИсходнаяТаблица.Количество() - 1 Тогда
			Данные = ИсходнаяТаблица[Индекс + 1];
			Возврат Истина;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Данные) = Тип("ВыборкаИзРезультатаЗапроса") Тогда

		Если Данные.Следующий() Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область СортировкаДанных

Процедура СортироватьИсточникиПоЗначениямПолей(Источники, ЗначенияПолей,
		Приходы, Расходы, РегистраторПриемника, СортироватьПоЛИФО)

	Список = Новый СписокЗначений;

	ИндексЭлементаМассива = -1;

	Для Каждого ИндексИсточника Из Источники Цикл

		ИндексЭлементаМассива = ИндексЭлементаМассива + 1;

		МассивПриходов = Приходы[ИндексИсточника];

		Если МассивПриходов <> Неопределено И МассивПриходов.Количество() = 0 Тогда
			Сдвиг = 0;
		Иначе

			Сдвиг = ЗначенияПолей.Количество();

			Для Каждого ПолеСортировки Из ЗначенияПолей Цикл
				Если Не ЗначениеЗаполнено(ПолеСортировки.Значение) Тогда
					Продолжить;
				КонецЕсли;

				Если МассивПриходов <> Неопределено Тогда
					ЗначениеПоля = МассивПриходов[0][ПолеСортировки.Ключ];
					РегистраторИсточника = МассивПриходов[0].Регистратор;
				ИначеЕсли Расходы[ИндексИсточника] <> Неопределено Тогда
					ЗначениеПоля = Расходы[ИндексИсточника][ПолеСортировки.Ключ];
					РегистраторИсточника = Расходы[ИндексИсточника].Регистратор;
				Иначе
					Прервать;
				КонецЕсли;

				Если РегистраторИсточника = РегистраторПриемника Тогда
					Продолжить; // не делаем сортировку источников, у которых Регистратор совпадает с приемником для исключения зацикливания
				ИначеЕсли ЗначениеПоля = ПолеСортировки.Значение Тогда
					Сдвиг = Сдвиг - 1;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

		Список.Добавить(ИндексИсточника, Формат(ИндексЭлементаМассива + Сдвиг
			* Источники.Количество(), "ЧЦ=15; ЧДЦ=; ЧВН=; ЧГ="));

	КонецЦикла;

	Если Список.Количество() > 0 Тогда
		Если СортироватьПоЛИФО Тогда
			Список.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
		Иначе
			Список.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		КонецЕсли;
		Источники = Список.ВыгрузитьЗначения();
	КонецЕсли;

КонецПроцедуры

Процедура СортироватьПриходыПоЛИФО(ПолеПорядка, МассивПриходов)

	Список = Новый СписокЗначений;

	Для Каждого Приход Из МассивПриходов Цикл
		Список.Добавить(Приход, Приход[ПолеПорядка]);
	КонецЦикла;

	Список.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	МассивПриходов = Список.ВыгрузитьЗначения();

КонецПроцедуры

Процедура СортироватьИсточникиПоФИФО_ЛИФО(Источники, ПолеПорядка, Приходы,
		Расходы, СортироватьПоЛИФО)

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИндексИсточника");
	Таблица.Колонки.Добавить("ЗначениеПоля");

	Для Каждого ИндексИсточника Из Источники Цикл
		МассивПриходов = Приходы[ИндексИсточника];
		Если МассивПриходов <> Неопределено И МассивПриходов.Количество() > 0 Тогда
			ЗначениеПоля = МассивПриходов[0][ПолеПорядка];
		ИначеЕсли Расходы[ИндексИсточника] <> Неопределено Тогда
			ЗначениеПоля = Расходы[ИндексИсточника][ПолеПорядка];
		Иначе
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ИндексИсточника = ИндексИсточника;
		НоваяСтрока.ЗначениеПоля = ЗначениеПоля;
	КонецЦикла;
	Если СортироватьПоЛИФО Тогда
		Таблица.Сортировать("ЗначениеПоля Убыв");
	Иначе
		Таблица.Сортировать("ЗначениеПоля");
	КонецЕсли;
	Источники = Таблица.ВыгрузитьКолонку("ИндексИсточника");

	Таблица.Очистить();

КонецПроцедуры

#КонецОбласти

#Область ДействияСТаблицейРасчетныхПартий

Функция ДобавитьИЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Расход, Приход,
		Инвертировать = Ложь)

	Контекст = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений.Контекст;
	Показатели = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений.Показатели;

	РасчетнаяПартия = ДобавитьРасчетнуюПартию(ПараметрыРасчета);

	ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход);

	ИнвертироватьПоказатели(РасчетнаяПартия, Показатели, Инвертировать);

	Возврат РасчетнаяПартия;

КонецФункции

// Добавляет новую строку в таблицу расчетных партий и заполняет необходимые поля.
//
Функция ДобавитьРасчетнуюПартию(ПараметрыРасчета,
		ДанныеЗаполнения = Неопределено, ВыполнятьКэширование = Истина) Экспорт

	РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии;

	// При необходимости кэшируем сформированную порцию партий в таблицу движений по регистру.
	// Кэширование не нужно выполнять в случае, если эта процедура вызывается из процедуры вида ЗаполнитьРасчетнуюПартию...
	Если РасчетныеПартии.Количество() >= ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ
			И ВыполнятьКэширование Тогда

		Если НЕ ЭтоФоновыйРасчетПартий(ПараметрыРасчета) Тогда

			КэшироватьРаспределенныеПартии(ПараметрыРасчета, Ложь);

		Иначе

			КэшироватьРасчетныеПартииПриРасчетеВФоне(ПараметрыРасчета);

		КонецЕсли;

	КонецЕсли;

	// Добавим строку в таблицу распределенных партий
	РасчетнаяПартия = РасчетныеПартии.Добавить();

	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(РасчетнаяПартия, ДанныеЗаполнения);
	КонецЕсли;

	ЗафиксироватьВЗамереДобавлениеРасчетнойПартии(ПараметрыРасчета);

	Возврат РасчетнаяПартия;

КонецФункции

// Удаляет указанную строку из таблицы партий.
//
Процедура УдалитьРасчетнуюПартию(ПараметрыРасчета, РасчетнаяПартия)

	РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии;
	РасчетныеПартии.Удалить(РасчетнаяПартия);

	ЗафиксироватьВЗамереУдалениеРасчетнойПартии(ПараметрыРасчета);

КонецПроцедуры

#КонецОбласти

#Область ПрочиеВспомогательныеМетоды

// Возвращает массив типов записей, используемых в описании цепочек.
//
Функция ИспользуемыеТипыЗаписейВЦепочках(ОписаниеЦепочек, ВПриемниках = Истина,
		ВИсточниках = Истина, ДобавлятьВРезультатПустойТипЗаписи = Истина) Экспорт

	ТипыЗаписей = Новый Массив;

	Для Каждого КлючИЗначение Из ОписаниеЦепочек Цикл

		Если ВПриемниках И ВИсточниках Тогда
			ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТипыЗаписей, КлючИЗначение.Ключ);
		ИначеЕсли ВПриемниках
				И КлючИЗначение.Значение.ТипыПриемников.Количество() = 0
				И КлючИЗначение.Значение.ТипыИсточников.Количество() = 0 Тогда
			ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТипыЗаписей, КлючИЗначение.Ключ);
		КонецЕсли;

		Если ВПриемниках Тогда
			Для Каждого Приемники Из КлючИЗначение.Значение.ТипыПриемников Цикл
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТипыЗаписей, Приемники.Ключ);
			КонецЦикла;
		КонецЕсли;

		Если ВИсточниках Тогда
			Для Каждого Источники Из КлючИЗначение.Значение.ТипыИсточников Цикл
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТипыЗаписей, Источники.Ключ);
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

	Если ДобавлятьВРезультатПустойТипЗаписи Тогда
		ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТипыЗаписей, Перечисления.ТипыЗаписейПартий.ПустаяСсылка());
	КонецЕсли;

	Возврат ТипыЗаписей;

КонецФункции

// Используется также при распределении приходов на расходы
//
Процедура ИнвертироватьПоказатели(Запись, ПереченьПоказателей,
		Инвертировать) Экспорт

	Если Не Инвертировать Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Поле Из Новый Структура(ПереченьПоказателей) Цикл
		Запись[Поле.Ключ] = -Запись[Поле.Ключ];
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЗамерыРасчета

// Описание
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * КоличествоПодграфов - Число -
// * КоличествоУзлов - Число -
// * ТекущаяГлубина - Число -
// * МаксимальнаяГлубина - Число -
// * СформированоЗаписей - Число -
// * УдаленоЗаписей - Число -
// * КоличествоДанных - Число -
// * РезультатыОбхода - Структура -
// * СтекВызовов - Массив -
Функция ИнициализироватьЗамерРаспределенияПартий(ПараметрыРасчета) Экспорт

	СтатистикаРасчета = Новый ТаблицаЗначений;

	СтатистикаРасчета.Колонки.Добавить("КоличествоПодграфов", Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("КоличествоУзлов", Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("ТекущаяГлубина", Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("МаксимальнаяГлубина", Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("СформированоЗаписей", Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("УдаленоЗаписей", Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("КоличествоДанных", Новый ОписаниеТипов("Число")); // здесь будем накапливать данные для замера производительности
	СтатистикаРасчета.Колонки.Добавить("РезультатыОбхода", Новый ОписаниеТипов("Структура"));
	СтатистикаРасчета.Колонки.Добавить("СтекВызовов");

	ПараметрыРасчета.РаспределениеПартий.Вставить("СтатистикаРасчета", СтатистикаРасчета);

	Возврат СтатистикаРасчета;

КонецФункции

// Начало замера расчета группф подграфов.
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
// 	Выборка - ВыборкаИзРезультатаЗапроса -
Процедура НачалоЗамераРасчетаГруппыПодграфов(ПараметрыРасчета, Выборка)

	НоваяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Добавить();

	НоваяСтрока.КоличествоПодграфов = Выборка.КоличествоПодграфов;
	НоваяСтрока.КоличествоУзлов = Выборка.МаксимальныйНомерУзла
		- Выборка.МинимальныйНомерУзла + 1;
	НоваяСтрока.СтекВызовов = Новый Массив(ПараметрыРасчета.ОграниченияВыборки.МаксимальнаяДлинаЦепочки
		+ 1);

КонецПроцедуры

Функция ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, РезультатРасчета)
	Перем Количество;

	ТекущаяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество()
		- 1];

	Если НЕ ТекущаяСтрока.РезультатыОбхода.Свойство(РезультатРасчета, Количество) Тогда
		Количество = 0;
	КонецЕсли;

	ТекущаяСтрока.РезультатыОбхода.Вставить(РезультатРасчета, Количество + 1);

	ТекущаяСтрока.ТекущаяГлубина = ТекущаяСтрока.ТекущаяГлубина - 1;

	Если ТекущаяСтрока.ТекущаяГлубина >= 0 Тогда
		ТекущаяСтрока.СтекВызовов[ТекущаяСтрока.ТекущаяГлубина] = Неопределено;
	КонецЕсли;

	Возврат РезультатРасчета;

КонецФункции

Процедура ЗафиксироватьВЗамереДобавлениеРасчетнойПартии(ПараметрыРасчета)

	ТекущаяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество()
		- 1];

	ТекущаяСтрока.СформированоЗаписей = ТекущаяСтрока.СформированоЗаписей + 1;

КонецПроцедуры

Процедура ЗафиксироватьВЗамереУдалениеРасчетнойПартии(ПараметрыРасчета)

	ТекущаяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество()
		- 1];

	ТекущаяСтрока.УдаленоЗаписей = ТекущаяСтрока.УдаленоЗаписей + 1;

КонецПроцедуры

Процедура ЗавершитьЗамерРаспределенияПартий(ПараметрыРасчета)

// Добавим в протокол расчета партий собранную информацию о текущем расчете цепочек.
	ОписаниеРасчета = НСтр("ru='Описание результатов обхода цепочек (графа):';uk='Опис результатів обходу ланцюжків (графа):'",ОбщегоНазначения.КодОсновногоЯзыка());

	ШаблонОписаниеГруппыПодграфов = "
		|	"
		+ НСтр("ru='%1. Подграфов: %2, узлов: %3, глубина обхода: %4, сформировано записей: %5, в т.ч. не рассчитано %6.
|	Результаты расчета цепочек: %7'
|;uk=' %1. Підграфів: %2, вузлів: %3, глибина обходу: %4, сформовано записів: %5, в т.ч. не розраховано %6. 
|Результати розрахунку ланцюжків: %7'",ОбщегоНазначения.КодОсновногоЯзыка());

	НомерСтроки = 0;

	Для Каждого ТекущаяСтрока Из ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета Цикл

		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, ТекущаяСтрока.КоличествоДанных);

		НомерСтроки = НомерСтроки + 1;

		ОписаниеРезультатов = "";

		Для Каждого КлючИЗначение Из ТекущаяСтрока.РезультатыОбхода Цикл
			ОписаниеРезультатов = ОписаниеРезультатов
				+ ?(ОписаниеРезультатов = "", "", ", ") + """" + КлючИЗначение.Ключ
				+ """ - " + СокрЛП(КлючИЗначение.Значение);
		КонецЦикла;

		ОписаниеРасчета = ОписаниеРасчета
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписаниеГруппыПодграфов, СокрЛП(НомерСтроки), СокрЛП(ТекущаяСтрока.КоличествоПодграфов), СокрЛП(ТекущаяСтрока.КоличествоУзлов), СокрЛП(ТекущаяСтрока.МаксимальнаяГлубина), СокрЛП(ТекущаяСтрока.СформированоЗаписей), СокрЛП(ТекущаяСтрока.УдаленоЗаписей), ?(ОписаниеРезультатов = "", НСтр("ru='не выполнялся (нет цепочек)';uk='не виконувався (немає ланцюжків)'",ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеРезультатов));

	КонецЦикла;

	РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, ОписаниеРасчета);

	ПараметрыРасчета.РаспределениеПартий.Удалить("СтатистикаРасчета");

КонецПроцедуры

Функция НачалоЗамераРасчетаЦепочек(ПараметрыРасчета, Данные, ИндексРасхода)

	ТекущаяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество()
		- 1];

	ТекущаяСтрока.ТекущаяГлубина = ТекущаяСтрока.ТекущаяГлубина + 1;

	ТекущаяСтрока.МаксимальнаяГлубина = Макс(ТекущаяСтрока.МаксимальнаяГлубина, ТекущаяСтрока.ТекущаяГлубина);

	Если ТекущаяСтрока.ТекущаяГлубина > 0 Тогда
		ТекущаяСтрока.СтекВызовов[ТекущаяСтрока.ТекущаяГлубина - 1] = ИндексРасхода;
	КонецЕсли;

	ЕстьПереполнениеСтека = (ТекущаяСтрока.ТекущаяГлубина > ПараметрыРасчета.ОграниченияВыборки.МаксимальнаяДлинаЦепочки);

	Если ЕстьПереполнениеСтека Тогда

		Если НЕ ПараметрыРасчета.РаспределениеПартий.ЕстьПереполнениеСтека Тогда

			ТекстДляПротокола = НСтр("ru='При расчете цепочек движения партий сработало ограничение на максимально допустимую длину цепочки.
|Это ограничение текущего механизма партионного учета (ошибка 00-00130143).
|Для некоторых документов партии могут быть не подобраны или может быть нарушен принцип подбора партий по ФИФО.'
|;uk='При розрахунку ланцюгів рухів партій спрацювало обмеження на максимально допустиму довжину ланцюга.
|Це обмеження поточного механізму партійного обліку (помилка 00-00130143).
|Для деяких документів партії можуть бути не підібрані або може бути порушений принцип підбору партій за ФІФО.'",ОбщегоНазначения.КодОсновногоЯзыка());

			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий, ТекстДляПротокола, ТекстДляПротокола);

			ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, , НСтр("ru='При расчете партий диагностированы проблемы';uk='При розрахунку партій діагностовано проблеми'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола, , Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение);

		КонецЕсли;

		ПараметрыРасчета.РаспределениеПартий.ЕстьПереполнениеСтека = Истина;

	КонецЕсли;

	Возврат НЕ ЕстьПереполнениеСтека;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТрансляцияПартий

// Особый случай распределения партий, когда непосредственно распределение выполнять не требуется,
// т.к. все выбранные данные имеют признак РасчетПартий = Истина.
// Нужно просто переместить содержимое временной таблицы Данные в таблицу-приемник.
Процедура ИнициализироватьТрансляциюПартий(ПараметрыРасчета,
		ТаблицаДляТрансляцииПартий = Неопределено, ИмяРегистра = "",
		ИмяВременнойТаблицы = "", ПоляИндексирования = "",
		ВременныеТаблицыДляСледующихЭтапов = "") Экспорт

		// Подготовим структуру ОписаниеДвижений.
	ОписаниеДвижений = ОписаниеДвижений();
	ОписаниеДвижений.Вставить("Контекст", "ТрансляцияПартий");
	ОписаниеДвижений.Вставить("ИмяРегистра", ?(ЗначениеЗаполнено(ИмяРегистра), ИмяРегистра, ""));

	Если НЕ ЗначениеЗаполнено(ИмяРегистра) Тогда
		ОписаниеДвижений.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
		ОписаниеДвижений.Вставить("ПоляИндексирования", ПоляИндексирования);
	КонецЕсли;

	ОписаниеДвижений.Вставить("ВременныеТаблицыДляСледующихЭтапов", ВременныеТаблицыДляСледующихЭтапов);
	ОписаниеДвижений.Вставить("РаспределениеНеТребуется", Истина);

	// Подготовим структуру РаспределениеПартий.
	ИнициализироватьРаспределениеПартий(ПараметрыРасчета, ТаблицаДляТрансляцииПартий, Новый Соответствие, ОписаниеДвижений, ОписаниеНезаписываемыхДанных(Ложь));

	ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "ИнициализироватьТрансляциюПартий");

КонецПроцедуры

#КонецОбласти

#Область РаспределениеПриходовНаРасходы

// Заполняет расчетные партии из данных для расчета
// Поля прямого обращения: ТипЗаписи, ВидДвижения, Регистратор
// Обращения к остальным полям происходит через структуру ОписаниеДвижений.
//
// Параметры:
// 	ПараметрыРасчета - Структура -
// 	ОписаниеДвижений - Структура -
// 	ДанныеДляРасчета - ТаблицаЗначений -
// 	РасчетныеПартии - ТаблицаЗначений -
Процедура РаспределитьПриходыНаРасходы(ПараметрыРасчета, ОписаниеДвижений,
		ДанныеДляРасчета, РасчетныеПартии) Экспорт

	ПредыдущееДвижение = Неопределено;
	ИнвертироватьПоказатели = Ложь;
	// Буфер партий по аналитике - очередь копий партионных движений
	Приходы = Новый Структура("Очередь, Указатель, УказательРестарта", Новый Массив, 0, -1);
	// Буфер потреблений по аналитике - очередь копий движений потребления
	Расходы = Новый Структура("Очередь, Указатель, УказательРестарта", Новый Массив, 0, -1);

	Для Каждого Движение Из ДанныеДляРасчета Цикл

		Если НЕ ПоляЗаписейРавны(ПредыдущееДвижение, Движение, ОписаниеДвижений.КлючиСравнения) Тогда
		    // Сменилась аналитика - сбрасываем оставшийся буфер потреблений (партии не подобраны) в расчетные партии.
			Расходы.Указатель = ?(Расходы.УказательРестарта > 0, Расходы.УказательРестарта, Расходы.Указатель);
			Пока Расходы.Указатель < Расходы.Очередь.Количество() Цикл
				Расход = Расходы.Очередь[Расходы.Указатель];
				Если Расход[ОписаниеДвижений.БазисРасхода] > 0 ИЛИ Расход[ОписаниеДвижений.БазисРасходаРегл] > 0 Тогда
					// перемещения, что приведет к очистке документа поступления у перемещения.
					Распределение = РасчетныеПартии.Добавить();
					ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, ОписаниеДвижений.Контекст, Распределение, Расход, Неопределено);
					ИнвертироватьПоказатели(Распределение, ОписаниеДвижений.Показатели, ИнвертироватьПоказатели);
				КонецЕсли;
				Расходы.Указатель = Расходы.Указатель + 1;
			КонецЦикла;

			// Инициализируем
			ПредыдущееДвижение = Движение;
			Приходы.Очередь.Очистить();
			Приходы.Указатель = 0;
			Приходы.УказательРестарта = -1;
			Расходы.Очередь.Очистить();
			Расходы.Указатель = 0;
			Расходы.УказательРестарта = -1;

		КонецЕсли;

		ЭтоПриход = (Движение.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Остаток)
			ИЛИ (Движение.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Партия)
			ИЛИ (Движение.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Перемещение)
			ИЛИ (Движение.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Сторно)
			ИЛИ (Движение.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад);

		ИнвертироватьПоказатели = (ЭтоПриход
			И (Движение[ОписаниеДвижений.БазисПрихода] < 0
			ИЛИ Движение[ОписаниеДвижений.БазисПриходаРегл] < 0)) ИЛИ (НЕ ЭтоПриход
			И (Движение[ОписаниеДвижений.БазисРасхода] < 0
			ИЛИ Движение[ОписаниеДвижений.БазисРасходаРегл] < 0));

		Если ЭтоПриход Тогда
			Приход = КопияЗаписиСтруктурой(Движение, ОписаниеДвижений.ПоляРасчета);
			ИнвертироватьПоказатели(Приход, ОписаниеДвижений.Показатели, ИнвертироватьПоказатели);
			// если ранее пропустили расход, то текущий приход начинаем распределять на него
			Если Расходы.УказательРестарта >= 0 Тогда
				Расходы.Указатель = Расходы.УказательРестарта;
				Расходы.УказательРестарта = -1;
			КонецЕсли;
			// покрываем расходы из буфера расходов по очереди (FIFO)
			Пока (Приход[ОписаниеДвижений.БазисПрихода] > 0 ИЛИ Приход[ОписаниеДвижений.БазисПриходаРегл] > 0) И Расходы.Указатель < Расходы.Очередь.Количество() Цикл
				Расход = Расходы.Очередь[Расходы.Указатель];
				// приход, сделанный по расходу не может быть распределен на этот расход
				Если Расход.Регистратор = Приход[ОписаниеДвижений.КлючРасхода] Тогда
					Расходы.УказательРестарта = Расходы.Указатель;
					Расходы.Указатель = Расходы.Указатель + 1;
					Продолжить;
				КонецЕсли;
				// добавляем в партии покрытую часть расхода
				Если Расход[ОписаниеДвижений.БазисРасхода] > 0 ИЛИ Расход[ОписаниеДвижений.БазисРасходаРегл] > 0 Тогда
					Распределение = РасчетныеПартии.Добавить();
					ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, ОписаниеДвижений.Контекст, Распределение, Расход, Приход);
					ИнвертироватьПоказатели(Распределение, ОписаниеДвижений.Показатели, ИнвертироватьПоказатели);
				КонецЕсли;
				// если расход покрыт, то ставим на покрытие следующий расход
				Если Расход[ОписаниеДвижений.БазисРасхода] <= 0 И Расход[ОписаниеДвижений.БазисРасходаРегл] <= 0 Тогда
					Расходы.Указатель = Расходы.Указатель + 1;
				КонецЕсли;
			КонецЦикла;
			// если приход еще остался, то регистрируемся в буфере приходов
			Если Приход[ОписаниеДвижений.БазисПрихода] > 0
					ИЛИ Приход[ОписаниеДвижений.БазисПриходаРегл] > 0 Тогда
				Приходы.Очередь.Добавить(Приход);
			КонецЕсли;
			// приход надо добавить в партии - код должен быть здесь для сохранения сортировки
			Если Движение.ТипЗаписи <> Перечисления.ТипыЗаписейПартий.Остаток Тогда
				Распределение = РасчетныеПартии.Добавить();
				ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, ОписаниеДвижений.Контекст, Распределение, Движение, Неопределено);
				ИнвертироватьПоказатели(Распределение, ОписаниеДвижений.Показатели, ИнвертироватьПоказатели);
			КонецЕсли;
		КонецЕсли;

		Если Движение.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Потребление Тогда
			Расход = КопияЗаписиСтруктурой(Движение, ОписаниеДвижений.ПоляРасчета);
			ИнвертироватьПоказатели(Расход, ОписаниеДвижений.Показатели, ИнвертироватьПоказатели);
			// если ранее пропустили приход, то текущий расход начинаем потреблять с него
			Если Приходы.УказательРестарта >= 0 Тогда
				Приходы.Указатель = Приходы.УказательРестарта;
				Приходы.УказательРестарта = -1;
			КонецЕсли;
			// списываем приходы из буфера приходов по очереди (FIFO)
			Пока (Расход[ОписаниеДвижений.БазисРасхода] > 0 ИЛИ Расход[ОписаниеДвижений.БазисРасходаРегл] > 0) И Приходы.Указатель < Приходы.Очередь.Количество() Цикл
				Приход = Приходы.Очередь[Приходы.Указатель];
				// приход, сделанный по расходу не может быть распределен на этот расход
				Если Расход.Регистратор = Приход[ОписаниеДвижений.КлючРасхода] И Расход.Регистратор <> Неопределено Тогда
					Приходы.УказательРестарта = Приходы.Указатель;
					Приходы.Указатель = Приходы.Указатель + 1;
					Продолжить;
				КонецЕсли;
				// добавляем в партии покрытую часть расхода
				Если Приход[ОписаниеДвижений.БазисПрихода] > 0
						ИЛИ Приход[ОписаниеДвижений.БазисПриходаРегл] > 0 Тогда
					Распределение = РасчетныеПартии.Добавить();
					ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, ОписаниеДвижений.Контекст, Распределение, Расход, Приход);
					ИнвертироватьПоказатели(Распределение, ОписаниеДвижений.Показатели, ИнвертироватьПоказатели);
				КонецЕсли;
				// если приход потреблен, то выбираем следующий приход
				Если Приход[ОписаниеДвижений.БазисПрихода] <= 0
						И Приход[ОписаниеДвижений.БазисПриходаРегл] <= 0 Тогда
					Приходы.Указатель = Приходы.Указатель + 1;
				КонецЕсли;
			КонецЦикла;
			// если расход еще остался, то регистрируемся в буфере расходов
			Если Расход[ОписаниеДвижений.БазисРасхода] > 0 ИЛИ Расход[ОписаниеДвижений.БазисРасходаРегл] > 0 Тогда
				Расходы.Очередь.Добавить(Расход);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#Область ВспомогательныеМетоды

Функция ПоляЗаписейРавны(Запись1, Запись2, ПереченьКлючей)

	Если Запись1 = Неопределено Или Запись2 = Неопределено Тогда
		Возврат (Запись1 = Запись2);
	КонецЕсли;

	Для Каждого Поле Из Новый Структура(ПереченьКлючей) Цикл
		Если Запись1[Поле.Ключ] <> Запись2[Поле.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

Функция КопияЗаписиСтруктурой(Запись, ПереченьПолей)

	КопияСтрокиСтруктурой = Новый Структура(ПереченьПолей);
	ЗаполнитьЗначенияСвойств(КопияСтрокиСтруктурой, Запись);

	Возврат КопияСтрокиСтруктурой;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВыгрузкаПромежуточныхДанных

// Выгружает строку шапки таблицы промежуточных данных этапа.
//


// Описание
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
// 	ИмяТаблицы - Строка -
// 	ИсточникДанных - ТаблицаЗначений, Строка -
Процедура ВыгрузитьШапкуТаблицыПромежуточныхДанныхРасчета(ПараметрыРасчета,
		ИмяТаблицы, ИсточникДанных = Неопределено)

	Если НЕ ПараметрыРасчета.РаспределениеПартий.ВыгружатьДанные Тогда
		Возврат;
	КонецЕсли;

	// Получим данные из источника.
	Если ИсточникДанных = Неопределено Тогда
		ИсточникДанных = ИмяТаблицы; // данные в одноименной временной таблице
	КонецЕсли;

	Если ТипЗнч(ИсточникДанных) = Тип("Строка") Тогда
	// Получим пустую таблицу с той же структурой, что и временная таблица.
		ТаблицаДанных = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИсточникДанных, 0);
	Иначе
	// Возьмем данные из указанной временной таблицы.
		ТаблицаДанных = ИсточникДанных;
	КонецЕсли;

	// Сформируем заголовок табличного документа.
	ОписаниеФайлаВыгрузки = ПараметрыРасчета.РаспределениеПартий.ВыгрузкаДанныхРасчета[ИмяТаблицы]; // см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОписаниеФайлаВыгрузки
	ОписаниеФайлаВыгрузки.НомерСтроки = 1;
	НомерКолонки = 0;

	ОписаниеФайлаВыгрузки.ТабличныйДокумент.ФиксацияСверху = 1;

	Для Каждого ТекущаяКолонка Из ТаблицаДанных.Колонки Цикл

		ОписаниеФайлаВыгрузки.Колонки.Добавить(ТекущаяКолонка.Имя);

		НомерКолонки = НомерКолонки + 1;

		Область = ОписаниеФайлаВыгрузки.ТабличныйДокумент.Область(ОписаниеФайлаВыгрузки.НомерСтроки, НомерКолонки, ОписаниеФайлаВыгрузки.НомерСтроки, НомерКолонки);

		Область.Текст = ТекущаяКолонка.Имя;
		Область.Шрифт = Новый Шрифт(Область.Шрифт, , , Истина);

	КонецЦикла;

КонецПроцедуры

// Выгружает строку шапки таблицы промежуточных данных этапа.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//	ИмяТаблицы - Строка -
//	ИсточникДанных - Строка, ТаблицаЗначений, ВыборкаИзРезультатаЗапроса -	
Процедура ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета,
		ИмяТаблицы, ИсточникДанных = Неопределено) Экспорт

	Если НЕ ПараметрыРасчета.РаспределениеПартий.ВыгружатьДанные Тогда
		Возврат;
	КонецЕсли;

	// Получим данные из источника.
	Если ИсточникДанных = Неопределено Тогда
		ИсточникДанных = ИмяТаблицы; // данные в одноименной временной таблице
	КонецЕсли;

	Если ТипЗнч(ИсточникДанных) = Тип("Строка") Тогда
	// Получим таблицу из временной таблицы.
		ТаблицаДанных = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИсточникДанных);
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
	// Получим таблицу из выборки.
		ТаблицаДанных = ИсточникДанных.Владелец().Выгрузить();
	Иначе
	// Возьмем данные из указанной временной таблицы.
		ТаблицаДанных = ИсточникДанных;
	КонецЕсли;

	// Сформируем заголовок табличного документа.
	ОписаниеФайлаВыгрузки = ПараметрыРасчета.РаспределениеПартий.ВыгрузкаДанныхРасчета[ИмяТаблицы]; // см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОписаниеФайлаВыгрузки

	Для Каждого ТекущаяСтрока Из ТаблицаДанных Цикл

		ОписаниеФайлаВыгрузки.НомерСтроки = ОписаниеФайлаВыгрузки.НомерСтроки + 1;
		НомерКолонки = 0;

		Для Каждого ТекущаяКолонка Из ОписаниеФайлаВыгрузки.Колонки Цикл

			НомерКолонки = НомерКолонки + 1;

			Область = ОписаниеФайлаВыгрузки.ТабличныйДокумент.Область(ОписаниеФайлаВыгрузки.НомерСтроки, НомерКолонки, ОписаниеФайлаВыгрузки.НомерСтроки, НомерКолонки);

			Область.Текст = ТекущаяСтрока[ТекущаяКолонка];

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

// Записывает файлы выгрузки промежуточных данных этапа.
//
Процедура ЗавершитьВыгрузкуПромежуточныхДанныхРасчета(ПараметрыРасчета) Экспорт

	Если НЕ ПараметрыРасчета.РаспределениеПартий.ВыгружатьДанные Тогда
		Возврат;
	КонецЕсли;

	Для Каждого КлючИЗначение Из ПараметрыРасчета.РаспределениеПартий.ВыгрузкаДанныхРасчета Цикл

		Если ТипЗнч(КлючИЗначение.Значение) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;

		ОписаниеФайлаВыгрузки = КлючИЗначение.Значение;

		// Сохраним таблицу в файл.
		Попытка
			ТабДок = ОписаниеФайлаВыгрузки.ТабличныйДокумент; // ТабличныйДокумент
			ТабДок.Записать(ОписаниеФайлаВыгрузки.ИмяФайла);
		Исключение

			ОписаниеФайлаВыгрузки.БылиОшибки = Истина;

			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать файл ""%1""
|%2'
|;uk='Не вдалося записати файл ""%1"" 
|%2'",ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеФайлаВыгрузки.ИмяФайла, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения, ТекстДляПротокола);

		КонецПопытки;

	КонецЦикла;

	ПараметрыРасчета.РаспределениеПартий.Удалить("ВыгрузкаДанныхРасчета");

КонецПроцедуры

#КонецОбласти

#Область УниверсальныеПроцедурыРаботыСЗапросами

// Устанавливает общие параметры запроса из параметров расчета.
// Следует использовать для идентичности имен и значений параметров во всех запросах.
//
Процедура ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета,
		ИспользоватьОбщийМенеджерВТ = Истина) Экспорт

		// Общие параметры
	РасчетныйПериод = ПараметрыРасчета.РасчетныйПериод;

	Запрос.УстановитьПараметр("НачалоПериода", РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("НачалоПредыдущегоПериода", НачалоМесяца(РасчетныйПериод.КонецПредыдущегоПериода));
	Запрос.УстановитьПараметр("КонецПредыдущегоПериода", РасчетныйПериод.КонецПредыдущегоПериода);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода", РасчетныйПериод.НачалоСледующегоПериода);
	Запрос.УстановитьПараметр("ГраницаНачалоПериода", РасчетныйПериод.ГраницаНачалоПериода);
	Запрос.УстановитьПараметр("ГраницаКонецПериода", РасчетныйПериод.ГраницаКонецПериода);
	Запрос.УстановитьПараметр("ГраницаКонецПредыдущегоПериода", РасчетныйПериод.ГраницаКонецПредыдущегоПериода);

	Запрос.УстановитьПараметр("РегламентноеЗадание", ПараметрыРасчета.РегламентноеЗадание);

	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("ОрганизацииСФИФОСкользящая", ПараметрыРасчета.УчетныеПолитики.ФИФОСкользящая.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСФИФОСкользящаяВПрошломПериоде", ПараметрыРасчета.УчетныеПолитики.ФИФОСкользящая.ИспользовалиВПрошломПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСДвижениямиПоСебестоимости", ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости); // по ним нужен расчет
	Запрос.УстановитьПараметр("ОрганизацииСОстаткамиПоСебестоимости", ПараметрыРасчета.ОрганизацииСОстаткамиПоСебестоимости); // по ним возможны корректировки начальных остатков


	// Типы записей регистра "Себестоимость товаров"
	Запрос.УстановитьПараметр("НепересчитываемыеТипыЗаписей", ПараметрыРасчета.НепересчитываемыеТипыЗаписей);
	Запрос.УстановитьПараметр("ТипыЗаписейПервичныхПартий", ПараметрыРасчета.ТипыЗаписейПервичныхПартий);
	Запрос.УстановитьПараметр("ТипыЗаписейКонвертацииДанных", ПараметрыРасчета.ТипыЗаписейКонвертацииДанных);
	Запрос.УстановитьПараметр("ТипыЗаписейМногократнойКонвертацииДанных", ПараметрыРасчета.ТипыЗаписейМногократнойКонвертацииДанных);

	// Значения функциональных опций
	Для Каждого КлючИЗначение Из ПараметрыРасчета.ФО Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

	Запрос.УстановитьПараметр("ИспользуетсяУправлениеВНА_2_4", ПараметрыРасчета.ИспользуетсяУправлениеВНА_2_4);

	// Признак ведения упр. учета (расширенная проверка ФО ВестиУправленческийУчетОрганизаций).
	Запрос.УстановитьПараметр("УправленческийУчетОрганизаций", ПараметрыРасчета.УправленческийУчетОрганизаций);

	// Переопределим значение ФО ПартионныйУчетВерсии22 - для проверки версии механизма партионного учета
	// надо учитывать еще значения опций ИспользоватьПартионныйУчет и ДатаПереходаНаПартионныйУчетВерсии22.
	// "Правильное" значение ПартионныйУчетВерсии22 хранится в одноименном параметре расчета.
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22", ПараметрыРасчета.ПартионныйУчетВерсии22);
	Запрос.УстановитьПараметр("ДатаПереходаНаПартионныйУчетВерсии22", ПараметрыРасчета.ДатаПереходаНаПартионныйУчетВерсии22);
	Запрос.УстановитьПараметр("ИспользовалсяПартионныйУчетДоПереходаНаВерсию22", РасчетСебестоимостиПовтИсп.ИспользовалсяПартионныйУчетДоПереходаНаВерсию22(Дата(1, 1, 1)));

	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", ПараметрыРасчета.УчитыватьСебестоимостьТоваровПоНазначениям);


	// Виды ценности
	Запрос.УстановитьПараметр("ВидыЦенностиУслуг", ПараметрыРасчета.ВидыЦенностиУслуг);

	РасчетСебестоимостиЛокализация.ДополнитьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.УстановитьПараметр("ИспользоватьУчетСебестоимости", ПараметрыРасчета.ИспользоватьУчетСебестоимости);
	Запрос.УстановитьПараметр("ДатаНачалаУчетаСебестоимости", ПараметрыРасчета.ДатаНачалаУчетаСебестоимости);

	// Отборы по типам запасов
	Запрос.УстановитьПараметр("СобственныеТипыЗапасов", СобственныеТипыЗапасов());

	// Отборы по видам цен
	Запрос.УстановитьПараметр("ВидПлановыхЦен", Справочники.ВидыЦен.ПустаяСсылка());
	//++ НЕ УТ
	Запрос.УстановитьПараметр("ВидПлановыхЦен", Справочники.ВидыЦен.ВидЦеныПоУмолчанию(Константы.ВидЦеныПлановойСтоимостиМатериаловРабот.Получить()));
	//-- НЕ УТ

	// Параметры для запроса Документы.РаспределениеПрочихЗатрат.ТекстЗапросаПоступилоПрочихРасходов().
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Ложь);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Истина);
	Запрос.УстановитьПараметр("СписокПодразделений", Неопределено);

	// Валюты
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ПараметрыРасчета.Валюты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", ПараметрыРасчета.Валюты.ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("КоэффициентВалютыРегл", ПараметрыРасчета.Валюты.КоэффициентВалютыРегл);
	Запрос.УстановитьПараметр("КоэффициентВалютыУпр", ПараметрыРасчета.Валюты.КоэффициентВалютыУпр);

	// Менеджер временных таблиц
	Если ИспользоватьОбщийМенеджерВТ Тогда
		Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Иначе
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // используется в редких случаях
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеЭтапаРасчета(ПараметрыРасчета, ТекстЗапроса,
		ПараметрыНумерации = Неопределено, ДопПараметрыЗапроса = Неопределено,
		ОчищатьВременныеТаблицы = Истина, Пояснение = "") Экспорт

	ПараметрыРасчета.РаспределениеПартий.Вставить("ПараметрыНумерации", ПараметрыНумерации);

	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;

	// Подготовим запрос.
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Если ЗначениеЗаполнено(ДопПараметрыЗапроса) Тогда

		Для Каждого КлючИЗначение Из ДопПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;

	КонецЕсли;

	Если ПараметрыРасчета.ПараметрыОтладки.Свойство("ТекстЗапросаДляОтладки")
			И ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "", Ложь) Тогда
		Запрос.Текст = ПараметрыРасчета.ПараметрыОтладки.ТекстЗапросаДляОтладки;
	Иначе
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;

	ВыбиратьДанныеДляРасчетаВоВременнуюТаблицу(Запрос);

	// Запомним существующие временные таблицы.
	Если ОчищатьВременныеТаблицы Тогда
		СуществующиеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(Запрос);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОписаниеДвижений.ВременныеТаблицыДляСледующихЭтапов) Тогда
		УничтожитьВременныеТаблицы(ПараметрыРасчета, ОписаниеДвижений.ВременныеТаблицыДляСледующихЭтапов);
	КонецЕсли;

	// Выполним запрос.
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, , , , Пояснение);

	// Пронумеруем строки таблицы Данные.
	Если ЗначениеЗаполнено(ПараметрыНумерации) Тогда

		РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "Данные", НСтр("ru='Нумерация строк';uk='Нумерація рядків'",ОбщегоНазначения.КодОсновногоЯзыка()));

		ЗаполнитьНомераСтрокВременнойТаблицы(ПараметрыРасчета, ПараметрыНумерации, "Данные");

		РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);

	КонецЕсли;

	// Соберем статистику по типам записей таблицы Данные.
	Если КолонкаВременнойТаблицыСуществует(ПараметрыРасчета, "Данные", "ТипЗаписи") Тогда

		Запрос.Текст = "ВЫБРАТЬ
			|	Т.ТипЗаписи КАК ТипЗаписи,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Данные КАК Т
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.ТипЗаписи
			|
			|УПОРЯДОЧИТЬ ПО
			|	Количество УБЫВ,
			|	ТипЗаписи";

		Выборка = Запрос.Выполнить().Выбрать();

		ТекстДляПротокола = "";

		Пока Выборка.Следующий() Цикл
			РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(ТекстДляПротокола, ?(ЗначениеЗаполнено(Выборка.ТипЗаписи), СокрЛП(Выборка.ТипЗаписи), "<"
				+ НСтр("ru='Тип записи не указан';uk='Тип запису не вказано'",ОбщегоНазначения.КодОсновногоЯзыка())
				+ ">") + " - " + Формат(Выборка.Количество, "ЧГ="));
		КонецЦикла;

		Если ЗначениеЗаполнено(ТекстДляПротокола) Тогда

			ТекстДляПротокола = НСтр("ru='Описание типов записей таблицы ""Данные""';uk='Опис типів записів таблиці ""Дані""'",ОбщегоНазначения.КодОсновногоЯзыка())
				+ ":" + Символы.ПС + СокрЛП(ТекстДляПротокола);

			РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, ТекстДляПротокола);

		КонецЕсли;

	КонецЕсли;

	// Уничтожим вспомогательные временные таблицы, созданные в данном этапе расчета.
	Если ОчищатьВременныеТаблицы Тогда

		СуществующиеВТ = СуществующиеВТ + ?(СуществующиеВТ = "", "", ",")
			+ "Данные";

		Если ЗначениеЗаполнено(ОписаниеДвижений.ИмяВременнойТаблицы) Тогда
			СуществующиеВТ = СуществующиеВТ + ","
				+ ОписаниеДвижений.ИмяВременнойТаблицы;
		КонецЕсли;

		Если ЗначениеЗаполнено(ОписаниеДвижений.ВременныеТаблицыДляСледующихЭтапов) Тогда
			СуществующиеВТ = СуществующиеВТ + ","
				+ ОписаниеДвижений.ВременныеТаблицыДляСледующихЭтапов;
		КонецЕсли;

		ОписаниеДвижений.ВременныеТаблицыТекущегоЭтапа = ПолучитьПереченьСуществующихВременныхТаблиц(Запрос, СуществующиеВТ);

	КонецЕсли;

	ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "ПолучитьДанныеЭтапаРасчета");
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Инициализация

// Инициализируем параметры отладки расчета.
//
Процедура ИнициализироватьПараметрыОтладки(ПараметрыОтладки,
		ПараметрыЗапуска) Экспорт

	Если ПараметрыОтладки = Неопределено Тогда
		ПараметрыОтладки = Новый Структура;
	КонецЕсли;

	// Запомним протоколы рассчитанных периодов в этом массиве и вернем их в место вызова расчета.
	ПараметрыОтладки.Вставить("ПротоколыРасчета", Новый Массив);

КонецПроцедуры

// Перед началом расчета заполняет все необходимые параметры и инициализирует все структуры данных, используемые алгоритмом расчета.
// Внимание: если какая-то сущность используется более чем в одном этапе расчета, то ее стоит занести в ПараметрыРасчета.
//
Процедура ИнициализироватьПараметрыРасчетаПартий(ПараметрыЗапуска,
		ПараметрыРасчета, ПараметрыОтладки = Неопределено) Экспорт

		// Создадим контейнер всех параметров, используемых механизмом расчета партий
	ПараметрыИнициализации = Новый Структура;
	ПараметрыИнициализации.Вставить("Дата", КонецМесяца(ПараметрыЗапуска.Дата));
	ПараметрыИнициализации.Вставить("МассивОрганизаций", ПараметрыЗапуска.МассивОрганизаций);
	ПараметрыИнициализации.Вставить("ЗапущенРасчетПартий", Истина);
	Если ПараметрыЗапуска.Свойство("ТолькоПредварительныйРасчетСебестоимости") Тогда
		ПараметрыИнициализации.Вставить("ТолькоПредварительныйРасчетСебестоимости", ПараметрыЗапуска.ТолькоПредварительныйРасчетСебестоимости);
	Иначе
		ПараметрыИнициализации.Вставить("ТолькоПредварительныйРасчетСебестоимости", Ложь);
	КонецЕсли;
	ПараметрыИнициализации.Вставить("ЗапущеноРегламентнымЗаданием", Ложь);

	Если ПараметрыЗапуска.Свойство("ИзмененоДокументов") Тогда
		ПараметрыИнициализации.Вставить("ИзмененоДокументов", ПараметрыЗапуска.ИзмененоДокументов);
	Иначе
		ПараметрыИнициализации.Вставить("ИзмененоДокументов", Неопределено);
	КонецЕсли;

	Если ПараметрыЗапуска.Свойство("РасшифровкаРаспределения") Тогда
		ПараметрыИнициализации.Вставить("РасшифровкаРаспределения", ПараметрыЗапуска.РасшифровкаРаспределения);
	КонецЕсли;

	Если ПараметрыЗапуска.Свойство("АвтоматическоеТестирование")
			И ПараметрыЗапуска.АвтоматическоеТестирование Тогда
		ПараметрыИнициализации.Вставить("АвтоматическоеТестирование", Истина); // вызывается при тестировании
	Иначе
		ПараметрыИнициализации.Вставить("АвтоматическоеТестирование", Ложь);
	КонецЕсли;
	
	Если ПараметрыЗапуска.Свойство("РежимОтладки")
			И ПараметрыЗапуска.РежимОтладки Тогда
		ПараметрыИнициализации.Вставить("РежимОтладки", Истина);
	Иначе
		ПараметрыИнициализации.Вставить("РежимОтладки", Ложь);
	КонецЕсли;

	Если ПараметрыЗапуска.Свойство("МестоВызоваРасчета") Тогда
		ПараметрыИнициализации.Вставить("МестоВызоваРасчета", ПараметрыЗапуска.МестоВызоваРасчета);
	КонецЕсли;

	Если ПараметрыЗапуска.Свойство("ПолучениеСпискаПараметров") Тогда
		ПараметрыИнициализации.Вставить("ПолучениеСпискаПараметров", ПараметрыЗапуска.ПолучениеСпискаПараметров);
	КонецЕсли;

	ИнициализироватьОбщиеПараметрыРасчета(ПараметрыИнициализации, ПараметрыРасчета, ПараметрыОтладки);

КонецПроцедуры

// Перед началом расчета заполняет все общие параметры, используемые алгоритма расчета.
//
// Параметры:
// 	ПараметрыИнициализации - Структура - Описание:
// * АвтоматическоеТестирование - Булево -
// * ИзмененоДокументов - Неопределено -
// * ЗапущеноРегламентнымЗаданием - Булево -
// * ТолькоПредварительныйРасчетСебестоимости - Булево -
// * ЗапущенРасчетПартий - Булево -
// * Дата - Дата -
// 	ПараметрыРасчета - Структура -
// 	ПараметрыОтладки - Неопределено - Описание
// 	
// Возвращаемое значение:
// 	Структура - Описание:
// * ГруппыОрганизацийПоИнтеркампани - Массив -
// * ОрганизацииСОстаткамиПоСебестоимости - Массив -
// * ОрганизацииСДвижениямиПоСебестоимости - Массив -
// * ТипыЗаписейМногократнойКонвертацииДанных - Массив -
// * ТипыЗаписейКонвертацииДанных - Массив -
// * НепересчитываемыеТипыЗаписей - Массив -
// * ТипыЗаписейПервичныхПартий - Массив -
// * ФормироватьТолькоДвиженияВводаОстатков - Булево -
// * ФормироватьНачальныеОстаткиПартий22 - Булево -
// * УчитыватьСебестоимостьТоваровПоНазначениям - Булево -
// * ДатаПереходаНаПартионныйУчетВерсии22 - Дата -
// * ПартионныйУчетВерсии22 - Булево -
// * ПартионныйУчетВерсии21 - Булево, Неопределено -
// * ПартионныйУчетНеИспользуется - Булево -
// * ИспользуетсяУправлениеВНА_2_4 - Булево -
// * УправленческийУчетОрганизаций - Булево -
// * ФО - Структура -
// * ИдентификаторРасчета - УникальныйИдентификатор -  
// * ОбщееКоличествоФЗРасчета - Число -
// * ТаблицаЗаданийРасчета - ТаблицаЗначений -:
// ** ИдентификаторЗадания - УникальныйИдентификатор - 
// ** КлючЗадания - Строка -
// ** ИдентификаторРасчета - УникальныйИдентификатор - 
// * ОбщееКоличествоФЗЗаписи - Число -
// * ТаблицаЗаданийЗаписи - ТаблицаЗначений -:
// ** ИдентификаторЗадания - УникальныйИдентификатор - 
// ** ПредыдущееЗадание - УникальныйИдентификатор - 
// ** ИмяРегистра - Строка - 
// ** КоличествоДвижений - Число - 
// * СтекЗаданийЗаписи - Массив -
// * ПредварительныйРасчет - Булево -
// * РегламентноеЗадание - Булево -
// * ИнформационнаяБазаФайловая - Булево -
// * СтрокаСоединенияИБ - Строка -
// * ИзмененоДокументов - Неопределено -
// * МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
// * РасчетныйПериод - Структура -:
// ** ГраницаКонецПредыдущегоПериода - Граница -
// ** ГраницаКонецПериода - Граница -
// ** ГраницаНачалоПериода - Граница -
// ** НачалоСледующегоПериода - Дата -
// ** КонецПредыдущегоПериода - Число -
// ** НачалоПредыдущегоПериода - Дата -
// ** НачалоПериода - Дата -
// * КопияМассивОрганизаций - Массив -
// * МассивОрганизаций - Массив -
// * ИспользоватьПлатформуДляРешенияСЛУ - Булево -
// * ВерсияПлатформыНеНиже8_3_13 - Булево -
// * ВерсияПлатформыНеНиже8_3_14 - Булево -
// * ВариантРасчета - ПеречислениеСсылка.ВариантыРасчетаПартийИСебестоимости -
// * АвтоматическоеТестирование - Булево -
// * ЗаполненыПартииВВыручке - Булево -
// * ЗаполняютсяПартииВВыручке - Булево -
// * ЗаполненыПартииВСебестоимости - Булево -
// * ЗаполняютсяПартииВСебестоимости - Булево -
// * ЗапущенРасчетПартий - Булево -
// * ПараметрыОтладки - Неопределено -
// * НомерЗаданияДоРасчета - Число -
// * ЭтоПараметрыРасчетаПУ22 - Булево -
// * РаспределениеПартий - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьРаспределениеПартий
// * Отладка - Структура -:
// ** РегистраторыВФЗ - см. РасчетСебестоимостиПрикладныеАлгоритмы.УстановитьНенастраиваемыеТехнологическиеПараметрыРасчета
//
Функция ИнициализироватьОбщиеПараметрыРасчета(ПараметрыИнициализации,
		ПараметрыРасчета, ПараметрыОтладки = Неопределено) Экспорт

	Если ПараметрыРасчета <> Неопределено Тогда
		Возврат ПараметрыРасчета; // ПараметрыРасчета уже инициализированы
	КонецЕсли;

	Дата = ПараметрыИнициализации.Дата;
	МассивОрганизаций = ДоступныеОрганизации(ПараметрыИнициализации.МассивОрганизаций);

	СокращеннаяИнициализация = НЕ ПараметрыИнициализации.Свойство("ЗапущенРасчетПартий");

	#Область БазовыеПараметры

	Если НЕ СокращеннаяИнициализация Тогда
		ЗапущенРасчетПартий = ПараметрыИнициализации.ЗапущенРасчетПартий;
		ТолькоПредварительныйРасчетСебестоимости = ПараметрыИнициализации.ТолькоПредварительныйРасчетСебестоимости;
		ЗапущеноРегламентнымЗаданием = ПараметрыИнициализации.ЗапущеноРегламентнымЗаданием;
	Иначе
	// Вызов извне механизма расчета с параметрами по умолчанию.
		ЗапущенРасчетПартий = Истина;
		ТолькоПредварительныйРасчетСебестоимости = Ложь;
		ЗапущеноРегламентнымЗаданием = Ложь;
	КонецЕсли;

	// Создадим контейнер всех общих параметров, используемых механизмами расчета партий и себестоимости.
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоПараметрыРасчетаПУ22", Истина); // служебный идентификатор структуры
	ПараметрыРасчета.Вставить("НомерЗаданияДоРасчета", -1); // номер не определен
	ПараметрыРасчета.Вставить("ПараметрыОтладки", ПараметрыОтладки);

	// Параметры старта и текущего состояния расчета
	ПараметрыРасчета.Вставить("ЗапущенРасчетПартий", ЗапущенРасчетПартий); // запущен полный расчет (партии+себестоимость) или только расчет себестоимости?
	ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, НЕ ЗапущенРасчетПартий); // заполняет свойство ИдетРасчетПартий
	ПараметрыРасчета.Вставить("ЗаполняютсяПартииВСебестоимости", Ложь); // управляет логикой заполнения реквизита "РасчетПартий" в регистре себестоимости
	ПараметрыРасчета.Вставить("ЗаполненыПартииВСебестоимости", НЕ ЗапущенРасчетПартий); // управляет логикой получения кэша оборотов регистра себестоимости
	ПараметрыРасчета.Вставить("ЗаполняютсяПартииВВыручке", Ложь); // управляет логикой заполнения реквизита "РасчетПартий" и логикой заполнения кэша оборотов регистра выручки
	ПараметрыРасчета.Вставить("ЗаполненыПартииВВыручке", НЕ ЗапущенРасчетПартий); // управляет логикой получения кэша оборотов регистра выручки
	ПараметрыРасчета.Вставить("МестоВызоваРасчета", ?(ПараметрыИнициализации.Свойство("МестоВызоваРасчета"), ПараметрыИнициализации.МестоВызоваРасчета, НСтр("ru='Не указано';uk='Не зазначено'",ОбщегоНазначения.КодОсновногоЯзыка()))); // откуда вызвали расчет (для протокола)
	Если ПараметрыИнициализации.Свойство("РасшифровкаРаспределения") Тогда
		ПараметрыРасчета.Вставить("РасшифровкаРаспределения", ПараметрыИнициализации.РасшифровкаРаспределения); // вызывается при формировании отчета
	КонецЕсли;

	Если ПараметрыИнициализации.Свойство("АвтоматическоеТестирование")
			И ПараметрыИнициализации.АвтоматическоеТестирование Тогда
		ПараметрыРасчета.Вставить("АвтоматическоеТестирование", Истина); // вызывается при тестировании
	Иначе
		ПараметрыРасчета.Вставить("АвтоматическоеТестирование", Ложь);
	КонецЕсли;
	
	Если ПараметрыИнициализации.Свойство("РежимОтладки")
			И ПараметрыИнициализации.РежимОтладки Тогда
		ПараметрыРасчета.Вставить("РежимОтладки", Истина);
	Иначе
		ПараметрыРасчета.Вставить("РежимОтладки", Ложь);
	КонецЕсли;

	// Вариант расчета
	Если ЗапущеноРегламентнымЗаданием Тогда
		ПараметрыРасчета.Вставить("ВариантРасчета", Перечисления.ВариантыРасчетаПартийИСебестоимости.ПредварительнаяСебестоимостьРегламентноеЗадание);
	ИначеЕсли ТолькоПредварительныйРасчетСебестоимости Тогда
		ПараметрыРасчета.Вставить("ВариантРасчета", Перечисления.ВариантыРасчетаПартийИСебестоимости.ПредварительнаяСебестоимость);
	ИначеЕсли ЗапущенРасчетПартий Тогда
		ПараметрыРасчета.Вставить("ВариантРасчета", Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость);
	Иначе
		ПараметрыРасчета.Вставить("ВариантРасчета", Перечисления.ВариантыРасчетаПартийИСебестоимости.ФактическаяСебестоимость);
	КонецЕсли;

	Если ПараметрыИнициализации.Свойство("ОписаниеЗамера") Тогда
	// Штатный вызов из механизма партионного учета версии 2.1.
		ПараметрыРасчета.Вставить("ОписаниеЗамера", ПараметрыИнициализации.ОписаниеЗамера);
	КонецЕсли;

	// Версия платформы.
	ПараметрыРасчета.Вставить("ВерсияПлатформыНеНиже8_3_14", ВерсияПлатформыНеНижеУказанной("8.3.14.0"));
	ПараметрыРасчета.Вставить("ВерсияПлатформыНеНиже8_3_13", ПараметрыРасчета.ВерсияПлатформыНеНиже8_3_14
		ИЛИ ВерсияПлатформыНеНижеУказанной("8.3.13.0"));

	ПараметрыРасчета.Вставить("ИспользоватьПлатформуДляРешенияСЛУ", ПараметрыРасчета.ВерсияПлатформыНеНиже8_3_14
		И РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров().ИспользоватьПлатформуДляРешенияСЛУ);

		// Организации для расчета.
	ПараметрыРасчета.Вставить("МассивОрганизаций", МассивОрганизаций);
	ПараметрыРасчета.Вставить("КопияМассивОрганизаций", ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивОрганизаций));

	#КонецОбласти

	// Создаем описание данных для протоколирования расчета и замера производительности.
	РасчетСебестоимостиПротоколРасчета.НачалоЭтапаРасчета(ПараметрыРасчета, "ИнициализироватьОбщиеПараметрыРасчета");

	#Область РасчетныйПериод

	// Периода расчета и границы периода
	РасчетныйПериод = Новый Структура;
	РасчетныйПериод.Вставить("НачалоПериода", НачалоМесяца(Дата));
	РасчетныйПериод.Вставить("КонецПериода", Дата);
	РасчетныйПериод.Вставить("НачалоПредыдущегоПериода", НачалоМесяца(РасчетныйПериод.НачалоПериода
		- 1));
	РасчетныйПериод.Вставить("КонецПредыдущегоПериода", РасчетныйПериод.НачалоПериода
		- 1);
	РасчетныйПериод.Вставить("НачалоСледующегоПериода", КонецМесяца(Дата) + 1);
	РасчетныйПериод.Вставить("ГраницаНачалоПериода", Новый Граница(РасчетныйПериод.НачалоПериода, ВидГраницы.Исключая));
	РасчетныйПериод.Вставить("ГраницаКонецПериода", Новый Граница(РасчетныйПериод.КонецПериода, ВидГраницы.Включая));
	РасчетныйПериод.Вставить("ГраницаКонецПредыдущегоПериода", Новый Граница(РасчетныйПериод.КонецПредыдущегоПериода, ВидГраницы.Включая));

	ПараметрыРасчета.Вставить("РасчетныйПериод", РасчетныйПериод);

	#КонецОбласти

	#Область ОбщиеПараметры

	// Общий менеджер временных таблиц для всех этапов расчета
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);

	// Статистика изменения документов за расчетный период (причина пересчета периода).
	Если ПараметрыИнициализации.Свойство("ИзмененоДокументов") Тогда
	// Штатный вызов из механизма партионного учета версии 2.2.
		ПараметрыРасчета.Вставить("ИзмененоДокументов", ПараметрыИнициализации.ИзмененоДокументов);
	Иначе
		ПараметрыРасчета.Вставить("ИзмененоДокументов", Неопределено);
	КонецЕсли;

	// Прочие служебные свойства
	ПараметрыРасчета.Вставить("СтрокаСоединенияИБ", СтрокаСоединенияИнформационнойБазы());
	ПараметрыРасчета.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());

	// Параметры расчета себестоимости
	ПараметрыРасчета.Вставить("РегламентноеЗадание", ЗапущеноРегламентнымЗаданием);
	ПараметрыРасчета.Вставить("ПредварительныйРасчет", ТолькоПредварительныйРасчетСебестоимости);

	#КонецОбласти

	#Область ФоновыеЗадания

	// Свойства фоновых заданий расчета и записи движений.
	ТаблицаЗаданийЗаписи = Новый ТаблицаЗначений;
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ИдентификаторЗадания");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ПредыдущееЗадание");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ИмяРегистра");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("КоличествоДвижений");

	ТаблицаЗаданийРасчета = Новый ТаблицаЗначений;
	ТаблицаЗаданийРасчета.Колонки.Добавить("ИдентификаторЗадания");
	ТаблицаЗаданийРасчета.Колонки.Добавить("КлючЗадания");
	ТаблицаЗаданийРасчета.Колонки.Добавить("ИдентификаторРасчета");

	ПараметрыРасчета.Вставить("СтекЗаданийЗаписи", Новый Массив); // стек вызовов фоновых заданий для записи движений
	ПараметрыРасчета.Вставить("ТаблицаЗаданийЗаписи", ТаблицаЗаданийЗаписи); // описание каждого запущенного задания записи
	ПараметрыРасчета.Вставить("ОбщееКоличествоФЗЗаписи", 0); // общее количество выполненных фоновых заданий записи
	ПараметрыРасчета.Вставить("ТаблицаЗаданийРасчета", ТаблицаЗаданийРасчета); // описание каждого запущенного задания расчета
	ПараметрыРасчета.Вставить("ОбщееКоличествоФЗРасчета", 0); // общее количество выполненных фоновых заданий расчета
	ПараметрыРасчета.Вставить("ИдентификаторРасчета"); // заполняется для фоновых заданий расчета партий

	#КонецОбласти

	#Область ТехнологическиеПараметры

	// Технологические параметры расчета.
	УстановитьТехнологическиеПараметрыРасчета(ПараметрыРасчета);

	#КонецОбласти

	#Область ФункциональныеОпции

	// Значения анализируемых функциональных опций и констант (они также устанавливаются в качестве одноименных параметров запросов).
	ПараметрыРасчета.Вставить("ФО", Новый Структура);
	ИменаФО = "
		|ИспользоватьУправлениеПроизводством2_2,
		|ВалютыУпрИРеглУчетаСовпадают,
		//++ НЕ УТ
		|АналитическийУчетПоГруппамПродукции,
		|ВидЦеныПлановойСтоимостиМатериаловРабот,
		//-- НЕ УТ
		|ИспользоватьУправленческуюОрганизацию,
		|ИспользоватьУчетПрочихДоходовРасходов,
		|ИспользоватьУчетПрочихДоходовРасходовРегл,
		|РаспределениеДопРасходовПоВыбывшимТоварам,
		//++ НЕ УТ
		|ИспользоватьМеждународныйФинансовыйУчет,
		//-- НЕ УТ
		|ФормироватьВидыЗапасовПоГруппамФинансовогоУчета,
		|ФормироватьФинансовыйРезультат,
		|ФормироватьУправленческийБаланс";
	РасчетСебестоимостиЛокализация.ДополнитьИменаФункциональныхОпций(ИменаФО);

	Для Каждого КлючИЗначение Из Новый Структура(ИменаФО) Цикл

		ОписаниеФО = ОписаниеКонстантыИлиФункциональнойОпции(КлючИЗначение.Ключ);

		Если ОписаниеФО.Метаданные <> Неопределено Тогда
			ПараметрыРасчета.ФО.Вставить(КлючИЗначение.Ключ, ОписаниеФО.Значение);
		Иначе

			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найдена функциональная опция или константа ""%1""';uk='Не знайдена функціональна опція або константа ""%1""'",ОбщегоНазначения.КодОсновногоЯзыка()), КлючИЗначение.Ключ);

			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета, ТекстДляПротокола);

			ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, МассивОрганизаций, // т.к. свойство ПараметрыРасчета.МассивОрганизаций еще не инициализировано
			НСтр("ru='При запуске расчета диагностированы ошибки';uk='При запуску розрахунку діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола);

		КонецЕсли;

	КонецЦикла;

	// Признак ведения упр. учета (расширенная проверка ФО ВестиУправленческийУчетОрганизаций).
	ПараметрыРасчета.Вставить("УправленческийУчетОрганизаций", РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));

	// Признак использования в рассчитываемом периоде управления внеоборотными активами версии 2.4.
	ИспользуетсяУправлениеВНА_2_4 = Ложь;
	//++ НЕ УТ
	ИспользуетсяУправлениеВНА_2_4 = ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	//-- НЕ УТ
	ПараметрыРасчета.Вставить("ИспользуетсяУправлениеВНА_2_4", ИспользуетсяУправлениеВНА_2_4);

	// Признаки использования в рассчитываемом периоде партионного учета
	ПараметрыРасчета.Вставить("ПартионныйУчетНеИспользуется", РасчетСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));
	ПараметрыРасчета.Вставить("ПартионныйУчетВерсии21", РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));
	ПараметрыРасчета.Вставить("ПартионныйУчетВерсии22", РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));
	ПараметрыРасчета.Вставить("ДатаПереходаНаПартионныйУчетВерсии22", РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22());

	ПараметрыРасчета.Вставить("УчитыватьСебестоимостьТоваровПоНазначениям", РасчетСебестоимостиПовтИсп.СебестоимостьТоваровПоНазначениям(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));

	// Признак расчета первого месяца в партионном учете версии 2.2
	ПараметрыРасчета.Вставить("ФормироватьНачальныеОстаткиПартий22", ПараметрыРасчета.ПартионныйУчетВерсии22
		И ПараметрыРасчета.РасчетныйПериод.НачалоПериода = ПараметрыРасчета.ДатаПереходаНаПартионныйУчетВерсии22);

		// Признаки начала учета себестоимости.
	ПараметрыРасчета.Вставить("ДатаНачалаУчетаСебестоимости", НачалоМесяца(Константы.ДатаНачалаУчетаСебестоимости.Получить()));
	ПараметрыРасчета.Вставить("ИспользоватьУчетСебестоимости", РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(РасчетныйПериод.НачалоПериода));
	ПараметрыРасчета.Вставить("ФормироватьТолькоДвиженияВводаОстатков", ПараметрыРасчета.РасчетныйПериод.НачалоСледующегоПериода = ПараметрыРасчета.ДатаНачалаУчетаСебестоимости);

	#КонецОбласти

	#Область ТипыЗаписей

	// Типы записей регистра "Себестоимость товаров"
	ПараметрыРасчета.Вставить("ТипыЗаписейПервичныхПартий", ТипыЗаписейПервичныхПартий());
	ПараметрыРасчета.Вставить("НепересчитываемыеТипыЗаписей", НепересчитываемыеТипыЗаписей());
	ПараметрыРасчета.Вставить("ТипыЗаписейКонвертацииДанных", ТипыЗаписейКонвертацииДанных());
	ПараметрыРасчета.Вставить("ТипыЗаписейМногократнойКонвертацииДанных", ТипыЗаписейМногократнойКонвертацииДанных());

	// Правила заполнения поля ТипЗаписи регистра "Себестоимость товаров"
	ПараметрыРасчета.Вставить("ПравилаЗаполненияПоляТипЗаписи", РасчетСебестоимостиПовтИсп.ПравилаЗаполненияПоляТипЗаписи());

	РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, ПараметрыРасчета.ПравилаЗаполненияПоляТипЗаписи.Количество());

	#КонецОбласти

	#Область ОрганизацииИПолитики

	// Организации и их учетные политики.
	РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, МассивОрганизаций.Количество());

	ПараметрыРасчета.Вставить("ОрганизацииСДвижениямиПоСебестоимости", ОрганизацииСДвижениямиПоСебестоимости(Дата, МассивОрганизаций));
	ПараметрыРасчета.Вставить("ОрганизацииСОстаткамиПоСебестоимости", ОрганизацииСОстаткамиПоСебестоимости(Дата, МассивОрганизаций));

	ПараметрыРасчета.Вставить("УчетныеПолитики", Новый Структура);

	ПараметрыРасчета.УчетныеПолитики.Вставить("МетодыОценкиСтоимости", Новый Соответствие); // Организация - Метод оценки
	ПараметрыРасчета.УчетныеПолитики.Вставить("ФИФОСкользящая", Новый Структура);
	
	ИспользуютФИФОВТекущемПериоде = Новый Массив;
	ИспользовалиФИФОВПрошломПериоде = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	СпрОрганизации.Ссылка КАК Организация
		|ПОМЕСТИТЬ ВтГоловныеОрганизации
		|ИЗ
		|	Справочник.Организации КАК СпрОрганизации
		|ГДЕ
		|	СпрОрганизации.Ссылка В (&Организации)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.Организация КАК Организация,
		|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.МетодОценкиСтоимостиТоваров
		|ПОМЕСТИТЬ ВТФинУчет
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(&Период, Организация В
		|		(ВЫБРАТЬ
		|			ГоловнаяОрганизация
		|		ИЗ
		|			ВтГоловныеОрганизации)) КАК УчетнаяПолитикаФинансовогоУчетаСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.Организация КАК Организация,
		|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.МетодОценкиСтоимостиТоваров
		|ПОМЕСТИТЬ ВТФинУчетПрошлыйПериод
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(&ПрошлыйПериод, Организация В
		|		(ВЫБРАТЬ
		|			ГоловнаяОрганизация
		|		ИЗ
		|			ВтГоловныеОрганизации)) КАК УчетнаяПолитикаФинансовогоУчетаСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтГоловныеОрганизации.Организация КАК Организация,
		|	ЕСТЬNULL(ВТФинУчет.МетодОценкиСтоимостиТоваров,
		|		ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц)) КАК МетодОценкиСтоимостиТоваров
		|ИЗ
		|	ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФинУчет КАК ВТФинУчет
		|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТФинУчет.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтГоловныеОрганизации.Организация КАК Организация,
		|	ЕСТЬNULL(ВТФинУчетПрошлыйПериод.МетодОценкиСтоимостиТоваров,
		|		ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц)) КАК МетодОценкиСтоимостиТоваров
		|ИЗ
		|	ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФинУчетПрошлыйПериод КАК ВТФинУчетПрошлыйПериод
		|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТФинУчетПрошлыйПериод.Организация
		|";

	Запрос.УстановитьПараметр("Организации", МассивОрганизаций);
	Запрос.УстановитьПараметр("Период", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("ПрошлыйПериод", ПараметрыРасчета.РасчетныйПериод.НачалоПредыдущегоПериода);

	Результат = Запрос.ВыполнитьПакет();

	УчетныеПолитики = Результат[3].Выгрузить();
	УчетныеПолитикиПрошлогоПериода = Результат[4].Выгрузить();

	Для Каждого ПараметрыУчетнойПолитики Из УчетныеПолитики Цикл

		ПараметрУчетнойПолитикиПрошлогоПериода = УчетныеПолитикиПрошлогоПериода.Найти(ПараметрыУчетнойПолитики.Организация, "Организация");

		ПараметрыРасчета.УчетныеПолитики.МетодыОценкиСтоимости.Вставить(ПараметрыУчетнойПолитики.Организация, ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров);

		// ФИФОСкользящая
		Если ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
			ИспользуютФИФОВТекущемПериоде.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;

		Если ПараметрУчетнойПолитикиПрошлогоПериода.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
			ИспользовалиФИФОВПрошломПериоде.Добавить(ПараметрУчетнойПолитикиПрошлогоПериода.Организация);
		КонецЕсли;

	КонецЦикла;

	ПараметрыРасчета.УчетныеПолитики.ФИФОСкользящая.Вставить("ИспользуютВТекущемПериоде",   ИспользуютФИФОВТекущемПериоде);
	ПараметрыРасчета.УчетныеПолитики.ФИФОСкользящая.Вставить("ИспользовалиВПрошломПериоде", ИспользовалиФИФОВПрошломПериоде);


	#Область ВидыЦенности

	ПараметрыРасчета.Вставить("ВидыЦенностиУслуг", Перечисления.ВидыЦенностей.МассивВидовЦенностиУслугДляУчетаСебестоимости());

	#КонецОбласти

	РасчетСебестоимостиЛокализация.ДополнитьПараметрыРасчета(ПараметрыРасчета);

	Если НЕ СокращеннаяИнициализация Тогда

	// Получим группы организаций, связанных по Интеркампани (для расчета себестоимости).
		Если ПараметрыРасчета.РасчетныйПериод.НачалоПериода = ПараметрыРасчета.ДатаПереходаНаПартионныйУчетВерсии22 Тогда
			ОрганизацииДляИнтеркампани = ПараметрыРасчета.МассивОрганизаций;
		Иначе
			ОрганизацииДляИнтеркампани = ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОрганизацииДляИнтеркампани) Тогда
			ПараметрыРасчета.Вставить("ГруппыОрганизацийПоИнтеркампани", Новый Массив);
		Иначе
			ПараметрыРасчета.Вставить("ГруппыОрганизацийПоИнтеркампани", СвязиОрганизацийПоСхемеИнтеркампани(Дата, ОрганизацииДляИнтеркампани, Истина));
		КонецЕсли;

		// Методы оценки стоимости для каждой из этих групп; сопоставляется с ГруппыОрганизацийПоИнтеркампани по индексу элемента.
		ПараметрыРасчета.Вставить("МетодыОценкиПоГруппамОрганизаций", Новый Массив);

		Для Каждого ГруппаОрганизаций Из ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани Цикл
			ПараметрыРасчета.МетодыОценкиПоГруппамОрганизаций.Добавить(ОпределитьМетодОценкиСтоимостиДляГруппыОрганизаций(ПараметрыРасчета, ГруппаОрганизаций));
		КонецЦикла;

	КонецЕсли;

	#КонецОбласти

	#Область Валюты

	ПараметрыРасчета.Вставить("Валюты", Новый Структура);

	ПараметрыРасчета.Валюты.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	ПараметрыРасчета.Валюты.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());

	КоэффициентВалютыРегл = РаботаСКурсамивалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ПараметрыРасчета.Валюты.ВалютаУправленческогоУчета, ПараметрыРасчета.Валюты.ВалютаРегламентированногоУчета, ПараметрыРасчета.РасчетныйПериод.КонецПериода);

	КоэффициентВалютыУпр = РаботаСКурсамивалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ПараметрыРасчета.Валюты.ВалютаРегламентированногоУчета, ПараметрыРасчета.Валюты.ВалютаУправленческогоУчета, ПараметрыРасчета.РасчетныйПериод.КонецПериода);

	ПараметрыРасчета.Валюты.Вставить("КоэффициентВалютыРегл", КоэффициентВалютыРегл);
	ПараметрыРасчета.Валюты.Вставить("КоэффициентВалютыУпр", КоэффициентВалютыУпр);

	#КонецОбласти

	Если ПараметрыИнициализации.Свойство("ПолучениеСпискаПараметров") Тогда
		Возврат ПараметрыРасчета; // для вызова процедуры извне механизма с целью получения списка переопределяемых параметров расчета и отладки
	КонецЕсли;

	// Формирует общие временные таблицы для отбора данных в запросах.
	ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);

	// Описание регистров
	ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета);

	// Формирует вспомогательные временные таблицы.
	ИнициализироватьВспомогательныеВременныеТаблицы(ПараметрыРасчета);

	Если СокращеннаяИнициализация Тогда
		Возврат ПараметрыРасчета; // для вызова процедуры извне механизма с целью инициализации временных таблиц
	КонецЕсли;

	// Формирует в ИБ документы расчета себестоимости для рассчитываемых организаций.
	// Также формирует временную таблицу ВТДокументыРасчетаСебестоимости и свойство ДокументыРасчетаПоОрганизациям.
	ИнициализироватьДокументыРасчетаСебестоимости(ПараметрыРасчета, ТолькоПредварительныйРасчетСебестоимости, ЗапущеноРегламентнымЗаданием);

	Если ПараметрыРасчета.ВариантРасчета = Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость Тогда
	// Формирует временную таблицу ВТДокументыРасчетаСебестоимостиПрошлогоПериода, используемую в механизме корректировок начальных остатков.
		ИнициализироватьДокументыРасчетаСебестоимостиПрошлогоПериода(ПараметрыРасчета);
	КонецЕсли;

КонецФункции

Функция ИнициализироватьОсновныеПараметрыРасчета(Период, МассивОрганизаций,
		ЗапущенРасчетПартий = Ложь, ИдетРасчетПартий = Ложь) Экспорт

	РасчетныйПериод = Новый Структура;
	РасчетныйПериод.Вставить("НачалоПериода", НачалоМесяца(Период));
	РасчетныйПериод.Вставить("КонецПериода", КонецМесяца(Период));

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РасчетныйПериод", РасчетныйПериод);
	ПараметрыРасчета.Вставить("МассивОрганизаций", МассивОрганизаций);

	ПараметрыРасчета.Вставить("ЗапущенРасчетПартий", ЗапущенРасчетПартий);
	ПараметрыРасчета.Вставить("ИдетРасчетПартий", ИдетРасчетПартий);

	Возврат ПараметрыРасчета;

КонецФункции

Процедура ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета,
		ИдетРасчетСебестоимости) Экспорт

	ПараметрыРасчета.Вставить("ИдетРасчетПартий", НЕ ИдетРасчетСебестоимости); // в данный выполняется расчет партий или расчет себестоимости?
	Если ИдетРасчетСебестоимости Тогда
		ПараметрыРасчета.Вставить("ИмяМодуляМеханизмаРасчета", Метаданные.ОбщиеМодули.РасчетСебестоимостиКорректировкаСтоимости.Имя);
	Иначе
		ПараметрыРасчета.Вставить("ИмяМодуляМеханизмаРасчета", Метаданные.ОбщиеМодули.РасчетСебестоимости.Имя);
	КонецЕсли;

	ПараметрыРасчета.Вставить("МодульМеханизмаРасчета", ОбщегоНазначения.ОбщийМодуль(ПараметрыРасчета.ИмяМодуляМеханизмаРасчета));

КонецПроцедуры

Процедура ВыполняетсяЗаполнениеПартийВРегистреСебестоимостьТоваров(ПараметрыРасчета,
		ИдетЗаполнение) Экспорт

	Если ИдетЗаполнение Тогда
		ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости = Истина; // этап начат
	Иначе
		ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости = Ложь; // этап завершен
		ПараметрыРасчета.ЗаполненыПартииВСебестоимости = Истина; // партии в себестоимости заполнены
	КонецЕсли;

КонецПроцедуры

Процедура ВыполняетсяЗаполнениеПартийВРегистреВыручкаИСебестоимостьПродаж(ПараметрыРасчета,
		ИдетЗаполнение) Экспорт

	Если ИдетЗаполнение Тогда
		ПараметрыРасчета.ЗаполняютсяПартииВВыручке = Истина; // этап начат
	Иначе
		ПараметрыРасчета.ЗаполняютсяПартииВВыручке = Ложь; // этап завершен
		ПараметрыРасчета.ЗаполненыПартииВВыручке = Истина; // партии в выручке заполнены
	КонецЕсли;

КонецПроцедуры

// Инициализирует общие параметры расчета, описывающие обслуживаемые механизмом расчета регистры.
//
Процедура ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета)

// Значения структур РегистрыСРасчетнымиОборотами и РегистрыСРасчетнымиОстатками определяет,
	// будет ли выполняться автообновления расчетных записей (оборотов)/остатков при кэшировании сформированных движений.
	// Если требуется отключить автообновление, то перед обращением к расчетным таблицам надо добавить вызов
	// ОбновитьРасчетныеОборотыРегистра() или ОбновитьРасчетныеОстаткиРегистра()
	// Сначала необходимо выполнять обновление расчетных записей, т.к. при расчете остатков используются эти данные.

	// К основным таблицам этих регистров обращаться нельзя, т.к. они содержат результаты предыдущего расчета.
	ПараметрыРасчета.Вставить("РегистрыСРасчетнымиОборотами", Новый Структура); // ВТКэшРасчетныеОбороты...
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя, Истина);

	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеДоходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя, Истина);
	//++ НЕ УТ
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ТоварыОрганизаций.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов.Имя, Истина);

	Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
	// Эти регистры не используются при расчете себестоимости
		ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве.Имя, Истина);
	КонецЕсли;
	//-- НЕ УТ

	// К "реальным" конечным остаткам этих регистров обращаться нельзя,
	// т.к. они некорректны - содержат результаты предыдущего расчета.
	ПараметрыРасчета.Вставить("РегистрыСРасчетнымиОстатками", Новый Структура); // ВТКэшРасчетныеОстатки...
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПрочиеДоходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя, Истина);
	//++ НЕ УТ
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов.Имя, Истина);
	//-- НЕ УТ
	РасчетСебестоимостиЛокализация.ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета);

	// Инициализируем регистры, используемые механизмами расчета партий и себестоимости
	ОбслуживаемыеРегистры = Новый Соответствие;
	РасчетСебестоимостиКорректировкаСтоимости.ИсходящиеДанныеМеханизма(ОбслуживаемыеРегистры);
	Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		РасчетСебестоимости.ИсходящиеДанныеМеханизма(ОбслуживаемыеРегистры); // дополним перечень регистров
	КонецЕсли;

	ПараметрыРасчета.Вставить("Движения", Новый Структура);
	Для Каждого КлючИЗначение Из ОбслуживаемыеРегистры Цикл
		ИнициализироватьДанныеРегистра(ПараметрыРасчета, КлючИЗначение.Ключ);
	КонецЦикла;

	// При необходимости выполняется полная очистка всех движений, сформированных предыдущим расчетом.
	Если НЕ ПараметрыРасчета.Свойство("РасшифровкаРаспределения")
			И ПараметрыРасчета.Отладка.ОчищатьСтарыеДвижения Тогда
		ОчиститьСтарыеДвиженияРасчетаСебестоимости(ПараметрыРасчета);
		ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета);
	КонецЕсли;

КонецПроцедуры

// Формирует общие временные таблицы для отбора данных в запросах.
//
Процедура ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета) Экспорт

// Для повторной инициализации надо уничтожить все временные таблицы, создаваемые в этой процедуре.
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТОтборАналитикаПоПартнерам");

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.Текст = "ВЫБРАТЬ
		|	АналитикаПоПартнерам.КлючАналитики 				КАК КлючАналитики,
		|	АналитикаПоПартнерам.Организация 				КАК Организация,
		|	АналитикаПоПартнерам.Контрагент					КАК Контрагент,
		|	АналитикаПоПартнерам.Партнер 					КАК Партнер,
		|	АналитикаПоПартнерам.НаправлениеДеятельности 	КАК НаправлениеДеятельности
		|ПОМЕСТИТЬ ВТОтборАналитикаПоПартнерам
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|ГДЕ
		|	АналитикаПоПартнерам.Организация В (&МассивОрганизаций)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Т.КлючАналитики,
		|	Т.Организация
		|ИЗ
		|	ВТОтборАналитикаПоПартнерам КАК Т
		|";

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТОтборАналитикаПоПартнерам");

	ОрганизацияПоАналитикеПартнеров = Новый Соответствие;

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ОрганизацияПоАналитикеПартнеров.Вставить(Выборка.КлючАналитики, Выборка.Организация);
	КонецЦикла;

	ПараметрыРасчета.Вставить("ОрганизацияПоАналитикеПартнеров", ОрганизацияПоАналитикеПартнеров);

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);

	РасчетСебестоимостиЛокализация.ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);

КонецПроцедуры

// Формирует вспомогательные временные таблицы.
//
Процедура ИнициализироватьВспомогательныеВременныеТаблицы(ПараметрыРасчета) Экспорт

	ПараметрыРасчета.Вставить("ВспомогательныеВременныеТаблицы", Новый Структура);

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	СоздатьТаблицуПравилЗаполненияПоляТипЗаписи(Запрос.МенеджерВременныхТаблиц, ПараметрыРасчета.ПравилаЗаполненияПоляТипЗаписи);

	ИнициализироватьВспомогательнуюВременнуюТаблицу(ПараметрыРасчета, "ВТПромежуточнаяСебестоимостьТоваров", Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);

	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 0
		|	Т.ДокументДвижения				КАК ДокументДвижения,
		|	Т.Период						КАК Период,
		|
		|	Т.Организация					КАК Организация,
		|	Т.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
		|	Т.ВидЗапасов					КАК ВидЗапасов,
		|	Т.РазделУчета					КАК РазделУчета,
		|	Т.Партия						КАК Партия,
		|	Т.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
		|	Т.АналитикаФинансовогоУчета		КАК АналитикаФинансовогоУчета,
        |	Т.НалоговоеНазначение 			КАК НалоговоеНазначение,
		|
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК Стоимость,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьБезНДС,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьЗабалансовая,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьДопРасходы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьДопРасходыБезНДС,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК Трудозатраты,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПостоянныеСНДС,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПостоянныеБезНДС,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПеременныеСНДС,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПеременныеБезНДС,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьРегл,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьРеглБезНДС,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК НДСРегл,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьЗабалансоваяРегл,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостояннаяРазница,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ВременнаяРазница,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ДопРасходыРегл,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ТрудозатратыРегл,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПостоянныеРегл,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПеременныеРегл,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ДопРасходыРеглБезНДС,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПостоянныеРеглБезНДС,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПеременныеРеглБезНДС,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьУпр,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ДопРасходыУпр,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ТрудозатратыУпр,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПостоянныеУпр,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПеременныеУпр
        |	,ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьУпрБезНДС,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ДопРасходыУпрБезНДС,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПостоянныеУпрБезНДС,
        |	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПеременныеУпрБезНДС
		|ПОМЕСТИТЬ ВТСтоимостьПартийТоваров
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК Регистратор,
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам
		|ПОМЕСТИТЬ ВТАналитикиУчетаПоПартнерамИзОтчетовДавальцам
		|
		|";

	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ВТАналитикиУчетаПоПартнерамИзОтчетовДавальцам");

	//++ НЕ УТ
	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляПрочихРасходовНЗП();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВоВременнуюТаблицу", "ПОМЕСТИТЬ втПрочиеРасходыНезавершенногоПроизводства");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "втПрочиеРасходыНезавершенногоПроизводства");

	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляОстатковБазРаспределения();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВоВременнуюТаблицу", "ПОМЕСТИТЬ ОстаткиБазРаспределения");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ОстаткиБазРаспределения");

	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляКоэффициентовПриведения();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВоВременнуюТаблицу", "ПОМЕСТИТЬ КоэффициентыПриведения");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "КоэффициентыПриведения");

	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляРаспределенияДолейПроизводственныхРасходов();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВоВременнуюТаблицу", "ПОМЕСТИТЬ ДолиПроизводственныхРасходов");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ДолиПроизводственныхРасходов");

	Запрос.Текст = РасчетСебестоимостиЗаполнениеПартий.ТекстОписаниеДанныхДляПартийТоваров();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВоВременнуюТаблицу", "ПОМЕСТИТЬ ВтПроизводственныеЗатратыСебестоимостьТоваров");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ВтПроизводственныеЗатратыСебестоимостьТоваров");

	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляПартийОтнесенияРасходов();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВоВременнуюТаблицу", "ПОМЕСТИТЬ ПартииДляОтнесенияРасходов");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ПартииДляОтнесенияРасходов");

	//-- НЕ УТ

	// Создадим временную таблицу учетных политик организаций.
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТУчетныеПолитикиОрганизаций, ВТУчетныеПолитикиПрошлогоПериода");

	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик("НастройкиСистемыНалогообложения", ПараметрыРасчета.МенеджерВременныхТаблиц, ПараметрыРасчета.МассивОрганизаций, ПараметрыРасчета.РасчетныйПериод.НачалоПериода, "ВТУчетныеПолитикиОрганизаций");

	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик("НастройкиСистемыНалогообложения", ПараметрыРасчета.МенеджерВременныхТаблиц, ПараметрыРасчета.МассивОрганизаций, ПараметрыРасчета.РасчетныйПериод.НачалоПериода, "ВТУчетныеПолитикиПрошлогоПериода");

	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик("НастройкиУчетаНДС", ПараметрыРасчета.МенеджерВременныхТаблиц, ПараметрыРасчета.МассивОрганизаций, ПараметрыРасчета.РасчетныйПериод.НачалоПериода);

КонецПроцедуры

// Формирует вспомогательную временную таблицу.
//
Процедура ИнициализироватьВспомогательнуюВременнуюТаблицу(ПараметрыРасчета,
		ИмяВременнойТаблицы, ИмяРегистра = "", ТекстЗапроса = "")

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Если ЗначениеЗаполнено(ИмяРегистра) Тогда

		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	*
			|ПОМЕСТИТЬ %1
			|ИЗ
			|	ВТКэш%2 КАК Т";

	Иначе

		Запрос.Текст = ТекстЗапроса + "
			|;
			|ВЫБРАТЬ ПЕРВЫЕ 0
			|	*
			|ИЗ
			|	%1 КАК Т";

	КонецЕсли;

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяВременнойТаблицы, ИмяРегистра);

	РезультатЗапроса = Запрос.Выполнить();

	ОписаниеТаблицы = Новый Структура;
	ОписаниеТаблицы.Вставить("ЭтоОписаниеРегистра", Ложь);
	ОписаниеТаблицы.Вставить("ЭтоОписаниеВременнойТаблицы", Истина);
	ОписаниеТаблицы.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);

	Если ЗначениеЗаполнено(ИмяРегистра) Тогда

		ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистра];

		ОписаниеТаблицы.Вставить("Таблица", ОписаниеРегистра.Таблица.СкопироватьКолонки());
		ОписаниеТаблицы.Вставить("ПоляТаблицы", ОписаниеРегистра.ПоляКэшаРегистра);
		ОписаниеТаблицы.Вставить("СуммируемыеПоля", ОписаниеРегистра.ПоляОтбораНепустыхДвижений);
		ОписаниеТаблицы.Вставить("ЕстьСвойствоВидДвижения", ОписаниеРегистра.ЕстьСвойствоВидДвижения);

	Иначе

		ОписаниеТаблицы.Вставить("Таблица", РезультатЗапроса.Выгрузить());

		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, ОписаниеТаблицы.Таблица.Количество());

		ПоляТаблицы = "";
		СуммируемыеПоля = "";

		Для Каждого Колонка Из ОписаниеТаблицы.Таблица.Колонки Цикл

			ПоляТаблицы = ПоляТаблицы + ?(ПоляТаблицы = "", "", ", ") + "%1"
				+ Колонка.Имя;

			Если ЭтоСуммируемаяКолонкаТаблицы(Колонка) Тогда
				СуммируемыеПоля = СуммируемыеПоля + ?(СуммируемыеПоля = "", "", ", ")
					+ "%1" + Колонка.Имя;
			КонецЕсли;

		КонецЦикла;

		ОписаниеТаблицы.Вставить("ПоляТаблицы", ПоляТаблицы);
		ОписаниеТаблицы.Вставить("СуммируемыеПоля", СуммируемыеПоля);
		ОписаниеТаблицы.Вставить("ЕстьСвойствоВидДвижения", ОписаниеТаблицы.Таблица.Колонки.Найти("СлужебноеВидДвиженияПриход") <> Неопределено);

	КонецЕсли;

	ОписаниеТаблицы.Вставить("КоличествоПорцийДанных", 0); // при расчете этапа каждая порция сформированных данных сначала складывается в отдельные ВТ, а в конце этапа все они объединяются
	ОписаниеТаблицы.Вставить("ИменаТаблицПорций", ""); // имена всех ВТ порций вида <Имя таблицы>_<НомерПорции от 1 до КоличествоПорцийДанных>
	ПараметрыРасчета.ВспомогательныеВременныеТаблицы.Вставить(ИмяВременнойТаблицы, ОписаниеТаблицы);

КонецПроцедуры

// Формирует ВТПравилаЗаполненияПоляТипЗаписи.
//
Процедура СоздатьТаблицуПравилЗаполненияПоляТипЗаписи(МенеджерВременныхТаблиц,
		ПравилаЗаполненияПоляТипЗаписи) Экспорт

	УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, "ВТПравилаЗаполненияПоляТипЗаписи");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ПравилаЗаполненияПоляТипЗаписи", ПравилаЗаполненияПоляТипЗаписи);

	Запрос.Текст = "ВЫБРАТЬ
		|	Т.ПустоеЗначениеРегистратора КАК ПустоеЗначениеРегистратора,
		|	Т.ХозяйственнаяОперация 	 КАК ХозяйственнаяОперация,
		|	Т.ПоложительноеКоличество    КАК ПоложительноеКоличество,
		|	Т.ТипЗаписиПриход 			 КАК ТипЗаписиПриход,
		|	Т.ТипЗаписиРасход 			 КАК ТипЗаписиРасход,
		|	Т.ДокументИсточникВПриходе 	 КАК ДокументИсточникВПриходе,
		|	Т.ДокументИсточникВРасходе 	 КАК ДокументИсточникВРасходе,
		|	Т.КорПартияВРасходе 		 КАК КорПартияВРасходе
		|ПОМЕСТИТЬ ВТПравилаЗаполненияПоляТипЗаписи
		|ИЗ
		|	&ПравилаЗаполненияПоляТипЗаписи КАК Т";

	Запрос.Выполнить();

КонецПроцедуры

// Действия, выполняемые при окончании расчета.
//
Функция ОкончаниеРасчета(ПараметрыРасчета)

	Если РасчетСебестоимостиПротоколРасчета.ВедетсяПротоколРасчета(ПараметрыРасчета) Тогда
		РасчетСебестоимостиПротоколРасчета.ОкончаниеРасчета(ПараметрыРасчета);
	КонецЕсли;

	Если ПараметрыРасчета.Свойство("МенеджерВременныхТаблиц") Тогда
		ПараметрыРасчета.МенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;

	ПараметрыРасчета = Неопределено;

КонецФункции

// Возвращает перечень документов, которые могут иметь движения в разных месяцах или по нескольким организациям.
//
// Параметры:
//	РазныеПериоды - Булево - добавлять в результат документы с движениями в разных периодах
//	РазныеОрганизации - Булево - добавлять в результат документы с движениями по нескольким организациям
//	ИмяРегистра - Строка - имя регистра накопления, для которого нужно получить перечень документов;
//		пустое значение - перечень документов для всех регистров.
//
// Возвращаемое значение:
//	Соответствие - Ключ - ОбъектМетаданных.
//
Функция ДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды,
		РазныеОрганизации, ИмяРегистра = "") Экспорт

	ОписаниеДокументов = Новый Соответствие;

	// Для движений в других периодах Значение = Истина означает
	// - наличие первичных+расчетных движений,
	// - расчетные движения формируются при расчете их периода.
	// Если указано значение Ложь, то это означает, что
	// - расчетные движения могут быть без первичных движений,
	// - расчетные движения любых периодов формируются при расчете периода документа.
	// Для движений других организаций Значение должно быть только Истина.
	Значение = Истина;

	Если ИмяРегистра = ""
			ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя Тогда

		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.РеализацияТоваровУслуг, Значение); // операция РеализацияБезПереходаПраваСобственности

			ОписаниеДокументов.Вставить(Метаданные.Документы.АвансовыйОтчет, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ВводОстатков, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ВводОстатковТоваров, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.КорректировкаПриобретения, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.КорректировкаРеализации, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПриобретениеТоваровУслуг, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПрочиеДоходыРасходы, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.РаспределениеРасходовБудущихПериодов, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.РасходныйКассовыйОрдер, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт, Значение); // доп. расходы
		КонецЕсли;

		Если РазныеОрганизации Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями, Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями, Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании, Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями, Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПеремещениеТоваров, Значение);
		КонецЕсли;

	КонецЕсли;

	Если ИмяРегистра = ""
			ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя Тогда

		Если РазныеПериоды Тогда
			Для Каждого МетаДокумент Из Метаданные.Документы Цикл
				Если МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.ПартииПрочихРасходов) Тогда
					ОписаниеДокументов.Вставить(МетаДокумент, Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

	Если ИмяРегистра = ""
			ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя Тогда

		Если РазныеПериоды Тогда

			Для Каждого МетаДокумент Из Метаданные.Документы Цикл
				Если МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы) Тогда
					ОписаниеДокументов.Вставить(МетаДокумент, Значение);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

		Если РазныеОрганизации Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями, Значение);
		КонецЕсли;

	КонецЕсли;

	Если ИмяРегистра = ""
			ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя Тогда

		Если РазныеПериоды Тогда
			Для Каждого МетаДокумент Из Метаданные.Документы Цикл
				Если МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.ПрочиеРасходы) Тогда
					Если МетаДокумент = Метаданные.Документы.РаспределениеРасходовБудущихПериодов Тогда
						ОписаниеДокументов.Вставить(МетаДокумент, НЕ Значение);
					Иначе
						ОписаниеДокументов.Вставить(МетаДокумент, Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

	Если ИмяРегистра = ""
			ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.Имя Тогда

		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.РеализацияТоваровУслуг, Значение);
		КонецЕсли;

	КонецЕсли;

	РасчетСебестоимостиЛокализация.ДополнитьДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды, РазныеОрганизации, ИмяРегистра, ОписаниеДокументов);

	// Этот тип документов не должен обрабатываться расчетными механизмами
	ОписаниеДокументов.Удалить(Метаданные.Документы.КорректировкаРегистров);

	Возврат ОписаниеДокументов;

КонецФункции

#КонецОбласти

#Область ПроверкаДанных

#Область ПроверкаИсходныхИИтоговыхДанных

// Выполняет проверку корректности остатков себестоимости, а также выполнение регламентных операций, предшествующих расчету.
//
Процедура ПроверитьКорректностьИсходныхДанныхДоРасчета(ПараметрыРасчета) Экспорт

	Если НЕ (ПараметрыРасчета.ИдетРасчетПартий
			ИЛИ НЕ ПараметрыРасчета.ЗапущенРасчетПартий) Тогда
		Возврат; // нужно или в начале расчета партий, или в начале отдельного расчета себестоимости
	КонецЕсли;

	РасчетСебестоимостиПротоколРасчета.НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьИсходныхДанныхДоРасчета");

	// Получим результаты проверки и поместим их в протокол.
	ТаблицаПроверок = АудитСостоянияСистемы.ТаблицаПроверокПоКонтексту(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета);

	ТаблицаОбъектов = АудитСостоянияСистемы.ТаблицаОбъектовПроблемСостоянияСистемы(ТаблицаПроверок.ВыгрузитьКолонку("Проверка"), ПараметрыРасчета.МассивОрганизаций, ПараметрыРасчета.РасчетныйПериод.НачалоПериода, ПараметрыРасчета.РасчетныйПериод.КонецПериода);

	Для Каждого ОписаниеОшибки Из ТаблицаОбъектов Цикл

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВИсходныхДанныхДляРасчета, ОписаниеОшибки.ПредставлениеОбъекта);

	КонецЦикла;

	РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, ТаблицаОбъектов.Количество());

КонецПроцедуры

// Проверяет наличие некорректных остатков по себестоимости, получившихся в результате выполнения расчета.
//
Процедура ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета(ПараметрыРасчета)

	РасчетСебестоимостиПротоколРасчета.НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета");

	ВыполняемыеПроверки = Новый Структура;
	ВыполняемыеПроверки.Вставить("СоответствиеСуммИКоличества");
	ВыполняемыеПроверки.Вставить("ПроверкаРезультатаРасчетаПоКоличеству");

	РасчетСебестоимостиЛокализация.ДополнитьСписокПроверокПослеРасчета(ВыполняемыеПроверки);

	Для Каждого ТекущаяПроверка Из ВыполняемыеПроверки Цикл

	// Выполним проверку.
		Проверка = АудитСостоянияСистемы.НайтиПроверкуПоКлючевымПолям(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, ТекущаяПроверка.Ключ);

		Если НЕ ЗначениеЗаполнено(Проверка) Тогда

			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найдена проверка ""%1"".';uk='Не знайдена перевірка ""%1"".'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекущаяПроверка.Ключ);

			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения, ТекстДляПротокола);

			ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

		КонецЕсли;

		ПараметрыРасчетаПроверки = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруПараметрыРасчета(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, ПараметрыРасчета.МассивОрганизаций);

		ПараметрыРасчетаПроверки.Вставить("АвтоматическоеТестирование", ПараметрыРасчета.АвтоматическоеТестирование);
		ПараметрыРасчетаПроверки.Вставить("РежимОтладки", ПараметрыРасчета.РежимОтладки);

		РезультатПроверки = АудитСостоянияСистемы.ВыполнитьПроверкуСостоянияСистемы(Проверка, ПараметрыРасчетаПроверки);

		// Получим результаты проверки и поместим их в протокол.
		КоличествоПроблем = 0;

		Для Каждого ВыявленнаяПроблема Из РезультатПроверки.ВыявленныеПроблемы Цикл

			КоличествоПроблем = КоличествоПроблем
				+ ВыявленнаяПроблема.Объекты.Количество();

			Для Каждого ОписаниеОшибки Из ВыявленнаяПроблема.Объекты Цикл

				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВОстаткахПослеРасчета, ОписаниеОшибки.Представление);

			КонецЦикла;

		КонецЦикла;

		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, КоличествоПроблем);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаСформированныхРасчетныхДанных

// Проверяет отсутствие ошибок в сформированных движениях.
//
Функция ПроверитьКорректностьСформированныхДвижений(ПараметрыРасчета)

	РасчетСебестоимостиПротоколРасчета.НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьСформированныхДвижений");

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	// Проверяет корректность указания Организации в сформированных движениях:
	// - не должно быть движений по не рассчитываемым организациям.
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл

		ОписаниеРегистра = КлючИЗначение.Значение;

		Если НЕ НужноЗаписатьРегистр(ПараметрыРасчета, ОписаниеРегистра) Тогда
			Продолжить;
		КонецЕсли;

		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэш"
			+ ОписаниеРегистра.ИмяРегистра));

		Если ОписаниеРегистра.ЕстьОрганизация Тогда

			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Т.Регистратор,
				|	Т.Организация
				|ПОМЕСТИТЬ ВТДвиженияСНекорректнойОрганизацией
				|ИЗ
				|	ВТКэш%1 КАК Т
				|ГДЕ
				|	%ОтборПоОрганизации
				|";

			ОтборПоОрганизации = "НЕ (Т.Организация В(&МассивОрганизаций))";
			Если НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
			// Записи с незаполненной организаций в этом регистре не считаются ошибочными.
				ОтборПоОрганизации = ОтборПоОрганизации
					+ " И Т.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации", ОтборПоОрганизации);

		Иначе // ЕстьАналитикаПартнеров
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Т.Регистратор,
				|	Т.АналитикаУчетаПоПартнерам.Организация КАК Организация
				|ПОМЕСТИТЬ ВТДвиженияСНекорректнойОрганизацией
				|ИЗ
				|	ВТКэш%1 КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборАналитикаПоПартнерам КАК АналитикаПартнеров
				|			ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
				|ГДЕ
				|	АналитикаПартнеров.КлючАналитики ЕСТЬ NULL
				|";

		КонецЕсли;

		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ОписаниеРегистра.ИмяРегистра);

		Запрос.Выполнить();

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкиВСформированныхДвижениях(ПараметрыРасчета, ОписаниеРегистра, "ВТДвиженияСНекорректнойОрганизацией", НСтр("ru='Сформированы движения с некорректной организацией';uk='Сформовано рухи з некоректною організацією'",ОбщегоНазначения.КодОсновногоЯзыка()));

		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДвиженияСНекорректнойОрганизацией");

	КонецЦикла;

	// Проверки для партионного учета версии 2.2:
	// убедимся, что при расчете не было сформировано ошибочных движений по регистру "Себестоимость товаров".
	Если ПараметрыРасчета.ПартионныйУчетВерсии22
			И ПараметрыРасчета.ВариантРасчета = Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость
			И ПараметрыРасчета.Движения.Свойство(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя) Тогда

		ОписаниеРегистра = ПараметрыРасчета.Движения[Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя];

		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэш"
			+ ОписаниеРегистра.ИмяРегистра));

			// Проверяем корректность типа записи в движениях, сформированных на этапе распределения партий.
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Регистратор,
			|	Т.Организация
			|ПОМЕСТИТЬ ВТДвиженияНепересчитываемыхТипов
			|ИЗ
			|	ВТКэшСебестоимостьТоваров КАК Т
			|ГДЕ
			|	Т.ТипЗаписи В (&НепересчитываемыеТипыЗаписей)
			|	И НЕ Т.РасчетПартий
			|	И НЕ Т.РасчетСебестоимости
			|";

		Запрос.Выполнить();

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкиВСформированныхДвижениях(ПараметрыРасчета, ОписаниеРегистра, "ВТДвиженияНепересчитываемыхТипов", НСтр("ru='Сформированы движения по непересчитываемому типу записи';uk='Сформовано рухи по типу записи, що не перераховується'",ОбщегоНазначения.КодОсновногоЯзыка()));

		// Проверяем соответствие количества в первичных движениях в ИБ и в движениях, сформированных на этапе распределения партий.
		Запрос.Текст = "ВЫБРАТЬ
			|	Т.Регистратор,
			|	Т.СлужебноеВидДвиженияПриход,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.РазделУчета,
			|	Т.ВидЗапасов,
			|	Т.Организация,
			|	Т.КорАналитикаУчетаНоменклатуры,
			|	Т.КорРазделУчета,
			|	Т.КорВидЗапасов,
			|	Т.КорОрганизация,
			|	Т.ТипЗаписи,
			|	Т.ХозяйственнаяОперация,
			|	СУММА(Т.Количество) КАК Количество
			|ПОМЕСТИТЬ ВТИзмененныеПервичныеДвижения
			|ИЗ
			|	(ВЫБРАТЬ
			|		Т.Регистратор КАК Регистратор,
			|		ВЫБОР
			|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК СлужебноеВидДвиженияПриход,
			|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			|		ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
			|			ИНАЧЕ Т.РазделУчета
			|		КОНЕЦ КАК РазделУчета,
			|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
			|			ИНАЧЕ Т.ВидЗапасов
			|		КОНЕЦ КАК ВидЗапасов,
			|		Т.Организация КАК Организация,
			|		ВЫБОР
			|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
			|			ИНАЧЕ Т.КорАналитикаУчетаНоменклатуры
			|		КОНЕЦ КАК КорАналитикаУчетаНоменклатуры,
			|		ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
			|			ИНАЧЕ Т.КорРазделУчета
			|		КОНЕЦ КАК КорРазделУчета,
			|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
			|			ИНАЧЕ Т.КорВидЗапасов
			|		КОНЕЦ КАК КорВидЗапасов,
			|		ВЫБОР
			|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ИНАЧЕ Т.КорОрганизация
			|		КОНЕЦ КАК КорОрганизация,
			|		Т.ТипЗаписи КАК ТипЗаписи,
			|		Т.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
			|		Т.Количество КАК Количество
			|	ИЗ
			|		РегистрНакопления.СебестоимостьТоваров КАК Т
			|	ГДЕ
			|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
			|		И Т.Организация В(&МассивОрганизаций)
			|		И Т.Активность
			|		И НЕ (Т.ТипЗаписи В (&НепересчитываемыеТипыЗаписей))
			|		И НЕ Т.РасчетПартий
			|		И НЕ Т.РасчетСебестоимости
			|		И НЕ ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.КорректировкаРегистров)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Т.Регистратор,
			|		Т.СлужебноеВидДвиженияПриход,
			|		Т.АналитикаУчетаНоменклатуры,
			|		ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
			|			ИНАЧЕ Т.РазделУчета
			|		КОНЕЦ,
			|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
			|			ИНАЧЕ Т.ВидЗапасов
			|		КОНЕЦ КАК ВидЗапасов,
			|		Т.Организация,
			|		ВЫБОР
			|			КОГДА СлужебноеВидДвиженияПриход
			|				ТОГДА ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
			|			ИНАЧЕ Т.КорАналитикаУчетаНоменклатуры
			|		КОНЕЦ,
			|		ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
			|			ИНАЧЕ Т.КорРазделУчета
			|		КОНЕЦ,
			|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
			|			ИНАЧЕ Т.КорВидЗапасов
			|		КОНЕЦ КАК КорВидЗапасов,
			|		ВЫБОР
			|			КОГДА СлужебноеВидДвиженияПриход
			|				ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ИНАЧЕ Т.КорОрганизация
			|		КОНЕЦ,
			|		Т.ТипЗаписи,
			|		Т.ХозяйственнаяОперация,
			|		-Т.Количество
			|	ИЗ
			|		ВТКэшСебестоимостьТоваров КАК Т
			|	ГДЕ
			|		НЕ Т.РасчетПартий
			|		И НЕ Т.РасчетСебестоимости
			|
			|) КАК Т
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.СлужебноеВидДвиженияПриход,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.РазделУчета,
			|	Т.ВидЗапасов,
			|	Т.Организация,
			|	Т.КорАналитикаУчетаНоменклатуры,
			|	Т.КорРазделУчета,
			|	Т.КорВидЗапасов,
			|	Т.КорОрганизация,
			|	Т.ТипЗаписи,
			|	Т.ХозяйственнаяОперация,
			|	Т.Регистратор
			|
			|ИМЕЮЩИЕ
			|	СУММА(Т.Количество) <> 0
			|";

		ПроизводственныеДокументыБезВидаЗапасов = Новый Массив;
		//++ Устарело_Производство21
		//++ НЕ УТ
		// В движениях данных документов по себестоимости измерение "Вид запасов"
		// - не заполняется при проведении документов,
		// - подбирается при расчете партий (на этапе заполнения партий).
		ПроизводственныеДокументыБезВидаЗапасов.Добавить(Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства"));
		ПроизводственныеДокументыБезВидаЗапасов.Добавить(Тип("ДокументСсылка.ПеремещениеМатериаловВПроизводстве"));
		//-- НЕ УТ
		//-- Устарело_Производство21
		Запрос.УстановитьПараметр("ПроизводственныеДокументыБезВидаЗапасов", ПроизводственныеДокументыБезВидаЗапасов);

		Запрос.Выполнить();

		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров"));

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкиВСформированныхДвижениях(ПараметрыРасчета, ОписаниеРегистра, "ВТИзмененныеПервичныеДвижения", НСтр("ru='Изменилось количество в первичных движениях';uk='Змінилася кількість в первинних рухах'",ОбщегоНазначения.КодОсновногоЯзыка()));

		// Проверяем,что реквизит ДокументИсточник не изменился в документах, которые заполняют его сами, при проведении.
		Запрос.Текст = "ВЫБРАТЬ
			|	Т.Регистратор,
			|	Т.СлужебноеВидДвиженияПриход,
			|	Т.Организация,
			|	Т.ХозяйственнаяОперация,
			|	Т.ТипЗаписи,
			|	Т.ДокументИсточник,
			|	СУММА(Т.КоличествоСтарое) КАК КоличествоСтарое,
			|	СУММА(Т.КоличествоНовое) КАК КоличествоНовое
			|ПОМЕСТИТЬ ВТРазличияДокументовИсточников
			|ИЗ
			|	(ВЫБРАТЬ
			|		Т.Регистратор КАК Регистратор,
			|		ВЫБОР
			|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК СлужебноеВидДвиженияПриход,
			|		Т.Организация КАК Организация,
			|		Т.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
			|		Т.ТипЗаписи КАК ТипЗаписи,
			|		Т.ДокументИсточник КАК ДокументИсточник,
			|		СУММА(Т.Количество) КАК КоличествоСтарое,
			|		0 КАК КоличествоНовое
			|	ИЗ
			|		РегистрНакопления.СебестоимостьТоваров КАК Т
			|	ГДЕ
			|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
			|		И Т.Организация В(&МассивОрганизаций)
			|		И Т.Активность
			|		И НЕ Т.РасчетПартий
			|		И НЕ Т.РасчетСебестоимости
			|		И НЕ ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.КорректировкаРегистров)
			|	СГРУППИРОВАТЬ ПО
			|		Т.Регистратор,
			|		ВЫБОР
			|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ,
			|		Т.Организация,
			|		Т.ХозяйственнаяОперация,
			|		Т.ТипЗаписи,
			|		Т.ДокументИсточник
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Т.Регистратор,
			|		Т.СлужебноеВидДвиженияПриход,
			|		Т.Организация,
			|		Т.ХозяйственнаяОперация,
			|		Т.ТипЗаписи КАК ТипЗаписи,
			|		Т.ДокументИсточник КАК ДокументИсточник,
			|		0 КАК КоличествоСтарое,
			|		СУММА(Т.Количество) КАК КоличествоНовое
			|	ИЗ
			|		ВТКэшСебестоимостьТоваров КАК Т
			|	ГДЕ
			|		НЕ Т.РасчетПартий
			|		И НЕ Т.РасчетСебестоимости
			|	СГРУППИРОВАТЬ ПО
			|		Т.Регистратор,
			|		Т.СлужебноеВидДвиженияПриход,
			|		Т.Организация,
			|		Т.ХозяйственнаяОперация,
			|		Т.ТипЗаписи,
			|		Т.ДокументИсточник
			|
			|) КАК Т
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.Регистратор,
			|	Т.СлужебноеВидДвиженияПриход,
			|	Т.Организация,
			|	Т.ХозяйственнаяОперация,
			|	Т.ТипЗаписи,
			|	Т.ДокументИсточник
			|
			|ИМЕЮЩИЕ
			|	СУММА(Т.КоличествоСтарое) <> 0
			|	И СУММА(Т.КоличествоСтарое) <> СУММА(Т.КоличествоНовое)
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	Т.Регистратор,
			|	Т.СлужебноеВидДвиженияПриход,
			|	Т.Организация,
			|	Т.ХозяйственнаяОперация,
			|	Т.ДокументИсточник,
			|	Т.КоличествоСтарое,
			|	Т.КоличествоНовое
			|ПОМЕСТИТЬ ВТИзмененныеДокументыИсточники
			|ИЗ
			|	ВТРазличияДокументовИсточников КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПравилаЗаполненияПоляТипЗаписи КАК Правила
			|		ПО ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИПЗНАЧЕНИЯ(Правила.ПустоеЗначениеРегистратора)
			|			И (Правила.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
			|				ИЛИ Т.ХозяйственнаяОперация = Правила.ХозяйственнаяОперация)
			|			И (Правила.ДокументИсточникВПриходе И Т.ТипЗаписи = Правила.ТипЗаписиПриход
			|				ИЛИ Правила.ДокументИсточникВРасходе И Т.ТипЗаписи = Правила.ТипЗаписиРасход)
			|ГДЕ
			|	(Т.СлужебноеВидДвиженияПриход И Правила.ДокументИсточникВПриходе)
			|		ИЛИ (НЕ Т.СлужебноеВидДвиженияПриход И Правила.ДокументИсточникВРасходе)
			|";

		Запрос.Выполнить();

		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров"));

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкиВСформированныхДвижениях(ПараметрыРасчета, ОписаниеРегистра, "ВТИзмененныеДокументыИсточники", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменился реквизит ""%1"" в движениях';uk='Змінився реквізит ""%1"" в рухах'",ОбщегоНазначения.КодОсновногоЯзыка()), "ДокументИсточник"));

		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДвиженияНепересчитываемыхТипов, ВТИзмененныеПервичныеДвижения,
			|ВТРазличияДокументовИсточников, ВТИзмененныеДокументыИсточники");

	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область КорректировкиНачальныхОстатковРегистров

#Область ОписаниеАлгоритмаКорректировки

// Корректировка регистров является отдельным этапом партионного учета, который включает в себя следующие этапы
// - Корректировка регистра 1
//	 = Старт корректировки регистра 1
//	 = Корректировка вида 1
//	 = Корректировка вида 2
//	 = ...
//	 = Окончание корректировки регистра 1
// - Корректировка регистра 2
//	 = Старт корректировки регистра 2
//	 = Корректировка вида 1
//	 = Корректировка вида 3
//	 = ...
//	 = Окончание корректировки регистра 2
// - ...
//
// Все регистры, для которых предусмотрены корректировки, необходимо перечислить в РегистрыСКорректировкамиНачальныхОстатков()
// Все виды корректировок необходимо описать в ОписаниеКорректировокНачальныхОстатков()
//
// В начале корректировки регистра необходимо вызвать функцию ИнициализироватьКорректировкуОстатковРегистра()
//	- инициализирует описание корректировки
// В конце корректировки регистра необходимо вызвать процедуру ЗавершитьКорректировкуОстатковРегистра()
//	- записывает сформированные движения корректировки (Приход, с плюсом) и сторно (Приход, с минусом)
//	  = период движений - последняя секунда прошлого месяца
//	  = регистратор - документ "Расчет себестоимости товаров" за прошлый период
//
// В начале процедуры корректировки каждого вида необходимо вызвать НачатьСледующуюКорректировкуОстатковРегистра()
//	- формирует таблицу ВТРасчетныеНачальныеОстатки<Имя регистра>, хранящую расчетные остатки на начало периода для данной корректировки
//		= в таблице не учитываются корректировки, сформированные предыдущим расчетом, и учитываются уже выполненные корректировки текущего расчета
//		= следует использовать данную временную таблицу вместо виртуальной таблицы начальных остатков регистра
// В процедуре корректировки надо сформировать новые (скорректированные) начальные остатки регистра
//	- формирование начальных остатков нового регистра - данные нового регистра выбираются из других регистров
//		= распределение как правило не требуется
//		= сторнирование остатков не требуется
//	- изменение измерений начальных остатков регистра
//		= требуется выполнить распределение старых остатков по некоторой базе, полученной из другого регистра
//		= требуется сторнирование старых остатков
//	- сформированные движения и сторнирующие движения передаются механизму корректировки через вызов процедуры ДобавитьКорректировочныеДвиженияРегистра()
//

#КонецОбласти

#Область ПрограммныйИнтерфейсКорректировки

// Возвращает перечень регистров накопления, для которых предусмотрены корректировки.
//
// Возвращаемое значение:
//	Массив - массив имен метаданных регистров с корректировками
//
Функция РегистрыСКорректировкамиНачальныхОстатков() Экспорт

	РегистрыСКорректировками = Новый Массив;
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());

	РасчетСебестоимостиЛокализация.ДополнитьРегистрыСКорректировкамиНачальныхОстатков(РегистрыСКорректировками);

	Возврат РегистрыСКорректировками;

КонецФункции

// Возвращает описание корректировок регистров накопления.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с описанием корректировок регистров
//		Корректировка - ПеречислениеСсылка.ТипыЗаписейПартий - тип записи корректировки
//			при добавлении новой корректировки необходимо создать для нее новый тип записи;
//			одна и та же корректировка для разных регистров может иметь один тип записи;
//		ВозможноМногократноеВыполнение - Булево - корректировка может выполняться многократно (например, если она зависит от действующей учетной политики)
//		ИмяКонстантыВключения - Строка - имя константы, которая включает функционал, требующей корректировки остатков регистра
//		ИмяКонстантыДатыНачалаДействия - Строка - имя константы, хранящей дату начала действия константы <ИмяКонстантыВключения>
//		РодительскаяКорректировка - ПеречислениеСсылка.ТипыЗаписейПартий - заполняется для корректировки, противоположной той, для которой существует константа <ИмяКонстантыВключения>
//
Функция ОписаниеКорректировокНачальныхОстатков() Экспорт

// Поддерживаемые виды корректировок:
	// 1. Корректировка многократная, нет даты (не пишется в регистр)
	// 2. Корректировка однократная, с датой (пишется в регистр, справочно)
	// 3. Корректировка однократная, без даты (пишется в регистр)
	ТаблицаВидовКорректировок = Новый ТаблицаЗначений;
	ТаблицаВидовКорректировок.Колонки.Добавить("Корректировка", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗаписейПартий"));
	ТаблицаВидовКорректировок.Колонки.Добавить("ВозможноМногократноеВыполнение", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовКорректировок.Колонки.Добавить("ИмяКонстантыВключения", Новый ОписаниеТипов("Строка"));
	ТаблицаВидовКорректировок.Колонки.Добавить("ИмяКонстантыДатыНачалаДействия", Новый ОписаниеТипов("Строка"));
	ТаблицаВидовКорректировок.Колонки.Добавить("РодительскаяКорректировка", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗаписейПартий"));

	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУчетПоНазначениям;
	НоваяСтрока.ИмяКонстантыВключения = Метаданные.Константы.УчитыватьСебестоимостьТоваровПоНазначениям.Имя;
	НоваяСтрока.ИмяКонстантыДатыНачалаДействия = Метаданные.Константы.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям.Имя;

	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеИзменениеМетодаОценкиСтоимости;
	НоваяСтрока.ВозможноМногократноеВыполнение = Истина;

	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеОтключитьУчетПоНазначениям;
	НоваяСтрока.РодительскаяКорректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУчетПоНазначениям;

	РасчетСебестоимостиЛокализация.ДополнитьОписаниеКорректировокНачальныхОстатков(ТаблицаВидовКорректировок);

	Возврат ТаблицаВидовКорректировок;

КонецФункции

// Инициализирует описание корректировки регистра накопления
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	ИмяРегистра - Строка - полное имя регистра накопления
//
// Возвращаемое значение:
//	Структура - описание корректировки
//
Функция ИнициализироватьКорректировкуОстатковРегистра(ПараметрыРасчета,
		ИмяРегистра) Экспорт

	Если РегистрыСКорректировкамиНачальныхОстатков().Найти(ИмяРегистра) = Неопределено Тогда

		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Регистр ""%1"" должен быть указан в РасчетСебестоимостиПрикладныеАлгоритмы.РегистрыСКорректировкамиНачальныхОстатков()';uk='Регістр ""%1"" має бути вказано в РасчетСебестоимостиПрикладныеАлгоритмы.РегистрыСКорректировкамиНачальныхОстатков ()'",ОбщегоНазначения.КодОсновногоЯзыка()), ИмяРегистра);

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения, ТекстДляПротокола);

	КонецЕсли;

	ПараметрыКорректировки = Новый Структура;

	МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ИмяРегистра);

	// Описание регистра
	ПараметрыКорректировки.Вставить("МетаданныеРегистра", МетаданныеРегистра); // объект метаданных регистра
	ПараметрыКорректировки.Вставить("ПолноеИмяРегистра", ИмяРегистра); // полное имя регистра из метаданных
	ПараметрыКорректировки.Вставить("ИмяРегистра", МетаданныеРегистра.Имя); // имя регистра из объекта метаданных
	ПараметрыКорректировки.Вставить("ПредставлениеРегистра", МетаданныеРегистра.Синоним); // представление регистра из объекта метаданных
	ПараметрыКорректировки.Вставить("ОписаниеРегистра", ПараметрыРасчета.Движения[ПараметрыКорректировки.ИмяРегистра]); // описание регистра

	// Описание временных таблиц
	ПараметрыКорректировки.Вставить("ИмяТаблицыОстатков", "ВТРасчетныеНачальныеОстатки"
		+ ПараметрыКорректировки.ИмяРегистра); // количество таблиц сформированных движений вида ВТКорректировка<ИмяРегистра><НомерТаблицы>
	ПараметрыКорректировки.Вставить("КоличествоСформированныхТаблиц", 0); // количество таблиц сформированных движений вида ВТКорректировка<ИмяРегистра><НомерТаблицы>
	ПараметрыКорректировки.Вставить("ИменаСформированныхТаблиц", ""); // имена всех таблиц вида ВТКорректировка<ИмяРегистра><НомерТаблицы>
	ПараметрыКорректировки.Вставить("СуществующиеТаблицы", ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета)); // имена всех таблиц, существовавших до начала корректировки

	// Описание корректировки
	ПараметрыКорректировки.Вставить("ТипЗаписиКорректировки", Неопределено); // тип записи текущей корректировки
	ПараметрыКорректировки.Вставить("ОрганизацииДляКорректировки", Новый Массив); // организации, для которых нужна корректировка

	// Очистка устаревших корректировок
	ОчиститьУстаревшиеКорректировкиРегистров(ПараметрыРасчета, ПараметрыКорректировки);

	Возврат ПараметрыКорректировки;

КонецФункции

// Завершает корректировку регистра и записывает все корректировочные движения.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	ПараметрыКорректировки - Структура - параметры корректировки, см. ИнициализироватьКорректировкуОстатковРегистра()
Процедура ЗавершитьКорректировкуОстатковРегистра(ПараметрыРасчета,
		ПараметрыКорректировки) Экспорт

	#Область ФормированиеТаблицыНовыхДвижений

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.УстановитьПараметр("НачалоПериодаУстаревшихКорректировок", НачалоМесяца(НачалоМесяца(ПараметрыРасчета.РасчетныйПериод.КонецПредыдущегоПериода)
		- 1));
	Запрос.УстановитьПараметр("КонецПериодаУстаревшихКорректировок", НачалоМесяца(ПараметрыРасчета.РасчетныйПериод.КонецПредыдущегоПериода)
		- 1);

		// Если нет сформированных корректировок, то поместим в <ИмяТаблицыНовыхДвижений> только "старые" движения документов, не являющиеся корректировками.
	// Если корректировки есть, то поместим "старые" движения в ВТПрочиеДвиженияДокументовРасчетаСебестоимости и объединим ее с "новыми" корректировочными движениями в <ИмяТаблицыНовыхДвижений>.
	Запрос.Текст = "ВЫБРАТЬ
		|	%ПоляРегистра
		|ПОМЕСТИТЬ ВТПрочиеДвиженияДокументовРасчетаСебестоимости
		|ИЗ
		|	РегистрНакопления.%ИмяРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимостиПрошлогоПериода КАК ДокументыРасчетаСебестоимости
		|		ПО Т.Регистратор = ДокументыРасчетаСебестоимости.Ссылка
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПредыдущегоПериода И &КонецПредыдущегоПериода
		|	И Т.Организация В (&МассивОрганизаций)
		|	%ОтборПоТипуЗаписиНеКорректировки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	%ПоляРегистра
		|ИЗ
		|	РегистрНакопления.%ИмяРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимостиПрошлогоПериода КАК ДокументыРасчетаСебестоимости
		|		ПО Т.Регистратор = ДокументыРасчетаСебестоимости.Ссылка
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериодаУстаревшихКорректировок И &КонецПериодаУстаревшихКорректировок
		|	И Т.Организация В (&МассивОрганизаций)
		|	%ОтборПоТипуЗаписиКорректировки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Количество
		|ИЗ
		|	ВТПрочиеДвиженияДокументовРасчетаСебестоимости КАК Т";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", ПараметрыКорректировки.ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляРегистра", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипуЗаписиНеКорректировки", ?(ПараметрыКорректировки.ОписаниеРегистра.ЕстьТипЗаписи, "И НЕ (Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных))", "И ЛОЖЬ"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипуЗаписиКорректировки", ?(ПараметрыКорректировки.ОписаниеРегистра.ЕстьТипЗаписи, "И Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)", ""));

	РезультатЗапроса = ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, , , Истина);

	Если ПараметрыКорректировки.КоличествоСформированныхТаблиц = 0 Тогда

		ИмяТаблицыНовыхДвижений = "ВТПрочиеДвиженияДокументовРасчетаСебестоимости"; // могут быть только "прочие" движения документа расчета себестоимости
	Иначе

		Если ПараметрыКорректировки.КоличествоСформированныхТаблиц = 1
				И РезультатЗапроса.Пустой() Тогда

			ИмяТаблицыНовыхДвижений = ПараметрыКорректировки.ИменаСформированныхТаблиц; // есть только одна таблица корректировочных движений
		Иначе

		// Объединим все новые корректировочные движения и "прочие" движения документа расчета себестоимости.
			ИмяТаблицыНовыхДвижений = "ВТНовыеДвиженияПоРегистру"
				+ ПараметрыКорректировки.ИмяРегистра;

			ОбъединитьВременныеТаблицы(ПараметрыРасчета, РасчетСебестоимостиУниверсальныеАлгоритмы.СоединитьСтроки(ПараметрыКорректировки.ИменаСформированныхТаблиц, "ВТПрочиеДвиженияДокументовРасчетаСебестоимости"), ИмяТаблицыНовыхДвижений, ПараметрыКорректировки.ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистра, , Истина);

		КонецЕсли;

	КонецЕсли;

	#КонецОбласти

	#Область ФормированиеТаблицыИзмененныхДокументов

	// Сравним движения в <ИмяТаблицыНовыхДвижений> с движениями тех же документов в ИБ.
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТИзмененныеДокументы
		|ИЗ
		|	(ВЫБРАТЬ // новые движения, с плюсом
		|		%ПоляРегистра
		|	ИЗ
		|		%ТаблицаНовыхДвижений КАК Т
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ // старые движения, с минусом
		|		%ПоляРегистраСМинусом
		|	ИЗ
		|		РегистрНакопления.%ИмяРегистра КАК Т
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимостиПрошлогоПериода КАК ДокументыРасчетаСебестоимости
		|			ПО Т.Регистратор = ДокументыРасчетаСебестоимости.Ссылка
		|	ГДЕ
		|		Т.Период МЕЖДУ &НачалоПериодаУстаревшихКорректировок И &КонецПредыдущегоПериода
		|		И Т.Организация В (&МассивОрганизаций)
		|	) КАК Т
		|
		|%ГруппировкаПолей
		|
		|%ОтборНепустыхРесурсов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТДокументыСДвижениями
		|ИЗ
		|	%ТаблицаНовыхДвижений КАК Т
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Т.Регистратор КАК Регистратор,
		|	ВЫБОР КОГДА НовыеДвижения.Регистратор ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьНовыеДвижения
		|ПОМЕСТИТЬ ВТДокументыДляЗаписи
		|ИЗ
		|	ВТИзмененныеДокументы КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыСДвижениями КАК НовыеДвижения
		|		ПО Т.Регистратор = НовыеДвижения.Регистратор";

	ТекстПоляРегистраСМинусом = "";
	ТекстОтборНепустыхРесурсов = "";
	ТекстГруппировкаПолей = "";

	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ПараметрыКорректировки.ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "Т."), ",", Истина, Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ПараметрыКорректировки.ОписаниеРегистра.ПоляОтбораНепустыхДвижений, "%1", "Т."), ",", Истина, Истина);

	Для Каждого ТекущееПоле Из МассивПолей Цикл

		ЭтоРесурсРегистра = (МассивРесурсов.Найти(ТекущееПоле) <> Неопределено);

		Если ЭтоРесурсРегистра Тогда
		// Ресурс
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
		Иначе
		// Измерение или реквизит
			ТекстГруппировкаПолей = ТекстГруппировкаПолей
				+ ?(ТекстГруппировкаПолей = "", "", ",
				|	") + ТекущееПоле;
		КонецЕсли;

		ТекстПоляРегистраСМинусом = ТекстПоляРегистраСМинусом
			+ ?(ТекстПоляРегистраСМинусом = "", "", ",
			|		") + ?(ЭтоРесурсРегистра, "-", "") + ТекущееПоле;

	КонецЦикла;

	ТекстГруппировкаПолей = ?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов = ?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	") + ТекстОтборНепустыхРесурсов;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", ПараметрыКорректировки.ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТаблицаНовыхДвижений", ИмяТаблицыНовыхДвижений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляРегистраСМинусом", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПоляРегистраСМинусом, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляРегистра", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ГруппировкаПолей", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстГруппировкаПолей, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНепустыхРесурсов", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОтборНепустыхРесурсов, "Т."));

	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, , , Истина);

	#КонецОбласти

	#Область ПодготовкаЗаписиДвижений

	ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ, ПараметрыРасчета.НомерЗаданияДоРасчета);

	#КонецОбласти

	#Область ОчисткаСтарыхДвижений

	// Очистим движения документов, у которых нет движений в <ИмяТаблицыНовыхДвижений>, но есть движения в ИБ
	Запрос.Текст = "ВЫБРАТЬ
		|	Т.Регистратор
		|ИЗ
		|	ВТДокументыДляЗаписи КАК Т
		|ГДЕ
		|	НЕ Т.ЕстьНовыеДвижения";

	ЗаписатьДвиженияПоРегистру(Запрос, ПараметрыКорректировки.ОписаниеРегистра.МенеджерРегистра, ПараметрыЗаписи);

	#КонецОбласти

	#Область ЗаписьНовыхДвижений

	// Запишем только документы с измененными движениями у которых есть движения в <ИмяТаблицыНовыхДвижений>.
	Запрос.Текст = "ВЫБРАТЬ
		|	%ПоляРегистра
		|ИЗ
		|	%ТаблицаНовыхДвижений КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыДляЗаписи КАК ДокументыДляЗаписи
		|		ПО Т.Регистратор = ДокументыДляЗаписи.Регистратор
		|ГДЕ
		|	ЕСТЬNULL(ДокументыДляЗаписи.ЕстьНовыеДвижения, ЛОЖЬ)
		|УПОРЯДОЧИТЬ ПО
		|	%УпорядочиваниеПолей";

	ТекстУпорядочиваниеПолей = РасчетСебестоимостиУниверсальныеАлгоритмы.СоединитьСтроки("%1Регистратор, %1Период", ?(ПараметрыКорректировки.ОписаниеРегистра.ЕстьТипЗаписи, "%1ТипЗаписи", ""), ПараметрыКорректировки.ОписаниеРегистра.ИзмеренияРегистра, ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистра);

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТаблицаНовыхДвижений", ИмяТаблицыНовыхДвижений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УпорядочиваниеПолей", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстУпорядочиваниеПолей, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляРегистра", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "Т."));

	Попытка

		ЗаписатьДвиженияПоРегистру(Запрос, ПараметрыКорректировки.ОписаниеРегистра.МенеджерРегистра, ПараметрыЗаписи);

	Исключение

	// Информацию об ошибке добавим в протокол расчета.
	// Затем, по окончании расчета, запишем протокол расчета и только потом вызовем исключение.
		ТекстДляПротокола = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СлужебныйСимвол_ПроблемаУжеЗарегистрирована(), "");

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам, ТекстДляПротокола);

		Если НЕ ИсключениеВызваноПрограммно(ТекстДляПротокола) Тогда
			ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, , НСтр("ru='При записи движений диагностированы ошибки';uk='При запису рухів діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола);
		КонецЕсли;

	КонецПопытки;

	#КонецОбласти

	#Область ОкончаниеЗаписиДвижений

	// Обновим расчетные кэши регистра.
	Если РазмерВременнойТаблицы(ПараметрыРасчета, "ВТДокументыДляЗаписи") > 0 Тогда

		ОбновитьРасчетныеКэшиРегистра(ПараметрыРасчета, ПараметрыКорректировки.ОписаниеРегистра.ИмяРегистра);

	КонецЕсли;

	// Все данные записаны в ИБ, вспомогательные таблицы больше не нужны.
	ИменаУдаляемыхТаблиц = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета, ПараметрыКорректировки.СуществующиеТаблицы);

	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаУдаляемыхТаблиц, ",", Истина, Истина);
	ИменаУдаляемыхТаблиц = "";

	// Не удаляем таблицы расчетных остатков и таблицы сформированных корректировок
	// (в случае, если несколько корректировок разных регистров выполняются одновременно).
	Для Каждого ИмяТаблицы Из МассивСтрок Цикл

		Если СтрНачинаетсяС(ИмяТаблицы, "ВТРасчетныеНачальныеОстатки")
				И ИмяТаблицы <> ПараметрыКорректировки.ИмяТаблицыОстатков Тогда
			Продолжить;
		ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "ВТКорректировка")
				И НЕ СтрНачинаетсяС(ИмяТаблицы, "ВТКорректировка"
				+ ПараметрыКорректировки.ИмяРегистра + "_") Тогда
			Продолжить;
		КонецЕсли;

		РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(ИменаУдаляемыхТаблиц, ИмяТаблицы);

	КонецЦикла;

	УничтожитьВременныеТаблицы(ПараметрыРасчета, ИменаУдаляемыхТаблиц);

	ЗафиксироватьФактВыполненияКорректировки(ПараметрыРасчета, ПараметрыКорректировки);

	#КонецОбласти

КонецПроцедуры

// Инициализирует следующую корректировку регистра.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	ПараметрыКорректировки - параметры корректировки, см. ИнициализироватьКорректировкуОстатковРегистра()
//	ТипЗаписиКорректировки - ПеречислениеСсылка.ТипыЗаписейПартий - тип записи корректировки
//	ОчищатьКорректировкиСледующихПериодов - Булево - необходимость очистки аналогичные корректировки в следующих периодах
//
Процедура НачатьСледующуюКорректировкуОстатковРегистра(ПараметрыРасчета,
		ПараметрыКорректировки, ТипЗаписиКорректировки,
		ОчищатьКорректировкиСледующихПериодов = Истина) Экспорт

	Если ПараметрыРасчета.ФормироватьНачальныеОстаткиПартий22 Тогда
	// При переходе на ПУ 2.2 все корректировки сделаем с одним типом записи, чтобы можно было "свернуть" все корректировочные движения.
		ТипЗаписи = Перечисления.ТипыЗаписейПартий.СлужебноеПереходНаПартионныйУчет22;
	Иначе
		ТипЗаписи = ТипЗаписиКорректировки;
	КонецЕсли;

	Если ТипыЗаписейКонвертацииДанных().Найти(ТипЗаписи) = Неопределено Тогда

		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Тип записи корректировки ""%1"" должен быть указан в РасчетСебестоимостиПрикладныеАлгоритмы.ТипыЗаписейКонвертацииДанных()';uk='Тип запису коригування ""%1"" має бути вказано в  РасчетСебестоимостиПрикладныеАлгоритмы.ТипыЗаписейКонвертацииДанных()'",ОбщегоНазначения.КодОсновногоЯзыка()), ТипЗаписи);

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения, ТекстДляПротокола);

	КонецЕсли;

	ПараметрыКорректировки.ТипЗаписиКорректировки = ТипЗаписиКорректировки;

	// Обслуживание регистра РасчетСебестоимостиДатыКорректировокОстатков
	ИнициализироватьОписаниеОрганизацийДляВыполненияКорректировки(ПараметрыРасчета, ПараметрыКорректировки);

	ПараметрыКорректировки.ТипЗаписиКорректировки = ТипЗаписи;

	Если ОчищатьКорректировкиСледующихПериодов Тогда
	// Очистим движения корректировок в следующих периодах.
		ОчиститьКорректировкиРегистровВСледующихПериодах(ПараметрыРасчета, ПараметрыКорректировки);
	КонецЕсли;

	// Очистим временные таблицы предыдущих корректировок.
	ИменаУдаляемыхТаблиц = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета, РасчетСебестоимостиУниверсальныеАлгоритмы.СоединитьСтроки(ПараметрыКорректировки.СуществующиеТаблицы, ПараметрыКорректировки.ИменаСформированныхТаблиц));

	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаУдаляемыхТаблиц, ",", Истина, Истина);
	ИменаУдаляемыхТаблиц = "";

	// Не удаляем таблицы расчетных остатков и таблицы сформированных корректировок
	// (в случае, если несколько корректировок разных регистров выполняются одновременно).
	Для Каждого ИмяТаблицы Из МассивСтрок Цикл

		Если СтрНачинаетсяС(ИмяТаблицы, "ВТРасчетныеНачальныеОстатки") Тогда
			Продолжить;
		ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "ВТКорректировка") Тогда
			Продолжить;
		КонецЕсли;

		РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(ИменаУдаляемыхТаблиц, ИмяТаблицы);

	КонецЦикла;

	УничтожитьВременныеТаблицы(ПараметрыРасчета, ИменаУдаляемыхТаблиц);

	// Инициализируем таблицу расчетных начальных остатков регистра.
	СформироватьТаблицуРасчетныхНачальныхОстатковРегистра(ПараметрыРасчета, ПараметрыКорректировки);

КонецПроцедуры

// Добавляет корректировочные движения для их последующей записи.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	ПараметрыКорректировки - Структура - параметры корректировки, см. ИнициализироватьКорректировкуОстатковРегистра()
//	ИменаТаблицКорректировки - Строка - имена таблиц, в которых хранятся сформированные корректировочные движения (новые остатки)
//	ИменаТаблицСторно - Строка - имена таблиц, в которых хранятся сторнирующие движения (старые, списываемые остатки)
//	УдалятьТаблицыКорректировки - Булево - удалить таблицы из <ИменаТаблицКорректировки>
//	УдалятьТаблицыСторно - Булево - удалить таблицы из <ИменаТаблицСторно>
//
Процедура ДобавитьКорректировочныеДвиженияРегистра(ПараметрыРасчета,
		ПараметрыКорректировки, ИменаТаблицКорректировки, ИменаТаблицСторно = "",
		УдалятьТаблицыКорректировки = Ложь, УдалятьТаблицыСторно = Ложь) Экспорт

		// Подготовим вспомогательные данные.
	ИменаКолонокРегистра = Новый Структура(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, ""));
	ИменаРесурсовРегистра = Новый Структура(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистра, ""));
	ИменаСлужебныхКолонок = Новый Структура("Регистратор, Период, ВидДвижения, ТипЗаписи");

	Если ПараметрыКорректировки.ОписаниеРегистра.ЕстьРасчетПартий Тогда
		ИменаСлужебныхКолонок.Вставить("РасчетПартий");
	КонецЕсли;

	ИменаТаблиц = РасчетСебестоимостиУниверсальныеАлгоритмы.СоединитьСтроки(ИменаТаблицКорректировки, ИменаТаблицСторно);
	СтруктураТаблицСторно = Новый Структура(ИменаТаблицСторно);

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	Запрос.УстановитьПараметр("ТипЗаписиКорректировки", ПараметрыКорректировки.ТипЗаписиКорректировки);

	ШаблонЗапроса = "ВЫБРАТЬ
		|	%ПоляПриемника
		|ПОМЕСТИТЬ %ИмяПриемника
		|ИЗ
		|	%ИмяИсточника КАК Т
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимостиПрошлогоПериода КАК ДокументыРасчетаСебестоимости
		|		ПО Т.Организация = ДокументыРасчетаСебестоимости.Организация";

	Для Каждого КлючИЗначение Из Новый Структура(ИменаТаблиц) Цикл // для каждой таблицы корректировки и сторно

	// Источник
		ИмяТаблицыИсточника = КлючИЗначение.Ключ;

		СтруктураТаблицыИсточника = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИмяТаблицыИсточника, 1);
		Если СтруктураТаблицыИсточника.Количество() = 0 Тогда
			Продолжить; // в источнике нет данных
		КонецЕсли;

		КолонкиТаблицыИсточника = СтруктураТаблицыИсточника.Колонки;

		// Приемник
		ПараметрыКорректировки.КоличествоСформированныхТаблиц = ПараметрыКорректировки.КоличествоСформированныхТаблиц
			+ 1;

		ИмяТаблицыПриемника = "ВТКорректировка" + ПараметрыКорректировки.ИмяРегистра
			+ "_"
			+ РасчетСебестоимостиУниверсальныеАлгоритмы.ЧислоВСтрокуБезПробелов(ПараметрыКорректировки.КоличествоСформированныхТаблиц);
		РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(ПараметрыКорректировки.ИменаСформированныхТаблиц, ИмяТаблицыПриемника);

		ТекстПоляПриемника = "	ДокументыРасчетаСебестоимости.Ссылка КАК Регистратор,
			|	&КонецПредыдущегоПериода КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	&ТипЗаписиКорректировки КАК ТипЗаписи";

		Если ПараметрыКорректировки.ОписаниеРегистра.ЕстьРасчетПартий Тогда
			ТекстПоляПриемника = ТекстПоляПриемника + ",
				|	ИСТИНА КАК РасчетПартий";
		КонецЕсли;

		Для Каждого КлючИЗначение2 Из ИменаКолонокРегистра Цикл // колонки регистра-приемника
			ИмяКолонки = КлючИЗначение2.Ключ;

			Если ИменаСлужебныхКолонок.Свойство(ИмяКолонки) Тогда // служебная
				Продолжить; // текст уже сформирован
			ИначеЕсли КолонкиТаблицыИсточника.Найти(ИмяКолонки) <> Неопределено Тогда // взять колонку из временной таблицы
				Если ИменаРесурсовРегистра.Свойство(ИмяКолонки)
						И СтруктураТаблицСторно.Свойство(ИмяТаблицыИсточника) Тогда
					ТекстЗнак = "-"; // ресурсы сторно со знаком минус
				Иначе
					ТекстЗнак = "";
				КонецЕсли;

				ТекстПоле = ТекстЗнак + "Т." + ИмяКолонки;

			Иначе // установить пустое значение колонки
				ТаблицаРегистра = ПараметрыКорректировки.ОписаниеРегистра.Таблица; // ТаблицаЗначений
				ТипЗначенияКолонки = РасчетСебестоимостиУниверсальныеАлгоритмы.ОписанияТиповБезТипаNull(
					ТаблицаРегистра.Колонки.Найти(ИмяКолонки).ТипЗначения);

				ТекстПоле = "&ПустоеЗначение_" + ИмяКолонки;

				Запрос.УстановитьПараметр("ПустоеЗначение_"
					+ ИмяКолонки, ТипЗначенияКолонки.ПривестиЗначение(Неопределено));

			КонецЕсли;

			РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(ТекстПоляПриемника, "	"
				+ ТекстПоле + " КАК " + ИмяКолонки);

		КонецЦикла; // колонки регистра-приемника
		Запрос.Текст = ШаблонЗапроса;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", ИмяТаблицыПриемника);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяИсточника", ИмяТаблицыИсточника);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПриемника", ТекстПоляПриемника);

		ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);

	КонецЦикла; // добавляемые таблицы
	Если УдалятьТаблицыКорректировки Тогда
		УничтожитьВременныеТаблицы(ПараметрыРасчета, ИменаТаблицКорректировки);
	КонецЕсли;

	Если УдалятьТаблицыСторно Тогда
		УничтожитьВременныеТаблицы(ПараметрыРасчета, ИменаТаблицСторно);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыКорректировки

// Формирует таблицу расчетных начальных остатков ВТРасчетныеНачальныеОстатки<Имя регистра>.
// Таблица получается следующим образом:
// реальные остатки регистра - прошлые корректировки из ИБ + сторно прошлых корректировок из ИБ
// - текущие корректировки, сделанные до формирования расчетных остатков  + сторно текущих корректировок
//	
// Параметры:
//	ПараметрыРасчета - параметры расчета
//	ПараметрыКорректировки - параметры корректировки, см. ИнициализироватьКорректировкуОстатковРегистра()
//
Процедура СформироватьТаблицуРасчетныхНачальныхОстатковРегистра(ПараметрыРасчета,
		ПараметрыКорректировки)

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, ПараметрыКорректировки.ИмяТаблицыОстатков, НСтр("ru='Вспомогательная';uk='Допоміжна'",ОбщегоНазначения.КодОсновногоЯзыка()));

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.УстановитьПараметр("ОрганизацииДляКорректировки", ПараметрыКорректировки.ОрганизацииДляКорректировки);

	// Шаблоны текстов запросов.
	ШаблонЗапроса = "ВЫБРАТЬ
		|	%ИзмеренияРегистра,
		|	%РесурсыРегистраСумма
		|ПОМЕСТИТЬ %ИмяТаблицыОстатков
		|ИЗ
		|	(ВЫБРАТЬ
		|		%ИзмеренияРегистра,
		|		1 КАК Знак,
		|		%РесурсыРегистраОстатки
		|	ИЗ
		|		РегистрНакопления.%ИмяРегистра.Остатки(&ГраницаКонецПредыдущегоПериода,
		|			Организация В (&ОрганизацииДляКорректировки)) КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		%ИзмеренияРегистра,
		|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА -1 ИНАЧЕ 1 КОНЕЦ КАК Знак,
		|		%РесурсыРегистраОбороты
		|	ИЗ
		|		РегистрНакопления.%ИмяРегистра КАК Т
		|	ГДЕ
		|		Т.Период МЕЖДУ &НачалоПредыдущегоПериода И &КонецПредыдущегоПериода
		|		И Т.Организация В (&ОрганизацииДляКорректировки)
		|		И Т.Регистратор ССЫЛКА Документ.РасчетСебестоимостиТоваров
		|		И Т.Активность
		|		%ОтборПоТипуЗаписи
		|
		|	%ЗапросыВыборкиИзСформированныхКорректировок
		|	) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	%ИзмеренияРегистра
		|
		|ИМЕЮЩИЕ
		|	%ОтборНепустыхРесурсов
		|";

	ШаблонТекущейКорректировки = "	
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		%ИзмеренияРегистра,
		|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ КАК Знак,
		|		%РесурсыРегистраОбороты
		|	ИЗ
		|		%ИмяТаблицыРезультатовКорректировки КАК Т";

		// Поля для подстановки в шаблоны.
	ИзмеренияРегистра = СтрЗаменить(ПараметрыКорректировки.ОписаниеРегистра.ИзмеренияРегистра, "%1", "Т.");
	РесурсыРегистраСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистраССуффиксом, "СУММА(Т.Знак * Т.", ")");
	РесурсыРегистраОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистраССуффиксом, "Т.", "Остаток");
	РесурсыРегистраОбороты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистраССуффиксом, "Т.", "");

	ТекстОтборПоТипуЗаписи = ?(ПараметрыКорректировки.ОписаниеРегистра.ЕстьТипЗаписи, "И Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)", "");

	// Сформируем отбор по непустым ресурсам регистра.
	ТекстОтборНепустыхРесурсов = "";
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистра, "%1", "Т."), ",", Истина, Истина);

	Для Каждого ТекущееПоле Из МассивРесурсов Цикл

		ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов
			+ ?(ТекстОтборНепустыхРесурсов = "", "", "
			|	ИЛИ ") + "СУММА(Т.Знак * " + ТекущееПоле + ") <> 0";

	КонецЦикла;

	// Сформируем тексты запросов для выборки из таблиц корректировки, уже сформированных при текущем расчете.
	ТекстВыборкиИзСформированныхКорректировок = "";

	Для НомерТаблицы = 1 По ПараметрыКорректировки.КоличествоСформированныхТаблиц Цикл

		ТекстВыборкиИзСформированныхКорректировок = ТекстВыборкиИзСформированныхКорректировок
			+ ШаблонТекущейКорректировки;

		ТекстВыборкиИзСформированныхКорректировок = СтрЗаменить(ТекстВыборкиИзСформированныхКорректировок, "%ИзмеренияРегистра", ИзмеренияРегистра);
		ТекстВыборкиИзСформированныхКорректировок = СтрЗаменить(ТекстВыборкиИзСформированныхКорректировок, "%РесурсыРегистраОбороты", РесурсыРегистраОбороты);
		ТекстВыборкиИзСформированныхКорректировок = СтрЗаменить(ТекстВыборкиИзСформированныхКорректировок, "%ИмяТаблицыРезультатовКорректировки", "ВТКорректировка"
			+ ПараметрыКорректировки.ИмяРегистра + "_"
			+ РасчетСебестоимостиУниверсальныеАлгоритмы.ЧислоВСтрокуБезПробелов(НомерТаблицы));

	КонецЦикла;

	// Подставим параметры в текстЗапроса
	Запрос.Текст = ШаблонЗапроса;

	Если ВременнаяТаблицаСуществует(ПараметрыРасчета, ПараметрыКорректировки.ИмяТаблицыОстатков) Тогда
		Запрос.Текст = "УНИЧТОЖИТЬ %ИмяТаблицыОстатков
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|" + Запрос.Текст;
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", ПараметрыКорректировки.ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицыОстатков", ПараметрыКорректировки.ИмяТаблицыОстатков);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИзмеренияРегистра", ИзмеренияРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраСумма", РесурсыРегистраСумма);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраОстатки", РесурсыРегистраОстатки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраОбороты", РесурсыРегистраОбороты);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипуЗаписи", ТекстОтборПоТипуЗаписи);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНепустыхРесурсов", ТекстОтборНепустыхРесурсов);

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ЗапросыВыборкиИзСформированныхКорректировок", ТекстВыборкиИзСформированныхКорректировок);

	Запрос.Выполнить();

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);

КонецПроцедуры

// Очищает движения корректировки у документов РасчетСебестоимостиТоваров, сделанные в следующих периодах.
// Данная операция необходима для корректировок, которые имеют конкретную дату выполнения.
//	
// Параметры:
//	ПараметрыРасчета - параметры расчета
//	ПараметрыКорректировки - параметры корректировки, см. ИнициализироватьКорректировкуОстатковРегистра()
//
Процедура ОчиститьКорректировкиРегистровВСледующихПериодах(ПараметрыРасчета,
		ПараметрыКорректировки)

	ПараметрыКорректировки.ОписаниеРегистра = ПараметрыРасчета.Движения[ПараметрыКорректировки.ИмяРегистра];

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.УстановитьПараметр("ТипЗаписиКорректировки", ПараметрыКорректировки.ТипЗаписиКорректировки);

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.%ИмяРегистра КАК Т
		|ГДЕ
		|	Т.Организация В(&МассивОрганизаций)
		|	И Т.Период > &КонецПредыдущегоПериода
		|	И Т.Регистратор ССЫЛКА Документ.РасчетСебестоимостиТоваров
		|	%ОтборПоТипуЗаписи";

	ТекстОтборПоТипуЗаписи = ?(ПараметрыКорректировки.ОписаниеРегистра.ЕстьТипЗаписи, "И Т.ТипЗаписи = &ТипЗаписиКорректировки
		|	И НЕ Т.ТипЗаписи В (&ТипыЗаписейМногократнойКонвертацииДанных)", "");

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", ПараметрыКорректировки.ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипуЗаписи", ТекстОтборПоТипуЗаписи);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();

		ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ, ПараметрыРасчета.НомерЗаданияДоРасчета);

		ЗаписатьДвиженияПоРегистру(Выборка, ПараметрыКорректировки.ОписаниеРегистра.МенеджерРегистра, ПараметрыЗаписи);

		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Очищено движений корректировки по регистру ""%1"": %2';uk='Очищено рухів коригування по регістру ""%1"": %2'",ОбщегоНазначения.КодОсновногоЯзыка()), ПараметрыКорректировки.ПредставлениеРегистра, РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.Количество())));

	КонецЕсли;

КонецПроцедуры

// Очищает движения корректировки у документов РасчетСебестоимостиТоваров, сделанные по старой схеме (в прошлом периоде).
//	
// Параметры:
//	ПараметрыРасчета - параметры расчета
//	ПараметрыКорректировки - параметры корректировки, см. ИнициализироватьКорректировкуОстатковРегистра()
//
Процедура ОчиститьУстаревшиеКорректировкиРегистров(ПараметрыРасчета,
		ПараметрыКорректировки)

	ПараметрыКорректировки.ОписаниеРегистра = ПараметрыРасчета.Движения[ПараметрыКорректировки.ИмяРегистра];

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.%ИмяРегистра КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимостиТоваров
		|	ПО Т.Регистратор = РасчетСебестоимостиТоваров.Ссылка
		|ГДЕ
		|	Т.Организация В(&МассивОрганизаций)
		|	И Т.Период МЕЖДУ &НачалоПредыдущегоПериода И &КонецПредыдущегоПериода
		|	И РасчетСебестоимостиТоваров.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	%ОтборПоТипуЗаписи";

	ТекстОтборПоТипуЗаписи = ?(ПараметрыКорректировки.ОписаниеРегистра.ЕстьТипЗаписи, "И Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)", "");

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", ПараметрыКорректировки.ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипуЗаписи", ТекстОтборПоТипуЗаписи);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();

		ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ, ПараметрыРасчета.НомерЗаданияДоРасчета);

		ЗаписатьДвиженияПоРегистру(Выборка, ПараметрыКорректировки.ОписаниеРегистра.МенеджерРегистра, ПараметрыЗаписи);

		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Очищено движений устаревших корректировки по регистру ""%1"": %2';uk='Очищено рухів застарілих коригування по регістру ""%1"": %2'",ОбщегоНазначения.КодОсновногоЯзыка()), ПараметрыКорректировки.ПредставлениеРегистра, РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.Количество())));

	КонецЕсли;

КонецПроцедуры

// Определяет организации, по которым в рассчитываемом периоде требуется указанная корректировка.
//
Процедура ИнициализироватьОписаниеОрганизацийДляВыполненияКорректировки(ПараметрыРасчета,
		ПараметрыКорректировки) Экспорт

	ТаблицаВидовКорректировок = ОписаниеКорректировокНачальныхОстатков();
	ОписаниеКорректировки = ТаблицаВидовКорректировок.Найти(ПараметрыКорректировки.ТипЗаписиКорректировки);

	Если ОписаниеКорректировки = Неопределено Тогда

		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найдено описание корректировки ""%1"" в РасчетСебестоимостиПрикладныеАлгоритмы.ОписаниеКорректировокНачальныхОстатков()';uk='Не знайдено опис коригування ""%1"" в РасчетСебестоимостиПрикладныеАлгоритмы.ОписаниеКорректировокНачальныхОстатков ()'",ОбщегоНазначения.КодОсновногоЯзыка()), ПараметрыКорректировки.ТипЗаписиКорректировки);

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета, ТекстДляПротокола);

		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

	КонецЕсли;

	Если ОписаниеКорректировки.ВозможноМногократноеВыполнение Тогда
		ПараметрыКорректировки.Вставить("ОрганизацииДляКорректировки", ПараметрыРасчета.МассивОрганизаций);
		ПараметрыКорректировки.Вставить("ТребуетсяКорректировка", ЗначениеЗаполнено(ПараметрыКорректировки.ОрганизацииДляКорректировки));
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Организации.Ссылка 						   		   КАК Организация,
		|	&ТипЗаписиКорректировки 						   КАК ТипЗаписиКорректировки,
		|	&ИмяРегистра 									   КАК ИмяРегистра,
		|	ЕСТЬNULL(Т.ДатаКорректировки, ДАТАВРЕМЯ(1, 1, 1))  КАК ДатаКорректировки,
		|	ЕСТЬNULL(Т.ДатаКорректировки, ДАТАВРЕМЯ(1, 1, 1))  КАК ДатаКорректировкиПредыдущая,
		|	ЕСТЬNULL(Т.ДатаНачалаДействия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаДействия,
		|	ЕСТЬNULL(Т.ДатаНачалаДействия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаДействияПредыдущая
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасчетСебестоимостиДатыКорректировокОстатков КАК Т
		|			ПО Т.Организация = Организации.Ссылка
		|			 И Т.ТипЗаписиКорректировки = &ТипЗаписиКорректировки
		|			 И Т.ИмяРегистра = &ИмяРегистра
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";

	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("ТипЗаписиКорректировки", ПараметрыКорректировки.ТипЗаписиКорректировки);
	Запрос.УстановитьПараметр("ИмяРегистра", ПараметрыКорректировки.ИмяРегистра);

	ВыполнениеКорректировок = Запрос.Выполнить().Выгрузить();
	ОрганизацииДляКорректировки = Новый Массив;

	Для Каждого ТекущаяСтрока Из ВыполнениеКорректировок Цикл

		Если ЗначениеЗаполнено(ОписаниеКорректировки.ИмяКонстантыДатыНачалаДействия) Тогда

			Если НЕ ЗначениеЗаполнено(ОписаниеКорректировки.ИмяКонстантыВключения)
					ИЛИ Константы[ОписаниеКорректировки.ИмяКонстантыВключения].Получить() Тогда

				ТекущаяСтрока.ДатаНачалаДействия = НачалоМесяца(Константы[ОписаниеКорректировки.ИмяКонстантыДатыНачалаДействия].Получить());

				Если ТекущаяСтрока.ДатаНачалаДействия = ПараметрыРасчета.РасчетныйПериод.НачалоПериода Тогда

					ТекущаяСтрока.ДатаКорректировки = ПараметрыРасчета.РасчетныйПериод.НачалоПериода;
					ОрганизацииДляКорректировки.Добавить(ТекущаяСтрока.Организация);

				КонецЕсли;

			КонецЕсли;

		ИначеЕсли НЕ ЗначениеЗаполнено(ОписаниеКорректировки.РодительскаяКорректировка) Тогда

			Если НЕ ЗначениеЗаполнено(ОписаниеКорректировки.ИмяКонстантыВключения)
					ИЛИ Константы[ОписаниеКорректировки.ИмяКонстантыВключения].Получить() Тогда

				ТекущаяСтрока.ДатаНачалаДействия = Дата(1, 1, 1);

				Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаКорректировки)
						ИЛИ ТекущаяСтрока.ДатаКорректировки >= ПараметрыРасчета.РасчетныйПериод.НачалоПериода Тогда

					ТекущаяСтрока.ДатаКорректировки = ПараметрыРасчета.РасчетныйПериод.НачалоПериода;
					ОрганизацииДляКорректировки.Добавить(ТекущаяСтрока.Организация);

				КонецЕсли;

			КонецЕсли;

		Иначе // есть РодительскаяКорректировка
			ОписаниеРодительскойКорректировки = ТаблицаВидовКорректировок.Найти(ОписаниеКорректировки.РодительскаяКорректировка);

			Если ОписаниеРодительскойКорректировки = Неопределено Тогда

				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найдено описание корректировки ""%1"" в РасчетСебестоимостиПрикладныеАлгоритмы.ОписаниеКорректировокНачальныхОстатков()';uk='Не знайдено опис коригування ""%1"" в РасчетСебестоимостиПрикладныеАлгоритмы.ОписаниеКорректировокНачальныхОстатков ()'",ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеКорректировки.РодительскаяКорректировка);

				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета, ТекстДляПротокола);

				ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

			ИначеЕсли ОписаниеРодительскойКорректировки.ВозможноМногократноеВыполнение
					ИЛИ НЕ ЗначениеЗаполнено(ОписаниеРодительскойКорректировки.ИмяКонстантыДатыНачалаДействия) Тогда

				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Некорректное описание корректировки ""%1"" в РасчетСебестоимостиПрикладныеАлгоритмы.ОписаниеКорректировокНачальныхОстатков()';uk='Некоректний опис коригування ""%1"" в РасчетСебестоимостиПрикладныеАлгоритмы.ОписаниеКорректировокНачальныхОстатков()'",ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеКорректировки.РодительскаяКорректировка);

				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета, ТекстДляПротокола);

				ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

			КонецЕсли;

			ТекущаяСтрока.ДатаНачалаДействия = Дата(1, 1, 1);

			ДатаНачалаДействияРодительскойКорректировки = НачалоМесяца(Константы[ОписаниеРодительскойКорректировки.ИмяКонстантыДатыНачалаДействия].Получить());
			РодительскаяКорректировкаВключена = НЕ ЗначениеЗаполнено(ОписаниеРодительскойКорректировки.ИмяКонстантыВключения)
				ИЛИ Константы[ОписаниеРодительскойКорректировки.ИмяКонстантыВключения].Получить();

			Если РодительскаяКорректировкаВключена
					И ДатаНачалаДействияРодительскойКорректировки <= ПараметрыРасчета.РасчетныйПериод.НачалоПериода Тогда
					// Не требуется в периоде действия родительской корректировки
			ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаКорректировки)
					ИЛИ ТекущаяСтрока.ДатаКорректировки >= ПараметрыРасчета.РасчетныйПериод.НачалоПериода Тогда

					// Требуется корректировка
				ТекущаяСтрока.ДатаКорректировки = ПараметрыРасчета.РасчетныйПериод.НачалоПериода;
				ОрганизацииДляКорректировки.Добавить(ТекущаяСтрока.Организация);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ПараметрыКорректировки.Вставить("ОрганизацииДляКорректировки", ОрганизацииДляКорректировки);
	ПараметрыКорректировки.Вставить("ТребуетсяКорректировка", ЗначениеЗаполнено(ПараметрыКорректировки.ОрганизацииДляКорректировки));

	Если НЕ ПараметрыКорректировки.Свойство("ВыполнениеКорректировок") Тогда

		ПараметрыКорректировки.Вставить("ВыполнениеКорректировок", ВыполнениеКорректировок);

	Иначе
		Таблица = ПараметрыКорректировки.ВыполнениеКорректировок; // ТаблицаЗначений
		Для Каждого ТекущаяСтрока Из ВыполнениеКорректировок Цикл
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ТекущаяСтрока);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Формирует записи регистра РасчетСебестоимостиДатыКорректировокОстатков по окончании выполнения корректировки.
//
Процедура ЗафиксироватьФактВыполненияКорректировки(ПараметрыРасчета,
		ПараметрыКорректировки) Экспорт

	Если НЕ ПараметрыКорректировки.Свойство("ВыполнениеКорректировок") Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ТекущаяСтрока Из ПараметрыКорректировки.ВыполнениеКорректировок Цикл

		Если ТекущаяСтрока.ДатаКорректировки = ТекущаяСтрока.ДатаКорректировкиПредыдущая
				И ТекущаяСтрока.ДатаНачалаДействия = ТекущаяСтрока.ДатаНачалаДействияПредыдущая Тогда
			Продолжить;
		КонецЕсли;

		НаборЗаписей = РегистрыСведений.РасчетСебестоимостиДатыКорректировокОстатков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ТекущаяСтрока.Организация);
		НаборЗаписей.Отбор.ТипЗаписиКорректировки.Установить(ТекущаяСтрока.ТипЗаписиКорректировки);
		НаборЗаписей.Отбор.ИмяРегистра.Установить(ТекущаяСтрока.ИмяРегистра);

		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ТекущаяСтрока);

		НаборЗаписей.Записать(Истина);

	КонецЦикла;

	ПараметрыКорректировки.Удалить("ВыполнениеКорректировок");

КонецПроцедуры

// Проверяет совпадение периода расчета хотя бы с одной из констант начала действия функционала, относящегося к партионному учету.
//
Функция ЕстьОбязательныеКорректировкиОстатков(Период) Экспорт

	Для Каждого ОписаниеКорректировки Из ОписаниеКорректировокНачальныхОстатков() Цикл

		Если ЗначениеЗаполнено(ОписаниеКорректировки.ИмяКонстантыДатыНачалаДействия)
				И НачалоМесяца(Период) = НачалоМесяца(Константы[ОписаниеКорректировки.ИмяКонстантыДатыНачалаДействия].Получить()) Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ФормированиеДвижений

Процедура СформироватьДвиженияПоРегиструПоДаннымЗапроса(ПараметрыРасчета,
		ИмяРегистра, Запрос, Пояснение = "") Экспорт

	Выборка = ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, , , Пояснение);

	Пока Выборка.Следующий() Цикл
	// Добавим движение в соответствии с логикой выполняемого сейчас механизма расчета.
		Запись = ПараметрыРасчета.МодульМеханизмаРасчета.ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, Выборка);
	КонецЦикла;

КонецПроцедуры

// Добавляет новую строку в таблицу движений указанного регистра и заполняет служебные поля.
//
Функция ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ОписаниеПриемника,
		ДанныеДвижения, КопируемыеПоля = Неопределено) Экспорт

		// При необходимости кэшируем сформированную порцию движений из таблицы значений во временную таблицу.
	Если ОписаниеПриемника.Таблица.Количество() >= ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ Тогда
		Если ОписаниеПриемника.ЭтоОписаниеРегистра Тогда
			КэшироватьСформированныеДвижения(ПараметрыРасчета, ОписаниеПриемника.ИмяРегистра, Ложь);
		Иначе
			КэшироватьСформированныеДвижения(ПараметрыРасчета, ОписаниеПриемника.ИмяВременнойТаблицы, Ложь);
		КонецЕсли;
	КонецЕсли;

	// Добавим новую строку в таблицу движений и заполним ее поля
	Запись = ОписаниеПриемника.Таблица.Добавить();

	Если ЗначениеЗаполнено(КопируемыеПоля) Тогда
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения, КопируемыеПоля); // только требуемые поля
	Иначе
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения); // все поля
	КонецЕсли;

	Возврат Запись;

КонецФункции

#КонецОбласти

#Область ЗаписьДвижений

// Записывает сформированные новые движения.
//
// Параметры:
// 	ПараметрыРасчета - Структура -
// 	ПротоколыРасчета - Массив -
Процедура ЗаписатьСформированныеДвижения(ПараметрыРасчета,
		ПротоколыРасчета = Неопределено) Экспорт

	Если НЕ ПараметрыРасчета.ИдетРасчетПартий Тогда

	// Восстановим отбор по всем организациям, т.к. при расчете себестоимости он подменялся при расчете по группам организаций.
		ПараметрыРасчета.Вставить("МассивОрганизаций", ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПараметрыРасчета.КопияМассивОрганизаций));

		// Восстановим временные таблицы с отборами по всем организациям
		ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);

		Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда

		// Возврат в механизм расчета партий из расчета себестоимости
			ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, Ложь);

			// Восстановим все расчетные кэши остатков и оборотов по всем организациям
			ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета);

			Возврат; // записывать движения нужно или в конце расчета партий, или в конце отдельного расчета себестоимости
		КонецЕсли;

		// Удалим данные регистров, которые использовались в расчете себестоимости только для чтения их кэшей.
		Для Каждого КлючИЗначение Из РасчетСебестоимостиКорректировкаСтоимости.ИспользуемыеКэшиРегистровПартионногоУчета() Цикл
			УничтожитьДанныеРегистра(ПараметрыРасчета, КлючИЗначение.Ключ);
		КонецЦикла;

	КонецЕсли;

	// Проверяет отсутствие ошибок в сформированных движениях.
	ПроверитьКорректностьСформированныхДвижений(ПараметрыРасчета);

	РасчетСебестоимостиЛокализация.ПередЗаписьюСформированныхДвижений(ПараметрыРасчета, ПротоколыРасчета);

	// Записывает движения и формирует временную таблицу ВТИзмененныеДокументы
	НачалоЗаписиДвижений(ПараметрыРасчета);

	// Ожидает окончания заданий записи.
	ЗавершениеЗаписиДвижений(ПараметрыРасчета);

	РасчетСебестоимостиЛокализация.ЗаписатьСформированныеДвижения(ПараметрыРасчета, ПротоколыРасчета);

	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТИзмененныеДокументы");

	Если (НЕ ПараметрыРасчета.ЗапущенРасчетПартий
			И НЕ ПараметрыРасчета.ПредварительныйРасчет)
			ИЛИ ПараметрыРасчета.ИдетРасчетПартий Тогда
			// Проверяет корректность остатков в конце отдельного фактического расчета себестоимости или в конце расчета партий.
		ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета(ПараметрыРасчета);
	КонецЕсли;

	// Отметим в "регистрах-последовательностях" текущий период как рассчитанный
	Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда

		Если НЕ ПараметрыРасчета.Отладка.НеСдвигатьПериодПоОкончанииРасчета
				И ПараметрыРасчета.Свойство("ИсходныеЗаданияКРасчетуСебестоимости") Тогда
			УвеличитьПериодРасчетаСебестоимости(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, ПараметрыРасчета.МассивОрганизаций, ПараметрыРасчета.ИсходныеЗаданияКРасчетуСебестоимости, ПараметрыРасчета);
		КонецЕсли;

	КонецЕсли;

	Если ПротоколыРасчета <> Неопределено Тогда
	// Сохраним идентификатор протокола в массив протоколов
		ПротоколыРасчета.Добавить(РасчетСебестоимостиПротоколРасчета.ИдентификаторПротокола(ПараметрыРасчета));
	КонецЕсли;

	ОкончаниеРасчета(ПараметрыРасчета);

КонецПроцедуры

// Запускает процесс записи новых движений.
//
Процедура НачалоЗаписиДвижений(ПараметрыРасчета)

	РасчетСебестоимостиПротоколРасчета.НачалоЗаписиДвижений(ПараметрыРасчета);

	ОбработаноРегистров = 0;

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ, ПараметрыРасчета.НомерЗаданияДоРасчета);

	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл

		ОписаниеРегистра = КлючИЗначение.Значение;

		Если НЕ НужноЗаписатьРегистр(ПараметрыРасчета, ОписаниеРегистра) Тогда
			Продолжить;
		КонецЕсли;

		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэш"
			+ ОписаниеРегистра.ИмяРегистра));

			// Сформируем ВТКэшСтарыеДокументы
		СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);

		// Сформируем ВТКэшИзмененныеДокументы
		СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);

		// Подсчитаем количество документов с измененными движениями
		КоличествоДокументов = РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшИзмененныеДокументы");

		РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(ПараметрыРасчета, КлючИЗначение.Ключ, КоличествоДокументов);

		Если КоличествоДокументов > 0 Тогда

		// Шаблоны для замены в тексте запроса
			ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
				|		Т."));
			ТекстПоляКэшаРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
				|		Т."));
			ЗаменитьВидДвиженияНаПлатформенный(ОписаниеРегистра, ТекстПоляКэшаРегистра);

			ТекстПоляСортировки = СокрЛП(СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "
				|		Т."));
			ТекстПоляСортировки = "Т.Регистратор, Т.Период"
				+ ?(ТекстПоляСортировки = "", "", ", ") + ТекстПоляСортировки
				+ ?(ОписаниеРегистра.ЕстьРасчетСебестоимости, ", Т.РасчетСебестоимости", "")
				+ ?(ОписаниеРегистра.ЕстьРасчетПартий, ", Т.РасчетПартий", "");

			Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя Тогда
				НеВременныеЗаписиБаланса = "	И НЕ Т.ВидИсточника В (
					|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковДвижений.РасчетБаланса)
					|)";
			Иначе
				НеВременныеЗаписиБаланса = "";
			КонецЕсли;

			// Сформируем ВТКэшДвиженияДругихПериодовИлиОрганизаций
			СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос);

			// Сформируем ВТКэшОчищаемыеДокументы
			СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);

			// Подготовим данные для очистки старых движений
			Запрос.Текст = "ВЫБРАТЬ
				|	*
				|ИЗ
				|	ВТКэшОчищаемыеДокументы КАК Т";

			РезультатЗапроса = Запрос.Выполнить();

			ОписаниеРегистра.ЕстьИзмененныеДанные = НЕ РезультатЗапроса.Пустой();

			Если ПараметрыРасчета.УправлениеИтогами.ОтключатьИтогиПередЗаписью
					И ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда // Это регистр остатков
				ВыключитьИтогиРегистра(ПараметрыРасчета, ОписаниеРегистра.МенеджерРегистра);

			КонецЕсли;

			Если МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) < 2 Тогда

			// Запишем движения синхронно, без фоновых заданий.

				// Очистим старые движения у выбранных регистраторов
				ДатаНачалаЗаписи = ТекущаяДатаСеанса();

				ЗаписатьДвиженияПоРегистру(РезультатЗапроса, ОписаниеРегистра.МенеджерРегистра, ПараметрыЗаписи);

				РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(ПараметрыРасчета, ОписаниеРегистра.ИмяРегистра, , , ТекущаяДатаСеанса()
					- ДатаНачалаЗаписи + 1);

					// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
				//	- "первичные" движения документа в периоде расчета
				//	- непересчитываемые движения документа
				//	- новые "расчетные" движения документа.
				Запрос.Текст = "ВЫБРАТЬ
					|	%ПоляОсновнойТаблицыРегистра
					|ИЗ
					|	%ПолноеИмяРегистра КАК Т
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
					|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
					|ГДЕ
					|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
					|	%ОтборПоОрганизации
					|	%ОтборПоСлужебнымРеквизитам
					|	%НеВременныеЗаписиБаланса
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	%ПоляОсновнойТаблицыРегистра
					|ИЗ
					|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	%ПоляКэшаРегистра
					|ИЗ
					|	ВТКэш%ИмяРегистра КАК Т
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
					|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
					|
					|УПОРЯДОЧИТЬ ПО
					|	%Порядок";

					// Заменим шаблоны в тексте запроса
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра", ТекстПоляКэшаРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Порядок", ТекстПоляСортировки);

				// Отбор - первичные движения
				Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
						И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
						// Данные из ИБ не выбираются - они все находятся в кэше
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоСлужебнымРеквизитам", "И ЛОЖЬ");
				КонецЕсли;
				ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НеВременныеЗаписиБаланса", НеВременныеЗаписиБаланса);

				// Выберем движения
				Выборка = Запрос.Выполнить().Выбрать();

				РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(ПараметрыРасчета, КлючИЗначение.Ключ, , Выборка.Количество());

				Попытка

					ОписаниеРегистра.ЕстьИзмененныеДанные = ОписаниеРегистра.ЕстьИзмененныеДанные
						ИЛИ Выборка.Количество() > 0;

					ДатаНачалаЗаписи = ТекущаяДатаСеанса();

					ЗаписатьДвиженияПоРегистру(Выборка, ОписаниеРегистра.МенеджерРегистра, ПараметрыЗаписи);

					РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(ПараметрыРасчета, ОписаниеРегистра.ИмяРегистра, , , ТекущаяДатаСеанса()
						- ДатаНачалаЗаписи + 1);

				Исключение

				// Информацию об ошибке добавим в протокол расчета.
				// Затем, по окончании расчета, запишем протокол расчета и только потом вызовем исключение.
					ТекстДляПротокола = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СлужебныйСимвол_ПроблемаУжеЗарегистрирована(), "");

					РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам, ТекстДляПротокола);

					Если НЕ ИсключениеВызваноПрограммно(ТекстДляПротокола) Тогда
						ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, , НСтр("ru='При записи движений диагностированы ошибки';uk='При запису рухів діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола);
					КонецЕсли;

				КонецПопытки;

			Иначе

			// Запишем движения асинхронно, в фоновых заданиях.
				Если НЕ РезультатЗапроса.Пустой() Тогда

				// Очистим старые движения движения у выбранных регистраторов.
					ОписаниеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1, очистка старых движений.';uk=' %1, очистка старих рухів.'",ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(ПараметрыРасчета.ВариантРасчета));

					ЗапуститьЗаданиеЗаписи(ПараметрыРасчета, ОписаниеРегистра, РезультатЗапроса.Выгрузить(), ОписаниеЗадания);

				КонецЕсли;

				// Деление регистраторов на порции для параллельной записи:
				// - размер порции будет примерно соответствовать ограничению на максимальный размер таблицы значений
				// - один документ не может присутствовать в нескольких порциях - иначе одно задание записи затрет результаты другого
				// - "большие" документы пишутся по одному документу на порцию - считаем, что движения документа всегда "поместятся"
				// в таблицу значений.
				Запрос.Текст = "ВЫБРАТЬ
					|	Т.Регистратор   		  	КАК Регистратор,
					|	СУММА(Т.КоличествоДвижений) КАК КоличествоДвижений
					|ПОМЕСТИТЬ ВТДвиженияДокументов
					|ИЗ
					|	(ВЫБРАТЬ
					|		ИзмененныеДокументы.Регистратор   КАК Регистратор,
					|		СУММА(1) 						  КАК КоличествоДвижений
					|	ИЗ
					|		%ПолноеИмяРегистра КАК Т
					|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
					|			ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
					|	ГДЕ
					|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
					|		%ОтборПоОрганизации
					|		%ОтборПоСлужебнымРеквизитам
					|		%НеВременныеЗаписиБаланса
					|	СГРУППИРОВАТЬ ПО
					|		ИзмененныеДокументы.Регистратор
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		Т.Регистратор,
					|		СУММА(1) КАК КоличествоДвижений
					|	ИЗ
					|		ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
					|	СГРУППИРОВАТЬ ПО
					|		Т.Регистратор
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		ИзмененныеДокументы.Регистратор,
					|		СУММА(1) КАК КоличествоДвижений
					|	ИЗ
					|		ВТКэш%ИмяРегистра КАК Т
					|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
					|			ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
					|	СГРУППИРОВАТЬ ПО
					|		ИзмененныеДокументы.Регистратор
					|	) КАК Т
					|
					|СГРУППИРОВАТЬ ПО
					|	Т.Регистратор
					|";

					// Отбор - первичные движения
				Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
						И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
						// Данные из ИБ не выбираются - они все находятся в кэше
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоСлужебнымРеквизитам", "И ЛОЖЬ");
				КонецЕсли;
				ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НеВременныеЗаписиБаланса", НеВременныеЗаписиБаланса);

				Запрос.Выполнить();

				// Разделим регистраторы на порции для записи.
				ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(ПараметрыРасчета.ОграниченияФЗ.КоличествоДвиженийВФЗЗаписи, "КоличествоДвижений", "КоличествоДвижений УБЫВ, Регистратор", , "НомерПорции");

				МаксНомерПорции = РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, "ВТДвиженияДокументов");

				// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
				//	- "первичные" движения документа в периоде расчета
				//	- непересчитываемые движения документа
				//	- новые "расчетные" движения документа.
				Запрос.Текст = "ВЫБРАТЬ
					|	Т.Регистратор КАК Регистратор
					|ПОМЕСТИТЬ ВТРегистраторыТекущейПорции
					|ИЗ
					|	ВТДвиженияДокументов КАК Т
					|ГДЕ
					|	Т.НомерПорции = &НомерПорции
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Регистратор
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|
					|ВЫБРАТЬ
					|	%ПоляОсновнойТаблицыРегистра
					|ИЗ
					|	%ПолноеИмяРегистра КАК Т
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыТекущейПорции КАК РегистраторыПорцииЗаписи
					|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
					|ГДЕ
					|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
					|	%ОтборПоОрганизации
					|	%ОтборПоСлужебнымРеквизитам
					|	%НеВременныеЗаписиБаланса
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	%ПоляОсновнойТаблицыРегистра
					|ИЗ
					|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыТекущейПорции КАК РегистраторыПорцииЗаписи
					|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	%ПоляКэшаРегистра
					|ИЗ
					|	ВТКэш%ИмяРегистра КАК Т
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыТекущейПорции КАК РегистраторыПорцииЗаписи
					|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
					|
					|УПОРЯДОЧИТЬ ПО
					|	%Порядок";

					// Заменим шаблоны в тексте запроса
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра", ТекстПоляКэшаРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Порядок", ТекстПоляСортировки);

				// Отбор - первичные движения
				Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
						И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
						// Данные из ИБ не выбираются - они все находятся в кэше
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоСлужебнымРеквизитам", "И ЛОЖЬ");
				КонецЕсли;
				ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);

				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НеВременныеЗаписиБаланса", НеВременныеЗаписиБаланса);

				Для НомерПорции = 1 По МаксНомерПорции Цикл

				// Выберем очередную порцию движений.
					Запрос.УстановитьПараметр("НомерПорции", НомерПорции);

					ТаблицаДвижений = Запрос.Выполнить().Выгрузить();

					УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТРегистраторыТекущейПорции");

					Если ТаблицаДвижений.Количество() = 0 Тогда
						Продолжить; // в эту порцию ничего не попало
					КонецЕсли;

					РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(ПараметрыРасчета, КлючИЗначение.Ключ, , ТаблицаДвижений.Количество());

					ОписаниеРегистра.ЕстьИзмененныеДанные = Истина;

					// Запишем новые движения.
					ОписаниеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1, запись порции движений %2 из %3.';uk=' %1, запис порції рухів %2 з %3.'",ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(ПараметрыРасчета.ВариантРасчета), СокрЛП(НомерПорции), СокрЛП(МаксНомерПорции));

					ЗапуститьЗаданиеЗаписи(ПараметрыРасчета, ОписаниеРегистра, ТаблицаДвижений, ОписаниеЗадания);

				КонецЦикла;

				УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДвиженияДокументов");

			КонецЕсли; // пишем в фоновых заданиях
			УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшДвиженияДругихПериодовИлиОрганизаций, ВТКэшОчищаемыеДокументы");

		КонецЕсли; // есть измененные документы
		ОбработаноРегистров = ОбработаноРегистров + 1;

		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшСтарыеДокументы, ВТКэшИзмененныеДокументы");

		//++ НЕ УТ
		// Добавим ВТКэшИзмененныеДокументыКОтражению текущего регистра в общую таблицу ВТИзмененныеДокументы.
		Запрос.Текст = "ВЫБРАТЬ
			|	Т.Регистратор     КАК Регистратор,
			|	Т.Организация     КАК Организация,
			|	Т.Период     	  КАК Период,
			|	""%ИмяРегистра""  КАК ИмяРегистра,
			|	&ВлияетНаПроводки КАК ВлияетНаПроводки
			|ПОМЕСТИТЬ %ИмяВременнойТаблицы
			|ИЗ
			|	ВТКэшИзмененныеДокументыКОтражению КАК Т";

		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос);

		Запрос.УстановитьПараметр("ВлияетНаПроводки", ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя
			И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя);

		Если ОбработаноРегистров = 1 Тогда

		// Создадим временную таблицу ВТИзмененныеДокументы
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяВременнойТаблицы", "ВТИзмененныеДокументы");
			Запрос.Выполнить();

		Иначе

		// Дополним временную таблицу ВТИзмененныеДокументы
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяВременнойТаблицы", "ВТНоваяПорцияИзмененныхДокументов");
			Запрос.Выполнить();

			ОбъединитьВременныеТаблицы(ПараметрыРасчета, "ВТНоваяПорцияИзмененныхДокументов", "ВТИзмененныеДокументы", "%1Регистратор, %1Организация, %1Период, %1ИмяРегистра, %1ВлияетНаПроводки", "");

			УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТНоваяПорцияИзмененныхДокументов");

		КонецЕсли;
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшИзмененныеДокументыКОтражению");
		//-- НЕ УТ
	КонецЦикла;

	Если МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) < 2 Тогда
		РасчетСебестоимостиПротоколРасчета.ОкончаниеЗаписиДвижений(ПараметрыРасчета);
	КонецЕсли;

	// Зафиксируем данные замера производительности.
	РасчетСебестоимостиПротоколРасчета.ЗафиксироватьЗамерВремени(ПараметрыРасчета);

КонецПроцедуры

// Завершает процесс многопоточной записи движений.
//
Процедура ЗавершениеЗаписиДвижений(ПараметрыРасчета)

	Если МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) < 2 Тогда
	// Запись уже закончена - выполнялась в один поток, без фоновых заданий
		Возврат;
	КонецЕсли;

	// Если движения пишутся фоновыми заданиями, то дождемся окончания всех заданий
	ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета, Истина);

	// Проверим корректность формирования порций записи.
	Если НЕ ПараметрыРасчета.Отладка.КонтролироватьРегистраторыВФЗ
			ИЛИ ПараметрыРасчета.Отладка.РегистраторыВФЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Свернуть("ИмяРегистра, Регистратор", "Количество");
	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Сортировать("Количество Убыв, ИмяРегистра, Регистратор");

	Если ПараметрыРасчета.Отладка.РегистраторыВФЗ[0].Количество > 1 Тогда

		ТекстДляПротокола = НСтр("ru='Некорректно выполнено разделение движений на порции для многопоточной записи. Движения могут быть некорректны.';uk='Некоректно виконано поділ рухів на порції для багатопотокового запису. Рухи можуть бути некоректними.'",ОбщегоНазначения.КодОсновногоЯзыка());

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам, ТекстДляПротокола);

		ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, , НСтр("ru='При записи движений диагностированы ошибки';uk='При запису рухів діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола);

	КонецЕсли;

КонецПроцедуры

// Инициализирует структуру параметров записи.
//
Функция ИнициализироватьПараметрыЗаписи(ПериодРасчета, КоличествоЗаписейВНЗ,
		НомерЗаданияДоРасчета = - 1, ВФоновомЗадании = Ложь) Экспорт

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПериодРасчета", ПериодРасчета);
	ПараметрыЗаписи.Вставить("КоличествоЗаписейВНЗ", КоличествоЗаписейВНЗ);
	ПараметрыЗаписи.Вставить("НомерЗаданияДоРасчета", НомерЗаданияДоРасчета);
	ПараметрыЗаписи.Вставить("ВФоновомЗадании", ВФоновомЗадании);

	Возврат ПараметрыЗаписи;

КонецФункции

// Выполняет запись движений документов по указанному регистру в фоновом задании.
//
// Параметры:
//	Таблица - ТаблицаЗначений - движения по регистру, упорядоченные по регистратору
//		Если в таблице есть только колонка Регистратор, то по этим регистраторам будут просто очищены движения.
//	МенеджерРегистра - менеджер регистра
//	ПараметрыЗаписи - Структура - параметры записи
//	ПредыдущееЗадание - УникальныйИдентификатор - идентификатор задания, записывающего предыдущую порцию движений по этому регистру
//		Если идентификатор указан, то перед записью этой порции надо дождаться окончания предыдущей.
//
Процедура ЗаписатьДвиженияПоРегиструФоновымЗаданием(Таблица, МенеджерРегистра,
		ПараметрыЗаписи, ПредыдущееЗадание) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ЗначениеЗаполнено(ПредыдущееЗадание) Тогда
	// Подождем завершения предыдущего задания.
		// Даже если оно почему-то завершилось с ошибкой, все равно запишем текущую порцию.
		// Тогда, при перезапуске расчета, движения текущей порции уже будут в ИБ, перезаписывать их уже будет не надо.
		// Т.о. при перезапуске расчета будут только дописаны движения, которые "не смогли" дописать упавшие задания.
		// Результат завершения предыдущего задания будет обработан централизованно, в ОжидатьЗавершенияФоновогоЗадания().
		Попытка
			ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ПредыдущееЗадание).ОжидатьЗавершения();
		Исключение
			БылиОшибки = Истина; // для исключения срабатывания проверки стандарта 499 
		КонецПопытки;
	КонецЕсли;

	ЗаписатьДвиженияПоРегистру(Таблица, МенеджерРегистра, ПараметрыЗаписи);

КонецПроцедуры

// Выполняет запись движений документов по указанному регистру.
//
// Параметры:
//	ИсходныеДанные - Запрос, РезультатЗапроса, ВыборкаИзРезультатаЗапроса или ТаблицаЗначений
//		Движения по регистру, обязательно упорядоченные по регистратору
//		Если в источнике есть только колонка Регистратор, то по этим регистраторам будут просто очищены движения.
//	МенеджерРегистра - менеджер регистра
//	ПараметрыЗаписи - Структура - параметры записи
//
Процедура ЗаписатьДвиженияПоРегистру(ИсходныеДанные, МенеджерРегистра,
		ПараметрыЗаписи) Экспорт

	Если НЕ ЗначениеЗаполнено(ПараметрыЗаписи.КоличествоЗаписейВНЗ) Тогда
	// Можно использовать для целей отладки - выполнить полноценный расчет без изменения данных ИБ
		// Не стоит использовать эту возможность, если выполняется расчет первого месяца на механизме партионного учета версии 2.2,
		// т.к. не будут записаны начальные остатки партий и весь последующий расчет не будет иметь смысла.
		Возврат;
	КонецЕсли;

	// Приведем исходные данные к типу выборки из запроса или таблицы значений
	Если ТипЗнч(ИсходныеДанные) = Тип("Запрос") Тогда
		ИсточникДанных = ИсходныеДанные.Выполнить().Выбрать(); // выборка
	ИначеЕсли ТипЗнч(ИсходныеДанные) = Тип("РезультатЗапроса") Тогда
		ИсточникДанных = ИсходныеДанные.Выбрать(); // выборка
	Иначе
		ИсточникДанных = ИсходныеДанные; // выборка или таблица значений
	КонецЕсли;

	Если ИсточникДанных.Количество() = 0 Тогда
		Возврат; // нечего записывать
	КонецЕсли;

	// Если в источнике нет обязательных для регистра колонок, например, Период,
	// то считаем, что переданы регистраторы, у которых надо просто очистить движения.
	Если ТипЗнч(ИсточникДанных) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ТолькоОчищатьЗаписи = (ИсточникДанных.Владелец().Колонки.Найти("Период") = Неопределено);
	Иначе // источник данных - это таблица значений
		ТолькоОчищатьЗаписи = (ИсточникДанных.Колонки.Найти("Период") = Неопределено);
	КонецЕсли;

	ОписаниеОшибокЗаписи = "";

	НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей.СебестоимостьТоваров - или любой другой обслуживаемый регистр
	НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);

	ПорцияДанныхИсточника = Неопределено;
	ТекущийРегистратор = Неопределено;
	НомерПорцииЗаписи = 1;

	Пока ПолучитьСледующуюПорциюИзИсточникаДанных(ИсточникДанных, ПорцияДанныхИсточника) Цикл

		Если ТекущийРегистратор <> ПорцияДанныхИсточника.Регистратор Тогда

		// Если изменился регистратор в движениях - запишем движения предыдущего регистратора.
			Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
				ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи, ПараметрыЗаписи);
			КонецЕсли;

			ТекущийРегистратор = ПорцияДанныхИсточника.Регистратор;
			НомерПорцииЗаписи = 1;

			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);

		ИначеЕсли НЕ ТолькоОчищатьЗаписи
				И НаборЗаписей.Количество() >= ПараметрыЗаписи.КоличествоЗаписейВНЗ Тогда

				// Если в движениях документа много записей - будем записывать их порциями
			// Первая порция записывается с замещением старых записей, следующие - с добавлением к предыдущим порциям.
			ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи, ПараметрыЗаписи);

			НомерПорцииЗаписи = НомерПорцииЗаписи + 1;

		КонецЕсли;

		Если НЕ ТолькоОчищатьЗаписи Тогда
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ПорцияДанныхИсточника);
		КонецЕсли;

	КонецЦикла;

	Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
		ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи, ПараметрыЗаписи);
	КонецЕсли;

	Если НЕ ПустаяСтрока(ОписаниеОшибокЗаписи) Тогда

		ВызватьИсключение СлужебныйСимвол_ПроблемаУжеЗарегистрирована()
			+ ОписаниеОшибокЗаписи; // все ошибки записи переданной порции движений
	КонецЕсли;

КонецПроцедуры

// Получает следующую порцию из выборки или следующую строку из таблицы значений.
//
Функция ПолучитьСледующуюПорциюИзИсточникаДанных(ИсточникДанных,
		ПорцияДанныхИсточника)

	Если ТипЗнч(ИсточникДанных) = Тип("ВыборкаИзРезультатаЗапроса") Тогда

		Если ИсточникДанных.Следующий() Тогда
			ПорцияДанныхИсточника = ИсточникДанных; // данные хранятся в полях самой выборки
		Иначе
			Возврат Ложь; // больше нет данных
		КонецЕсли;

	Иначе // источник данных - это таблица значений
		Если ПорцияДанныхИсточника = Неопределено Тогда
			ИндексСтроки = 0;
		Иначе
			ИндексСтроки = ИсточникДанных.Индекс(ПорцияДанныхИсточника) + 1;
		КонецЕсли;

		Если ИндексСтроки < ИсточникДанных.Количество() Тогда
			ПорцияДанныхИсточника = ИсточникДанных[ИндексСтроки]; // следующая строка
		Иначе
			Возврат Ложь; // больше нет данных
		КонецЕсли;

	КонецЕсли;

	Возврат Истина; // новая порция данных помещена в ПорцияДанныхИсточника
КонецФункции

// Выполняет запись переданного набора записей.
//
// Параметры:
// 	НаборЗаписей - РегистрНакопленияНаборЗаписей, РегистрСведенийНаборЗаписей - 
// 	Замещать - Булево -
// 	ОписаниеОшибокЗаписи - Строка -
// 	ПараметрыЗаписи - Структура -
Процедура ЗаписатьНаборЗаписей(НаборЗаписей, Замещать, ОписаниеОшибокЗаписи,
		ПараметрыЗаписи)

	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;

	Попытка

		Если НЕ РегистраторИзмененПриРасчете(Регистратор, НаборЗаписей, ОписаниеОшибокЗаписи, ПараметрыЗаписи) Тогда
			ДатыЗапретаИзмененияУТ.ОтключитьПроверкуДатыЗапретаИзменения(НаборЗаписей);
			НаборЗаписей.Записать(Замещать);
		КонецЕсли;

	Исключение

		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи движений документа ""%1"" по регистру накопления ""%2"":
|%3'
|;uk='Помилка запису рухів документа ""%1"" по регістру накопичення ""%2"": 
|%3'",ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(Регистратор), НаборЗаписей.Метаданные().Имя, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ЗарегистрироватьОшибкуЗаписиДвижений(Регистратор, ПараметрыЗаписи, НСтр("ru='При записи движений диагностированы ошибки';uk='При запису рухів діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола, ОписаниеОшибокЗаписи);

	КонецПопытки;

	НаборЗаписей.Очистить();

КонецПроцедуры

// Проверяет, что во время расчета документ не был изменен/распроведен.
//
Функция РегистраторИзмененПриРасчете(Регистратор, НаборЗаписей,
		ОписаниеОшибокЗаписи, ПараметрыЗаписи)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Организация
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Т
		|ГДЕ
		|	Т.Документ = &Регистратор
		|	И Т.НомерЗадания > &НомерЗадания
		|	И Т.Месяц <= &ПериодРасчета";

	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("НомерЗадания", ПараметрыЗаписи.НомерЗаданияДоРасчета);
	Запрос.УстановитьПараметр("ПериодРасчета", КонецМесяца(ПараметрыЗаписи.ПериодРасчета));

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Во время расчета изменены движения документа ""%1"" по регистру накопления ""%2""';uk='Під час розрахунку змінені рухи документа ""%1"" по регістру накопичення ""%2""'",ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(Регистратор), НаборЗаписей.Метаданные().Имя);

		ЗарегистрироватьОшибкуЗаписиДвижений(Регистратор, ПараметрыЗаписи, НСтр("ru='Во время расчета были внесены изменения в рассчитываемый документ';uk='Під час розрахунку були внесені зміни в розраховуваний документ'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола, ОписаниеОшибокЗаписи, Выборка.Организация);

	КонецЦикла;

	Возврат Истина;

КонецФункции

// Регистрирует ошибку, возникшую при записи движений..
//
Процедура ЗарегистрироватьОшибкуЗаписиДвижений(Регистратор, ПараметрыЗаписи,
		ТекстПроблемы, Уточнение, ОписаниеОшибокЗаписи, Организация = Неопределено)

	Если СтрЧислоСтрок(ОписаниеОшибокЗаписи) < 100 Тогда
		ОписаниеОшибокЗаписи = ОписаниеОшибокЗаписи
			+ ?(ПустаяСтрока(ОписаниеОшибокЗаписи), "
			|", "")
			+ РасчетСебестоимостиПротоколРасчета.СлужебныйСимвол_МаркированныйСписок()
			+ Уточнение + "
			|";
	Иначе
	// Получается слишком большое сообщение об ошибке.
	// Скорее всего записи в нем будут однотипные - незачем выводить их все.
		Если СтрНайти(ОписаниеОшибокЗаписи, "...") = 0 Тогда
			ОписаниеОшибокЗаписи = ОписаниеОшибокЗаписи + "
				|"
				+ РасчетСебестоимостиПротоколРасчета.СлужебныйСимвол_МаркированныйСписок()
				+ " ...";
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор, "Организация");
		ПараметрыРасчета = ИнициализироватьОсновныеПараметрыРасчета(ПараметрыЗаписи.ПериодРасчета, РеквизитыДокумента.Организация);
	Иначе
		ПараметрыРасчета = ИнициализироватьОсновныеПараметрыРасчета(ПараметрыЗаписи.ПериодРасчета, Организация);
	КонецЕсли;

	ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, , ТекстПроблемы, Уточнение, Регистратор);

КонецПроцедуры

// Проверяет необходимость записи сформированных движений регистра в зависимости от выполняемого варианта расчета.
//
Функция НужноЗаписатьРегистр(ПараметрыРасчета, ОписаниеРегистра)

	Если НЕ ОписаниеРегистра.ЕстьРасчетСебестоимости
			И НЕ ОписаниеРегистра.ЕстьРасчетПартий
			И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
			// В обслуживаемых регистрах могут быть регистры, по которым не формируются расчетные движения,
		    // но с этими регистрами могут выполняться какие-то сервисные действия для смежных механизмов.
		Возврат Ложь;
	ИначеЕсли НЕ ПараметрыРасчета.ЗапущенРасчетПартий
			И ПараметрыРасчета.ПредварительныйРасчет
			И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
			// При предварительном расчете себестоимости пересчитывается только стоимость товаров.
		    // Движения по всем остальным регистрам остаются без изменений.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

// Формирует временную таблицу ВТКэшСтарыеДокументы - документы, у которых были "старые" расчетные движения.
//
Процедура СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета,
		ОписаниеРегистра, Запрос)

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшСтарыеДокументы", НСтр("ru='Регистр';uk='Регістр'",ОбщегоНазначения.КодОсновногоЯзыка())
		+ ": " + ОписаниеРегистра.ИмяРегистра);

	ОтборПоТипамРегистраторов = "";

	Для Каждого КлючИЗначение Из ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях Цикл
		МетаДокумент = КлючИЗначение.Ключ; // ОбъектМетаданныхДокумент
		Если НЕ КлючИЗначение.Значение Тогда
			ОтборПоТипамРегистраторов = ОтборПоТипамРегистраторов
				+ ?(ОтборПоТипамРегистраторов = "", "", " ИЛИ ")
				+ "(ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ." + МетаДокумент.Имя
				+ ") И НЕ (ВЫРАЗИТЬ(Т.Регистратор КАК Документ." + МетаДокумент.Имя
				+ ").Дата МЕЖДУ &НачалоПериода И &КонецПериода))";
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(ОтборПоТипамРегистраторов) Тогда
		ОтборПоТипамРегистраторов = " И НЕ (" + ОтборПоТипамРегистраторов + ")";
	КонецЕсли;

	// Выберем все старые регистраторы данного регистра (кроме док. КорректировкаРегистров)
	// Поле Активность не проверяем.
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
		|ИЗ
		|	%ПолноеИмяРегистра КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|	%ОтборПоОрганизации
		|	%ОтборПоСлужебнымРеквизитам
		|	%ОтборПоТипамРегистраторов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипамРегистраторов", ОтборПоТипамРегистраторов);

	// Отбор - расчетные движения
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
			И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
			// Все движения являются расчетными
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина);
	Иначе
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Ложь, Истина, Истина, Истина);
	КонецЕсли;

	Запрос.Выполнить();

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);

КонецПроцедуры

// Формирует временную таблицу ВТКэшИзмененныеДокументы - документы, у которых изменились расчетные движения.
//
Процедура СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета,
		ОписаниеРегистра, Запрос)

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшИзмененныеДокументы", НСтр("ru='Регистр';uk='Регістр'",ОбщегоНазначения.КодОсновногоЯзыка())
		+ ": " + ОписаниеРегистра.ИмяРегистра, "ВТКэшСтарыеДокументы, ВТКэш"
		+ ОписаниеРегистра.ИмяРегистра);

		// Шаблоны для замены в тексте запроса
	ТекстОтборНепустыхРесурсов = "";
	ТекстГруппировкаПолей = "";
	ТекстПоляОсновнойТаблицыРегистра = ""; // ресурсы с "минусом"
	ТекстПоляКэшаРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
		|		Т.")); // ресурсы с "плюсом
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "Т."), ",", Истина, Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ОписаниеРегистра.ПоляОтбораНепустыхДвижений, "%1", "Т."), ",", Истина, Истина);

	Для Каждого ТекущееПоле Из МассивПолей Цикл

		ЭтоРесурсРегистра = (МассивРесурсов.Найти(ТекущееПоле) <> Неопределено);

		Если ЭтоРесурсРегистра Тогда
		// Ресурс
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
		Иначе
		// Измерение или реквизит
			ТекстГруппировкаПолей = ТекстГруппировкаПолей
				+ ?(ТекстГруппировкаПолей = "", "", ",
				|	") + ТекущееПоле;
		КонецЕсли;

		ТекстПоляОсновнойТаблицыРегистра = ТекстПоляОсновнойТаблицыРегистра
			+ ?(ТекстПоляОсновнойТаблицыРегистра = "", "", ",
			|		") + ?(ЭтоРесурсРегистра, "-", "") + ТекущееПоле;

	КонецЦикла;

	// Заменим значение поля ВидДвижения основной таблицы регистра на булево значение; ресурсы с "минусом".
	ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ТекстПоляОсновнойТаблицыРегистра);

	ТекстГруппировкаПолей = ?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов = ?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	") + ТекстОтборНепустыхРесурсов;

		// Выбор регистраторов, у которых есть хоть какие-то отличия в старых и новых движениях
	// Будут перезаписаны движения только этих регистраторов

	//++ НЕ УТ
	// и только эти регистраторы будут зарегистрированы для формирования проводок
	//-- НЕ УТ
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//++ НЕ УТ
		|	%ПолеОрганизации
		|	Т.Период КАК Период,
		//-- НЕ УТ
		|	Т.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТКэш%ИмяРегистра_МоментыВремени
		|ИЗ
		|	(ВЫБРАТЬ // новые расчетные движения, с плюсом
		|		%ПоляКэшаРегистра
		|	ИЗ
		|		ВТКэш%ИмяРегистра КАК Т
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ // старые расчетные движения, с минусом
		|		%ПоляОсновнойТаблицыРегистра
		|	ИЗ
		|		%ПолноеИмяРегистра КАК Т
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшСтарыеДокументы КАК СтарыеДокументы
		|			ПО Т.Регистратор = СтарыеДокументы.Регистратор
		|	ГДЕ
		|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		%ОтборПоОрганизации
		|		%ОтборПоСлужебнымРеквизитам
		|	) КАК Т
		|
		|%ГруппировкаПолей
		|
		|%ОтборНепустыхРесурсов
		|";
		//++ НЕ УТ
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ТекстПоляОрганизации = "Т.Организация КАК Организация,";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
		ТекстПоляОрганизации = "Т.АналитикаУчетаПоПартнерам.Организация КАК Организация,";
	Иначе
		ТекстПоляОрганизации = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПолеОрганизации", ТекстПоляОрганизации);

	ТекстВТКэшИзмененныеДокументыКОтражению = "
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Организация 	КАК Организация,
		|	Т.Период 		КАК Период,
		|	Т.Регистратор 	КАК Регистратор
		|ПОМЕСТИТЬ ВТКэшИзмененныеДокументыКОтражению
		|ИЗ
		|	ВТКэш%ИмяРегистра_МоментыВремени КАК Т";

	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(Запрос.Текст);
	МассивТекстов.Добавить(ТекстВТКэшИзмененныеДокументыКОтражению);
	Запрос.Текст = СтрСоединить(МассивТекстов);
	//-- НЕ УТ

	// Заменим шаблоны в тексте запроса
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра", ТекстПоляКэшаРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ГруппировкаПолей", ТекстГруппировкаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНепустыхРесурсов", ТекстОтборНепустыхРесурсов);

	// Отбор - расчетные движения
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
			И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
			// Все движения являются расчетными
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина);
	Иначе
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Ложь, Истина, Истина, Истина);
	КонецЕсли;

	Если ОписаниеРегистра.ЕстьОрганизация
			И НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "(&МассивОрганизаций)", "(&МассивОрганизаций, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
	КонецЕсли;

	Запрос.Выполнить();

	СформироватьТаблицуМоментовВремени(ПараметрыРасчета, "ВТКэш"
		+ ОписаниеРегистра.ИмяРегистра
		+ "_МоментыВремени", , "ВТКэшИзмененныеДокументы");

	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэш"
		+ ОписаниеРегистра.ИмяРегистра + "_МоментыВремени");

		//++ НЕ УТ
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя Тогда
		СформироватьЗаданияКРасчетуСтоимостиВНА(ПараметрыРасчета);
	КонецЕсли;
	//-- НЕ УТ
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);

КонецПроцедуры

// Формирует временную таблицу ВТКэшДвиженияДругихПериодовИлиОрганизаций - движения измененных документов по
// периодам или организациям, не входящим в параметры расчета.
//
Процедура СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета,
		ОписаниеРегистра, Запрос)

	ОтборПоТипамРегистраторов = "";
	СохранятьТолькоПервичныеДвижения = "";

	Для Каждого КлючИЗначение Из ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях Цикл

		МетаДокумент = КлючИЗначение.Ключ; // ОбъектМетаданныхДокумент
		
		ОтборПоТипамРегистраторов = ОтборПоТипамРегистраторов
			+ ?(ОтборПоТипамРегистраторов = "", "", ", ") + "ТИП(Документ."
			+ МетаДокумент.Имя + ")";

		Если НЕ КлючИЗначение.Значение Тогда
			СохранятьТолькоПервичныеДвижения = СохранятьТолькоПервичныеДвижения
				+ ?(СохранятьТолькоПервичныеДвижения = "", "", ", ") + "ТИП(Документ."
				+ МетаДокумент.Имя + ")";
		КонецЕсли;

	КонецЦикла;

	МогутБытьДвиженияПоДругимПериодамИлиОрганизациям = ЗначениеЗаполнено(ОтборПоТипамРегистраторов);

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшДвиженияДругихПериодовИлиОрганизаций", НСтр("ru='Регистр';uk='Регістр'",ОбщегоНазначения.КодОсновногоЯзыка())
		+ ": "
		+ ОписаниеРегистра.ИмяРегистра, ?(МогутБытьДвиженияПоДругимПериодамИлиОрганизациям, "ВТКэшИзмененныеДокументы", ""));

	Если МогутБытьДвиженияПоДругимПериодамИлиОрганизациям Тогда

	// По этому регистру есть регистраторы с движениями по другим периодам и/или организациям.
		// Сохраним такие движения во временной таблице ВТКэшДвиженияДругихПериодовИлиОрганизаций.
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			ОтборПоОрганизации = "ИЛИ (НЕ (Т.Организация В (&МассивОрганизаций))";
			Если НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
				ОтборПоОрганизации = ОтборПоОрганизации
					+ " И Т.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
			КонецЕсли;
			ОтборПоОрганизации = ОтборПоОрганизации + ")";
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
			ОтборПоОрганизации = "ИЛИ НЕ (Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор))";
		Иначе
			ОтборПоОрганизации = "";
		КонецЕсли;

		Если ЗначениеЗаполнено(СохранятьТолькоПервичныеДвижения) Тогда
			ОтборПоТипуДвижений = "И НЕ (ТИПЗНАЧЕНИЯ(Т.Регистратор) В ("
				+ СохранятьТолькоПервичныеДвижения
				+ ") И (ИзмененныеДокументы.Дата МЕЖДУ &НачалоПериода И &КонецПериода) %ОтборПоСлужебнымРеквизитам)";
		Иначе
			ОтборПоТипуДвижений = "";
		КонецЕсли;

		Запрос.Текст = "ВЫБРАТЬ
			|	Т.Регистратор,
			|	Т.Дата
			|ПОМЕСТИТЬ ВТОтборПоРегистраторам
			|ИЗ
			|	ВТКэшИзмененныеДокументы КАК Т
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(Т.Регистратор) В (%ОтборПоТипамРегистраторов)
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	%ПоляОсновнойТаблицыРегистра
			|ПОМЕСТИТЬ ВТКэшДвиженияДругихПериодовИлиОрганизаций
			|ИЗ
			|	%ПолноеИмяРегистра КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборПоРегистраторам КАК ИзмененныеДокументы
			|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
			|ГДЕ
			|	(НЕ (Т.Период МЕЖДУ &НачалоПериода И &КонецПериода)
			|	%ОтборПоОрганизации)
			|	%ОтборПоТипуДвижений
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|УНИЧТОЖИТЬ ВТОтборПоРегистраторам
			|";

			// Заменим шаблоны в тексте запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипамРегистраторов", ОтборПоТипамРегистраторов);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации", ОтборПоОрганизации);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипуДвижений", ОтборПоТипуДвижений);

		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, , Ложь, Истина, Истина); // шаблоны имени регистра
	Иначе

	// По этому регистру не может быть регистраторов с движениями по другим периодам и/или организациям.
	// Создадим пустую временную таблицу с полями, идентичными полям регистра.
		Запрос.УстановитьПараметр("ПустаяТаблицаРегистра", ОписаниеРегистра.МенеджерРегистра.СоздатьНаборЗаписей().Выгрузить());

		Запрос.Текст = "ВЫБРАТЬ
			|	%ПоляОсновнойТаблицыРегистра
			|ПОМЕСТИТЬ ВТКэшДвиженияДругихПериодовИлиОрганизаций
			|ИЗ
			|	&ПустаяТаблицаРегистра КАК Т";

	КонецЕсли;

	// Заменим шаблоны в тексте запроса
	ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
		|		Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);

	Запрос.Выполнить();

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);

КонецПроцедуры

// Формирует временную таблицу ВТКэшОчищаемыеДокументы - документы, у которых не осталось расчетных движений.
//
Процедура СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета,
		ОписаниеРегистра, Запрос)

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшОчищаемыеДокументы", НСтр("ru='Регистр';uk='Регістр'",ОбщегоНазначения.КодОсновногоЯзыка())
		+ ": " + ОписаниеРегистра.ИмяРегистра, "ВТКэшИзмененныеДокументы, ВТКэш"
		+ ОписаниеРегистра.ИмяРегистра
		+ ", ВТКэшДвиженияДругихПериодовИлиОрганизаций");

		// Выберем регистраторы, у которых (по И)
	// - есть только старые движения расчета себестоимости (нет "первичных движений")
	// - нет новых движений расчета себестоимости
	// - нет движений по другим периодам и/или организациям
	// - они не являются исключениями (у которых есть расчетные движения не в периоде документа)
	// Для таких документов надо просто очистить их движения - записать пустой набор.
	ОтборПоТипамРегистраторов = "";
	Для Каждого КлючИЗначение Из ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях Цикл
		Если НЕ КлючИЗначение.Значение Тогда
			МетаДокумент = КлючИЗначение.Ключ; // ОбъектМетаданныхДокумент
			ОтборПоТипамРегистраторов = ОтборПоТипамРегистраторов
				+ ?(ОтборПоТипамРегистраторов = "", "", " ИЛИ ")
				+ "(ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ." + МетаДокумент.Имя
				+ ") И НЕ (ВЫРАЗИТЬ(Т.Регистратор КАК Документ." + МетаДокумент.Имя
				+ ").Дата МЕЖДУ &НачалоПериода И &КонецПериода))";
		КонецЕсли;
	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(ОтборПоТипамРегистраторов) Тогда
		ОтборПоТипамРегистраторов = "ЛОЖЬ";
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТДокументыСНовымиДвижениями
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Т.Регистратор КАК Регистратор
		|	ИЗ
		|		ВТКэш%ИмяРегистра КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Т.Регистратор
		|	ИЗ
		|		ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
		|	) КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТДокументыБезНовыхДвижений
		|ИЗ
		|	ВТКэшИзмененныеДокументы КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыСНовымиДвижениями КАК ДокументыСНовымиДвижениями
		|		ПО Т.Регистратор = ДокументыСНовымиДвижениями.Регистратор
		|ГДЕ
		|	ДокументыСНовымиДвижениями.Регистратор ЕСТЬ NULL
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТДокументыСПервичнымиИЛИСохраняемымиДвижениями
		|ИЗ
		|	%ПолноеИмяРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыБезНовыхДвижений КАК ДокументыБезНовыхДвижений
		|		ПО Т.Регистратор = ДокументыБезНовыхДвижений.Регистратор
		|
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	%ОтборПоСлужебнымРеквизитам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ИЗ
		|	%ПолноеИмяРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыБезНовыхДвижений КАК ДокументыБезНовыхДвижений
		|		ПО Т.Регистратор = ДокументыБезНовыхДвижений.Регистратор
		|
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И (%ОтборПоТипамРегистраторов)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТКэшОчищаемыеДокументы
		|ИЗ
		|	ВТДокументыБезНовыхДвижений КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыСПервичнымиИЛИСохраняемымиДвижениями КАК ДокументыСПервичнымиИЛИСохраняемымиДвижениями
		|		ПО Т.Регистратор = ДокументыСПервичнымиИЛИСохраняемымиДвижениями.Регистратор
		|ГДЕ
		|	ДокументыСПервичнымиИЛИСохраняемымиДвижениями.Регистратор ЕСТЬ NULL
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ВТДокументыСНовымиДвижениями
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ВТДокументыБезНовыхДвижений
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ВТДокументыСПервичнымиИЛИСохраняемымиДвижениями";

		// Отбор - первичные движения
	ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, , Истина, Ложь, Ложь, );

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипамРегистраторов", ОтборПоТипамРегистраторов);

	Запрос.Выполнить();

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);

КонецПроцедуры

// Отладочная процедура - очистка всех движений, сформированных предыдущим расчетом.
// Может выполняться достаточно долго, поэтому рекомендуется только для целей отладки.
//
Процедура ОчиститьСтарыеДвиженияРасчетаСебестоимости(ПараметрыРасчета)

	РасчетСебестоимостиПротоколРасчета.НачалоЭтапаРасчета(ПараметрыРасчета, "ОчиститьСтарыеДвиженияРасчетаСебестоимости");

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ, ПараметрыРасчета.НомерЗаданияДоРасчета);

	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл

		ОписаниеРегистра = КлючИЗначение.Значение;

		Если НЕ ОписаниеРегистра.ЕстьРасчетСебестоимости
				И НЕ ОписаниеРегистра.ЕстьРасчетПартий
				И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
			Продолжить; // см. комментарий в НужноЗаписатьРегистр()
		КонецЕсли;

		// Сформируем ВТКэшСтарыеДокументы
		СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);

		// Сформируем ВТКэшИзмененныеДокументы
		СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		//++ НЕ УТ
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшИзмененныеДокументыКОтражению");
		//-- НЕ УТ

		// Сформируем ВТКэшДвиженияДругихПериодовИлиОрганизаций
		СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос);

		// Сформируем ВТКэшОчищаемыеДокументы
		СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);

		// Подготовим данные для очистки движений документов, не имеющих первичных движений
		Запрос.Текст = "ВЫБРАТЬ
			|	*
			|ИЗ
			|	ВТКэшОчищаемыеДокументы КАК Т";

		ЗаписатьДвиженияПоРегистру(Запрос, ОписаниеРегистра.МенеджерРегистра, ПараметрыЗаписи);

		// Шаблоны для замены в тексте запроса
		ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
			|		Т."));
		ТекстПоляКэшаРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
			|		Т."));
		ЗаменитьВидДвиженияНаПлатформенный(ОписаниеРегистра, ТекстПоляКэшаРегистра);

		ТекстПоляСортировки = СокрЛП(СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "
			|		Т."));
		ТекстПоляСортировки = "Т.Регистратор, Т.Период"
			+ ?(ТекстПоляСортировки = "", "", ", ") + ТекстПоляСортировки
			+ ?(ОписаниеРегистра.ЕстьРасчетСебестоимости, ", Т.РасчетСебестоимости", "")
			+ ?(ОписаниеРегистра.ЕстьРасчетПартий, ", Т.РасчетПартий", "");

			// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
		//	- "первичные" движения документа в периоде расчета
		//	- непересчитываемые движения документа.
		Запрос.Текст = "ВЫБРАТЬ
			|	%ПоляОсновнойТаблицыРегистра
			|ИЗ
			|	%ПолноеИмяРегистра КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
			|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
			|ГДЕ
			|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
			|	%ОтборПоОрганизации
			|	%ОтборПоСлужебнымРеквизитам
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	%ПоляОсновнойТаблицыРегистра
			|ИЗ
			|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
			|
			|УПОРЯДОЧИТЬ ПО
			|	%Порядок";

			// Заменим шаблоны в тексте запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Порядок", ТекстПоляСортировки);

		// Отбор - первичные движения
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь);

		ЗаписатьДвиженияПоРегистру(Запрос, ОписаниеРегистра.МенеджерРегистра, ПараметрыЗаписи);

		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшСтарыеДокументы, ВТКэшИзмененныеДокументы, ВТКэшДвиженияДругихПериодовИлиОрганизаций, ВТКэшОчищаемыеДокументы");

	КонецЦикла;

КонецПроцедуры

// Запускает новое задание многопоточной записи движений.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
// 	ОписаниеРегистра - Структура -
// 	ТаблицаДвижений - ТаблицаЗначений -
// 	ОписаниеЗадания - Строка -
Процедура ЗапуститьЗаданиеЗаписи(ПараметрыРасчета, ОписаниеРегистра,
		ТаблицаДвижений, ОписаниеЗадания = "") Экспорт

		// Если накопилось много незавершенных заданий записи движений, то подождем, пока хоть одно завершится.
	ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета);

	// Определим, должно ли новое задание ожидать завершения предыдущего
	ПредыдущееЗадание = Неопределено; // идентификатор задания записи предыдущей порции этого регистра
	Если ПараметрыРасчета.ОграниченияФЗ.ПоследовательнаяЗаписьРегистра
			И ПараметрыРасчета.ТаблицаЗаданийЗаписи.Количество() > 0 Тогда
		ПоследняяСтрока = ПараметрыРасчета.ТаблицаЗаданийЗаписи[ПараметрыРасчета.ТаблицаЗаданийЗаписи.Количество()
			- 1];
		Если ПоследняяСтрока.ИмяРегистра = ОписаниеРегистра.ИмяРегистра Тогда
			ПредыдущееЗадание = ПоследняяСтрока.ИдентификаторЗадания;
		КонецЕсли;
	КонецЕсли;

	// Подготовим и запустим новое задание записи.
	ПараметрыРасчета.ОбщееКоличествоФЗЗаписи = ПараметрыРасчета.ОбщееКоличествоФЗЗаписи
		+ 1;

	ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ, ПараметрыРасчета.НомерЗаданияДоРасчета, Истина);

	ПараметрыОбработчикаЗадания = Новый Массив;
	ПараметрыОбработчикаЗадания.Добавить(ТаблицаДвижений); // таблица первичных и расчетных движений
	ПараметрыОбработчикаЗадания.Добавить(ОписаниеРегистра.МенеджерРегистра); // менеджер регистра
	ПараметрыОбработчикаЗадания.Добавить(ПараметрыЗаписи); // параметры записи
	ПараметрыОбработчикаЗадания.Добавить(ПредыдущееЗадание); // ожидать завершения этого задания
	КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ФЗ №%1 - %2 (%3)';uk='ФЗ №%1 - %2 (%3)'",ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(ПараметрыРасчета.ОбщееКоличествоФЗЗаписи), ОписаниеРегистра.ИмяРегистра, СокрЛП(Новый УникальныйИдентификатор));

	// Запустим задание и запомним его идентификатор в стеке и общей таблице заданий записи.
	НовоеЗадание = ФоновыеЗадания.Выполнить("РасчетСебестоимостиПрикладныеАлгоритмы.ЗаписатьДвиженияПоРегиструФоновымЗаданием", ПараметрыОбработчикаЗадания, КлючЗадания, ОписаниеЗадания);

	ПараметрыРасчета.СтекЗаданийЗаписи.Добавить(НовоеЗадание.УникальныйИдентификатор);

	ПоследняяСтрока = ПараметрыРасчета.ТаблицаЗаданийЗаписи.Добавить();
	ПоследняяСтрока.ИдентификаторЗадания = НовоеЗадание.УникальныйИдентификатор;
	ПоследняяСтрока.ПредыдущееЗадание = ПредыдущееЗадание;
	ПоследняяСтрока.ИмяРегистра = ОписаниеРегистра.ИмяРегистра;
	ПоследняяСтрока.КоличествоДвижений = ТаблицаДвижений.Количество();

	// Проверим корректность формирования порций записи.
	Если НЕ ПараметрыРасчета.Отладка.КонтролироватьРегистраторыВФЗ Тогда
		Возврат;
	КонецЕсли;

	ТаблицаРегистраторов = ТаблицаДвижений.Скопировать(, "Регистратор");
	ТаблицаРегистраторов.Свернуть("Регистратор", "");

	Для Каждого ТекСтр Из ТаблицаРегистраторов Цикл
		НовСтр = ПараметрыРасчета.Отладка.РегистраторыВФЗ.Добавить();
		НовСтр.ИмяРегистра = ОписаниеРегистра.ИмяРегистра;
		НовСтр.Регистратор = ТекСтр.Регистратор;
		НовСтр.Количество = 1;
	КонецЦикла;

КонецПроцедуры

// Ожидает завершения одного или всех заданий в очереди записи движений.
//
Процедура ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета,
		ЗавершениеВсехЗаданий = Ложь)

	Если ЗавершениеВсехЗаданий
			ИЛИ ПараметрыРасчета.СтекЗаданийЗаписи.Количество() >= МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) Тогда

			// Если размер очереди заданий записи достиг максимума, то удалим из очереди завершенные задания.
		НомерЗадания = 0;

		Пока НомерЗадания < ПараметрыРасчета.СтекЗаданийЗаписи.Количество() Цикл

			Если НЕ ЗавершениеВсехЗаданий Тогда
				Задание = ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания);
				Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					НомерЗадания = НомерЗадания + 1; // движения еще записываются
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			ОжидатьЗавершенияФоновогоЗадания(ПараметрыРасчета, НомерЗадания);

		КонецЦикла;

		Если ПараметрыРасчета.СтекЗаданийЗаписи.Количество() >= МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) Тогда
		// Если в очереди нет завершенных заданий, то подождем пока освободится хотя бы одно место в очереди.
			ОжидатьЗавершенияФоновогоЗадания(ПараметрыРасчета, 0); // самое старое задание
		КонецЕсли;

	КонецЕсли;

	Если ЗавершениеВсехЗаданий Тогда
	// В случае, когда МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) > 1
		РасчетСебестоимостиПротоколРасчета.ОкончаниеЗаписиДвижений(ПараметрыРасчета);
	КонецЕсли;

КонецПроцедуры

// Ожидает завершения указанного фонового задания.
//
Функция ОжидатьЗавершенияФоновогоЗадания(ПараметрыРасчета, НомерЗадания)

	Задание = ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания);

	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда

		Попытка
			Задание.ОжидатьЗавершения();
		Исключение
		// Возвращается неинформативная ошибка "Выполнение одного или нескольких заданий завершилось с ошибкой".
			БылиОшибки = Истина; // для исключения срабатывания проверки стандарта 499 
		КонецПопытки;

		// Чтобы узнать статус завершенного задания надо получить его повторно
		Задание = ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания);

	КонецЕсли;

	Если Задание.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда // запись движений не выполнилась
		Если Задание.Состояние = Неопределено Тогда

		// Задание не найдено в списке фоновых заданий.
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Фоновое задание %1 не найдено. Вероятно задание завершено аварийно, см. Журнал регистрации.';uk='Фонове завдання %1 не знайдено. Ймовірно завдання завершено аварійно, див. Журнал реєстрації.'",ОбщегоНазначения.КодОсновногоЯзыка()), """"
				+ СокрЛП(Задание.Ключ) + """");

		Иначе

		// Состояние задания "ЗавершеноАварийно" или "Отменено".
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Фоновое задание %1 %2:
|%3'
|;uk='Фонове завдання %1 %2: 
|%3'",ОбщегоНазначения.КодОсновногоЯзыка()), """" + СокрЛП(Задание.Ключ)
				+ """", ?(Задание.Состояние = СостояниеФоновогоЗадания.Отменено, НСтр("ru='отменено';uk='скасовано'",ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru='завершено аварийно';uk='завершено аварійно'",ОбщегоНазначения.КодОсновногоЯзыка())), ?(Задание.ИнформацияОбОшибке = Неопределено, НСтр("ru='<Нет описания ошибки>';uk='<Немає опису помилки>'",ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)));

		КонецЕсли;

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам, СтрЗаменить(ТекстДляПротокола, СлужебныйСимвол_ПроблемаУжеЗарегистрирована(), ""));

		Если СтрНайти(ТекстДляПротокола, СлужебныйСимвол_ПроблемаУжеЗарегистрирована()) = 0 Тогда

			ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, , НСтр("ru='При записи движений диагностированы ошибки';uk='При запису рухів діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола);

		КонецЕсли;

	Иначе

		ИмяРегистра = Задание.Ключ;
		ПозицияНачала = СтрНайти(ИмяРегистра, "-");
		ПозицияКонца = СтрНайти(ИмяРегистра, "(");

		Если ПозицияНачала > 0 И ПозицияКонца > 0 Тогда

			ИмяРегистра = СокрЛП(Сред(ИмяРегистра, ПозицияНачала + 1, ПозицияКонца
				- ПозицияНачала - 1));

			РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(ПараметрыРасчета, ИмяРегистра, , , Задание.Конец
				- Задание.Начало + 1);

		КонецЕсли;

	КонецЕсли;

	ПараметрыРасчета.СтекЗаданийЗаписи.Удалить(НомерЗадания); // закончено
КонецФункции

// Получает фоновое задание по его номеру в очереди.
//
Функция ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания)

	Идентификатор = ПараметрыРасчета.СтекЗаданийЗаписи[НомерЗадания];
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);

	Если Задание = Неопределено Тогда

		СтрокаЗадания = ПараметрыРасчета.ТаблицаЗаданийЗаписи.Найти(Идентификатор, "ИдентификаторЗадания");

		Если СтрокаЗадания = Неопределено Тогда

			КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ФЗ №? (%1)';uk='ФЗ №? (%1)'",ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(Идентификатор));

		Иначе

			КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ФЗ №%1 - %2 (%3)';uk='ФЗ №%1 - %2 (%3)'",ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(ПараметрыРасчета.ТаблицаЗаданийЗаписи.Индекс(СтрокаЗадания)
				+ 1), СтрокаЗадания.ИмяРегистра, СокрЛП(Идентификатор));

		КонецЕсли;

		Задание = Новый Структура("Состояние, Ключ", Неопределено, КлючЗадания);

	КонецЕсли;

	Возврат Задание;

КонецФункции

Функция МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета)

// Если запущено регламентное задание расчета предварительной себестоимости,
	// то многопоточная запись не требуется, т.к. рассчитываются движения только по регистру сведений СтоимостьТоваров.
	КоличествоЗаданий = ?(ПараметрыРасчета.РегламентноеЗадание
		ИЛИ ОбщегоНазначения.ИнформационнаяБазаФайловая(), 1, ПараметрыРасчета.ОграниченияФЗ.МаксимальноеКоличествоФЗЗаписи);

	Возврат КоличествоЗаданий;

КонецФункции

Функция ИмяСлужебногоДополнительногоСвойстваОбъекта() Экспорт
	Возврат "РасчетПартийИСебестоимости";
КонецФункции

#КонецОбласти

#Область ВосстановленияДвижений

// Перепроводит документы по нескольким регистрам накопления.
//
// Параметры:
//	ПараметрыРасчета - параметры расчета
//	Запрос - Запрос - запрос с текстом для формирования временной таблицы
//		ВТРегистраторыСНекорректнымиДвижениями с полями: Ссылка, ИмяРегистра, КодОшибки
//		Указанные в этой временной таблице документы из поля Ссылка
//		будут перепроведены по указанным регистрам накопления из поля ИмяРегистра.
//	РасшифровкаКодовОшибок - Соответствие - описание ошибок
//		Ключ - Число, Строка - код ошибки из поля КодОшибки временной таблицы ВТРегистраторыСНекорректнымиДвижениями
//		Значение - Строка - пользовательское описание ошибки
//	ПричинаПерепроведения - Строка - описание причины, вызвавшей перепроведение документов.
//	ДополнительныеПоля - Структура - дополнительные поля таблицы ВТРегистраторыСНекорректнымиДвижениями
//		Ключ - имя поля
//		Представление - представление поля для вывода в протокол
//
Процедура ПерепровестиДокументыПоОтдельнымРегистрамНакопления(ПараметрыРасчета,
		Запрос, РасшифровкаКодовОшибок, ПричинаПерепроведения,
		ДополнительныеПоля = Неопределено) Экспорт

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями", ПричинаПерепроведения);

	СуществующиеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(Запрос);

	ИсходныйТекстЗапроса = Запрос.Текст;
	РезультатЗапроса = Запрос.Выполнить();

	СуществующиеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(Запрос, РасчетСебестоимостиУниверсальныеАлгоритмы.СоединитьСтроки(СуществующиеВТ, "ВТРегистраторыСНекорректнымиДвижениями"));

	СформироватьТаблицуМоментовВремени(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями", "Ссылка"); // создает ВТМоментыВремени

	// Проверим возможность формирования движений по регистрам в данном периоде
	Если РасчетСебестоимостиПовтИсп.ВозможныНеиспользуемыеДвиженияПоРегистрамСебестоимости() Тогда

		ИменаРегистровСебестоимости = Новый Массив;
		РегистраторыИсключения = Новый Массив;

		Для Каждого КлючИЗначение Из РасчетСебестоимостиПовтИсп.РегистрыНеИспользуемыеПриВыключенномУчетеСебестоимости() Цикл
			МетаРегистр = КлючИЗначение.Ключ; // ОбъектМетаданныхРегистрНакопления 
			ИменаРегистровСебестоимости.Добавить(МетаРегистр.Имя);
		КонецЦикла;

		Для Каждого КлючИЗначение Из РасчетСебестоимостиПовтИсп.РегистраторыСДвижениямиПриВыключенномУчетеСебестоимости() Цикл
			МетаДокумент = КлючИЗначение.Ключ; // ОбъектМетаданныхДокумент 
			РегистраторыИсключения.Добавить(Тип("ДокументСсылка." + МетаДокумент.Имя));
		КонецЦикла;

		Запрос.УстановитьПараметр("ИменаРегистровСебестоимости", ИменаРегистровСебестоимости);
		Запрос.УстановитьПараметр("РегистраторыИсключения", РегистраторыИсключения);
		Запрос.УстановитьПараметр("ВестиУчет", ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости"));
		Запрос.УстановитьПараметр("ДатаНачалаУчета", НачалоМесяца(Константы.ДатаНачалаУчетаСебестоимости.Получить()));

		НовыйТекстЗапроса = "ВЫБРАТЬ
			|	//%ДополнительныеПоля%
			|	Т.ИмяРегистра 				 КАК ИмяРегистра,
			|	Т.Ссылка 	  				 КАК Ссылка,
			|	Т.Организация  				 КАК Организация,
			|	Т.КодОшибки  				 КАК КодОшибки
			|ПОМЕСТИТЬ ВТРегистраторыСНекорректнымиДвижениямиВПериодеУчетаСебестоимости
			|ИЗ
			|	ВТРегистраторыСНекорректнымиДвижениями КАК Т
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТМоментыВремени КАК МоментыВремени
			|		ПО Т.Ссылка = МоментыВремени.Ссылка
			|ГДЕ
			|	НЕ Т.ИмяРегистра В (&ИменаРегистровСебестоимости)
			|	ИЛИ (&ВестиУчет
			|		И НЕ ТИПЗНАЧЕНИЯ(Т.Ссылка) В (&РегистраторыИсключения)
			|		И &ДатаНачалаУчета <= МоментыВремени.Дата)
			|	ИЛИ (&ВестиУчет
			|		И ТИПЗНАЧЕНИЯ(Т.Ссылка) В (&РегистраторыИсключения)
			|		И ДОБАВИТЬКДАТЕ(&ДатаНачалаУчета, МЕСЯЦ, -1) <= МоментыВремени.Дата)
			|;
			|
			|/////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТРегистраторыСНекорректнымиДвижениями
			|;
			|
			|/////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	//%ДополнительныеПоля%
			|	Т.ИмяРегистра 				 КАК ИмяРегистра,
			|	Т.Ссылка 	  				 КАК Ссылка,
			|	Т.Организация  				 КАК Организация,
			|	Т.КодОшибки  				 КАК КодОшибки
			|ПОМЕСТИТЬ ВТРегистраторыСНекорректнымиДвижениями
			|ИЗ
			|	ВТРегистраторыСНекорректнымиДвижениямиВПериодеУчетаСебестоимости КАК Т
			|;
			|
			|/////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТРегистраторыСНекорректнымиДвижениямиВПериодеУчетаСебестоимости
			|;
			|
			|/////////////////////////////////////////////////////////
			|";

		Если ДополнительныеПоля <> Неопределено Тогда
			ТекстДополнительныхПолей = "";
			Для Каждого Поле Из ДополнительныеПоля Цикл
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + "Т." + Поле.Ключ
					+ ", ";
			КонецЦикла;
			НовыйТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса, "//%ДополнительныеПоля%", ТекстДополнительныхПолей);
		КонецЕсли;

	Иначе

		НовыйТекстЗапроса = "";

	КонецЕсли;

	НовыйТекстЗапроса = НовыйТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.ИмяРегистра 				 КАК ИмяРегистра,
		|	Т.Ссылка 	  				 КАК Ссылка,
		|	Т.Организация  				 КАК Организация,
		|	ЕСТЬNULL(МоментыВремени.МоментВремени, НЕОПРЕДЕЛЕНО) КАК МоментВремени
		|ИЗ
		|	ВТРегистраторыСНекорректнымиДвижениями КАК Т
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТМоментыВремени КАК МоментыВремени
		|		ПО Т.Ссылка = МоментыВремени.Ссылка
		|ГДЕ
		|	НЕ (Т.Ссылка ССЫЛКА Документ.КорректировкаРегистров)
		|	ИЛИ (&ВключатьКорректировкиРегистров И (Т.Ссылка ССЫЛКА Документ.КорректировкаРегистров))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяРегистра,
		|	МоментВремени
		|
		|ИТОГИ ПО
		|	ИмяРегистра";

	Запрос.Текст = НовыйТекстЗапроса;

	// Если будем перепроводить документы, то корректировки регистров надо исключить, т.к. они не перепроводятся.
	Запрос.УстановитьПараметр("ВключатьКорректировкиРегистров", ПараметрыРасчета.Отладка.ИгнорироватьНекорректныеПервичныеДвижения);

	РезультатЗапроса = Запрос.Выполнить();

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);

	Если НЕ РезультатЗапроса.Пустой()
			И НЕ ПараметрыРасчета.Отладка.ИгнорироватьНекорректныеПервичныеДвижения Тогда

			// Обнаружены некорректные движения.
		ВыборкаРегистры = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаРегистры.Следующий() Цикл

			ОписаниеРегистра = ПараметрыРасчета.Движения[ВыборкаРегистры.ИмяРегистра];
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;

			РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обнаружены некорректные движения по регистру накопления ""%1"".
|	  Причина: %2'
|;uk='Виявлено некоректні рухи по регістру накопичення ""%1"". 
|Причина: %2'",ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеРегистра.ИмяРегистра, ПричинаПерепроведения));

				// Перепроведем документы с некорректными движениями по текущему регистру.
			ВыборкаРегистраторы = ВыборкаРегистры.Выбрать();

			ВосстановитьДвиженияДокументовПоРегиструНакопления(ПараметрыРасчета, ВыборкаРегистраторы, ОписаниеРегистра.ИмяРегистра);

			РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перепроведено документов: %1';uk='Перепроведено документів: %1'",ОбщегоНазначения.КодОсновногоЯзыка()), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(ВыборкаРегистраторы.Количество())));

		КонецЦикла;

		УничтожитьВременныеТаблицы(Запрос, "ВТРегистраторыСНекорректнымиДвижениями");

		// Повторно проанализируем движения после перепроведения документов - ожидаем, что теперь ошибок быть не должно.
		// Корректировки регистров включаем в результат - об их ошибках тоже надо сообщить.
		Запрос.УстановитьПараметр("ВключатьКорректировкиРегистров", Истина);

		РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями", ПричинаПерепроведения);

		Запрос.Текст = ИсходныйТекстЗапроса + "
			|;
			|" + НовыйТекстЗапроса;

		УничтожитьВременныеТаблицы(Запрос, СуществующиеВТ);

		РезультатЗапроса = Запрос.Выполнить();

		РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);

		Если РезультатЗапроса.Пустой() Тогда // если остались ошибки - о них сообщим ниже, подробно
			РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, НСтр("ru='Все некорректные движения исправлены в результате перепроведения документов.';uk='Всі некоректні руху виправлені в результаті перепроведення документів.'",ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;

	КонецЕсли;

	Если НЕ РезультатЗапроса.Пустой()
			ИЛИ РазмерВременнойТаблицы(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями") > 0 Тогда

			// Остались некорректные записи, но выполнение расчета все равно продолжим.
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов, РасчетСебестоимостиПротоколРасчета.СлужебныйСимвол_БезНумерации()
			+ НСтр("ru='После перепроведения остались документы с некорректными движениями:';uk='Після перепроведення залишилися документи з некоректними рухами:'",ОбщегоНазначения.КодОсновногоЯзыка()));

			// Выведем детальную информацию об ошибках в движениях документов.
		Запрос.Текст = "ВЫБРАТЬ
			|	//%ДополнительныеПоля%
			|	Т.ИмяРегистра 				 КАК ИмяРегистра,
			|	Т.Ссылка 	  				 КАК Ссылка,
			|	Т.Организация  				 КАК Организация,
			|	ЕСТЬNULL(МоментыВремени.МоментВремени, НЕОПРЕДЕЛЕНО) КАК МоментВремени,
			|	Т.КодОшибки   				 КАК КодОшибки
			|ИЗ
			|	ВТРегистраторыСНекорректнымиДвижениями КАК Т
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТМоментыВремени КАК МоментыВремени
			|		ПО Т.Ссылка = МоментыВремени.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	КодОшибки,
			|	МоментВремени,
			|	ИмяРегистра
			|
			|ИТОГИ ПО
			|	КодОшибки";

		Если ДополнительныеПоля <> Неопределено Тогда
			ТекстДополнительныхПолей = "";
			Для Каждого Поле Из ДополнительныеПоля Цикл
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + "Т." + Поле.Ключ
					+ ", ";
			КонецЦикла;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ДополнительныеПоля%", ТекстДополнительныхПолей);
		КонецЕсли;

		ВыборкаКодыОшибок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаКодыОшибок.Следующий() Цикл

			ТекстОшибки = РасшифровкаКодовОшибок[ВыборкаКодыОшибок.КодОшибки];

			Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='№%1, описание отсутствует';uk='№ %1, опис відсутній'",ОбщегоНазначения.КодОсновногоЯзыка()), ВыборкаКодыОшибок.КодОшибки);
			КонецЕсли;

			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов, "#- "
				+ НСтр("ru='ошибка';uk='помилка'",ОбщегоНазначения.КодОсновногоЯзыка()) + " """
				+ ТекстОшибки + """:");

			Выборка = ВыборкаКодыОшибок.Выбрать();

			Пока Выборка.Следующий() Цикл

				ТекстДополнительныхПолей = "";

				Если ДополнительныеПоля <> Неопределено Тогда
					ТекстДополнительныхПолей = "";
					Для Каждого Поле Из ДополнительныеПоля Цикл
						Если ЗначениеЗаполнено(Выборка[Поле.Ключ]) Тогда
							ТекстДополнительныхПолей = ТекстДополнительныхПолей
								+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(", %1 ""%2""", Поле.Значение, Выборка[Поле.Ключ]);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1, организация ""%2"", регистр ""%3""%4';uk=' %1, організація ""%2"", регістр ""%3"" %4'",ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(Выборка.Ссылка), СокрЛП(Выборка.Организация), Выборка.ИмяРегистра, ТекстДополнительныхПолей);

				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов, ТекстДляПротокола);

				ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, Выборка.Организация, НСтр("ru='Не удалось исправить проблемы в движениях документов';uk='Не вдалося виправити проблеми в рухах документів'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстОшибки
					+ ":" + Символы.ПС + ТекстДляПротокола, Выборка.Ссылка);

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	Запрос.Текст = ИсходныйТекстЗапроса;

	УничтожитьВременныеТаблицы(Запрос, "ВТРегистраторыСНекорректнымиДвижениями, ВТМоментыВремени");

КонецПроцедуры

// Перепроводит документы по одному регистру накопления.
//
// Параметры:
//	ВыборкаДокументов - ВыборкаИзРезультатаЗапроса - выборка запроса, обязательно должна содержать поле Ссылка
//	ИмяРегистраНакопления - Строка - имя регистра накопления, по которому надо перепровести документы.
//
Процедура ВосстановитьДвиженияДокументовПоРегиструНакопления(ПараметрыРасчета,
		ВыборкаДокументов, ИмяРегистраНакопления) Экспорт

	Если ВыборкаДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ЭтоПараметрыРасчетаПУ22 = ПараметрыРасчета.Свойство("ЭтоПараметрыРасчетаПУ22");

	ОбработанныеДокументы = Новый Соответствие;

	НаборЗаписей = РегистрыНакопления[ИмяРегистраНакопления].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей.СебестоимостьТоваров - или любой другой обслуживаемый регистр
	НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ДатаРегистратора", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	НаборЗаписей.ДополнительныеСвойства.Вставить("НеСохранятьРасчетныеДвижения", Истина);

	// Сформируем запрос для сохранения движений документах в периодах, отличных от периода расчета.
	// Другие механики сохранения движений вызываться не будут.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыРасчета.РасчетныйПериод.КонецПериода);

	Запрос.Текст = "ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрНакопления.%1 КАК Т
		|ГДЕ
		|	Т.Регистратор = &Регистратор
		|	И НЕ (Т.Период МЕЖДУ &НачалоПериода И &КонецПериода)";

	ПроведениеДокументов.УстановитьДопСвойстваРегистра(НаборЗаписей, ПроведениеДокументов.ЭмуляцияДокумента(ВыборкаДокументов.Ссылка, ПараметрыРасчета.РасчетныйПериод.НачалоПериода));

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяРегистраНакопления);

	Пока ВыборкаДокументов.Следующий() Цикл

		Регистратор = ВыборкаДокументов.Ссылка;

		Если ОбработанныеДокументы.Получить(Регистратор) <> Неопределено Тогда
			Продолжить; // у одного документа движения по нескольким организациям, повторно перепроводить его не нужно
		КонецЕсли;

		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();

		НачатьТранзакцию();

		Попытка

			//++ НЕ УТ
			Если ЭтоПараметрыРасчетаПУ22
				И ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
				
				РасчетСебестоимостиЛокализация.ОбработатьДокументОтчетПереработчикаПередВосстановлениемДвижений(Регистратор);
				
			КонецЕсли;
			//-- НЕ УТ
			
			Если РасчетСебестоимостиЛокализация.ВосстановитьДвиженияДокументовПоРегиструНакопления(Регистратор) Тогда
			// Проведение выполнено в модуле локализации.
			Иначе

				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления."
					+ ИмяРегистраНакопления + ".НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
				Блокировка.Заблокировать();

				ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, ИмяРегистраНакопления, ДопПараметры);

				// Если у документа нет нужной таблицы движений, то это значит что документ больше не формирует движения
				// по указанному регистру. Ранее сформированные движения будут очищены.
				Если ТаблицыДляДвижений.Свойство("Таблица" + ИмяРегистраНакопления) Тогда

				// Добавим в набор только первичные движения документа в текущем периоде.
					Для Каждого СтрокаТаблицыДвижений Из ТаблицыДляДвижений["Таблица"
						+ ИмяРегистраНакопления] Цикл

						Если НачалоМесяца(СтрокаТаблицыДвижений.Период) = ПараметрыРасчета.РасчетныйПериод.НачалоПериода Тогда
							ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТаблицыДвижений);
						КонецЕсли;

					КонецЦикла;
				КонецЕсли;

				// Дополним всеми движениями документа в других периодов из ИБ.
				Запрос.УстановитьПараметр("Регистратор", Регистратор);
				ВыборкаДвижений = Запрос.Выполнить().Выбрать();

				Пока ВыборкаДвижений.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаДвижений);
				КонецЦИкла;

				ДатыЗапретаИзмененияУТ.ОтключитьПроверкуДатыЗапретаИзменения(НаборЗаписей);

				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				НаборЗаписей.Записывать = Истина;
				НаборЗаписей.Записать(Истина);
				НаборЗаписей.Очистить();

			КонецЕсли;

			ОбработанныеДокументы.Вставить(Регистратор, ВыборкаДокументов.Организация);

			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось обработать документ ""%1"" по причине:
|		%2'
|;uk='На вдалося обробити документ ""%1"" з причини: 
|%2'",ОбщегоНазначения.КодОсновногоЯзыка()), Регистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			Если НЕ ЭтоПараметрыРасчетаПУ22 Тогда
				ЗаписьЖурналаРегистрации(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета), УровеньЖурналаРегистрации.Ошибка, Регистратор.Метаданные(), Регистратор, ТекстСообщения);
			Иначе
				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов, ТекстСообщения, ТекстСообщения);
			КонецЕсли;

			ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, ВыборкаДокументов.Организация, НСтр("ru='Не удалось исправить проблемы в движениях документов';uk='Не вдалося виправити проблеми в рухах документів'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстСообщения, Регистратор);
			
			НаборЗаписей.Очистить();

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

// Возвращает массив типов документов учета ОС и НМА.
// Документы этих типов имеют "нестандартную" механику проведения по регистрам прочих доходов и расходов.
//
// Возвращаемое значение:
//	Массив из типов документов
//
Функция ТипыДокументовОСиНМА() Экспорт

	ТипыРегистраторов = Новый Массив;
	//++ НЕ УТ
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.АмортизацияНМА2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.АмортизацияОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ИзменениеПараметровОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.МодернизацияОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПеремещениеНМА2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПереоценкаНМА2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПереоценкаОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеНМА2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.СписаниеНМА2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.СписаниеОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииОС"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииНМА"));
	РасчетСебестоимостиЛокализация.ДополнитьТипыДокументовОСиНМА(ТипыРегистраторов);
	//-- НЕ УТ
	Возврат ТипыРегистраторов;

КонецФункции

// Перепроводит документы по всем регистрам.
//
// Параметры:
//	ПараметрыРасчета - параметры расчета
//	Запрос - Запрос - запрос с текстом для формирования временной таблицы
//		ВТРегистраторыСНекорректнымиДвижениями с полями: Ссылка, Организация, КодОшибки
//		Указанные в этой временной таблице документы из поля Ссылка	будут перепроведены.
//	РасшифровкаКодовОшибок - Соответствие - описание ошибок
//		Ключ - Число, Строка - код ошибки из поля КодОшибки временной таблицы ВТРегистраторыСНекорректнымиДвижениями
//		Значение - Строка - пользовательское описание ошибки
//	ПричинаПерепроведения - Строка - описание причины, вызвавшей перепроведение документов.
//
Процедура ПерепровестиДокументы(ПараметрыРасчета, Запрос,
		РасшифровкаКодовОшибок, ПричинаПерепроведения) Экспорт

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТРегистраторыДляПерепроведения");

	ЭтоПараметрыРасчетаПУ22 = ПараметрыРасчета.Свойство("ЭтоПараметрыРасчетаПУ22");

	РезультатЗапроса = Запрос.Выполнить();

	СформироватьТаблицуМоментовВремени(ПараметрыРасчета, "ВТРегистраторыДляПерепроведения", "Ссылка"); // создает ВТМоментыВремени
	НовыйТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Ссылка 	  				 						 КАК Ссылка,
		|	Т.Организация  				 						 КАК Организация,
		|	ЕСТЬNULL(МоментыВремени.МоментВремени, НЕОПРЕДЕЛЕНО) КАК МоментВремени
		|ИЗ
		|	ВТРегистраторыДляПерепроведения КАК Т
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТМоментыВремени КАК МоментыВремени
		|		ПО Т.Ссылка = МоментыВремени.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени";

	ИсходныйТекстЗапроса = Запрос.Текст;
	Запрос.Текст = НовыйТекстЗапроса;

	РезультатЗапроса = Запрос.Выполнить();

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);

	Если НЕ РезультатЗапроса.Пустой()
			И НЕ ПараметрыРасчета.Отладка.ИгнорироватьНекорректныеПервичныеДвижения Тогда

			// Перепроведем документы с некорректными движениями по всем регистрам.
		ВыборкаРегистраторы = РезультатЗапроса.Выбрать();

		Пока ВыборкаРегистраторы.Следующий() Цикл

			Попытка

				Регистратор = ВыборкаРегистраторы.Ссылка;
				ДокументДляПроведения = Регистратор.ПолучитьОбъект();

				УстановитьПризнакВыполненияРасчетаПартийИСебестоимости(ДокументДляПроведения);
				ДокументДляПроведения.ДополнительныеСвойства.Вставить(ЗапасыСервер.ИмяДопСвойстваДляПерезаполненияВидовЗапасов(), Истина);

				МассивСообщенийДоПроведения = ПолучитьСообщенияПользователю(Ложь);

				ДокументДляПроведения.Записать(РежимЗаписиДокумента.Проведение);

			Исключение

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось обработать документ ""%1"" по причине:
|		%2'
|;uk='На вдалося обробити документ ""%1"" з причини: 
|%2'",ОбщегоНазначения.КодОсновногоЯзыка()), Регистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				МассивСообщенийПослеПроведения = ПолучитьСообщенияПользователю(Ложь);

				Для НомерСообщения = МассивСообщенийДоПроведения.Количество()
					+ 1 По МассивСообщенийПослеПроведения.Количество() Цикл
					// Если при проведении были диагностированы проблемы, из-за которых документ не был проведен,
				// то добавим текст сообщений об этих проблемах в протокол.
					ТекстСообщения = ТекстСообщения + Символы.ПС
						+ СокрЛП(МассивСообщенийПослеПроведения[НомерСообщения - 1].Текст);
				КонецЦикла;

				Если НЕ ЭтоПараметрыРасчетаПУ22 Тогда
					ЗаписьЖурналаРегистрации(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета), УровеньЖурналаРегистрации.Ошибка, Регистратор.Метаданные(), Регистратор, ТекстСообщения);
				Иначе
					РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов, ТекстСообщения, ТекстСообщения);
				КонецЕсли;

				ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, ВыборкаРегистраторы.Организация, НСтр("ru='Не удалось исправить проблемы в движениях документов';uk='Не вдалося виправити проблеми в рухах документів'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстСообщения, Регистратор);

			КонецПопытки;

		КонецЦикла;

		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перепроведено документов: %1';uk='Перепроведено документів: %1'",ОбщегоНазначения.КодОсновногоЯзыка()), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(ВыборкаРегистраторы.Количество())));

	КонецЕсли;

	Запрос.Текст = ИсходныйТекстЗапроса;

	УничтожитьВременныеТаблицы(Запрос, "ВТРегистраторыДляПерепроведения, ВТМоментыВремени");

КонецПроцедуры

#КонецОбласти

#Область КэшированиеДанныхРегистров

// Инициализирует данные общего параметра расчета, описывающие указанный регистр.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//	МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - 
//
Процедура ИнициализироватьДанныеРегистра(ПараметрыРасчета, МетаданныеРегистра) Экспорт

	Если ПараметрыРасчета.Движения.Свойство(МетаданныеРегистра.Имя) Тогда

		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка инициализации расчета: регистр %1 уже инициализирован';uk='Помилка ініціалізації розрахунку: регістр %1 вже ініціалізований'",ОбщегоНазначения.КодОсновногоЯзыка()), МетаданныеРегистра.Имя);

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета, ТекстДляПротокола);

		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

	КонецЕсли;

	ОписаниеРегистра = СформироватьОписаниеРегистра(МетаданныеРегистра);

	// Создадим временную таблицу для кэширования всех новых движений регистра
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ПараметрыРасчета, "ВТКэш"
		+ ОписаниеРегистра.ИмяРегистра, ОписаниеРегистра.Таблица, ОписаниеРегистра.ПоляКэшаРегистра);

	РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, 1);

	// Добавим описание регистра в параметры расчета
	ПараметрыРасчета.Движения.Вставить(ОписаниеРегистра.ИмяРегистра, ОписаниеРегистра);

	// Создадим временную таблицу для кэширования записей основной таблицы регистра
	Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	КонецЕсли;

	// Создадим временную таблицу для кэширования расчетных остатков
	Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	КонецЕсли;

КонецПроцедуры

// Уничтожает данные из общего параметра расчета, описывающие указанный регистр.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//	МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - 
Процедура УничтожитьДанныеРегистра(ПараметрыРасчета, МетаданныеРегистра) Экспорт

	ПараметрыРасчета.Движения.Удалить(МетаданныеРегистра.Имя);

КонецПроцедуры

// Формирует описание свойств и полей регистра, обслуживаемого механизмом расчета.
//
Функция СформироватьОписаниеРегистра(МетаданныеРегистра) Экспорт

	ОписаниеРегистра = Новый Структура;
	ОписаниеРегистра.Вставить("ЭтоОписаниеРегистра", Истина);
	ОписаниеРегистра.Вставить("ЭтоОписаниеВременнойТаблицы", Ложь);

	ОписаниеРегистра.Вставить("ИмяРегистра", МетаданныеРегистра.Имя);
	ОписаниеРегистра.Вставить("ПолноеИмяРегистра", МетаданныеРегистра.ПолноеИмя());
	ОписаниеРегистра.Вставить("Наименование", МетаданныеРегистра.Представление());
	ОписаниеРегистра.Вставить("ЭтоРегистрНакопления", Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра));
	ОписаниеРегистра.Вставить("ЭтоРегистрСебестоимости", (МетаданныеРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров));

	ОписаниеРегистра.Вставить("ЕстьОрганизация", МетаданныеРегистра.Измерения.Найти("Организация") <> Неопределено);
	ОписаниеРегистра.Вставить("ОрганизацияОбязательна", ОписаниеРегистра.ЕстьОрганизация
		И МетаданныеРегистра.Измерения.Организация.ЗапрещатьНезаполненныеЗначения);
	ОписаниеРегистра.Вставить("ЕстьАналитикаПартнеров", МетаданныеРегистра.Измерения.Найти("АналитикаУчетаПоПартнерам") <> Неопределено);

	ОписаниеРегистра.Вставить("ЕстьТипЗаписи", МетаданныеРегистра.Реквизиты.Найти("ТипЗаписи") <> Неопределено);
	ОписаниеРегистра.Вставить("ЕстьРасчетПартий", МетаданныеРегистра.Реквизиты.Найти("РасчетПартий") <> Неопределено);
	ОписаниеРегистра.Вставить("ЕстьРасчетСебестоимости", МетаданныеРегистра.Реквизиты.Найти("РасчетСебестоимости") <> Неопределено);
	ОписаниеРегистра.Вставить("ЕстьРасчетНеЗавершен", МетаданныеРегистра.Реквизиты.Найти("РасчетНеЗавершен") <> Неопределено);

	ОписаниеРегистра.Вставить("ИспользоватьВТКэш", Истина); // при расчете кэша оборотов/остатков использовать ВТКэш
	ОписаниеРегистра.Вставить("НадоОбновитьРасчетныйКэш", Ложь); // были сформированы движения, еще не учтенные в расчетных остатках/записях
	ОписаниеРегистра.Вставить("КоличествоПорцийДанных", 0); // при расчете этапа каждая порция сформированных движений сначала складывается в отдельные ВТ, а в конце этапа все они объединяются
	ОписаниеРегистра.Вставить("ИменаТаблицПорций", ""); // имена всех ВТ порций вида ВТКэш<Имя регистра>_<НомерПорции от 1 до КоличествоПорцийДанных>
	Если ОписаниеРегистра.ЭтоРегистрНакопления Тогда
		МенеджерРегистра = РегистрыНакопления[ОписаниеРегистра.ИмяРегистра];
	Иначе
		МенеджерРегистра = РегистрыСведений[ОписаниеРегистра.ИмяРегистра];
	КонецЕсли;

	ОписаниеРегистра.Вставить("МетаданныеРегистра", МетаданныеРегистра);
	ОписаниеРегистра.Вставить("МенеджерРегистра", МенеджерРегистра);
	ОписаниеРегистра.Вставить("ЕстьСвойствоВидДвижения", ОписаниеРегистра.ЭтоРегистрНакопления
		И МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки);

	ОписаниеРегистра.Вставить("ЕстьИзмененныеДанные", Ложь); // изменились ли данные регистра после расчета
	ОбязательныеПоля = Новый Структура;

	#Область РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях

	// В конфигурации есть документы, которые могут делать движения по регистру (и/или)
	//	- в разных расчетных периодах (обязательно первичные + расчетные)
	//	- по разным организациям (любые виды движений)
	// Для таких документов при расчете надо сохранять не только первичные движения в расчетном периоде,
	// но и все (первичные + расчетные) движения по другим периодам и организациям.
	ОписаниеРегистра.Вставить("РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях", Новый Соответствие);

	ДокументыССохраняемымиДвижениями = ДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(Истина, Истина, ОписаниеРегистра.ИмяРегистра);

	Для Каждого КлючИЗначение Из ДокументыССохраняемымиДвижениями Цикл
		Если КлючИЗначение.Ключ.Движения.Содержит(МетаданныеРегистра) Тогда
			ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;

	#КонецОбласти

	#Область ВсеРегистраторыРегистра

	ОписаниеРегистра.Вставить("ВсеРегистраторы", Новый Соответствие);

	Для Каждого МетаДок Из Метаданные.Документы Цикл
		Если МетаДок.Движения.Содержит(МетаданныеРегистра) Тогда
			ОписаниеРегистра.ВсеРегистраторы.Вставить(МетаДок.Имя);
		КонецЕсли;
	КонецЦикла;

	#КонецОбласти

	#Область Таблица

	// Таблица для накапливания формируемых движений
	НаборРегистра = МенеджерРегистра.СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей.СебестоимостьТоваров - или любой другой обслуживаемый регистр 
	ОписаниеРегистра.Вставить("Таблица", НаборРегистра.ВыгрузитьКолонки());

	// Колонку "Регистратор" поместим на первое место
	КолонкаРегистратор = ОписаниеРегистра.Таблица.Колонки.Найти("Регистратор");
	ОписаниеРегистра.Таблица.Колонки.Сдвинуть(КолонкаРегистратор, -ОписаниеРегистра.Таблица.Колонки.Индекс(КолонкаРегистратор));

	// Для остаточных регистров накопления создадим служебную колонку СлужебноеВидДвиженияПриход.
	// В ней будем хранить булево представление вида движения (обход ошибки Платформы 30025997).
	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ОписаниеРегистра.Таблица.Колонки.Вставить(0, "СлужебноеВидДвиженияПриход", Новый ОписаниеТипов("Булево"));
	КонецЕсли;

	#КонецОбласти

	#Область ПоляРегистра

	// Список всех полей регистра, за исключением "техногенных"
	// Перед именем каждого поля стоят символы "%1" - для автоподстановки имен таблиц в запросах.
	ПоляОсновнойТаблицыРегистра = ""; // здесь поле "ВидДвижения"
	ПоляКэшаРегистра = ""; // здесь поле "СлужебноеВидДвиженияПриход"
	ИгнорируемыеПоля = Новый Структура("НомерСтроки, Активность, МоментВремени, ВидДвижения");

    Для Каждого Колонка Из ОписаниеРегистра.Таблица.Колонки Цикл
		Если Колонка.Имя = "СлужебноеВидДвиженияПриход" Тогда
			ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра
				+ ?(ПоляОсновнойТаблицыРегистра = "", "", ", ") + "%1" + "ВидДвижения";
			ПоляКэшаРегистра = ПоляКэшаРегистра + ?(ПоляКэшаРегистра = "", "", ", ")
				+ "%1" + "СлужебноеВидДвиженияПриход";
		ИначеЕсли НЕ ИгнорируемыеПоля.Свойство(Колонка.Имя) Тогда
			ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра
				+ ?(ПоляОсновнойТаблицыРегистра = "", "", ", ") + "%1" + Колонка.Имя;
			ПоляКэшаРегистра = ПоляКэшаРегистра + ?(ПоляКэшаРегистра = "", "", ", ")
				+ "%1" + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;

	ОписаниеРегистра.Вставить("ПоляОсновнойТаблицыРегистра", ПоляОсновнойТаблицыРегистра);
	ОписаниеРегистра.Вставить("ПоляКэшаРегистра", ПоляКэшаРегистра);

	#КонецОбласти

	#Область ИзмеренияРегистра

	// Список всех измерений регистра
	// Перед именем каждого измерения стоят символы "%1" - для автоподстановки имен таблиц в запросах.
	ИзмеренияРегистра = "";
	Для Каждого Мета Из МетаданныеРегистра.Измерения Цикл

		ИзмеренияРегистра = ИзмеренияРегистра + ?(ИзмеренияРегистра = "", "", ", ")
			+ "%1" + Мета.Имя;

		Если Мета.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеПоля.Вставить(Мета.Имя, Мета.Тип.ПривестиЗначение(Неопределено));
		КонецЕсли;

	КонецЦикла;

	ОписаниеРегистра.Вставить("ИзмеренияРегистра", ИзмеренияРегистра);

	#КонецОбласти

	#Область РесурсыРегистра

	// Список всех ресурсов регистра
	// Перед именем каждого ресурса стоят символы "%1" - для автоподстановки имен таблиц в запросах.
	РесурсыРегистра = "";
	РесурсыРегистраССуффиксом = "";
	Для Каждого Мета Из МетаданныеРегистра.Ресурсы Цикл

		РесурсыРегистра = РесурсыРегистра + ?(РесурсыРегистра = "", "", ", ") + "%1"
			+ Мета.Имя;
		РесурсыРегистраССуффиксом = РесурсыРегистраССуффиксом
			+ ?(РесурсыРегистраССуффиксом = "", "", ", ") + "%1" + Мета.Имя + "%2 КАК "
			+ Мета.Имя;

		Если Мета.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеПоля.Вставить(Мета.Имя, Мета.Тип.ПривестиЗначение(Неопределено));
		КонецЕсли;

	КонецЦикла;

	ОписаниеРегистра.Вставить("РесурсыРегистра", РесурсыРегистра);
	ОписаниеРегистра.Вставить("РесурсыРегистраССуффиксом", РесурсыРегистраССуффиксом);

	#КонецОбласти

	#Область РеквизитыРегистра

	// Список всех реквизитов регистра
	// Перед именем каждого реквизиты стоят символы "%1" - для автоподстановки имен таблиц в запросах.
	РеквизитыРегистра = "";
	ЧисловыеРеквизитыРегистра = ""; // реквизиты регистра, хранящие суммовые показатели (аналогично ресурсам)
	Для Каждого Мета Из МетаданныеРегистра.Реквизиты Цикл

		РеквизитыРегистра = РеквизитыРегистра + ?(РеквизитыРегистра = "", "", ", ")
			+ "%1" + Мета.Имя;

		Если ЭтоСуммируемыйРеквизитРегистра(Мета) Тогда // в некоторых регистрах НДС хранится в реквизитах
			ЧисловыеРеквизитыРегистра = ЧисловыеРеквизитыРегистра
				+ ?(ЧисловыеРеквизитыРегистра = "", "", ", ") + "%1" + Мета.Имя;
		КонецЕсли;

		Если Мета.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеПоля.Вставить(Мета.Имя, Мета.Тип.ПривестиЗначение(Неопределено));
		КонецЕсли;

	КонецЦикла;

	ОписаниеРегистра.Вставить("РеквизитыРегистра", РеквизитыРегистра);
	ОписаниеРегистра.Вставить("ЧисловыеРеквизитыРегистра", ЧисловыеРеквизитыРегистра);

	#КонецОбласти

	#Область ПоляОтбораНепустыхДвижений

	ПоляОтбораНепустыхДвижений = РесурсыРегистра + ?(РесурсыРегистра = ""
		ИЛИ ЧисловыеРеквизитыРегистра = "", "", ", ") + ЧисловыеРеквизитыРегистра;

	ОписаниеРегистра.Вставить("ПоляОтбораНепустыхДвижений", ПоляОтбораНепустыхДвижений);

	#КонецОбласти

	#Область ОтборНекорректныхДвижений

	ОбязательныеПоля.Вставить("Регистратор", Неопределено);

	ТекстПроверки = "";

	Для Каждого КлючИЗначение Из ОбязательныеПоля Цикл

		ПустоеЗначение = КлючИЗначение.Значение;
		ТекстЗначение = "";

		Если ПустоеЗначение = Неопределено Тогда
			ТекстЗначение = "НЕОПРЕДЕЛЕНО";
		ИначеЕсли ТипЗнч(ПустоеЗначение) = Тип("Строка") Тогда
			ТекстЗначение = """""";
		ИначеЕсли ТипЗнч(ПустоеЗначение) = Тип("Число") Тогда
			ТекстЗначение = "0";
		ИначеЕсли ТипЗнч(ПустоеЗначение) = Тип("Дата") Тогда
			ТекстЗначение = "ДАТАВРЕМЯ(1,1,1,0,0,0)";
		Иначе
			Мета = Метаданные.НайтиПоТипу(ТипЗнч(ПустоеЗначение));
			Если Мета <> Неопределено Тогда
				ТекстЗначение = "ЗНАЧЕНИЕ(" + Мета.ПолноеИмя() + ".ПустаяСсылка)";
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекстЗначение) Тогда

			ТекстПроверки = ТекстПроверки + ?(ТекстПроверки = "", "", Символы.ПС
				+ "	ИЛИ ") + "Т." + КлючИЗначение.Ключ + " = " + ТекстЗначение;

			ОписаниеРегистра.Таблица.Индексы.Добавить(КлючИЗначение.Ключ);

		КонецЕсли;

	КонецЦикла;

	ОписаниеРегистра.Вставить("ОбязательныеПоля", ОбязательныеПоля);
	ОписаниеРегистра.Вставить("ТекстПроверкиОбязательныхПолей", ТекстПроверки);

	#КонецОбласти

	Возврат ОписаниеРегистра;

КонецФункции

// Переносит распределенные партии в таблицу движений регистра.
//
Процедура КэшироватьРаспределенныеПартии(ПараметрыРасчета,
		ОкончаниеРаспределения = Истина) Экспорт

	Если НЕ ПараметрыРасчета.Свойство("РаспределениеПартий") Тогда
	// На этом этапе расчета не выполняется распределение партий
		Возврат;
	КонецЕсли;

	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;

	Если ОписаниеДвижений.РаспределениеНеТребуется Тогда // выполняется трансляция партий
		КэшироватьТранслируемыеПартии(ПараметрыРасчета, ОкончаниеРаспределения);
		Возврат;
	КонецЕсли;

	ИмяРегистра = ОписаниеДвижений.ИмяРегистра;
	ИмяВременнойТаблицы = ОписаниеДвижений.ИмяВременнойТаблицы;
	ПоляИндексирования = ОписаниеДвижений.ПоляИндексирования;

	РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии;
	НезаписываемыеДанные = ПараметрыРасчета.РаспределениеПартий.НезаписываемыеДанные;

	// Для целей тестирования используется таблица ВсеРасчетныеПартии, в которой накапливаются все данные из РасчетныеПартии.
	НакапливатьРасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.Свойство("ВсеРасчетныеПартии");

	ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, "РасчетныеПартии", РасчетныеПартии);

	Если ЗначениеЗаполнено(ИмяРегистра) Тогда

		Для Каждого РасчетнаяПартия Из РасчетныеПартии Цикл

			Если НакапливатьРасчетныеПартии Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыРасчета.РаспределениеПартий.ВсеРасчетныеПартии.Добавить(), РасчетнаяПартия);
			КонецЕсли;

			Если РасчетнаяПартияНеЗаписывается(РасчетнаяПартия, НезаписываемыеДанные) Тогда
				Продолжить;
			КонецЕсли;

			// Добавим партию в движения и заполним его свойства
			Запись = ПараметрыРасчета.МодульМеханизмаРасчета.ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, РасчетнаяПартия, , Новый Структура("РасчетНеЗавершен", НЕ РасчетнаяПартия.РасчетЗавершен));

		КонецЦикла;

		РасчетныеПартии.Очистить(); // закэшировали в движения
	ИначеЕсли ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда

	// Удалим незаписываемые строки
		ИндексСтроки = 0;

		Пока ИндексСтроки <= РасчетныеПартии.Количество() - 1 Цикл

			РасчетнаяПартия = РасчетныеПартии[ИндексСтроки];

			Если НакапливатьРасчетныеПартии Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыРасчета.РаспределениеПартий.ВсеРасчетныеПартии.Добавить(), РасчетнаяПартия);
			КонецЕсли;

			Если РасчетнаяПартияНеЗаписывается(РасчетнаяПартия, НезаписываемыеДанные) Тогда
				РасчетныеПартии.Удалить(РасчетнаяПартия);
			Иначе
				ИндексСтроки = ИндексСтроки + 1;
			КонецЕсли;

		КонецЦикла;

		// Составим перечень значимых колонок таблицы расчетных партий
		ИменаЧисловыхКолонок = "";
		ИменаНеЧисловыхКолонок = "";

		ВременнаяТаблицаСуществует = ВременнаяТаблицаСуществует(ПараметрыРасчета, ИмяВременнойТаблицы);

		Если ВременнаяТаблицаСуществует Тогда
			ИсточникКолонок = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИмяВременнойТаблицы, 0).Колонки;
		Иначе
			ИсточникКолонок = РасчетныеПартии.Колонки;
		КонецЕсли;

		Для Каждого Колонка Из ИсточникКолонок Цикл

			Если НЕ ВременнаяТаблицаСуществует
					И (Колонка.Имя = ИмяКолонкиДляНумерацииПоУмолчанию()
					ИЛИ Колонка.Имя = "Приоритет"
					ИЛИ Колонка.Имя = ОписаниеДвижений.БазисПрихода
					ИЛИ Колонка.Имя = ОписаниеДвижений.БазисРасхода) Тогда
					// Из расчетных партий не берем служебные поля, из временной таблицы берем все поля.
				Продолжить;
			ИначеЕсли ЭтоСуммируемаяКолонкаТаблицы(Колонка) Тогда
				ИменаЧисловыхКолонок = ИменаЧисловыхКолонок
					+ ?(ИменаЧисловыхКолонок = "", "", ", ") + "%1" + Колонка.Имя;
			Иначе
				ИменаНеЧисловыхКолонок = ИменаНеЧисловыхКолонок
					+ ?(ИменаНеЧисловыхКолонок = "", "", ", ") + "%1" + Колонка.Имя;
			КонецЕсли;

			Если ВременнаяТаблицаСуществует
					И РасчетныеПартии.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
				РасчетныеПартии.Колонки.Добавить(Колонка.Имя, РасчетСебестоимостиУниверсальныеАлгоритмы.ОписанияТиповБезТипаNull(Колонка.ТипЗначения));
			КонецЕсли;

		КонецЦикла;

		ИменаКолонок = ИменаНеЧисловыхКолонок
			+ ?(ИменаЧисловыхКолонок = "", "", ", " + ИменаЧисловыхКолонок);

			// Поместим таблицу расчетных партий во временную таблицу (произвольную - не являющуюся кэшем регистра).
		ИмяТаблицыПорции = ИмяТаблицыСледующейПорцииДанных("РаспределениеПартий", ПараметрыРасчета.РаспределениеПартий);

		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ПараметрыРасчета, ИмяТаблицыПорции, РасчетныеПартии, ИменаКолонок);

		РасчетныеПартии.Очистить(); // закэшировали во временную таблицу
		Если ОкончаниеРаспределения Тогда

			ОбъединитьВременныеТаблицы(ПараметрыРасчета, ПараметрыРасчета.РаспределениеПартий.ИменаТаблицПорций, ИмяВременнойТаблицы, ИменаКолонок, ИменаЧисловыхКолонок, ПоляИндексирования, Истина);

			ПараметрыРасчета.РаспределениеПартий.КоличествоПорцийДанных = 0;
			ПараметрыРасчета.РаспределениеПартий.ИменаТаблицПорций = "";

		КонецЕсли;

	Иначе
	// С таблицей РасчетныеПартии ничего не делаем - она будет накапливать в себе записи до окончания распределения.
	// При этом для нее не действует ограничение на превышение максимального размера таблицы значений (КоличествоСтрокВТЗ).
	КонецЕсли;

	Если ОкончаниеРаспределения Тогда

		ЗавершитьВыгрузкуПромежуточныхДанныхРасчета(ПараметрыРасчета);

		ПараметрыРасчета.Удалить("РаспределениеПартий");

	КонецЕсли;

КонецПроцедуры

// Определяет необходимость сохранения указанной расчетной партии.
//
Функция РасчетнаяПартияНеЗаписывается(РасчетнаяПартия,
		НезаписываемыеДанные) Экспорт
	
	Регистратор = РасчетнаяПартия.Регистратор; // ДокументСсылка
	
	Результат = (НЕ НезаписываемыеДанные.ЗаписыватьНезавершенные
		И НЕ РасчетнаяПартия.РасчетЗавершен)
		ИЛИ НезаписываемыеДанные.НезаписываемыеТипыЗаписей[РасчетнаяПартия.ТипЗаписи] <> Неопределено
		ИЛИ (НезаписываемыеДанные.НезаписываемыеРазделы.Количество() > 0
		И НезаписываемыеДанные.НезаписываемыеРазделы[РасчетнаяПартия.РазделУчета] <> Неопределено)
		ИЛИ (ЗначениеЗаполнено(Регистратор) // если регистратор не заполнен, то эта ситуация будет обработана при добавлении движения
	И НезаписываемыеДанные.НезаписываемыеРегистраторы[Регистратор.Метаданные().Имя] <> Неопределено);

	Возврат Результат;

КонецФункции

// Определяет, является ли указанная колонка таблицы значений колонкой для суммирования или для группировки.
//
Функция ЭтоСуммируемаяКолонкаТаблицы(Колонка)

	СтруктураИсключения = Новый Структура("Приоритет, КодСтроки, КодСтрокиПродукция"); // числовые реквизиты, которые не нужно суммировать
	Возврат Колонка.ТипЗначения.СодержитТип(Тип("Число"))
		И НЕ СтруктураИсключения.Свойство(Колонка.Имя);

КонецФункции

// Определяет, является ли указанный реквизит регистра подходящим для суммирования или для группировки.
//
Функция ЭтоСуммируемыйРеквизитРегистра(МетаРеквизит)

	Если СтрНайти(МетаРеквизит.Имя, "НДС") = 0 Тогда
		Возврат Ложь; // суммируем только реквизиты с НДС
	КонецЕсли;

	ОписаниеПоля = Новый Структура("Имя, ТипЗначения", МетаРеквизит.Имя, МетаРеквизит.Тип);

	Возврат ЭтоСуммируемаяКолонкаТаблицы(ОписаниеПоля);

КонецФункции

// Переносит распределенные партии в таблицу движений регистра.
//
Процедура КэшироватьТранслируемыеПартии(ПараметрыРасчета,
		ОкончаниеРаспределения = Истина) Экспорт

	Если НЕ ПараметрыРасчета.Свойство("РаспределениеПартий") Тогда
	// На этом этапе расчета не выполняется распределение партий
		Возврат;
	КонецЕсли;

	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	ИмяРегистра = ОписаниеДвижений.ИмяРегистра;
	ИмяВременнойТаблицы = ОписаниеДвижений.ИмяВременнойТаблицы;
	ПоляИндексирования = ОписаниеДвижений.ПоляИндексирования;
	ИмяТаблицыДанных = "Данные";

	Если ЗначениеЗаполнено(ИмяРегистра) Тогда

		Выборка = ВыбратьСтрокиВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыДанных);

		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, Выборка.Количество());

		Пока Выборка.Следующий() Цикл

		// Добавим партию в движения и заполним его свойства
			Запись = ПараметрыРасчета.МодульМеханизмаРасчета.ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, Выборка);

		КонецЦикла;

	ИначеЕсли ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда

	// Таблица расчетных партий пустая, нужна только для формирования структуры временной таблицы-приемника.
		РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.СкопироватьКолонки();

		// Составим перечень значимых колонок таблицы расчетных партий
		ИменаЧисловыхКолонок = "";
		ИменаНеЧисловыхКолонок = "";

		ВременнаяТаблицаСуществует = ВременнаяТаблицаСуществует(ПараметрыРасчета, ИмяВременнойТаблицы);

		Если ВременнаяТаблицаСуществует Тогда
			ИсточникКолонок = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИмяВременнойТаблицы, 0).Колонки;
		Иначе
			ИсточникКолонок = РасчетныеПартии.Колонки;
		КонецЕсли;

		Для Каждого Колонка Из ИсточникКолонок Цикл

			Если ЭтоСуммируемаяКолонкаТаблицы(Колонка) Тогда
				ИменаЧисловыхКолонок = ИменаЧисловыхКолонок
					+ ?(ИменаЧисловыхКолонок = "", "", ", ") + "%1" + Колонка.Имя;
			Иначе
				ИменаНеЧисловыхКолонок = ИменаНеЧисловыхКолонок
					+ ?(ИменаНеЧисловыхКолонок = "", "", ", ") + "%1" + Колонка.Имя;
			КонецЕсли;

		КонецЦикла;

		ИменаКолонок = ИменаНеЧисловыхКолонок
			+ ?(ИменаЧисловыхКолонок = "", "", ", " + ИменаЧисловыхКолонок);

			// Поместим таблицу расчетных партий в указанную временную таблицу (произвольную - не являющуюся кэшем регистра).
		Если НЕ ВременнаяТаблицаСуществует Тогда

		// Создадим пустую временную таблицу требуемой структуры.
			ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ПараметрыРасчета, ИмяВременнойТаблицы, РасчетныеПартии, ИменаКолонок, ПоляИндексирования);

		КонецЕсли;

		РазмерВТ = РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыДанных);

		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, РазмерВТ);

		Если РазмерВТ > 0 Тогда

			ДобавитьНедостающиеКолонкиВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыДанных, ИмяВременнойТаблицы, ПоляИндексирования);

			ОбъединитьВременныеТаблицы(ПараметрыРасчета, ИмяТаблицыДанных, ИмяВременнойТаблицы, ИменаКолонок, ИменаЧисловыхКолонок, ПоляИндексирования);

		КонецЕсли;

	Иначе
	// Не указана таблица-приемник, ничего не делаем.
	КонецЕсли;

	Если ОкончаниеРаспределения Тогда
		ПараметрыРасчета.Удалить("РаспределениеПартий");
	КонецЕсли;

КонецПроцедуры

// Переносит новые движения регистра из таблицы значений во временную таблицу.
// Процедуру необходимо вызывать в конце каждого этапа, на котором формируются какие-то движения,
// иначе следующий этап может не учесть движения предыдущего.
//
Процедура КэшироватьСформированныеДвижения(ПараметрыРасчета,
		ТаблицаПриемник = Неопределено, ОкончаниеЭтапа = Истина) Экспорт

	Если ОкончаниеЭтапа Тогда
	// При окончании этапа таблицу распределения партий надо перенести в таблицу движений регистра
		// или во временную таблицу, в зависимости от настроек распределения.
		КэшироватьРаспределенныеПартии(ПараметрыРасчета, ОкончаниеЭтапа);
	КонецЕсли;

	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл

		Если ТаблицаПриемник <> Неопределено
				И НРег(КлючИЗначение.Ключ) <> НРег(ТаблицаПриемник) Тогда
			Продолжить; // если явно задано имя регистра, то надо обработать только его
		КонецЕсли;

		ОписаниеРегистра = КлючИЗначение.Значение;

		Если ОписаниеРегистра.Таблица.Количество() > 0 Тогда

		// Переместим сформированные движения из ОписаниеРегистра.Таблица во временную таблицу ВТКэш.
			ЭтоРегистрСебестоимости = (ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
			ЭтоРегистрВыручки = (ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя);

			// Заполним служебное поле РасчетСебестоимости
			Если ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
				ОписаниеРегистра.Таблица.ЗаполнитьЗначения(НЕ ПараметрыРасчета.ИдетРасчетПартий, "РасчетСебестоимости");
			КонецЕсли;

			// Заполним служебное поле РасчетПартий
			// (для этапа заполнения партий в себестоимости этот признак устанавливается в функции ДобавитьЗаписьВТаблицуДвижений).
			Если ОписаниеРегистра.ЕстьРасчетПартий И НЕ (ЭтоРегистрСебестоимости
					И ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости)
					И НЕ (ЭтоРегистрВыручки
					И ПараметрыРасчета.ЗаполняютсяПартииВВыручке) Тогда
				ОписаниеРегистра.Таблица.ЗаполнитьЗначения(ПараметрыРасчета.ИдетРасчетПартий, "РасчетПартий");
			КонецЕсли;

			Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда

				Для Каждого Запись Из ОписаниеРегистра.Таблица Цикл

				// Дозаполним поле СлужебноеВидДвиженияПриход
					Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
						Запись.СлужебноеВидДвиженияПриход = (Запись.ВидДвижения = ВидДвиженияНакопления.Приход);
					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

			// Проверим заполненность обязательных полей.
			НекорректныеРегистраторы = Новый Соответствие;

			Для Каждого ОписаниеПоля Из ОписаниеРегистра.ОбязательныеПоля Цикл

				СтруктураПоиска = Новый Структура(ОписаниеПоля.Ключ, ОписаниеПоля.Значение);
				НекорректныеСтроки = ОписаниеРегистра.Таблица.НайтиСтроки(СтруктураПоиска);

				Для Каждого ДанныеДвижения Из НекорректныеСтроки Цикл

				// Выведем информацию об ошибке в сформированных движениях.
				// Информацию о проблеме с регистратором выводится в процедурах ДобавитьЗаписьВТаблицуДвижений.
					Если НекорректныеРегистраторы.Получить(ДанныеДвижения.Регистратор) = Неопределено
							И ОписаниеПоля.Ключ <> "Регистратор" Тогда

						НекорректныеРегистраторы.Вставить(ДанныеДвижения.Регистратор, Истина);

						Если ОписаниеРегистра.ЕстьОрганизация Тогда
							ОрганизацияСПроблемой = ДанныеДвижения.Организация;
						ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
							ОрганизацияСПроблемой = ПараметрыРасчета.ОрганизацияПоАналитикеПартнеров.Получить(ДанныеДвижения.АналитикаУчетаПоПартнерам);
						Иначе
							ОрганизацияСПроблемой = Неопределено;
						КонецЕсли;

						ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По документу ""%1"" сформированы движения по регистру ""%2"" с незаполненными обязательными полями';uk='По документу ""%1"" сформовані руху по регістру ""%2"" з незаповненими обов''язковими полями'",ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(ДанныеДвижения.Регистратор), ОписаниеРегистра.ИмяРегистра);

						РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам, ТекстДляПротокола);

						ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, ОрганизацияСПроблемой, НСтр("ru='При формировании движений диагностированы ошибки';uk='При формуванні рухів діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола, ДанныеДвижения.Регистратор);

					КонецЕсли;

					ОписаниеРегистра.Таблица.Удалить(ДанныеДвижения);

				КонецЦикла;

			КонецЦикла;

			Если ОписаниеРегистра.Таблица.Количество() > 0 Тогда

			// Добавим информацию в протокол 
				РасчетСебестоимостиПротоколРасчета.КэшированиеСформированныхДвижений(ПараметрыРасчета, КлючИЗначение.Ключ, ОписаниеРегистра.Таблица.Количество());

				ИмяТаблицыПорции = ИмяТаблицыСледующейПорцииДанных("ВТКэш"
					+ КлючИЗначение.Ключ, ОписаниеРегистра);

				ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ПараметрыРасчета, ИмяТаблицыПорции, ОписаниеРегистра.Таблица, ОписаниеРегистра.ПоляКэшаРегистра);

				// Очистим накопленные в таблице значений записи - они перемещены во временную таблицу.
				ОписаниеРегистра.Таблица.Очистить();

				// Были изменения в ВТКэш, еще не учтенные в ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты.
				ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;

			КонецЕсли;

		КонецЕсли;

		Если ОкончаниеЭтапа Тогда

			ОбъединитьВременныеТаблицы(ПараметрыРасчета, ОписаниеРегистра.ИменаТаблицПорций, "ВТКэш"
				+ КлючИЗначение.Ключ, ОписаниеРегистра.ПоляКэшаРегистра, ОписаниеРегистра.ПоляОтбораНепустыхДвижений, , Истина);

			ОписаниеРегистра.КоличествоПорцийДанных = 0;
			ОписаниеРегистра.ИменаТаблицПорций = "";

		КонецЕсли;

		Если ОкончаниеЭтапа И ОписаниеРегистра.НадоОбновитьРасчетныйКэш Тогда

		// "Внутри" этапа расчета может выполняться многократное "порционное" кэширование сформированных записей,
			// но актуальные ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты нужны не "внутри" этапа,
			// а к его завершению (к началу следующего этапа).

			// Переформируем таблицу записей регистра
			Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(КлючИЗначение.Ключ) // нужна таблица записей 
				И ПараметрыРасчета.РегистрыСРасчетнымиОборотами[КлючИЗначение.Ключ] Тогда // нужно автообновление таблицы записей
				ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;

			// Пересчитаем остатки регистра на конец периода
			Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(КлючИЗначение.Ключ) // нужны расчетные остатки
				И ПараметрыРасчета.РегистрыСРасчетнымиОстатками[КлючИЗначение.Ключ] Тогда // нужно автообновление остатков
				ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;

			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь; // учли все движения в кэше остатков/оборотов
		КонецЕсли;

	КонецЦикла;

	Для Каждого КлючИЗначение Из ПараметрыРасчета.ВспомогательныеВременныеТаблицы Цикл

		Если ТаблицаПриемник <> Неопределено
				И НРег(КлючИЗначение.Ключ) <> НРег(ТаблицаПриемник) Тогда
			Продолжить; // если явно задано имя регистра, то надо обработать только его
		КонецЕсли;

		ОписаниеТаблицы = КлючИЗначение.Значение;

		Если ОписаниеТаблицы.Таблица.Количество() > 0 Тогда

		// Переместим сформированные движения из ОписаниеТаблицы.Таблица в нужную временную таблицу.
			Если ОписаниеТаблицы.ЕстьСвойствоВидДвижения Тогда

				Для Каждого Запись Из ОписаниеТаблицы.Таблица Цикл

				// Дозаполним поле СлужебноеВидДвиженияПриход
					Если ОписаниеТаблицы.ЕстьСвойствоВидДвижения Тогда
						Запись.СлужебноеВидДвиженияПриход = (Запись.ВидДвижения = ВидДвиженияНакопления.Приход);
					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

			// Добавим информацию в протокол 
			РасчетСебестоимостиПротоколРасчета.КэшированиеСформированныхЗаписейВТ(ПараметрыРасчета, КлючИЗначение.Ключ, ОписаниеТаблицы.Таблица.Количество());

			ИмяТаблицыПорции = ИмяТаблицыСледующейПорцииДанных(КлючИЗначение.Ключ, ОписаниеТаблицы);

			ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ПараметрыРасчета, ИмяТаблицыПорции, ОписаниеТаблицы.Таблица, ОписаниеТаблицы.ПоляТаблицы);

			// Очистим накопленные в таблице значений записи - они перемещены во временную таблицу.
			ОписаниеТаблицы.Таблица.Очистить();

			Если ОкончаниеЭтапа Тогда

				ОбъединитьВременныеТаблицы(ПараметрыРасчета, ОписаниеТаблицы.ИменаТаблицПорций, КлючИЗначение.Ключ, ОписаниеТаблицы.ПоляТаблицы, ОписаниеТаблицы.СуммируемыеПоля, , Истина);

				ОписаниеТаблицы.КоличествоПорцийДанных = 0;
				ОписаниеТаблицы.ИменаТаблицПорций = "";

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Переносит новые движения регистра из временных таблиц в кэш (временную таблицу).
// Процедуру необходимо вызывать в конце каждого этапа, на котором формируются какие-то движения,
// если эти движения были сохранены во временной таблице.
// Иначе следующий этап может не учесть движения предыдущего.
//
Процедура КэшироватьСформированныеДвиженияИзВременныхТаблиц(ПараметрыРасчета,
		СоответствиеВременныхТаблицДвижений) Экспорт

	СоответствиеРегистров = Новый Соответствие;

	Для Каждого КлючИЗначениеВт Из СоответствиеВременныхТаблицДвижений Цикл

		ОписаниеРегистра = ПараметрыРасчета.Движения[КлючИЗначениеВт.Значение];
		КоличествоСтрокТаблицы = РазмерВременнойТаблицы(ПараметрыРасчета, КлючИЗначениеВт.Ключ);

		Если КоличествоСтрокТаблицы > 0 Тогда

			ЭтоРегистрСебестоимости = (ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
			ЭтоРегистрВыручки = (ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя);

			// проверка пустого регистратора производится здесь
			Если ОписаниеРегистра.ЭтоОписаниеРегистра Тогда

				ТаблицаПриемник = ОписаниеРегистра.ИмяРегистра;

				Запрос = Новый Запрос;
				ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

				Запрос.Текст = "ВЫБРАТЬ";

				Если ОписаниеРегистра.ЕстьОрганизация Тогда
					Запрос.Текст = Запрос.Текст + "
						|	Организация КАК Организация,";
				ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
					Запрос.Текст = Запрос.Текст + "
						|	ОрганизацияПоАналитикеПартнеров КАК ОрганизацияПоАналитикеПартнеров,";
				КонецЕсли;

				Запрос.Текст = Запрос.Текст + "
					|	Регистратор КАК Регистратор,
					|	Регистратор КАК ДокументДвижения
					|ИЗ
					|	" + КлючИЗначениеВт.Ключ + "
					|ГДЕ
					|	Регистратор ЕСТЬ NULL
					|	ИЛИ Регистратор = Неопределено
					|	ИЛИ (НЕ ТИПЗНАЧЕНИЯ(Регистратор) В("
					+ ДоступныеТипыРегистратора(ТаблицаПриемник) + "))
					|";

				ДанныеДвижения = Запрос.Выполнить().Выбрать();
				Пока ДанныеДвижения.Следующий() Цикл

					Если НЕ ЗначениеЗаполнено(ДанныеДвижения.Регистратор) Тогда
					// Ошибка в запросах - не заполнено обязательное поле ДокументДвижения.
						ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не заполнено свойство ДокументДвижения для движения по регистру ""%1""';uk='Не заповнена властивість ДокументДвижения для руху по регістру ""%1""'",ОбщегоНазначения.КодОсновногоЯзыка()), ТаблицаПриемник);
					Иначе
					// Ошибка в метаданных - документ не является регистратором для данного регистра.
						ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ ""%1"" не может иметь движений по регистру ""%2""';uk='Документ ""%1"" не може мати рухів по регістру ""%2""'",ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(ДанныеДвижения.Регистратор), ТаблицаПриемник);
					КонецЕсли;

					РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам, ТекстДляПротокола);

					Если ОписаниеРегистра.ЕстьОрганизация Тогда
						ОрганизацияСПроблемой = ДанныеДвижения.Организация;
					ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
						ОрганизацияСПроблемой = ПараметрыРасчета.ОрганизацияПоАналитикеПартнеров.Получить(ДанныеДвижения.АналитикаУчетаПоПартнерам);
					Иначе
						ОрганизацияСПроблемой = Неопределено;
					КонецЕсли;

					ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, ОрганизацияСПроблемой, НСтр("ru='При формировании движений диагностированы ошибки';uk='При формуванні рухів діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола, ДанныеДвижения.ДокументДвижения);

				КонецЦикла;

			КонецЕсли;

			// Проверим заполненность обязательных полей.
			НекорректныеРегистраторы = Новый Соответствие;

			Запрос = Новый Запрос;
			ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

			Запрос.Текст = "ВЫБРАТЬ";

			Если ОписаниеРегистра.ЕстьОрганизация Тогда
				Запрос.Текст = Запрос.Текст + "
					|	Т.Организация КАК Организация,";
			ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
				Запрос.Текст = Запрос.Текст + "
					|	Т.ОрганизацияПоАналитикеПартнеров КАК ОрганизацияПоАналитикеПартнеров,";
			КонецЕсли;

			Запрос.Текст = Запрос.Текст + "
				|	Т.Регистратор КАК Регистратор,
				|	Т.Регистратор КАК ДокументДвижения
				|ИЗ
				|	" + КлючИЗначениеВт.Ключ + " КАК Т
				|ГДЕ
				|	НЕ Регистратор ЕСТЬ NULL
				|	И Регистратор <> Неопределено
				|	И (ТИПЗНАЧЕНИЯ(Регистратор) В("
				+ ДоступныеТипыРегистратора(ТаблицаПриемник) + "))
				|	И (" + ОписаниеРегистра.ТекстПроверкиОбязательныхПолей + ")";

			РезультатПроверки = Запрос.Выполнить();
			Выборка = РезультатПроверки.Выбрать();
			Пока Выборка.Следующий() Цикл

				НекорректныеРегистраторы.Вставить(Выборка.Регистратор, Истина);

				Если ОписаниеРегистра.ЕстьОрганизация Тогда
					ОрганизацияСПроблемой = Выборка.Организация;
				ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
					ОрганизацияСПроблемой = ПараметрыРасчета.ОрганизацияПоАналитикеПартнеров.Получить(Выборка.АналитикаУчетаПоПартнерам);
				Иначе
					ОрганизацияСПроблемой = Неопределено;
				КонецЕсли;

				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По документу ""%1"" сформированы движения  по регистру ""%2"" с незаполненными обязательными полями';uk='По документу ""%1"" сформовані руху по регістру ""%2"" з незаповненими обов''язковими полями'",ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(Выборка.Регистратор), ОписаниеРегистра.ИмяРегистра);

				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам, ТекстДляПротокола);

				ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, ОрганизацияСПроблемой, НСтр("ru='При формировании движений диагностированы ошибки';uk='При формуванні рухів діагностовано помилки'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстДляПротокола, Выборка.Регистратор);

			КонецЦикла;

			Если НЕ РезультатПроверки.Пустой() Тогда

				Запрос.Текст = "ВЫБРАТЬ
					|	*
					|
					|ПОМЕСТИТЬ
					|	ВтБуфер
					|ИЗ
					|	" + КлючИЗначениеВт.Ключ + " КАК Т
					|ГДЕ
					|	ИСТИНА
					|	И НЕ (" + ОписаниеРегистра.ТекстПроверкиОбязательныхПолей + ")";

				Запрос.Текст = Запрос.Текст + "
					|;
					|
					|/////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ " + КлючИЗначениеВт.Ключ + "
					|;
					|
					|/////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	*
					|ПОМЕСТИТЬ " + КлючИЗначениеВт.Ключ + "
					|
					|ИЗ
					|	ВтБуфер
					|;
					|
					|/////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ВтБуфер
					|";

				Запрос.Выполнить();

				КоличествоСтрокТаблицы = РазмерВременнойТаблицы(ПараметрыРасчета, КлючИЗначениеВт.Ключ);

			КонецЕсли;

			Если КоличествоСтрокТаблицы > 0 Тогда

			// Были изменения в ВТКэш, еще не учтенные в ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты.
				ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;

				Если СоответствиеРегистров[ОписаниеРегистра.ИмяРегистра] = Неопределено Тогда
					СоответствиеРегистров.Вставить(ОписаниеРегистра.ИмяРегистра, КлючИЗначениеВт.Ключ);
				Иначе
					СоответствиеРегистров[ОписаниеРегистра.ИмяРегистра] = СоответствиеРегистров[ОписаниеРегистра.ИмяРегистра]
						+ "," + КлючИЗначениеВт.Ключ;
				КонецЕсли;

				ОписаниеРегистра.КоличествоПорцийДанных = ОписаниеРегистра.КоличествоПорцийДанных
					+ 1;
				ОписаниеРегистра.ИменаТаблицПорций = СоответствиеРегистров[ОписаниеРегистра.ИмяРегистра];

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Для Каждого КлючИЗначение Из СоответствиеРегистров Цикл

		ОписаниеРегистра = ПараметрыРасчета.Движения[КлючИЗначение.Ключ];

		// Добавим информацию в протокол 
		МассивТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеРегистра.ИменаТаблицПорций, ",");
		РазмерТаблиц = 0;

		Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
			РазмерТаблиц = РазмерТаблиц
				+ РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицы);
		КонецЦикла;

		РасчетСебестоимостиПротоколРасчета.КэшированиеСформированныхДвижений(ПараметрыРасчета, КлючИЗначение.Ключ, РазмерТаблиц);

		ОбъединитьВременныеТаблицы(ПараметрыРасчета, ОписаниеРегистра.ИменаТаблицПорций, "ВТКэш"
			+ КлючИЗначение.Ключ, ОписаниеРегистра.ПоляКэшаРегистра, ОписаниеРегистра.ПоляОтбораНепустыхДвижений, , Истина);

		Если ОписаниеРегистра.НадоОбновитьРасчетныйКэш Тогда

		// "Внутри" этапа расчета может выполняться многократное "порционное" кэширование сформированных записей,
			// но актуальные ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты нужны не "внутри" этапа,
			// а к его завершению (к началу следующего этапа).

			// Переформируем таблицу записей регистра
			Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(КлючИЗначение.Ключ) // нужна таблица записей 
				И ПараметрыРасчета.РегистрыСРасчетнымиОборотами[КлючИЗначение.Ключ] Тогда // нужно автообновление таблицы записей
				ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;

			// Пересчитаем остатки регистра на конец периода
			Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(КлючИЗначение.Ключ) // нужны расчетные остатки
				И ПараметрыРасчета.РегистрыСРасчетнымиОстатками[КлючИЗначение.Ключ] Тогда // нужно автообновление остатков
				ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;

			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь; // учли все движения в кэше остатков/оборотов
		КонецЕсли;

		ОписаниеРегистра.КоличествоПорцийДанных = 0;
		ОписаниеРегистра.ИменаТаблицПорций = "";
		ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь;

	КонецЦикла;

КонецПроцедуры

// Для регистров, к основным таблицам которых есть обращения в запросах, создадим следующие временные таблицы:
// - ВТКэшРасчетныеОбороты<ИмяРегистра> - в ней будет расчетные обороты регистра
// Т.о. на любом этапе расчета будет готовая таблица записей регистра за период,
// которую надо использовать вместо основной таблицы РегистрНакопления.<ИмяРегистра>
// и вместо виртуальной таблицы РегистрНакопления.<ИмяРегистра>.Обороты(<период расчета>).
Процедура ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра,
		Инициализация = Ложь) Экспорт

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшРасчетныеОбороты"
		+ ОписаниеРегистра.ИмяРегистра, НСтр("ru='Вспомогательная';uk='Допоміжна'",ОбщегоНазначения.КодОсновногоЯзыка()));

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	// Если не нужно использовать временную таблицу ВТКэш, то все данные будут взяты из ИБ.
	// В противном случае из ИБ будут взяты только первичные движения и просуммированы с расчетными движениями из ВТКэш.
	Запрос.УстановитьПараметр("ИспользоватьКэш", ОписаниеРегистра.ИспользоватьВТКэш
		И НЕ ПараметрыРасчета.Отладка.РасчетОдногоЭтапа);

	Если НЕ Инициализация Тогда
		Запрос.Текст = "УНИЧТОЖИТЬ ВТКэшРасчетныеОбороты%ИмяРегистра
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	%ПоляОсновнойТаблицыРегистра
		|ПОМЕСТИТЬ ВТКэшРасчетныеОбороты%ИмяРегистра
		|ИЗ
		|	%ПолноеИмяРегистра КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.Активность
		|	%ОтборПоОрганизации
		|	И (%ОтборСлужебныеЗаписиКонвертацииДанных
		|	   %ОтборПоСлужебнымРеквизитам
		|		  ИЛИ НЕ &ИспользоватьКэш)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	%ПоляКэшаРегистра
		|ИЗ
		|	ВТКэш%ИмяРегистра КАК Т
		|ГДЕ
		|	&ИспользоватьКэш
		|	%ОтборПоОрганизации
		|";

	ПоляКэшаРегистра = СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "Т.");
	ПоляОсновнойТаблицыРегистра = СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "Т.");

	// Для расчета себестоимости по средней (без учета партий) очистим партионные поля расчетного кэша.
	Если НадоОчиститьПоляПартийРасчетногоКэша(ПараметрыРасчета, ОписаниеРегистра) Тогда

		ЗаменяемыеФрагменты = Новый Структура;
		ЗаменяемыеФрагменты.Вставить("Партия", "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("АналитикаУчетаПартий", "ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)");
		ЗаменяемыеФрагменты.Вставить("АналитикаФинансовогоУчета", "НЕОПРЕДЕЛЕНО");
        ЗаменяемыеФрагменты.Вставить("НалоговоеНазначение", "ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)");

		ПоляКэшаРегистра = ПоляКэшаРегистра + ",";
		ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра + ",";

		Для Каждого КлючИЗначение Из ЗаменяемыеФрагменты Цикл

			ПоляКэшаРегистра = СтрЗаменить(ПоляКэшаРегистра, "Т." + КлючИЗначение.Ключ
				+ ",", "ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение
				+ " ИНАЧЕ Т." + КлючИЗначение.Ключ + " КОНЕЦ КАК " + КлючИЗначение.Ключ
				+ ",");

			ПоляКэшаРегистра = СтрЗаменить(ПоляКэшаРегистра, "Т.Кор"
				+ КлючИЗначение.Ключ + ",", "ВЫБОР КОГДА &РегламентноеЗадание ТОГДА "
				+ КлючИЗначение.Значение + " ИНАЧЕ Т.Кор" + КлючИЗначение.Ключ
				+ " КОНЕЦ КАК Кор" + КлючИЗначение.Ключ + ",");

			ПоляОсновнойТаблицыРегистра = СтрЗаменить(ПоляОсновнойТаблицыРегистра, "Т."
				+ КлючИЗначение.Ключ + ",", "ВЫБОР КОГДА &РегламентноеЗадание ТОГДА "
				+ КлючИЗначение.Значение + " ИНАЧЕ Т." + КлючИЗначение.Ключ
				+ " КОНЕЦ КАК " + КлючИЗначение.Ключ + ",");

			ПоляОсновнойТаблицыРегистра = СтрЗаменить(ПоляОсновнойТаблицыРегистра, "Т.Кор"
				+ КлючИЗначение.Ключ + ",", "ВЫБОР КОГДА &РегламентноеЗадание ТОГДА "
				+ КлючИЗначение.Значение + " ИНАЧЕ Т.Кор" + КлючИЗначение.Ключ
				+ " КОНЕЦ КАК Кор" + КлючИЗначение.Ключ + ",");

		КонецЦикла;

		ПоляКэшаРегистра = Лев(ПоляКэшаРегистра, СтрДлина(ПоляКэшаРегистра) - 1);
		ПоляОсновнойТаблицыРегистра = Лев(ПоляОсновнойТаблицыРегистра, СтрДлина(ПоляОсновнойТаблицыРегистра)
			- 1);

	КонецЕсли;

	ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ПоляОсновнойТаблицыРегистра, "ВидДвижения");

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ПоляОсновнойТаблицыРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра", ПоляКэшаРегистра);

	// Установим отбор по типам записей конвертации данных.
	РегистрыСЗаписямиКонвертацииДанных = Новый Структура;
	РегистрыСЗаписямиКонвертацииДанных.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
	РасчетСебестоимостиЛокализация.ДополнитьРегистрыСЗаписямиКонвертацииДанных(РегистрыСЗаписямиКонвертацииДанных);
	Если РегистрыСЗаписямиКонвертацииДанных.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборСлужебныеЗаписиКонвертацииДанных", "(НЕ Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборСлужебныеЗаписиКонвертацииДанных", "ИСТИНА");
	КонецЕсли;

	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя Тогда
		Если ПараметрыРасчета.ЗапущенРасчетПартий
				И (ПараметрыРасчета.ЗаполняютсяПартииВВыручке
				ИЛИ ПараметрыРасчета.ЗаполненыПартииВВыручке) Тогда
				// Данные из ИБ не выбираются - они все находятся в кэше
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоСлужебнымРеквизитам", "И ЛОЖЬ");
		КонецЕсли;
		// Отбор - первичные движения
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь);
	ИначеЕсли ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости
			ИЛИ ПараметрыРасчета.ЗаполненыПартииВСебестоимости
			ИЛИ ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя Тогда
			// Отбор - первичные движения (с непересчитываемыми типами записи)
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
	Иначе
	// Отбор - первичные движения (все, в т.ч. с пересчитываемыми типами записи)
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь);
	КонецЕсли;

	Запрос.Выполнить();

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);

КонецПроцедуры

// Для регистров, к остаткам которых на конец периода есть обращения в запросах, создадим следующие временные таблицы:
// - ВТКэшРасчетныеОстатки<ИмяРегистра> - в ней будет расчетная сумма конечных остатков регистра
// Т.о. на любом этапе расчета будет готовая таблица расчетных остатков,
// которую надо использовать вместо виртуальной таблицы РегистрНакопления.<ИмяРегистра>.Остатки(<конец периода>).
Процедура ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра,
		Инициализация = Ложь) Экспорт

	Если НЕ ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
	// На постоянной основе ВТКэшРасчетныеОбороты не нужна, но для расчета остатков надо ее сформировать, а потом уничтожить.
		ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	КонецЕсли;

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшРасчетныеОстатки"
		+ ОписаниеРегистра.ИмяРегистра, НСтр("ru='Вспомогательная';uk='Допоміжна'",ОбщегоНазначения.КодОсновногоЯзыка()));

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	// Сформируем шаблон текста запроса.
	Если НЕ Инициализация Тогда
		Запрос.Текст = "УНИЧТОЖИТЬ ВТКэшРасчетныеОстатки%ИмяРегистра
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	%ИзмеренияРегистра,
		|	%РесурсыРегистраСумма
		|ПОМЕСТИТЬ ВТКэшРасчетныеОстатки%ИмяРегистра
		|ИЗ
		|	(ВЫБРАТЬ
		|		%ИзмеренияРегистраПодзапрос,
		|		%РесурсыРегистраОстатки
		|	ИЗ
		|		%ПолноеИмяРегистра.Остатки(&ГраницаНачалоПериода, %ОтборПоОрганизацииОстатки) КАК Т
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		%ИзмеренияРегистраПодзапрос,
		|		%РесурсыРегистраОбороты
		|	ИЗ
		|		ВТКэшРасчетныеОбороты%ИмяРегистра КАК Т
		|	) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	%ИзмеренияРегистра
		|
		|ИМЕЮЩИЕ
		|	%ОтборНепустыхРесурсов
		|";

	Если НЕ ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		Запрос.Текст = Запрос.Текст + "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|УНИЧТОЖИТЬ ВТКэшРасчетныеОбороты%ИмяРегистра
			|";
	КонецЕсли;

	// Сформируем текст для подстановки в шаблон.
	ИзмеренияРегистра = СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "Т.");
	ИзмеренияРегистраПодзапрос = ИзмеренияРегистра;

	РесурсыРегистраСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРегистра.РесурсыРегистраССуффиксом, "СУММА(Т.", ")");
	РесурсыРегистраОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРегистра.РесурсыРегистраССуффиксом, "Т.", "Остаток");
	РесурсыРегистраОбороты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРегистра.РесурсыРегистраССуффиксом, "ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Т.", "");

	// Сформируем отбор по непустым ресурсам регистра.
	ТекстОтборНепустыхРесурсов = "";
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ОписаниеРегистра.РесурсыРегистра, "%1", "Т."), ",", Истина, Истина);

	Для Каждого ТекущееПоле Из МассивРесурсов Цикл

		ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов
			+ ?(ТекстОтборНепустыхРесурсов = "", "", "
			|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";

	КонецЦикла;

	// Для расчета себестоимости по средней (без учета партий) очистим партионные поля расчетного кэша.
	Если НадоОчиститьПоляПартийРасчетногоКэша(ПараметрыРасчета, ОписаниеРегистра) Тогда

		ЗаменяемыеФрагменты = Новый Структура;
		ЗаменяемыеФрагменты.Вставить("Партия", "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("АналитикаУчетаПартий", "ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)");
		ЗаменяемыеФрагменты.Вставить("АналитикаФинансовогоУчета", "НЕОПРЕДЕЛЕНО");
        ЗаменяемыеФрагменты.Вставить("НалоговоеНазначение", "ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)");

		ИзмеренияРегистраПодзапрос = ИзмеренияРегистраПодзапрос + ",";

		Для Каждого КлючИЗначение Из ЗаменяемыеФрагменты Цикл

			ИзмеренияРегистраПодзапрос = СтрЗаменить(ИзмеренияРегистраПодзапрос, "Т."
				+ КлючИЗначение.Ключ + ",", "ВЫБОР КОГДА &РегламентноеЗадание ТОГДА "
				+ КлючИЗначение.Значение + " ИНАЧЕ Т." + КлючИЗначение.Ключ
				+ " КОНЕЦ КАК " + КлючИЗначение.Ключ + ",");

		КонецЦикла;

		ИзмеренияРегистраПодзапрос = Лев(ИзмеренияРегистраПодзапрос, СтрДлина(ИзмеренияРегистраПодзапрос)
			- 1);

	КонецЕсли;

	// Сформируем отбор по организации.
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ОтборПоОрганизацииОстатки = "Организация В (&МассивОрганизаций)";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
		ОтборПоОрганизацииОстатки = "АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
	Иначе
		ОтборПоОрганизацииОстатки = "";
	КонецЕсли;

	// Подставим тексты в шаблон запроса.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИзмеренияРегистраПодзапрос", ИзмеренияРегистраПодзапрос);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИзмеренияРегистра", ИзмеренияРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраСумма", РесурсыРегистраСумма);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраОстатки", РесурсыРегистраОстатки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраОбороты", РесурсыРегистраОбороты);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизацииОстатки", ОтборПоОрганизацииОстатки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНепустыхРесурсов", ТекстОтборНепустыхРесурсов);

	ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос);

	// Сформируем таблицу кэша остатков.
	Запрос.Выполнить();

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);

КонецПроцедуры

// Выполняет (по необходимости) обновление расчетных оборотов и остатков по всем регистрам.
//
Процедура ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета,
		ТолькоТребующиеОбновления = Ложь) Экспорт

	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл

		ОписаниеРегистра = КлючИЗначение.Значение;

		Если НЕ ОписаниеРегистра.НадоОбновитьРасчетныйКэш
				И ТолькоТребующиеОбновления Тогда
			Продолжить;
		КонецЕсли;

		ОбновитьРасчетныеКэшиРегистра(ПараметрыРасчета, ОписаниеРегистра.ИмяРегистра);

	КонецЦикла;

КонецПроцедуры

// Выполняет (безусловно) обновление расчетных оборотов и остатков указанного регистра.
//
Процедура ОбновитьРасчетныеКэшиРегистра(ПараметрыРасчета, ИмяРегистра) Экспорт

	ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистра];

	Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра);
	КонецЕсли;

	Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
	КонецЕсли;

	ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь;

КонецПроцедуры

// Определяет необходимость формирования расчетных кэшей с пустыми полями партий (для расчета себестоимости по средней).
//
Функция НадоОчиститьПоляПартийРасчетногоКэша(ПараметрыРасчета, ОписаниеРегистра)

	Возврат ПараметрыРасчета.ПартионныйУчетВерсии22
		И НЕ ПараметрыРасчета.ИдетРасчетПартий
		И ПараметрыРасчета.РегламентноеЗадание
		И (ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя
		ИЛИ ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя);

КонецФункции

#КонецОбласти

#Область ТекущиеИтогиРегистров

Функция СостояниеИтоговРегистров() Экспорт

	СостояниеИтоговРегистров = Новый Структура;

	ИсходящиеДанные = Новый Соответствие;
	РасчетСебестоимости.ИсходящиеДанныеМеханизма(ИсходящиеДанные);
	РасчетСебестоимостиКорректировкаСтоимости.ИсходящиеДанныеМеханизма(ИсходящиеДанные);

	Для Каждого КлючИЗначение Из ИсходящиеДанные Цикл

		МетаданныеРегистра = КлючИЗначение.Ключ;

		Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра)
				И МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда

			МенеджерРегистра = РегистрыНакопления[МетаданныеРегистра.Имя]; // РегистрНакопленияМенеджер
			СостояниеРегистра = Новый Структура;

			СостояниеРегистра.Вставить("Использование", МенеджерРегистра.ПолучитьИспользованиеТекущихИтогов());
			СостояниеРегистра.Вставить("МинимальныйПериод", МенеджерРегистра.ПолучитьМинимальныйПериодРассчитанныхИтогов());
			СостояниеРегистра.Вставить("МаксимальныйПериод", МенеджерРегистра.ПолучитьМаксимальныйПериодРассчитанныхИтогов());

			СостояниеИтоговРегистров.Вставить(МетаданныеРегистра.Имя, СостояниеРегистра);

		КонецЕсли;

	КонецЦикла;

	Возврат СостояниеИтоговРегистров;

КонецФункции

Процедура ВернутьСостояниеИтоговРегистров(СостояниеИтоговДоРасчета) Экспорт

	ПараметрыОбработчикаЗадания = Новый Массив;
	ПараметрыОбработчикаЗадания.Добавить(СостояниеИтоговДоРасчета);

	ФоновыеЗадания.Выполнить("РасчетСебестоимостиПрикладныеАлгоритмы.ВернутьСостояниеИтоговРегистровФоновымЗаданием", ПараметрыОбработчикаЗадания, , НСтр("ru='Расчет партий и себестоимости, включение итогов.';uk='Розрахунок партій і собівартості, включення підсумків.'",ОбщегоНазначения.КодОсновногоЯзыка()));

КонецПроцедуры

Процедура ВернутьСостояниеИтоговРегистровФоновымЗаданием(СостояниеИтоговДоРасчета) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого КлючИЗначение Из СостояниеИтоговДоРасчета Цикл

		МенеджерРегистра = РегистрыНакопления[КлючИЗначение.Ключ]; // РегистрНакопленияМенеджер
		СостояниеРегистра = КлючИЗначение.Значение;

		МинимальныйПериод = МенеджерРегистра.ПолучитьМинимальныйПериодРассчитанныхИтогов();
		МаксимальныйПериод = МенеджерРегистра.ПолучитьМаксимальныйПериодРассчитанныхИтогов();

		Если СостояниеРегистра.МинимальныйПериод <> МинимальныйПериод
				ИЛИ СостояниеРегистра.МаксимальныйПериод <> МаксимальныйПериод Тогда

			МенеджерРегистра.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов(СостояниеРегистра.МинимальныйПериод, СостояниеРегистра.МаксимальныйПериод);

		КонецЕсли;

		Если СостояниеРегистра.Использование
				И НЕ МенеджерРегистра.ПолучитьИспользованиеТекущихИтогов() Тогда

			МенеджерРегистра.УстановитьИспользованиеТекущихИтогов(Истина);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Выключает итоги регистра накопления.
// 
// Параметры:
// 	ПараметрыРасчета - Структура -
// 	МенеджерРегистра - РегистрНакопленияМенеджер.СебестоимостьТоваров - или любой другой обслуживаемый регистр
// 
Процедура ВыключитьИтогиРегистра(ПараметрыРасчета, МенеджерРегистра)

	ПериодРасчета = ПараметрыРасчета.РасчетныйПериод.НачалоПериода;
	МинимальныйПериод = МенеджерРегистра.ПолучитьМинимальныйПериодРассчитанныхИтогов();
	МаксимальныйПериод = МенеджерРегистра.ПолучитьМаксимальныйПериодРассчитанныхИтогов();

	Если МенеджерРегистра.ПолучитьИспользованиеТекущихИтогов() Тогда
		МенеджерРегистра.УстановитьИспользованиеТекущихИтогов(Ложь); // отключим итоги
	КонецЕсли;

	Если ПериодРасчета <= НачалоМесяца(МаксимальныйПериод) Тогда

		МенеджерРегистра.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов(Мин(МинимальныйПериод, НачалоМесяца(ПериодРасчета
			- 1)), ПериодРасчета - 1);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Запросы

// Процедура выполняет пакет запросов по частям.
// При этом замеряется время выполнения и размер результирующей временной таблицы каждого запроса,
// формируются записи в протокол расчета себестоимости.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	Запрос - Запрос - выполняемый запрос
//	УвеличиватьСчетчикЗамераПроизводительности - Булево - признак необходимости увеличения количества обработанных данных для механизма ОценкаПроизводительности
//	ИменаВременныхТаблицДляЗамера - Строка - имена таблиц, размер которых будет добавлен к количеству обработанных данных;
//		если в пакете запросов есть запрос выборки данных, то размер выборки будет добавлен к количеству обработанных данных безусловно
//	ВозвращатьРезультатыЗапросов - Булево - определяет результат, возвращаемый данной функцией:
//		Истина - будут возвращены результаты выполнения подзапросов
//		Ложь   - будут возвращены выборки данных подзапросов
//	
//	Возвращаемое значение:
//		Массив или РезультатЗапроса или ВыборкаИзРезультатаЗапроса
//			- если в пакете запроса есть только один запрос выборки данных,
//				то будет возвращен РезультатЗапроса или ВыборкаИзРезультатаЗапроса, в зависимости от параметра ВозвращатьРезультатыЗапросов
//			- в противном случае будет возвращен массив из элементов [РезультатЗапроса или ВыборкаИзРезультатаЗапроса] для каждого запроса
//
Функция ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,
		УвеличиватьСчетчикЗамераПроизводительности = Ложь,
		ИменаВременныхТаблицДляЗамера = "", ВозвращатьРезультатыЗапросов = Ложь,
		Пояснение = "") Экспорт

	Результат = Новый Массив;

	ЭтоЗапросВыборкиДанных = Ложь;
	КоличествоВыборок = 0;

	СтруктураТаблицДляЗамера = Новый Структура(ИменаВременныхТаблицДляЗамера);

	СхемаЗапроса = Новый СхемаЗапроса;

	Попытка
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаРазобрана = Истина;
	Исключение

		СхемаРазобрана = Ложь;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось инициализировать схему запроса:
|%1'
|;uk='Не вдалося ініціалізувати схему запиту: 
|%1'",ОбщегоНазначения.КодОсновногоЯзыка()), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, ТекстОшибки);

	КонецПопытки;

	Если НЕ СхемаРазобрана Тогда

		Если СтруктураТаблицДляЗамера.Количество() = 1 Тогда
			ИмяТаблицы = ИменаВременныхТаблицДляЗамера;
		Иначе
			ИмяТаблицы = "ИмяТаблицыНеОпределено";
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Пояснение) И ИмяТаблицы = "Данные" Тогда
			ПояснениеКТаблице = НСтр("ru='Формирование';uk='Формування'",ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			ПояснениеКТаблице = Пояснение;
		КонецЕсли;

		РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, ИмяТаблицы, ПояснениеКТаблице);

		Если ВозвращатьРезультатыЗапросов Тогда
			Результат = Запрос.ВыполнитьПакет();
			КоличествоДанных = Неопределено;
		Иначе
			Результат = Запрос.Выполнить().Выбрать();
			КоличествоДанных = Результат.Количество();
		КонецЕсли;

		РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, , КоличествоДанных);

		Возврат Результат;

	КонецЕсли;

	НомерПодзапроса = -1;

	ИсходныйТекстЗапроса = Запрос.Текст;

	Для Каждого ЗапросВыбора Из СхемаЗапроса.ПакетЗапросов Цикл

		НомерПодзапроса = НомерПодзапроса + 1;

		Если ТипЗнч(ЗапросВыбора) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда

			Запрос.Текст = "УНИЧТОЖИТЬ" + " " + ЗапросВыбора.ИмяТаблицы;

			Результат.Добавить(Запрос.Выполнить());

			Продолжить;

		КонецЕсли;

		ИмяТаблицы = ЗапросВыбора.ТаблицаДляПомещения;
		ЭтоЗапросВыборкиДанных = НЕ ЗначениеЗаполнено(ИмяТаблицы);

		Если ЭтоЗапросВыборкиДанных Тогда
			КоличествоВыборок = КоличествоВыборок + 1;
		КонецЕсли;

		ИмяПодзапроса = НСтр("ru='Выборка';uk='Вибірка'",ОбщегоНазначения.КодОсновногоЯзыка())
			+ ?(КоличествоВыборок = 1, "", "_" + СокрЛП(КоличествоВыборок));

		ДатаНачала = ТекущаяДатаСеанса();

		Запрос.Текст = ЗапросВыбора.ПолучитьТекстЗапроса();

		// Выполним очередной подзапрос.
		Если НЕ ЭтоЗапросВыборкиДанных Тогда
			УничтожитьВременныеТаблицы(Запрос, ИмяТаблицы);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Пояснение) И ИмяТаблицы = "Данные" Тогда
			ПояснениеКТаблице = НСтр("ru='Формирование';uk='Формування'",ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			ПояснениеКТаблице = Пояснение;
		КонецЕсли;

		РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, ?(ЭтоЗапросВыборкиДанных, ИмяПодзапроса, ИмяТаблицы), ПояснениеКТаблице);

		РезультатПодзапроса = Запрос.Выполнить();

		Если ЭтоЗапросВыборкиДанных И НЕ ВозвращатьРезультатыЗапросов Тогда
			Выборка = РезультатПодзапроса.Выбрать();
			КоличествоДанных = Выборка.Количество();
		Иначе
			КоличествоДанных = Неопределено;
		КонецЕсли;

		РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, , КоличествоДанных);

		Если ЭтоЗапросВыборкиДанных Тогда

			Если ВозвращатьРезультатыЗапросов Тогда
				Результат.Добавить(РезультатПодзапроса); // результат запроса
			Иначе
				Результат.Добавить(Выборка); // выборка
			КонецЕсли;

			Если УвеличиватьСчетчикЗамераПроизводительности Тогда

				Если ВозвращатьРезультатыЗапросов Тогда
					КоличествоДанных = РезультатПодзапроса.Выбрать().Количество();
				Иначе
					КоличествоДанных = Выборка.Количество();
				КонецЕсли;

				РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, КоличествоДанных);

			КонецЕсли;

		Иначе

			Результат.Добавить(РезультатПодзапроса); // результат запроса
			Если УвеличиватьСчетчикЗамераПроизводительности
					И СтруктураТаблицДляЗамера.Свойство(ИмяТаблицы) Тогда

				РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыРасчета, РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицы));

			КонецЕсли;

		КонецЕсли;

		ДатаОкончания = ТекущаяДатаСеанса();

	КонецЦикла;

	Запрос.Текст = ИсходныйТекстЗапроса;

	Если КоличествоВыборок = 1 Тогда
		Возврат Результат[Результат.Количество() - 1]; // выборка или результат запроса
	КонецЕсли;

	Возврат Результат; // массив результатов
КонецФункции

Процедура ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ТекстПоля,
		ПсевдонимПоля = "СлужебноеВидДвиженияПриход")

	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ТекстПоля = СтрЗаменить(ТекстПоля, "Т."
			+ ПсевдонимПоля, "ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК СлужебноеВидДвиженияПриход");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаменитьВидДвиженияНаПлатформенный(ОписаниеРегистра, ТекстПоля,
		ПсевдонимПоля = "СлужебноеВидДвиженияПриход")

	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ТекстПоля = СтрЗаменить(ТекстПоля, "Т."
			+ ПсевдонимПоля, "ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КОНЕЦ КАК ВидДвижения");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра,
		ЗапросИлиТекст, ПоОрганизации = Неопределено, ПоСлужебнымПоИ = Неопределено,
		ПоРасчетСебестоимости = Неопределено, ПоРасчетПартий = Неопределено,
		ПоНепересчитываемыйТипЗаписи = Неопределено)

	ТекстЗапроса = ?(ТипЗнч(ЗапросИлиТекст) = Тип("Строка"), ЗапросИлиТекст, ЗапросИлиТекст.Текст);

	// Имя регистра
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРегистра", ОписаниеРегистра.ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолноеИмяРегистра", ОписаниеРегистра.ПолноеИмяРегистра);

	// Отбор по организации
	Если ПоОрганизации <> Неопределено Тогда

		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			ОтборПоОрганизации = "И %НЕ Т.Организация В (&МассивОрганизаций)";
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
			ОтборПоОрганизации = "И %НЕ Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
		Иначе
			ОтборПоОрганизации = "";
		КонецЕсли;

		ОтборПоОрганизации = СтрЗаменить(ОтборПоОрганизации, "%НЕ ", ?(ПоОрганизации, "", "НЕ "));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоОрганизации", ОтборПоОрганизации);

	КонецЕсли;

	ОтборПоСлужебнымРеквизитам = "";

	// Отборы по служебным реквизитам
	Если ПоСлужебнымПоИ <> Неопределено Тогда

		Если ПоРасчетСебестоимости <> Неопределено Тогда
			Если ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(ПоРасчетСебестоимости, "", "НЕ ") + "Т.РасчетСебестоимости";
			ИначеЕсли НЕ ОписаниеРегистра.ЭтоРегистрНакопления Тогда
			// У регистра сведений СтоимостьТоваров нет ресурса РасчетСебестоимости.
				// Все его движения считаются расчетными.
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(ПоРасчетСебестоимости, "ИСТИНА", "ЛОЖЬ");
			КонецЕсли;
		КонецЕсли;

		Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда

			Если ПоРасчетПартий <> Неопределено
					И ОписаниеРегистра.ЕстьРасчетПартий Тогда
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(ПоРасчетПартий, "", "НЕ ") + "Т.РасчетПартий";
			КонецЕсли;

			Если ПоНепересчитываемыйТипЗаписи <> Неопределено
					И ОписаниеРегистра.ЭтоРегистрСебестоимости Тогда
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(НЕ ПоНепересчитываемыйТипЗаписи, "", "НЕ ")
					+ "Т.ТипЗаписи В (&НепересчитываемыеТипыЗаписей)";
			КонецЕсли;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ОтборПоСлужебнымРеквизитам) Тогда
			ОтборПоСлужебнымРеквизитам = "И (" + ОтборПоСлужебнымРеквизитам + ")";
		КонецЕсли;

	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоСлужебнымРеквизитам", ОтборПоСлужебнымРеквизитам);

	Если ТипЗнч(ЗапросИлиТекст) = Тип("Строка") Тогда
		ЗапросИлиТекст = ТекстЗапроса;
	Иначе
		ЗапросИлиТекст.Текст = ТекстЗапроса;
	КонецЕсли;

КонецПроцедуры

Функция ПустыеРегистраторыРегистра(ИмяРегистра) Экспорт

	МассивОписанияРегистраторов = Новый Массив();

	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл

		Если МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления[ИмяРегистра]) Тогда
			МассивОписанияРегистраторов.Добавить("ЗНАЧЕНИЕ(Документ."
				+ МетаданныеДокумента.Имя + ".ПустаяСсылка)");
		КонецЕсли;

	КонецЦикла;

	Возврат СтрСоединить(МассивОписанияРегистраторов, ",");

КонецФункции

Функция ДоступныеТипыДокумента(ИмяРегистра, ИмяРеквизита) Экспорт

	МассивОписанияТипов = Новый Массив();

	ТипРеквизита = Неопределено;

	Если Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		ТипРеквизита = Неопределено;
	ИначеЕсли Метаданные.РегистрыНакопления[ИмяРегистра].Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ТипРеквизита = Метаданные.РегистрыНакопления[ИмяРегистра].Реквизиты[ИмяРеквизита].Тип;
	ИначеЕсли Метаданные.РегистрыНакопления[ИмяРегистра].Измерения.Найти(ИмяРеквизита) <> Неопределено Тогда
		ТипРеквизита = Метаданные.РегистрыНакопления[ИмяРегистра].Измерения[ИмяРеквизита].Тип;
	Иначе
		ТипРеквизита = Неопределено;
	КонецЕсли;

	Если ТипРеквизита = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	Для Каждого ТипДокумента Из ТипРеквизита.Типы() Цикл
		Если ТипДокумента = Тип("Строка") Тогда
			МассивОписанияТипов.Добавить("ТИП(Документ.КорректировкаРегистров)");
		Иначе
			МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
			МассивОписанияТипов.Добавить("ТИП(Документ." + МетаданныеДокумента.Имя
				+ ")");
		КонецЕсли;
	КонецЦикла;

	Возврат СтрСоединить(МассивОписанияТипов, ", ");

КонецФункции

Функция ДоступныеТипыРегистратора(ИмяРегистра) Экспорт

	МассивОписанияТипов = Новый Массив();

	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл

		Если МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления[ИмяРегистра]) Тогда
			МассивОписанияТипов.Добавить("ТИП(Документ." + МетаданныеДокумента.Имя
				+ ")");
		КонецЕсли;

	КонецЦикла;

	Возврат СтрСоединить(МассивОписанияТипов, ", ");

КонецФункции

Процедура ВыполнитьЗапросПоОписаниюПолей(ПараметрыРасчета,
		ТаблицаОписанияПолей, ИмяРегистра, ИмяВременнойТаблицыИсточник,
		ИмяВременнойТаблицыПриемник, УсловиеГДЕ = Неопределено,
		СтруктураПараметров = Неопределено) Экспорт

	Если ПараметрыРасчета.Движения.Свойство(ИмяРегистра) Тогда
		ОписаниеПриемника = ПараметрыРасчета.Движения[ИмяРегистра];
	Иначе
		ОписаниеПриемника = ПараметрыРасчета.ВспомогательныеВременныеТаблицы[ИмяРегистра];
	КонецЕсли;

	ЭтоРегистрСебестоимости = (ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
	ЭтоРегистрВыручки = (ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя);

	Запрос = Новый Запрос();
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	Запрос.УстановитьПараметр("РасчетСебестоимости", НЕ ПараметрыРасчета.ИдетРасчетПартий);
	Запрос.УстановитьПараметр("РасчетПартий", ПараметрыРасчета.ИдетРасчетПартий);

	// первый регистратор для пустых
	Для Каждого КлючИЗначение Из ПараметрыРасчета.ДокументыРасчетаПоОрганизациям Цикл
	// Заполним регистратор произвольным "первым" документом расчета себестоимости - чтобы движения можно было записать.
	// Расчет все равно в итоге будет завершен с ошибкой, но т.о. можно получить информацию о всех ошибочных регистраторах.
		Запрос.УстановитьПараметр("ДокументРасчетаПоОрганизациям", КлючИЗначение.Ключ);
		Прервать;
	КонецЦикла;

	Если СтруктураПараметров <> Неопределено Тогда

		Для Каждого КлючЗначение Из СтруктураПараметров Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;

	КонецЕсли;

	// Заполним служебное поле РасчетСебестоимости
	Если ОписаниеПриемника.ЕстьРасчетСебестоимости Тогда
		ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, "РасчетСебестоимости", "&РасчетСебестоимости");
	КонецЕсли;

	// Заполним служебное поле РасчетПартий
	// (для этапа заполнения партий в себестоимости этот признак устанавливается в функции ДобавитьЗаписьВТаблицуДвижений).
	Если ОписаниеПриемника.ЕстьРасчетПартий И НЕ (ЭтоРегистрСебестоимости
			И ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости) И НЕ (ЭтоРегистрВыручки
			И ПараметрыРасчета.ЗаполняютсяПартииВВыручке) Тогда
		ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, "РасчетПартий", "&РасчетПартий");
	КонецЕсли;

	ОписаниеПолей = ПолучитьОписаниеПолейЗапроса(ТаблицаОписанияПолей, ОписаниеПриемника.Таблица);

	Запрос.Текст = "
		|ВЫБРАТЬ
		|" + ОписаниеПолей + "
		|
		|ПОМЕСТИТЬ " + ИмяВременнойТаблицыПриемник + "
		|
		|ИЗ
		|	" + ИмяВременнойТаблицыИсточник + "
		|
		|" + ?(ЗначениеЗаполнено(УсловиеГДЕ), "ГДЕ 
		|	" + УсловиеГДЕ, "");

	Запрос.Выполнить();

КонецПроцедуры


// Возвращает описание полей запроса.
// 
// Параметры:
// 	ОписаниеПриемника - ТаблицаЗначений -
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Поле - Строка -
// * Представление - Строка -
Функция СформироватьОписаниеПолейЗапроса(ОписаниеПриемника) Экспорт

	ТаблицаОписанияПолей = Новый ТаблицаЗначений;
	ТаблицаОписанияПолей.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
	ТаблицаОписанияПолей.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));

	Для Каждого КолонкаПриемника Из ОписаниеПриемника.Колонки Цикл
		НоваяСтрока = ТаблицаОписанияПолей.Добавить();
		НоваяСтрока.Представление = ВРег(КолонкаПриемника.Имя);

		Если КолонкаПриемника.ТипЗначения.Типы().Количество() > 1 Тогда
			НоваяСтрока.Поле = "Неопределено";
			Продолжить;
		КонецЕсли;

		ТипКолонки = КолонкаПриемника.ТипЗначения.Типы().Получить(0);
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипКолонки);

		Если ТипКолонки = Тип("Булево") Тогда
			НоваяСтрока.Поле = "ЛОЖЬ";
		ИначеЕсли ТипКолонки = Тип("Число") Тогда
			НоваяСтрока.Поле = "0";
		ИначеЕсли ТипКолонки = Тип("Дата") Тогда
			НоваяСтрока.Поле = "ДАТАВРЕМЯ(1,1,1,0,0,0)";
		ИначеЕсли ТипКолонки = Тип("Строка") Тогда
			НоваяСтрока.Поле = """""";
		ИначеЕсли ТипКолонки = Тип("ВидДвиженияНакопления") Тогда
			НоваяСтрока.Поле = "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
		ИначеЕсли ОбъектМетаданных <> Неопределено Тогда
			НоваяСтрока.Поле = "ЗНАЧЕНИЕ(" + ОбъектМетаданных.ПолноеИмя()
				+ ".ПустаяСсылка)";
		Иначе
			НоваяСтрока.Поле = "Неопределено";
		КонецЕсли;

	КонецЦикла;

	Если ОписаниеПриемника.Колонки.Найти("ВидДвижения") <> Неопределено Тогда

		ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, "СлужебноеВидДвиженияПриход", "
			|ВЫБОР
			|	КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|КОНЕЦ
			|");

	КонецЕсли;

	Возврат ТаблицаОписанияПолей;

КонецФункции

Функция КопироватьПоляЗапроса(ТаблицаОписанияПолей, КопируемыеПоля) Экспорт

	МассивПолей = СтрРазделить(КопируемыеПоля, ",");
	Для Каждого Поле Из МассивПолей Цикл
		мПоле = СтрЗаменить(СтрЗаменить(СокрЛП(Поле), Символы.ПС, ""), Символы.Таб, "");
		СтрокаПоле = ТаблицаОписанияПолей.Найти(ВРег(мПоле), "Представление");
		Если СтрокаПоле <> Неопределено Тогда
			СтрокаПоле.Поле = мПоле;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаОписанияПолей;

КонецФункции


// Описание
// 
// Параметры:
// 	ТаблицаОписанияПолей - ТаблицаЗначений -
// 	Поле - Строка -
// 	Представление - Строка -
Процедура ДобавитьПолеВОписаниеПолейЗапроса(ТаблицаОписанияПолей, Поле,
		Представление) Экспорт

	НоваяСтрока = ТаблицаОписанияПолей.Добавить();
	НоваяСтрока.Поле = Поле;
	НоваяСтрока.Представление = ВРег(Представление);

КонецПроцедуры

Процедура ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей,
		ПолеИсходное, Поле, Представление = Неопределено) Экспорт

	ОписаниеПоля = ТаблицаОписанияПолей.Найти(ВРег(ПолеИсходное), "Представление");
	Если ОписаниеПоля <> Неопределено Тогда
		ОписаниеПоля.Поле = Поле;
		Если Представление <> Неопределено Тогда
			ОписаниеПоля.Представление = ВРег(Представление);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ИзменитьРегистраторИДокументДвиженияВОписанииПолейЗапроса(ТаблицаОписанияПолей, ИмяРегистра, СУчетомКорректировки = Ложь) Экспорт
	
	
	ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, "Регистратор", "
		|ВЫБОР КОГДА ДокументДвижения ЕСТЬ NULL ИЛИ ДокументДвижения = Неопределено 
		|  ИЛИ ДокументДвижения В(" + ПустыеРегистраторыРегистра(ИмяРегистра) + ")
        |	ТОГДА &ДокументРасчетаПоОрганизациям
		|	ИНАЧЕ ДокументДвижения
		|КОНЕЦ");
	
    Если РасчетСебестоимостиПовтИсп.ЕстьИзмерениеИлиРеквизит(ИмяРегистра, "ДокументДвижения") Тогда
	 
		ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, "ДокументДвижения", "
			|ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДокументДвижения) В (" + ДоступныеТипыДокумента(ИмяРегистра, "ДокументДвижения") + ")
			|  " + ?(СУчетомКорректировки, "И НЕ ЭтоКорректировка", "") + "
			|	ТОГДА ДокументДвижения
			|	ИНАЧЕ НЕОПРЕДЕЛЕНО
			|КОНЕЦ");
		
 	КонецЕсли;
 	
КонецПроцедуры

Функция ПолучитьЗначениеПоляЗапроса(ТаблицаОписанияПолей,
		Представление) Экспорт

	Значение = "Неопределено";

	ОписаниеПоля = ТаблицаОписанияПолей.Найти(ВРег(Представление), "Представление");
	Если ОписаниеПоля <> Неопределено Тогда
		Значение = ОписаниеПоля.Поле;
	КонецЕсли;

	Возврат Значение;

КонецФункции


// Получает строковое описание полей запроса.
// 
// Параметры:
// 	ТаблицаОписанияПолей - ТаблицаЗначений - 
// 	ОписаниеПриемника - ТаблицаЗначений -
// Возвращаемое значение:
// 	Строка - Описание полей запроса
Функция ПолучитьОписаниеПолейЗапроса(ТаблицаОписанияПолей, ОписаниеПриемника) Экспорт

	ОписаниеПолей = "";
	МассивОписанияПолей = Новый Массив;

	Для Каждого КолонкаПриемника Из ОписаниеПриемника.Колонки Цикл

		СтрокаПоле = ТаблицаОписанияПолей.Найти(ВРег(КолонкаПриемника.Имя));
		Если СтрокаПоле = Неопределено Тогда
			МассивОписанияПолей.Добавить(Символы.Таб + "Неопределено" + " КАК "
				+ КолонкаПриемника.Имя);
		Иначе
			МассивОписанияПолей.Добавить(Символы.Таб + СтрокаПоле.Поле + " КАК "
				+ КолонкаПриемника.Имя);
		КонецЕсли;

	КонецЦикла;

	ОписаниеПолей = СтрСоединить(МассивОписанияПолей, "," + Символы.ПС);

	Возврат ОписаниеПолей;

КонецФункции

#КонецОбласти

#Область ВременныеТаблицы

#Область ОперацииСВременнымиТаблицами

// Помещает таблицу значений в новую временную таблицу
//
Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(КонтейнерМенеджераВТ,
		ИмяПриемника, Таблица, ПоляТаблицы, ПоляИндексирования = "") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	Запрос.Текст = "ВЫБРАТЬ
		|	%Поля
		|ПОМЕСТИТЬ %ИмяПриемника
		|ИЗ
		|	&Таблица КАК Т
		|%Индексы";

	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(ПоляТаблицы, "%1", "
		|	Т."));
	ТекстПоляИндексирования = ?(ПоляИндексирования = "", "", "ИНДЕКСИРОВАТЬ ПО "
		+ ПоляИндексирования);

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Поля", ТекстПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", ИмяПриемника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Индексы", ТекстПоляИндексирования);

	Запрос.УстановитьПараметр("Таблица", Таблица);

	Запрос.Выполнить();

КонецПроцедуры

// Добавляет таблицу значений в существующую временную таблицу
//
Процедура ОбъединитьТаблицуЗначенийИВременнуюТаблицу(КонтейнерМенеджераВТ,
		ИмяПриемника, Таблица, ПоляТаблицыЗначений, ПоляТаблицы, РесурсыТаблицы,
		ПоляИндексирования = "") Экспорт

	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляОбъединенияТЗИВТ";

	Если ЗначениеЗаполнено(ПоляТаблицыЗначений) Тогда
		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, Таблица, ПоляТаблицыЗначений, ПоляИндексирования);
	Иначе
		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, Таблица, ПолучитьИменаКолонокСтрокой(Таблица), ПоляИндексирования);
	КонецЕсли;

	ДобавитьНедостающиеКолонкиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, ИмяПриемника, ПоляИндексирования);

	ОбъединитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, ИмяПриемника, ПоляТаблицы, РесурсыТаблицы, ПоляИндексирования);

	УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы);

КонецПроцедуры

// Переносит данные из нескольких временных таблиц в одну временную таблицу.
//
Процедура ОбъединитьВременныеТаблицы(КонтейнерМенеджераВТ, ИменаИсточников,
		ИмяПриемника, ПоляТаблицы, РесурсыТаблицы, ПоляИндексирования = "",
		УдалятьИсточники = Ложь) Экспорт

	МассивИсточников = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаИсточников, ",", , Истина);

	КоличествоТаблицВЗапросе = 254;
	КоличествоЗапросов = МассивИсточников.Количество()
		/ КоличествоТаблицВЗапросе;
	КоличествоЗапросов = Цел(КоличествоЗапросов)
		+ ?(КоличествоЗапросов = Цел(КоличествоЗапросов), 0, 1);

	Если КоличествоЗапросов = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляОбъединенияВТиВТ";
	ПриемникСуществует = ВременнаяТаблицаСуществует(КонтейнерМенеджераВТ, ИмяПриемника);

	// Шаблоны
	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(ПоляТаблицы, "%1", "
		|	Т."));
	ТекстПоляИндексирования = ?(ПоляИндексирования = "", "", "ИНДЕКСИРОВАТЬ ПО "
		+ ПоляИндексирования);

	ТекстСгруппированныеПоля = "";
	ТекстОтборНепустыхРесурсов = "";
	ТекстГруппировкаПолей = "";

	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ПоляТаблицы, "%1", "Т."), ",", Истина, Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(РесурсыТаблицы, "%1", "Т."), ",", Истина, Истина);

	Для Каждого ТекущееПоле Из МассивПолей Цикл

		Если МассивРесурсов.Найти(ТекущееПоле) <> Неопределено Тогда

		// Ресурс
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля
				+ ?(ТекстСгруппированныеПоля = "", "", ",
				|	") + "СУММА(" + ТекущееПоле + ")";

			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";

		Иначе

		// Измерение или реквизит
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля
				+ ?(ТекстСгруппированныеПоля = "", "", ",
				|	") + ТекущееПоле;

			ТекстГруппировкаПолей = ТекстГруппировкаПолей
				+ ?(ТекстГруппировкаПолей = "", "", ",
				|	") + ТекущееПоле;

		КонецЕсли;

	КонецЦикла;

	ТекстГруппировкаПолей = ?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов = ?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	") + ТекстОтборНепустыхРесурсов;

	ШаблонЗапроса = "ВЫБРАТЬ
		|	%СгруппированныеПоля
		|ПОМЕСТИТЬ %ИмяПриемника
		|ИЗ
		|(
		|	%ЗапросОбъединенияТаблиц
		|) КАК Т
		|%ГруппировкаПолей
		|
		|%ОтборНепустыхРесурсов
		|
		|%Индексы
		|";
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%СгруппированныеПоля", ТекстСгруппированныеПоля);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%ГруппировкаПолей", ТекстГруппировкаПолей);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%ОтборНепустыхРесурсов", ТекстОтборНепустыхРесурсов);

	ШаблонВложенногоЗапроса = "ВЫБРАТЬ
		|	%Поля
		|ИЗ
		|	%ИмяИсточника КАК Т
		|";
	ШаблонВложенногоЗапроса = СтрЗаменить(ШаблонВложенногоЗапроса, "%Поля", ТекстПоляТаблицы);

	// Записи итоговой временной таблицы сворачиваются по всем измерениям и реквизитам регистра (всем полям, не являющимися ресурсами).
	// Записи со всеми пустыми ресурсами не помещаются в итоговую временную таблицу.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	Для НомерЗапроса = 1 По КоличествоЗапросов Цикл

		ТекстЗапроса = "";
		ТекстУдаляемыеТаблицы = "";

		Если НомерЗапроса = 1 И ПриемникСуществует Тогда
			ИмяПромежуточнойТаблицы = ИмяПриемника;
		ИначеЕсли НомерЗапроса > 1 Тогда
			ИмяПромежуточнойТаблицы = ИмяВнутреннейТаблицы + Формат(НомерЗапроса
				- 1, "ЧГ=");
		Иначе
			ИмяПромежуточнойТаблицы = "";
		КонецЕсли;

		Если ЗначениеЗаполнено(ИмяПромежуточнойТаблицы) Тогда
			ТекстЗапроса = СтрЗаменить(ШаблонВложенногоЗапроса, "%ИмяИсточника", ИмяПромежуточнойТаблицы);
			ТекстУдаляемыеТаблицы = ИмяПромежуточнойТаблицы;
		КонецЕсли;

		Для НомерТаблицы = 1 По КоличествоТаблицВЗапросе Цикл

			Если МассивИсточников.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;

			ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "", "
				|ОБЪЕДИНИТЬ ВСЕ
				|")
				+ СтрЗаменить(ШаблонВложенногоЗапроса, "%ИмяИсточника", МассивИсточников[0]);

			Если УдалятьИсточники Тогда
				ТекстУдаляемыеТаблицы = ТекстУдаляемыеТаблицы
					+ ?(ТекстУдаляемыеТаблицы = "", "", ",") + МассивИсточников[0];
			КонецЕсли;

			МассивИсточников.Удалить(0);

		КонецЦикла;

		Если НомерЗапроса < КоличествоЗапросов ИЛИ ПриемникСуществует Тогда
			ИмяПромежуточнойТаблицы = ИмяВнутреннейТаблицы
				+ Формат(НомерЗапроса, "ЧГ=");
		Иначе
			ИмяПромежуточнойТаблицы = ИмяПриемника;
		КонецЕсли;

		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "%ЗапросОбъединенияТаблиц", ТекстЗапроса);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПриемника", ИмяПромежуточнойТаблицы);

		Если НомерЗапроса = КоличествоЗапросов
				И ИмяПромежуточнойТаблицы = ИмяПриемника Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Индексы", ТекстПоляИндексирования);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Индексы", "");
		КонецЕсли;

		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();

		УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ТекстУдаляемыеТаблицы);
		ПриемникСуществует = Ложь;

		Если НомерЗапроса = КоличествоЗапросов
				И ИмяПромежуточнойТаблицы <> ИмяПриемника Тогда

				// Необходимо переложить данные из ИмяПромежуточнойТаблицы в ИмяПриемника
			Запрос.Текст = "ВЫБРАТЬ
				|	%Поля
				|ПОМЕСТИТЬ %ИмяПриемника
				|ИЗ
				|	%ИмяИсточника КАК Т
				|
				|%Индексы
				|;
				|
				|УНИЧТОЖИТЬ %ИмяИсточника
				|";

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Поля", ТекстПоляТаблицы);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", ИмяПриемника);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяИсточника", ИмяПромежуточнойТаблицы);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Индексы", ТекстПоляИндексирования);

			Запрос.Выполнить();

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Добавляет во временную таблицу отсутствующие колонки.
//
Процедура ДобавитьНедостающиеКолонкиВременнойТаблицы(КонтейнерМенеджераВТ,
		ИмяТаблицы, ИмяОбразца, ПоляИндексирования = "") Экспорт

	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляДобавленияКолонокВТ";

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	// Составим перечень колонок, которые есть в таблице-образце, но отсутствуют в самой таблице.
	ШаблонТекстаЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 0
		|	Т.*
		|ИЗ
		|	%1 КАК Т";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ИмяТаблицы);
	КолонкиТаблицы = Запрос.Выполнить().Колонки;

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ИмяОбразца);
	КолонкиОбразца = Запрос.Выполнить().Колонки;

	НовыеКолонки = Новый Структура; // Имя колонки - пустое значение соответствующего ей типа
	Для Каждого ТекущаяКолонка Из КолонкиОбразца Цикл

		Если КолонкиТаблицы.Найти(ТекущаяКолонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ТипЗначенияКолонки = РасчетСебестоимостиУниверсальныеАлгоритмы.ОписанияТиповБезТипаNull(ТекущаяКолонка.ТипЗначения);

		НовыеКолонки.Вставить(ТекущаяКолонка.Имя, ТипЗначенияКолонки.ПривестиЗначение(Неопределено));

	КонецЦикла;

	Если НовыеКолонки.Количество() = 0 Тогда
		Возврат; // в таблице есть все колонки, присутствующие в таблице-образце
	КонецЕсли;

	// Составим список полей для текста запроса.
	ТекстПоляТаблицы = "";
	КоличествоПараметров = 0;

	Для Каждого ТекущаяКолонка Из КолонкиТаблицы Цикл
		ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
			|	") + "Т." + ТекущаяКолонка.Имя + " КАК " + ТекущаяКолонка.Имя;
	КонецЦикла;

	Для Каждого ТекущаяКолонка Из НовыеКолонки Цикл

		КоличествоПараметров = КоличествоПараметров + 1;
		ИмяПараметра = "ЗначениеНовогоПоля"
			+ Формат(КоличествоПараметров, "ЧН=0; ЧГ=");

		Запрос.УстановитьПараметр(ИмяПараметра, ТекущаяКолонка.Значение);

		ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
			|	") + "&" + ИмяПараметра + " КАК " + ТекущаяКолонка.Ключ;

	КонецЦикла;

	ТекстПоляИндексирования = ?(ПоляИндексирования = "", "", "ИНДЕКСИРОВАТЬ ПО "
		+ ПоляИндексирования);

		// Выполним запрос, получающий исходную таблицу с полным списком полей.
	ШаблонТекстаЗапроса = "ВЫБРАТЬ
		|	Т.*
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	%1 КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ %1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	%3
		|ПОМЕСТИТЬ %1
		|ИЗ
		|	%2 КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ %2";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ИмяТаблицы, ИмяВнутреннейТаблицы, ТекстПоляТаблицы, ТекстПоляИндексирования);

	Запрос.Выполнить();

КонецПроцедуры

// Удаляет все записи из временной таблицы, при этом все ее поля остаются без изменения.
//
Процедура ОчиститьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяТаблицы) Экспорт

	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляОчисткиВТ";

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 0
		|	Т.*
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	%1 КАК Т
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ %1
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Т.*
		|ПОМЕСТИТЬ %1
		|ИЗ
		|	%2 КАК Т
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ %2";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ИмяВнутреннейТаблицы);

	Запрос.Выполнить();

КонецПроцедуры

// Копирует все записи из временной таблицы в новую временную таблицу.
//
Процедура СкопироватьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяТаблицы,
		ИмяНовойТаблицы) Экспорт

		// Если новая таблица уже существует - удалим ее.
	УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяНовойТаблицы);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	Запрос.Текст = "ВЫБРАТЬ
		|	Т.*
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	%1 КАК Т";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ИмяНовойТаблицы);

	Запрос.Выполнить();

КонецПроцедуры

// Уничтожает указанные временные таблицы
//
Процедура УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИменаТаблиц) Экспорт

	Если НЕ ЗначениеЗаполнено(ИменаТаблиц) Тогда
		Возврат; // чтобы не нужно было делать проверки имен таблиц при вызове этой процедуры
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	СтруктураТаблиц = Новый Структура(ИменаТаблиц);
	ТекстЗапроса = "";

	Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл

		Если НЕ ВременнаяТаблицаСуществует(Запрос.МенеджерВременныхТаблиц, КлючИЗначение.Ключ) Тогда
			Продолжить; // чтобы не нужно было делать проверки имен таблиц при вызове этой процедуры
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "", "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|") + "УНИЧТОЖИТЬ " + КлючИЗначение.Ключ;

	КонецЦикла;

	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;

КонецПроцедуры

// Проверяет существование временной таблицы с указанным именем.
//
Функция ВременнаяТаблицаСуществует(КонтейнерМенеджераВТ,
		ИмяВременнойТаблицы) Экспорт

	МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	// Из-за ошибки Платформы №50006544 нельзя воспользоваться методом
	// МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВременнойТаблицы)
	// Поэтому будем искать временную таблицу перебором элементов коллекции.
	Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		Если НРег(ВременнаяТаблица.ПолноеИмя) = НРег(ИмяВременнойТаблицы) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

// Проверяет существование колонки временной таблицы с указанным именем.
//
Функция КолонкаВременнойТаблицыСуществует(КонтейнерМенеджераВТ,
		ИмяВременнойТаблицы, ИмяКолонки) Экспорт

	МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	// Из-за ошибки Платформы №50006544 нельзя воспользоваться методом
	// МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВременнойТаблицы)
	// Поэтому будем искать временную таблицу перебором элементов коллекции.
	Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		Если НРег(ВременнаяТаблица.ПолноеИмя) = НРег(ИмяВременнойТаблицы) Тогда
			Возврат (ВременнаяТаблица.Колонки.Найти(ИмяКолонки) <> Неопределено);
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

// Возвращает перечень хранимых временных таблиц.
//
Функция ПолучитьПереченьСуществующихВременныхТаблиц(КонтейнерМенеджераВТ,
		ИсключатьТаблицы = "") Экспорт

	МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	СтруктураИсключаемыхТаблиц = Новый Структура(ИсключатьТаблицы);
	Таблицы = "";

	Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		Если НЕ СтруктураИсключаемыхТаблиц.Свойство(ВременнаяТаблица.ПолноеИмя) Тогда
			Таблицы = Таблицы + ?(Таблицы = "", "", ", ") + ВременнаяТаблица.ПолноеИмя;
		КонецЕсли;
	КонецЦикла;

	Возврат Таблицы;

КонецФункции

// Получает из переданного контейнера-источника данных менеджер временных таблиц.
//
Функция ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ)

	Если ТипЗнч(КонтейнерМенеджераВТ) = Тип("МенеджерВременныхТаблиц") Тогда
		МенеджерВременныхТаблиц = КонтейнерМенеджераВТ;
	Иначе // менеджер хранится в одноименном свойстве структуры или запроса
		МенеджерВременныхТаблиц = КонтейнерМенеджераВТ.МенеджерВременныхТаблиц;
	КонецЕсли;

	Возврат МенеджерВременныхТаблиц;

КонецФункции

Функция ИмяТаблицыСледующейПорцииДанных(ИмяТаблицы, ОписаниеТаблицы)

	ОписаниеТаблицы.КоличествоПорцийДанных = ОписаниеТаблицы.КоличествоПорцийДанных
		+ 1;
	ИмяТаблицыПорции = ИмяТаблицы + "_" + "Порция"
		+ Формат(ОписаниеТаблицы.КоличествоПорцийДанных, "ЧГ=");

	ОписаниеТаблицы.ИменаТаблицПорций = ОписаниеТаблицы.ИменаТаблицПорций
		+ ?(ОписаниеТаблицы.ИменаТаблицПорций = "", "", ",") + ИмяТаблицыПорции;

	Возврат ИмяТаблицыПорции;

КонецФункции

#КонецОбласти

#Область НумерацияИРазделениеНаПорцииСтрокВременнойТаблицы

// Возвращает имя колонки по умолчанию для нумерации строк временной таблицы.
//
Функция ИмяКолонкиДляНумерацииПоУмолчанию() Экспорт
	Возврат "К";
КонецФункции

// Добавляет колонку для нумерации строк в таблицу значений.
//
Функция ДобавитьКолонкуДляНумерацииСтрок(Таблица,
		ИмяПоляНомераСтроки = "") Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки) Тогда
		ИмяПоляНомераСтроки = ИмяКолонкиДляНумерацииПоУмолчанию();
	КонецЕсли;

	Возврат ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяПоляНомераСтроки);

КонецФункции

// Формирует параметры нумерации строк временной таблицы.
//
Функция СформироватьПараметрыНумерацииСтрокВременнойТаблицы(ИмяПоляРазделителя = "",
		ИменаСуммируемыхПолей = "", ИменаПолейУпорядочивания = "",
		ИмяПоляНомераСтроки = "", ИменаПолейИндексирования = "",
		ИмяПоляНакопления = "", ПодбиратьРазделитель = Истина) Экспорт

	ПараметрыНумерации = Новый Структура;
	ПараметрыНумерации.Вставить("ИмяПоляРазделителя", ИмяПоляРазделителя);
	ПараметрыНумерации.Вставить("ОптимальныйРазделитель", ?(ПодбиратьРазделитель, "", ИмяПоляРазделителя));
	ПараметрыНумерации.Вставить("ИменаСуммируемыхПолей", ИменаСуммируемыхПолей);
	ПараметрыНумерации.Вставить("ИменаПолейУпорядочивания", ?(НЕ ЗначениеЗаполнено(ИменаПолейУпорядочивания), ИмяПоляРазделителя, ИменаПолейУпорядочивания));
	ПараметрыНумерации.Вставить("ИмяПоляНомераСтроки", ?(НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки), ИмяКолонкиДляНумерацииПоУмолчанию(), ИмяПоляНомераСтроки));
	ПараметрыНумерации.Вставить("ИменаПолейИндексирования", ?(НЕ ЗначениеЗаполнено(ИменаПолейИндексирования), ПараметрыНумерации.ИмяПоляНомераСтроки, ИменаПолейИндексирования));
	ПараметрыНумерации.Вставить("ИмяПоляНакопления", ИмяПоляНакопления);

	Возврат ПараметрыНумерации;

КонецФункции

// Подбирает наиболее оптимальное поле-разделитель таблицы на порции.
// Решает проблему, когда указанное по умолчанию поле-разделитель является неподходящим - при этом порция выборки по
// этому полю получается слишком большой и возникает ошибка "Недостаточно памяти для получения результата запроса к базе
// данных".
//
Функция ПодобратьПодходящийРазделительДляНумерации(ПараметрыРасчета,
		ПараметрыНумерации, ИмяТаблицы, ПустаяТаблицаДанных)

	Если ЗначениеЗаполнено(ПараметрыНумерации.ОптимальныйРазделитель) Тогда
		Возврат ПараметрыНумерации.ОптимальныйРазделитель; // уже определен
	ИначеЕсли РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицы) <= ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ Тогда
		Возврат ""; // не нужно делить на порции
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("РазмерПорции", ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ);

	// Соберем статистику по значениям колонок таблицы.
	ШаблонТекстаЗапроса = "%1
		|
		|ВЫБРАТЬ
		|	""%2"" КАК Разделитель,
		|	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(15,0))) КАК КоличествоРазделителей,
		|	МАКСИМУМ(Т.КоличествоСтрок) КАК КоличествоСтрок,
		|	%5 КАК ЭтоИсходныйРазделитель
		|%3
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.%2 КАК Разделитель,
		|		МАКСИМУМ(ВЫБОР КОГДА Т.%2 ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ЕстьЗначенияNULL,
		|		МАКСИМУМ(ВЫБОР КОГДА ВЫРАЗИТЬ(%6 КАК ЧИСЛО(23,3)) = %6 ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ) КАК ЕстьЧислаСБольшойТочностью,
		|		СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(15,0))) КАК КоличествоСтрок
		|	ИЗ
		|		%4 КАК Т
		|	СГРУППИРОВАТЬ ПО
		|		Т.%2) КАК Т
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(Т.ЕстьЗначенияNULL) = ЛОЖЬ 
		|	И МАКСИМУМ(Т.ЕстьЧислаСБольшойТочностью) = ЛОЖЬ
		|
		|";

	ИменаКолонок = "";
	СтруктураИсключений = Новый Структура(ПараметрыНумерации.ИменаСуммируемыхПолей);

	Для Каждого ТекКолонка Из ПустаяТаблицаДанных.Колонки Цикл

		Если СтруктураИсключений.Свойство(ТекКолонка.Имя) Тогда
			Продолжить;
		КонецЕсли;

		Если ТекКолонка.ТипЗначения.СодержитТип(Тип("ВидДвиженияНакопления"))
				ИЛИ (ТекКолонка.ТипЗначения.Типы().Количество() > 1
				И ТекКолонка.ТипЗначения.СодержитТип(Тип("Строка"))) Тогда
			Продолжить; // для недопущения ошибки "Индексируемое поле не может иметь составной тип и тип неограниченной длины"
		КонецЕсли;

		Запрос.Текст = Запрос.Текст
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ?(Запрос.Текст = "", "", "ОБЪЕДИНИТЬ ВСЕ"), ТекКолонка.Имя, ?(Запрос.Текст = "", "ПОМЕСТИТЬ ВТРазделители", ""), ИмяТаблицы, ?(НРег(ТекКолонка.Имя) = НРег(ПараметрыНумерации.ИмяПоляРазделителя), "ИСТИНА", "ЛОЖЬ"), ?(ТекКолонка.ТипЗначения.СодержитТип(Тип("Число")), "Т."
			+ ТекКолонка.Имя, "0"));

	КонецЦикла;

	Запрос.Выполнить();

	// Выберем наиболее подходящий разделитель строк.
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Разделитель
		|ИЗ
		|	ВТРазделители КАК Т
		|ГДЕ
		|	Т.КоличествоСтрок <= &РазмерПорции
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.КоличествоРазделителей,
		|	Т.ЭтоИсходныйРазделитель УБЫВ,
		|	Т.Разделитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Разделитель КАК Разделитель
		|ИЗ
		|	ВТРазделители КАК Т
		|ГДЕ
		|	Т.КоличествоСтрок > &РазмерПорции
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.КоличествоСтрок,
		|	Т.КоличествоРазделителей,
		|	Т.ЭтоИсходныйРазделитель УБЫВ,
		|	Т.Разделитель";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ПараметрыНумерации.ИмяПоляРазделителя);

	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	РезультатЗапроса = МассивРезультатовЗапроса[0]; // РезультатЗапроса
	Выборка = РезультатЗапроса.Выбрать(); // найдем разделитель с размером порции меньше максимально допустимого
	Если НЕ Выборка.Следующий() Тогда

		РезультатЗапроса = МассивРезультатовЗапроса[1]; // РезультатЗапроса
		Выборка = РезультатЗапроса.Выбрать(); // не нашли - найдем хотя бы разделитель с размером порции больше максимально допустимого
		Если НЕ Выборка.Следующий() Тогда

			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось подобрать поле-разделитель для таблицы %1';uk='Не вдалося підібрати поле-роздільник для таблиці %1'",ОбщегоНазначения.КодОсновногоЯзыка()), ИмяТаблицы);

			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения, ТекстДляПротокола);

			ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

		КонецЕсли;

	КонецЕсли;

	УничтожитьВременныеТаблицы(Запрос, "ВТРазделители");

	Возврат Выборка.Разделитель; // нашли самый оптимальный разделитель
КонецФункции

// Заполняет номера строк временной таблицы.
//
Процедура ЗаполнитьНомераСтрокВременнойТаблицы(ПараметрыРасчета,
		ПараметрыНумерации, ИмяТаблицы,
		ИмяПронумерованнойТаблицы = Неопределено) Экспорт

	Если ПараметрыРасчета.ВерсияПлатформыНеНиже8_3_13
			И РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров().ИспользоватьПриНумерацииАвтоНомерЗаписи Тогда
		ЗаполнитьНомераСтрокВременнойТаблицы8_3_13(ПараметрыРасчета, ПараметрыНумерации, ИмяТаблицы, ИмяПронумерованнойТаблицы);
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ИмяПронумерованнойТаблицы) Тогда
		ИмяПронумерованнойТаблицы = ИмяТаблицы;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;

	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 0
		|	Т.*
		|ИЗ
		|	%1 КАК Т";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы);

	ПустаяТаблицаДанных = Запрос.Выполнить().Выгрузить();

	// Выполним группировку строк временной таблицы по всем полям, не являющимися полями суммирования.
	Если ЗначениеЗаполнено(ПараметрыНумерации.ИменаСуммируемыхПолей) Тогда

		СтруктураИменаСуммируемыхПолей = Новый Структура(ПараметрыНумерации.ИменаСуммируемыхПолей);

		ТекстПоляТаблицы = "";
		ТекстПоляГруппировки = "";

		Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл

			Если СтруктураИменаСуммируемыхПолей.Свойство(КолонкаДанных.Имя) Тогда
				ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
					|	") + "СУММА(Т." + КолонкаДанных.Имя + ") КАК " + КолонкаДанных.Имя;
			Иначе
				ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
					|	") + "Т." + КолонкаДанных.Имя + " КАК " + КолонкаДанных.Имя;
				ТекстПоляГруппировки = ТекстПоляГруппировки
					+ ?(ТекстПоляГруппировки = "", "", ",
					|	") + "Т." + КолонкаДанных.Имя;
			КонецЕсли;

		КонецЦикла;

		ТекстПоляГруппировки = ?(ТекстПоляГруппировки = "", "", "СГРУППИРОВАТЬ ПО
			|	") + ТекстПоляГруппировки;

		Запрос.Текст = "ВЫБРАТЬ
			|	%1
			|ПОМЕСТИТЬ %2ДляГруппировки
			|ИЗ
			|	%2 КАК Т
			|%3
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ %2
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.*
			|ПОМЕСТИТЬ %2
			|ИЗ
			|	%2ДляГруппировки КАК Т
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ %2ДляГруппировки
			|";

		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ТекстПоляТаблицы, ИмяТаблицы, ТекстПоляГруппировки);
		Запрос.Выполнить();

	КонецЕсли;

	// Подберем наиболее подходящее поле-разделитель для разделения на порции.
	ПараметрыНумерации.ОптимальныйРазделитель = ПодобратьПодходящийРазделительДляНумерации(ПараметрыРасчета, ПараметрыНумерации, ИмяТаблицы, ПустаяТаблицаДанных);

	ДелитьТаблицуНаПорции = ЗначениеЗаполнено(ПараметрыНумерации.ОптимальныйРазделитель);

	// Получим полный список полей для упорядочивания - одни и те же данные должны всегда сортироваться одинаково.
	// Добавим в список все остальные колонки, не указанные в списке полей упорядочивания.
	// По суммовым полям будем упорядочивать после несуммовых полей.
	ИменаСуммируемыхПолей = ПараметрыНумерации.ИменаСуммируемыхПолей;

	ИменаВсехПолейУпорядочивания = СтрЗаменить(?(ЗначениеЗаполнено(ПараметрыНумерации.ИменаПолейУпорядочивания), ПараметрыНумерации.ИменаПолейУпорядочивания, ПараметрыНумерации.ОптимальныйРазделитель), "	", " ");

	ИменаВсехПолейУпорядочиванияДляСтруктуры = "";

	Для Каждого ТекущееИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаВсехПолейУпорядочивания, ",", Истина, Истина) Цикл

		РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(ИменаВсехПолейУпорядочиванияДляСтруктуры, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущееИмяПоля, ".")[0]);

	КонецЦикла;

	СтруктураИсключаемыеПоля = Новый Структура(ПараметрыНумерации.ИмяПоляНомераСтроки
		+ ", НомерСтроки, ЗапросИсточник, РасчетЗавершен");
	СтруктураИменаПолей = Новый Структура(СтрЗаменить(СтрЗаменить(НРег(ИменаВсехПолейУпорядочиванияДляСтруктуры), " возр", ""), " убыв", "")
		+ ?(ИменаСуммируемыхПолей = ""
		ИЛИ ИменаВсехПолейУпорядочиванияДляСтруктуры = "", "", ", ")
		+ ИменаСуммируемыхПолей);

	Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл

		Если СтруктураИсключаемыеПоля.Свойство(КолонкаДанных.Имя) // служебное поле
			ИЛИ СтруктураИменаПолей.Свойство(КолонкаДанных.Имя) Тогда // поле уже используется для упорядочивания
			Продолжить;
		КонецЕсли;

		Если ЭтоСуммируемаяКолонкаТаблицы(КолонкаДанных) Тогда // имена полей суммирования не указаны - суммируем по всем числовым полям
			ИменаСуммируемыхПолей = ИменаСуммируемыхПолей
				+ ?(ИменаСуммируемыхПолей = "", "", ", ") + КолонкаДанных.Имя;
		Иначе
			ИменаВсехПолейУпорядочивания = ИменаВсехПолейУпорядочивания
				+ ?(ИменаВсехПолейУпорядочивания = "", "", ", ") + КолонкаДанных.Имя;
		КонецЕсли;

		СтруктураИменаПолей.Вставить(СтруктураИменаПолей);

	КонецЦикла;

	ИменаВсехПолейУпорядочивания = ИменаВсехПолейУпорядочивания
		+ ?(ИменаСуммируемыхПолей = ""
		ИЛИ ИменаВсехПолейУпорядочивания = "", "", ", ") + ИменаСуммируемыхПолей;

		// Получим перечень имен колонок таблицы.
	ДобавитьКолонкуДляНумерацииСтрок(ПустаяТаблицаДанных, ПараметрыНумерации.ИмяПоляНомераСтроки);

	ИменаКолонок = "";
	Для Каждого ТекКолонка Из ПустаяТаблицаДанных.Колонки Цикл
		ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ", ") + "Т."
			+ ТекКолонка.Имя;
	КонецЦикла;

	Если ДелитьТаблицуНаПорции Тогда

	// Разделим строки на порции для того, чтобы не получить слишком большую выборку, которая вызовет ошибку нехватки памяти.
		Запрос.Текст = "ВЫБРАТЬ
			|	Т.%2 КАК Разделитель,
			|	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(15,0))) КАК КоличествоСтрок
			|ПОМЕСТИТЬ ВТПорцииСтрок
			|ИЗ
			|	%1 КАК Т
			|СГРУППИРОВАТЬ ПО
			|	Т.%2";

		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ПараметрыНумерации.ОптимальныйРазделитель);

		Запрос.Выполнить();

		ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ, "КоличествоСтрок", "Разделитель", , "Разделитель, НомерПорции");

		МаксНомерПорции = РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, "ВТПорцииСтрок");

	Иначе

		МаксНомерПорции = 1; // вся таблица это одна порция
	КонецЕсли;

	НомерСтроки = 0; // нумерация строк начинается с 0

	// Выберем данные исходной таблицы порциями.
	// Даже если исходная таблица не содержит строк цикл надо выполнить один раз, для формирования вспомогательных
	// временных таблиц.
	Для НомерПорции = 1 По Макс(МаксНомерПорции, 1) Цикл

		Если МаксНомерПорции > 1 Тогда

			Запрос.УстановитьПараметр("НомерПорции", НомерПорции);

			Запрос.Текст = "ВЫБРАТЬ
				|	Т.*
				|ИЗ
				|	%1 КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорцииСтрок КАК ПорцииСтрок
				|			ПО Т.%2 = ПорцииСтрок.Разделитель
				|			И ПорцииСтрок.НомерПорции = &НомерПорции
				|УПОРЯДОЧИТЬ ПО
				|	%3";

		Иначе

			Запрос.Текст = "ВЫБРАТЬ
				|	Т.*
				|ИЗ
				|	%1 КАК Т
				|УПОРЯДОЧИТЬ ПО
				|	%3";

		КонецЕсли;

		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ПараметрыНумерации.ОптимальныйРазделитель, // нужен только для запроса с порциями
		ИменаВсехПолейУпорядочивания);

		Таблица = Запрос.Выполнить().Выгрузить();

		// Добавим колонку номера строки если ее еще нет.
		ДобавитьКолонкуДляНумерацииСтрок(Таблица, ПараметрыНумерации.ИмяПоляНомераСтроки);

		СкорректироватьПустыеТипыКолонокТаблицы(Таблица);

		// Пронумеруем строки текущей порции (нумерация сквозная для всей исходной таблицы).
		// Если требуется, то при этом в специальной колонке накопим сумму значений этой колонки в предыдущих строках.
		НакопленноеЗначение = 0;

		Для Каждого ТекСтр Из Таблица Цикл

			ТекСтр[ПараметрыНумерации.ИмяПоляНомераСтроки] = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;

			Если ЗначениеЗаполнено(ПараметрыНумерации.ИмяПоляНакопления) Тогда
				ТекущееЗначениеНакопления = ТекСтр[ПараметрыНумерации.ИмяПоляНакопления];
				ТекСтр[ПараметрыНумерации.ИмяПоляНакопления] = НакопленноеЗначение;
				НакопленноеЗначение = НакопленноеЗначение + ТекущееЗначениеНакопления;
			КонецЕсли;

		КонецЦикла;

		Если НомерПорции = 1 Тогда // выбрана первая порция
			Запрос.Текст = "ВЫБРАТЬ
				|	%2
				|ПОМЕСТИТЬ %1ДляНумерации
				|ИЗ
				|	&Т КАК Т";

		Иначе // выбрана вторая или следующие порции
			Запрос.Текст = "ВЫБРАТЬ
				|	%2
				|ПОМЕСТИТЬ %1ДляНумерации2
				|ИЗ
				|	&Т КАК Т
				|;
				|///////////////////////////
				|ВЫБРАТЬ
				|	%2
				|ПОМЕСТИТЬ %1ДляНумерации3
				|ИЗ
				|	%1ДляНумерации КАК Т
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%2
				|ИЗ
				|	%1ДляНумерации2 КАК Т
				|;
				|///////////////////////////
				|УНИЧТОЖИТЬ %1ДляНумерации
				|;
				|///////////////////////////
				|УНИЧТОЖИТЬ %1ДляНумерации2
				|;
				|///////////////////////////
				|ВЫБРАТЬ
				|	%2
				|ПОМЕСТИТЬ %1ДляНумерации
				|ИЗ
				|	%1ДляНумерации3 КАК Т
				|;
				|///////////////////////////
				|УНИЧТОЖИТЬ %1ДляНумерации3";

		КонецЕсли;

		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ИменаКолонок);

		Запрос.УстановитьПараметр("Т", Таблица);
		Запрос.Выполнить();

	КонецЦикла;

	// Поместим пронумерованные данные в итоговую временную таблицу.
	Запрос.Текст = "УНИЧТОЖИТЬ %1
		|;
		|///////////////////////////
		|ВЫБРАТЬ
		|	%3
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	%1ДляНумерации КАК Т
		|%4
		|;
		|///////////////////////////
		|УНИЧТОЖИТЬ %1ДляНумерации";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ИмяПронумерованнойТаблицы, ИменаКолонок, ?(НЕ ЗначениеЗаполнено(ПараметрыНумерации.ИменаПолейИндексирования), "", "ИНДЕКСИРОВАТЬ ПО "
		+ ПараметрыНумерации.ИменаПолейИндексирования));

	Запрос.Выполнить();

	Если ДелитьТаблицуНаПорции Тогда
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТПорцииСтрок");
	КонецЕсли;

	// Проверим корректность новой нумерации.
	РазмерТаблицыДанных = РазмерВременнойТаблицы(Запрос, ИмяПронумерованнойТаблицы);

	Если РазмерТаблицыДанных > 0 Тогда

		Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(Т.КоличествоНомеров) КАК КоличествоНомеров,
			|	СУММА(Т.МинимальныйНомер)  КАК МинимальныйНомер,
			|	СУММА(Т.МаксимальныйНомер) КАК МаксимальныйНомер
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.%2) КАК КоличествоНомеров,
			|		0 КАК МинимальныйНомер,
			|		0 КАК МаксимальныйНомер
			|	ИЗ
			|		%1 КАК Т
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		0,
			|		МИНИМУМ(Т.%2),
			|		МАКСИМУМ(Т.%2)
			|	ИЗ
			|		%1 КАК Т) КАК Т";

		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяПронумерованнойТаблицы, ПараметрыНумерации.ИмяПоляНомераСтроки);

		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		Если Выборка.КоличествоНомеров <> РазмерТаблицыДанных Тогда
			ТекстДляПротокола = НСтр("ru='Ошибка нумерации временной таблицы: не соблюдается уникальность нумерации.';uk='Помилка нумерації тимчасової таблиці: не дотримується унікальність нумерації.'",ОбщегоНазначения.КодОсновногоЯзыка());
		ИначеЕсли Выборка.МинимальныйНомер <> 0 Тогда
			ТекстДляПротокола = НСтр("ru='Ошибка нумерации временной таблицы: некорректный минимальный номер.';uk='Помилка нумерації тимчасової таблиці: некоректний мінімальний номер.'",ОбщегоНазначения.КодОсновногоЯзыка());
		ИначеЕсли Выборка.МаксимальныйНомер <> РазмерТаблицыДанных - 1 Тогда
			ТекстДляПротокола = НСтр("ru='Ошибка нумерации временной таблицы: некорректный максимальный номер.';uk='Помилка нумерації тимчасової таблиці: некоректний максимальний номер.'",ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			ТекстДляПротокола = "";
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекстДляПротокола) Тогда

			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения, ТекстДляПротокола);

			ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНомераСтрокВременнойТаблицы8_3_13(ПараметрыРасчета,
		ПараметрыНумерации, ИмяТаблицы, ИмяПронумерованнойТаблицы = Неопределено)

	Если НЕ ЗначениеЗаполнено(ИмяПронумерованнойТаблицы) Тогда
		ИмяПронумерованнойТаблицы = ИмяТаблицы;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;

	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 0
		|	Т.*
		|ИЗ
		|	%1 КАК Т";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы);

	ПустаяТаблицаДанных = Запрос.Выполнить().Выгрузить();

	ИменаСуммируемыхПолей = ПараметрыНумерации.ИменаСуммируемыхПолей;

	ИменаВсехПолейУпорядочивания = СтрЗаменить(?(ЗначениеЗаполнено(ПараметрыНумерации.ИменаПолейУпорядочивания), ПараметрыНумерации.ИменаПолейУпорядочивания, ПараметрыНумерации.ОптимальныйРазделитель), "	", " ");

	ИменаВсехПолейУпорядочиванияДляСтруктуры = "";

	Для Каждого ТекущееИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаВсехПолейУпорядочивания, ",", Истина, Истина) Цикл

		РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(ИменаВсехПолейУпорядочиванияДляСтруктуры, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущееИмяПоля, ".")[0]);

	КонецЦикла;

	СтруктураИсключаемыеПоля = Новый Структура(ПараметрыНумерации.ИмяПоляНомераСтроки
		+ ", НомерСтроки, ЗапросИсточник, РасчетЗавершен");
	СтруктураИменаПолей = Новый Структура(СтрЗаменить(СтрЗаменить(НРег(ИменаВсехПолейУпорядочиванияДляСтруктуры), " возр", ""), " убыв", "")
		+ ?(ИменаСуммируемыхПолей = ""
		ИЛИ ИменаВсехПолейУпорядочиванияДляСтруктуры = "", "", ", ")
		+ ИменаСуммируемыхПолей);

	Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл

		Если СтруктураИсключаемыеПоля.Свойство(КолонкаДанных.Имя) // служебное поле
			ИЛИ СтруктураИменаПолей.Свойство(КолонкаДанных.Имя) Тогда // поле уже используется для упорядочивания
			Продолжить;
		КонецЕсли;

		Если ЭтоСуммируемаяКолонкаТаблицы(КолонкаДанных) Тогда // имена полей суммирования не указаны - суммируем по всем числовым полям
			ИменаСуммируемыхПолей = ИменаСуммируемыхПолей
				+ ?(ИменаСуммируемыхПолей = "", "", ", ") + КолонкаДанных.Имя;
		Иначе
			ИменаВсехПолейУпорядочивания = ИменаВсехПолейУпорядочивания
				+ ?(ИменаВсехПолейУпорядочивания = "", "", ", ") + КолонкаДанных.Имя;
		КонецЕсли;

		СтруктураИменаПолей.Вставить(СтруктураИменаПолей);

	КонецЦикла;

	ИменаВсехПолейУпорядочивания = ИменаВсехПолейУпорядочивания
		+ ?(ИменаСуммируемыхПолей = ""
		ИЛИ ИменаВсехПолейУпорядочивания = "", "", ", ") + ИменаСуммируемыхПолей;

		// Выполним группировку строк временной таблицы по всем полям, не являющимися полями суммирования.
	Если ЗначениеЗаполнено(ПараметрыНумерации.ИменаСуммируемыхПолей) Тогда

		СтруктураИменаСуммируемыхПолей = Новый Структура(ПараметрыНумерации.ИменаСуммируемыхПолей);

		ТекстПоляТаблицы = "";
		ТекстПоляГруппировки = "";

		Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл

			Если СтруктураИменаСуммируемыхПолей.Свойство(КолонкаДанных.Имя) Тогда
				ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
					|	") + "СУММА(Т." + КолонкаДанных.Имя + ") КАК " + КолонкаДанных.Имя;
			Иначе
				ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
					|	") + "Т." + КолонкаДанных.Имя + " КАК " + КолонкаДанных.Имя;
				ТекстПоляГруппировки = ТекстПоляГруппировки
					+ ?(ТекстПоляГруппировки = "", "", ",
					|	") + "Т." + КолонкаДанных.Имя;
			КонецЕсли;

		КонецЦикла;

		ТекстПоляГруппировки = ?(ТекстПоляГруппировки = "", "", "СГРУППИРОВАТЬ ПО
			|	") + ТекстПоляГруппировки;

		Запрос.Текст = "ВЫБРАТЬ
			|	%1
			|ПОМЕСТИТЬ %2ДляГруппировки
			|ИЗ
			|	%2 КАК Т
			|%3
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 9999999999999 // ЦКТП
			|	АВТОНОМЕРЗАПИСИ() КАК Нумерация%4,  // ЦКТП
			|	Т.*
			|ПОМЕСТИТЬ %6ДляНумерации
			|ИЗ
			|	%2ДляГруппировки КАК Т
			|
			|УПОРЯДОЧИТЬ ПО // ЦКТП
			| %5            // ЦКТП
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ %2ДляГруппировки;
			|";

		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ТекстПоляТаблицы, ИмяТаблицы, ТекстПоляГруппировки, ПараметрыНумерации.ИмяПоляНомераСтроки, ИменаВсехПолейУпорядочивания, ИмяПронумерованнойТаблицы);

		Запрос.Выполнить();

	Иначе

		Запрос.Текст = "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 9999999999999
			|	АВТОНОМЕРЗАПИСИ() КАК Нумерация%2,
			|	Т.*
			|ПОМЕСТИТЬ %4ДляНумерации
			|ИЗ
			|	%1 КАК Т
			|
			|УПОРЯДОЧИТЬ ПО
			| %3
			|";

		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ПараметрыНумерации.ИмяПоляНомераСтроки, ИменаВсехПолейУпорядочивания, ИмяПронумерованнойТаблицы);

		Запрос.Выполнить();

	КонецЕсли;

	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Нумерация%2 КАК Нумерация%2
		|ИЗ
		|	%4ДляНумерации
		|
		|УПОРЯДОЧИТЬ ПО
		|	Нумерация%2
		|";

	МинимальныйНомерПоследовательности = 1;

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ПараметрыНумерации.ИмяПоляНомераСтроки, ИменаВсехПолейУпорядочивания, ИмяПронумерованнойТаблицы);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МинимальныйНомерПоследовательности = Выборка["Нумерация"
			+ ПараметрыНумерации.ИмяПоляНомераСтроки];
	КонецЕсли;

	Запрос.УстановитьПараметр("МинимальныйНомерПоследовательности", МинимальныйНомерПоследовательности);

	Запрос.Текст = "
		|УНИЧТОЖИТЬ %4;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Нумерация%1 - &МинимальныйНомерПоследовательности КАК %1,
		|	Т.*
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	%2ДляНумерации КАК Т
		|
		|%3 // ЦКТП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ %2ДляНумерации
		|";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ПараметрыНумерации.ИмяПоляНомераСтроки, ИмяПронумерованнойТаблицы, ?(НЕ ЗначениеЗаполнено(ПараметрыНумерации.ИменаПолейИндексирования), "", "ИНДЕКСИРОВАТЬ ПО "
		+ ПараметрыНумерации.ИменаПолейИндексирования), ИмяТаблицы);

	Запрос.Выполнить();

КонецПроцедуры

// Возвращает имя колонки по умолчанию для номеров порций временных таблиц.
//
Функция ИмяКолонкиДляНомераПорцииПоУмолчанию()
	Возврат "НомерПорции";
КонецФункции

// Добавляет колонку для номеров порций в таблицу значений.
//
Функция ДобавитьКолонкуДляНомеровПорцийСтрок(Таблица,
		ИмяПоляНомераПорции = "") Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераПорции) Тогда
		ИмяПоляНомераПорции = ИмяКолонкиДляНомераПорцииПоУмолчанию();
	КонецЕсли;

	Возврат ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяПоляНомераПорции);

КонецФункции

// Формирует параметры разделения временной таблицы на порции.
//
Функция СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(РазмерПорции,
		ИмяПоляВесаСтроки, ИменаПолейУпорядочивания = "", ИмяПоляНомераПорции = "",
		ИменаПолейИндексирования = "") Экспорт

	ПараметрыРазделения = Новый Структура;
	ПараметрыРазделения.Вставить("РазмерПорции", РазмерПорции);
	ПараметрыРазделения.Вставить("ИмяПоляВесаСтроки", ИмяПоляВесаСтроки);
	ПараметрыРазделения.Вставить("ИменаПолейУпорядочивания", ?(НЕ ЗначениеЗаполнено(ИменаПолейУпорядочивания), ИмяПоляВесаСтроки
		+ " " + "УБЫВ", ИменаПолейУпорядочивания));
	ПараметрыРазделения.Вставить("ИмяПоляНомераПорции", ?(НЕ ЗначениеЗаполнено(ИмяПоляНомераПорции), ИмяКолонкиДляНомераПорцииПоУмолчанию(), ИмяПоляНомераПорции));
	ПараметрыРазделения.Вставить("ИменаПолейИндексирования", ?(НЕ ЗначениеЗаполнено(ИменаПолейИндексирования), ПараметрыРазделения.ИмяПоляНомераПорции, ИменаПолейИндексирования));

	Возврат ПараметрыРазделения;

КонецФункции

// Разделяет временную таблицу на порции.
//
Функция РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения,
		ИмяТаблицы) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;

	// Получим пустую таблицу значений с полями, соответствующими полям временной таблицы.
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 0
		|	Т.*
		|ИЗ
		|	%1 КАК Т";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы);

	ТаблицаДанных = Запрос.Выполнить().Выгрузить();

	// Получим описание полей таблицы.
	ТекстПоляТаблицы = "";
	ШаблонПоляТаблицы = "";

	Для Каждого КолонкаДанных Из ТаблицаДанных.Колонки Цикл
		ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
			|	") + "Т." + КолонкаДанных.Имя;
		ШаблонПоляТаблицы = ШаблонПоляТаблицы + ?(ШаблонПоляТаблицы = "", "", ", ")
			+ "%1" + КолонкаДанных.Имя;
	КонецЦикла;

	// Добавим колонку для номера порции, к которой относится текущая строка таблицы.
	КолонкаДобавлена = ДобавитьКолонкуДляНомеровПорцийСтрок(ТаблицаДанных, ПараметрыРазделения.ИмяПоляНомераПорции);

	Если КолонкаДобавлена Тогда
		ШаблонПоляТаблицы = ШаблонПоляТаблицы + ", %1"
			+ ПараметрыРазделения.ИмяПоляНомераПорции;
	КонецЕсли;

	// Создадим пустую временную таблицу, в которую будет помещена обработанная исходная таблица.
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ПараметрыРасчета, ИмяТаблицы
		+ "_Временная", ТаблицаДанных, ШаблонПоляТаблицы);

		// Поместим данные временной таблицы в таблицу значений, заполняя при этом номер порции для каждой строки.
	Запрос.Текст = "ВЫБРАТЬ
		|	%1
		|ИЗ
		|	%2 КАК Т
		|УПОРЯДОЧИТЬ ПО
		|	%3";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ТекстПоляТаблицы, ИмяТаблицы, ПараметрыРазделения.ИменаПолейУпорядочивания);

	Выборка = Запрос.Выполнить().Выбрать();

	НомерПорции = 1;
	РазмерТекущейПорции = 0;

	НомерСтрокиВыборки = 0;
	РазмерВыборки = Выборка.Количество();

	Пока Выборка.Следующий() Цикл

		НомерСтрокиВыборки = НомерСтрокиВыборки + 1;

		ТекущаяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);

		ВесСтроки = ТекущаяСтрока[ПараметрыРазделения.ИмяПоляВесаСтроки];
		ВесСтроки = ?(ВесСтроки < 0, -ВесСтроки, ВесСтроки);

		Если РазмерТекущейПорции
				+ ВесСтроки <= ПараметрыРазделения.РазмерПорции Тогда
				// Вес текущей строки "помещается" в текущую порцию.
			// Строка добавляется в текущую порцию.
		ИначеЕсли РазмерТекущейПорции > 0 Тогда
		// Вес текущей строки "выходит" за текущую порцию, в которой уже есть другие строки.
			// Строка добавляется первой в новую порцию.
			НомерПорции = НомерПорции + 1;
			РазмерТекущейПорции = 0;
		Иначе
		// Вес текущей строки "больше" возможного размера порции, при этом в текущей порции еще нет других строк.
		// Строка целиком помещается в отдельную порцию.
		КонецЕсли;

		ТекущаяСтрока[ПараметрыРазделения.ИмяПоляНомераПорции] = НомерПорции;

		РазмерТекущейПорции = РазмерТекущейПорции + ВесСтроки;

		Если НомерСтрокиВыборки = РазмерВыборки
				ИЛИ ТаблицаДанных.Количество() = ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ Тогда

				// Переместим данные из таблицы значений во временную таблицу.
			ОбъединитьТаблицуЗначенийИВременнуюТаблицу(ПараметрыРасчета, ИмяТаблицы
				+ "_Временная", ТаблицаДанных, "", // все колонки таблицы ТаблицаДанных
			ШаблонПоляТаблицы, "");

			ТаблицаДанных.Очистить();

		КонецЕсли;

	КонецЦикла;

	// Уничтожим старую таблицу и поместим вместо нее новую, с заполненной колонкой номера порции.
	Запрос.Текст = "УНИЧТОЖИТЬ %1
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Т.*
		|ПОМЕСТИТЬ %1
		|ИЗ
		|	%1_Временная КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	%2
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ %1_Временная";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ПараметрыРазделения.ИменаПолейИндексирования);

	Запрос.Выполнить();

	Возврат ?(РазмерВыборки = 0, 0, НомерПорции);

КонецФункции

// Добавляет числовую колонку в таблицу значений.
//
Функция ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяКолонки,
		ВставлятьВНачало = Истина)

	Если Таблица.Колонки.Найти(ИмяКолонки) = Неопределено Тогда

		Если ВставлятьВНачало И Таблица.Колонки.Количество() > 0 Тогда
			Таблица.Колонки.Вставить(0, ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
		Иначе
			Таблица.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
		КонецЕсли;

		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Добавляет тип NULL в колонки с пустым типом данных.
// Без этой корректировки не получится использовать данные этой таблицы в запросе.
//
// Параметры:
// 	Таблица - ТаблицаЗначений -
//
Процедура СкорректироватьПустыеТипыКолонокТаблицы(Таблица)

	СтруктураКолонок = Новый Структура;

	Для Каждого Колонка Из Таблица.Колонки Цикл
		Если Колонка.ТипЗначения.Типы().Количество() = 0 Тогда
			СтруктураКолонок.Вставить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(СтруктураКолонок) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл

		ТекущаяКолонкаТаблицы = Таблица.Колонки[КлючИЗначение.Ключ]; // КолонкаТаблицыЗначений
		Таблица.Колонки.Добавить(КлючИЗначение.Ключ
			+ "_Типизированная", ОбщегоНазначения.ОписаниеТипаВсеСсылки(), ТекущаяКолонкаТаблицы.Заголовок);

		Таблица.ЗаполнитьЗначения(Неопределено, КлючИЗначение.Ключ
			+ "_Типизированная");

		Таблица.Колонки.Удалить(КлючИЗначение.Ключ);

		ТекущаяКолонкаТаблицы = Таблица.Колонки[КлючИЗначение.Ключ
			+ "_Типизированная"];
		ТекущаяКолонкаТаблицы.Имя = КлючИЗначение.Ключ;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РегистраторыИМоментыВремени

// Получает реквизит "Момент времени" для всех документов в указанной временной таблице.
//
Процедура СформироватьТаблицуМоментовВремени(КонтейнерМенеджераВТ, ИмяИсточника,
		ИмяПоляРегистратор = "Регистратор", ИмяПриемника = "ВТМоментыВремени",
		ДопустимыПустыеРегистраторы = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	// Выберем типы документов, для которых нужно получить момент времени.
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.%ИмяПоляРегистратор КАК %ИмяПоляРегистратор
		|ПОМЕСТИТЬ %ИмяПриемника_Регистраторы
		|ИЗ
		|	%ИмяИсточника КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	%ИмяПоляРегистратор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТИПЗНАЧЕНИЯ(Т.%ИмяПоляРегистратор) КАК ТипРегистратора
		|ИЗ
		|	%ИмяПриемника_Регистраторы КАК Т
		|";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляРегистратор", ИмяПоляРегистратор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяИсточника", ИмяИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", ИмяПриемника);

	Выборка = Запрос.Выполнить().Выбрать();

	// Составим текст поля для выбора момента времени документа в зависимости от типа документа.
	ТекстЗапроса = "";

	Пока Выборка.Следующий() Цикл

		Если Выборка.ТипРегистратора = Тип("Неопределено")
				ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(Выборка.ТипРегистратора) Тогда

			Если НЕ ДопустимыПустыеРегистраторы Тогда

			// В поле <ИмяПоляРегистратор> содержится не ссылка на документ.
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При обработке регистраторов из временной таблицы ""%1"" возникла ошибка:
|некорректный тип регистратора ""%2""'
|;uk='При обробці реєстраторів з тимчасової таблиці ""%1"" виникла помилка:
|некоректний тип реєстратора ""%2""'",ОбщегоНазначения.КодОсновногоЯзыка()), ИмяИсточника, РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.ТипРегистратора));

				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(КонтейнерМенеджераВТ, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам, ТекстДляПротокола);

				ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

			Иначе

				Продолжить; // в итоговую таблицу такой регистратор не включаем
			КонецЕсли;

		КонецЕсли;

		ИмяТипаРегистратора = Метаданные.НайтиПоТипу(Выборка.ТипРегистратора).Имя;
		ЭтоПервыйПодзапрос = НЕ ЗначениеЗаполнено(ТекстЗапроса);

		ТекстЗапроса = ТекстЗапроса + ?(ЭтоПервыйПодзапрос, "", "
			|ОБЪЕДИНИТЬ ВСЕ
			|") + "
			|ВЫБРАТЬ
			|	Т.%ИмяПоляРегистратор КАК %ИмяПоляРегистратор,
			|	ВЫРАЗИТЬ(Т.%ИмяПоляРегистратор КАК Документ.%ТипДокумента).МоментВремени КАК МоментВремени,
			|	ВЫРАЗИТЬ(Т.%ИмяПоляРегистратор КАК Документ.%ТипДокумента).Дата КАК Дата
			|" + ?(ЭтоПервыйПодзапрос, "ПОМЕСТИТЬ %ИмяПриемника", "") + "
			|ИЗ
			|	%ИмяПриемника_Регистраторы КАК Т
			|ГДЕ
			|	Т.%ИмяПоляРегистратор ССЫЛКА Документ.%ТипДокумента
			|";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТипДокумента", ИмяТипаРегистратора);

	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 0
			|	НЕОПРЕДЕЛЕНО КАК %ИмяПоляРегистратор,
			|	НЕОПРЕДЕЛЕНО КАК МоментВремени,
			|	НЕОПРЕДЕЛЕНО КАК Дата
			|ПОМЕСТИТЬ %ИмяПриемника
			|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
		|ИНДЕКСИРОВАТЬ ПО
		|	%ИмяПоляРегистратор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ %ИмяПриемника_Регистраторы";

		// Получим моменты времени документов.
	Запрос.Текст = СокрЛП(ТекстЗапроса);

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляРегистратор", ИмяПоляРегистратор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", ИмяПриемника);

	Запрос.Выполнить();

КонецПроцедуры

// Выбирает документы из указанной временной таблицы, упорядоченные по их моменту времени.
//
Функция ВыбратьМоментыВремениРегистраторов(КонтейнерМенеджераВТ, ИмяТаблицы,
		ИмяПоляРегистратор = "Регистратор") Экспорт

	ИмяПриемника = "ВТМоментыВремени";

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	СформироватьТаблицуМоментовВремени(КонтейнерМенеджераВТ, ИмяТаблицы, ИмяПоляРегистратор, ИмяПриемника);

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.%ИмяПоляРегистратор,
		|	Источник.Организация,
		|	Т.МоментВремени,
		|	Т.Дата
		|ИЗ
		|	%ИмяПриемника КАК Т
		|	ЛЕВОЕ СОЕДИНЕНИЕ %ИмяТаблицы КАК Источник
		|		ПО Т.%ИмяПоляРегистратор = Источник.%ИмяПоляРегистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.МоментВремени
		|";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляРегистратор", ИмяПоляРегистратор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", ИмяПриемника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицы", ИмяТаблицы);

	РезультатЗапроса = Запрос.Выполнить();

	УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяПриемника);

	Возврат РезультатЗапроса;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область КолонкиТаблиц

// Возвращает строку шаблона, содержащего имена всех колонок переданного объекта.
//
Функция ПолучитьИменаКолонокСтрокой(ИсточникКолонок) Экспорт

	Если ТипЗнч(ИсточникКолонок) = Тип("ТаблицаЗначений")
			ИЛИ ТипЗнч(ИсточникКолонок) = Тип("РезультатЗапроса") Тогда
		Колонки = ИсточникКолонок.Колонки;
	Иначе
		Колонки = ИсточникКолонок;
	КонецЕсли;

	ИменаКолонок = "";

	Для Каждого Колонка Из Колонки Цикл
		ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ", ") + "%1"
			+ Колонка.Имя;
	КонецЦикла;

	Возврат ИменаКолонок;

КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

// Дополняет параметры обработки ЖурналРегистрации для просмотра ключевых событий расчета себестоимости.
// Параметры процедуры соответствуют аналогичным параметрам формы этой обработки.
//
// Параметры:
//	ОтборПоУровню  - СписокЗначений - отбор по уровням событий журнала регистрации
//	ОтборПоСобытию - Массив - отбор по событиям журнала регистрации.
//
Процедура ДополнитьОтборыДляЖурналаРегистрации(ОтборПоУровню, ОтборПоСобытию) Экспорт

	Если ОтборПоУровню.НайтиПоЗначению("Ошибка") = Неопределено Тогда
		ОтборПоУровню.Добавить("Ошибка", "Ошибка"); // для ошибок расчета
	КонецЕсли;
	Если ОтборПоУровню.НайтиПоЗначению("Информация") = Неопределено Тогда
		ОтборПоУровню.Добавить("Информация", "Информация"); // для протокола расчета
	КонецЕсли;

	// Добавим имена событий механизмов расчета партий и себестоимости
	ПараметрыРасчета = Новый Структура("ЗапущенРасчетПартий", Истина);
	ОтборПоСобытию.Добавить(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета));
	ОтборПоСобытию.Добавить(ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета));

	ПараметрыРасчета = Новый Структура("ЗапущенРасчетПартий", Ложь);
	ОтборПоСобытию.Добавить(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета));
	ОтборПоСобытию.Добавить(ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета));

КонецПроцедуры

// Возвращает общее для всех этапов расчета себестоимости имя события для журнала регистрации.
//
Функция ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, Уточнение) Экспорт

	Если НЕ ПараметрыРасчета = Неопределено
			И ПараметрыРасчета.Свойство("ЗапущенРасчетПартий")
			И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		ИмяСобытия = НСтр("ru='Расчет партий и себестоимости%1';uk='Розрахунок партій і собівартості %1'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе
		ИмяСобытия = НСтр("ru='Расчет себестоимости%1';uk='Розрахунок собівартості%1'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;

	ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяСобытия, ?(Уточнение = "", "", "."
		+ Уточнение));

	Возврат ИмяСобытия;

КонецФункции

// Возвращает имя события журнала для записи ошибки расчета.
//
Функция ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета = Неопределено) Экспорт

	Возврат ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, НСтр("ru='Ошибка';uk='Помилка'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецФункции

// Возвращает имя события журнала для записи протокола расчета.
//
Функция ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета = Неопределено) Экспорт

	Возврат ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, НСтр("ru='Протокол расчета';uk='Протокол розрахунку'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецФункции

// Обрабатывает run-time ошибки расчета - записывает протокол расчета и завершает расчет.
//
Функция ОбработатьИсключениеВызоваРассчитатьВсе(ПараметрыРасчета,
		ИнформацияОбОшибке, Отказ) Экспорт

	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

	Если СтрНайти(ТекстОшибки, СлужебныйСимвол_РасчетПрерванДляОтладки()) > 0 Тогда
		Возврат Истина;
	КонецЕсли;

	Отказ = Истина;

	// Восстановим отбор по всем организациям, т.к. при расчете себестоимости он подменялся при расчете по группам организаций.
	Если НЕ ПараметрыРасчета.ИдетРасчетПартий
			И ПараметрыРасчета.Свойство("КопияМассивОрганизаций") Тогда
		ПараметрыРасчета.Вставить("МассивОрганизаций", ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПараметрыРасчета.КопияМассивОрганизаций));
	КонецЕсли;

	// Запишем информацию в журнал регистрации.
	ТекстДляПротокола = СтрЗаменить(ТекстОшибки, СокрЛП(СлужебныйСимвол_ТекстДляРегистрацииПроблемы()), "");
	ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СокрЛП(СлужебныйСимвол_ПроблемаУжеЗарегистрирована()), "");

	ТекстДляПротокола = РасчетСебестоимостиПротоколРасчета.ПредставлениеТекстаОшибки(ТекстДляПротокола);

	ЗаписьЖурналаРегистрации(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета), УровеньЖурналаРегистрации.Ошибка, , , ТекстДляПротокола);

	// Запишем информацию в протокол расчета.
	ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При выполнении расчета возникла ошибка:
|%1'
|;uk='При виконанні розрахунку виникла помилка: 
|%1'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстОшибки);

	ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СокрЛП(СлужебныйСимвол_ТекстДляРегистрацииПроблемы()), "");
	ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СокрЛП(СлужебныйСимвол_ПроблемаУжеЗарегистрирована()), "");

	Если РасчетСебестоимостиПротоколРасчета.ВедетсяПротоколРасчета(ПараметрыРасчета)
			И НЕ ИсключениеВызваноПрограммно(ТекстОшибки) Тогда

			// Если исключение вызвано программно, то в протокол уже должна быть добавлена информация об ошибке в месте ее возникновения.
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения, ТекстДляПротокола);

	КонецЕсли;

	// Запишем информацию в механизме закрытия месяца.
	НачалоТекстаДляПротокола = СтрНайти(ТекстОшибки, СлужебныйСимвол_ТекстДляРегистрацииПроблемы(), , , 1);
	КонецТекстаДляПротокола = СтрНайти(ТекстОшибки, СлужебныйСимвол_ТекстДляРегистрацииПроблемы(), , , 2);
	ПроблемаУжеЗарегистрирована = (СтрНайти(ТекстОшибки, СокрЛП(СлужебныйСимвол_ПроблемаУжеЗарегистрирована())) > 0);

	Если НЕ ПроблемаУжеЗарегистрирована И НачалоТекстаДляПротокола > 0
			И КонецТекстаДляПротокола > 0 Тогда // в описании заключен текст для регистрации проблемы
		ДлинаСимвола = СтрДлина(СлужебныйСимвол_ТекстДляРегистрацииПроблемы());
		ТекстДляПротокола = СокрЛП(Сред(ТекстОшибки, НачалоТекстаДляПротокола
			+ ДлинаСимвола, КонецТекстаДляПротокола - НачалоТекстаДляПротокола
			- ДлинаСимвола));

	ИначеЕсли НЕ ИсключениеВызваноПрограммно(ТекстОшибки) // "честное" падение
		ИЛИ НЕ ПроблемаУжеЗарегистрирована Тогда // передача "честного" падения из вложенных Попытка-Исключение
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При выполнении расчета диагностирована ошибка:
|%1'
|;uk='При виконанні розрахунку діагностована помилка: 
|%1'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекстОшибки);
	Иначе
	// Проблема уже зарегистрирована в месте вызова исключения
		ТекстДляПротокола = "";
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстДляПротокола) Тогда
		ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, , , ТекстДляПротокола);
	КонецЕсли;

	ОкончаниеРасчета(ПараметрыРасчета); // запишем протокол
	ТекстОшибки = ТекстОшибки + СлужебныйСимвол_ПроблемаУжеЗарегистрирована();

	ВызватьИсключение ТекстОшибки;

КонецФункции

Функция ИсключениеВызваноПрограммно(ТекстОшибки) Экспорт

	Возврат СтрНайти(НРег(ТекстОшибки), НРег("ВызватьИсключение")) > 0
		ИЛИ СтрНайти(НРег(ТекстОшибки), НРег("Raise")) > 0;

КонецФункции

Функция ТекстИсключениеДляРегистрацииПроблемы(ТекстОшибки) Экспорт
	Возврат СлужебныйСимвол_ТекстДляРегистрацииПроблемы() + ТекстОшибки
		+ СлужебныйСимвол_ТекстДляРегистрацииПроблемы();
КонецФункции

Функция СлужебныйСимвол_ТекстДляРегистрацииПроблемы() Экспорт
	Возврат Символы.ПС + "#Описание" + Символы.ПС;
КонецФункции

Функция СлужебныйСимвол_ПроблемаУжеЗарегистрирована() Экспорт
	Возврат ЗакрытиеМесяцаСервер.СлужебныйСимвол_ИсключениеУжеОтработаноВЭтапеРасчета()
КонецФункции

Функция ТекстОшибкиНекорректногоЗавершенияРасчетаСебестоимости() Экспорт
	Возврат СлужебныйСимвол_ПроблемаУжеЗарегистрирована()
		+ НСтр("ru='При расчете себестоимости возникла ошибка. Подробности см. в Журнале регистрации.';uk='При розрахунку собівартості виникла помилка. Подробиці див. в Журналі реєстрації.'",ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

#КонецОбласти

#Область РаспределительныеЗадачи

// Обертка для распределения методом уменьшаемого остатка, добавляющая замер времени выполнения распределения.
//
Процедура РаспределитьМетодомУменьшаемогоОстаткаСЗамеромВремени(ПараметрыРасчета,
		ПараметрыРаспределения, Идентификатор, Пояснение) Экспорт

	РасчетСебестоимостиПротоколРасчета.НачалоВыполненияФрагментаКода(ПараметрыРасчета, Идентификатор, Пояснение);

	РасчетСебестоимостиУниверсальныеАлгоритмы.РаспределитьМетодомУменьшаемогоОстатка(ПолучитьМенеджерВТИзКонтейнера(ПараметрыРасчета), ПараметрыРаспределения);

	РасчетСебестоимостиПротоколРасчета.ОкончаниеВыполненияФрагментаКода(ПараметрыРасчета, ПараметрыРаспределения.РезультатыРаспределения.РазмерРезультата);

КонецПроцедуры

#КонецОбласти

#Область Организации

// Возвращает строковое представление массива организаций.
//
// Параметры:
//	МассивОрганизаций - Массив - организации, для которых надо получить представление.
//
// Возвращаемое значение:
//	Строка - строковое представление массива организаций.
//
Функция ПредставлениеОрганизаций(МассивОрганизаций, Разделитель = Неопределено,
		ТекстДляЗаписиВИБ = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если МассивОрганизаций = Неопределено Тогда
		Если ТекстДляЗаписиВИБ Тогда
			Возврат НСтр("ru='<Все организации>';uk='<Всі організації>'",ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			Возврат НСтр("ru='<Все организации>';uk='<Всі організації>'");
		КонецЕсли;
	КонецЕсли;

	ПредставлениеОрганизаций = "";

	Если Разделитель = Неопределено Тогда
		Разделитель = Символы.ВК;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ДанныеСправочника.Наименование КАК ОрганизацияПредставление
		|ИЗ
		|	Справочник.Организации КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка В(&МассивОрганизаций)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОрганизацияПредставление";

	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеОрганизаций = ПредставлениеОрганизаций
			+ ?(ПустаяСтрока(ПредставлениеОрганизаций), "", Разделитель)
			+ Выборка.ОрганизацияПредставление;
	КонецЦикла;

	Возврат ПредставлениеОрганизаций;

КонецФункции

// Возвращает массив организаций, у которых есть движения (необходимо выполнить расчет).
//
Функция ОрганизацииСДвижениямиПоСебестоимости(ПериодРасчета,
		МассивОрганизаций = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	СтатьиРасходов.Ссылка
		|ПОМЕСТИТЬ ОтборСтатьиРасходов
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|ГДЕ
		|	СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|	ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ОтборОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&ОтборОрганизации)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Данные.Организация КАК Организация
		|ИЗ
		|	(ВЫБРАТЬ
		|    	Организации.Ссылка КАК Организация
		|	ИЗ
		|   	ОтборОрганизации КАК Организации
		|	ГДЕ
		|   	 ИСТИНА В (
		|       	 ВЫБРАТЬ ПЕРВЫЕ 1
		|           	 ИСТИНА
		|	        ИЗ
		|   	         РегистрНакопления.СебестоимостьТоваров КАК Данные
		|       	 ГДЕ
		|   	        Данные.Организация = Организации.Ссылка
		|           	И Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	            И Данные.Активность)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		КлючиАналитики.Организация
		|	ИЗ
		|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Данные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитики
		|			ПО Данные.АналитикаУчетаПоПартнерам = КлючиАналитики.Ссылка
		|				И КлючиАналитики.Организация В (&ОтборОрганизации)
		|	ГДЕ
		|		Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Данные.Активность
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|    	Организации.Ссылка КАК Организация
		|	ИЗ
		|   	ОтборОрганизации КАК Организации
		|	ГДЕ
		|   	 ИСТИНА В (
		|       	 ВЫБРАТЬ ПЕРВЫЕ 1
		|           	 ИСТИНА
		|	        ИЗ
		|   	        РегистрНакопления.ПартииПрочихРасходов КАК Данные
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборСтатьиРасходов КАК Статьи
		|					ПО Данные.СтатьяРасходов = Статьи.Ссылка
		|       	 ГДЕ
		|   	        Данные.Организация = Организации.Ссылка
		|           	И Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|				И Данные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	            И Данные.Активность)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Данные.Организация
		|	ИЗ
		|		Документ.РаспределениеРасходовБудущихПериодов КАК Данные
		|	ГДЕ
		|		Данные.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Данные.Организация В (&ОтборОрганизации)
		|		И Данные.Проведен
		|		И (Данные.ВариантУказанияСуммыУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически)
		|			ИЛИ Данные.ВариантУказанияСуммыРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически))
		//++ НЕ УТ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Данные.Организация
		|	ИЗ
		|		Документ.РаспределениеПрочихЗатрат КАК Данные
		|	ГДЕ
		|		Данные.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Данные.Организация В (&ОтборОрганизации)
		|		И Данные.НазначениеНастройкиРаспределения = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства)
		|		И Данные.Проведен
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Данные.Организация
		|	ИЗ
		|		РегистрНакопления.РезервыПредстоящихРасходов.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , ,
		|			Организация В (&ОтборОрганизации)) КАК Данные
		//-- НЕ УТ
		|	) КАК Данные";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("ОтборОрганизации", ?(НЕ ЗначениеЗаполнено(МассивОрганизаций), Справочники.Организации.ДоступныеОрганизации(), ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций)));

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");

	Возврат Результат;

КонецФункции

// Возвращает массив организаций, у которых есть остатки (необходимо выполнить корректировки).
//
Функция ОрганизацииСОстаткамиПоСебестоимости(ПериодРасчета,
		МассивОрганизаций = Неопределено) Экспорт

	ТекстЗапроса = "";
	ШаблонЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Т.Организация
		|	ИЗ
		|		%1.Остатки(&НачалоПериода, Организация В (&ОтборОрганизации)) КАК Т";

	Для Каждого ИмяРегистра Из РегистрыСКорректировкамиНачальныхОстатков() Цикл

		РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(ТекстЗапроса, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, ИмяРегистра), , , , Символы.ПС
			+ "	ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + "	");

	КонецЦикла;

	ШаблонЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Организация
		|ИЗ
		|	(%1) КАК Т";

	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, ТекстЗапроса);

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("ОтборОрганизации", ?(НЕ ЗначениеЗаполнено(МассивОрганизаций), Справочники.Организации.ДоступныеОрганизации(), ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций)));

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");

	Возврат Результат;

КонецФункции

// Возвращает доступные для расчета организации.
//
Функция ДоступныеОрганизации(МассивОрганизаций)

	Если ЗначениеЗаполнено(МассивОрганизаций) Тогда
		Возврат ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций);
	КонецЕсли;

	Возврат Справочники.Организации.ДоступныеОрганизации(Ложь, Ложь);

КонецФункции

// Дополняет перечень организаций из ОтборОрганизации остальными организациями ИБ, связанными с ними по схеме Интеркампани.
//
// Параметры:
//	Дата - Дата - период расчета
//	ОтборОрганизации - СписокЗначений, Массив или СправочникСсылка.Организации - отбор по организациям
//	Группировать - Булево - возвращать сгруппированный результат, или в все найденные организации в виде обычного массива.
//
// Возвращаемое значение:
//	Массив - если Группировать, то результат аналогичен возвращаемому значению ВсеСвязиОрганизацийПоСхемеИнтеркампани(),
//			 но возвращены будут только те группы (массивы) организаций, в которые входят организации из ОтборОрганизации
//			 Если НЕ Группировать - то эти же группы будут слиты в один массив.
//			 Т.е. по сути эта функция лишь отбор для ВсеСвязиОрганизацийПоСхемеИнтеркампани()
//			 с возможностью представления результат в "линейном" виде.
//
Функция СвязиОрганизацийПоСхемеИнтеркампани(Дата = Неопределено,
		ОтборОрганизации = Неопределено, Группировать = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;

	ОтборПоОрганизациям = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизации);

	// Получим все организации ИБ, сгруппированные по связям схемы Интеркампани
	МассивГрупп = ВсеСвязиОрганизацийПоСхемеИнтеркампани(Дата);

	// Оставим такие группы организаций, в которых хоть одна организация группы
	// нуждается в пересчете (входит в требуемый ОтборПоОрганизациям).
	Результат = Новый Массив;

	Для Каждого ЭлементГруппа Из МассивГрупп Цикл
		Для Каждого Организация Из ЭлементГруппа Цикл

			Если НЕ ЗначениеЗаполнено(ОтборПоОрганизациям)
					ИЛИ ОтборПоОрганизациям.Найти(Организация) <> Неопределено Тогда

					// Эту группу связанных организаций надо пересчитать
				Если Группировать Тогда
				// Результат в виде "массив из массивов"
					Результат.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ЭлементГруппа));
				Иначе
				// Результат в виде "массив"
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ЭлементГруппа);
				КонецЕсли;

				Прервать; // добавили всю группу - переходим к следующей
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает информацию о всех организациях ИБ, сгруппированную по их участию в схеме Интеркампани в указанном периоде.
//
// Параметры:
//	Дата - Дата - период расчета
//
// Возвращаемое значение:
//	Массив - элементами данного массива являются массивы организаций (СправочникСсылка.Организации),
//			 связанных между собой по схеме Интеркампани.
//	 	= если организация не связана с другими, то она будет в массиве одна.
//		= одна и та же организация может входить только в один массив - не может встречаться в результате функции несколько раз.
//
// Например,
//	- есть организации 1, 2, 3, 4, 5
//	- по Интеркампани товары перемещаются между организациями 1-3 и 3-5
//	- организация 2 в этом периоде работает "сама по себе", не связана с другими организациями
//	- по организации 4 в этом периоде не было движений по регистру СебестоимостьТоваров
// Возвращаемый функцией массив будет иметь следующий вид:
//	элемент(0) - массив (организация 1, организация 3, организация 5) - схема Интеркампани
//	элемент(1) - массив (организация 2) - "одиночная", несвязанная организация
//	элемент(2) - массив (организация 4) - несмотря на отсутствие по ней движений будет дополнена из справочника организаций.
//
Функция ВсеСвязиОрганизацийПоСхемеИнтеркампани(Дата) Экспорт

	МассивГрупп = Новый Массив; // результат функции - массив из массивов организаций
	УчтенныеОрганизации = Новый Массив; // связанные по Интеркампани - их не надо выбирать из справочника организаций
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СебестоимостьТоваров.Организация КАК Организация,
		|	СебестоимостьТоваров.КорОрганизация КАК КорОрганизация
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|ГДЕ
		|	СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И СебестоимостьТоваров.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СебестоимостьТоваров.Активность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СебестоимостьТоваров.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) КАК КорОрганизация
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|ГДЕ
		|	СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И СебестоимостьТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
		|	И СебестоимостьТоваров.Активность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Организация КАК Организация,
		|	Организации.КорОрганизация КАК КорОрганизация
		|ИЗ
		|	(ВЫБРАТЬ
		|		Организации.Организация КАК Организация,
		|		Организации.КорОрганизация КАК КорОрганизация
		|	ИЗ
		|		ВТОрганизации КАК Организации
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КПередаче.ОрганизацияВладелец,
		|		КПередаче.ВидЗапасовПродавца.Организация
		|	ИЗ
		|		РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПериода,
		|			ВидЗапасовПродавца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)) КАК КПередаче
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Резервы.Организация,
		|		Резервы.КорОрганизация
		|	ИЗ
		|		РегистрНакопления.РезервыТоваровОрганизаций КАК Резервы
		|	ГДЕ
		|		Резервы.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Резервы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		И Резервы.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|		И Резервы.Организация <> Резервы.КорОрганизация
		|		И Резервы.Количество > 0
		|	) КАК Организации
		|ГДЕ
		|	Организации.Организация <> Организации.КорОрганизация
		|	И Организации.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И Организации.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	КорОрганизация";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));

	РезультатЗапроса = Запрос.Выполнить();

	// Необходимо собрать в группы организации, которые участвовали в перепродажах или межфирменных перемещениях.
	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			ГруппаОрганизации = НайтиВМассивеГруппОрганизаций(Выборка.Организация, МассивГрупп);
			ГруппаКорОрганизации = НайтиВМассивеГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп);

			Если ГруппаОрганизации = Неопределено
					И ГруппаКорОрганизации = Неопределено Тогда

					// таких организаций еще не было в выборке - добавим обе организации в новую группу
				ДобавитьВМассивГруппОрганизаций(Выборка.Организация, МассивГрупп, Неопределено);
				ДобавитьВМассивГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп, МассивГрупп.Количество()
					- 1);

				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.Организация);
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.КорОрганизация);

			ИначеЕсли ГруппаОрганизации <> Неопределено
					И ГруппаКорОрганизации <> Неопределено Тогда

					// обе организации уже были в выборке
				Если ГруппаОрганизации <> ГруппаКорОрганизации Тогда
				// перенесем все организации из группы кор.организации в группу организации
					ПеренестиГруппуОрганизацийВДругуюГруппу(МассивГрупп, ГруппаОрганизации, ГруппаКорОрганизации);
				КонецЕсли;

			Иначе
			// одной из организаций еще не было в выборке
				Если ГруппаОрганизации = Неопределено Тогда
				// добавим организацию в группу кор. организации
					ДобавитьВМассивГруппОрганизаций(Выборка.Организация, МассивГрупп, ГруппаКорОрганизации);

					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.Организация);
				Иначе
				// добавим кор. организацию в группу организации
					ДобавитьВМассивГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп, ГруппаОрганизации);

					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.КорОрганизация);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	// Дополним остальными организациями из справочника.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.Ссылка В (&УчтенныеОрганизации)
		|	И ВЫБОР
		|			КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
		|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организации.Предопределенный";

	Запрос.УстановитьПараметр("УчтенныеОрганизации", УчтенныеОрганизации);
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	// Новая группа - массив с одним элементом
		ДобавитьВМассивГруппОрганизаций(Выборка.Организация, МассивГрупп, Неопределено);
	КонецЦикла;

	Возврат МассивГрупп;

КонецФункции

Функция НайтиВМассивеГруппОрганизаций(Значение, МассивГрупп)

	Для СчетчикГрупп = 0 По МассивГрупп.Количество() - 1 Цикл
		Если МассивГрупп[СчетчикГрупп].Найти(Значение) <> Неопределено Тогда
			Возврат СчетчикГрупп;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

Процедура ДобавитьВМассивГруппОрганизаций(Значение, МассивГрупп,
		ПозицияГруппы)

	Если ПозицияГруппы = Неопределено Тогда
		МассивГрупп.Добавить(Новый Массив);
		ПозицияГруппы = МассивГрупп.Количество() - 1;
	КонецЕсли;

	ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(МассивГрупп[ПозицияГруппы], Значение);

КонецПроцедуры

Процедура ПеренестиГруппуОрганизацийВДругуюГруппу(МассивГрупп,
		ПозицияГруппыКуда, ПозицияГруппыОткуда)

	Для Каждого Значение Из МассивГрупп[ПозицияГруппыОткуда] Цикл
		ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(МассивГрупп[ПозицияГруппыКуда], Значение);
	КонецЦикла;

	МассивГрупп.Удалить(ПозицияГруппыОткуда);

КонецПроцедуры

#КонецОбласти

#Область МетодыОценкиСтоимости

// По переданному массиву организаций определяет метод оценки стоимости.
//
// Параметры:
//	ПараметрыРасчета
//	МассивОрганизаций - Массив - организации.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров - метод оценки стоимости.
//
Функция ОпределитьМетодОценкиСтоимостиДляГруппыОрганизаций(ПараметрыРасчета,
		МассивОрганизаций)

	Если ПараметрыРасчета.ПредварительныйРасчет Тогда
		Возврат Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц;
	КонецЕсли;

	МетодОценкиСтоимости = Перечисления.МетодыОценкиСтоимостиТоваров.ПустаяСсылка();
	ОдинаковыйМетодОценки = Истина;
	ЕстьФИФОВзвешеннаяОценка = Ложь;
	ЕстьДругиеМетодыОценки = Ложь;
	ТекстОшибки = "";

	ЕстьФИФОСкользящаяБезПУ = Ложь;
	ОрганизацииСФИФОСкользящая = Новый Массив;

	ОрганизацииСОшибками = Неопределено;

	Для Каждого Организация Из МассивОрганизаций Цикл

		МетодОценкиПоОрганизации = ОпределитьМетодОценкиСтоимостиТоваровОрганизации(ПараметрыРасчета, Организация);

		Если ПараметрыРасчета.ПартионныйУчетВерсии22 Тогда // проверка для партионного учета версии 2.2

			// В МетодОценкиСтоимости будет записано или ФИФОВзвешеннаяОценка, если такой метод используется у всех организаций
			// или пустая ссылка, означающая, что у организаций используется как метод СредняяЗаМесяц, так и ФИФОСкользящаяОценка.
			Если МетодОценкиПоОрганизации = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОВзвешеннаяОценка Тогда
				ЕстьФИФОВзвешеннаяОценка = Истина;
				МетодОценкиСтоимости = МетодОценкиПоОрганизации;
			Иначе
				ЕстьДругиеМетодыОценки = Истина;
			КонецЕсли;

		Иначе // проверка для партионного учета версии 2.1 и отключенного партионного учета

		// Разрешен только один общий для всех организаций метод оценки, который и будет записан в МетодОценкиСтоимости.
			Если МетодОценкиСтоимости <> МетодОценкиПоОрганизации Тогда
				Если НЕ ЗначениеЗаполнено(МетодОценкиСтоимости) Тогда
					МетодОценкиСтоимости = МетодОценкиПоОрганизации; // первый проход цикла
				Иначе
					ОдинаковыйМетодОценки = Ложь;
				КонецЕсли;
			КонецЕсли;

			Если ПараметрыРасчета.ПартионныйУчетНеИспользуется
					И МетодОценкиПоОрганизации = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда

				ЕстьФИФОСкользящаяБезПУ = Истина;
				ОрганизацииСФИФОСкользящая.Добавить(Организация);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если ЕстьФИФОВзвешеннаяОценка И ЕстьДругиеМетодыОценки Тогда // проверка для партионного учета версии 2.2
		ОрганизацииСОшибками = МассивОрганизаций;
		ТекстОшибки = НСтр("ru='Недопустимое сочетание методов оценки стоимости запасов для организаций, работающих по схеме Интеркампани:
|%Организации%.
|Метод оценки ""ФИФО взвешенная оценка"" не может использоваться совместно с любыми другими методами оценки.
|Настройка метода оценки стоимости выполняется в учетной политике организаций.'
|;uk='Неприпустиме поєднання методів оцінки вартості запасів для організацій, що працюють за схемою Інтеркампані:
|%Организации%. 
|Метод оцінки ""ФІФО зважена оцінка"" не може використовуватися спільно з будь-якими іншими методами оцінки. 
|Настройка методу оцінки вартості виконується в обліковій політиці організацій.'",ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли НЕ ОдинаковыйМетодОценки Тогда // проверка для партионного учета версии 2.1
		ОрганизацииСОшибками = МассивОрганизаций;
		ТекстОшибки = НСтр("ru='Недопустимое сочетание методов оценки стоимости запасов для организаций, работающих по схеме Интеркампани:
|%Организации%.
|Для всех организаций, работающих по схеме Интеркампани, должен использоваться одинаковый метод оценки.
|Настройка метода оценки стоимости выполняется в учетной политике организаций.'
|;uk='Неприпустиме поєднання методів оцінки вартості запасів для організацій, що працюють за схемою Інтеркампані:
|%Организации%. 
|Для всіх організацій, що працюють за схемою Інтеркампані, повинен використовуватися однаковий метод оцінки. 
|Настройка методу оцінки вартості виконується в обліковій політиці організацій.'",ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ЕстьФИФОСкользящаяБезПУ Тогда
		ОрганизацииСОшибками = ОрганизацииСФИФОСкользящая;
		ТекстОшибки = НСтр("ru='Недопустимо использование метода оценки стоимости запасов ""ФИФО (скользящая оценка)"" при выключенном партионном учете:
|%Организации%.
|Настройка метода оценки стоимости выполняется в учетной политике организаций.'
|;uk='Неприпустимо використання методу оцінки вартості запасів ""ФІФО (змінна оцінка)"" при вимкненому партіонному обліку:
|%Организации%. 
|Настройка методу оцінки вартості виконується в обліковій політиці організацій.'",ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

	// Недопустимые методы оценки стоимости или их сочетание - расчет невозможен.
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Организации%", ПредставлениеОрганизаций(ОрганизацииСОшибками, ", ", Истина));

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВУчетныхПолитикахОрганизаций, ТекстОшибки, , ОрганизацииСОшибками);

		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстОшибки);

	КонецЕсли;

	Возврат МетодОценкиСтоимости;

КонецФункции

// Определяет метод оценки стоимости указанной организации.
//
// Параметры:
//	ПараметрыРасчета
//	Организация - СправочникСсылка.Организации - организация.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров - метод оценки стоимости.
//
Функция ОпределитьМетодОценкиСтоимостиТоваровОрганизации(ПараметрыРасчета,
		Организация)

		// К расчету может быть передан МассивОрганизаций, в котором содержатся не все организации, связанные по схеме Интеркампани.
	// В этом случае надо дополнить МетодыОценкиСтоимости методами оценки отсутствующих в массиве организаций.
	МетодОценкиПоОрганизации = ПараметрыРасчета.УчетныеПолитики.МетодыОценкиСтоимости.Получить(Организация);

	Если НЕ ЗначениеЗаполнено(МетодОценкиПоОрганизации) Тогда

		ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик("УчетнаяПолитикаФинансовогоУчета", Организация, ПараметрыРасчета.РасчетныйПериод.НачалоПериода);

		Если ПараметрыУчетнойПолитики <> Неопределено Тогда
			МетодОценкиПоОрганизации = ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров;
		Иначе
			МетодОценкиПоОрганизации = Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц;
		КонецЕсли;

		ПараметрыРасчета.УчетныеПолитики.МетодыОценкиСтоимости.Вставить(Организация, МетодОценкиПоОрганизации);

	КонецЕсли;

	Возврат МетодОценкиПоОрганизации;

КонецФункции

#КонецОбласти

#Область ТипыЗаписейПартий

Функция ТипыЗаписейПервичныхПартий() Экспорт

	Результат = Новый Массив;

	Результат.Добавить(Перечисления.ТипыЗаписейПартий.Партия);
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.КорректировкаСтоимости);
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.РаспределениеПоПравилам);

	Возврат Результат;

КонецФункции

Функция ТипыЗаписейКонвертацииДанных() Экспорт

	Результат = ОписаниеКорректировокНачальныхОстатков().ВыгрузитьКолонку("Корректировка");

	Возврат Результат;

КонецФункции

Функция ТипыЗаписейМногократнойКонвертацииДанных() Экспорт

	Результат = Новый Массив;

	Для Каждого ТекСтр Из ОписаниеКорректировокНачальныхОстатков() Цикл

		Если ТекСтр.ВозможноМногократноеВыполнение Тогда
			Результат.Добавить(ТекСтр.Корректировка);
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция НепересчитываемыеТипыЗаписей() Экспорт

	Результат = Новый Массив;

	// Типы записей первичных партий текущего периода.
	Для Каждого Элемент Из ТипыЗаписейПервичныхПартий() Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;

	// Типы записей конвертации данных при смене режима учета.
	Для Каждого Элемент Из ТипыЗаписейКонвертацииДанных() Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;

	// Типы записей партий прошлых периодов.
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.ОстатокНЗП);
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.Остаток);

	// Типы записей "не партий" (с нулевым количеством).
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.ПустаяСсылка());

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ТипыЗапасов

Функция СобственныеТипыЗапасов() Экспорт

	Результат = Новый Массив;

	Результат.Добавить(Перечисления.ТипыЗапасов.Товар);
	Результат.Добавить(Перечисления.ТипыЗапасов.СобственныйТоварВПути);
	Результат.Добавить(Перечисления.ТипыЗапасов.СобственныйТоварПоНеотфактурованнойПоставке);
	Результат.Добавить(Перечисления.ТипыЗапасов.Услуга);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ХозяйственныеОперации

Функция ХозяйственныеОперацииВнешнихПоступлений() Экспорт

	Результат = Новый Массив;

	Результат.Добавить(Перечисления.ХозяйственныеОперации.ВыкупПринятыхНаХранениеТоваров);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеТоваров);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Константы

Функция ОписаниеКонстантыИлиФункциональнойОпции(ИмяОбъекта) Экспорт

	Описание = Новый Структура("Значение, Метаданные");

	Если Метаданные.ФункциональныеОпции.Найти(ИмяОбъекта) <> Неопределено Тогда
		Описание.Метаданные = Метаданные.ФункциональныеОпции[ИмяОбъекта];
		Описание.Значение = ПолучитьФункциональнуюОпцию(ИмяОбъекта);
	ИначеЕсли Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
		Описание.Метаданные = Метаданные.Константы[ИмяОбъекта];
		Описание.Значение = Константы[ИмяОбъекта].Получить();
	КонецЕсли;

	Возврат Описание;

КонецФункции

#КонецОбласти

#Область ДокументыРасчетаСебестоимости

// Формирует документы расчета себестоимости для рассчитываемых организаций.
// Список документов помещается во временную таблицу ВТДокументыРасчетаСебестоимости.
//
Процедура ИнициализироватьДокументыРасчетаСебестоимости(ПараметрыРасчета,
		ПредварительныйРасчет, РегламентноеЗадание)

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТДокументыРасчетаСебестоимости");

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Если ПараметрыРасчета.Свойство("РасшифровкаРаспределения") Тогда

	// Инициализировать документы не требуется.
		Запрос.Текст = "ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК МоментВремени,
			|	Организации.Ссылка КАК Организация
			|ПОМЕСТИТЬ ВТДокументыРасчетаСебестоимости
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка В(&МассивОрганизаций)";

		Запрос.Выполнить();

		Возврат;

	КонецЕсли;

	// Выберем все не удаленные документы расчета себестоимости за расчетный период.
	// Если по организации уже существует подходящий документ расчета себестоимости, то новый документ создаваться не будет.
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Ссылка КАК Ссылка,
		|	Т.Ссылка.Проведен КАК Проведен,
		|	Т.Ссылка.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА Т.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НовыйФорматДокумента,
		|	ВЫБОР
		|		КОГДА Т.Организация В (&ОрганизацииСДвижениямиПоСебестоимости)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НетДанныхДляРасчета,
		|	Т.Ссылка.ПредварительныйРасчет КАК ПредварительныйРасчет
		|ИЗ
		|	Документ.РасчетСебестоимостиТоваров.Организации КАК Т
		|ГДЕ
		|	Т.Ссылка.Дата МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ)
		|	И НЕ Т.Ссылка.ПометкаУдаления
		|	И Т.Организация В (&ТекущийОтборОрганизации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	НовыйФорматДокумента УБЫВ,
		|	Проведен УБЫВ,
		|	ПредварительныйРасчет,
		|	Т.Ссылка.Дата УБЫВ";

		// Сохраним связь Организация - Документ расчета себестоимости, который будем пересчитывать.
	ДокументыРасчетаПоОрганизациям = Новый Соответствие;
	// Сохраним перечень документов расчета себестоимости.
	ДокументыРасчетаСебестоимости = Новый Массив;
	// Сохраним перечень устаревших документов расчета себестоимости, которые нужно удалить.
	ДокументыКУдаления = Новый Массив;
	// Сохраним все организации из ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани.
	МассивОрганизацийДляРасчета = Новый Массив;

	НомерГруппы = 0;

	Пока НомерГруппы < ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани.Количество() Цикл

		ГруппаОрганизаций = ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани[НомерГруппы];

		// Получим таблицу существующих документов расчета себестоимости для группы связанных организаций.
		Запрос.УстановитьПараметр("ТекущийОтборОрганизации", ГруппаОрганизаций);

		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		ТаблицаДокументов.Индексы.Добавить("Организация, ПредварительныйРасчет");

		// Удалим все документы расчета себестоимости в "старом формате" - когда организации не было в шапке документа.
		УдалитьДокументыРасчетаСебестоимости(ДокументыКУдаления, ТаблицаДокументов, Новый Структура("НовыйФорматДокумента", Ложь));

		ВозможенРасчет = Истина;

		// По организации за период может оказаться несколько документов расчета себестоимости - оставим только один.
		Для Каждого ТекущаяОрганизация Из ГруппаОрганизаций Цикл

			МассивОрганизацийДляРасчета.Добавить(ТекущаяОрганизация);

			СтрокиФакт = ТаблицаДокументов.НайтиСтроки(Новый Структура("Организация, ПредварительныйРасчет", ТекущаяОрганизация, Ложь));

			Если СтрокиФакт.Количество() > 0 Тогда
			// Документы предварительного расчета больше не нужны.
				УдалитьДокументыРасчетаСебестоимости(ДокументыКУдаления, ТаблицаДокументов, Новый Структура("Организация, ПредварительныйРасчет", ТекущаяОрганизация, Истина));
			КонецЕсли;

			Если РегламентноеЗадание И СтрокиФакт.Количество() > 0 Тогда
			// Т.к. уже есть документы фактического расчета,
				// то предварительный расчет регламентным заданием по этой группе больше не выполняем.
				ВозможенРасчет = Ложь;
				Продолжить;
			КонецЕсли;

			// Оставим только один документ для расчета, самый поздний по дате (если почему-то документов осталось несколько).
			ДокументРасчета = УдалитьДокументыРасчетаСебестоимости(ДокументыКУдаления, ТаблицаДокументов, Новый Структура("Организация", ТекущаяОрганизация), Истина);

			ДокументыРасчетаПоОрганизациям.Вставить(ТекущаяОрганизация, ДокументРасчета);

		КонецЦикла;

		Если НЕ ВозможенРасчет Тогда

			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Расчет предварительной себестоимости за %1 по %2 регламентным заданием не выполнялся,
|т.к. уже выполнен расчет фактической себестоимости'
|;uk='Розрахунок попередньої собівартості за %1 по %2 регламентним завданням не виконувався, 
|тому що вже виконано розрахунок фактичної собівартості'",ОбщегоНазначения.КодОсновногоЯзыка()), РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета), ?(ГруппаОрганизаций.Количество() > 1, "организациям", "организации")
				+ " """ + ПредставлениеОрганизаций(ГруппаОрганизаций, , Истина) + """");

			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииДокументовРасчетаСебестоимости, ТекстОшибки, ТекстОшибки, ГруппаОрганизаций);

			Для Каждого ТекущаяОрганизация Из ГруппаОрганизаций Цикл
				ДокументыРасчетаПоОрганизациям.Удалить(ТекущаяОрганизация); // расчета по группе не будет, документы не обрабатываем
			КонецЦикла;

			ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани.Удалить(НомерГруппы);
			ПараметрыРасчета.МетодыОценкиПоГруппамОрганизаций.Удалить(НомерГруппы);

			Продолжить;

		КонецЕсли;

		НомерГруппы = НомерГруппы + 1;

	КонецЦикла;

	// Удалим ранее сформированные документы расчета себестоимости по организациям, по которым расчет проводить не нужно.
	МассивНеРассчитываемых = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПараметрыРасчета.МассивОрганизаций, МассивОрганизацийДляРасчета);

	Если МассивНеРассчитываемых.Количество() > 0 Тогда

		Запрос.УстановитьПараметр("ТекущийОтборОрганизации", МассивНеРассчитываемых);

		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();

		УдалитьДокументыРасчетаСебестоимости(ДокументыКУдаления, ТаблицаДокументов);

	КонецЕсли;

	НачатьТранзакцию();

	Попытка

	// Установим блокировку на изменяемые документы.
		ДокументыКБлокировке = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ДокументыКУдаления);

		Для Каждого КлючИЗначение Из ДокументыРасчетаПоОрганизациям Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументыКБлокировке.Добавить(КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;

		Если ДокументыКБлокировке.Количество() > 0 Тогда

			Запрос.Текст = "ВЫБРАТЬ
				|	Т.Ссылка КАК Документ
				|ИЗ
				|	Документ.РасчетСебестоимостиТоваров КАК Т
				|ГДЕ
				|	Т.Ссылка В (&ДокументыКБлокировке)";

			Запрос.УстановитьПараметр("ДокументыКБлокировке", ДокументыКБлокировке);

			РезультатЗапроса = Запрос.Выполнить();

			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.РасчетСебестоимостиТоваров");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Документ");
			Блокировка.Заблокировать();

		КонецЕсли;

		ОшибкиДатЗапретаИзменения = "";

		// Удалим ненужные документы расчета себестоимости.
		Для Каждого ТекущийДокумент Из ДокументыКУдаления Цикл

			ДокументОбъект = ТекущийДокумент.ПолучитьОбъект();

			// Проверим, что документ находится в доступном для изменения периоде.
			ОписаниеОшибкиДаты = "";

			Если ДатыЗапретаИзменения.ИзменениеЗапрещено(ДокументОбъект, ТекущийДокумент, ОписаниеОшибкиДаты) Тогда
			// Накопим описание ошибок и потом вызовем одно исключение для всех документов.
				ОшибкиДатЗапретаИзменения = ОшибкиДатЗапретаИзменения
					+ ?(ОшибкиДатЗапретаИзменения = "", "", "
					|")
					+ РасчетСебестоимостиПротоколРасчета.ПредставлениеМногострочногоТекста(ОписаниеОшибкиДаты);
				Продолжить;
			КонецЕсли;

			ДокументОбъект.УстановитьПометкуУдаления(Истина);

			// Очистим задание к расчету, которое запишется из события в модуле набора записей.
			НаборЗаписей = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(ТекущийДокумент);
			НаборЗаписей.Записать(Истина);

		КонецЦикла;

		// Создадим новые или обновим существующие документы расчета себестоимости по организациям.
		Для Каждого КлючИЗначение Из ДокументыРасчетаПоОрганизациям Цикл

			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументОбъект = КлючИЗначение.Значение.ПолучитьОбъект();
			Иначе
				ДокументОбъект = Документы.РасчетСебестоимостиТоваров.СоздатьДокумент();
			КонецЕсли;

			ДанныеЗаполненияДокумента = Новый Структура;
			ДанныеЗаполненияДокумента.Вставить("Дата", ПараметрыРасчета.РасчетныйПериод.КонецПериода);
			ДанныеЗаполненияДокумента.Вставить("Организация", КлючИЗначение.Ключ);
			ДанныеЗаполненияДокумента.Вставить("ПредварительныйРасчет", ПредварительныйРасчет);

			ДанныеЗаполненияДокумента.Вставить("МетодОценки", ОпределитьМетодОценкиСтоимостиТоваровОрганизации(ПараметрыРасчета, ДанныеЗаполненияДокумента.Организация));

			// В шапке документа будет указана организация, по которой рассчитывается себестоимость.
			// Она же будет продублирована в табличной части документа.
			ДокументОбъект.Заполнить(ДанныеЗаполненияДокумента);

			// Проверим, что документ находится в доступном для изменения периоде.
			ОписаниеОшибкиДаты = "";

			Если ДатыЗапретаИзменения.ИзменениеЗапрещено(ДокументОбъект, КлючИЗначение.Значение, ОписаниеОшибкиДаты) Тогда
			// Накопим описание ошибок и потом вызовем одно исключение для всех документов.
				ОшибкиДатЗапретаИзменения = ОшибкиДатЗапретаИзменения
					+ ?(ОшибкиДатЗапретаИзменения = "", "", "
					|")
					+ РасчетСебестоимостиПротоколРасчета.ПредставлениеМногострочногоТекста(ОписаниеОшибкиДаты);
				Продолжить;
			КонецЕсли;

			// Записываем документ проведенным, при этом его старые движения останутся до окончания расчета.
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);

			// Запомним документ
			ДокументыРасчетаСебестоимости.Добавить(ДокументОбъект.Ссылка);
			ДокументыРасчетаПоОрганизациям[КлючИЗначение.Ключ] = ДокументОбъект.Ссылка;

		КонецЦикла;

		Если ЗначениеЗаполнено(ОшибкиДатЗапретаИзменения) Тогда
		// Исключение будет отловлено ниже по коду этой процедуры, вместе с другими ошибками записи документов.
			ВызватьИсключение ОшибкиДатЗапретаИзменения;
		КонецЕсли;

		ПараметрыРасчета.Вставить("ДокументыРасчетаСебестоимости", ДокументыРасчетаСебестоимости);
		ПараметрыРасчета.Вставить("ДокументыРасчетаПоОрганизациям", ДокументыРасчетаПоОрганизациям);

		// Документ расчета себестоимости больше не имеет движений по регистрам:
		//	- ВыручкаИСебестоимостьПродаж
		//	- Закупки
		// Поэтому, если пересчитываем прошлый период, то движения документа "Расчет себестоимости товаров" по этим регистрам
		// надо очистить.
		Запрос.УстановитьПараметр("ДокументыРасчетаСебестоимости", ДокументыРасчетаСебестоимости);

		ШаблонТекстаЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрНакопления.%1 КАК Т
			|ГДЕ
			|	Т.Регистратор В (&ДокументыРасчетаСебестоимости)";

		СтруктураРегистров = Новый Структура("ВыручкаИСебестоимостьПродаж, Закупки");

		ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ, ПараметрыРасчета.НомерЗаданияДоРасчета);

		Для Каждого КлючИЗначение Из СтруктураРегистров Цикл

			ИмяРегистра = КлючИЗначение.Ключ;

			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ИмяРегистра);

			ЗаписатьДвиженияПоРегистру(Запрос, РегистрыНакопления[ИмяРегистра], ПараметрыЗаписи);

		КонецЦикла;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось инициализировать документы расчета себестоимости по причине:
|%1'
|;uk='Не вдалося ініціалізувати документи розрахунку собівартості з причини: 
|%1'",ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииДокументовРасчетаСебестоимости, ТекстДляПротокола);

		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

	КонецПопытки;

	// Сформируем временную таблицу ВТДокументыРасчетаСебестоимости
	Запрос.Текст = "ВЫБРАТЬ
		|	Т.Ссылка,
		|	Т.МоментВремени,
		|	Т.Организация КАК Организация
		|ПОМЕСТИТЬ ВТДокументыРасчетаСебестоимости
		|ИЗ
		|	Документ.РасчетСебестоимостиТоваров КАК Т
		|ГДЕ
		|	Т.Ссылка В (&ДокументыРасчетаСебестоимости)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация";

	Запрос.Выполнить();

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);

КонецПроцедуры

// Формирует документы расчета себестоимости за прошлый период для рассчитываемых организаций.
// Список документов помещается во временную таблицу ВТДокументыРасчетаСебестоимостиПрошлогоПериода.
//
Процедура ИнициализироватьДокументыРасчетаСебестоимостиПрошлогоПериода(ПараметрыРасчета) Экспорт

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТДокументыРасчетаСебестоимостиПрошлогоПериода");

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	// Выберем все не удаленные документы расчета себестоимости за прошлый период.
	// Если по организации уже существует подходящий документ расчета себестоимости, то новый документ создаваться не будет.
	Запрос.Текст = "ВЫБРАТЬ
		|	СпрОрганизации.Ссылка КАК Организация,
		|	МАКСИМУМ(ЕСТЬNULL(РасчетСебестоимостиТоваров.Ссылка, НЕОПРЕДЕЛЕНО)) КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК СпрОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимостиТоваров
		|		ПО (СпрОрганизации.Ссылка = РасчетСебестоимостиТоваров.Организация)
		|			И (РасчетСебестоимостиТоваров.Дата МЕЖДУ &НачалоПредыдущегоПериода И &КонецПредыдущегоПериода)
		|			И (РасчетСебестоимостиТоваров.Проведен)
		|			И (НЕ РасчетСебестоимостиТоваров.ПредварительныйРасчет)
		|ГДЕ
		|	СпрОрганизации.Ссылка В(&ОрганизацииСОстаткамиПоСебестоимости)
		|
		|СГРУППИРОВАТЬ ПО
		|	СпрОрганизации.Ссылка";

	ДокументыРасчетаПоОрганизациям = Новый Соответствие;
	ДокументыРасчетаСебестоимости = Новый Массив;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументыРасчетаПоОрганизациям.Вставить(Выборка.Организация, Выборка.Ссылка);
	КонецЦикла;

	Попытка

	// Создадим недостающие документы расчета себестоимости по организациям.
		Для Каждого КлючИЗначение Из ДокументыРасчетаПоОрганизациям Цикл

			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументыРасчетаСебестоимости.Добавить(КлючИЗначение.Значение);
				Продолжить;
			КонецЕсли;

			ДокументОбъект = Документы.РасчетСебестоимостиТоваров.СоздатьДокумент();

			ДанныеЗаполненияДокумента = Новый Структура;
			ДанныеЗаполненияДокумента.Вставить("Дата", ПараметрыРасчета.РасчетныйПериод.КонецПредыдущегоПериода);
			ДанныеЗаполненияДокумента.Вставить("Организация", КлючИЗначение.Ключ);
			ДанныеЗаполненияДокумента.Вставить("ПредварительныйРасчет", Ложь);

			ДанныеЗаполненияДокумента.Вставить("МетодОценки", ОпределитьМетодОценкиСтоимостиТоваровОрганизации(ПараметрыРасчета, ДанныеЗаполненияДокумента.Организация));

			ДокументОбъект.Заполнить(ДанныеЗаполненияДокумента);

			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);

			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);

			// Запомним документ
			ДокументыРасчетаСебестоимости.Добавить(ДокументОбъект.Ссылка);
			ДокументыРасчетаПоОрганизациям[КлючИЗначение.Ключ] = ДокументОбъект.Ссылка;

		КонецЦикла;

		Запрос.УстановитьПараметр("ДокументыРасчетаСебестоимости", ДокументыРасчетаСебестоимости);

	Исключение

		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось инициализировать документы расчета себестоимости прошлого периода по причине:
|%1'
|;uk='Не вдалося ініціалізувати документи розрахунку собівартості минулого періоду з причини: 
|%1'",ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииДокументовРасчетаСебестоимости, ТекстДляПротокола);

		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);

	КонецПопытки;

	// Сформируем временную таблицу ВТДокументыРасчетаСебестоимости
	Запрос.Текст = "ВЫБРАТЬ
		|	Т.Ссылка,
		|	Т.МоментВремени,
		|	Т.Организация КАК Организация
		|ПОМЕСТИТЬ ВТДокументыРасчетаСебестоимостиПрошлогоПериода
		|ИЗ
		|	Документ.РасчетСебестоимостиТоваров КАК Т
		|ГДЕ
		|	Т.Ссылка В (&ДокументыРасчетаСебестоимости)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация";

	Запрос.Выполнить();

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);

КонецПроцедуры

// Проверяет наличие регламентных документов расчета себестоимости товаров.
//
Функция ЕстьДокументыРасчетаСебестоимости(ПериодРасчета,
		МассивОрганизаций) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров.Организации КАК РассчитанныеОрганизации
		|		ПО Организации.Ссылка = РассчитанныеОрганизации.Организация
		|			И (РассчитанныеОрганизации.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
		|			И (РассчитанныеОрганизации.Ссылка.Проведен)
		|			И (НЕ РассчитанныеОрганизации.Ссылка.ПредварительныйРасчет)
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)
		|	И РассчитанныеОрганизации.Организация ЕСТЬ NULL 
		|";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);

	Результат = Запрос.Выполнить();

	Возврат Результат.Пустой();

КонецФункции

// Выполняет удаление лишних документов расчета себестоимости из таблицы документов.
//
// Параметры:
// 	ДокументыКУдаления - Массив -
// 	ТаблицаДокументов - ТаблицаЗначений - Описание:
// 	* Ссылка - ДокументСсылка -
// 	Отбор - Структура, Неопределено - Описание:
// * Организация 
// 	ОставитьПервый - Булево - Описание
// Возвращаемое значение:
// 	Неопределено - Описание
Функция УдалитьДокументыРасчетаСебестоимости(ДокументыКУдаления,
		ТаблицаДокументов, Отбор = Неопределено, ОставитьПервый = Ложь)

	ОставленныйДокумент = Неопределено;

	Если Отбор = Неопределено Тогда
		СтрокиТаблицы = ТаблицаДокументов; // вся таблица
	ИначеЕсли ТипЗнч(Отбор) = Тип("Структура") Тогда
		СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Отбор); // отобранные строки
	Иначе
		СтрокиТаблицы = Отбор; // уже готовый массив строк
	КонецЕсли;

	Индекс = 0;

	Для Каждого ТекущаяСтрока Из СтрокиТаблицы Цикл

		Индекс = Индекс + 1;
		Если ОставитьПервый И Индекс = 1 Тогда
			ОставленныйДокумент = ТекущаяСтрока.Ссылка;
			Продолжить;
		КонецЕсли;

		ДокументыКУдаления.Добавить(ТекущаяСтрока.Ссылка);

		ТаблицаДокументов.Удалить(ТекущаяСтрока);

	КонецЦикла;

	Возврат ОставленныйДокумент;

КонецФункции

#КонецОбласти

#Область ПоследовательностиРасчета

// Возвращает фактическое требуемое начало периода расчета.
//
Функция НачалоПериодаРасчета(Дата, МассивОрганизаций) Экспорт
	Перем Результат;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ)) КАК Месяц
		|ПОМЕСТИТЬ ВТПериоды
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
		|		ПО Организации.Ссылка = Задания.Организация
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)
		|
		|СГРУППИРОВАТЬ ПО
		|	Организации.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(Периоды.Месяц) КАК НачалоПериодаРасчета
		|ИЗ
		|	ВТПериоды КАК Периоды
		|ГДЕ
		|	Периоды.Месяц ЕСТЬ НЕ NULL 
		|	И Периоды.Месяц <= &Дата
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(Периоды.Месяц) ЕСТЬ НЕ NULL ";

	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = ?(ЗначениеЗаполнено(Выборка.НачалоПериодаРасчета), НачалоМесяца(Выборка.НачалоПериодаРасчета), Неопределено);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = КонецМесяца(Дата) + 1;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает пустую схему пересчета партий и себестоимости.
//
// Возвращаемое значение:
//	ТаблицаЗначений - пустая таблица значений, состав колонок см. в теле функции.
//
Функция ПустаяСхемаРасчетаПартий() Экспорт

	СхемаРасчета = Новый ТаблицаЗначений; // результат выполнения этой функции
	СхемаРасчета.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата")); // требуемый период пересчета
	СхемаРасчета.Колонки.Добавить("Организации", Новый ОписаниеТипов("Массив")); // массив организаций, которые надо пересчитать в этом периоде
	СхемаРасчета.Колонки.Добавить("ПредставлениеОрганизаций", Новый ОписаниеТипов("Строка")); // строковое представление организаций
	СхемаРасчета.Колонки.Добавить("ИзмененоДокументов", Новый ОписаниеТипов("Число")); // для информации, количество измененных документов в этом периоде по этим организациям
	СхемаРасчета.Индексы.Добавить("Дата");

	Возврат СхемаРасчета;

КонецФункции

// Возвращает информацию о том, в каких периодах и по каким организациям необходимо пересчитать партии и себестоимость.
// Параметрами функции являются требуемые отборы по дате и организациям,
// а результат - это необходимые по факту (по данным ИБ) пересчеты.
// Например, может получится так, что
//	- пересчитать хочется только одну организацию в текущем месяце,
//  - но для этого надо пересчитать все организации начиная с прошлого года,
//	  т.к. по ним есть записи в регистре ЗаданияКРасчетуСебестоимости и организации связаны по схеме Интеркампани.
//
// Параметры:
//	Дата - Дата - конец периода (месяца), в котором надо выполнить пересчет
//	ОтборОрганизации - СправочникСсылка.Организации, Массив - организации, по которым надо выполнить пересчет
//	РазделительВПредставлении - Строка - символ-разделитель в строковом представлении списка организаций
//	НомерЗадания - Число - Номер для фильтрация записей в регистре ЗаданияКРасчетуСебестоимости.
//
// Возвращаемое значение:
//	ТаблицаЗначений - схема выполнения пересчета партий и себестоимости, описание см. в ПустаяСхемаРасчетаПартий()
// 	Таблица отсортирована по колонке Дата и содержит все периоды (без пропусков),
// 	начиная с самой ранней необходимой даты пересчета и до даты из параметра Дата.
// 	В таблице не будет строк если пересчет не требуется,
// 	т.е. если параметр Дата больше, чем даты в записях регистра ЗаданияКРасчетуСебестоимости.
//
Функция СхемаРасчетаПартий(Знач Дата = Неопределено,
		ОтборОрганизации = Неопределено, РазделительВПредставлении = Неопределено,
		НомерЗадания = 0) Экспорт

	Дата = КонецМесяца(?(НЕ ЗначениеЗаполнено(Дата), ТекущаяДатаСеанса(), Дата));
	МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизации);
	ПолныйМассивОрганизаций = СвязиОрганизацийПоСхемеИнтеркампани(Дата, МассивОрганизаций);

	СхемаРасчета = ПустаяСхемаРасчетаПартий(); // результат выполнения этой функции
	Если НЕ РасчетСебестоимостиПовтИсп.ВозможенРасчетСебестоимости(НачалоМесяца(Дата)) Тогда
		Возврат СхемаРасчета;
	КонецЕсли;

	ДатыПересчетаПоОрганизациям = Новый Соответствие; // Организация - Дата, с которой по ней необходим пересчет
	СамаяРанняяДатаПересчета = КонецМесяца(КонецМесяца(Дата) + 1);

	ТребуетсяПересчетПоИсходнымОрганизациям = Ложь;

	// Запомним даты начала пересчета по каждой организации.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Задания.Организация КАК Организация,
		|	МИНИМУМ(КОНЕЦПЕРИОДА(Задания.Месяц, МЕСЯЦ)) КАК Месяц
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО Задания.Организация = Организации.Ссылка
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ) <= &Дата
		|	И (Задания.НомерЗадания <= &НомерЗадания ИЛИ &ПоВсемНомерамЗаданий)
		|	И НЕ Организации.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
		|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	Задания.Организация";

	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("ПоВсемНомерамЗаданий", НомерЗадания = 0);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Если ПолныйМассивОрганизаций.Найти(Выборка.Организация) <> Неопределено Тогда
			ТребуетсяПересчетПоИсходнымОрганизациям = Истина;
		КонецЕсли;

		ДатыПересчетаПоОрганизациям.Вставить(Выборка.Организация, Выборка.Месяц);
		СамаяРанняяДатаПересчета = Мин(СамаяРанняяДатаПересчета, Выборка.Месяц);

	КонецЦикла;

	// Соберем статистику изменения документов - для понимания интенсивности изменения документов "задним числом".
	Запрос.Текст = "ВЫБРАТЬ
		|	КОНЕЦПЕРИОДА(Задания.Месяц, МЕСЯЦ) КАК Месяц,
		|	Задания.Организация КАК Организация,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задания.Документ) КАК ИзмененоДокументов
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО Задания.Организация = Организации.Ссылка
		|ГДЕ
		|	Задания.Документ <> НЕОПРЕДЕЛЕНО
		|	И НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ) <= &Дата
		|	И (Задания.НомерЗадания <= &НомерЗадания ИЛИ &ПоВсемНомерамЗаданий)
		|	И НЕ Организации.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
		|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	КОНЕЦПЕРИОДА(Задания.Месяц, МЕСЯЦ),
		|	Задания.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Месяц,
		|	Организация";

	ТаблицаИзмененныхДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаИзмененныхДокументов.Индексы.Добавить("Месяц, Организация");

	// Добавим в схему расчета строки для каждого периода, начиная с самого раннего и до рассчитываемого периода.
	ОбрабатываемаяДата = СамаяРанняяДатаПересчета;

	Пока ОбрабатываемаяДата <= Дата Цикл

		ДобавитьСтрокуСхемыРасчетаПартий(СхемаРасчета, ОбрабатываемаяДата, ?(ОбрабатываемаяДата = Дата, ПолныйМассивОрганизаций, Новый Массив));

		ОбрабатываемаяДата = КонецМесяца(КонецМесяца(ОбрабатываемаяДата) + 1);

	КонецЦикла;

	// Заполним итеративно организации для перерасчета.
	ОбрабатываемаяДата = Макс(СамаяРанняяДатаПересчета, Дата);

	Пока ОбрабатываемаяДата <= Дата Цикл

		ТекущаяСтрока = СхемаРасчета.Найти(ОбрабатываемаяДата, "Дата");
		ПредыдущаяСтрока = СхемаРасчета.Найти(НачалоМесяца(ОбрабатываемаяДата)
			- 1, "Дата");

		Если ПредыдущаяСтрока <> Неопределено Тогда

			ПоявилисьИзмененияВМассивеОрганизаций = Ложь;

			// Организации, которые пересчитывались в прошлом периоде, надо пересчитать и в текущем.
			Для Каждого ПредыдущаяОрганизация Из ПредыдущаяСтрока.Организации Цикл
				Если ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТекущаяСтрока.Организации, ПредыдущаяОрганизация) Тогда
					ПоявилисьИзмененияВМассивеОрганизаций = Истина;
				КонецЕсли;
			КонецЦикла;

			// Дополним массив рассчитываемых организаций связанными с ними организациями.
			Если ПоявилисьИзмененияВМассивеОрганизаций Тогда
				ТекущаяСтрока.Организации = СвязиОрганизацийПоСхемеИнтеркампани(ТекущаяСтрока.Дата, ТекущаяСтрока.Организации);
			КонецЕсли;

		КонецЕсли;

		ИзмененнаяОбрабатываемаяДата = ОбрабатываемаяДата;

		// Проверим необходимость пересчета организаций текущего периода в более ранних периодах.
		Для Каждого ТекущаяОрганизация Из ТекущаяСтрока.Организации Цикл

			ДатаПересчетаПоОрганизации = ДатыПересчетаПоОрганизациям[ТекущаяОрганизация];

			Если ЗначениеЗаполнено(ДатаПересчетаПоОрганизации)
					И ДатаПересчетаПоОрганизации < ОбрабатываемаяДата Тогда

				СтрокаПоДатеОрганизации = СхемаРасчета.Найти(ДатаПересчетаПоОрганизации, "Дата");

				Если ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(СтрокаПоДатеОрганизации.Организации, ТекущаяОрганизация) Тогда
				// Такая организация в том периоде еще не была отобрана для пересчета.
					ИзмененнаяОбрабатываемаяДата = Мин(ИзмененнаяОбрабатываемаяДата, ДатаПересчетаПоОрганизации);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		Если ИзмененнаяОбрабатываемаяДата < ОбрабатываемаяДата Тогда

		// Следующий цикл начнем с самого раннего измененного прошлого периода.
			ОбрабатываемаяДата = ИзмененнаяОбрабатываемаяДата;

			// Дополним в нем массив рассчитываемых организаций связанными с ними организациями.
			ТекущаяСтрока = СхемаРасчета.Найти(ОбрабатываемаяДата, "Дата");
			ТекущаяСтрока.Организации = СвязиОрганизацийПоСхемеИнтеркампани(ТекущаяСтрока.Дата, ТекущаяСтрока.Организации);

		Иначе

		// В прошлых периодах ничего не поменялось - переходим к следующему периоду.
			ОбрабатываемаяДата = КонецМесяца(КонецМесяца(ОбрабатываемаяДата) + 1);

		КонецЕсли;

	КонецЦикла;

	Пока СхемаРасчета.Количество() > 0
		И СхемаРасчета[0].Организации.Количество() = 0 Цикл
		// Удалим строки ранних периодов, в которых нет организаций для пересчета.
		СхемаРасчета.Удалить(0);
	КонецЦикла;

	Если СхемаРасчета.Количество() > 0
			И ЗначениеЗаполнено(МассивОрганизаций) Тогда

			// Если в составленную схему расчета (по И)
		// - не попала ни одна организация, не входящая исходный отбор (с учетом Интеркампани)
		// - по самим организациям, входящим с исходный отбор, пересчет не требуется
		// то выполнять расчет не требуется.
		ПересечениеМассивов = ОбщегоНазначенияУТКлиентСервер.ПересечениеМассивов(ПолныйМассивОрганизаций, СхемаРасчета[СхемаРасчета.Количество()
			- 1].Организации);

		Если ПересечениеМассивов.Количество() = ПолныйМассивОрганизаций.Количество() // только организации из исходного отбора
			И НЕ ТребуетсяПересчетПоИсходнымОрганизациям Тогда // пересчет по этим организациям не требуется
			СхемаРасчета.Очистить();

		КонецЕсли;

	КонецЕсли;

	СписокОрганизаций = Новый СписокЗначений;

	Для Каждого ТекущаяСтрока Из СхемаРасчета Цикл

	// Сформируем строковые представления пересчитываемых организаций.
		СписокОрганизаций.ЗагрузитьЗначения(ТекущаяСтрока.Организации);
		СписокОрганизаций.СортироватьПоЗначению();

		ТекущаяСтрока.Организации = СписокОрганизаций.ВыгрузитьЗначения();
		ТекущаяСтрока.ПредставлениеОрганизаций = ПредставлениеОрганизаций(ТекущаяСтрока.Организации, РазделительВПредставлении);
		ТекущаяСтрока.ИзмененоДокументов = 0;

		// Заполним статистику изменения документов за период по массиву организаций.
		Для Каждого ТекущаяОрганизация Из ТекущаяСтрока.Организации Цикл

			СтрокиДокументов = ТаблицаИзмененныхДокументов.НайтиСтроки(Новый Структура("Месяц, Организация", ТекущаяСтрока.Дата, ТекущаяОрганизация));

			Если СтрокиДокументов.Количество() = 1 Тогда
				ТекущаяСтрока.ИзмененоДокументов = ТекущаяСтрока.ИзмененоДокументов
					+ СтрокиДокументов[0].ИзмененоДокументов;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	// Исключим из схемы расчета периоды, в которых учет себестоимости не ведется.
	Пока СхемаРасчета.Количество() > 0
		И НЕ РасчетСебестоимостиПовтИсп.ВозможенРасчетСебестоимости(НачалоМесяца(СхемаРасчета[0].Дата)) Цикл

		РегистрыСведений.ЗаданияКРасчетуСебестоимости.ОчиститьЗаписиЗаПериод(НачалоМесяца(СхемаРасчета[0].Дата), КонецМесяца(СхемаРасчета[0].Дата), СхемаРасчета[0].Организации);

		СхемаРасчета.Удалить(0);

	КонецЦикла;

	Возврат СхемаРасчета;

КонецФункции

Процедура ДобавитьСтрокуСхемыРасчетаПартий(СхемаРасчета, Дата,
		МассивОрганизаций, ЗаполнятьПредставление = Ложь) Экспорт

	НоваяСтрока = СхемаРасчета.Добавить();
	НоваяСтрока.Дата = КонецМесяца(Дата);
	НоваяСтрока.Организации = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивОрганизаций);

	Если ЗаполнятьПредставление Тогда
		НоваяСтрока.ПредставлениеОрганизаций = ПредставлениеОрганизаций(НоваяСтрока.Организации);
	КонецЕсли;

КонецПроцедуры

// Возвращает увеличенный перед началом расчета номер задания к расчету.
//
Функция УвеличитьНомерЗаданияКРасчетуСебестоимости() Экспорт

	НомерЗадания = РегистрыСведений.ЗаданияКРасчетуСебестоимости.УвеличитьНомерЗадания();

	Возврат НомерЗадания;

КонецФункции

// Устанавливает признак окончания расчета партий в указанном периоде.
//
Процедура УвеличитьПериодРасчетаСебестоимости(РассчитанныйПериод,
		МассивОрганизаций, ВременныеТаблицы,
		ПараметрыРасчета = Неопределено) Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если НачалоПериодаРасчета(РассчитанныйПериод, МассивОрганизаций) < НачалоМесяца(РассчитанныйПериод)
	 И (ПараметрыРасчета = Неопределено ИЛИ НЕ ПараметрыРасчета.Отладка.ОтключитьРасчетСебестоимостиВПрошлыхПериодах) Тогда
		Возврат; // есть более ранние нерассчитанные периоды
	КонецЕсли;

	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ИсходныеЗадания.Месяц,
		|	ИсходныеЗадания.НомерЗадания,
		|	ИсходныеЗадания.Организация,
		|	ИсходныеЗадания.Документ
		|ПОМЕСТИТЬ ЗаданияКОчистке
		|ИЗ
		|	ИсходныеЗадания КАК ИсходныеЗадания
		|ГДЕ
		|	ИсходныеЗадания.Месяц МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&СледующийМесяц КАК Месяц,
		|	МАКСИМУМ(ЗаданияКОчистке.НомерЗадания) КАК НомерЗадания,
		|	ЗаданияКОчистке.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК Документ
		|ПОМЕСТИТЬ НовыеГраницы
		|ИЗ
		|	ЗаданияКОчистке КАК ЗаданияКОчистке
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаданияКОчистке.Организация 
		|;
		|////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеЗадания.Месяц,
		|	ИсходныеЗадания.НомерЗадания,
		|	ИсходныеЗадания.Организация,
		|	ИсходныеЗадания.Документ
		|ПОМЕСТИТЬ ИсходныеЗаданияВрем
		|ИЗ
		|	ИсходныеЗадания КАК ИсходныеЗадания
		|	
		|ГДЕ
		|	НЕ (ИсходныеЗадания.Месяц МЕЖДУ &НачалоПериода И &КонецПериода)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НовыеГраницы.Месяц КАК Месяц,
		|	НовыеГраницы.НомерЗадания КАК НомерЗадания,
		|	НовыеГраницы.Организация КАК Организация,
		|	НовыеГраницы.Документ КАК Документ
		|ИЗ
		|	НовыеГраницы КАК НовыеГраницы
		|;
		|////////////////////////////////////////////
		|УНИЧТОЖИТЬ ИсходныеЗадания
		|;
		|////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеЗадания.Месяц,
		|	ИсходныеЗадания.НомерЗадания,
		|	ИсходныеЗадания.Организация,
		|	ИсходныеЗадания.Документ
		|ПОМЕСТИТЬ ИсходныеЗадания
		|ИЗ
		|	ИсходныеЗаданияВрем КАК ИсходныеЗадания
		|;
		|////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданияКОчистке.Месяц,
		|	ЗаданияКОчистке.НомерЗадания,
		|	ЗаданияКОчистке.Организация,
		|	ЗаданияКОчистке.Документ
		|ИЗ
		|	ЗаданияКОчистке КАК ЗаданияКОчистке
		|;
		|////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеГраницы.Месяц КАК Месяц,
		|	НовыеГраницы.НомерЗадания КАК НомерЗадания,
		|	НовыеГраницы.Организация КАК Организация,
		|	НовыеГраницы.Документ КАК Документ
		|ИЗ
		|	НовыеГраницы КАК НовыеГраницы
		|");

	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("СледующийМесяц", КонецМесяца(РассчитанныйПериод)
		+ 1);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);

	Результаты = Запрос.ВыполнитьПакет(); 
	НачатьТранзакцию();

	Попытка

	// Очистим рассчитанные периоды.
		Выборка = Результаты.Получить(5).Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			Набор.Записать(Истина);
		КонецЦикла;

		// Сдвинем период расчета.
		Выборка = Результаты.Получить(6).Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Набор.Записать(Истина);
		КонецЦикла;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось отметить период %1 как рассчитанный по причине:
|		%2'
|;uk='Не вдалося відзначити період %1 як розрахований з причини: 
|%2'",ОбщегоНазначения.КодОсновногоЯзыка()), РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(РассчитанныйПериод), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		Если ПараметрыРасчета = Неопределено Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		Иначе
			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВыполненияРегламентныхОпераций, ТекстСообщения, ТекстСообщения);
		КонецЕсли;

	КонецПопытки;

	УничтожитьВременныеТаблицы(ВременныеТаблицы, "ЗаданияКОчистке, НовыеГраницы, ИсходныеЗаданияВрем");

КонецПроцедуры

//++ НЕ УТ

// Формирует задания к расчету стоимости ОС и НМА, если была изменена сумма расходов, которая распределяется на ОС и НМА.
//
Процедура СформироватьЗаданияКРасчетуСтоимостиВНА(ПараметрыРасчета)
	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыРасчета.РасчетныйПериод.НачалоПериода) Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Период КАК Период,
		|	Таблица.Организация КАК Организация,
		|	Таблица.АналитикаРасходов КАК ОбъектУчета,
		|	Таблица.Регистратор КАК Документ
		|ПОМЕСТИТЬ ПрочиеРасходы_ЗаданияКРасчетуСтоимостиВНАИзменение
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаИзменений.Период КАК Период,
		|		ТаблицаИзменений.Регистратор КАК Регистратор,
		|		ТаблицаИзменений.Организация КАК Организация,
		|		ТаблицаИзменений.Подразделение КАК Подразделение,
		|		ТаблицаИзменений.СтатьяРасходов КАК СтатьяРасходов,
		|		ТаблицаИзменений.АналитикаРасходов КАК АналитикаРасходов,
		|		ТаблицаИзменений.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Сумма,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаБезНДС,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаРегл,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.ПостояннаяРазница
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ПостояннаяРазница,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.ВременнаяРазница
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ВременнаяРазница
		|	ИЗ
		|		РегистрНакопления.ПрочиеРасходы КАК ТаблицаИзменений
		|	ГДЕ
		|		ТаблицаИзменений.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ТаблицаИзменений.Организация В(&МассивОрганизаций)
		|		И (ТаблицаИзменений.РасчетПартий
		|				ИЛИ ТаблицаИзменений.РасчетСебестоимости)
		|		И (ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыЭксплуатации
		|				ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыСтроительства
		|				ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.НематериальныеАктивы)
		|		И ТаблицаИзменений.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
		|		И (ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ИЛИ ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
		|		И ТаблицаИзменений.Регистратор В
		|				(ВЫБРАТЬ
		|					ВТКэш.Регистратор
		|				ИЗ
		|					ВТКэшИзмененныеДокументы КАК ВТКэш)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаИзменений.Период,
		|		ТаблицаИзменений.Регистратор,
		|		ТаблицаИзменений.Организация,
		|		ТаблицаИзменений.Подразделение,
		|		ТаблицаИзменений.СтатьяРасходов,
		|		ТаблицаИзменений.АналитикаРасходов,
		|		ТаблицаИзменений.НаправлениеДеятельности,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.ПостояннаяРазница
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.ВременнаяРазница
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	ИЗ
		|		ВТКэшПрочиеРасходы КАК ТаблицаИзменений
		|	ГДЕ
		|		(ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыЭксплуатации
		|				ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыСтроительства
		|				ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.НематериальныеАктивы)
		|		И ТаблицаИзменений.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
		|		И (ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ИЛИ ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
		|		И ТаблицаИзменений.Регистратор В
		|				(ВЫБРАТЬ
		|					ВТКэш.Регистратор
		|				ИЗ
		|					ВТКэшИзмененныеДокументы КАК ВТКэш)
		|
		|//ТекстЗапросаДвиженияРаспределенияНДС
		|) КАК Таблица
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Период,
		|	Таблица.Регистратор,
		|	Таблица.Подразделение,
		|	Таблица.СтатьяРасходов,
		|	Таблица.Организация,
		|	Таблица.АналитикаРасходов,
		|	Таблица.НаправлениеДеятельности
		|
		|ИМЕЮЩИЕ
		|	(СУММА(Таблица.Сумма) <> 0
		|		ИЛИ СУММА(Таблица.СуммаБезНДС) <> 0
		|		ИЛИ СУММА(Таблица.СуммаРегл) <> 0
		|		ИЛИ СУММА(Таблица.ПостояннаяРазница) <> 0
		|		ИЛИ СУММА(Таблица.ВременнаяРазница) <> 0)";

	ПроверятьДвиженияРаспределенияНДС =
		ВременнаяТаблицаСуществует(ПараметрыРасчета, "ВТДвиженияРаспределенияНДСПоПрочиеРасходыДоРасчета")
		И ВременнаяТаблицаСуществует(ПараметрыРасчета, "ВТДвиженияРаспределенияНДСПоПрочиеРасходыПослеРасчета");
	
	Если ПроверятьДвиженияРаспределенияНДС Тогда
		
		ТекстЗапросаДвиженияРаспределенияНДС = "
		|	ОБЪЕДИНИТЬ ВСЕ
		|" + "
		|	ВЫБРАТЬ
		|		ТаблицаИзменений.Период КАК Период,
		|		ТаблицаИзменений.Регистратор КАК Регистратор,
		|		ТаблицаИзменений.Организация КАК Организация,
		|		ТаблицаИзменений.Подразделение КАК Подразделение,
		|		ТаблицаИзменений.СтатьяРасходов КАК СтатьяРасходов,
		|		ТаблицаИзменений.АналитикаРасходов КАК АналитикаРасходов,
		|		ТаблицаИзменений.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Сумма,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаБезНДС,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаРегл,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.ПостояннаяРазница
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ПостояннаяРазница,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.ВременнаяРазница
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ВременнаяРазница
		|	ИЗ
		|		ВТДвиженияРаспределенияНДСПоПрочиеРасходыДоРасчета КАК ТаблицаИзменений
		|	ГДЕ
		|		(ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыЭксплуатации
		|			ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыСтроительства
		|			ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.НематериальныеАктивы)
		|		И ТаблицаИзменений.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
		|		И (ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|			ИЛИ ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаИзменений.Период,
		|		ТаблицаИзменений.Регистратор,
		|		ТаблицаИзменений.Организация,
		|		ТаблицаИзменений.Подразделение,
		|		ТаблицаИзменений.СтатьяРасходов,
		|		ТаблицаИзменений.АналитикаРасходов,
		|		ТаблицаИзменений.НаправлениеДеятельности,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.ПостояннаяРазница
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.ВременнаяРазница
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	ИЗ
		|		ВТДвиженияРаспределенияНДСПоПрочиеРасходыПослеРасчета КАК ТаблицаИзменений
		|	ГДЕ
		|		(ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыЭксплуатации
		|			ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыСтроительства
		|			ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.НематериальныеАктивы)
		|		И ТаблицаИзменений.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
		|		И (ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|			ИЛИ ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
		|";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"//ТекстЗапросаДвиженияРаспределенияНДС",
			ТекстЗапросаДвиженияРаспределенияНДС);
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Результат = Запрос.ВыполнитьПакет(); 
	Выборка = Результат.Получить(Результат.ВГраница()).Выбрать();
	Выборка.Следующий();

	ДанныеТаблиц = Новый Структура;
	ДанныеТаблиц.Вставить("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
	ДанныеТаблиц.Вставить("ПрочиеРасходы_ЗаданияКРасчетуСтоимостиВНАИзменение", Выборка.Количество > 0);

	ВнеоборотныеАктивы.СформироватьЗаданияКРасчетуСтоимостиВНА(ДанныеТаблиц);

	УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц, "ПрочиеРасходы_ЗаданияКРасчетуСтоимостиВНАИзменение");

КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#Область ДействияСОбъектомСПерехватомСообщений

// Возвращает текст сообщений об ошибках, выданных при проверке заполнения объекта.
//
// Параметры:
//	ПроверяемыйОбъект - ДокументОбъект - документ, для которого надо выполнить проверку заполнения.
//	ПрефиксСообщения - Строка - символы, которые надо вывести перед каждым сообщением об ошибке.
//
// Возвращаемое значение:
//	Строка - многострочный текст сообщений.
//
Функция ПроверитьЗаполнениеОбъектаСПерехватомСообщений(ПроверяемыйОбъект,
		ПрефиксСообщения = "") Экспорт

	ТекстСообщения = "";

	ПредыдущиеСообщения = ПолучитьСообщенияПользователю(Ложь);

	Если НЕ ПроверяемыйОбъект.ПроверитьЗаполнение() Тогда

		ВсеСообщения = ПолучитьСообщенияПользователю(Истина);

		// Сообщения, выведенные при проверке заполнения объекта, сохраним в ТекстСообщения.
		Для НомерСообщения = ПредыдущиеСообщения.Количество() По ВсеСообщения.Количество()
			- 1 Цикл

			ТекущееСообщение = ВсеСообщения[НомерСообщения];

			ТекстСообщения = ТекстСообщения + ?(ТекстСообщения = "", "", "
				|") + ПрефиксСообщения + ТекущееСообщение.Текст;

		КонецЦикла;

		// Вернем предыдущие сообщения в буфер сообщений.
		Для НомерСообщения = 0 По ПредыдущиеСообщения.Количество() - 1 Цикл

			ТекущееСообщение = ВсеСообщения[НомерСообщения];

			ТекущееСообщение.Сообщить();

		КонецЦикла;

	КонецЕсли;

	Возврат ТекстСообщения;

КонецФункции

// Возвращает текст сообщений об ошибках, выданных при проведении документа.
//
// Параметры:
//	ПроводимыйДокумент - ДокументОбъект - документ, который надо провести.
//	ПрефиксСообщения - Строка - символы, которые надо вывести перед каждым сообщением об ошибке.
//
// Возвращаемое значение:
//	Строка - многострочный текст сообщений.
//
Функция ПровестиДокументСПерехватомСообщений(ПроводимыйДокумент,
		ПрефиксСообщения = "") Экспорт

	ТекстСообщения = "";
	БылиОшибки = Ложь;

	ПредыдущиеСообщения = ПолучитьСообщенияПользователю(Ложь);

	Попытка
		ПроводимыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		БылиОшибки = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

	Если НЕ БылиОшибки Тогда
		Возврат ТекстСообщения;
	КонецЕсли;

	ВсеСообщения = ПолучитьСообщенияПользователю(Истина);

	// Сообщения, выведенные при проведении объекта, сохраним в ТекстСообщения.
	Для НомерСообщения = ПредыдущиеСообщения.Количество() По ВсеСообщения.Количество()
		- 1 Цикл

		ТекущееСообщение = ВсеСообщения[НомерСообщения];

		ТекстСообщения = ТекстСообщения + ?(ТекстСообщения = "", "", "
			|") + ПрефиксСообщения + ТекущееСообщение.Текст;

	КонецЦикла;

	// Вернем предыдущие сообщения в буфер сообщений.
	Для НомерСообщения = 0 По ПредыдущиеСообщения.Количество() - 1 Цикл

		ТекущееСообщение = ВсеСообщения[НомерСообщения];

		ТекущееСообщение.Сообщить();

	КонецЦикла;

	Возврат ТекстСообщения;

КонецФункции

#КонецОбласти

#Область ВерсияПлатформы

// Проверяет, что используемая версия платформы не ниже указанной.
//
// Параметры:
//	Версия - Строка - номер версии Платформы
//
// Возвращаемое значение:
//	Булево - Истина, если используемая версия не младше указанной в параметре Версия
//
Функция ВерсияПлатформыНеНижеУказанной(Версия) Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;

	Возврат (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, Версия) >= 0);

КонецФункции

#КонецОбласти

#Область СостояниеОперацииЗакрытияМесяца

// Проверяет наличие движений по указанному регистру в расчетном периоде по рассчитываемым организациям.
//
Функция ЕстьДвиженияПоРегиструНакопления(ИмяРегистра, ПериодРасчета,
		МассивОрганизаций, ИмяПоляОрганизации = "") Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрНакопления.%1 КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.%2 В(&МассивОрганизаций)
		|	И Т.Активность
		|";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяРегистра, ?(ЗначениеЗаполнено(ИмяПоляОрганизации), ИмяПоляОрганизации, "Организация"));

	Результат = Запрос.Выполнить();

	Возврат НЕ Результат.Пустой();

КонецФункции

// Проверяет наличие явных проблем в движениях по себестоимости товаров.
//
Функция ЕстьНекорректныеДвиженияСебестоимости(ПериодРасчета,
		МассивОрганизаций) Экспорт

	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ПериодРасчета)) Тогда
		Возврат Ложь; // проверяем только движения партионного учета версии 2.2
	КонецЕсли;

	// В первичных движениях документов и в движениях, сформированных механизмом расчета партий, должен быть заполнен тип записи.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.Организация В(&МассивОрганизаций)
		|	И Т.Активность
		|	И НЕ Т.РасчетСебестоимости
		|	И ТИПЗНАЧЕНИЯ(Т.Регистратор) <> ТИП(Документ.КорректировкаРегистров)
		|	И Т.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ПустаяСсылка)";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);

	Результат = Запрос.Выполнить();

	Возврат НЕ Результат.Пустой();

КонецФункции

// Выполняет проверку окончания обновления входящих и исходящих данных запущенного механизма расчета.
//
Процедура ПроверитьБлокировкуДанныхПриОбновленииИБ(ВыполняетсяРасчетСебестоимости,
		ПартионныйУчетВерсии22 = Неопределено,
		ПараметрыОтладки = Неопределено) Экспорт

	ПроверяемыеДанные = Новый Соответствие;
	ПроверяемыеДанные.Вставить(Метаданные.РегистрыСведений.ЗаданияКРасчетуСебестоимости, Истина);

	РасчетСебестоимостиКорректировкаСтоимости.ВходящиеДанныеМеханизма(ПроверяемыеДанные);
	РасчетСебестоимостиКорректировкаСтоимости.ИсходящиеДанныеМеханизма(ПроверяемыеДанные);

	Если ВыполняетсяРасчетСебестоимости Тогда // выполняется механизм расчета себестоимости
		ПредставлениеОперации = РасчетСебестоимостиКорректировкаСтоимости.ТекущаяВерсияМеханизма();
	Иначе
		РасчетСебестоимости.ВходящиеДанныеМеханизма(ПроверяемыеДанные);
		РасчетСебестоимости.ИсходящиеДанныеМеханизма(ПроверяемыеДанные);
		ПредставлениеОперации = РасчетСебестоимости.ТекущаяВерсияМеханизма();
	КонецЕсли;

	ЗакрытиеМесяцаСервер.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ПроверяемыеДанные, ПредставлениеОперации);

КонецПроцедуры

// Возвращает текущее состояние расчета себестоимости.
//
// Параметры:
//	ПериодРасчета - Дата - месяц расчета
//	ОтборОрганизации - Массив - организации, по которым надо получить состояние расчета.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.СостоянияОперацийЗакрытияМесяца - текущее состояние расчета.
//
Функция ТекущееСостояниеРасчета(ПериодРасчета, ОтборОрганизации) Экспорт

	Состояние = ЗакрытиеМесяцаСервер.ОпределитьСостояниеЭтаповРасчета(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, ПериодРасчета, ОтборОрганизации);

	Возврат Состояние;

КонецФункции

#КонецОбласти

#Область АнализСостоянияСистемы

// Заполняет проверки, выполняемые в рамках расчета партий и себестоимости.
//
// Параметры:
//	ТаблицаПроверок - Таблица значений - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации().
//
Процедура ЗаполнитьПроверкиДляРегистрации(ТаблицаПроверок) Экспорт

// Исходные данные для расчета.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, "ИсходныеДанныеДляРасчетаСебестоимости", Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета, "РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаКорректностиИсходныхДанныхДляРасчетаСебестоимости", Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);

	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;

	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, НСтр("ru='Корректность исходных данных для расчета себестоимости';uk='Коректність вихідних даних для розрахунку собівартості'",ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru='Проверяются соблюдение следующих условий:
|- в регистре ""Себестоимость товаров"" не должно быть отрицательных остатков по количеству;
|- должны быть оформлены передачи товаров между организациями;
|- должны быть оформлены отчеты комитенту о списании;
|- должны быть оформлены поступления работ в подразделения.'
|;uk='Перевіряються дотримання наступних умов: 
|- в регістрі ""Собівартість товарів"" не повинно бути від''ємних залишків за кількістю; 
|- повинні бути оформлені передачі товарів між організаціями; 
|- повинні бути оформлені звіти комітенту про списання; 
|- повинні бути оформлені надходження робіт в підрозділи.'",ОбщегоНазначения.КодОсновногоЯзыка()));

		// Остатки в оперативных регистрах и регистре себестоимости.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, "СоответствиеОперативногоУчетаИСебестоимости", Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета, "РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаСоответствияОперативногоУчетаИСебестоимости", Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);

	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;

	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, НСтр("ru='Соответствие остатков по количеству в оперативном учете и учете себестоимости';uk='Відповідність залишків за кількістю в оперативному обліку і обліку собівартості'",ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru='В оперативном учете и учете себестоимости остатки по количеству должны быть идентичны.';uk='В оперативному обліку і обліку собівартості залишки за кількістю повинні бути ідентичні.'",ОбщегоНазначения.КодОсновногоЯзыка()));

	// Результаты расчета.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, "СоответствиеСуммИКоличества", Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета, "РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаСоответствияСуммИКоличества", Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);

	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	ОписаниеПроверки.ВыполняетсяТолькоВКонтексте = Истина;

	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, НСтр("ru='Соответствие остатков сумм и остатков по количеству в регистре ""Себестоимость товаров""';uk='Відповідність залишків сум і залишків за кількістю в регістрі ""Собівартість товарів""'",ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru='В регистре ""Себестоимость товаров"" не должно быть
|- ненулевых остатков по суммам (упр. и регл.) при нулевом остатке по количеству;
|- разных знаков у остатков по суммам (упр. и регл.) и остатка по количеству.'
|;uk='У регістрі ""Собівартість товарів"" не повинно бути 
|- ненульових залишків за сумами (упр. і регл.) при нульовому залишку за кількістю; 
|- різних знаків у залишків за сумами (упр. і регл.) і залишку за кількістю.'",ОбщегоНазначения.КодОсновногоЯзыка()));

		// Нераспределенные затраты.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, "ЗатратыНеРаспределенныеНаСебестоимость", Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета, "РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаЗатратНеРаспределенныхНаСебестоимость", Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет);

	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;

	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, НСтр("ru='Наличие остатков затрат, не распределенных на себестоимость.';uk='Наявність залишків витрат, нерозподілених на собівартість.'",ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru='В регистре ""Партии прочих расходов"" не должно быть остатков по статьям расходов с вариантом распределения расходов ""На себестоимость товаров"".';uk='У регістрі ""Партії інших витрат"" не повинно бути залишків по статтях витрат з варіантом розподілу витрат ""На собівартість товарів"".'",ОбщегоНазначения.КодОсновногоЯзыка()));

	//++ НЕ УТ

	// Проверка распределения резервов.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, "РаспределениеРезервовПредстоящихРасходов", Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета, "РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаРаспределенияРезервовПредстоящихРасходов", Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение);

	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;

	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, НСтр("ru='Корректность распределения резервов предстоящих расходов.';uk='Коректність розподілу резервів майбутніх витрат.'",ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru='Постатейные расходы должны быть погашены из резерва, а в части превышения - распределены на себестоимость или финансовый результат.';uk='Постатейні витрати повинні бути погашені з резерву, а в частині перевищення - розподілені на собівартість або фінансовий результат.'",ОбщегоНазначения.КодОсновногоЯзыка()));

	//-- НЕ УТ

	// Нерассчитанные партии.
	// Технологическая проверка для автотестов, см. технологический параметр "ПроверятьЗаписиСПризнакомРасчетНеЗавершен".
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, "ЗаписиСПризнакомРасчетНеЗавершен", Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета, "РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаЗаписейСПризнакомРасчетНеЗавершен", Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение);

	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;

	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, НСтр("ru='Наличие движений, для которых не удалось подобрать партии.';uk='Наявність рухів, для яких не вдалося підібрати партії.'",ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru='В регистрах, обслуживаемых механизмом партионного учета, для всех расчетных движений должна быть подобрана партия.
|В некоторых случаях партии (полностью или частично) подобрать не удается,
|из-за чего после расчета могут диагностироваться ошибки вида ""Есть суммовой остаток без остатка по количеству"".
|Причина проблемы может заключаться как в ошибочных данных в информационной базе, так и в алгоритмах выборки/расчета партий.
|В результате по окончании расчета остаются записи с признаком РасчетЗавершен = Ложь (в регистрах накопления он преобразуется в РасчетНеЗавершен = Истина).
|Универсального способа исправления данной проблемы нет - в каждом случае надо анализировать причины в контексте конкретной информационной базы.'
|;uk='У регістрах, що обслуговуються механізмом партіонного обліку, для всіх розрахункових рухів повинна бути підібрана партія. 
|У деяких випадках партії (повністю або частково) підібрати не вдається, 
|через що після розрахунку можуть діагностуватися помилки виду ""Є суммовой залишок без залишку за кількістю"". 
|Причина проблеми може полягати як в помилкових даних в інформаційній базі, так і в алгоритмах вибірки/розрахунку партій. 
|В результаті після закінчення розподілу залишаються записи з ознакою РасчетЗавершен = Ложь (в регістрах накопичення він перетворюється в РасчетНеЗавершен = Истина). 
|Універсального способу виправлення даної проблеми немає - в кожному випадку треба аналізувати причини в контексті конкретної інформаційної бази.'",ОбщегоНазначения.КодОсновногоЯзыка()));

		//++ НЕ УТ	
	// Остатки в незавершенном производстве.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, "ОстаткиВНезавершенномПроизводстве", Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета, "РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаОстатковВНезавершенномПроизводстве", Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);

	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, НСтр("ru='Наличие остатков в незавершенном производстве для завершенных партий.';uk='Наявність залишків у незавершеному виробництві для завершених партій.'",ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru='В регистрах ""Себестоимость товаров"", ""Прочие расходы незавершенного производства"", ""Трудозатраты незавершенного производства"" не должно быть остатков по завершенным партиям производства.';uk='У регістрах ""Собівартість товарів"", ""Інші витрати незавершеного виробництва"", ""Трудовитрати незавершеного виробництва"" не повинно бути залишків по завершених партіям виробництва.'",ОбщегоНазначения.КодОсновногоЯзыка()));
	//-- НЕ УТ

	// Проверка отрицательных остатков по количеству после расчета.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, "ПроверкаРезультатаРасчетаПоКоличеству", Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета, "РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаРезультатаРасчетаПоКоличеству", Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);

	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;

	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, НСтр("ru='Наличие остатков партий с отрицательным количеством.';uk='Наявність залишків партій з від''ємною кількістю.'",ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru='В регистре себестоимости не должно быть отрицательных остатков в разрезе партий.
|Проверка отличается от аналогичной проверки исходных данных для расчета тем, что в данной проверке
|анализируются ""детальные"" остатки в разрезе всех измерений регистра себестоимости.'
|;uk='У регістрі собівартості не повинно бути від''ємних залишків в розрізі партій. 
|Перевірка відрізняється від аналогічної перевірки вихідних даних для розрахунку тим, що в даній перевірці аналізуються ""детальні"" залишки в розрізі всіх вимірів регістра собівартості.'",ОбщегоНазначения.КодОсновногоЯзыка()));

		//++ НЕ УТ
	// Нераспределенные постатейные расходы.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, "НераспределенныеПостатейныеРасходы", Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета, "РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаНераспределенныхПостатейныхРасходов", Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);

	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, НСтр("ru='Наличие некорректно распределенных постатейных расходов.';uk='Наявність некоректно розподілених постатейних витрат.'",ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru='В результате распределения постатейных расходов возникли ошибки. 
|По регистру накопления ""Прочие расходы"" остатки по постатейному расходу не равны 0, при условии, что движения по распределению сформированы.'
|;uk='В результаті розподілу постатейних витрат виникли помилки. 
|По регістру накопичення ""Інші витрати"" залишки з постатейної витрати не рівні 0, за умови, що рухи з розподілу сформовані.'",ОбщегоНазначения.КодОсновногоЯзыка()));
		//-- НЕ УТ
	РасчетСебестоимостиПодготовкаДанныхЛокализация.ЗаполнитьПроверкиДляРегистрации(ТаблицаПроверок);

КонецПроцедуры

#Область ПроцедурыПроверкиПартионногоУчетаИСебестоимости

// Процедура-обработчик проверки состояния системы "ИсходныеДанныеДляРасчетаСебестоимости".
//
Процедура ПроверкаКорректностиИсходныхДанныхДляРасчетаСебестоимости(ПараметрыПроверки) Экспорт

	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаВозвратныеОтходы());
	ТекстыЗапроса.Добавить("ВЫБРАТЬ
		|	ПроданныеТовары.ОрганизацияВладелец,
		|	ПроданныеТовары.ВидЗапасовПродавца,
		|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
		|	ПроданныеТовары.КоличествоОстаток
		|ПОМЕСТИТЬ КПередачеНаНачалоПериода
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПредыдущегоПериода,
		|		ОрганизацияВладелец В (&МассивОрганизаций)
		|	) КАК ПроданныеТовары
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидЗапасовПродавца
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ПроданныеТовары.ОрганизацияВладелец,
		|	ПроданныеТовары.ВидЗапасовПродавца,
		|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
		|	ПроданныеТовары.КоличествоОстаток
		|ПОМЕСТИТЬ ТоварыПредварительная
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПериода,
		|		ОрганизацияВладелец В (&МассивОрганизаций)
		|	) КАК ПроданныеТовары
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидЗапасовПродавца
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ПроданныеТовары.ОрганизацияВладелец            	  КАК ОрганизацияПродавец,
		|	ВидыЗапасов.Организация 					   	  КАК ОрганизацияПолучатель,
		|	ПроданныеТовары.АналитикаУчетаНоменклатуры     	  КАК АналитикаУчетаНоменклатуры,
		|	СУММА(ПроданныеТовары.КоличествоОстаток
		|	- ЕСТЬNULL(НаНачалоПериода.КоличествоОстаток, 0)) КАК Количество,
		|	ВидыЗапасов.ВидЗапасовВладельца				   	  КАК ВидЗапасовПродавца,
		|	ВидыЗапасов.Ссылка							   	  КАК ВидЗапасовПолучателя
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	ТоварыПредварительная КАК ПроданныеТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
		|		ПО ПроданныеТовары.ВидЗапасовПродавца = ВидыЗапасов.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ КПередачеНаНачалоПериода КАК НаНачалоПериода
		|		ПО НаНачалоПериода.ОрганизацияВладелец = ПроданныеТовары.ОрганизацияВладелец
		|		И НаНачалоПериода.ВидЗапасовПродавца = ПроданныеТовары.ВидЗапасовПродавца
		|		И НаНачалоПериода.АналитикаУчетаНоменклатуры = ПроданныеТовары.АналитикаУчетаНоменклатуры
		|		И НаНачалоПериода.АналитикаУчетаНоменклатуры = ПроданныеТовары.АналитикаУчетаНоменклатуры
		|ГДЕ
		|	ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|	И (ПроданныеТовары.КоличествоОстаток - ЕСТЬNULL(НаНачалоПериода.КоличествоОстаток, 0) <> 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроданныеТовары.ОрганизацияВладелец,
		|	ВидыЗапасов.Организация,
		|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
		|	ВидыЗапасов.ВидЗапасовВладельца,
		|	ВидыЗапасов.Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыПредварительная
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Товары.ОрганизацияПродавец КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
		|	Товары.ВидЗапасовПродавца КАК ВидЗапасов,
		|	Товары.Количество КАК Количество
		|ПОМЕСТИТЬ ВтНетПередачТоваров
		|ИЗ
		|	Товары КАК Товары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Товары.ОрганизацияПолучатель КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
		|	Товары.ВидЗапасовПолучателя КАК ВидЗапасов,
		|	Товары.Количество КАК Количество
		|ИЗ
		|	Товары КАК Товары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	СписанныеТовары.ВидЗапасов,
		|	СписанныеТовары.АналитикаУчетаНоменклатуры,
		|	СписанныеТовары.КоличествоСписаноОстаток
		|ПОМЕСТИТЬ ВтНетОтчетовОСписанииПредварительная
		|ИЗ
		|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(&ГраницаКонецПериода) КАК СписанныеТовары
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидЗапасов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ВидыЗапасов.Организация 						КАК Организация,
		|	ВидыЗапасов.ВладелецТовара 						КАК Владелец,
		|	СписанныеТовары.АналитикаУчетаНоменклатуры 		КАК АналитикаУчетаНоменклатуры,
		|	СУММА(СписанныеТовары.КоличествоСписаноОстаток) КАК Количество,
		|	ВидыЗапасов.Ссылка								КАК ВидЗапасов
		|ПОМЕСТИТЬ ВтНетОтчетовОСписании
		|ИЗ
		|	ВтНетОтчетовОСписанииПредварительная КАК СписанныеТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
		|		ПО СписанныеТовары.ВидЗапасов = ВидыЗапасов.Ссылка
		|ГДЕ
		|	ВидыЗапасов.Организация В (&МассивОрганизаций)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗапасов.Организация,
		|	ВидыЗапасов.ВладелецТовара,
		|	СписанныеТовары.АналитикаУчетаНоменклатуры,
		|	ВидыЗапасов.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтНетОтчетовОСписанииПредварительная
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Остатки.Организация 		КАК Организация,
		|	Остатки.Номенклатура 		КАК Номенклатура,
		|	Остатки.Характеристика 		КАК Характеристика,
		|	Остатки.Серия 				КАК Серия,
		|	Остатки.Назначение 			КАК Назначение,
		|	Остатки.Подразделение 		КАК Подразделение,
		|	Остатки.КоличествоОстаток 	КАК Количество
		|ПОМЕСТИТЬ ВтРаботыОстатки
		|ИЗ
		|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(&ГраницаКонецПериода,
		|		Организация В (&МассивОрганизаций)) КАК Остатки
		|ГДЕ
		|	НЕ &ПартионныйУчетВерсии22
		|	И Остатки.КоличествоОстаток < 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Остатки.Организация 	КАК Организация,
		|	Аналитика.КлючАналитики КАК АналитикаУчетаНоменклатуры,
		|	Остатки.Количество 		КАК Количество
		|ПОМЕСТИТЬ ВтРаботы
		|ИЗ
		|	ВтРаботыОстатки КАК Остатки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО Аналитика.Номенклатура = Остатки.Номенклатура
		|		И Аналитика.Характеристика = Остатки.Характеристика
		|		И Аналитика.Серия = Остатки.Серия
		|		И Аналитика.Назначение = Остатки.Назначение
		|		И Аналитика.МестоХранения = Остатки.Подразделение
		//++ НЕ УТ 
		|		И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
		//-- НЕ УТ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО Остатки.Номенклатура = СпрНоменклатура.Ссылка
		|ГДЕ
		|	СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтРаботыОстатки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Т.РазделУчета,
		|	Т.ВидЗапасов,
		|	Т.Организация,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.КоличествоОстаток
		|ПОМЕСТИТЬ СебестоимостьТоваровОстатки
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаКонецПериода,
		|		Организация В (&МассивОрганизаций)) КАК Т
		//++ НЕ УТ
		|ГДЕ
		|	Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
		//-- НЕ УТ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры,
		|	РазделУчета,
		|	ВидЗапасов,
		|	Организация
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Таб.РазделУчета		  			КАК РазделУчета,
		|	Таб.ВидЗапасов		  			КАК ВидЗапасов,
		|	Таб.Организация		  			КАК Организация,
		|	Таб.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
		|	СУММА(Таб.Количество) 			КАК Количество
		|ПОМЕСТИТЬ ВТОтрицательныеОстатки
		|ИЗ (
		|	ВЫБРАТЬ
		|		Т.РазделУчета 				 КАК РазделУчета,
		|		ВЫБОР
		|			КОГДА Аналитика.ТипМестаХранения В(
		|					ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Партнер))
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.ВидЗапасов
		|		КОНЕЦ 						 КАК ВидЗапасов,
		|		Т.Организация 				 КАК Организация,
		|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		Т.КоличествоОстаток 		 КАК Количество
		|	ИЗ
		|		СебестоимостьТоваровОстатки КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
		|			ПО Т.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|			ПО СпрНоменклатура.Ссылка = Аналитика.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВозвратныеОтходы КАК Отходы
		|			ПО Т.АналитикаУчетаНоменклатуры  = Отходы.АналитикаУчетаНоменклатуры
		|			И Т.РазделУчета 				 = Отходы.РазделУчета
		|			И Т.ВидЗапасов 				 	 = Отходы.ВидЗапасов
		|			И Т.Организация 				 = Отходы.Организация
		|	ГДЕ
		|		НЕ Т.РазделУчета В (
		|			ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки),
		|			ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути))
		|		И Отходы.АналитикаУчетаНоменклатуры ЕСТЬ NULL
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Т.РазделУчета                КАК РазделУчета,
		|		Т.ВидЗапасов                 КАК ВидЗапасов,
		|		Т.Организация                КАК Организация,
		|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|				Т.Количество
		|			ИНАЧЕ
		|				-Т.Количество
		|		КОНЕЦ                        КАК Количество
		|	ИЗ
		|		ВтНетПередачТоваров КАК Т
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
		|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
		|		Т.Организация                КАК Организация,
		|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		Т.Количество                 КАК Количество
		|	ИЗ
		|		ВтНетОтчетовОСписании КАК Т
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
		|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
		|		Т.Организация                КАК Организация,
		|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		-Т.Количество                КАК Количество
		|	ИЗ
		|		ВтРаботы КАК Т
		|
		|	) КАК Таб
		|
		|СГРУППИРОВАТЬ ПО
		|	Таб.РазделУчета,
		|	Таб.ВидЗапасов,
		|	Таб.Организация,
		|	Таб.АналитикаУчетаНоменклатуры
		|
		|ИМЕЮЩИЕ
		|	СУММА(Таб.Количество) < 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Таб.Организация КАК Организация,
		|	Таб.АналитикаУчетаНоменклатуры,
		|	СУММА(Таб.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТНеОформленоПоступлениеРабот
		|ИЗ
		|	ВтРаботы КАК Таб
		|
		|СГРУППИРОВАТЬ ПО
		|	Таб.Организация,
		|	Таб.АналитикаУчетаНоменклатуры
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.РазделУчета 				 КАК РазделУчета,
		|	Т.ВидЗапасов				 КАК ВидЗапасов,
		|	Т.Организация 				 КАК Организация,
		|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Т.КоличествоОстаток 		 КАК Количество
		|ПОМЕСТИТЬ ВТНеотфактурованныеПоставки
		|ИЗ
		|	СебестоимостьТоваровОстатки КАК Т
		|ГДЕ
		|	Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки)
		|	И Т.КоличествоОстаток > 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.РазделУчета 				 КАК РазделУчета,
		|	Т.ВидЗапасов				 КАК ВидЗапасов,
		|	Т.Организация 				 КАК Организация,
		|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	-Т.КоличествоОстаток 		 КАК Количество
		|ПОМЕСТИТЬ ВТСобственныеТоварыВПути
		|ИЗ
		|	СебестоимостьТоваровОстатки КАК Т
		|ГДЕ
		|	Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
		|	И Т.КоличествоОстаток < 0");

		//++ НЕ УТ
	// Проверка регистрации затрат после завершения работ по партиям производства.
	ТекстыЗапроса.Добавить(ТекстЗапросаЗавершенныеПартии());
	ТекстыЗапроса.Добавить("ВЫБРАТЬ
		|	Затраты.Организация									КАК Организация,
		|	Затраты.ПартияПроизводства						КАК ПартияПроизводства,
		|	Затраты.Затрата												КАК Затрата
		|ПОМЕСТИТЬ ПартииСЗатратамиПослеДатыПроизводства
		|ИЗ
		|	(ВЫБРАТЬ
		|		Затраты.Организация											КАК Организация,
		|		Затраты.Партия														КАК ПартияПроизводства,
		|		Затраты.АналитикаУчетаНоменклатуры.Номенклатура	КАК Затрата,
		|		Затраты.КоличествоОстаток								КАК Количество
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров.Остатки(
		|			,
		|			Партия В(
		|				ВЫБРАТЬ
		|					ЗавершенныеПартии.Партия КАК Партия
		|				ИЗ
		|					ЗавершенныеПартии КАК ЗавершенныеПартии)
		|		) КАК Затраты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Затраты.Организация											КАК Организация,
		|		Затраты.Партия														КАК ПартияПроизводства,
		|		Затраты.АналитикаУчетаНоменклатуры.Номенклатура	КАК Затрата,
		|		-Затраты.КоличествоОстаток								КАК Количество
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров.Остатки(
		|			&ГраницаКонецПериода,
		|			Партия В(
		|				ВЫБРАТЬ
		|					ЗавершенныеПартии.Партия КАК Партия
		|				ИЗ
		|					ЗавершенныеПартии КАК ЗавершенныеПартии)
		|		) КАК Затраты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Затраты.Организация											КАК Организация,
		|		Затраты.ПартияПроизводства								КАК ПартияПроизводства,
		|		Затраты.ВидРабот													КАК Затрата,
		|		Затраты.КоличествоОстаток								КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТрудозатратыНезавершенногоПроизводства.Остатки(
		|			,
		|			ПартияПроизводства В(
		|				ВЫБРАТЬ
		|					ЗавершенныеПартии.Партия КАК Партия
		|				ИЗ
		|					ЗавершенныеПартии КАК ЗавершенныеПартии)
		|		) КАК Затраты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Затраты.Организация											КАК Организация,
		|		Затраты.ПартияПроизводства								КАК ПартияПроизводства,
		|		Затраты.ВидРабот													КАК Затрата,
		|		-Затраты.КоличествоОстаток								КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТрудозатратыНезавершенногоПроизводства.Остатки(
		|			&ГраницаКонецПериода,
		|			ПартияПроизводства В(
		|				ВЫБРАТЬ
		|					ЗавершенныеПартии.Партия КАК Партия
		|				ИЗ
		|					ЗавершенныеПартии КАК ЗавершенныеПартии)
		|		) КАК Затраты
		|	) КАК Затраты
		|
		|ГДЕ
		|	ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			РегистрСведений.ЗаданияКРасчетуСебестоимости КАК ЗаданияКРасчету
		|		ГДЕ
		|			ЗаданияКРасчету.Месяц = &НачалоПериода
		|			И ЗаданияКРасчету.Организация = Затраты.Организация)
		|
		|СГРУППИРОВАТЬ ПО
		|	Затраты.Организация,
		|	Затраты.ПартияПроизводства,
		|	Затраты.Затрата
		|
		|ИМЕЮЩИЕ
		|	СУММА(Затраты.Количество) > 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗавершенныеПартии
		|");
		//-- НЕ УТ
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());

	// Отрицательные остатки по количеству.
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РазделУчета", НСтр("ru='Раздел учета';uk='Розділ обліку'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры';uk='Аналітика номенклатури'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидЗапасов", НСтр("ru='Вид запасов';uk='Вид запасів'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество", НСтр("ru='Количество';uk='Кількість'",ОбщегоНазначения.КодОсновногоЯзыка()));

	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки("ВТОтрицательныеОстатки", НСтр("ru='Обнаружены отрицательные остатки по количеству в регистре себестоимости по организации ""%1"" на конец периода %2';uk='Виявлено від''ємні залишки за кількістю в регістрі собівартості по організації ""%1"" на кінець періоду %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей, , Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());

	// Не оформленные поступления работ.	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры';uk='Аналітика номенклатури'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество", НСтр("ru='Количество';uk='Кількість'",ОбщегоНазначения.КодОсновногоЯзыка()));

	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, "ВТНеОформленоПоступлениеРабот", НСтр("ru='Не отражены поступления работ в подразделения организации ""%1"" за период %2';uk='Не відображені надходження робіт в підрозділи організації ""%1"" за період %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей);

	// Превышение нефактурованной поставки.	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РазделУчета", НСтр("ru='Раздел учета';uk='Розділ обліку'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры';uk='Аналітика номенклатури'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидЗапасов", НСтр("ru='Вид запасов';uk='Вид запасів'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество", НСтр("ru='Количество';uk='Кількість'",ОбщегоНазначения.КодОсновногоЯзыка()));

	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, "ВТНеотфактурованныеПоставки", НСтр("ru='Фактуровки превышают неотфактурованные поставки в организации ""%1"" за период %2';uk='Фактуровкі перевищують невідфактуровані поставки в організації ""%1"" за період %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей, , Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());

	// Превышение товаров в пути.	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РазделУчета", НСтр("ru='Раздел учета';uk='Розділ обліку'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры';uk='Аналітика номенклатури'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидЗапасов", НСтр("ru='Вид запасов';uk='Вид запасів'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество", НСтр("ru='Количество';uk='Кількість'",ОбщегоНазначения.КодОсновногоЯзыка()));

	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, "ВТСобственныеТоварыВПути", НСтр("ru='Поступления из товаров в пути превышают остатки товаров в пути в организации ""%1"" за период %2';uk='Надходження з товарів в дорозі перевищують залишки товарів в дорозі в організації ""%1"" за період %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей, , Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());

	//++ НЕ УТ
	// Проверка регистрации затрат после даты производства продукции.
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("ПартияПроизводства", НСтр("ru='Партия производства';uk='Партія виробництва'"));
	СписокПолей.Добавить("Затрата", НСтр("ru='Затрата';uk='Витрата'"));

	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, "ПартииСЗатратамиПослеДатыПроизводства", НСтр("ru='Обнаружены затраты по завершенным партиям производства.
|Все затраты должны быть отражены не позже месяца завершения выполнения работ по партии производства.
|Организация: ""%1"", период: %2'
|;uk='Виявлено витрати по завершених партіям виробництва. 
|Всі витрати повинні бути відображені не пізніше місяця завершення виконання робіт по партії виробництва. 
|Організація: ""%1"", період: %2'"), СписокПолей);
		//-- НЕ УТ
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(ПараметрыПроверки, ПараметрыРегистрации, ТекстЗапроса);

КонецПроцедуры

// Процедура-обработчик проверки состояния системы "СоответствиеСуммИКоличества".
//
Процедура ПроверкаСоответствияСуммИКоличества(ПараметрыПроверки) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ
		|	Т.РазделУчета 									КАК РазделУчета,
		|	Т.ВидЗапасов 									КАК ВидЗапасов,
		|	Т.Организация 									КАК Организация,
		|	Т.АналитикаУчетаНоменклатуры 					КАК АналитикаУчетаНоменклатуры,
		|	Т.Партия 										КАК Партия,
		|	Т.АналитикаУчетаПартий 							КАК АналитикаУчетаПартий,
		|	Т.АналитикаФинансовогоУчета 					КАК АналитикаФинансовогоУчета,
        |	Т.НалоговоеНазначение  							КАК НалоговоеНазначение,
		|
		|	СУММА(Т.Знак * Т.Количество) 					КАК Количество,
		|
		|	СУММА(Т.Знак * Т.Стоимость) 					КАК Стоимость,
		|	СУММА(Т.Знак * Т.СтоимостьБезНДС) 				КАК СтоимостьБезНДС,
		|	СУММА(Т.Знак * Т.ДопРасходы) 					КАК ДопРасходы,
		|	СУММА(Т.Знак * Т.ДопРасходыБезНДС) 				КАК ДопРасходыБезНДС,
		//++ НЕ УТ
		|	СУММА(Т.Знак * Т.ПостояннаяРазница) 			КАК ПостояннаяРазница,
		|	СУММА(Т.Знак * Т.ВременнаяРазница) 				КАК ВременнаяРазница,
		//-- НЕ УТ
		|	СУММА(Т.Знак * Т.СтоимостьРегл) 				КАК СтоимостьРегл,
		|	СУММА(Т.Знак * Т.СтоимостьРеглБезНДС)           КАК СтоимостьРеглБезНДС,
		|	СУММА(Т.Знак * Т.НДСРегл)	                    КАК НДСРегл,
		|	СУММА(Т.Знак * Т.СтоимостьЗабалансовая) 		КАК СтоимостьЗабалансовая,
		|	СУММА(Т.Знак * Т.Трудозатраты) 					КАК Трудозатраты,
		|	СУММА(Т.Знак * Т.ПостатейныеПостоянныеСНДС) 	КАК ПостатейныеПостоянныеСНДС,
		|	СУММА(Т.Знак * Т.ПостатейныеПостоянныеБезНДС) 	КАК ПостатейныеПостоянныеБезНДС,
		|	СУММА(Т.Знак * Т.ПостатейныеПеременныеСНДС) 	КАК ПостатейныеПеременныеСНДС,
		|	СУММА(Т.Знак * Т.ПостатейныеПеременныеБезНДС) 	КАК ПостатейныеПеременныеБезНДС,
		|	СУММА(Т.Знак * Т.СтоимостьЗабалансоваяРегл)		КАК СтоимостьЗабалансоваяРегл,
        |	СУММА(Т.Знак * Т.ДопРасходыРегл) 				КАК ДопРасходыРегл,
        |	СУММА(Т.Знак * Т.ТрудозатратыРегл) 				КАК ТрудозатратыРегл,
        |	СУММА(Т.Знак * Т.ПостатейныеПостоянныеРегл) 	КАК ПостатейныеПостоянныеРегл,
        |	СУММА(Т.Знак * Т.ПостатейныеПеременныеРегл) 	КАК ПостатейныеПеременныеРегл,
        |	СУММА(Т.Знак * Т.ДопРасходыРеглБезНДС) 				КАК ДопРасходыРеглБезНДС,
        |	СУММА(Т.Знак * Т.ПостатейныеПостоянныеРеглБезНДС) 	КАК ПостатейныеПостоянныеРеглБезНДС,
        |	СУММА(Т.Знак * Т.ПостатейныеПеременныеРеглБезНДС) 	КАК ПостатейныеПеременныеРеглБезНДС,
        |	СУММА(Т.Знак * Т.СтоимостьУпр) 					КАК СтоимостьУпр,
        |	СУММА(Т.Знак * Т.ДопРасходыУпр) 				КАК ДопРасходыУпр,
        |	СУММА(Т.Знак * Т.ТрудозатратыУпр) 				КАК ТрудозатратыУпр,
        |	СУММА(Т.Знак * Т.ПостатейныеПостоянныеУпр)		КАК ПостатейныеПостоянныеУпр,
        |	СУММА(Т.Знак * Т.ПостатейныеПеременныеУпр)		КАК ПостатейныеПеременныеУпр
        |	,СУММА(Т.Знак * Т.СтоимостьУпрБезНДС) 				КАК СтоимостьУпрБезНДС,
        |	СУММА(Т.Знак * Т.ДопРасходыУпрБезНДС) 				КАК ДопРасходыУпрБезНДС,
        |	СУММА(Т.Знак * Т.ПостатейныеПостоянныеУпрБезНДС)	КАК ПостатейныеПостоянныеУпрБезНДС,
        |	СУММА(Т.Знак * Т.ПостатейныеПеременныеУпрБезНДС)	КАК ПостатейныеПеременныеУпрБезНДС
		|ПОМЕСТИТЬ ВТОстатки
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.РазделУчета 							КАК РазделУчета,
		|		Т.ВидЗапасов 							КАК ВидЗапасов,
		|		Т.Организация 							КАК Организация,
		|		Т.АналитикаУчетаНоменклатуры 			КАК АналитикаУчетаНоменклатуры,
		|		Т.Партия 								КАК Партия,
		|		Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
		|		Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
        |		Т.НалоговоеНазначение  					КАК НалоговоеНазначение,
		|		
		|		1										КАК Знак,
		|		Т.КоличествоОстаток 					КАК Количество,
		|		
		|		Т.СтоимостьОстаток 						КАК Стоимость,
		|		Т.СтоимостьБезНДСОстаток 				КАК СтоимостьБезНДС,
		|		Т.ДопРасходыОстаток 					КАК ДопРасходы,
		|		Т.ДопРасходыБезНДСОстаток 				КАК ДопРасходыБезНДС,
		//++ НЕ УТ
		|		Т.ПостояннаяРазницаОстаток 				КАК ПостояннаяРазница,
		|		Т.ВременнаяРазницаОстаток 				КАК ВременнаяРазница,
		//-- НЕ УТ
		|		Т.СтоимостьРеглОстаток 					КАК СтоимостьРегл,
		|		Т.СтоимостьРеглБезНДСОстаток 			КАК СтоимостьРеглБезНДС,
		|		Т.НДСРеглОстаток 					    КАК НДСРегл,
		|		Т.СтоимостьЗабалансоваяОстаток 			КАК СтоимостьЗабалансовая,
		|		Т.ТрудозатратыОстаток 					КАК Трудозатраты,
		|		Т.ПостатейныеПостоянныеСНДСОстаток 		КАК ПостатейныеПостоянныеСНДС,
		|		Т.ПостатейныеПостоянныеБезНДСОстаток 	КАК ПостатейныеПостоянныеБезНДС,
		|		Т.ПостатейныеПеременныеСНДСОстаток 		КАК ПостатейныеПеременныеСНДС,
		|		Т.ПостатейныеПеременныеБезНДСОстаток 	КАК ПостатейныеПеременныеБезНДС,
		|		Т.СтоимостьЗабалансоваяРеглОстаток 		КАК СтоимостьЗабалансоваяРегл,
        |		Т.ДопРасходыРеглОстаток 				КАК ДопРасходыРегл,
        |		Т.ТрудозатратыРеглОстаток 				КАК ТрудозатратыРегл,
        |		Т.ПостатейныеПостоянныеРеглОстаток 		КАК ПостатейныеПостоянныеРегл,
        |		Т.ПостатейныеПеременныеРеглОстаток 		КАК ПостатейныеПеременныеРегл,
        |		Т.ДопРасходыРеглБезНДСОстаток 				КАК ДопРасходыРеглБезНДС,
        |		Т.ПостатейныеПостоянныеРеглБезНДСОстаток 		КАК ПостатейныеПостоянныеРеглБезНДС,
        |		Т.ПостатейныеПеременныеРеглБезНДСОстаток 		КАК ПостатейныеПеременныеРеглБезНДС,
        |		Т.СтоимостьУпрОстаток 					КАК СтоимостьУпр,
        |		Т.ДопРасходыУпрОстаток 					КАК ДопРасходыУпр,
        |		Т.ТрудозатратыУпрОстаток 				КАК ТрудозатратыУпр,
        |		Т.ПостатейныеПостоянныеУпрОстаток 		КАК ПостатейныеПостоянныеУпр,
        |		Т.ПостатейныеПеременныеУпрОстаток 		КАК ПостатейныеПеременныеУпр
        |		,Т.СтоимостьУпрБезНДСОстаток 					КАК СтоимостьУпрБезНДС,
        |		Т.ДопРасходыУпрБезНДСОстаток 					КАК ДопРасходыУпрБезНДС,
        |		Т.ПостатейныеПостоянныеУпрБезНДСОстаток 		КАК ПостатейныеПостоянныеУпрБезНДС,
        |		Т.ПостатейныеПеременныеУпрБезНДСОстаток 		КАК ПостатейныеПеременныеУпрБезНДС
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров.Остатки(
		|			&ГраницаКонецПериода, Организация В (&МассивОрганизаций)) КАК Т
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Исключим из остатков на конец периода движения, формирующие начальные остатки для партионного учета версии 2.2.
		|	ВЫБРАТЬ
		|		Т.РазделУчета 						КАК РазделУчета,
		|		Т.ВидЗапасов 						КАК ВидЗапасов,
		|		Т.Организация 						КАК Организация,
		|		Т.АналитикаУчетаНоменклатуры 		КАК АналитикаУчетаНоменклатуры,
		|		Т.Партия 							КАК Партия,
		|		Т.АналитикаУчетаПартий 				КАК АналитикаУчетаПартий,
		|		Т.АналитикаФинансовогоУчета 		КАК АналитикаФинансовогоУчета,
        |		Т.НалоговоеНазначение 				КАК НалоговоеНазначение,
		|		
		|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ								КАК Знак,
		|		Т.Количество 						КАК Количество,
		|		
		|		Т.Стоимость 						КАК Стоимость,
		|		Т.СтоимостьБезНДС 					КАК СтоимостьБезНДС,
		|		Т.ДопРасходы 						КАК ДопРасходы,
		|		Т.ДопРасходыБезНДС 					КАК ДопРасходыБезНДС,
		//++ НЕ УТ
		|		Т.ПостояннаяРазница 				КАК ПостояннаяРазница,
		|		Т.ВременнаяРазница 					КАК ВременнаяРазница,
		//-- НЕ УТ
		|		Т.СтоимостьРегл 					КАК СтоимостьРегл,
		|		Т.СтоимостьРеглБезНДС               КАК СтоимостьРеглБезНДС,
		|		Т.НДСРегл 					        КАК НДСРегл,
		|		Т.СтоимостьЗабалансовая 			КАК СтоимостьЗабалансовая,
		|		Т.Трудозатраты 						КАК Трудозатраты,
		|		Т.ПостатейныеПостоянныеСНДС 		КАК ПостатейныеПостоянныеСНДС,
		|		Т.ПостатейныеПостоянныеБезНДС 		КАК ПостатейныеПостоянныеБезНДС,
		|		Т.ПостатейныеПеременныеСНДС 		КАК ПостатейныеПеременныеСНДС,
		|		Т.ПостатейныеПеременныеБезНДС 		КАК ПостатейныеПеременныеБезНДС,
		|		Т.СтоимостьЗабалансоваяРегл 		КАК СтоимостьЗабалансоваяРегл,
        |		Т.ДопРасходыРегл 					КАК ДопРасходыРегл,
        |		Т.ТрудозатратыРегл 					КАК ТрудозатратыРегл,
        |		Т.ПостатейныеПостоянныеРегл 		КАК ПостатейныеПостоянныеРегл,
        |		Т.ПостатейныеПеременныеРегл 		КАК ПостатейныеПеременныеРегл,
        |		Т.ДопРасходыРеглБезНДС 					КАК ДопРасходыРеглБезНДС,
        |		Т.ПостатейныеПостоянныеРеглБезНДС 		КАК ПостатейныеПостоянныеРеглБезНДС,
        |		Т.ПостатейныеПеременныеРеглБезНДС 		КАК ПостатейныеПеременныеРеглБезНДС,
        |		Т.СтоимостьУпр 						КАК СтоимостьУпр,
        |		Т.ДопРасходыУпр 					КАК ДопРасходыУпр,
        |		Т.ТрудозатратыУпр 					КАК ТрудозатратыУпр,
        |		Т.ПостатейныеПостоянныеУпр 			КАК ПостатейныеПостоянныеУпр,
        |		Т.ПостатейныеПеременныеУпр 			КАК ПостатейныеПеременныеУпр
        |		,Т.СтоимостьУпрБезНДС 					КАК СтоимостьУпрБезНДС,
        |		Т.ДопРасходыУпрБезНДС 					КАК ДопРасходыУпрБезНДС,
        |		Т.ПостатейныеПостоянныеУпрБезНДС 		КАК ПостатейныеПостоянныеУпрБезНДС,
        |		Т.ПостатейныеПеременныеУпрБезНДС 		КАК ПостатейныеПеременныеУпрБезНДС
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров КАК Т
		|	ГДЕ
		|		НЕ &ПартионныйУчетВерсии22
		|		И &ДатаПереходаНаПартионныйУчетВерсии22 = &НачалоСледующегоПериода
		|		И Т.Период = &КонецПериода
		|		И Т.Организация В (&МассивОрганизаций)
		|		И Т.Активность
		|		И Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)
		|	) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.РазделУчета,
		|	Т.ВидЗапасов,
		|	Т.Организация,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.Партия,
		|	Т.АналитикаУчетаПартий,
		|	Т.АналитикаФинансовогоУчета,
        |	Т.НалоговоеНазначение 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Т.РазделУчета 							КАК РазделУчета,
		|	Т.ВидЗапасов 							КАК ВидЗапасов,
		|	Т.Организация 						 	КАК Организация,
		|	Т.АналитикаУчетаНоменклатуры   			КАК АналитикаУчетаНоменклатуры,
		|	Т.Партия 								КАК Партия,
		|	Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
		|	Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
        |	Т.НалоговоеНазначение 					КАК НалоговоеНазначение,
		|
		|	Т.Количество 							КАК Количество,
		//++ НЕ УТ
		|	Т.ПостояннаяРазница 					КАК ПостояннаяРазница,
		|	Т.ВременнаяРазница 						КАК ВременнаяРазница,
		//-- НЕ УТ
		|	Т.Стоимость
		|		+ Т.СтоимостьЗабалансовая
		|		+ Т.ДопРасходы
		|		+ Т.Трудозатраты
		|		+ Т.ПостатейныеПостоянныеСНДС
		|		+ Т.ПостатейныеПеременныеСНДС 		КАК ПолнаяСтоимость,
		|	Т.СтоимостьБезНДС
		|		+ Т.ДопРасходыБезНДС
		|		+ Т.Трудозатраты
		|		+ Т.ПостатейныеПостоянныеБезНДС
		|		+ Т.ПостатейныеПеременныеБезНДС		КАК ПолнаяСтоимостьБезНДС,
        |	Т.СтоимостьРегл
        |		+ Т.СтоимостьЗабалансоваяРегл
        |		+ Т.ДопРасходыРегл
        |		+ Т.ТрудозатратыРегл
        |		+ Т.ПостатейныеПостоянныеРегл
        |		+ Т.ПостатейныеПеременныеРегл		КАК ПолнаяСтоимостьРегл,
        |	Т.НДСРегл                               КАК ПолнаяНДСРегл,
        |	Т.СтоимостьУпр
        |		+ Т.ДопРасходыУпр
        |		+ Т.ТрудозатратыУпр
        |		+ Т.ПостатейныеПостоянныеУпр
        |		+ Т.ПостатейныеПеременныеУпр		КАК ПолнаяСтоимостьУпр
        |	,Т.СтоимостьРеглБезНДС
        |		+ Т.СтоимостьЗабалансоваяРегл
        |		+ Т.ДопРасходыРеглБезНДС
        |		+ Т.ТрудозатратыРегл
        |		+ Т.ПостатейныеПостоянныеРеглБезНДС
        |		+ Т.ПостатейныеПеременныеРеглБезНДС		КАК ПолнаяСтоимостьРеглБезНДС,
        |	Т.СтоимостьУпрБезНДС
        |		+ Т.ДопРасходыУпрБезНДС
        |		+ Т.ТрудозатратыУпр
        |		+ Т.ПостатейныеПостоянныеУпрБезНДС
        |		+ Т.ПостатейныеПеременныеУпрБезНДС		КАК ПолнаяСтоимостьУпрБезНДС
		|ПОМЕСТИТЬ ВТОстаткиБезКоличества
		|ИЗ
		|	ВТОстатки КАК Т
		|ГДЕ
		|	Т.Количество = 0
		|	И НЕ (Т.Стоимость = 0
		|		И Т.СтоимостьБезНДС = 0
		|		И Т.ДопРасходы = 0
		|		И Т.ДопРасходыБезНДС = 0
		//++ НЕ УТ
		|		И Т.ПостояннаяРазница = 0
		|		И Т.ВременнаяРазница = 0
		//-- НЕ УТ
		|		И Т.СтоимостьРегл = 0
		|		И Т.СтоимостьРеглБезНДС = 0
		|		И Т.НДСРегл = 0
		|		И Т.СтоимостьЗабалансовая = 0
		|		И Т.Трудозатраты = 0
		|		И Т.ПостатейныеПостоянныеСНДС = 0
		|		И Т.ПостатейныеПостоянныеБезНДС = 0
		|		И Т.ПостатейныеПостоянныеБезНДС = 0
		|		И Т.ПостатейныеПеременныеБезНДС = 0
		|		И Т.СтоимостьЗабалансоваяРегл = 0
        |		И Т.ДопРасходыРегл = 0
        |		И Т.ТрудозатратыРегл = 0
        |		И Т.ПостатейныеПостоянныеРегл = 0
        |		И Т.ПостатейныеПеременныеРегл = 0
        |		И Т.ДопРасходыРеглБезНДС = 0
        |		И Т.ПостатейныеПостоянныеРеглБезНДС = 0
        |		И Т.ПостатейныеПеременныеРеглБезНДС = 0
        |		И Т.СтоимостьУпрБезНДС = 0
        |		И Т.ДопРасходыУпрБезНДС = 0
        |		И Т.ПостатейныеПостоянныеУпрБезНДС = 0
        |		И Т.ПостатейныеПеременныеУпрБезНДС = 0
        |		И Т.СтоимостьУпр = 0
        |		И Т.ДопРасходыУпр = 0
        |		И Т.ТрудозатратыУпр = 0
        |		И Т.ПостатейныеПостоянныеУпр = 0
        |		И Т.ПостатейныеПеременныеУпр = 0)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Т.РазделУчета 							КАК РазделУчета,
		|	Т.ВидЗапасов 							КАК ВидЗапасов,
		|	Т.Организация 						 	КАК Организация,
		|	Т.АналитикаУчетаНоменклатуры   			КАК АналитикаУчетаНоменклатуры,
		|	Т.Партия 								КАК Партия,
		|	Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
		|	Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
        |	Т.НалоговоеНазначение 					КАК НалоговоеНазначение,
		|
		|	Т.Количество 							КАК Количество,
		//++ НЕ УТ
		|	Т.ПостояннаяРазница 					КАК ПостояннаяРазница,
		|	Т.ВременнаяРазница 						КАК ВременнаяРазница,
		//-- НЕ УТ
		|	Т.Стоимость
		|		+ Т.СтоимостьЗабалансовая
		|		+ Т.ДопРасходы
		|		+ Т.Трудозатраты
		|		+ Т.ПостатейныеПостоянныеСНДС
		|		+ Т.ПостатейныеПеременныеСНДС 		КАК ПолнаяСтоимость,
		|	Т.СтоимостьБезНДС
		|		+ Т.ДопРасходыБезНДС
		|		+ Т.Трудозатраты
		|		+ Т.ПостатейныеПостоянныеБезНДС
		|		+ Т.ПостатейныеПеременныеБезНДС		КАК ПолнаяСтоимостьБезНДС,
        |	Т.СтоимостьРегл
        |		+ Т.СтоимостьЗабалансоваяРегл
        |		+ Т.ДопРасходыРегл
        |		+ Т.ТрудозатратыРегл
        |		+ Т.ПостатейныеПостоянныеРегл
        |		+ Т.ПостатейныеПеременныеРегл		КАК ПолнаяСтоимостьРегл,
        |	Т.НДСРегл                               КАК ПолнаяНДСРегл,
        |	Т.СтоимостьУпр
        |		+ Т.ДопРасходыУпр
        |		+ Т.ТрудозатратыУпр
        |		+ Т.ПостатейныеПостоянныеУпр
        |		+ Т.ПостатейныеПеременныеУпр		КАК ПолнаяСтоимостьУпр
        |	,Т.СтоимостьРеглБезНДС
        |		+ Т.СтоимостьЗабалансоваяРегл
        |		+ Т.ДопРасходыРеглБезНДС
        |		+ Т.ТрудозатратыРегл
        |		+ Т.ПостатейныеПостоянныеРеглБезНДС
        |		+ Т.ПостатейныеПеременныеРеглБезНДС		КАК ПолнаяСтоимостьРеглБезНДС,
        |	Т.СтоимостьУпрБезНДС
        |		+ Т.ДопРасходыУпрБезНДС
        |		+ Т.ТрудозатратыУпр
        |		+ Т.ПостатейныеПостоянныеУпрБезНДС
        |		+ Т.ПостатейныеПеременныеУпрБезНДС		КАК ПолнаяСтоимостьУпрБезНДС
		|ПОМЕСТИТЬ ВТОстаткиСРазнымЗнаком
		|ИЗ
		|	ВТОстатки КАК Т
		|ГДЕ
		|	Т.Количество <> 0
		|	И НЕ (Т.Количество
		|			* (Т.Стоимость + Т.СтоимостьЗабалансовая
		|				+ Т.ДопРасходы + Т.Трудозатраты
		|				+ Т.ПостатейныеПостоянныеСНДС + Т.ПостатейныеПеременныеСНДС) >= 0
		|		И Т.Количество
		|			* (Т.СтоимостьБезНДС + Т.ДопРасходыБезНДС + Т.Трудозатраты
		|				+ Т.ПостатейныеПостоянныеБезНДС + Т.ПостатейныеПеременныеБезНДС) >= 0
        |		И Т.Количество
        |			* (Т.СтоимостьРегл + Т.СтоимостьЗабалансоваяРегл
        |				+ Т.ДопРасходыРегл + Т.ТрудозатратыРегл
        |				+ Т.ПостатейныеПостоянныеРегл + Т.ПостатейныеПеременныеРегл) >= 0
        |		И Т.Количество
        |			* (Т.НДСРегл) >= 0
        |		И Т.Количество
        |			* (Т.СтоимостьУпр + Т.ДопРасходыУпр + Т.ТрудозатратыУпр
        |				+ Т.ПостатейныеПостоянныеУпр + Т.ПостатейныеПеременныеУпр) >= 0
        |		И Т.Количество
        |			* (Т.СтоимостьРеглБезНДС + Т.СтоимостьЗабалансоваяРегл
        |				+ Т.ДопРасходыРеглБезНДС + Т.ТрудозатратыРегл
        |				+ Т.ПостатейныеПостоянныеРеглБезНДС + Т.ПостатейныеПеременныеРеглБезНДС) >= 0
        |		И Т.Количество
        |			* (Т.СтоимостьУпрБезНДС + Т.ДопРасходыУпрБезНДС + Т.ТрудозатратыУпр
        |				+ Т.ПостатейныеПостоянныеУпрБезНДС + Т.ПостатейныеПеременныеУпрБезНДС) >= 0
		|		)
		|	И Т.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
		|	И НЕ Т.Партия ССЫЛКА Документ.КорректировкаПриобретения
		|";

	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РазделУчета", НСтр("ru='Раздел учета';uk='Розділ обліку'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры';uk='Аналітика номенклатури'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидЗапасов", НСтр("ru='Вид запасов';uk='Вид запасів'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Партия", НСтр("ru='Партия';uk='Партія'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаПартий", НСтр("ru='Аналитика учета партий';uk='Аналітика обліку партій'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаФинансовогоУчета", НСтр("ru='Аналитика финансового учета';uk='Аналітика фінансового обліку'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("НалоговоеНазначение", НСтр("ru='Налоговое назначение';uk='Податкове призначення'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество", НСтр("ru='Количество';uk='Кількість'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПолнаяСтоимость", НСтр("ru='Полная стоимость';uk='Повна вартість'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПолнаяСтоимостьБезНДС", НСтр("ru='Полная стоимость без НДС';uk='Повна вартість без ПДВ'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("ПолнаяСтоимостьРегл", НСтр("ru='Полная стоимость (регл.)';uk='Повна вартість (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("ПолнаяНДСРегл", НСтр("ru='НДС (регл.)';uk='ПДВ (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("ПолнаяСтоимостьУпр", НСтр("ru='Полная стоимость (упр.)';uk='Повна вартість (упр.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("ПолнаяСтоимостьРеглБезНДС", НСтр("ru='Полная стоимость без НДС (регл.)';uk='Повна вартість без ПДВ (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("ПолнаяСтоимостьУпрБезНДС", НСтр("ru='Полная стоимость без НДС (упр.)';uk='Повна вартість без ПДВ (упр.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
	//++ НЕ УТ
	СписокПолей.Добавить("ПостояннаяРазница", НСтр("ru='Постоянная разница';uk='Постійна різниця'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВременнаяРазница", НСтр("ru='Временная разница';uk='Тимчасова різниця'",ОбщегоНазначения.КодОсновногоЯзыка()));
	//-- НЕ УТ
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки("ВТОстаткиБезКоличества", НСтр("ru='Обнаружены ненулевые остатки по суммам при нулевом остатке по количеству в регистре себестоимости по организации ""%1"" на конец периода %2';uk='Виявлено ненульові залишки за сумами при нульовому залишку за кількістю в регістрі собівартості по організації ""%1"" на кінець періоду %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей, , Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());

	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, "ВТОстаткиСРазнымЗнаком", НСтр("ru='Обнаружены разные знаки у остатков по суммам и остатка по количеству в регистре себестоимости по организации ""%1"" на конец периода %2';uk='Виявлено різні знаки у залишків за сумами і залишку за кількістю в регістрі собівартості по організації ""%1"" на кінець періоду %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей, , Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());

	ДополнительныеПараметрыЗапроса = Новый Структура;
	ДополнительныеПараметрыЗапроса.Вставить("ТипыЗаписейКонвертацииДанных", ТипыЗаписейКонвертацииДанных());

	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(ПараметрыПроверки, ПараметрыРегистрации, ТекстЗапроса, ДополнительныеПараметрыЗапроса);

КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ЗатратыНеРаспределенныеНаСебестоимость".
//
Процедура ПроверкаЗатратНеРаспределенныхНаСебестоимость(ПараметрыПроверки) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТСтатьиРасходовУпр
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК Т
		|ГДЕ
		|	Т.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТСтатьиРасходовРегл
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК Т
		|ГДЕ
		|	Т.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Организация,
		|	Т.Подразделение,
		|	Т.СтатьяРасходов,
		|	Т.АналитикаРасходов,
		|	Т.ДокументПоступленияРасходов,
		|	Т.АналитикаУчетаПартий,
		|	Т.НаправлениеДеятельности,
		|	Т.АналитикаУчетаНоменклатуры,
        |	Т.НалоговоеНазначение,
		|	СУММА(Т.Стоимость) КАК Стоимость,
		|	СУММА(Т.СтоимостьБезНДС) КАК СтоимостьБезНДС,
		|	СУММА(Т.СтоимостьРегл) КАК СтоимостьРегл,
		//++ НЕ УТ
		|	СУММА(Т.ПостояннаяРазница) КАК ПостояннаяРазница,
		|	СУММА(Т.ВременнаяРазница) КАК ВременнаяРазница,
		//-- НЕ УТ
		|	СУММА(Т.НДСРегл) КАК НДСРегл
		|ПОМЕСТИТЬ ВТВсеОстаткиНераспределенныхРасходов
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Организация КАК Организация,
		|		Т.Подразделение КАК Подразделение,
		|		Т.СтатьяРасходов КАК СтатьяРасходов,
		|		Т.АналитикаРасходов КАК АналитикаРасходов,
		|		Т.ДокументПоступленияРасходов КАК ДокументПоступленияРасходов,
		|		Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|		Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
        |		Т.НалоговоеНазначение КАК НалоговоеНазначение,
		|		Т.СтоимостьОстаток КАК Стоимость,
		|		Т.СтоимостьБезНДСОстаток КАК СтоимостьБезНДС,
		|		0 КАК СтоимостьРегл,
		//++ НЕ УТ
		|		0 КАК ПостояннаяРазница,
		|		0 КАК ВременнаяРазница,
		//-- НЕ УТ
		|		0 КАК НДСРегл
		|	ИЗ
		|		РегистрНакопления.ПартииПрочихРасходов.Остатки(
		|			&ГраницаКонецПериода,
		|			СтатьяРасходов В
		|				(ВЫБРАТЬ
		|					Т.Ссылка
		|				ИЗ
		|					ВТСтатьиРасходовУпр КАК Т)) КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Организация КАК Организация,
		|		Т.Подразделение КАК Подразделение,
		|		Т.СтатьяРасходов КАК СтатьяРасходов,
		|		Т.АналитикаРасходов КАК АналитикаРасходов,
		|		Т.ДокументПоступленияРасходов КАК ДокументПоступленияРасходов,
		|		Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|		Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
        |		Т.НалоговоеНазначение КАК НалоговоеНазначение,
		|		0 КАК Стоимость,
		|		0 КАК СтоимостьБезНДС,
		|		Т.СтоимостьРеглОстаток КАК СтоимостьРегл,
		//++ НЕ УТ
		|		Т.ПостояннаяРазницаОстаток КАК ПостояннаяРазница,
		|		Т.ВременнаяРазницаОстаток КАК ВременнаяРазница,
		//-- НЕ УТ
		|		Т.НДСРеглОстаток КАК НДСРегл
		|	ИЗ
		|		РегистрНакопления.ПартииПрочихРасходов.Остатки(
		|			&ГраницаКонецПериода,
		|			СтатьяРасходов В
		|				(ВЫБРАТЬ
		|					Т.Ссылка
		|				ИЗ
		|					ВТСтатьиРасходовРегл КАК Т)) КАК Т) КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.Организация,
		|	Т.Подразделение,
		|	Т.СтатьяРасходов,
		|	Т.АналитикаРасходов,
		|	Т.ДокументПоступленияРасходов,
		|	Т.АналитикаУчетаПартий,
		|	Т.НаправлениеДеятельности,
		|	Т.АналитикаУчетаНоменклатуры,
        |	Т.НалоговоеНазначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Организация,
		|	Т.Подразделение,
		|	Т.СтатьяРасходов,
		|	Т.АналитикаРасходов,
		|	Т.ДокументПоступленияРасходов,
		|	Т.АналитикаУчетаПартий,
		|	Т.НаправлениеДеятельности,
		|	Т.АналитикаУчетаНоменклатуры,
        |	Т.НалоговоеНазначение,
		|	Т.Стоимость КАК Стоимость,
		|	Т.СтоимостьБезНДС КАК СтоимостьБезНДС,
		|	Т.СтоимостьРегл КАК СтоимостьРегл,
		//++ НЕ УТ
		|	Т.ПостояннаяРазница КАК ПостояннаяРазница,
		|	Т.ВременнаяРазница КАК ВременнаяРазница,
		//-- НЕ УТ
		|	Т.НДСРегл КАК НДСРегл
		|ПОМЕСТИТЬ ВТОстаткиНераспределенныхРасходов
		|ИЗ
		|	ВТВсеОстаткиНераспределенныхРасходов КАК Т
		|ГДЕ
		|	&УсловиеОтбораПоДатеДокументаАналитики
		|	И &УсловиеОтбораПоПроведеннымДокументамАналитики
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Организация,
		|	Т.Подразделение,
		|	Т.СтатьяРасходов,
		|	Т.АналитикаРасходов,
		|	Т.ДокументПоступленияРасходов,
		|	Т.АналитикаУчетаПартий,
		|	Т.НаправлениеДеятельности,
		|	Т.АналитикаУчетаНоменклатуры,
        |	Т.НалоговоеНазначение,
		|	Т.Стоимость КАК Стоимость,
		|	Т.СтоимостьБезНДС КАК СтоимостьБезНДС,
		|	Т.СтоимостьРегл КАК СтоимостьРегл,
		//++ НЕ УТ
		|	Т.ПостояннаяРазница КАК ПостояннаяРазница,
		|	Т.ВременнаяРазница КАК ВременнаяРазница,
		//-- НЕ УТ
		|	Т.НДСРегл КАК НДСРегл
		|ПОМЕСТИТЬ ВТОстаткиНераспределенныхРасходовПоНекорректнымАналитикам
		|ИЗ
		|	ВТВсеОстаткиНераспределенныхРасходов КАК Т
		|ГДЕ
		|	&УсловиеОтбораПоДатеДокументаАналитики
		|	И &УсловиеОтбораПоНепроведеннымДокументамАналитики";

		// Добавим отбор по полю АналитикаРасходов:
	// если в аналитике указан документ и его дата находится в следующих периодах, то по таким расходам ошибку не регистрируем.
	ТекстОтбораДата = "";
	// Также разделим остатки расходов по проведенным и непроведенным документам аналитики.
	ТекстОтбораПроведен = "";
	ТекстОтбораНеПроведен = "";

	Для Каждого ТекущийТип Из Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип.Типы() Цикл

		Если НЕ Документы.ТипВсеСсылки().СодержитТип(ТекущийТип) Тогда
			Продолжить;
		КонецЕсли;

		ИмяДокумента = Метаданные.НайтиПоТипу(ТекущийТип).Имя;

		ТекстОтбораДата = ТекстОтбораДата + "
			|		КОГДА Т.АналитикаРасходов ССЫЛКА Документ." + ИмяДокумента + "
			|			ТОГДА ВЫРАЗИТЬ(Т.АналитикаРасходов КАК Документ." + ИмяДокумента
			+ ").Дата";

		ТекстОтбораПроведен = ТекстОтбораПроведен + "
			|		КОГДА Т.АналитикаРасходов ССЫЛКА Документ." + ИмяДокумента + "
			|			ТОГДА ВЫРАЗИТЬ(Т.АналитикаРасходов КАК Документ." + ИмяДокумента
			+ ").Проведен";

	КонецЦикла;

	Если ПустаяСтрока(ТекстОтбораДата) Тогда

		ТекстОтбораДата = "ИСТИНА";
		ТекстОтбораПроведен = "ИСТИНА";
		ТекстОтбораНеПроведен = "ЛОЖЬ";

	Иначе

		ТекстОтбораДата = "	ЕСТЬNULL(
			|		ВЫБОР" + ТекстОтбораДата + "
			|		ИНАЧЕ NULL
			|		КОНЕЦ, ДАТАВРЕМЯ(1,1,1)) <= &КонецПериода";

		ТекстОтбораНеПроведен = "	ЕСТЬNULL(
			|		ВЫБОР" + ТекстОтбораПроведен + "
			|		ИНАЧЕ NULL
			|		КОНЕЦ, ИСТИНА) = ЛОЖЬ";

		ТекстОтбораПроведен = "	ЕСТЬNULL(
			|		ВЫБОР" + ТекстОтбораПроведен + "
			|		ИНАЧЕ NULL
			|		КОНЕЦ, ИСТИНА) = ИСТИНА";

	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоДатеДокументаАналитики", ТекстОтбораДата);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоПроведеннымДокументамАналитики", ТекстОтбораПроведен);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоНепроведеннымДокументамАналитики", ТекстОтбораНеПроведен);

	// Зарегистрируем ошибки.
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение", НСтр("ru='Подразделение';uk='Підрозділ'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяРасходов", НСтр("ru='Статья расходов';uk='Стаття витрат'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаРасходов", НСтр("ru='Аналитика расходов';uk='Аналітика витрат'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ДокументПоступленияРасходов", НСтр("ru='Документ поступления расходов';uk='Документ надходження витрат'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаПартий", НСтр("ru='Аналитика учета партий';uk='Аналітика обліку партій'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru='Направление деятельности';uk='Напрям діяльності'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры';uk='Аналітика номенклатури'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("НалоговоеНазначение", НСтр("ru='Налоговое назначение';uk='Податкове призначення'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Стоимость", НСтр("ru='Стоимость';uk='Вартість'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтоимостьБезНДС", НСтр("ru='Стоимость без НДС';uk='Вартість без ПДВ'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтоимостьРегл", НСтр("ru='Стоимость (регл.)';uk='Вартість (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НДСРегл", НСтр("ru='НДС (регл.)';uk='ПДВ (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
	//++ НЕ УТ
	СписокПолей.Добавить("ПостояннаяРазница", НСтр("ru='Постоянная разница';uk='Постійна різниця'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВременнаяРазница", НСтр("ru='Временная разница';uk='Тимчасова різниця'",ОбщегоНазначения.КодОсновногоЯзыка()));
	//-- НЕ УТ
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки("ВТОстаткиНераспределенныхРасходов", НСтр("ru='Обнаружены не распределенные на себестоимость остатки расходов по организации ""%1"" на конец периода %2';uk='Виявлені не розподілені на собівартість залишки витрат по організації ""%1"" на кінець періоду %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей);

	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, "ВТОстаткиНераспределенныхРасходовПоНекорректнымАналитикам", НСтр("ru='Обнаружены остатки расходов по организации ""%1"" на конец периода %2 по аналитикам, в которых указаны непроведенные документы';uk='Виявлено залишки витрат по організації ""%1"" на кінець періоду %2 по аналітиках, в яких вказані непроведені документи'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей);

	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(ПараметрыПроверки, ПараметрыРегистрации, ТекстЗапроса);

КонецПроцедуры

//++ НЕ УТ

// Процедура-обработчик проверки состояния системы "ПроверкаРаспределенияРезервовПредстоящихРасходов".
//
Процедура ПроверкаРаспределенияРезервовПредстоящихРасходов(ПараметрыПроверки) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ
		|	ОстаткиРезервов.Организация КАК Организация,
		|	ОстаткиРезервов.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ОстаткиРезервов.ОбъектУчетаРезервов КАК ОбъектУчетаРезервов,
		|	ОстаткиРезервов.ВидРезервов КАК ВидРезервов,
		|	ЕСТЬNULL(ОстаткиРезервов.СуммаУпрОстаток, 0) КАК СуммаУпр,
		|	ЕСТЬNULL(ОстаткиРезервов.СуммаРеглОстаток, 0) КАК СуммаРегл
		|ПОМЕСТИТЬ ОтрицательныеОстатки
		|ИЗ
		|	РегистрНакопления.РезервыПредстоящихРасходов.Остатки(&ГраницаКонецПериода, Организация В (&МассивОрганизаций)) КАК ОстаткиРезервов
		|ГДЕ
		|	(ЕСТЬNULL(ОстаткиРезервов.СуммаУпрОстаток, 0) > 0
		|			ИЛИ ЕСТЬNULL(ОстаткиРезервов.СуммаРеглОстаток, 0) > 0)
		|;
		|";

	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru='Направление деятельности';uk='Напрям діяльності'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ОбъектУчетаРезервов", НСтр("ru='Объект учета резервов';uk='Об''єкт обліку резервів'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидРезервов", НСтр("ru='Вид резервов';uk='Вид резервів'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СуммаРегл", НСтр("ru='Сумма (регл.)';uk='Сума (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СуммаУпр", НСтр("ru='Сумма (упр.)';uk='Сума (упр.)'",ОбщегоНазначения.КодОсновногоЯзыка()));

	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки("ОтрицательныеОстатки", НСтр("ru='Обнаружен расход резервов предстоящих расходов сверх величины резерва (списано больше, чем начислено) по организации ""%1"" на конец периода %2';uk='Виявлено видаток резервів майбутніх витрат понад величину резерву (списано більше, ніж нараховано) по організації ""%1"" на кінець періоду %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей);

	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(ПараметрыПроверки, ПараметрыРегистрации, ТекстЗапроса);

КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ОстаткиВНезавершенномПроизводстве".
//
Процедура ПроверкаОстатковВНезавершенномПроизводстве(ПараметрыПроверки) Экспорт

	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаЗавершенныеПартии());
	ТекстыЗапроса.Добавить("ВЫБРАТЬ
		|	Т.Организация									КАК Организация,
		|	Т.РазделУчета									КАК РазделУчета,
		|	Т.АналитикаУчетаНоменклатуры					КАК АналитикаУчетаНоменклатуры,
		|	Т.Партия										КАК Партия,
		|	Т.АналитикаФинансовогоУчета						КАК АналитикаФинансовогоУчета,
        |	Т.НалоговоеНазначение 					        КАК НалоговоеНазначение,
		|	Т.КоличествоОстаток								КАК Количество,
		|	Т.СтоимостьОстаток
		|			+ Т.ДопРасходыОстаток
		|			+ Т.ТрудозатратыОстаток
		|			+ Т.ПостатейныеПостоянныеСНДСОстаток
		|			+ Т.ПостатейныеПеременныеСНДСОстаток	КАК ПолнаяСтоимость,
		|	Т.СтоимостьБезНДСОстаток
		|			+ Т.ДопРасходыБезНДСОстаток
		|			+ Т.ТрудозатратыОстаток
		|			+ Т.ПостатейныеПостоянныеБезНДСОстаток
		|			+ Т.ПостатейныеПеременныеБезНДСОстаток	КАК ПолнаяСтоимостьБезНДС,
        |	Т.СтоимостьРеглОстаток
        |			+ Т.ДопРасходыРеглОстаток
        |			+ Т.ТрудозатратыРеглОстаток
        |			+ Т.ПостатейныеПостоянныеРеглОстаток
        |			+ Т.ПостатейныеПеременныеРеглОстаток	КАК ПолнаяСтоимостьРегл,
        |	Т.СтоимостьРеглБезНДСОстаток
        |			+ Т.ДопРасходыРеглБезНДСОстаток
        |			+ Т.ТрудозатратыРеглОстаток
        |			+ Т.ПостатейныеПостоянныеРеглБезНДСОстаток
        |			+ Т.ПостатейныеПеременныеРеглБезНДСОстаток	КАК ПолнаяСтоимостьРеглБезНДС,
        |	Т.НДСРеглОстаток                                КАК ПолнаяНДСРегл,
		|	Т.ПостояннаяРазницаОстаток						КАК ПостояннаяРазница,
		|	Т.ВременнаяРазницаОстаток						КАК ВременнаяРазница,
        |	Т.СтоимостьУпрОстаток
        |			+ Т.ДопРасходыУпрОстаток
        |			+ Т.ТрудозатратыУпрОстаток
        |			+ Т.ПостатейныеПостоянныеУпрОстаток
        |			+ Т.ПостатейныеПеременныеУпрОстаток		КАК ПолнаяСтоимостьУпр
        |	,Т.СтоимостьУпрБезНДСОстаток
        |			+ Т.ДопРасходыУпрБезНДСОстаток
        |			+ Т.ТрудозатратыУпрОстаток
        |			+ Т.ПостатейныеПостоянныеУпрБезНДСОстаток
        |			+ Т.ПостатейныеПеременныеУпрБезНДСОстаток		КАК ПолнаяСтоимостьУпрБезНДС
		|ПОМЕСТИТЬ ОстаткиМатериальныхЗатрат
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров.Остатки(
		|			&ГраницаКонецПериода,
		|			Организация В (&МассивОрганизаций)
		|			И Партия В (ВЫБРАТЬ Т.Партия ИЗ ЗавершенныеПартии КАК Т)
		|			) КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Организация 				КАК Организация,
		|	Т.Подразделение 			КАК Подразделение,
		|	Т.НаправлениеДеятельности 	КАК НаправлениеДеятельности,
		|	Т.СтатьяРасходов 			КАК СтатьяРасходов,
		|	Т.АналитикаРасходов 		КАК АналитикаРасходов,
		|	Т.ГруппаПродукции 			КАК ГруппаПродукции,
		|	Т.ПравилоОтнесенияНаВыпуск 	КАК ПравилоОтнесенияНаВыпуск,
		|	Т.ПартияПроизводства 		КАК ПартияПроизводства,
		|	Т.СтатьяКалькуляции 		КАК СтатьяКалькуляции,
        |	Т.НалоговоеНазначение       КАК НалоговоеНазначение,
		|	Т.СтоимостьОстаток 			КАК Стоимость,
		|	Т.СтоимостьБезНДСОстаток 	КАК СтоимостьБезНДС,
        |	Т.СтоимостьРеглОстаток 		КАК СтоимостьРегл,
        |	Т.СтоимостьРеглБезНДСОстаток КАК СтоимостьРеглБезНДС,
        |	Т.НДСРеглОстаток 		    КАК НДСРегл,
		|	Т.ПостояннаяРазницаОстаток 	КАК ПостояннаяРазница,
		|	Т.ВременнаяРазницаОстаток 	КАК ВременнаяРазница,
        |	Т.СтоимостьУпрОстаток 		КАК СтоимостьУпр
        |	,Т.СтоимостьУпрБезНДСОстаток КАК СтоимостьУпрБезНДС
		|ПОМЕСТИТЬ ОстаткиПостатейныхРасходов
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства.Остатки(
		|			&ГраницаКонецПериода,
		|			Организация В (&МассивОрганизаций)
		|				И ПартияПроизводства В (ВЫБРАТЬ Т.Партия ИЗ ЗавершенныеПартии КАК Т)) КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Организация 					КАК Организация,
		|	Т.Подразделение 				КАК Подразделение,
		|	Т.ПартияПроизводства 			КАК ПартияПроизводства,
		|	Т.СтатьяКалькуляции 			КАК СтатьяКалькуляции,
		|	Т.ВидРабот КАК ВидРабот,
		|	Т.ГруппаПродукции 				КАК ГруппаПродукции,
		|	Т.КоличествоОстаток 			КАК Количество,
		|	Т.НормативнаяСтоимостьОстаток 	КАК НормативнаяСтоимость,
		|	Т.СтоимостьОстаток 				КАК Стоимость,
		|	Т.СтоимостьРеглОстаток 			КАК СтоимостьРегл
		|ПОМЕСТИТЬ ОстаткиТрудозатрат
		|ИЗ
		|	РегистрНакопления.ТрудозатратыНезавершенногоПроизводства.Остатки(
		|			&ГраницаКонецПериода,
		|			Организация В (&МассивОрганизаций)
		|				И ПартияПроизводства В (ВЫБРАТЬ Т.Партия ИЗ ЗавершенныеПартии КАК Т)) КАК Т
		|");

	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());

	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РазделУчета", НСтр("ru='Раздел учета';uk='Розділ обліку'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры';uk='Аналітика номенклатури'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Партия", НСтр("ru='Партия';uk='Партія'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаФинансовогоУчета", НСтр("ru='Аналитика финансового учета';uk='Аналітика фінансового обліку'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("НалоговоеНазначение", НСтр("ru='Налоговое назначение';uk='Податкове призначення'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество", НСтр("ru='Количество';uk='Кількість'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПолнаяСтоимость", НСтр("ru='Полная стоимость';uk='Повна вартість'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПолнаяСтоимостьБезНДС", НСтр("ru='Полная стоимость без НДС';uk='Повна вартість без ПДВ'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("ПолнаяСтоимостьРегл", НСтр("ru='Полная стоимость (регл.)';uk='Повна вартість (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("ПолнаяНДСРегл", НСтр("ru='НДС (регл.)';uk='ПДВ (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("ПолнаяСтоимостьУпр", НСтр("ru='Полная стоимость (упр.)';uk='Повна вартість (упр.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("ПолнаяСтоимостьРеглБезНДС", НСтр("ru='Полная стоимость без НДС (регл.)';uk='Повна вартість без ПДВ (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("ПолнаяСтоимостьУпрБезНДС", НСтр("ru='Полная стоимость без НДС (упр.)';uk='Повна вартість без ПДВ (упр.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПостояннаяРазница", НСтр("ru='Постоянная разница';uk='Постійна різниця'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВременнаяРазница", НСтр("ru='Временная разница';uk='Тимчасова різниця'",ОбщегоНазначения.КодОсновногоЯзыка()));

	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки("ОстаткиМатериальныхЗатрат", НСтр("ru='Обнаружены остатки нераспределенных материальных затрат в регистре ""Себестоимость товаров"" по организации ""%1"" на конец периода %2';uk='Виявлено залишки нерозподілених матеріальних витрат в регістрі ""Собівартість товарів"" по організації ""%1"" на кінець періоду %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей, , Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());

	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение", НСтр("ru='Подразделение';uk='Підрозділ'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru='Направление деятельности';uk='Напрям діяльності'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПартияПроизводства", НСтр("ru='Партия производства';uk='Партія виробництва'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяКалькуляции", НСтр("ru='Статья калькуляции';uk='Стаття калькуляції'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяРасходов", НСтр("ru='Статья расходов';uk='Стаття витрат'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаРасходов", НСтр("ru='Аналитика расходов';uk='Аналітика витрат'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ГруппаПродукции", НСтр("ru='Группа продукции';uk='Група продукції'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПравилоОтнесенияНаВыпуск", НСтр("ru='Правило отнесения на выпуск';uk='Правило віднесення на випуск'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("НалоговоеНазначение", НСтр("ru='Налоговое назначение';uk='Податкове призначення'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Стоимость", НСтр("ru='Стоимость';uk='Вартість'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтоимостьБезНДС", НСтр("ru='Стоимость без НДС';uk='Вартість без ПДВ'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("СтоимостьРегл", НСтр("ru='Стоимость (регл.)';uk='Вартість (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("СтоимостьРеглБезНДС", НСтр("ru='Стоимость без НДС (регл.)';uk='Вартість без ПДВ (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("НДСРегл", НСтр("ru='НДС (регл.)';uk='ПДВ (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("СтоимостьУпр", НСтр("ru='Стоимость (упр.)';uk='Вартість (упр.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("СтоимостьУпрБезНДС", НСтр("ru='Стоимость без НДС (упр.)';uk='Вартість без ПДВ (упр.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПостояннаяРазница", НСтр("ru='Постоянная разница';uk='Постійна різниця'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВременнаяРазница", НСтр("ru='Временная разница';uk='Тимчасова різниця'",ОбщегоНазначения.КодОсновногоЯзыка()));

	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, "ОстаткиПостатейныхРасходов", НСтр("ru='Обнаружены остатки нераспределенных постатейных расходов в регистре 
|""Прочие расходы незавершенного производства"" по организации ""%1"" на конец периода %2'
|;uk='Виявлено залишки нерозподілених постатейних витрат в регістрі 
|""Інші витрати незавершеного виробництва"" по організації ""%1"" на кінець періоду %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей, , Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПолноеИмя());

	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение", НСтр("ru='Подразделение';uk='Підрозділ'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПартияПроизводства", НСтр("ru='Партия производства';uk='Партія виробництва'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяКалькуляции", НСтр("ru='Статья калькуляции';uk='Стаття калькуляції'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидРабот", НСтр("ru='Вид работ';uk='Вид робіт'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ГруппаПродукции", НСтр("ru='Группа продукции';uk='Група продукції'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество", НСтр("ru='Количество';uk='Кількість'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Стоимость", НСтр("ru='Стоимость';uk='Вартість'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтоимостьРегл", НСтр("ru='Стоимость (регл.)';uk='Вартість (регл.)'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НормативнаяСтоимость", НСтр("ru='Нормативная стоимость';uk='Нормативна вартість'",ОбщегоНазначения.КодОсновногоЯзыка()));

	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, "ОстаткиТрудозатрат", НСтр("ru='Обнаружены остатки нераспределенных расходов по оплате труда в регистре 
|""Трудозатраты незавершенного производства"" по организации ""%1"" на конец периода %2'
|;uk='Виявлено залишки нерозподілених витрат з оплати праці в регістрі 
|""Трудовитрати незавершеного виробництва"" по організації ""%1"" на кінець періоду %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей, , Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ПолноеИмя());

	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(ПараметрыПроверки, ПараметрыРегистрации, ТекстЗапроса);

КонецПроцедуры

//-- НЕ УТ

// Процедура-обработчик проверки состояния системы "ЗаписиСПризнакомРасчетНеЗавершен".
//
Процедура ПроверкаЗаписейСПризнакомРасчетНеЗавершен(ПараметрыПроверки) Экспорт

	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();

	АвтоматическоеТестирование = ЗакрытиеМесяцаСервер.ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, "АвтоматическоеТестирование", Ложь);

	// Проверка выполняется в автотестах или если явно включен соответствующий технологический параметр.
	Если НЕ АвтоматическоеТестирование
			И НЕ ЗначенияПараметров.ПроверятьЗаписиСПризнакомРасчетНеЗавершен Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапроса = "";
	ШаблонЗапроса = "
		|%1
		|
		|ВЫБРАТЬ
		|	Т.%2 КАК Организация,
		|	""%3"" КАК ИмяРегистра,
		|	Т.Регистратор КАК Регистратор,
		|	СУММА(1) КАК КоличествоДвижений
		|%4
		|ИЗ
		|	РегистрНакопления.%3 КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.%2 В(&МассивОрганизаций)
		|	И Т.РасчетНеЗавершен
		|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|	И Т.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.%2,
		|	Т.Регистратор
		|";

	Для Каждого КлючИЗначение Из РасчетСебестоимости.ИсходящиеДанныеМеханизма() Цикл

		МетаРегистр = КлючИЗначение.Ключ;

		Если НЕ Метаданные.РегистрыНакопления.Содержит(МетаРегистр)
				ИЛИ МетаРегистр.Реквизиты.Найти("РасчетНеЗавершен") = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ"), ?(МетаРегистр.Измерения.Найти("Организация") = Неопределено, "АналитикаУчетаПоПартнерам.Организация", "Организация"), МетаРегистр.Имя, ?(ТекстЗапроса = "", "ПОМЕСТИТЬ ВТДокументыСНезаполненнойПартией", ""));

	КонецЦикла;

	ТекстЗапроса = СокрЛП(ТекстЗапроса);

	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ИмяРегистра", НСтр("ru='Имя регистра';uk='Ім''я регістра'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Регистратор", НСтр("ru='Документ';uk='Документ'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("КоличествоДвижений", НСтр("ru='Количество движений';uk='Кількість рухів'",ОбщегоНазначения.КодОсновногоЯзыка()));

	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки("ВТДокументыСНезаполненнойПартией", НСтр("ru='Обнаружены неподобранные партии в движениях документов организации ""%1"" за период %2';uk='Виявлено непідібранї партії в рухах документів організації "" 1"" за період %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей, "Регистратор");

	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(ПараметрыПроверки, ПараметрыРегистрации, ТекстЗапроса);

КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ПроверкаРезультатаРасчетаПоКоличеству".
//
Процедура ПроверкаРезультатаРасчетаПоКоличеству(ПараметрыПроверки) Экспорт

	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаВозвратныеОтходы());
	ТекстыЗапроса.Добавить("ВЫБРАТЬ
		|	Т.Организация 							КАК Организация,
		|	Т.РазделУчета 							КАК РазделУчета,
		|	Т.АналитикаУчетаНоменклатуры 			КАК АналитикаУчетаНоменклатуры,
		|	Т.ВидЗапасов 							КАК ВидЗапасов,
        |	Т.НалоговоеНазначение  					КАК НалоговоеНазначение,
		|	Т.Партия 								КАК Партия,
		|	Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
		|	Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
		|	МАКСИМУМ(Т.КоличествоКонечныйОстаток)	КАК Количество
		|ПОМЕСТИТЬ ВТОтрицательныеОстатки
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,,
		|		Организация В (&МассивОрганизаций)
		|		И &ПартионныйУчетВерсии22
		//++ НЕ УТ
		|		И ТИПЗНАЧЕНИЯ(Партия) <> ТИП(Справочник.ПартииПроизводства)
		//-- НЕ УТ
		|		И РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки)
		|		И РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
		|		И НЕ ((АналитикаУчетаНоменклатуры, РазделУчета, ВидЗапасов, Организация ) В
		|			(ВЫБРАТЬ Т.АналитикаУчетаНоменклатуры, Т.РазделУчета, Т.ВидЗапасов, Т.Организация ИЗ ВозвратныеОтходы КАК Т))
		|	) КАК Т
		|ГДЕ
		|	Т.КоличествоКонечныйОстаток < 0
		|	И (Т.КоличествоПриход <> 0 ИЛИ Т.КоличествоРасход <> 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Организация,
		|	Т.РазделУчета,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.ВидЗапасов,
        |	Т.НалоговоеНазначение,
		|	Т.Партия,
		|	Т.АналитикаУчетаПартий,
		|	Т.АналитикаФинансовогоУчета
		|");

	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());

	// Отрицательные остатки партий.
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РазделУчета", НСтр("ru='Раздел учета';uk='Розділ обліку'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры';uk='Аналітика номенклатури'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидЗапасов", НСтр("ru='Вид запасов';uk='Вид запасів'",ОбщегоНазначения.КодОсновногоЯзыка()));
    СписокПолей.Добавить("НалоговоеНазначение", НСтр("ru='Налоговое назначение';uk='Податкове призначення'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Партия", НСтр("ru='Партия';uk='Партія'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаПартий", НСтр("ru='Аналитика учета партий';uk='Аналітика обліку партій'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаФинансовогоУчета", НСтр("ru='Аналитика финансового учета';uk='Аналітика фінансового обліку'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество", НСтр("ru='Количество';uk='Кількість'",ОбщегоНазначения.КодОсновногоЯзыка()));

	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки("ВТОтрицательныеОстатки", НСтр("ru='Обнаружены отрицательные остатки партий в регистре себестоимости по организации ""%1"" на конец периода %2';uk='Виявлено від''ємні залишки партій в регістрі собівартості по організації ""%1"" на кінець періоду %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей, , Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());

	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(ПараметрыПроверки, ПараметрыРегистрации, ТекстЗапроса);

КонецПроцедуры

Функция ТекстЗапросаВозвратныеОтходы()

	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отходы.АналитикаУчетаНоменклатуры,
		|	Отходы.РазделУчета,
		|	Отходы.ВидЗапасов,
		|	Отходы.Организация
		|ПОМЕСТИТЬ ВозвратныеОтходы
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК Отходы
		|ГДЕ
		|	Отходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Отходы.Организация В (&МассивОрганизаций)
		|	И Отходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Отходы.Количество < 0
		|	И Отходы.Активность
		|	И Отходы.РазделУчета В (
		|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты),
		|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение))
		|	И Отходы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Отходы.АналитикаУчетаНоменклатуры,
		|	Отходы.РазделУчета,
		|	Отходы.ВидЗапасов,
		|	Отходы.Организация
		|";

	Возврат ТекстЗапроса;

КонецФункции

//++ НЕ УТ

// Формирует текст запроса для получения временной таблицы завершенных партий производства
// 
// Возвращаемое значение:
// 	Строка - Текст запроса формирования временной таблицы ЗавершенныеПартии
Функция ТекстЗапросаЗавершенныеПартии() Экспорт

	Возврат "ВЫБРАТЬ
		|	Т.Партия			КАК Партия,
		|	Т.Партия.Документ	КАК ДокументПартии
		|ПОМЕСТИТЬ ПартииПроизводства
		|ИЗ
		|	(ВЫБРАТЬ
		|		Материалы.Партия КАК Партия
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров.Обороты(&НачалоПериода, &КонецПериода, Период, 
		|			Организация В (&МассивОрганизаций)
		|			И ТИПЗНАЧЕНИЯ(Партия) = ТИП(Справочник.ПартииПроизводства)
		|			И НЕ Партия = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
		|		) КАК Материалы
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Прочие.ПартияПроизводства КАК Партия
		|	ИЗ
		|		РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства.Обороты(&НачалоПериода, &КонецПериода, Период, 
		|			Организация В (&МассивОрганизаций)
		|			И ТИПЗНАЧЕНИЯ(ПартияПроизводства) = ТИП(Справочник.ПартииПроизводства)
		|			И НЕ ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)) КАК Прочие
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Труд.ПартияПроизводства КАК Партия
		|	ИЗ
		|		РегистрНакопления.ТрудозатратыНезавершенногоПроизводства.Обороты(&НачалоПериода, &КонецПериода, Период, 
		|			Организация В (&МассивОрганизаций)
		|			И ТИПЗНАЧЕНИЯ(ПартияПроизводства) = ТИП(Справочник.ПартииПроизводства)
		|			И НЕ ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)) КАК Труд
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		СпрПартииПроизводства.Ссылка КАК Партия
		|	ИЗ
		|		РегистрНакопления.ВыпускПродукции КАК ВыпускПродукции
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
		|		ПО СпрПартииПроизводства.Документ = ВыпускПродукции.Регистратор
		|
		|	ГДЕ
		|		ВыпускПродукции.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВыпускПродукции.Организация В (&МассивОрганизаций)
		|	) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Партия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументПартии,
		|	Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииПроизводства.Партия КАК Партия
		|ПОМЕСТИТЬ ЗавершенныеПартии
		|ИЗ
		|	(
		// Производство без заказа и отчеты переработчика без этапов
		|	ВЫБРАТЬ
		|		ПартииПроизводства.Партия	КАК Партия,
		|		ВыпускПродукции.Период		КАК Период
		|	ИЗ
		|		ПартииПроизводства КАК ПартииПроизводства
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыпускПродукции КАК ВыпускПродукции
		|		ПО ВыпускПродукции.Регистратор = ПартииПроизводства.ДокументПартии
		|	) КАК ПартииПроизводства
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииПроизводства.Партия
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(КОНЕЦПЕРИОДА(ПартииПроизводства.Период, МЕСЯЦ)) <= &КонецПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Партия
		|";

КонецФункции

// Процедура-обработчик проверки состояния системы "НераспределенныеПостатейныеРасходы".
//
// Параметры:
// ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаНераспределенныхПостатейныхРасходов(ПараметрыПроверки) Экспорт

	ПараметрыЗакрытия = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	ПараметрыПроверки.ДополнительныеПараметры.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц;

	ПараметрыЗапроса = Документы.РаспределениеПрочихЗатрат.ОписаниеПараметровЗапросаПолученияДанныхДляРаспределения();
	ПараметрыЗапроса.Вставить("Период", ПараметрыПроверки.ДополнительныеПараметры.Период);
	ПараметрыЗапроса.Вставить("Организации", ПараметрыПроверки.ДополнительныеПараметры.МассивОрганизаций);
	Документы.РаспределениеПрочихЗатрат.ИнициализироватьЗапросПолученияДанныхДляРаспределения(Запрос, ПараметрыЗапроса);

	ТекстЗапроса = Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения(1, Истина);

	// Доп. параметры запроса.
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПоВсемОрганизациям", Ложь);
	ДополнительныеПараметры.Вставить("ПоВсемПодразделениям", Истина);
	ДополнительныеПараметры.Вставить("СписокПодразделений", Новый Массив);
	ДополнительныеПараметры.Вставить("ФильтрПоСостоянию", Перечисления.СостоянияРаспределенияРасходов.ОшибкаРаспределения);
	ДополнительныеПараметры.Вставить("ИсключитьИзКонтроляРазницы", Истина);
	ДополнительныеПараметры.Вставить("ЗначениеПогрешностиУпр", ПараметрыЗакрытия.ЗначениеПогрешностиРасходыУпр);
	ДополнительныеПараметры.Вставить("ЗначениеПогрешностиРегл", ПараметрыЗакрытия.ЗначениеПогрешностиРасходыРегл);
	ДополнительныеПараметры.Вставить("ВариантыРаспределенияРасходов", ОбщегоНазначенияУТКлиентСервер.Массив(Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты));
	ДополнительныеПараметры.Вставить("УчетПоНаправлениямДеятельности", ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат"));

	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение", НСтр("ru='Подразделение';uk='Підрозділ'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяРасходов", НСтр("ru='Статья расходов';uk='Стаття витрат'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаРасходов", НСтр("ru='Аналитика расходов';uk='Аналітика витрат'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru='Направление деятельности';uk='Напрям діяльності'",ОбщегоНазначения.КодОсновногоЯзыка()));

	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки("СостояниеРаспределенияРасходов", НСтр("ru='Обнаружены некорректно распределенные постатейные расходы по организации ""%1"" на конец периода %2';uk='Виявлено некоректно розподілені постатейні витрати по організації ""%1"" на кінець періоду %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей);

	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(ПараметрыПроверки, ПараметрыРегистрации, ТекстЗапроса, ДополнительныеПараметры);

КонецПроцедуры

//-- НЕ УТ

// Проверка необходимости включения настройки "Распределение доп. расходов по выбывшим товарам".
// Вызывается в процедуре определения состояния этапа расчета партий и себестоимости.
// Если в базе есть дополнительные расходы, которые можно распределить по выбывшим товарам, то рекомендуется включить данную настройку.
// В противном случае в результате расчета могут диагностироваться ошибки вида ""Обнаружены ненулевые остатки в по суммам при нулевом количестве в регистре себестоимости"".
//
Функция ПроверитьНеобходимостьВключенияНастройкиРаспределениеДопРасходовПоВыбывшимТоварам(ПараметрыРасчета) Экспорт

	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ПараметрыРасчета.ПериодРегистрации))
			ИЛИ Константы.РаспределениеДопРасходовПоВыбывшимТоварам.Получить() Тогда
		Возврат Ложь; // проверка нужна только при ПУ22 и выключенной настройке
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);

	Запрос.Текст = "ВЫБРАТЬ
		|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Т.РазделУчета КАК РазделУчета,
		|	Т.ВидЗапасов КАК ВидЗапасов,
		|	Т.Организация КАК Организация,
		|	Т.Партия КАК Партия,
		|	Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|	Т.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
        |	Т.НалоговоеНазначение КАК НалоговоеНазначение
		|ПОМЕСТИТЬ РасходыДляСписанияНаВыбытиеТоваров
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.Организация В(&МассивОрганизаций)
		|	И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Т.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах), ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути))
		|	И Т.ТипЗаписи В (ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ОтклонениеВСтоимости), ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.РаспределениеПоВыбывшимТоварам), ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода))
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.РазделУчета,
		|	Т.ВидЗапасов,
		|	Т.Организация,
		|	Т.Партия,
		|	Т.АналитикаУчетаПартий,
		|	Т.АналитикаФинансовогоУчета,
        |	Т.НалоговоеНазначение
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) = 0 И
		|	(СУММА(Т.ДопРасходы) <> 0
		|		ИЛИ СУММА(Т.ДопРасходыБезНДС) <> 0
        |		ИЛИ СУММА(Т.ДопРасходыРегл) <> 0
        |		ИЛИ СУММА(Т.ДопРасходыУпр) <> 0
        |		ИЛИ СУММА(Т.ДопРасходыРеглБезНДС) <> 0
        |		ИЛИ СУММА(Т.ДопРасходыУпрБезНДС) <> 0
        |		ИЛИ СУММА(Т.НДСРеглРеквизит) <> 0
		|		ИЛИ СУММА(Т.НДСУпр) <> 0
		|		ИЛИ СУММА(Т.ПостояннаяРазница) <> 0
		|		ИЛИ СУММА(Т.ВременнаяРазница) <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Т.РазделУчета КАК РазделУчета,
		|	Т.ВидЗапасов КАК ВидЗапасов,
		|	Т.Организация КАК Организация,
		|	Т.Партия КАК Партия,
		|	Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|	Т.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
        |	Т.НалоговоеНазначение КАК НалоговоеНазначение,
		|	МАКСИМУМ(Т.ЕстьОстатки) КАК ЕстьОстатки,
		|	МАКСИМУМ(Т.ЕстьОбороты) КАК ЕстьОбороты
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		Т.РазделУчета КАК РазделУчета,
		|		Т.ВидЗапасов КАК ВидЗапасов,
		|		Т.Организация КАК Организация,
		|		Т.Партия КАК Партия,
		|		Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|		Т.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
        |		Т.НалоговоеНазначение КАК НалоговоеНазначение,
		|		ВЫБОР
		|			КОГДА Т.КоличествоОстаток <> 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЕстьОстатки,
		|		ЛОЖЬ КАК ЕстьОбороты
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров.Остатки(&НачалоПериода, Организация В (&МассивОрганизаций)) КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.АналитикаУчетаНоменклатуры,
		|		Т.РазделУчета,
		|		Т.ВидЗапасов,
		|		Т.Организация,
		|		Т.Партия,
		|		Т.АналитикаУчетаПартий,
		|		Т.АналитикаФинансовогоУчета,
        |		Т.НалоговоеНазначение,
		|		ЛОЖЬ,
		|		ИСТИНА
		|	ИЗ
		|		РасходыДляСписанияНаВыбытиеТоваров КАК Т) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Партия,
        |	Т.НалоговоеНазначение,
		|	Т.ВидЗапасов,
		|	Т.Организация,
		|	Т.АналитикаУчетаПартий,
		|	Т.РазделУчета,
		|	Т.АналитикаФинансовогоУчета,
		|	Т.АналитикаУчетаНоменклатуры
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(Т.ЕстьОстатки) = ЛОЖЬ И
		|	МАКСИМУМ(Т.ЕстьОбороты) = ИСТИНА";

	Результат = Запрос.Выполнить();

	Возврат НЕ Результат.Пустой(); // надо включить, если нет начальных остатков по количеству и есть обороты без количества для списания
КонецФункции

// Процедура-обработчик проверки состояния системы "ИсходныеДанныеДляРасчетаСебестоимости".
//
// Параметры:
// ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаСоответствияОперативногоУчетаИСебестоимости(ПараметрыПроверки) Экспорт

	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	Если НЕ ЗначенияПараметров.ПроверятьСоответствияОперативногоУчетаИСебестоимости Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапроса = "ВЫБРАТЬ
		|	Т.Организация КАК Организация,
		|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	СУММА(Т.КоличествоСебестоимость) КАК КоличествоСебестоимость,
		|	СУММА(Т.КоличествоОперативное) КАК КоличествоОперативное
		|ПОМЕСТИТЬ ВТРасхожденияПредварительная
		|ИЗ
		|	(
		// Себестоимость товаров
		|	ВЫБРАТЬ
		|		Т.Организация					КАК Организация,
		|		Т.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
		|		Т.КоличествоОстаток				КАК КоличествоСебестоимость,
		|		0								КАК КоличествоОперативное
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров.Остатки(
		|			&ГраницаКонецПериода,
		|			&ВозможенРасчетСебестоимости
		|			И &ПартионныйУчетВерсии22
		|			И Организация В (&МассивОрганизаций)
		|			И НЕ РазделУчета В (
		|				ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство),
		|				ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВПути))
		|			И АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		// Исключаем принятые на комиссию товары, которые были выкуплены.
		|			И НЕ (РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
		|				И АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Партнер))
		//++ НЕ УТ
		|			И НЕ ТИПЗНАЧЕНИЯ(Партия) В (
		//++ Устарело_Производство21
		//-- Устарело_Производство21
		|										ТИП(Справочник.ПартииПроизводства))
		//-- НЕ УТ
		|		) КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Товары организаций
		|	ВЫБРАТЬ
		|		Т.Организация		КАК Организация,
		|		ВЫБОР
		|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
		|				ТОГДА Т.АналитикаУчетаНоменклатуры
		|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
		|		КОНЕЦ				КАК АналитикаУчетаНоменклатуры,
		|		0					КАК КоличествоСебестоимость,
		|		Т.КоличествоОстаток	КАК КоличествоОперативное
		|	ИЗ
		|		РегистрНакопления.ТоварыОрганизаций.Остатки(
		|			&ГраницаКонецПериода,
		|			&ВозможенРасчетСебестоимости
		|			И &ПартионныйУчетВерсии22
		|			И Организация В (&МассивОрганизаций)
		|		) КАК Т
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
		|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
		|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
		|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
		|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
		|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
		|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
		//++ НЕ УТ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Материалы в производстве
		|	ВЫБРАТЬ
		|		Т.Организация		КАК Организация,
		|		ВЫБОР
		|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
		|				ТОГДА Аналитика.КлючАналитики
		|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
		|		КОНЕЦ				КАК АналитикаУчетаНоменклатуры,
		|		0					КАК КоличествоСебестоимость,
		|		Т.КоличествоОстаток	КАК КоличествоОперативное
		|	ИЗ
		|		РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(
		|			&ГраницаКонецПериода,
		|			&ВозможенРасчетСебестоимости
		|			И &ПартионныйУчетВерсии22
		|			И Номенклатура.ТипНоменклатуры В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			И Организация В (&МассивОрганизаций)
		|		) КАК Т
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО Аналитика.Номенклатура = Т.Номенклатура
		|		И Аналитика.Характеристика = Т.Характеристика
		|		И Аналитика.МестоХранения = Т.Подразделение
		|		И Аналитика.Серия = Т.Серия
		|		И Аналитика.Назначение = Т.Назначение
		|		И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
		|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
		|		И АналитикаБезНазначения.Номенклатура = Аналитика.Номенклатура
		|		И АналитикаБезНазначения.Характеристика = Аналитика.Характеристика
		|		И АналитикаБезНазначения.МестоХранения = Аналитика.МестоХранения
		|		И АналитикаБезНазначения.Серия = Аналитика.Серия
		|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И АналитикаБезНазначения.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
		//-- НЕ УТ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Товары организаций к передаче
		|	ВЫБРАТЬ
		|		Т.ВидЗапасовПродавца.Организация	КАК Организация,
		|		ВЫБОР
		|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
		|				ТОГДА Т.АналитикаУчетаНоменклатуры
		|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
		|		КОНЕЦ								КАК АналитикаУчетаНоменклатуры,
		|		0									КАК КоличествоСебестоимость,
		|		Т.КоличествоОстаток					КАК КоличествоОперативное
		|	ИЗ
		|		РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(
		|			&ГраницаКонецПериода,
		|			&ВозможенРасчетСебестоимости
		|			И &ПартионныйУчетВерсии22
		|			И ВидЗапасовПродавца.Организация В (&МассивОрганизаций)
		|		) КАК Т
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
		|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
		|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
		|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
		|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
		|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
		|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
		|
		//++ НЕ УТ
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Товары переданные переработчику
		|	ВЫБРАТЬ
		|		Т.ВидЗапасов.Организация	КАК Организация,
		|		ВЫБОР
		|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
		|				ТОГДА Т.АналитикаУчетаНоменклатуры
		|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
		|		КОНЕЦ						КАК АналитикаУчетаНоменклатуры,
		|		0							КАК КоличествоСебестоимость,
		|		Т.КоличествоОстаток			КАК КоличествоОперативное
		|	ИЗ
		|		РегистрНакопления.ТоварыПереданныеПереработчику.Остатки(
		|			&ГраницаКонецПериода,
		|			&ВозможенРасчетСебестоимости
		|			И &ПартионныйУчетВерсии22
		|			И ВидЗапасов.Организация В (&МассивОрганизаций)
		|		) КАК Т
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
		|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
		|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
		|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
		|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
		|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
		|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Товары полученные от переработчика
		|	ВЫБРАТЬ
		|		Т.Организация		КАК Организация,
		|		ВЫБОР
		|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
		|				ТОГДА Т.АналитикаУчетаНоменклатуры
		|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
		|		КОНЕЦ				КАК АналитикаУчетаНоменклатуры,
		|		0					КАК КоличествоСебестоимость,
		|		Т.КоличествоОстаток	КАК КоличествоОперативное
		|	ИЗ
		|		РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки(
		|			&ГраницаКонецПериода,
		|			&ВозможенРасчетСебестоимости
		|			И &ПартионныйУчетВерсии22
		|			И Организация В (&МассивОрганизаций)
		|		) КАК Т
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
		|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
		|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
		|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
		|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
		|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
		|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
		|	
		//-- НЕ УТ
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Товары переданные на комиссию
		|	ВЫБРАТЬ
		|		Т.ВидЗапасов.Организация	КАК Организация,
		|		ВЫБОР
		|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
		|				ТОГДА Т.АналитикаУчетаНоменклатуры
		|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
		|		КОНЕЦ						КАК АналитикаУчетаНоменклатуры,
		|		0							КАК КоличествоСебестоимость,
		|		Т.КоличествоОстаток			КАК КоличествоОперативное
		|	ИЗ
		|		РегистрНакопления.ТоварыПереданныеНаКомиссию.Остатки(
		|			&ГраницаКонецПериода,
		|			&ВозможенРасчетСебестоимости
		|			И &ПартионныйУчетВерсии22
		|			И ВидЗапасов.Организация В (&МассивОрганизаций)
		|		) КАК Т
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
		|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
		|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
		|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
		|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
		|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
		|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Товары к оформлению таможенных деклараций
		|	ВЫБРАТЬ
		|		Т.Организация		КАК Организация,
		|		ВЫБОР
		|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
		|				ТОГДА Т.АналитикаУчетаНоменклатуры
		|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
		|		КОНЕЦ				КАК АналитикаУчетаНоменклатуры,
		|		0					КАК КоличествоСебестоимость,
		|		Т.КоличествоОстаток	КАК КоличествоОперативное
		|	ИЗ
		|		РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций.Остатки(
		|			&ГраницаКонецПериода,
		|			&ВозможенРасчетСебестоимости
		|			И &ПартионныйУчетВерсии22
		|			И Организация В (&МассивОрганизаций)
		|		) КАК Т
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
		|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
		|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
		|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
		|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
		|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
		|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
		|	
		//++ НЕ УТ
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Исключаем движения из себестоимости, выполняемые оффлайн
		|	ВЫБРАТЬ
		|		Т.Организация					КАК Организация,
		|		Т.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
		|		Т.Количество					КАК КоличествоСебестоимость,
		|		0								КАК КоличествоОперативное
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров КАК Т
		|	ГДЕ
		|	&ВозможенРасчетСебестоимости
		|		И &ПартионныйУчетВерсии22
		|		И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И НЕ Т.Количество = 0
		|		И ТИПЗНАЧЕНИЯ(Т.Регистратор) В (
		//++ Устарело_Производство21
		|			ТИП(Документ.СписаниеЗатратНаВыпуск),
		|			ТИП(Документ.ВыпускПродукции),
		//-- Устарело_Производство21
		|			ТИП(Документ.РаспределениеПроизводственныхЗатрат))
		|		И Т.Организация В (&МассивОрганизаций)
		|		И Т.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|																	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		И (ТИПЗНАЧЕНИЯ(Т.КорПартия) В (
		//++ Устарело_Производство21
		//-- Устарело_Производство21
		|			ТИП(Справочник.ПартииПроизводства))
		//++ Устарело_Производство21
		|			ИЛИ ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.ВыпускПродукции)
		|			И НЕ ТИПЗНАЧЕНИЯ(Т.Партия) В (
		|				ТИП(Справочник.ПартииПроизводства))
		//-- Устарело_Производство21
		|			)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Исключаем движения из товаров организаций, выполняемые оффлайн
		|	ВЫБРАТЬ
		|		Т.Организация					КАК Организация,
		|		ВЫБОР
		|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
		|				ТОГДА Т.АналитикаУчетаНоменклатуры
		|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
		|		КОНЕЦ				КАК АналитикаУчетаНоменклатуры,
		|		0								КАК КоличествоСебестоимость,
		|		Т.Количество					КАК КоличествоОперативное
		|	ИЗ
		|		РегистрНакопления.ТоварыОрганизаций КАК Т
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
		|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
		|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
		|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
		|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
		|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
		|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
		|	
		|	ГДЕ
		|		&ВозможенРасчетСебестоимости
		|		И &ПартионныйУчетВерсии22
		|		И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.РаспределениеПроизводственныхЗатрат)
		|		И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И Т.Организация В (&МассивОрганизаций)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Исключаем движения из материалов в производстве, выполняемое оффлайн
		|	ВЫБРАТЬ
		|		Т.Организация	КАК Организация,
		|		ВЫБОР
		|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
		|				ТОГДА Аналитика.КлючАналитики
		|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
		|		КОНЕЦ			КАК АналитикаУчетаНоменклатуры,
		|		0				КАК КоличествоСебестоимость,
		|		Т.Количество	КАК КоличествоОперативное
		|	ИЗ
		|		РегистрНакопления.МатериалыИРаботыВПроизводстве КАК Т
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО Аналитика.Номенклатура = Т.Номенклатура
		|		И Аналитика.Характеристика = Т.Характеристика
		|		И Аналитика.МестоХранения = Т.Подразделение
		|		И Аналитика.Серия = Т.Серия
		|		И Аналитика.Назначение = Т.Назначение
		|		И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
		|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
		|		И АналитикаБезНазначения.Номенклатура = Аналитика.Номенклатура
		|		И АналитикаБезНазначения.Характеристика = Аналитика.Характеристика
		|		И АналитикаБезНазначения.МестоХранения = Аналитика.МестоХранения
		|		И АналитикаБезНазначения.Серия = Аналитика.Серия
		|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И АналитикаБезНазначения.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
		|
		|	ГДЕ
		|		&ВозможенРасчетСебестоимости
		|		И &ПартионныйУчетВерсии22
		|		И Т.Организация В (&МассивОрганизаций)
		|		И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И ТИПЗНАЧЕНИЯ(Т.Регистратор) В (
		//++ Устарело_Производство21
		|				ТИП(Документ.СписаниеЗатратНаВыпуск),
		//-- Устарело_Производство21
		|				ТИП(Документ.РаспределениеПроизводственныхЗатрат))
		|		И Т.Номенклатура.ТипНоменклатуры В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		//-- НЕ УТ
		|	) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Организация,
		|	Т.АналитикаУчетаНоменклатуры
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.КоличествоСебестоимость) >= 0 И
		|	СУММА(Т.КоличествоСебестоимость) <> СУММА(Т.КоличествоОперативное)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Организация,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.КоличествоСебестоимость,
		|	Т.КоличествоОперативное
		|ПОМЕСТИТЬ ВТРасхожденияСебестоимостиИТоваровОрганизаций
		|ИЗ
		|	ВТРасхожденияПредварительная КАК Т
		|ГДЕ
		// Исключаем работы давальца
		|	НЕ ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			РегистрНакопления.СебестоимостьТоваров КАК РаботыДляДавальца
		|		ГДЕ
		|			РаботыДляДавальца.АналитикаУчетаНоменклатуры = Т.АналитикаУчетаНоменклатуры
		|			И РаботыДляДавальца.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
		|			И РаботыДляДавальца.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			И РаботыДляДавальца.Организация = Т.Организация
		|			И РаботыДляДавальца.Период <= &КонецПериода
		|			И РаботыДляДавальца.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)
		|			И РаботыДляДавальца.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
		|			И РаботыДляДавальца.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
		|		)
		|";

	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация';uk='Організація'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры';uk='Аналітика номенклатури'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("КоличествоСебестоимость", НСтр("ru='Количество (учет себестоимости)';uk='Кількість (облік собівартості)'",ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("КоличествоОперативное", НСтр("ru='Количество (оперативный учет)';uk='Кількість (оперативний облік)'",ОбщегоНазначения.КодОсновногоЯзыка()));

	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки("ВТРасхожденияСебестоимостиИТоваровОрганизаций", НСтр("ru='Обнаружены расхождения по количеству между остатками регистра себестоимости и остатками оперативных регистров по организации ""%1"" на конец периода %2';uk='Виявлено розбіжності за кількістю між залишками регістра собівартості і залишками оперативних регістрів по організації ""%1"" на кінець періоду %2'",ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей, , Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());

	Если ПараметрыПроверки.ДополнительныеПараметры.Свойство("НачалоПериода") Тогда
		ДатаПроверки = ПараметрыПроверки.ДополнительныеПараметры.НачалоПериода;
	Иначе
		ДатаПроверки = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВозможенРасчетСебестоимости", РасчетСебестоимостиПовтИсп.ВозможенРасчетСебестоимости(ДатаПроверки));
	ДопПараметры.Вставить("УчитыватьСебестоимостьТоваровПоНазначениям", РасчетСебестоимостиПовтИсп.СебестоимостьТоваровПоНазначениям(ДатаПроверки));

	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(ПараметрыПроверки, ПараметрыРегистрации, ТекстЗапроса, ДопПараметры);

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедуры

// Записывает в ИБ информацию о проблеме, диагностированной при выполнении расчета партий и себестоимости.
// Является оберткой к процедуре ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета().
//
// Параметры:
//	ПараметрыРасчета  - Структура - параметры расчета, см. ИнициализироватьОбщиеПараметрыРасчета()
//	МассивОрганизаций - Массив - организации, к которым относится проблема
//							если не указано, то проблема относится к каждой из рассчитываемых организаций
//	ТекстПроблемы 	  - Строка - краткая информация о проблеме; выводится в форме закрытия месяца
//	ТекстУточнения 	  - Строка - подробное описание проблемы; проблемы в форме закрытия месяца группируются по ТекстПроблемы + Важность, а данный текст выводится в форме расшифровки проблем
//	Объект 			  - Произвольный - объект для расшифровки проблемы
//	Важность 		  - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус проблемы; по умолчанию "Ошибка".
//	
Процедура ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета,
		МассивОрганизаций = Неопределено, ТекстПроблемы = "", ТекстУточнения = "",
		Объект = Неопределено, Важность = Неопределено) Экспорт

	ЭтоПараметрыРасчетаПУ22 = ПараметрыРасчета.Свойство("ЭтоПараметрыРасчетаПУ22");

	// Запишем информацию о наличии ошибок в механизме закрытия месяца.
	Если ЗначениеЗаполнено(МассивОрганизаций) Тогда
		ОрганизацииДляПротокола = МассивОрганизаций;
	Иначе
		ОрганизацииДляПротокола = ?(ЭтоПараметрыРасчетаПУ22, ПараметрыРасчета.КопияМассивОрганизаций, ПараметрыРасчета.МассивОрганизаций);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОрганизацииДляПротокола) Тогда
		ОрганизацииДляПротокола = Справочники.Организации.ДоступныеОрганизации();
	КонецЕсли;

	ОрганизацииДляПротокола = ОбщегоНазначенияУТКлиентСервер.Массив(ОрганизацииДляПротокола);

	Если НЕ ЗначениеЗаполнено(ТекстПроблемы) Тогда
		ТекстПроблемы = НСтр("ru='При выполнении расчета были диагностированы ошибки';uk='При виконанні розрахунку були діагностовані помилки'",ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;

	ПолныйТекстПроблемы = ТекстПроблемы
		+ ?(ОрганизацииДляПротокола.Количество() = 1, " "
		+ НСтр("ru='по организации ""%1"" за период ""%2""';uk='по організації ""%1"" за період ""%2""'",ОбщегоНазначения.КодОсновногоЯзыка()), "");

	Для Каждого ТекущаяОрганизация Из ОрганизацииДляПротокола Цикл

		ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, ТекущаяОрганизация, ПараметрыРасчета.РасчетныйПериод.НачалоПериода);

		ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРегистрации, ПолныйТекстПроблемы, Важность, СтрЗаменить(ТекстУточнения, СлужебныйСимвол_ПроблемаУжеЗарегистрирована(), ""), Объект);

	КонецЦикла;

КонецПроцедуры

// Выполняет подготовительные действия к расчету в случае, если расчет вызывается не из механизма закрытия месяца.
//
Функция ВыполнитьОперацииЗакрытияМесяцаДляПодготовкиКРасчетуЭтапа(СтрокаСхемыРасчета,
		ИдентификаторРасчета) Экспорт

		// Проверим возможность запуска расчета.
	АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакЗапускаРасчета(СтрокаСхемыРасчета.Организации, ИдентификаторРасчета, НСтр("ru='Выполняется актуализация данных партионного учета при формирование отчета';uk='Виконується актуалізація даних партіонного обліку при формування звіту'",ОбщегоНазначения.КодОсновногоЯзыка()), НачалоМесяца(СтрокаСхемыРасчета.Дата), Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);

	Если АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(АктивныеРасчеты.ТекстОшибки);
		Возврат Ложь;

	КонецЕсли;

	Обработки.ОперацииЗакрытияМесяца.ВыполнитьОперацииПодготовкиКРасчетуЭтапа(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, НачалоМесяца(СтрокаСхемыРасчета.Дата), СтрокаСхемыРасчета.Организации);

	Возврат Истина;

КонецФункции

// Выполняет завершающие действия для расчета в случае, если расчет вызывается не из механизма закрытия месяца.
//
Процедура ВыполнитьОперацииЗакрытияМесяцаДляЗавершенияРасчетаЭтапа(СтрокаСхемыРасчета,
		ИдентификаторРасчета) Экспорт

	Обработки.ОперацииЗакрытияМесяца.ВыполнитьОперацииЗавершенияРасчетаЭтапа(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, НачалоМесяца(СтрокаСхемыРасчета.Дата), СтрокаСхемыРасчета.Организации);

	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакОкончанияРасчета(ИдентификаторРасчета);

КонецПроцедуры


// Получает перечень колонок таблицы значений.
// 
// Параметры:
// 	КоллекцияКолонок - КоллекцияКолонокТаблицыЗначений - 
// 	Исключения - Строка - Описание
// Возвращаемое значение:
// 	Строка - Описание
Функция ПереченьПолей(КоллекцияКолонок, Исключения = "") Экспорт

	ИсключаемыеПоля = Новый Структура(Исключения);
	ПереченьПолей = "";

	Для Каждого Колонка Из КоллекцияКолонок Цикл
		Колонка = Колонка; // КолонкаТаблицыЗначений - 
		Если НЕ ИсключаемыеПоля.Свойство(Колонка.Имя) Тогда
			ПереченьПолей = ПереченьПолей
				+ ?(ЗначениеЗаполнено(ПереченьПолей), ", ", "") + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;

	Возврат ПереченьПолей;

КонецФункции

Процедура ВыбиратьДанныеДляРасчетаВоВременнуюТаблицу(Запрос,
		УсловиеОтбораДляОтладки = "")

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВоВременнуюТаблицу", "ПОМЕСТИТЬ Данные");

	Если ЗначениеЗаполнено(УсловиеОтбораДляОтладки) Тогда

	// Иногда для упрощения отладки достаточно выбрать только часть данных.
		// Например, только данные по одной позиции номенклатуры.
		// В этом случае во второй параметр надо передать строку условий отбора "ГДЕ", например
		//   Т.АналитикаУчетаНоменклатуры.Номенклатура.Код = ""12345678""
		// Следует помнить, что рассчитанные таким образом неполные данные записывать в ИБ не следует,
		// т.к. это вызовет очистку всех остальных данных, не попавших в отбор.
		Запрос.Текст = Запрос.Текст + "
			|
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ Данные_Временная
			|ИЗ
			|	Данные КАК Т
			|ГДЕ
			|	" + УсловиеОтбораДляОтладки + "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Данные
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ Данные
			|ИЗ
			|	Данные_Временная КАК Т
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Данные_Временная";

	КонецЕсли;

КонецПроцедуры

Функция ПодставитьШаблоныВесаИОбъемаВТекстЗапроса(ТекстЗапроса,
		ПсевдонимТаблицы = "СпрНоменклатура") Экспорт

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Вес", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(ПсевдонимТаблицы
		+ ".ЕдиницаИзмерения", ПсевдонимТаблицы, Ложь));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Объем", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(ПсевдонимТаблицы
		+ ".ЕдиницаИзмерения", ПсевдонимТаблицы, Ложь));

	Возврат ТекстЗапроса;

КонецФункции

//++ НЕ УТ
Функция РасчетВызванДляРасшифровки(ПараметрыРасчета) Экспорт

	Возврат ПараметрыРасчета <> Неопределено
		И ПараметрыРасчета.Свойство("РасшифровкаРаспределения");

КонецФункции

//-- НЕ УТ
Функция РасчетСебестоимостиВыполненДляРасшифровки(ПараметрыРасчета) Экспорт

	Возврат ПараметрыРасчета <> Неопределено
		И ПараметрыРасчета.Свойство("РасчетСебестоимостиВыполнен");

КонецФункции

Процедура СкорректироватьАналитикиУчетаПартийПриРасчете(ПараметрыРасчета,
		ТекстЗапросаВыборкиАналитик) Экспорт

	Если НЕ ПараметрыРасчета.РаспределениеПартий.ДополнительныеСвойства.Свойство("АналитикиУчетаПартий") Тогда
		ПараметрыРасчета.РаспределениеПартий.ДополнительныеСвойства.Вставить("АналитикиУчетаПартий", Новый Соответствие);
	КонецЕсли;

	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТАналитикиПартийСВидомЦенности");

	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий
		|ПОМЕСТИТЬ ВТИспользуемыеАналитикиУчетаПартий
		|ИЗ
		|	(" + ТекстЗапросаВыборкиАналитик + ") КАК Т
		|ГДЕ
		|	Т.АналитикаУчетаПартий <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
		|	И Т.АналитикаУчетаПартий <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(АналитикиНоменклатуры.Номенклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) В
		|				(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги)
		|		КОНЕЦ) КАК ВидЦенности
		|ПОМЕСТИТЬ ВТСтарыеАналитикиУчетаПартий
		|ИЗ
		|	ВТИспользуемыеАналитикиУчетаПартий КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК АналитикиПартий
		|		ПО Т.АналитикаУчетаПартий = АналитикиПартий.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикиНоменклатуры
		|		ПО Т.АналитикаУчетаПартий = АналитикиНоменклатуры.Ссылка
		|ГДЕ
		|	(АналитикиПартий.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка)
		|			ИЛИ АналитикиПартий.ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
        |			ИЛИ АналитикиПартий.НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.АналитикаУчетаПартий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий
		|ИЗ
		|	ВТСтарыеАналитикиУчетаПартий КАК Т";

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		СформироватьАналитикиПартийСВидомЦенности(ПараметрыРасчета, "ВТСтарыеАналитикиУчетаПартий");

		Запрос.Текст = "ВЫБРАТЬ
			|	Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
			|	Т.АналитикаУчетаПартийСВидомЦенности КАК АналитикаУчетаПартийСВидомЦенности
			|ИЗ
			|	ВТАналитикиПартийСВидомЦенности КАК Т";

		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			ПараметрыРасчета.РаспределениеПартий.ДополнительныеСвойства.АналитикиУчетаПартий.Вставить(Выборка.АналитикаУчетаПартий, Выборка.АналитикаУчетаПартийСВидомЦенности);
		КонецЦикла;

	КонецЕсли;

	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);

	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТИспользуемыеАналитикиУчетаПартий, ВТСтарыеАналитикиУчетаПартий, ВТАналитикиПартийСВидомЦенности");

КонецПроцедуры

// Процедура для отладки расчета.
//
Функция СтекВызоваРаспределенияПартий(ПараметрыРасчета,
		ДобавлятьВРезультатПервыйУзел = Истина) Экспорт

	ОписаниеСтека = "";

	Если ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество() = 0 Тогда
		Возврат ОписаниеСтека;
	КонецЕсли;

	Статистика = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество()
		- 1];

	Если Статистика.ТекущаяГлубина < 1 Тогда
		Возврат ОписаниеСтека;
	КонецЕсли;

	ОписаниеСтека = "";

	Для ПЦ = 0 По Статистика.ТекущаяГлубина - 1
		+ ?(ДобавлятьВРезультатПервыйУзел, 0, -1) Цикл
		ОписаниеСтека = Формат(Статистика.СтекВызовов[ПЦ], "ЧН=0; ЧГ=")
			+ ?(ОписаниеСтека = "", "", "; ") + ОписаниеСтека;
	КонецЦикла;

	Возврат ОписаниеСтека;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПараметрыОперацийЗакрытияМесяца

// Формирует описание группа технологических параметров.
//
Функция ОписаниеГруппПараметровОперацииЗакрытияМесяца() Экспорт

	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ЭтоОбластьДанных = ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();

	ВерсияПлатформыНеНиже8_3_13 = ВерсияПлатформыНеНижеУказанной("8.3.13.0");

	ОписаниеГруппПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеГруппПараметровОперации();

	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "РешениеСЛУ";
	ОписаниеГруппы.Наименование = НСтр("ru='Решение СЛУ';uk='Рішення СЛР'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание = НСтр("ru='Параметры, влияющие на результат решения системы линейных уравнений, с помощью которой выполняется расчет стоимости номенклатуры.';uk='Параметри, що впливають на результат вирішення системи лінійних рівнянь, за допомогою якої виконується розрахунок вартості номенклатури.'",ОбщегоНазначения.КодОсновногоЯзыка());

	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "ПогрешностиРешенияСЛУ";
	ОписаниеГруппы.Наименование = НСтр("ru='Погрешности решения СЛУ';uk='Похибки рішення СЛР'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание = НСтр("ru='Параметры, влияющие на определение погрешностей решения СЛУ.
|Максимальное значение ресурса, которую можно считать ошибкой округления, полученной в результате решения СЛУ.
|Т.к. СЛУ не всегда решается с ""нулевой"" точностью, то при расчете накапливаются ошибки округления, которые, в свою очередь,
|приводят к тому, что в регистрах могут появиться ""зависшие"" остатки в рассчитываемых ресурсах.
|Эти ""зависшие"" остатки по окончании расчета просто списываются из ресурсов регистра.
|Параметры этой группы также используются в операции ""Настройка распределения расходов"".'
|;uk='Параметри, що впливають на визначення похибок рішення СЛР. 
|Максимальне значення ресурсу, яке можна вважати помилкою округлення, отриманої в результаті рішення СЛР. 
|Оскільки СЛР не завжди вирішується з ""нульовою"" точністю, то при розрахунку накопичуються помилки округлення, які, в свою чергу, 
|призводять до того, що в регістрах можуть з''явитися ""завислі"" залишки в розраховуваних ресурсах. 
|Ці ""завислі"" залишки після закінчення розподілу просто списуються з ресурсів регістра. 
|Параметри цієї групи також використовуються в операції ""Настройка розподілу витрат"".'",ОбщегоНазначения.КодОсновногоЯзыка());

	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "ОграниченияВыборки";
	ОписаниеГруппы.Наименование = НСтр("ru='Ограничения на размер различных структур данных';uk='Обмеження на розмір різних структур даних'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание = НСтр("ru='Параметры, ограничивающие максимальный размер различных типов данных, используемых механизмом расчета.
|Необходимы для предотвращения ошибок нехватки памяти.'
|;uk='Параметри, що обмежують максимальний розмір різних типів даних, що використовуються механізмом розрахунку. 
|Необхідні для запобігання помилок браку пам''яті.'",ОбщегоНазначения.КодОсновногоЯзыка());

	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "ОграниченияФЗ";
	ОписаниеГруппы.Наименование = НСтр("ru='Управление многопоточностью';uk='Управління багатопоточністю'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Скрыть = ЭтоФайловаяИБ ИЛИ ЭтоОбластьДанных;
	ОписаниеГруппы.Описание = НСтр("ru='Параметры, накладывающие ограничения на фоновые задания, используемые для
|  - многопоточного расчета партий;
|  - параллельной записи сформированных движений.
|Необходимы для предотвращения ошибок нехватки памяти.
|Используются только в клиент-серверной информационной базе,
|т.к. в файловом режиме Платформа не поддерживает параллельную работу фоновых заданий.'
|;uk='Параметри, які накладають обмеження на фонові завдання, які використовуються для 
|- многопоточного розрахунку партій; 
|- паралельного запису сформованих рухів. 
|Необхідні для запобігання помилок браку пам''яті. 
|Використовуються тільки в клієнт-серверної інформаційної базі, 
|тому що у файловому режимі Платформа не підтримує паралельну роботу фонових завдань.'",ОбщегоНазначения.КодОсновногоЯзыка());

	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "УправлениеИтогами";
	ОписаниеГруппы.Наименование = НСтр("ru='Управление итогами регистров';uk='Управління підсумками регістрів'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание = НСтр("ru='Параметры, влияющие на скорость запись движений по регистрам, сформированным механизмом расчета.';uk='Параметри, що впливають на швидкість запису рухів по регістрах, сформованих механізмом розрахунку.'",ОбщегоНазначения.КодОсновногоЯзыка());

	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "НачальныеОстатки";
    ОписаниеГруппы.Наименование = НСтр("ru='Переход на партионный учет версии 2.5';uk='Перехід на облік партіонний версії 2.5'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание = НСтр("ru='Параметры, влияющие на формирование начальных остатков партий в регистре ""Себестоимость товаров"".';uk='Параметри, що впливають на формування початкових залишків партій в регістрі ""Собівартість товарів"".'",ОбщегоНазначения.КодОсновногоЯзыка());

	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "Проверки";
	ОписаниеГруппы.Наименование = НСтр("ru='Проверки данных';uk='Перевірки даних'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание = НСтр("ru='Параметры, используемые в процедурах проверки данных до и после расчета.';uk='Параметри, які використовуються в процедурах перевірки даних до і після розрахунку.'",ОбщегоНазначения.КодОсновногоЯзыка());

	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "ВыгрузкаДанныхРасчета";
	ОписаниеГруппы.Наименование = НСтр("ru='Выгрузка промежуточных данных расчета';uk='Вивантаження проміжних даних розрахунку'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание = НСтр("ru='Параметры, позволяющие сохранить промежуточные данные расчета партий и себестоимости.';uk='Параметри, що дозволяють зберегти проміжні дані розрахунку партій і собівартості.'",ОбщегоНазначения.КодОсновногоЯзыка());

	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "ВозможностиРазныхВерсийПлатформы";
	ОписаниеГруппы.Наименование = НСтр("ru='Использование возможностей Платформы';uk='Використання можливостей Платформи'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Скрыть = НЕ ВерсияПлатформыНеНиже8_3_13;
	ОписаниеГруппы.Описание = НСтр("ru='Параметры, позволяющие задействовать или отключить возможности, предоставляемые разными версиями Платформы.';uk='Параметри, що дозволяють задіяти або відключити можливості, що надаються різними версіями Платформи.'",ОбщегоНазначения.КодОсновногоЯзыка());

	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя = "Отладка";
	ОписаниеГруппы.Наименование = НСтр("ru='Отладка расчета';uk='Налагодження розрахунку'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Скрыть = НЕ РежимОтладки;
	ОписаниеГруппы.Описание = НСтр("ru='Параметры, используемые для отладки механизмов расчета.
|Изменять данные параметры рекомендуется только в тестовых информационных базах!'
|;uk='Параметри, які використовуються для налагодження механізмів розрахунку. 
|Змінювати ці параметри рекомендується тільки в тестових інформаційних базах!'",ОбщегоНазначения.КодОсновногоЯзыка());

	Возврат ОписаниеГруппПараметров;

КонецФункции

// Формирует описание технологических параметров.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Имя - Строка -
// * Наименование - Строка -
// * Описание - Строка -
// * СтарыеИмена - Строка -
// * Родитель - Строка -
// * ТипЗначения - ОписаниеТипов -
// * СписокВыбора - СписокЗначений -
// * ДиапазонС - Дата, Число -
// * ДиапазонПо - Дата, Число -
// * Скрыть - Булево -
// * ЗначениеПоУмолчанию - Произвольный - 
// * ДополнительныеСвойства - Произвольный -
// 
Функция ОписаниеПараметровОперацииЗакрытияМесяца() Экспорт

	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ЭтоОбластьДанных = ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	ОписаниеПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеПараметровОперации();
	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();

	ВерсияПлатформыНеНиже8_3_13 = ВерсияПлатформыНеНижеУказанной("8.3.13.0");
	ВерсияПлатформыНеНиже8_3_14 = ВерсияПлатформыНеНижеУказанной("8.3.14.0");
	ВерсияПлатформыНеНиже8_3_14_1831 = ВерсияПлатформыНеНижеУказанной("8.3.14.1831");

	#Область РешениеСЛУ

	Родитель = "РешениеСЛУ";

	// ТребуемаяТочность
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ТребуемаяТочность";
	ОписаниеПараметра.Наименование = НСтр("ru='Точность решения СЛУ';uk='Точність рішення СЛР'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 9, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 0;
	ОписаниеПараметра.ДиапазонПо = 0.1;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 0.000001;
	ОписаниеПараметра.Описание = НСтр("ru='Точность решения системы линейных уравнений - максимальное значение разницы решений, полученных на итерациях n и (n+1).
|Чем меньше данное значение, тем более точный получается результат решения СЛУ (стоимость номенклатуры),
|но тем большее количество итераций решения СЛУ требуется, чтобы достигнуть этой точности.'
|;uk='Точність рішення системи лінійних рівнянь - максимальне значення різниці рішень, отриманих на ітераціях n і (n + 1). 
|Чим менше це значення, тим точніший виходить результат рішення СЛР (вартість номенклатури), 
|але тим більша кількість ітерацій рішення СЛР потрібна, щоб досягти цієї точності.'",ОбщегоНазначения.КодОсновногоЯзыка());

	// МаксимальноеКоличествоИтераций
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "МаксимальноеКоличествоИтераций";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальное количество итераций поиска решения СЛУ';uk='Максимальна кількість ітерацій пошуку рішення СЛР'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 1;
	ОписаниеПараметра.ДиапазонПо = 9999;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 200;
	ОписаниеПараметра.Описание = НСтр("ru='Максимальное количество итераций, допустимое для поиска решения системы линейных уравнений.
|Необходимо для того, чтобы принудительно закончить поиск подходящего решения СЛУ в случае, если не удается достичь требуемой точности решения СЛУ.'
|;uk='Максимальна кількість ітерацій, допустима для пошуку рішення системи лінійних рівнянь. 
|Необхідно для того, щоб примусово закінчити пошук відповідного рішення СЛР в разі, якщо не вдається досягти необхідної точності рішення СЛР.'",ОбщегоНазначения.КодОсновногоЯзыка());

	// ИспользованиеВычислительныхРесурсов
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "ИспользованиеВычислительныхРесурсов";
	ОписаниеПараметра.Наименование 		  = НСтр("ru='Количество потоков при решении СЛУ';uk='Кількість потоків при вирішенні СЛР'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС     	  = 1;
	ОписаниеПараметра.ДиапазонПо     	  = 9999;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 0;
	ОписаниеПараметра.Описание =
		НСтр("ru='Если указано значение 0, прикладное решение будет использовать n-1 поток,
|где n – максимальное число неконкурирующих потоков, которые можно запустить на компьютере
|(обычно количество потоков равно числу ядер, при использовании HyperThreading – удвоенному числу ядер). 
|Не рекомендуется устанавливать значение больше максимального возможного числа неконкурирующих потоков –
|это приведет к замедлению работы прикладного решения.'
|;uk='Якщо вказано значення 0, прикладне рішення буде використовувати n-1 потік, 
|де n - максимальне число неконкуруючих потоків, які можна запустити на комп''ютері 
|(зазвичай кількість потоків дорівнює числу ядер, при використанні HyperThreading - подвоєному числу ядер). 
|Не рекомендується встановлювати значення більше максимального можливого числа неконкуруючих потоків - 
|це призведе до уповільнення роботи прикладного рішення.'");
	
	// РазрядностьДляРасчетов
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "РазрядностьДляРасчетов";
	ОписаниеПараметра.Наименование = НСтр("ru='Разрядность числовых полей, используемых при решении СЛУ.';uk='Розрядність числових полів, використовуваних при вирішенні СЛР.'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ЗначениеПоУмолчанию = 28;
	ОписаниеПараметра.ДиапазонС = 23;
	ОписаниеПараметра.ДиапазонПо = 38;
	ОписаниеПараметра.Описание = НСтр("ru='Разрядность числа, используемая в запросах механизма расчета себестоимости.
|Изменять значение параметра имеет смысл только в случае возникновения ошибок вида ""Ошибка SQL: Переполнение поля."" или ""Arithmetic overflow"".
|При этом в результате повышения значения данного параметра возможно ухудшение точности расчета.
|Указанное значение не должно превышать максимальную разрядность чисел, допустимую в используемой СУБД (38 - для всех СУБД кроме DB2, для DB2 - 31).'
|;uk='Розрядність числа, використовувана в запитах механізму розрахунку собівартості. 
|Змінювати значення параметра має сенс тільки в разі виникнення помилок виду ""Помилка SQL: Переповнення поля."" або ""Arithmetic overflow"". 
|При цьому в результаті підвищення значення даного параметра можливе погіршення точності розрахунку. 
|Вказане значення не повинно перевищувати максимальну розрядність чисел, допустиму в використовуваній СУБД (38 - для всіх СУБД крім DB2, для DB2 - 31).'",ОбщегоНазначения.КодОсновногоЯзыка());

	// ЗащитаОтПереполненияПоля
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ЗащитаОтПереполненияПоля";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальное значение, допустимое для суммового поля запроса';uk='Максимальне значення, допустиме для суммового поля запиту'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ЗначениеПоУмолчанию = 9;
	ОписаниеПараметра.ДиапазонС = 0;
	ОписаниеПараметра.ДиапазонПо = 38;
	ОписаниеПараметра.Описание = НСтр("ru='Максимально допустимая разрядность числа 1*10^х - значения суммы (цены) в строке временной таблицы решений при решении СЛУ.
|Если сумма в строке получается больше, то такая строка считается ошибочной и отбрасывается.
|В противном случае при решении СЛУ возможны ошибки вида ""Ошибка SQL: Переполнение поля."" или ""Arithmetic overflow"".
|Если указано значение 0, то защита от переполнения не используется. 
|Значение подобрано опытным путем.'
|;uk='Максимально допустима розрядність числа 1 * 10 ^ х - значення суми (ціни) в рядку тимчасової таблиці рішень при вирішенні СЛР. 
|Якщо сума в рядку виходить більше, то такий рядок вважається помилковим і відкидається. 
|В іншому випадку при вирішенні СЛР можливі помилки типу ""Помилка SQL: Переповнення поля."" або ""Arithmetic overflow"". 
|Якщо вказано значення 0, то захист від переповнення не використовується. 
|Значення підібрано шляхом спроб.'",ОбщегоНазначения.КодОсновногоЯзыка());

	#КонецОбласти

	#Область ПогрешностиРешенияСЛУ

	Родитель = "ПогрешностиРешенияСЛУ";

	// ЗначениеПогрешностиСебестоимостьРегл
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ЗначениеПогрешностиСебестоимостьРегл";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальная себестоимость (регл.), считаемая погрешностью';uk='Максимальна собівартість (регл.), що вважається похибкою'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(8, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 0;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
	ОписаниеПараметра.Описание = НСтр("ru='Используется для регл. ресурсов регистра СебестоимостьТоваров.
|Подробнее см. описание группы параметров.'
|;uk='Використовується для регл. ресурсів регістра СебестоимостьТоваров. 
|Детальніше див. опис групи параметрів.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// ЗначениеПогрешностиСебестоимостьУпр
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ЗначениеПогрешностиСебестоимостьУпр";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальная себестоимость (упр.), считаемая погрешностью';uk='Максимальна собівартість (упр.), що вважається похибкою'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(8, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 0;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
	ОписаниеПараметра.Описание = НСтр("ru='Используется для упр. ресурсов регистра СебестоимостьТоваров.
|Подробнее см. описание группы параметров.'
|;uk='Використовується для упр. ресурсів регістра СебестоимостьТоваров. 
|Детальніше див. опис групи параметрів.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// ЗначениеПогрешностиРасходыРегл
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ЗначениеПогрешностиРасходыРегл";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальная сумма расходов (регл.), считаемая погрешностью';uk='Максимальна сума витрат (регл.), що вважається похибкою'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(8, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 0;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
	ОписаниеПараметра.Описание = ОписаниеПараметра.Описание = НСтр("ru='Используется для регл. ресурсов регистров ПрочиеРасходы и ПрочиеРасходыНезавершенногоПроизводства (в КА и ERP).
|Подробнее см. описание группы параметров.'
|;uk='Використовується для регл. ресурсів регістрів ПрочиеРасходы і ПрочиеРасходыНезавершенногоПроизводства (в КУП та ERP). 
|Детальніше див. опис групи параметрів.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// ЗначениеПогрешностиРасходыУпр
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ЗначениеПогрешностиРасходыУпр";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальная сумма расходов (упр.), считаемая погрешностью';uk='Максимальна сума витрат (упр.), що вважається похибкою'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(8, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 0;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
	ОписаниеПараметра.Описание = НСтр("ru='Используется для упр. ресурсов регистров ПрочиеРасходы и ПрочиеРасходыНезавершенногоПроизводства (в КА и ERP).
|Подробнее см. описание группы параметров.'
|;uk='Використовується для упр. ресурсів регістрів ПрочиеРасходы і ПрочиеРасходыНезавершенногоПроизводства (в КУП та ERP). 
|Детальніше див. опис групи параметрів.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// ЗначениеПогрешностиКоличество
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ЗначениеПогрешностиКоличество";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальное количество, считаемое погрешностью';uk='Максимальна кількість, що вважається похибкою'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(8, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 0;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 0.05;
	ОписаниеПараметра.Описание = НСтр("ru='Используется для ресурсов ДоляСтоимости и ПоказательОтнесенияНаВыпуск регистра ПрочиеРасходыНезавершенногоПроизводства (в КА и ERP).
|Подробнее см. описание группы параметров.'
|;uk='Використовується для ресурсів ДоляСтоимости і ПоказательОтнесенияНаВыпуск регістра ПрочиеРасходыНезавершенногоПроизводства (в КУП та ERP).
|Детальніше див. опис групи параметрів.'",ОбщегоНазначения.КодОсновногоЯзыка());

	#КонецОбласти

	#Область ОграниченияВыборки

	Родитель = "ОграниченияВыборки";

	// КоличествоСтрокВТЗ
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "КоличествоСтрокВТЗ";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальное количество строк в таблице значений';uk='Максимальна кількість рядків в таблиці значень'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 1;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 100000;
	ОписаниеПараметра.Описание = НСтр("ru='Максимальное количество строк, которое может быть помещено в таблицу значений.';uk='Максимальна кількість рядків, яку може бути вміщено в таблицю значень.'",ОбщегоНазначения.КодОсновногоЯзыка());

	// КоличествоЗаписейВНЗ
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "КоличествоЗаписейВНЗ";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальное количество строк в наборе записей';uk='Максимальна кількість рядків в наборі записів'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 0;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 10000;
	ОписаниеПараметра.Описание = НСтр("ru='Максимальное количество строк, которое может быть помещено в набор записей регистра.
|Если указать значение 0, то запись движений в ИБ после расчета выполняться не будет.
|Не следует использовать эту возможность при расчете первого месяца после перехода на партионный учет версии 2.5,
|т.к. при этом не будут записаны начальные остатки в разрезе партий и последующий расчет будет некорректным.'
|;uk='Максимальна кількість рядків, яку може бути вміщено в набір записів регістру. 
|Якщо вказати значення 0, то запис рухів в ІБ після розрахунку виконуватися не буде. 
|Не слід використовувати цю можливість при розрахунку першого місяця після переходу на облік по партіях версії 2.5, тому що при цьому не будуть записані початкові залишки в розрізі партій і подальший розрахунок буде некоректним.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// ПорцияРасчетаПартий
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ПорцияРасчетаПартий";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальная порция выборки данных при расчете партий';uk='Максимальна порція вибірки даних при розрахунку партій'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 1;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 10000;
	ОписаниеПараметра.Описание = НСтр("ru='Максимальное количество узлов, обсчитываемых за один проход в механизме распределения партий версии 2.5.';uk='Максимальна кількість вузлів, які обчислюються за один прохід у механізмі розподілу партій версії 2.5.'",ОбщегоНазначения.КодОсновногоЯзыка());

	// МаксимальнаяДлинаЦепочки
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "МаксимальнаяДлинаЦепочки";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальная длина цепочки движения партии';uk='Максимальна довжина ланцюжка руху партії'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 1;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 800;
	ОписаниеПараметра.Описание = НСтр("ru='Максимальная длина цепочки движения партии, которая может быть рассчитана механизмом партионного учета.
|Если получается цепочка более длинная, то из-за рекурсивного вызова расчета возникнет ошибка ""Переполнение стека встроенного языка на сервере"".
|Значение подобрано опытным путем.'
|;uk='Максимальна довжина ланцюжка руху партії, яка може бути розрахована механізмом партіонного обліку. 
|Якщо виходить ланцюжок довший, то через рекурсивний виклик розрахунку виникне помилка ""Переповнення стека вбудованої мови на сервері"". 
|Значення підібрано шляхом спроб.'",ОбщегоНазначения.КодОсновногоЯзыка());

	#КонецОбласти

	#Область ОграниченияФЗ

	Родитель = "ОграниченияФЗ";

	// МаксимальноеКоличествоФЗРасчетаПартий
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "МаксимальноеКоличествоФЗРасчетаПартий";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальное количество одновременно выполняемых потоков расчета партий';uk='Максимальна кількість одночасно виконуваних потоків розрахунку партій'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 0;
	ОписаниеПараметра.ЗначениеПоУмолчанию = ?(ЭтоФайловаяИБ, 0, ?(ЭтоОбластьДанных, 1, 5));
	ОписаниеПараметра.Описание = НСтр("ru='Максимальное количество одновременно запущенных фоновых заданий расчета партий.
|Данные для расчета партий будут разделены на указанное количество порций (n) + 1,
|после чего первая порция будет рассчитываться в основном сеансе, а остальные порции будут переданы для расчета в фоновые задания.
|После окончания расчета всех порций результаты расчета будут собраны в основном сеансе и расчет перейдет к следующему этапу.
|Если значение параметра равно 0, то расчет партий будет выполняться только в основном сеансе, без использования фоновых заданий.'
|;uk='Максимальна кількість одночасно запущених фонових завдань розрахунку партій. 
|Дані для розрахунку партій будуть розділені на вказану кількість порцій (n) + 1, 
|після чого перша порція буде розраховуватися в основному сеансі, а решта порції будуть передані для розрахунку в фонові завдання. 
|Після закінчення розрахунку всіх порцій результати розрахунку будуть зібрані в основному сеансі і розрахунок перейде до наступного етапу. 
|Якщо значення параметра дорівнює 0, то розрахунок партій буде виконуватися тільки в основному сеансі, без використання фонових завдань.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// Стабильность многопоточной записи на разном железе зависит от сочетания нескольких факторов:
	// - количества активных фоновых заданий (чем больше заданий, тем больше надо памяти для сервера Предприятия)
	// - количества движений, записываемых одним заданием (чем больше движений - тем больше памяти надо этому заданию)
	// - одновременности выполнения записи одного регистра разными заданиями (чем больше заданий пишет один регистр,
	//		тем больше вероятность возникновения ошибок, например, "Lock request time out period exceeded").

	// МаксимальноеКоличествоФЗЗаписи
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "МаксимальноеКоличествоФЗЗаписи";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальное количество одновременно выполняемых заданий записи';uk='Максимальна кількість одночасно виконуваних завдань запису'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 0;
	ОписаниеПараметра.ЗначениеПоУмолчанию = ?(ЭтоФайловаяИБ, 0, ?(ЭтоОбластьДанных, 2, 5));
	ОписаниеПараметра.Описание = НСтр("ru='Максимальное количество одновременно запущенных фоновых заданий записи движений.
|При достижении этого количества фоновых заданий новое задания не создается до тех пор, пока не будет завершено одно из уже запущенных заданий.
|Если значение параметра меньше 2, то запись движений будет выполняться последовательно, без использования фоновых заданий.'
|;uk='Максимальна кількість одночасно запущених фонових завдань запису рухів. 
|При досягненні цієї кількості фонових завдань нове завдання не створюється до тих пір, поки не буде завершено один з вже запущених завдань. 
|Якщо значення параметра менше 2, то запис рухів буде виконуватися послідовно, без використання фонових завдань.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// КоличествоДвиженийВФЗЗаписи
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "КоличествоДвиженийВФЗЗаписи";
	ОписаниеПараметра.Наименование = НСтр("ru='Максимальное количество движений, записываемое одним фоновым заданием';uk='Максимальна кількість рухів, що записується одним фоновим завданням'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 1;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 100000;
	ОписаниеПараметра.Описание = НСтр("ru='Размер порций, на которые разбиваются сформированные движения.
|Каждая порция движений передается в отдельное фоновое задание для ее записи в ИБ, при этом соблюдается следующее условие:
|все движения, принадлежащие регистратору Х, обязательно должны быть помещены в одну порцию
|(в противном случае одно фоновое задание затрет движения этого регистратора, записанные другим фоновым заданием).
|При этом, если количество движений какого-то регистратора Х превышает значение этого параметра, то движения этого регистратора Х
|будут помещены в отдельную порцию, размер которой будет превышать значение этого параметра.'
|;uk='Розмір порцій, на які розбиваються сформовані рухи. 
|Кожна порція рухів передається в окреме фонове завдання для її запису в ІБ, при цьому дотримується наступна умова: 
|всі рухи, що належать реєстратору Х, обов''язково повинні бути поміщені в одну порцію
|(в іншому випадку одне фонове завдання затре руху цього реєстратора, записані іншим фоновим завданням ). 
|При цьому, якщо кількість рухів якогось реєстратора Х перевищує значення цього параметра, то руху цього реєстратора Х 
|будуть поміщені в окрему порцію, розмір якої буде перевищувати значення цього параетра.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// ПоследовательнаяЗаписьРегистра
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ПоследовательнаяЗаписьРегистра";
	ОписаниеПараметра.Наименование = НСтр("ru='Ожидать окончания записи предыдущей порции этого же регистра';uk='Очікувати закінчення запису попередньої порції цього ж регістра'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
	ОписаниеПараметра.Описание = НСтр("ru='Влияет на параллельность записи движений в фоновых заданиях в пределах одного регистра.
|1. Если параметр включен, то задание №n записи очередной порции движений регистра Х не начнет выполнение до тех пор,
|пока не будет завершено задание №(n-1) для этого же регистра Х.
|В то же время могут выполняться задания записи регистра Y - они никак не будут влиять на выполнение заданий записи регистра Х.
|2. Если параметр выключен, то задания записи регистра Х не будут ожидать завершения других заданий по этому же регистру.
|Это позволяет вести параллельную запись движений ""в пределах"" одного регистра, что может уменьшить общее время записи движений
|Но в то же время, в зависимости от параметров системы, это может привести к возникновению конфликтов блокировок транзакций записи.
|Если возникнет хоть одна такая ошибка, то весь расчет будет считаться завершенным аварийно и потребуется его повторный запуск.'
|;uk='Впливає на паралельність запису рухів в фонових завданнях в межах одного регістра. 
|1. Якщо параметр включений, то завдання №n запису чергової порції рухів регістра Х не почне виконання доти, 
|поки не буде завершено завдання № (n-1) для цього ж регістра Х. 
|У той же час можуть виконуватися завдання записи регістру Y - вони ніяк не впливатимуть на виконання завдань записи регістру Х. 
|2. Якщо параметр вимкнений, то завдання записи регістру Х не чекатимуть завершення інших завдань по цьому ж регістру. 
|Це дозволяє вести паралельний запис рухів ""в межах"" одного регістра, що може зменшити загальний час запису рухів 
|Але в той же час, в залежності від параметрів системи, це може привести до виникнення конфліктів блокувань транзакцій запису. 
|Якщо виникне хоч одна така помилка, то весь розрахунок буде вважатися завершеним аварійно і буде потрібний його повторний запуск.'",ОбщегоНазначения.КодОсновногоЯзыка());

	#КонецОбласти

	#Область УправлениеИтогами

	Родитель = "УправлениеИтогами";

	// ОтключатьИтогиПередЗаписью
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ОтключатьИтогиПередЗаписью";
	ОписаниеПараметра.Наименование = НСтр("ru='Отключать итоги регистра перед записью движений';uk='Відключати підсумки регістра перед записом рухів'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
	ОписаниеПараметра.Описание = НСтр("ru='Влияет на управление итогами регистра (текущими итогами и периодами рассчитанных итогов).
|Если параметр установлен, то
|- перед началом расчета запоминается состояние использования итогов по всем рассчитываемым регистрам,
|- при записи движений по каждому регистру его итоги отключаются,
|- при окончании записи всех движений состояние использования итогов возвращается к первоначальному.
|Это позволяет ускорить запись движений, но по окончании расчета тратится некоторое время на пересчет итогов.'
|;uk='Впливає на управління підсумками регістра (поточними результатами і періодами розрахованих підсумків). 
|Якщо параметр встановлено, то 
|- перед початком розрахунку запам''ятовується стан використання підсумків за всіма розраховуваними регістрами, 
|- при запису рухів по кожному регістру його підсумки відключаються, 
|- при закінченні запису всіх рухів стан використання підсумків повертається до початкового. 
|Це дозволяє прискорити запис рухів, але після закінчення розподілу витрачається деякий час на перерахунок підсумків.'",ОбщегоНазначения.КодОсновногоЯзыка());

	#КонецОбласти

	#Область НачальныеОстатки

	Родитель = "НачальныеОстатки";

	// ВзятьОстаткиСебестоимостиИзРегистровПартий
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ВзятьОстаткиСебестоимостиИзРегистровПартий";
	ОписаниеПараметра.Наименование = НСтр("ru='Взять остатки себестоимости из партионных регистров';uk='Взяти залишки собівартості з партіонних регістрів'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|при расчете остатков партий в первом месяце после перехода на партионный учет 2.5 остатки регистра себестоимости подгоняются под остатки регистров партий:
|- сначала выполняется сторнирование всех остатков себестоимости на начало этого месяца,
|- потом выполняется приход партий по данным партионных регистров.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5:
|при розрахунку залишків партій в першому місяці після переходу на партіонний облік 2.5 залишки регістра собівартості підганяються під залишки регістрів партій:
|- спочатку виконується сторнування всіх залишків собівартості на початок цього місяця,
|- потім виконується надходження партій за даними партіонних регістрів.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// РаспределятьРасхожденияВСуммахПартийИСебестоимости
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "РаспределятьРасхожденияВСуммахПартийИСебестоимости";
	ОписаниеПараметра.Наименование = НСтр("ru='Распределять расхождения в суммах регистра себестоимости и регистров партий';uk='Розподіляти розбіжності в сумах регістра собівартості і регістрів партій'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
	ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|при расчете остатков партий в первом месяце после перехода на партионный учет 2.5 разницы в суммах остатков себестоимости и остатков партий
|распределяются на остатки партий пропорционально количеству в партии.
|Данный параметр имеет смысл если не установлен предыдущий параметр.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5:
|при розрахунку залишків партій в першому місяці після переходу на партіонний облік 2.5 різниці в сумах залишків собівартості і залишків партій 
|розподіляються на залишки партій пропорційно до кількості в партії. 
|Даний параметр має сенс якщо не встановлено попередній параметр.'",ОбщегоНазначения.КодОсновногоЯзыка());

	#КонецОбласти

	#Область Проверки

	Родитель = "Проверки";

	// ПроверятьЗаписиСПризнакомРасчетНеЗавершен
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ПроверятьЗаписиСПризнакомРасчетНеЗавершен";
	ОписаниеПараметра.Наименование = НСтр("ru='Проверять подбор партий в сформированных движениях';uk='Перевіряти підбір партій в сформованих рухах'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь; // проверка используется для автоматического тестирования
	ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|определяет, необходимо ли при окончании расчета выполнять проверку подбора партий в сформированных движениях.
|Проверка по умолчанию отключена, т.к. еще находится в режиме тестирования.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5:
|визначає, чи необхідно при закінченні розрахунку виконувати перевірку підбору партій в сформованих рухах.
|Перевірка за замовчуванням відключена, тому що ще перебуває в режимі тестування.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// ПроверятьСоответствиеСебестоимостиИПартийНДС
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ПроверятьСоответствиеСебестоимостиИПартийНДС";
	ОписаниеПараметра.Наименование = НСтр("ru='Проверять соответствие остатков в регистрах себестоимости и партий НДС';uk='Перевіряти відповідність залишків в регістрах собівартості і партій ПДВ'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь; // проверка используется для автоматического тестирования
	ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|остатки по регистру ""Детализация партий товаров для НДС"" должны соответствовать остаткам по регистру ""Себестоимость товаров"".
|Проверка по умолчанию отключена, т.к. еще находится в режиме тестирования.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5: 
|залишки по регістру ""Деталізація партій товарів для ПДВ"" повинні відповідати залишкам по регістру ""Собівартість товарів"". 
|Перевірка за замовчуванням відключена, тому що ще перебуває в режимі тестування.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// ПроверятьСоответствияОперативногоУчетаИСебестоимости
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ПроверятьСоответствияОперативногоУчетаИСебестоимости";
	ОписаниеПараметра.Наименование = НСтр("ru='Проверять соответствие оперативного учета и себестоимости';uk='Перевіряти відповідність оперативного обліку та собівартості'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь; // проверка используется для автоматического тестирования
	ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|остатки по оперативным регистрам должны соответствовать остаткам по регистру ""Себестоимость товаров"".
|Проверка по умолчанию отключена, т.к. находится в режиме тестирования.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5: 
|залишки по оперативних регістрах повинні відповідати залишкам по регістру ""Собівартість товарів"". 
|Перевірка за замовчуванням відключена, тому що знаходиться в режимі тестування.'",ОбщегоНазначения.КодОсновногоЯзыка());
	
	//++ НЕ УТ
	
	// ПроверитьКорректностьДанныхДляПартийНДС2_4
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "ПроверитьКорректностьДанныхДляПартийНДС2_4";
	ОписаниеПараметра.Наименование 		  = НСтр("ru='Проверять данные для расчета партий НДС (ФИФО скользящая)';uk='Перевіряти дані для розрахунку партій ПДВ (ФІФО змінна)'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь; // проверка используется для автоматического тестирования
	ОписаниеПараметра.Описание =
		НСтр("ru='Используется в механизме партионного учета версии 2.5:
|в данных для расчета партий НДС должен быть заполнен базис распределения (стоимость) партии.
|Если стоимость не заполнена, то будет выдано предупреждение о необходимости указать плановую цену номенклатуры.
|Проверка по умолчанию отключена, т.к. еще находится в режиме тестирования.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5: 
|в даних для розрахунку партій ПДВ повинен бути заповнений базис розподілу (вартість) партії. 
|Якщо вартість не заповнена, то буде видано попередження про необхідність вказати планову ціну номенклатури. 
|Перевірка за замовчуванням відключена, тому що ще перебуває в режимі тестування.'");
	
	//-- НЕ УТ
	#КонецОбласти

	#Область ВыгрузкаДанныхРасчета

	Родитель = "ВыгрузкаДанныхРасчета";

	// КаталогДляСохраненияДанныхРасчетаПартий
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "КаталогДляСохраненияДанныхРасчетаПартий";
	ОписаниеПараметра.Наименование = НСтр("ru='Каталог для сохранения данных расчета партий';uk='Каталог для збереження даних розрахунку партій'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Строка");
	ОписаниеПараметра.ЗначениеПоУмолчанию = "";
	ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|в указанный каталог будут сохранены данные, используемые при расчете одного из этапов расчета партий (см. описание следующего параметра).'
|;uk='Використовується в механізмі партіонного обліку версії 2.5: 
|в зазначений каталог будуть збережені дані, використовувані при розрахунку одного з етапів розрахунку партій (див. опис наступного параметра).'",ОбщегоНазначения.КодОсновногоЯзыка());

		// ЭтапПартионногоУчета22ДляВыгрузкиВФайлы
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ЭтапПартионногоУчета22ДляВыгрузкиВФайлы";
    ОписаниеПараметра.Наименование = НСтр("ru='Сохраняемый этап партионного учета 2.5';uk='Етап партіонного обліку 2.5, що зберігається'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Строка");
	ОписаниеПараметра.ЗначениеПоУмолчанию = "";
	ОписаниеПараметра.СписокВыбора = РасчетСебестоимости.ЭтапыСРаспределениемПартий();
	ОписаниеПараметра.СписокВыбора.Вставить(0, "", НСтр("ru='<не выгружать>';uk='<не вивантажувати>'",ОбщегоНазначения.КодОсновногоЯзыка()));
    ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|позволяет сохранить данные, используемые при расчете одного из этапов расчета партий:
|- таблица Данные (данные для расчета)
|- таблицы Источники и Приемники (связи исходных данных)
|- таблица РасчетныеПартии (результаты расчета)
|Сохранение выполняется в указанный каталог (см. описание предыдущего параметра).
|Следует иметь в виду, что при попытке выгрузить большой объем данных может возникнуть ошибка нехватки памяти и расчет прервется.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5: 
|дозволяє зберегти дані, використовувані при розрахунку одного з етапів розрахунку партій: 
|- таблиця Дані (дані для розрахунку) 
|- таблиці Джерела і Приймачі (зв''язки вихідних даних) 
|- таблиця Розрахункові партії (результати розрахунку) 
|Зберігання виконується в зазначений каталог (див. опис попереднього параметра). 
|Слід мати на увазі, що при спробі вивантажити великий обсяг даних може виникнути помилка нестачі пам''яті і розрахунок перерветься.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// КаталогДляСохраненияДанныхСЛУ
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "КаталогДляСохраненияДанныхСЛУ";
	ОписаниеПараметра.Наименование = НСтр("ru='Каталог для сохранения СЛУ';uk='Каталог для збереження СЛР'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Строка");
	ОписаниеПараметра.ЗначениеПоУмолчанию = "";
	ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме расчета себестоимости:
|в указанный каталог будут сохранены данные, используемые для составления СЛУ.'
|;uk='Використовується в механізмі розрахунку собівартості: 
|в зазначений каталог будуть збережені дані, які використовуються для складання СЛР.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// ФорматСохраненияДанныхСЛУ
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ФорматСохраненияДанныхСЛУ";
	ОписаниеПараметра.Наименование = НСтр("ru='Формат сохранения СЛУ';uk='Формат збереження СЛР'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Строка");
	ОписаниеПараметра.ЗначениеПоУмолчанию = "csv";
	ОписаниеПараметра.СписокВыбора.Добавить("mxl");
	ОписаниеПараметра.СписокВыбора.Добавить("csv");
	ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме расчета себестоимости:
|определяет в каком виде будут сохранены данные СЛУ.
|Следует иметь в виду, что при попытке выгрузить большой объем данных может возникнуть ошибка нехватки памяти и расчет прервется.'
|;uk='Використовується в механізмі розрахунку собівартості: 
|визначає в якому вигляді будуть збережені дані СЛР. 
|Слід мати на увазі, що при спробі вивантажити великий обсяг даних може виникнути помилка нестачі пам''яті і розрахунок перерветься.'",ОбщегоНазначения.КодОсновногоЯзыка());

	#КонецОбласти

	#Область ВозможностиРазныхВерсийПлатформы

	Родитель = "ВозможностиРазныхВерсийПлатформы";

	// ИспользоватьПриНумерацииАвтоНомерЗаписи
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ИспользоватьПриНумерацииАвтоНомерЗаписи";
	ОписаниеПараметра.Наименование = НСтр("ru='Использовать платформенный механизм нумерации строк временной таблицы';uk='Використовувати платформний механізм нумерації рядків тимчасової таблиці'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.Скрыть = НЕ ВерсияПлатформыНеНиже8_3_13;
	ОписаниеПараметра.ЗначениеПоУмолчанию = ВерсияПлатформыНеНиже8_3_13;
	ОписаниеПараметра.Описание = НСтр("ru='Использование платформенной функции языка запросов АВТОНОМЕРЗАПИСИ() при нумерации строк временных таблиц.
|Данная функция позволяет сократить время расчета.'
|;uk='Використання платформної функції мови запитів АВТОНОМЕРЗАПИСИ() при нумерації рядків тимчасових таблиць.
|Ця функція дозволяє скоротити час розрахунку.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// ИспользоватьПлатформуДляРешенияСЛУ
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ИспользоватьПлатформуДляРешенияСЛУ";
	ОписаниеПараметра.Наименование = НСтр("ru='Использовать платформенный механизм решения СЛУ';uk='Використовувати платформний механізм вирішення СЛР'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.Скрыть = НЕ ВерсияПлатформыНеНиже8_3_14;
	ОписаниеПараметра.ЗначениеПоУмолчанию = (НЕ ЭтоФайловаяИБ И ВерсияПлатформыНеНиже8_3_14) ИЛИ ВерсияПлатформыНеНиже8_3_14_1831;
	ОписаниеПараметра.Описание = НСтр("ru='Использование платформенного механизма РасчетСистемЛинейныхУравнений. 
|Данная функция позволяет сократить время расчета.'
|;uk='Використання платформного механізму РасчетСистемЛинейныхУравнений.
|Ця функція дозволяє скоротити час розрахунку.'",ОбщегоНазначения.КодОсновногоЯзыка());

	#КонецОбласти

	#Область Отладка

	Родитель = "Отладка";

	//////////////////////////////////////////////////////////////////////////////
	// Общие параметры отладки

	// ОчищатьСтарыеДвижения
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ОчищатьСтарыеДвижения";
	ОписаниеПараметра.Наименование = НСтр("ru='Перед расчетом очищать старые расчетные движения';uk='Перед розрахунком очищати старі розрахункові рухи'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Скрыть = НЕ РежимОтладки;
	ОписаниеПараметра.Описание = НСтр("ru='Перед запуском расчета партий и себестоимости сначала очищает все расчетные движения в рассчитываемом периоде,
|сформированные ранее, т.е. выполняет эмуляцию первого запуска расчета в данном периоде.
|Может выполняться продолжительное время при большом количестве документов.
|Аналогичен следующему параметру, но используется для всего расчета.'
|;uk='Перед запуском розрахунку партій і собівартості спочатку очищає все розрахункові рухи в розраховуваному періоді, 
|сформовані раніше, тобто виконує емуляцію першого запуску розрахунку в даному періоді. 
|Може виконуватися тривалий час при великій кількості документів. 
|Аналогічний наступному параметру, але використовується для всього розрахунку.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// НеСохранятьРасчетныеДвижения
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "НеСохранятьРасчетныеДвижения";
	ОписаниеПараметра.Наименование = НСтр("ru='При проведении документа не сохранять старые расчетные движения';uk='При проведенні документу не зберігати старі розрахункові рухи'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Скрыть = НЕ РежимОтладки;
	ОписаниеПараметра.Описание = НСтр("ru='При проведении документа не сохранять расчетные движения партий и себестоимости,
|а также не сохранять заполненные поля партионной идентификации:
|Партия, АналитикаУчетаПартий, АналитикаФинансовогоУчета, НалоговоеНазначение, ДокументИсточник, РасчетНеЗавершен.
|Аналогичен предыдущему параметру, но используется для конкретного проводимого документа.'
|;uk='При проведенні документу не зберігати розрахункові рухи партій і собівартості, 
|а також не зберігати заповнені поля партіонної ідентифікації: 
|Партия, АналитикаУчетаПартий, АналитикаФинансовогоУчета, НалоговоеНазначение, ДокументИсточник, РасчетНеЗавершен.
|Аналогічний попередньому параметру, але використовується для конкретного проведеного документа.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// КонтролироватьРегистраторыВФЗ
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "КонтролироватьРегистраторыВФЗ";
	ОписаниеПараметра.Наименование = НСтр("ru='Контролировать корректность разбиения на порции';uk='Контролювати коректність розбиття на порції'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Скрыть = НЕ РежимОтладки;
	ОписаниеПараметра.Описание = НСтр("ru='Используется при записи движений в фоновых заданиях:
|проверяет, что все движения регистратора Х по регистру Y попали в одно фоновое задание записи.
|Если это не так, то, в лучшем случае, фоновое задание упадет с ошибкой превышения времени ожидания блокировки,
|а в худшем - затрет движения другого задания по этому регистру и регистратору.'
|;uk='Використовується при записі рухів в фонових завданнях: 
|перевіряє, що всі рухи реєстратора Х по регістру Y потрапили в одне фонове завдання запису. 
|Якщо це не так, то, в кращому випадку, фонове завдання впаде з помилкою перевищення часу очікування блокування, 
|а в гіршому - затре руху іншого завдання з цього регістру і реєстратору.'",ОбщегоНазначения.КодОсновногоЯзыка());

		//////////////////////////////////////////////////////////////////////////////
	// Параметры отладки расчета партий

	// ИгнорироватьНекорректныеПервичныеДвижения
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ИгнорироватьНекорректныеПервичныеДвижения";
	ОписаниеПараметра.Наименование = НСтр("ru='Игнорировать некорректные первичные движения документов';uk='Ігнорувати некоректні первинні рухи документів'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Скрыть = НЕ РежимОтладки;
    ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|позволяет не выполнять перепроведение документов, имеющих ошибки в первичных движениях по регистрам.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5: 
|дозволяє не виконувати перепроведення документів, що мають помилки в первинних рухах по регістрах.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// НеВыполнятьОптимизациюДанных
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "НеВыполнятьОптимизациюДанных";
	ОписаниеПараметра.Наименование = НСтр("ru='Не выполнять оптимизацию данных при расчете партий';uk='Не виконувати оптимізацію даних при розрахунку партій'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Скрыть = НЕ РежимОтладки;
    ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|позволяет пропустить этап оптимизации данных перед расчетом партий по цепочкам.
|Оптимизация уменьшает объем обрабатываемых данных за счет удаления узлов, которые заведомо не будут рассчитаны.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5: 
|дозволяє пропустити етап оптимізації даних перед розрахунком партій по ланцюжках. 
|Оптимізація зменшує обсяг оброблюваних даних за рахунок вилучення вузлів, які свідомо не будуть розраховані.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// НеВыполнятьОптимизациюЦепочек
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "НеВыполнятьОптимизациюЦепочек";
	ОписаниеПараметра.Наименование = НСтр("ru='Не выполнять оптимизацию цепочек при расчете партий';uk='Не виконувати оптимізацію ланцюжків при розрахунку партій'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Скрыть = НЕ РежимОтладки;
    ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|позволяет пропустить этап оптимизации нумерации узлов графа перед расчетом партий по цепочкам.
|Расчет цепочек будет выполняться как в партионном учете версии 2.1.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5: 
|дозволяє пропустити етап оптимізації нумерації вузлів графа перед розрахунком партій по ланцюжках. 
|Розрахунок ланцюжків буде виконуватися як в партіонному обліку версії 2.1.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// НеВыполнятьРасчетСебестоимости
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "НеВыполнятьРасчетСебестоимости";
	ОписаниеПараметра.Наименование = НСтр("ru='Не выполнять расчет себестоимости';uk='Не виконувати розрахунок собівартості'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Скрыть = НЕ РежимОтладки;
    ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|позволяет пропустить этапы расчета предварительной и фактической себестоимости.
|Полезно при отладке этапов, не зависящих от результатов расчета предварительной себестоимости.
|Фактическая себестоимость и так не оказывает влияния на другие этапы (внутри одного периода), т.к. рассчитывается в последнюю очередь.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5: 
|дозволяє пропустити етапи розрахунку попередньої і фактичної собівартості. 
|Корисно при налагодженні етапів, що не залежать від результатів розрахунку попередньої собівартості. 
|Фактична собівартість і так не впливає на інші етапи (всередині одного періоду), тому що розраховується в останню чергу.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// НеСдвигатьПериодПоОкончанииРасчета
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "НеСдвигатьПериодПоОкончанииРасчета";
	ОписаниеПараметра.Наименование = НСтр("ru='Не сдвигать период расчета по окончании расчета';uk='Не зсувати період розрахунку після закінчення розподілу'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Скрыть = НЕ РежимОтладки;
    ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|позволяет не выполнять изменение регистра сведений ""Задания к расчету себестоимости"" по окончании расчета.
|При этом расчет и запись движений будут выполнены, но факт выполнения расчета не будет зафиксирован в регистре заданий.
|Полезно при отладке расчета какого-то конкретного периода - каждый раз не надо вручную возвращать задания к расчету.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5: 
|дозволяє не виконувати зміну регістру відомостей ""Завдання до розрахунку собівартості"" після закінчення розподілу. 
|При цьому розрахунок і запис рухів будуть виконані, але факт виконання розрахунку не буде зафіксовано в регістрі завдань. 
|Корисно при налагодженні розрахунку якогось конкретного періоду - кожен раз не треба вручну повертати завдання до розрахунку.'",ОбщегоНазначения.КодОсновногоЯзыка());

		// РасчетОдногоЭтапа
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "РасчетОдногоЭтапа";
	ОписаниеПараметра.Наименование = НСтр("ru='Расчет только одного этапа';uk='Розрахунок тільки одного етапу'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Скрыть = Истина; // устанавливается программно
    ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме партионного учета версии 2.5:
|позволяет выполнить один из этапов расчета партий отдельно от других.
|Для этого расчетные кэши оборотов и остатков берут свои данные не из временной таблицы ВТКэш<имя регистра>
|(куда были бы помещены данные предыдущих этапов при нормальном ходе расчета партий), а из данных ИБ.'
|;uk='Використовується в механізмі партіонного обліку версії 2.5: 
|дозволяє виконати один з етапів розрахунку партій окремо від інших. 
|Для цього розрахункові кеші оборотів і залишків беруть свої дані не з тимчасової таблиці ВТКеш <ім''я регістра> 
|(куди були б поміщені дані попередніх етапів при нормальному ході розрахунку партій), а з даних ІБ.'",ОбщегоНазначения.КодОсновногоЯзыка());

		//////////////////////////////////////////////////////////////////////////////
	// Параметры отладки расчета себестоимости

	// ИсправлятьПустойРегистратор
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель = Родитель;
	ОписаниеПараметра.Имя = "ИсправлятьПустойРегистратор";
	ОписаниеПараметра.Наименование = НСтр("ru='Исправлять пустой регистратор в сформированных движениях';uk='Виправляти порожній реєстратор в сформованих рухах'",ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Скрыть = НЕ РежимОтладки;
	ОписаниеПараметра.Описание = НСтр("ru='Используется в механизме расчета себестоимости:
|если регистратор в каком-то наборе записей сформированных движений оказался не заполнен,
|(например, в качестве регистратора выбран документ, который не может иметь движений по данному регистру),
|то в качестве регистратора этого набора устанавливается документ расчета себестоимости.
|При этом запись движений будет выполнена успешно.'
|;uk='Використовується в механізмі розрахунку собівартості: 
|якщо реєстратор в якомусь наборі записів сформованих рухів виявився не заповнений, 
|(наприклад, в якості реєстратора вибраний документ, який не може мати рухів за даним регістром), 
|то в якості реєстратора цього набору встановлюється документ розрахунку собівартості. 
|При цьому запис рухів буде виконана успішно.'",ОбщегоНазначения.КодОсновногоЯзыка());

	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "ОтключитьРасчетСебестоимостиВПрошлыхПериодах";
	ОписаниеПараметра.Наименование 		  = НСтр("ru='Отключение выполнение этапа ""Распределение затрат и расчет себестоимости"" в периодах, предшествующих текущему.';uk='Відключення виконання етапу ""Розподіл витрат та розрахунок собівартості"" у періодах, що передують поточному.'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Описание =
		НСтр("ru='Используется в механизме партионного учета версии 2.5:
              |позволяет отключить выполнение этапа расчета себестоимости в прошлых периодах.
              |Будет выполнен расчет только текущего периода.
              |Задания к расчету себестоимости за прошлые периоды удаляться не будут - для расчета прошлых периодов достаточно просто отключить этот параметр.'
              |;uk='Використовується у механізмі партіонного обліку версії 2.5:
              |дозволяє вимкнути виконання етапу розрахунку собівартості у минулих періодах.
              |Буде виконано розрахунок лише поточного періоду.
              |Завдання до розрахунку собівартості за минулі періоди не видалятимуться - для розрахунку минулих періодів достатньо просто відключити цей параметр.'");
	
	#КонецОбласти

	Возврат ОписаниеПараметров;

КонецФункции

// Добавляет технологические параметры расчета в общую структуру параметров расчета.
//
Процедура УстановитьТехнологическиеПараметрыРасчета(ПараметрыРасчета) Экспорт

// Перенесем параметры операции в структура ПараметрыРасчета:
	//	- группы параметров становятся полями ПараметрыРасчета с типом "Структура"
	//	- сами параметры становятся элементами структур, соответствующим группам параметров.
	ОписаниеПараметров = ОписаниеПараметровОперацииЗакрытияМесяца();
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();

	// Группы параметров.
	Для Каждого ТекущаяСтрока Из ОписаниеГруппПараметровОперацииЗакрытияМесяца() Цикл
		ПараметрыРасчета.Вставить(ТекущаяСтрока.Имя, Новый Структура);
	КонецЦикла;

	// Значения параметров.
	Для Каждого КлючИЗначение Из ЗначенияПараметров Цикл

		СтрокаОписания = ОписаниеПараметров.Найти(КлючИЗначение.Ключ, "Имя");
		ЗначениеПараметра = КлючИЗначение.Значение;

		Если НЕ ЗначениеЗаполнено(СтрокаОписания.Родитель) Тогда
			ПараметрыРасчета.Вставить(КлючИЗначение.Ключ, ЗначениеПараметра);
		Иначе
			ПараметрыРасчета[СтрокаОписания.Родитель].Вставить(КлючИЗначение.Ключ, ЗначениеПараметра);
		КонецЕсли;

	КонецЦикла;

	УстановитьНенастраиваемыеТехнологическиеПараметрыРасчета(ПараметрыРасчета);

КонецПроцедуры

// Добавляет дополнительные технологические параметры расчета, значения которых нельзя изменять.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ИмяРегистра 
// * Регистратор 
// * Количество 
Функция УстановитьНенастраиваемыеТехнологическиеПараметрыРасчета(ПараметрыРасчета) Экспорт

// Дополнительные параметры отладки.
	// Вспомогательная таблица для хранения информации о том, сколько раз в фоновое задание записи передавалось сочетание регистр/регистратор.
	// Если в итоге получится хоть одна строка с "Количество > 1" - это критичная ошибка.
	РегистраторыВФЗ = Новый ТаблицаЗначений;
	РегистраторыВФЗ.Колонки.Добавить("ИмяРегистра");
	РегистраторыВФЗ.Колонки.Добавить("Регистратор");
	РегистраторыВФЗ.Колонки.Добавить("Количество");

	ПараметрыРасчета.Отладка.Вставить("РегистраторыВФЗ", РегистраторыВФЗ);
	
	Возврат РегистраторыВФЗ;
	
КонецФункции

#КонецОбласти

#Область Тестирование

Функция СлужебныйСимвол_РасчетПрерванДляОтладки() Экспорт
	Возврат "#РасчетПрерванДляОтладки";
КонецФункции

Функция ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета,
		ТекущийШагРасчета, ПрерватьРасчет = Истина)

	ПараметрыОтладки = ПараметрыРасчета.ПараметрыОтладки;

	Если НЕ ПараметрыОтладки.Свойство("ЭтапДляОтладки") Тогда
		Возврат Ложь; // расчет не запущен для отладки этапа расчета
	ИначеЕсли ПараметрыРасчета.РасчетныйПериод.НачалоПериода <> НачалоМесяца(ПараметрыОтладки.Период) Тогда
		Возврат Ложь; // отлаживается другой период
	ИначеЕсли НРег(ПараметрыРасчета.ПредставлениеЭтапа) <> НРег(ПараметрыОтладки.ЭтапДляОтладки) Тогда
		Возврат Ложь; // отлаживается другой этап
	ИначеЕсли ПрерватьРасчет
			И НРег(ТекущийШагРасчета) <> НРег(ПараметрыОтладки.ШагРасчетаДляОтладки) Тогда
		Возврат Ложь; // отлаживается другой шаг расчета
	КонецЕсли;

	Если ПрерватьРасчет Тогда

		РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакОкончанияРасчета(ПараметрыРасчета.ИдентификаторРасчетаДляЗакрытияМесяца);

		ВызватьИсключение СлужебныйСимвол_РасчетПрерванДляОтладки();
	КонецЕсли;

	Возврат Истина;

КонецФункции

#КонецОбласти

#Область Вспомогательные

// Возвращает число строк во временной таблице.
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров")
//
Функция РазмерВременнойТаблицы(КонтейнерМенеджераВТ,
		ИмяВременнойТаблицы) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	Запрос.Текст = "ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок
		|ИЗ
		|	%1 КАК Т";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяВременнойТаблицы);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.КоличествоСтрок;

КонецФункции

// Возвращает число строк во всех временных таблицах.
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.РазмерыВременныхТаблиц(ПараметрыРасчета, Истина)
//
Функция РазмерыВременныхТаблиц(КонтейнерМенеджераВТ,
		НеУчитыватьПустыеТаблицы = Ложь) Экспорт

	Результат = Новый Структура("ОбщийРазмерТаблиц", 0);
	Подзапросы = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	ШаблонТекстаЗапроса = "ВЫБРАТЬ
		|	""%1"" КАК ИмяТаблицы,
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	%1 КАК Т
		|";

	Для Каждого ВременнаяТаблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		Подзапросы.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ВременнаяТаблица.ПолноеИмя));
	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(Подзапросы) Тогда
		Возврат Результат;
	КонецЕсли;

	Запрос.Текст = СтрСоединить(Подзапросы, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ"
		+ Символы.ПС + Символы.ПС);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Если НЕ (НеУчитыватьПустыеТаблицы И Выборка.Количество = 0) Тогда
			Результат.Вставить(Выборка.ИмяТаблицы, Выборка.Количество);
			Результат.ОбщийРазмерТаблиц = Результат.ОбщийРазмерТаблиц
				+ Выборка.Количество;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает итог по указанному полю из указанной временной таблицы
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.АгрегатнаяФункцияПоляВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров", "Количество")
//
Функция АгрегатнаяФункцияПоляВременнойТаблицы(КонтейнерМенеджераВТ,
		ИмяВременнойТаблицы, ИмяПоля, ИмяФункции = "СУММА") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	Запрос.Текст = "ВЫБРАТЬ
		|	%1(Т.%2) КАК Результат
		|ИЗ
		|	%3 КАК Т";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяФункции, ИмяПоля, ИмяВременнойТаблицы);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.Результат;

КонецФункции

// Возвращает нужное количество строк из указанной временной таблицы
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров")
//
Функция ВыгрузитьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВременнойТаблицы,
		КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	Запрос.Текст = "ВЫБРАТЬ %1
		|	Т.*
		|ИЗ
		|	%2 КАК Т";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ?(КоличествоСтрок = Неопределено, "", "ПЕРВЫЕ "
		+ Формат(КоличествоСтрок, "ЧН=0; ЧГ=0")), ИмяВременнойТаблицы);

	Если ЗначениеЗаполнено(ТекстСортировки) Тогда
		Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	" + ТекстСортировки;
	КонецЕсли;

	ВыгруженнаяТаблица = Запрос.Выполнить().Выгрузить();

	Возврат ВыгруженнаяТаблица;

КонецФункции

// Выгружает в файл указанные временные таблицы
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыгрузитьВременныеТаблицы(ПараметрыРасчета)
//
Функция ВыгрузитьВременныеТаблицы(КонтейнерМенеджераВТ, НачатьСТаблицы = "",
		ЗакончитьТаблицей = "") Экспорт

	ВыгрузкаНачата = НЕ ЗначениеЗаполнено(НачатьСТаблицы);
	МенеджерВТ = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	Результат = Новый Структура;
	НомерТаблицы = 0;

	Для Каждого ВременнаяТаблица Из МенеджерВТ.Таблицы Цикл

		ВыгрузкаНачата = (ВыгрузкаНачата
			ИЛИ НРег(ВременнаяТаблица.ПолноеИмя) = НРег(НачатьСТаблицы));

		Если НЕ ВыгрузкаНачата Тогда
			Продолжить;
		КонецЕсли;

		НомерТаблицы = НомерТаблицы + 1;
		ИмяТаблицы = "Т" + Формат(НомерТаблицы, "ЧЦ=3; ЧВН=") + "_"
			+ ВременнаяТаблица.ПолноеИмя;
		Таблица = ВыгрузитьВременнуюТаблицу(МенеджерВТ, ВременнаяТаблица.ПолноеИмя);

		Результат.Вставить(ИмяТаблицы, Таблица);

		Если ЗначениеЗаполнено(ЗакончитьТаблицей)
				И НРег(ВременнаяТаблица.ПолноеИмя) = НРег(ЗакончитьТаблицей) Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

// Выгружает в файл нужное количество строк из указанной временной таблицы
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыгрузитьВременнуюТаблицуВФайл(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров", "C:\Temp\Таблица.mxl")
//
Функция ВыгрузитьВременнуюТаблицуВФайл(КонтейнерМенеджераВТ,
		ИмяВременнойТаблицы, ПолноеИмяФайла, КоличествоСтрок = Неопределено,
		ТекстСортировки = "") Экспорт

	ВыгруженнаяТаблица = ВыгрузитьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок, ТекстСортировки);

	ТекстОшибки = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(ВыгруженнаяТаблица, ПолноеИмяФайла);

	Возврат ТекстОшибки;

КонецФункции

// Выгружает в файл указанные временные таблицы
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыгрузитьВременныеТаблицыВФайл(ПараметрыРасчета, "C:\Temp\Отладка")
//
Функция ВыгрузитьВременныеТаблицыВФайл(КонтейнерМенеджераВТ, ИмяКаталога,
		ОчищатьКаталог = Истина, НачатьСТаблицы = "",
		ЗакончитьТаблицей = "") Экспорт

	ВыгрузкаНачата = НЕ ЗначениеЗаполнено(НачатьСТаблицы);
	МенеджерВТ = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	ПолноеИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);

	Попытка
		Если ОчищатьКаталог Тогда
			УдалитьФайлы(ПолноеИмяКаталога, "*.mxl");
		КонецЕсли;
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;

	НомерТаблицы = 0;

	Для Каждого ВременнаяТаблица Из МенеджерВТ.Таблицы Цикл

		ВыгрузкаНачата = (ВыгрузкаНачата
			ИЛИ НРег(ВременнаяТаблица.ПолноеИмя) = НРег(НачатьСТаблицы));

		Если НЕ ВыгрузкаНачата Тогда
			Продолжить;
		КонецЕсли;

		НомерТаблицы = НомерТаблицы + 1;

		ВыгрузитьВременнуюТаблицуВФайл(МенеджерВТ, ВременнаяТаблица.ПолноеИмя, ПолноеИмяКаталога
			+ "Т" + Формат(НомерТаблицы, "ЧЦ=3; ЧВН=") + "_"
			+ ВременнаяТаблица.ПолноеИмя + ".mxl");

		Если ЗначениеЗаполнено(ЗакончитьТаблицей)
				И НРег(ВременнаяТаблица.ПолноеИмя) = НРег(ЗакончитьТаблицей) Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

КонецФункции

// Выбирает нужное количество строк из указанной временной таблицы
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыбратьСтрокиВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров", 1)
//
Функция ВыбратьСтрокиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВременнойТаблицы,
		КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);

	Запрос.Текст = "ВЫБРАТЬ %1
		|	Т.*
		|ИЗ
		|	%2 КАК Т";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ?(НЕ ЗначениеЗаполнено(КоличествоСтрок), "", "ПЕРВЫЕ "
		+ Формат(КоличествоСтрок, "ЧГ=0")), ИмяВременнойТаблицы);

	Если ЗначениеЗаполнено(ТекстСортировки) Тогда
		Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	" + ТекстСортировки;
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();

	Возврат Выборка;

КонецФункции

// Подменяет текст переданного запроса на текст из указанного файла и возвращает результат запроса.
// Выполняет запрос с указанным текстом.
// 
// Параметры:
//	ИсточникДанных - Запрос, МенеджерВременныхТаблиц, Структура (в которой хранятся ПараметрыРасчета), Неопределено
//	ПутьКФайлуСТекстомЗапроса - Строка - полное имя текстового файла, содержащего текст запроса.
//
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСПроизвольнымТекстом(Запрос, "C:\Temp\Запрос.txt")
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСПроизвольнымТекстом(Запрос, "C:\Temp\Запрос.txt").Результат.Выгрузить()
//
Функция ВыполнитьЗапросСПроизвольнымТекстом(ИсточникДанных,
		ПутьКФайлуСТекстомЗапроса) Экспорт

	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Файл = Новый ТекстовыйДокумент;

	Результат = Новый Структура;

	Попытка

		Если ТипЗнч(ИсточникДанных) = Тип("Запрос") Тогда
			Запрос = ИсточникДанных;
			Результат.Вставить("СтарыйТекстЗапроса", Запрос.Текст);
		Иначе
			Запрос = Новый Запрос;
			Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда
				Запрос.МенеджерВременныхТаблиц = ИсточникДанных;
			ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("Структура") Тогда
				ИнициализироватьСвойстваЗапроса(Запрос, ИсточникДанных);
			КонецЕсли;
		КонецЕсли;

		Файл.Прочитать(ПутьКФайлуСТекстомЗапроса, КодировкаТекста.UTF8);

		Результат.Вставить("НовыйТекстЗапроса", Файл.ПолучитьТекст());
		Запрос.Текст = Результат.НовыйТекстЗапроса;

		Результат.Вставить("Результат", Запрос.Выполнить());

	Исключение

		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);

	КонецПопытки;

	Если Результат.Свойство("СтарыйТекстЗапроса") Тогда // был передан запрос
		ИсточникДанных.Текст = Результат.СтарыйТекстЗапроса;
	КонецЕсли;

	Результат.Вставить("Время", (ТекущаяУниверсальнаяДатаВМиллисекундах()
		- ВремяНачала) / 1000);

	Возврат Результат;

КонецФункции

// Добавляет колонку для нумерации строк партий.
//
// Параметры:
// 	Таблица - ТаблицаЗначений -
// 	ИмяПоляНомераСтроки - Строка -
Процедура ДобавитьКолонкуДляНумерацииСтрокПартий(Таблица, ИмяПоляНомераСтроки = "") Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки) Тогда
		ИмяПоляНомераСтроки = ИмяКолонкиДляНумерацииПоУмолчанию();
	КонецЕсли;

	Если Таблица.Колонки.Найти(ИмяПоляНомераСтроки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяПоляНомераСтроки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
	КонецЕсли;

КонецПроцедуры

// Проверяет наличие изменений в табличных частях документа.
// Табличная часть документа-объекта сворачивается по суммовым/количественным реквизитам
// и сверяется с табличной частью документа в ИБ.
// Если в табличной части документа есть реквизит-дата, то определяется его минимальное значение в измененных строках.
// При этом строки, в которых дата не заполнена, на измененность не проверяются.
// 
// Параметры:
//	ДокументОбъект - ДокументОбъект -
//	ОписаниеТабличныхЧастей - Структура
//		Ключ - имя табличной части
//		Значение - Структура с обязательными ключами
//			"Ресурсы" - в строковом значении этого ключа через запятую перечисляются суммовые и количественные реквизиты табличной части
//			"Дата"    - в строковом значении этого ключа указывается имя реквизита с датой (если даты нет, то значение не заполняется).
//
// Возвращаемое значение:
//	Структура с ключами
//		ЕстьИзменения - Булево - признак наличия изменений в табличной части
//		Дата - Дата или Неопределено - минимальное значение реквизита даты в измененных строка табличной части.
//
Функция ПериодыИзмененияТабличныеЧастиДокумента(ДокументОбъект,
		ОписаниеТабличныхЧастей) Экспорт

	Результат                  = Новый Структура;
	ОбщийМинимальныйПериод     = Неопределено;
	ОбщийМинимальныйПериодДень = Неопределено;
	МетаДокумент               = ДокументОбъект.Метаданные();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);

	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	%ПоляТаблицы
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&Таблица КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Проведен,
	|	%ПоляСвернутые
	|ПОМЕСТИТЬ ВТИзменения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Проведен,
	|		%ПоляТаблицы
	|	ИЗ
	|		ВТТабличнаяЧасть КАК Т
	|	ГДЕ
	|		//%ОтборДанныхОбъекта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка.Проведен КАК Проведен,
	|		%ПоляСМинусом
	|	ИЗ
	|		%ТаблицаДокумента КАК Т
	|	ГДЕ
	|		Т.Ссылка = &Ссылка
	|		И //%ОтборДанныхИБ
	|	) КАК Т
	|%Группировка
	|%УсловиеОтбора
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(%Дата) КАК Результат
	|ИЗ
	|	ВТИзменения КАК Т
	|ГДЕ
	|	%Дата <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	|";

	Для Каждого КлючИЗначение Из ОписаниеТабличныхЧастей Цикл

	// Подготовим тексты фрагментов запроса.
		СтрокаИзмерения = "";
		СтрокаРесурсы = "";
		СтрокаРесурсыСумма = "";
		СтрокаРесурсыОтбор = "";
		СтруктураРесурсы = Новый Структура(?(ЗначениеЗаполнено(КлючИЗначение.Значение.Ресурсы), КлючИЗначение.Значение.Ресурсы, ""));
		СтрокаДата = ?(ЗначениеЗаполнено(КлючИЗначение.Значение.Дата), "Т."
			+ КлючИЗначение.Значение.Дата, "Неопределено");

		Для Каждого МетаРеквизит Из МетаДокумент.ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты Цикл

			Если МетаРеквизит.Тип = Новый ОписаниеТипов("УникальныйИдентификатор")
					Или МетаРеквизит.Тип = Новый ОписаниеТипов("Строка") Тогда
				Продолжить;
			КонецЕсли;

			Если СтруктураРесурсы.Свойство(МетаРеквизит.Имя) Тогда
				СтрокаРесурсы = СтрокаРесурсы + ?(СтрокаРесурсы = "", "", ",
					|	") + "Т." + МетаРеквизит.Имя;
				СтрокаРесурсыСумма = СтрокаРесурсыСумма
					+ ?(СтрокаРесурсыСумма = "", "", ",
					|	") + "СУММА(Т." + МетаРеквизит.Имя + ") КАК " + МетаРеквизит.Имя;
				СтрокаРесурсыОтбор = СтрокаРесурсыОтбор
					+ ?(СтрокаРесурсыОтбор = "", "	", "
					|	ИЛИ ") + "СУММА(Т." + МетаРеквизит.Имя + ") <> 0";
			Иначе
				СтрокаИзмерения = СтрокаИзмерения + ?(СтрокаИзмерения = "", "", ",
					|") + "	Т." + МетаРеквизит.Имя;
			КонецЕсли;

		КонецЦикла;

		СтрокаПоля = СтрокаИзмерения + ?(СтрокаИзмерения = ""
			ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрокаРесурсы;
		СтрокаПоляСМинусом = СтрокаИзмерения + ?(СтрокаИзмерения = ""
			ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрЗаменить(СтрокаРесурсы, "Т.", "-Т.");
		СтрокаПоляСвернутые = СтрокаИзмерения + ?(СтрокаИзмерения = ""
			ИЛИ СтрокаРесурсыСумма = "", "", ",
			|	") + СтрокаРесурсыСумма;
		СтрокаТаблицаДокумента = "Документ." + МетаДокумент.Имя + "."
			+ КлючИЗначение.Ключ;

		СтрокаПоляГруппировка = ?(СтрокаИзмерения = "", "", "СГРУППИРОВАТЬ ПО"
			+ Символы.ПС + "Т.Проведен," + Символы.ПС + СтрокаИзмерения);

			// Сформируем текст запроса и выполним запрос.
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Таблица", ДокументОбъект[КлючИЗначение.Ключ].Выгрузить());

		Запрос.Текст = ШаблонЗапроса;

		ТекстОтборДанных = "";
		Если КлючИЗначение.Значение.Свойство("Отбор") Тогда

			Для Каждого ТекОтбор Из КлючИЗначение.Значение.Отбор Цикл

				ЛевоеЗначение = ТекОтбор.Ключ;
				ВидСравненияЗапроса = ТекОтбор.Значение.ВидСравнения;
				ПравоеЗначение = ТекОтбор.Значение.ПравоеЗначение;

				ТекстОтборДанных = ТекстОтборДанных
					+ ?(ПустаяСтрока(ТекстОтборДанных), "", " И ") + "(" + ЛевоеЗначение
					+ ") " + ВидСравненияЗапроса + " (" + ПравоеЗначение + ")";

			КонецЦикла;

		КонецЕсли;

		Если ЗначениеЗаполнено(ТекстОтборДанных) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборДанныхОбъекта", ТекстОтборДанных);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборДанныхИБ", ТекстОтборДанных);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборДанныхОбъекта", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборДанныхИБ", "ИСТИНА");
		КонецЕсли;

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляТаблицы", СтрокаПоля);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСМинусом", СтрокаПоляСМинусом);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТаблицаДокумента", СтрокаТаблицаДокумента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСвернутые", СтрокаПоляСвернутые);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Группировка", СтрокаПоляГруппировка);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеОтбора", ?(СтрокаРесурсыОтбор = "", "", "ИМЕЮЩИЕ"
			+ Символы.ПС + СтрокаРесурсыОтбор));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Дата", СтрокаДата);

		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);

		Выборка.Следующий();

		Если Выборка.Результат <> Null Тогда // найдены отличия
			Результат.Вставить(КлючИЗначение.Ключ, НачалоМесяца(Выборка.Результат));

			Если ЗначениеЗаполнено(ОбщийМинимальныйПериод) Тогда
				ОбщийМинимальныйПериод = Мин(ОбщийМинимальныйПериод, НачалоМесяца(Выборка.Результат));
			Иначе
				ОбщийМинимальныйПериод = НачалоМесяца(Выборка.Результат);
			КонецЕсли;

			Если ЗначениеЗаполнено(ОбщийМинимальныйПериодДень) Тогда
				ОбщийМинимальныйПериодДень = Мин(ОбщийМинимальныйПериодДень, Выборка.Результат);
			Иначе
				ОбщийМинимальныйПериодДень = Выборка.Результат;
			КонецЕсли;

		Иначе
			Результат.Вставить(КлючИЗначение.Ключ, Неопределено);
		КонецЕсли;

	КонецЦикла;

	Если ЗначениеЗаполнено(ОбщийМинимальныйПериод) Тогда
		ОбщийМинимальныйПериод = НачалоМесяца(ОбщийМинимальныйПериод);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбщийМинимальныйПериодДень) Тогда
		ОбщийМинимальныйПериодДень = ОбщийМинимальныйПериодДень;
	КонецЕсли;

	Результат.Вставить("ОбщийМинимальныйПериод", ОбщийМинимальныйПериод);
	Результат.Вставить("ОбщийМинимальныйПериодДень", ОбщийМинимальныйПериодДень);

	Возврат Результат;

КонецФункции

// Метод блокирует записи в регистре ЗаданияКРасчетуСебестоимости в диапазоне номера заданий: 0 ... НомерЗаданияДоРасчета.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Верхняя граница диапазона блокировки.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета) Экспорт

	Блокировка = Новый БлокировкаДанных;

	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРасчетуСебестоимости");
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

	Блокировка.Заблокировать();

КонецПроцедуры

// Сохраняет в менеджер временных таблиц записи регистра Задания к расчету себестоимости.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Выбираются записи у которых номер задания <= НомерЗаданияДоРасчета.
//	ОрганизацииКРасчету - Массив - Перечень организаций, по которым сохраняются задания.
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - Содержит в себе ВТ "ИсходныеЗадания".
//
Функция СформироватьВТЗаданияДоРасчета(НомерЗаданияДоРасчета,
		ОрганизацииКРасчету) Экспорт

	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Задания.Месяц,
		|	Задания.НомерЗадания,
		|	Задания.Организация,
		|	Задания.Документ
		|ПОМЕСТИТЬ ИсходныеЗадания
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
		|ГДЕ
		|	Задания.НомерЗадания <= &НомерЗадания
		|	И Задания.Организация В (&МассивОрганизаций)
		|");

	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("НомерЗадания", НомерЗаданияДоРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(ОрганизацииКРасчету));
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;

	Запрос.Выполнить();

	Возврат ВременныеТаблицы;

КонецФункции

// Возвращает количество движений документов по указанному регистру.
//
Функция КоличествоДвиженийДокументаПоРегистру(Регистраторы,
		ПолноеИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистраторы", ОбщегоНазначенияУТКлиентСервер.Массив(Регистраторы));

	Запрос.Текст = "ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	%1 КАК Т
		|ГДЕ
		|	Т.Регистратор В (&Регистраторы)";

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ПолноеИмяРегистра);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.Количество;

КонецФункции

#КонецОбласти

#КонецОбласти
