

#Область ПрограммныйИнтерфейс

// Возвращает структуру значений параметров для подстановки в текстовые поля, используемых в финансовых отчетах.
//
// Параметры:
//  ИсключаяСкобки - Булево - Если истина, то из имени и представления параметра будут исключены ограничивающие квадратные скобки.
//  		Значение по умолчанию Ложь. 
//  КодЯзыка - Строка - Код языка. По умолчанию пустая строка - соответствует языку текущего пользователя.
//  		Задается при необходимости получения представления для конкретного языка, например, для основного языка конфигурации.
//
// Возвращаемое значение:
//  Структура - Структура параметров, используемых в финансовых отчетах:
//   *КомплектОтчетов - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *ВидОтчета - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *ТекущаяДатаИВремя - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *ПериодОтчетности - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *КонечнаяДатаПериодаОтчета - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки.
//   *Организация - Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//     **Имя - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//     **Представление - Строка - Представление переменной, может заключаться в квадратные скобки./
//
Функция ПеременныеФинансовыхОтчетов(ИсключаяСкобки = Ложь, КодЯзыка = "") Экспорт
	
	Результат = Новый Структура;
	
	ШаблонПеременной = ?(ИсключаяСкобки, "%1", "[%1]");
	
	
	ИмяПеременной = "КомплектОтчетов";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПеременной);
	ПредставлениеПеременной = НСтр("ru='Комплект отчетов';uk='Комплект звітів'",КодЯзыка);
	ЗначениеИПредставление = ОписаниеПеременной(Имя, ПредставлениеПеременной);
	Результат.Вставить(ИмяПеременной, ЗначениеИПредставление);
	
	
	ИмяПеременной = "ВидОтчета";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПеременной);
	ПредставлениеПеременной = НСтр("ru='Вид отчета';uk='Вид звіту'",КодЯзыка);
	ЗначениеИПредставление = ОписаниеПеременной(Имя, ПредставлениеПеременной);
	Результат.Вставить(ИмяПеременной, ЗначениеИПредставление);
	
	
	ИмяПеременной = "ТекущаяДатаИВремя";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПеременной);
	ПредставлениеПеременной = НСтр("ru='Текущая дата и время';uk='Поточна дата і час'",КодЯзыка);
	ЗначениеИПредставление = ОписаниеПеременной(Имя, ПредставлениеПеременной);
	Результат.Вставить(ИмяПеременной, ЗначениеИПредставление);
	
	
	ИмяПеременной = "ПериодОтчетности";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПеременной);
	ПредставлениеПеременной = НСтр("ru='Период отчетности';uk='Період звітності'",КодЯзыка);
	ЗначениеИПредставление = ОписаниеПеременной(Имя, ПредставлениеПеременной);
	Результат.Вставить(ИмяПеременной, ЗначениеИПредставление);
	
	
	ИмяПеременной = "КонечнаяДатаПериодаОтчета";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПеременной);
	ПредставлениеПеременной = НСтр("ru='Конечная дата периода отчета';uk='Кінцева дата періоду звіту'",КодЯзыка);
	ЗначениеИПредставление = ОписаниеПеременной(Имя, ПредставлениеПеременной);
	Результат.Вставить(ИмяПеременной, ЗначениеИПредставление);
	
	
	ИмяПеременной = "Организация";
	Имя = СтрШаблон(ШаблонПеременной, ИмяПеременной);
	ПредставлениеПеременной = НСтр("ru='Организация';uk='Організація'",КодЯзыка);
	ЗначениеИПредставление = ОписаниеПеременной(Имя, ПредставлениеПеременной);
	Результат.Вставить(ИмяПеременной, ЗначениеИПредставление);
	
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура - Структура, хранящая нелокализируемое хранимое в базе данных значение и локализируемое представление:
//  * Имя   - Строка - Идентификатор параметра. Не локализуется, хранится в базе данных. Например, "[ТекущаяДатаИВремя]".
//  * Представление - Строка - Представление параметра.
// 
Функция ОписаниеПеременной(Имя = "", Представление = "")
	Возврат Новый Структура("Имя, Представление", Имя, Представление);
КонецФункции

// Возвращает упорядоченный массив значений переменных для подстановки в текстовые поля, используемых в финансовых отчетах.
//
// Параметры:
//  КодЯзыка         - Строка       - Код языка. По умолчанию пустая строка - соответствует языку текущего пользователя.
//                                    Задается при необходимости получения представления для конкретного языка, например, для основного языка конфигурации.
//
// Возвращаемое значение:
//  Массив из см. НовыйСтруктураПеременнойФинансовыхОтчетов - Упорядоченный массив параметров,
//  используемых в финансовых отчетах для подстановки в текстовые поля.
//
Функция УпорядоченныеПеременныеФинансовыхОтчетов(КодЯзыка = "") Экспорт
	
	Результат = Новый Массив;
	
	ПеременныеОтчетов = ПеременныеФинансовыхОтчетов(Истина, КодЯзыка);
	
	ЗначениеИПредставление = ОписаниеПеременной(ПеременныеОтчетов.КомплектОтчетов.Имя,
		ПеременныеОтчетов.КомплектОтчетов.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	
	ЗначениеИПредставление = ОписаниеПеременной(ПеременныеОтчетов.ВидОтчета.Имя,
		ПеременныеОтчетов.ВидОтчета.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	
	ЗначениеИПредставление = ОписаниеПеременной(ПеременныеОтчетов.ТекущаяДатаИВремя.Имя,
		ПеременныеОтчетов.ТекущаяДатаИВремя.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	
	ЗначениеИПредставление = ОписаниеПеременной(ПеременныеОтчетов.ПериодОтчетности.Имя,
		ПеременныеОтчетов.ПериодОтчетности.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	
	ЗначениеИПредставление = ОписаниеПеременной(ПеременныеОтчетов.КонечнаяДатаПериодаОтчета.Имя,
		ПеременныеОтчетов.КонечнаяДатаПериодаОтчета.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	
	ЗначениеИПредставление = ОписаниеПеременной(ПеременныеОтчетов.Организация.Имя,
		ПеременныеОтчетов.Организация.Представление);
	Результат.Добавить(ЗначениеИПредставление);
	
	
	Возврат Результат;
	
КонецФункции

//++ НЕ УТ

// Возвращает индекс новой строки с учетом наличия в коллекции элемента отчета "ИтогПоГруппе".
//
//	Параметры:
//		СтрокиДерева - ДанныеФормыКоллекцияЭлементовДерева - коллекция строк в которой необходимо определить индекс вставки новой строки.
//
//	Возвращаемое значение:
//		Число - индекс для вставки новой строки.
//
Функция ИндексНовойСтроки(СтрокиДерева) Экспорт
	
	Индекс = -1;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ВидЭлемента = ВидЭлемента("ИтогПоГруппе")
			И НЕ СтрокаДерева.ЭтоСвязанный Тогда
			Индекс = СтрокиДерева.Индекс(СтрокаДерева);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Индекс = -1 ИЛИ Индекс = 0 И СтрокиДерева.Количество() > 1 Тогда
		Индекс = СтрокиДерева.Количество();
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Процедура заполняет строку списка или дерева элементов отчета
// дополнительными реквизитами.
//
// Параметры:
//  Параметры - структура - поля структуры:
//		Источник - структура - источник заполнения 
//		СтрокаПриемник - ДанныеФормыСтрокаДерева - строка, которую заполняем
//		АдресЭлементаВХранилище - строка - адрес хранилища элемента
//		Поле - ДанныеФормыКоллекция - для поиска строки, если приемник - идентификатор строки.
//
Процедура ЗаполнитьСтрокуДерева(Параметры) Экспорт
	
	Источник = Параметры.Источник;
	СтрокаПриемник = Параметры.СтрокаПриемник;
	АдресЭлементаВХранилище = Параметры.АдресЭлементаВХранилище;
	ДополнительныеРеквизитыСтроки = Параметры.ДополнительныеРеквизитыСтроки;
	Поле = Параметры.Поле;
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Форма возвращает актуальные реквизиты
	Если ТипЗнч(СтрокаПриемник) = Тип("Число") Тогда
		СтрокаПриемник = Поле.НайтиПоИдентификатору(СтрокаПриемник);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, Источник);
	
	Если Не ЗначениеЗаполнено(АдресЭлементаВХранилище) Тогда
		ДопРеквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
							Источник,
							ДополнительныеРеквизитыСтроки);
	Иначе
		// Но актуальные значения дополнительных реквизитов формируются на сервере
		// в ПередЗаписьюНаСервере, соответственно находятся в хранилище.
		ДопРеквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
							АдресЭлементаВХранилище,
							ДополнительныеРеквизитыСтроки);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, ДопРеквизиты);
	Если ЗначениеЗаполнено(Источник.СвязанныйЭлемент) Тогда
		ДопРеквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
							Источник.СвязанныйЭлемент,
							Параметры.ДополнительныеРеквизитыСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ДопРеквизиты,,"КодСтрокиОтчета,Примечание");
		
	ИначеЕсли СтрокаПриемник.ВидЭлемента = ВидЭлемента("МонетарныйПоказатель") Тогда
		СтрокаПриемник.СчетПоказательИзмерение = СтрокаПриемник.СчетПланаСчетов;
		
	ИначеЕсли СтрокаПриемник.ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель") Тогда
		СтрокаПриемник.СчетПоказательИзмерение = ДопРеквизиты.НемонетарныйПоказатель;
		
	КонецЕсли;
	
КонецПроцедуры


// Функция возвращает структуру реквизитов для помещения во временное хранилище
// 
// Возвращаемое значение:
// 	Структура - структура со свойствами:
// 	*ИсточникиЗначений - ТаблицаЗначений -:
// 	  **Источник - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	  **ДобавляемыеЗначенияДокумента - Булево -
// 	*РасшифровкаПолейОтбораЭО - ТаблицаЗначений -:
// 	  **ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	  **КлючЭлементаОформления - УникальныйИдентификатор - 
// 	  **ИмяПоляОтбора - Строка - 
// 	  **ИмяРесурса - Строка -
// 	*ОформляемыеКолонки - ТаблицаЗначений -:
// 	  **ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	  **КлючЭлементаОформления - УникальныйИдентификатор -
// 	*ОформляемыеСтроки  - ТаблицаЗначений -:
// 	  **ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	  **КлючЭлементаОформления - УникальныйИдентификатор - 
// 	*ЭлементыОформления - ТаблицаЗначений -:
// 	  **Оформление - ХранилищеЗначения -
// 	  **Условие - ХранилищеЗначения -
// 	  **ТипОформляемойОбласти - ПеречислениеСсылка.ТипыОформляемыхОбластейБюджетныхОтчетов -
// 	  **КлючЭлементаОформления - УникальныйИдентификатор - 
// 	*ДополнительныеПоля - ТаблицаЗначений -:
// 	  **Реквизит - Строка -
// 	  **Наименование - Строка - 
// 	  **ВыводитьЗаголовок - Булево - 
// 	  **ВОтдельнойКолонке - Булево -
// 	*ЭлементыТаблицы - ТаблицаЗначений -:
// 	  **Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	  **Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	  **Элемент - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	*ОперандыФормулы - ТаблицаЗначений - таблица операндов формулы:
// 	  **Идентификатор - Строка - 
// 	  **Операнд - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	*РеквизитыВидаЭлемента - ТаблицаЗначений -:
// 	  **Реквизит - ПланВидовХарактеристикСсылка.РеквизитыЭлементовФинансовыхОтчетов -
// 	  **Значение - Характеристика.РеквизитыЭлементовФинансовыхОтчетов -
// 	*СвязанныйЭлемент - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	*ЗначениеАналитики - Характеристика.АналитикиСтатейБюджетов -
// 	*ЕстьНастройки - Булево -
// 	*ДополнительныйОтбор - ХранилищеЗначения -
// 	*Комментарий - Строка -
// 	*ОбратныйЗнак - Булево -
// 	*НаименованиеДляПечати - Строка -
// 	*ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
// 	*Код - Число -
// 	*Наименование - Неопределено -
// 	*Владелец - СправочникСсылка.ВидыБюджетов -
// 				- СправочникСсылка.ВидыФинансовыхОтчетов - 
// 	*Ссылка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
//
Функция СтруктураЭлементаОтчета() Экспорт
	
	Результат = Новый Структура;
	// Стандартные реквизиты
	Результат.Вставить("Ссылка");
	Результат.Вставить("Владелец");
	Результат.Вставить("Наименование");
	Результат.Вставить("Код");
	
	//Реквизиты
	Результат.Вставить("ВидЭлемента");
	Результат.Вставить("НаименованиеДляПечати");
	Результат.Вставить("ОбратныйЗнак");
	Результат.Вставить("Комментарий");
	Результат.Вставить("ДополнительныйОтбор");
	Результат.Вставить("ЕстьНастройки");
	Результат.Вставить("ЗначениеАналитики");
	Результат.Вставить("СвязанныйЭлемент");
	
	// Табличные части
	Результат.Вставить("РеквизитыВидаЭлемента");
	Результат.Вставить("ОперандыФормулы");
	Результат.Вставить("ЭлементыТаблицы");
	Результат.Вставить("ДополнительныеПоля");
	
	Результат.Вставить("ЭлементыОформления");
	Результат.Вставить("ОформляемыеСтроки");
	Результат.Вставить("ОформляемыеКолонки");
	Результат.Вставить("РасшифровкаПолейОтбораЭО");
	Результат.Вставить("ИсточникиЗначений");
	
	Возврат Результат;
	
КонецФункции

//-- НЕ УТ

// Возвращает родителя переданной строки в зависимости от типа.
//
//	Параметры:
//		СтрокаДерева - ДанныеФормыЭлементДерева, СтрокаДереваЗначений - строка дерева элементов отчета.
//
//	Возвращаемое значение:
//		ДанныеФормыЭлементДерева - Родитель строки,
//		СтрокаДереваЗначений - Родитель строки.
//
Функция РодительСтроки(СтрокаДерева) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева")
		ИЛИ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыДерево") Тогда
		РодительСтроки = СтрокаДерева.ПолучитьРодителя();
	Иначе
		РодительСтроки = СтрокаДерева.Родитель;
	КонецЕсли;
	
	Возврат РодительСтроки;
	
КонецФункции

#КонецОбласти

//++ НЕ УТ

#Область СлужебныеПроцедурыИФункции

Функция ВидЭлемента(ИмяВидаЭлемента)
	
	Возврат ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета."+ИмяВидаЭлемента);
	
КонецФункции

#КонецОбласти

//-- НЕ УТ