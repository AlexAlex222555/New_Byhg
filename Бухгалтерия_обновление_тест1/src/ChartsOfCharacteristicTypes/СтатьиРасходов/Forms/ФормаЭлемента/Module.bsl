
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Подсистема запрета редактирования ключевых реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЭтоУТ = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	БазоваяВерсия = ПолучитьФункциональнуюОпцию("БазоваяВерсия");
	
	
	//++ НЕ УТ
	Элементы.НадписьНастроитьПравилаРаспределения.Видимость = 
		ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиРаспределения);
	//-- НЕ УТ
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Элементы.ГруппаСтраницаРеглУчет.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоУТ Тогда
		Элементы.КорреспондирующийСчет.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоУТ Тогда
		ЭлементСписка = Элементы.ВидДеятельностиРасходов.СписокВыбора.НайтиПоЗначению(Перечисления.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность); 
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ВидДеятельностиРасходов.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
	Если БазоваяВерсия Тогда
		Элементы.ВариантРаспределенияРасходовРегл.Заголовок = НСтр("ru='Вариант распределения';uk='Варіант розподілу'");
		Элементы.ВариантРаспределенияРасходовУпр.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы
	 ИЛИ Объект.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы Тогда
		Элементы.КонтролироватьЗаполнениеАналитики.Видимость = Ложь;
    КонецЕсли;
    
    УстановитьВидимостьДопФлаговТиповЗначенийАналитики();
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	//++ НЕ УТ
	НастройкаСчетовУчетаКлиент.ЗаконченаНастройкаСчетовУчета(ЭтотОбъект, ИмяСобытия, Параметр);
	//-- НЕ УТ
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();

	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.ВариантРаспределенияРасходовУпр = ВариантРаспределенияРасходовУпр;
	Если Не ЗначениеЗаполнено(Объект.ВариантРаспределенияРасходовУпр) Тогда
		Объект.ВариантРаспределенияРасходовУпр = Объект.ВариантРаспределенияРасходовРегл;
	КонецЕсли;
	
	Объект.ПравилоРаспределенияРасходовУпр = ПравилоРаспределенияРасходовУпр;
	Если Не ЗначениеЗаполнено(Объект.ПравилоРаспределенияРасходовУпр)
		И Объект.ВариантРаспределенияРасходовУпр = Объект.ВариантРаспределенияРасходовРегл Тогда
		Объект.ПравилоРаспределенияРасходовУпр = Объект.ПравилоРаспределенияРасходовРегл;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Не ПустаяСтрока(ТипЗначения) Тогда
		Если ТипЗначения = "ДокументСсылка.ЗаказКлиента"
			ИЛИ ТипЗначения = "ДокументСсылка.РеализацияТоваровУслуг"
		Тогда
			ТекущийОбъект.АналитикаРасходовЗаказРеализация = Истина;
			ТекущийОбъект.ТипЗначения = 
				Новый ОписаниеТипов("ДокументСсылка.АктВыполненныхРабот,
				|ДокументСсылка.РеализацияТоваровУслуг,
				|ДокументСсылка.РеализацияУслугПрочихАктивов,
				|ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента,
				|ДокументСсылка.ЗаказКлиента");
		//++ НЕ УТ
		ИначеЕсли ТипЗначения = "СправочникСсылка.ОбъектыСтроительства22" Тогда
			ТекущийОбъект.АналитикаРасходовЗаказРеализация = Ложь;
			ТекущийОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ОбъектыЭксплуатации");
		//-- НЕ УТ
		Иначе
			ТекущийОбъект.АналитикаРасходовЗаказРеализация = Ложь;
			ТекущийОбъект.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
		КонецЕсли;
	КонецЕсли;
	
	
	ТекущийОбъект.ДоступныеХозяйственныеОперации.Очистить();
	Для Каждого ЭлементСписка Из ДоступныеХозяйственныеОперации Цикл
		Если ЭлементСписка.Пометка Тогда
			НоваяСтрока = ТекущийОбъект.ДоступныеХозяйственныеОперации.Добавить();
			НоваяСтрока.ХозяйственнаяОперация = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПолеТипЗначения = Элементы.ТипЗначения;
	Если ПолеТипЗначения.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено
		И Не Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы
		И Не ТипЗначения = "СправочникСсылка.ПрочиеАктивыПассивы" Тогда
		ТекстСообщения = НСтр("ru='В поле ""Аналитика расходов"" не выбрано ни одного вида аналитики';uk='У полі ""Аналітика витрат"" не вибрано жодного виду аналітики'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			, // Ключ данных
			"ТипЗначения",
			, // Путь к данным
			Отказ);
	КонецЕсли;
		
	ПроверяемыеСтатьи = Новый Массив;
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы);
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.НачисленныйНДСПриВыкупеМногооборотнойТары);
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости);
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж);
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам);
    ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницыНеоперационные);
    ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ЗатратыПриПокупкеИПродажеИностраннойВалюты);
    ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РасходыПриПерерасчетеПропорциональногоНДС);
	Если ПроверяемыеСтатьи.Найти(Объект.Ссылка) <> Неопределено
	 И ВариантРаспределенияРасходовУпр <> Перечисления.ВариантыРаспределенияРасходов.ПустаяСсылка()
	 И ВариантРаспределенияРасходовУпр <> Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
		ТекстСообщения = НСтр("ru='Необходимо выбрать вариант распределения в упр. учете ""На финансовый результат""';uk='Необхідно вибрати варіант розподілу в упр. обліку ""На фінансовий результат""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"ВариантРаспределенияРасходовУпр",
			,
			Отказ);
	КонецЕсли;
	
	//++ НЕ УТ
	НастройкаСчетовУчета.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	//-- НЕ УТ
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если НЕ Объект.ОграничитьИспользование Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоступныеХозяйственныеОперации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_СтатьяРасходов", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТ
	НастройкаСчетовУчета.ПриЗаписиОбъектаНастройкиСчетовУчета(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидДеятельностиРасходовПриИзменении(Элемент)
	
	ВидДеятельностиРасходовПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаспределенияРасходовПриИзмененииРегл(Элемент)
	
	ВариантРаспределенияРасходовРеглПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаспределенияРасходовПриИзмененииУпр(Элемент)
	
	УправлениеПараметрамиВыбора(ЭтаФорма, "ВариантРаспределенияРасходовУпр");
	УправлениеЭлементамиФормы();

КонецПроцедуры

&НаКлиенте
Процедура ТипРасходовПриИзменении(Элемент)
	
	ТипРасходовПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)
	
	ТипЗначенияПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастроитьПравилаРаспределенияНажатие(Элемент)
	
	//++ НЕ УТ	
	Отбор = Новый Структура("СтатьяРасходов", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.НастройкиРаспределения.ФормаСписка", Новый Структура("Отбор", Отбор));
	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоРаспределенияРасходовУпрПриИзменении(Элемент)
	
	Элементы.ПравилоРаспределенияРасходовУпр.ОтметкаНезаполненного = 
		
		Не ЗначениеЗаполнено(ПравилоРаспределенияРасходовУпр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьИспользованиеПриИзменении(Элемент)
	
	Элементы.ДоступныеХозяйственныеОперации.Доступность = Объект.ОграничитьИспользование;
	
	Если Не Объект.ОграничитьИспользование Тогда
		Для каждого ЭлементСписка Из ДоступныеХозяйственныеОперации Цикл
			Если ЭлементСписка.Пометка Тогда
				ЭлементСписка.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСчетовУчетаРасходовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	//++ НЕ УТ
	НастройкаСчетовУчетаКлиент.ОбработкаНавигационнойСсылкиНастройкаСчетовУчета(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	//-- НЕ УТ
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСчетаУчета(Элемент)
	
	//++ НЕ УТ
	НастройкаСчетовУчетаКлиент.ПриИзмененииСчетаУчета(Элемент, ЭтотОбъект);
	//-- НЕ УТ
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЛокализации(Элемент)
	
	СтатьиРасходовКлиентЛокализация.ПриИзмененииРеквизита(Элемент.Имя, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииИзмененияРеквизитаЛокализации(ИмяЭлемента, Параметры = Неопределено) Экспорт
	
	Если Параметры.ТребуетсяВызовСервера Тогда
		ПриОкончанииИзмененияРевизитаЛокализацииНаСервере(ИмяЭлемента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОкончанииИзмененияРевизитаЛокализацииНаСервере(ИмяЭлемента)
	
	СтатьиРасходовЛокализация.ПриИзмененииРеквизита(ИмяЭлемента, ЭтаФорма);
	
	//++ НЕ УТ
	НастройкаСчетовУчетаКлиентСервер.ПриИзмененииРеквизита(ЭтотОбъект);
	//-- НЕ УТ
	
КонецПроцедуры


&НаКлиенте
Процедура РасходыНаРемонтОСПриИзменении(Элемент)

	//++ НЕ УТ
	НастройкаСчетовУчетаКлиентСервер.ПриИзмененииРеквизита(ЭтотОбъект);
	//-- НЕ УТ
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СебестоимостьРеализацииПриИзменении(Элемент)
	
	//++ НЕ УТ
	НастройкаСчетовУчетаКлиентСервер.ПриИзмененииРеквизита(ЭтотОбъект);
	//-- НЕ УТ
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПараметрыФормы = Новый Структура("СтатьяРасходов", Объект.Ссылка);
		ПараметрыФормы.Вставить("ВидДеятельностиРасходов", Объект.ВидДеятельностиРасходов);

		ОткрытьФорму("ПланВидовХарактеристик.СтатьиРасходов.Форма.РазблокированиеРеквизитов", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
        ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
    КонецЕсли;

КонецПроцедуры

// Процедура - обработчик выполнения команды.
//
// Параметры:
//	Команда - КомандаФормы - команда формы.
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЛокализации(Команда)
	
	СтатьиРасходовКлиентЛокализация.ВыполнитьКоманду(Команда.Имя, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыЛокализации(ИмяКоманды, Параметры) Экспорт
	
	Если Параметры.ТребуетсяВызовСервера Тогда
		ВыполнитьКомандуЛокализацииНаСервере(ИмяКоманды);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуЛокализацииНаСервере(ИмяКоманды)
	
	СтатьиРасходовЛокализация.ВыполнитьКоманду(ИмяКоманды, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ВидДеятельностиРасходовПриИзмененииСервер(ИмяЭлемента)
	
	ИзменилсяВариантРаспределенияРасходовРегл = Ложь;
	
	Если Объект.ВидДеятельностиРасходов <> Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность 
		И Объект.ВариантРаспределенияРасходовРегл <> Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
		Объект.ВариантРаспределенияРасходовРегл = Неопределено;
		ИзменилсяВариантРаспределенияРасходовРегл = Истина;
	КонецЕсли;
	
	//++ НЕ УТ
	НастройкаСчетовУчетаКлиентСервер.ПриИзмененииРеквизита(ЭтотОбъект);
	//-- НЕ УТ
	
	УправлениеЭлементамиФормы();
	
	СтатьиРасходовЛокализация.ВидДеятельностиРасходовПриИзменении(ЭтаФорма);
	Если ИзменилсяВариантРаспределенияРасходовРегл Тогда
		СтатьиРасходовЛокализация.ВариантРаспределенияРасходовРеглПриИзменении(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТипРасходовПриИзмененииСервер(ИмяЭлемента)
	
	ЗаполнитьСписокВидовАналитикРасходов();
	
	ИзменилсяТипЗначения = Ложь;
	ИзменилсяВариантРаспределенияРасходовРегл = Ложь;
	
	Если Элементы.ТипЗначения.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено Тогда
		Если Объект.ТипРасходов = Перечисления.ТипыРасходов.ЗакупкаТоваров Тогда
			ТипЗначения = "ДокументСсылка.ПриобретениеТоваровУслуг";
			Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров;
			ИзменилсяТипЗначения = Истина;
			ИзменилсяВариантРаспределенияРасходовРегл = Истина;
		ИначеЕсли Объект.ТипРасходов = Перечисления.ТипыРасходов.Производственные Тогда
			ТипЗначения = "СправочникСсылка.ПрочиеРасходы";
			Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты;
			ИзменилсяТипЗначения = Истина;
			ИзменилсяВариантРаспределенияРасходовРегл = Истина;
		ИначеЕсли Объект.ТипРасходов = Перечисления.ТипыРасходов.ПродажаТоваров Тогда
			ТипЗначения = "СправочникСсылка.Партнеры";
			ИзменилсяТипЗначения = Истина;
		ИначеЕсли Объект.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы Тогда
			ТипЗначения = "СправочникСсылка.ПрочиеРасходы";
			ИзменилсяТипЗначения = Истина;
		//++ НЕ УТ
		ИначеЕсли Объект.ТипРасходов = Перечисления.ТипыРасходов.ФормированиеСтоимостиВНА Тогда
			ТипЗначения = "СправочникСсылка.ОбъектыЭксплуатации";
			ИзменилсяТипЗначения = Истина;
			Если Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность Тогда
				Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				ИзменилсяВариантРаспределенияРасходовРегл = Истина;
			Иначе
				Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы;
				Объект.КонтролироватьЗаполнениеАналитики = Истина;
				ИзменилсяВариантРаспределенияРасходовРегл = Истина;
			КонецЕсли;
		//-- НЕ УТ
		ИначеЕсли Объект.ТипРасходов = Перечисления.ТипыРасходов.СкладскоеХранение Тогда
			ТипЗначения = "СправочникСсылка.Склады";
			Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров;
			ИзменилсяТипЗначения = Истина;
			ИзменилсяВариантРаспределенияРасходовРегл = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим вариант распределения расходов (регл).
	Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.ЗакупкаТоваров
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.СкладскоеХранение Тогда
		Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
		ИзменилсяВариантРаспределенияРасходовРегл = Истина;
	ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.Производственные Тогда
		Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
		ИзменилсяВариантРаспределенияРасходовРегл = Истина;
	ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.ФормированиеСтоимостиВНА Тогда
		Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
		ИзменилсяВариантРаспределенияРасходовРегл = Истина;
	КонецЕсли;
	
	// Проверим вариант распределения расходов (упр).
	Если ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.ЗакупкаТоваров
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.СкладскоеХранение Тогда
		ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
		
	ИначеЕсли ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.Производственные Тогда
		ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
		
	ИначеЕсли ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.ФормированиеСтоимостиВНА Тогда
		ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
		
	КонецЕсли;
	//++ НЕ УТ

	Объект.РасходыНаНМАиНИОКР = Ложь;
	Объект.РасходыНаОбъектыСтроительства = Ложь;
	Объект.РасходыНаОбъектыЭксплуатации = Ложь;
	Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы Тогда
		Если ТипЗначения = "СправочникСсылка.ОбъектыЭксплуатации" Тогда
			Объект.РасходыНаОбъектыЭксплуатации = Истина;
		ИначеЕсли ТипЗначения = "СправочникСсылка.ОбъектыСтроительства"
		 ИЛИ ТипЗначения = "СправочникСсылка.ОбъектыСтроительства22" Тогда
			Объект.РасходыНаОбъектыСтроительства = Истина;
		ИначеЕсли ТипЗначения = "СправочникСсылка.НематериальныеАктивы" Тогда
			Объект.РасходыНаНМАиНИОКР = Истина;
		КонецЕсли;
	КонецЕсли;

	НастройкаСчетовУчетаКлиентСервер.ПриИзмененииРеквизита(ЭтотОбъект);
	//-- НЕ УТ
	УправлениеПараметрамиВыбора(ЭтаФорма);
	
	Если ИзменилсяТипЗначения Тогда
        ЗаполнитьВидЦенности();
		СтатьиРасходовЛокализация.ТипЗначенияПриИзмененииСервер(ЭтаФорма);
	КонецЕсли;
	
	Если ИзменилсяВариантРаспределенияРасходовРегл Тогда
		СтатьиРасходовЛокализация.ВариантРаспределенияРасходовРеглПриИзменении(ЭтаФорма);
	КонецЕсли;
	
	УправлениеЭлементамиФормы();

КонецПроцедуры

&НаСервере
Процедура ТипЗначенияПриИзмененииСервер(ИмяЭлемента)
	
	Если Не ПустаяСтрока(ТипЗначения) Тогда
		Если ТипЗначения = "ДокументСсылка.ЗаказКлиента"
			ИЛИ ТипЗначения = "ДокументСсылка.РеализацияТоваровУслуг"
		Тогда
			Объект.АналитикаРасходовЗаказРеализация = Истина;
			Объект.ТипЗначения = 
				Новый ОписаниеТипов("ДокументСсылка.АктВыполненныхРабот,
				|ДокументСсылка.РеализацияТоваровУслуг,
				|ДокументСсылка.РеализацияУслугПрочихАктивов,
				|ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента,
				|ДокументСсылка.ЗаказКлиента");
		//++ НЕ УТ
		ИначеЕсли ТипЗначения = "СправочникСсылка.ОбъектыСтроительства22" Тогда
			Объект.АналитикаРасходовЗаказРеализация = Ложь;
			Объект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ОбъектыЭксплуатации");
		//-- НЕ УТ
		Иначе
			Объект.АналитикаРасходовЗаказРеализация = Ложь;
			Объект.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
		КонецЕсли;
	КонецЕсли;
	
	//++ НЕ УТ
	Объект.РасходыНаНМАиНИОКР = Ложь;
	Объект.РасходыНаОбъектыСтроительства = Ложь;
	Объект.РасходыНаОбъектыЭксплуатации = Ложь;
	Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы Тогда
		Если ТипЗначения = "СправочникСсылка.ОбъектыЭксплуатации" Тогда
			Объект.РасходыНаОбъектыЭксплуатации = Истина;
		ИначеЕсли ТипЗначения = "СправочникСсылка.ОбъектыСтроительства"
		 ИЛИ ТипЗначения = "СправочникСсылка.ОбъектыСтроительства22" Тогда
			Объект.РасходыНаОбъектыСтроительства = Истина;
		ИначеЕсли ТипЗначения = "СправочникСсылка.НематериальныеАктивы" Тогда
			Объект.РасходыНаНМАиНИОКР = Истина;
		КонецЕсли;
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиентСервер.ПриИзмененииРеквизита(ЭтотОбъект);
	//-- НЕ УТ
	
    ЗаполнитьВидЦенности();
	
	УправлениеЭлементамиФормы();
	
	СтатьиРасходовЛокализация.ТипЗначенияПриИзмененииСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВариантРаспределенияРасходовРеглПриИзмененииСервер(ИмяЭлемента)
	
	//++ НЕ УТ
	ДоступностьКонтроляЗаполненияАналитик = Истина;
	Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы Тогда
		Объект.РасходыНаОбъектыСтроительства = Ложь;
		Объект.РасходыНаОбъектыЭксплуатации = Ложь;
		Объект.РасходыНаНМАиНИОКР = Ложь;
		Если ТипЗначения = "СправочникСсылка.ОбъектыЭксплуатации" Тогда
			Объект.РасходыНаОбъектыЭксплуатации = Истина;
		ИначеЕсли ТипЗначения = "СправочникСсылка.ОбъектыСтроительства" ИЛИ ТипЗначения = "СправочникСсылка.ОбъектыСтроительства22" Тогда
			Объект.РасходыНаОбъектыСтроительства = Истина;
		ИначеЕсли ТипЗначения = "СправочникСсылка.НематериальныеАктивы" Тогда
			Объект.РасходыНаНМАиНИОКР = Истина;
		КонецЕсли;
		Объект.КонтролироватьЗаполнениеАналитики = Истина;
		ДоступностьКонтроляЗаполненияАналитик = Ложь;
	КонецЕсли;
	Элементы.КонтролироватьЗаполнениеАналитики.Видимость = ДоступностьКонтроляЗаполненияАналитик;
	//-- НЕ УТ
	
	Если Объект.ДоступныеХозяйственныеОперации.Количество() > 0 Тогда
		ОчиститьНедоступныеХозяйственныеОперации();
	КонецЕсли;
	
	УправлениеПараметрамиВыбора(ЭтаФорма, "ВариантРаспределенияРасходовРегл");
	
    ЗаполнитьВидЦенности();
	
	//++ НЕ УТ
	НастройкаСчетовУчетаКлиентСервер.ПриИзмененииРеквизита(ЭтотОбъект);
	//-- НЕ УТ
	
	ЗаполнитьСписокВидовАналитикРасходов();
	УправлениеЭлементамиФормы();
	
	СтатьиРасходовЛокализация.ВариантРаспределенияРасходовРеглПриИзменении(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	НеБазовая = НЕ БазоваяВерсия;
	
	ВариантыСЕдинымиПравиламиРаспределения = Новый Массив;
	ВариантыСЕдинымиПравиламиРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	ВариантыСЕдинымиПравиламиРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	ВариантыСЕдинымиПравиламиРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	
	ВариантыСРазнымиПравиламиРаспределения = Новый Массив;
	ВариантыСРазнымиПравиламиРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	ВариантыСРазнымиПравиламиРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);

	// Закладка "Основное".
	
	// Регл.
	
	Элементы.ПравилоРаспределенияНаСебестоимость.Видимость =
		(Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров);
	Элементы.ПравилоРаспределенияРасходовРегл.Видимость = (ФормироватьФинансовыйРезультат 
		И Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
		Или (Не Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
				И Не ВариантыСЕдинымиПравиламиРаспределения.Найти(Объект.ВариантРаспределенияРасходовРегл) = Неопределено);
		
	// Упр.
	
	Элементы.ПравилоРаспределенияРасходовУпр.Видимость = НеБазовая
		И (ФормироватьФинансовыйРезультат 
			И (ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
				Или (Не ЗначениеЗаполнено(ВариантРаспределенияРасходовУпр)
					И Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности))
			Или Не (ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
				Или (Не ЗначениеЗаполнено(ВариантРаспределенияРасходовУпр)
					И Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)))
		И (((Не ЗначениеЗаполнено(ВариантРаспределенияРасходовУпр) 
				Или ВариантРаспределенияРасходовУпр = Объект.ВариантРаспределенияРасходовРегл)
			И Не ВариантыСРазнымиПравиламиРаспределения.Найти(Объект.ВариантРаспределенияРасходовРегл) = Неопределено)
			Или (Не ВариантыСЕдинымиПравиламиРаспределения.Найти(ВариантРаспределенияРасходовУпр) = Неопределено
				И Не Объект.ВариантРаспределенияРасходовРегл = ВариантРаспределенияРасходовУпр));
			
	Элементы.ПравилоРаспределенияНаСебестоимостьУпр.Видимость = НеБазовая 
		И Не Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров
		И ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров;
		
	Элементы.ПравилоРаспределенияРасходовУпрПустышка.Видимость = НеБазовая И Не Элементы.ПравилоРаспределенияРасходовУпр.Видимость
		И Не Элементы.ПравилоРаспределенияНаСебестоимостьУпр.Видимость
		И Не ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять
		И Не ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы
		И ((Элементы.ПравилоРаспределенияРасходовРегл.Видимость
			Или Элементы.ПравилоРаспределенияНаСебестоимость.Видимость)
				И (Не ЗначениеЗаполнено(ВариантРаспределенияРасходовУпр)
					Или ВариантРаспределенияРасходовУпр = Объект.ВариантРаспределенияРасходовРегл));
	
	Если Элементы.ПравилоРаспределенияРасходовУпр.Видимость Тогда
		
		Если Объект.ВариантРаспределенияРасходовРегл = ВариантРаспределенияРасходовУпр
			Или Не ЗначениеЗаполнено(ВариантРаспределенияРасходовУпр) Тогда
			Элементы.ПравилоРаспределенияРасходовУпр.ПодсказкаВвода = НСтр("ru='так же как в регл. учете';uk='так само як в регл. обліку'");
		Иначе
			Элементы.ПравилоРаспределенияРасходовУпр.ПодсказкаВвода = "";
		КонецЕсли;
		
	КонецЕсли;
	
	// Производственные реквизиты.
	Элементы.ГруппаПравилоРаспределенияНаПроизводство.Видимость = 
		(Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
		Или (Объект.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
		
	// Аналитика.
	Элементы.ГруппаВидАналитики.Видимость =
		(Объект.ВариантРаспределенияРасходовРегл <> Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы);
	
	Элементы.КонтролироватьЗаполнениеАналитики.Видимость = 
		Объект.ВариантРаспределенияРасходовУпр <> Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы
		И Объект.ВариантРаспределенияРасходовРегл <> Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы;
	
    
    УстановитьВидимостьДопФлаговТиповЗначенийАналитики();
	
	// Закладка "Ограничение использования".	
		
	Элементы.ДоступныеХозяйственныеОперации.Доступность = (Объект.ОграничитьИспользование И Не ТолькоПросмотр);
	
	Элементы.ИнформацияНаПрочиеАктивыТекст.Заголовок = 
		НСтр("ru='Данный вариант распределения устарел, вместо статей с таким вариантом распределения в документах следует использовать статьи активов/пассивов.';uk='Даний варіант розподілу застарів, замість статей з таким варіантом розподілу в документах слід використовувати статті активів/пасивів.'");
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.ИнформацияНаПрочиеАктивыТекст.Заголовок = Элементы.ИнформацияНаПрочиеАктивыТекст.Заголовок 
			+ " " 
			+ НСтр("ru='Для использования статей активов/пассивов включите опцию ""Учитывать прочие активы и пассивы"" (раздел Администрирование - Финансовый результат).';uk='Для використання статей активів/пасивів увімкніть опцію ""Враховувати інші активи і пасиви"" (розділ Адміністрування - Фінансовий результат).'")
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДопФлаговТиповЗначенийАналитики()
    
    Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы 
        ИЛИ Объект.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы Тогда
        
        Элементы.СебестоимостьРеализации.Видимость = Ложь;
		Если (Объект.ВидЦенности = Перечисления.ВидыЦенностей.ОС ИЛИ
				Объект.ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства) Тогда
            Элементы.РасходыНаРемонтОС.Видимость = Истина;    
            Элементы.ДекорацияДопФлаги.Видимость = Ложь; 
        Иначе        
			Элементы.РасходыНаРемонтОС.Видимость = Ложь;
            Элементы.ДекорацияДопФлаги.Видимость = Истина; 
        КонецЕсли;
        
    ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
        ИЛИ Объект.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
        
        Элементы.РасходыНаРемонтОС.Видимость = Ложь;
        Если ЭтоУТ Тогда
            Элементы.СебестоимостьРеализации.Видимость = Ложь;
            Элементы.ДекорацияДопФлаги.Видимость = Истина; 
        Иначе	
            Элементы.СебестоимостьРеализации.Видимость = Истина;
            Элементы.ДекорацияДопФлаги.Видимость = Ложь; 
        КонецЕсли; 
        
    Иначе
        
        Элементы.РасходыНаРемонтОС.Видимость = Ложь;
        Элементы.СебестоимостьРеализации.Видимость = Ложь;
        Элементы.ДекорацияДопФлаги.Видимость = Истина; 
        
	КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьТиповЗначенийАналитики()
	
	СписокИсключаемыхТипов = Новый СписокЗначений;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
		СписокИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказКлиента");
	Иначе
		СписокИсключаемыхТипов.Добавить("ДокументСсылка.РеализацияТоваровУслуг");
	КонецЕсли;
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		СписокИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказПоставщику");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение") Тогда
		СписокИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказНаПеремещение");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСделкиСКлиентами") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.СделкиСКлиентами");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.ЭквайринговыеТерминалы");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		СписокИсключаемыхТипов.Добавить("ДокументСсылка.ПередачаТоваровМеждуОрганизациями");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФиксироватьПретензииКлиентов") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.ПретензииКлиентов");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.МаркетинговыеМероприятия");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров") Тогда
		СписокИсключаемыхТипов.Добавить("ДокументСсылка.ПеремещениеТоваров");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат")
	 ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности")
		И НЕ Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НаправленияДеятельности")) Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.НаправленияДеятельности");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроекты") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.Проекты");
	КонецЕсли;
	
	//++ НЕ УТ
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.ОбъектыЭксплуатации");
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.НематериальныеАктивы");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		СтатьиРасходовЛокализация.ДополнитьСписокТиповАналитикамиУчетаЗарплаты(СписокИсключаемыхТипов);
	КонецЕсли;
	//-- НЕ УТ
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		СписокИсключаемыхТипов.Добавить("ПеречислениеСсылка.АналитикаКурсовыхРазниц");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.СтруктураПредприятия");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.Организации");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.ДоговорыКредитовИДепозитов");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.Кассы");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку") Тогда
		СписокИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказНаСборку");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку") Тогда
		СписокИсключаемыхТипов.Добавить("ДокументСсылка.СборкаТоваров");
	КонецЕсли;
	
	//++ НЕ УТ
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.ОбъектыСтроительства22");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбъектыСтроительства") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.ОбъектыСтроительства");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьРезервыПредстоящихРасходов") Тогда
		СписокИсключаемыхТипов.Добавить("СправочникСсылка.ОбъектыУчетаРезервовПредстоящихРасходов");
	КонецЕсли;
	//-- НЕ УТ
	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки")
	 И Не ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков") Тогда
		СписокИсключаемыхТипов.Добавить("ДокументСсылка.ПоступлениеТоваровНаСклад");
	КонецЕсли;
	
	
	Поле = Элементы.ТипЗначения;
	Для Каждого Элемент Из СписокИсключаемыхТипов Цикл
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Элемент.Значение);
		Если ЭлементСписка <> Неопределено И ТипЗначения <> Элемент.Значение Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеПараметрамиВыбора(Форма, ИмяРеквизита = Неопределено, ПроверитьСоответствиеЗначенияНовымУсловиям = Истина)
	
	Если ИмяРеквизита = Неопределено Или ИмяРеквизита = "ВариантРаспределенияРасходовРегл" Тогда
		
		ОграничитьВыборПравилаРаспределения(Форма, "ВариантРаспределенияРасходовРегл", "ПравилоРаспределенияРасходовРегл");
		Если ПроверитьСоответствиеЗначенияНовымУсловиям Тогда
			ПроверитьСоответствиеРеквизитовПараметрамВыбора(Форма, "ПравилоРаспределенияРасходовРегл", "ПравилоРаспределенияРасходовРегл");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяРеквизита = Неопределено Или ИмяРеквизита = "ВариантРаспределенияРасходовУпр" Тогда
		
		Если Не ЗначениеЗаполнено(Форма.ВариантРаспределенияРасходовУпр) Тогда
			ОграничитьВыборПравилаРаспределения(Форма, "ВариантРаспределенияРасходовРегл", "ПравилоРаспределенияРасходовУпр");
		Иначе
			ОграничитьВыборПравилаРаспределения(Форма, "ВариантРаспределенияРасходовУпр", "ПравилоРаспределенияРасходовУпр");
		КонецЕсли;
		
		Если ПроверитьСоответствиеЗначенияНовымУсловиям Тогда
			ПроверитьСоответствиеРеквизитовПараметрамВыбора(Форма, "ПравилоРаспределенияРасходовУпр", "ПравилоРаспределенияРасходовУпр");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОграничитьВыборПравилаРаспределения(Форма, ИмяРеквизита, ИмяЭлемента)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если ИмяРеквизита = "ВариантРаспределенияРасходовРегл" Тогда
		ИсточникДанных = Объект;
	КонецЕсли;
	
	Если ИмяРеквизита = "ВариантРаспределенияРасходовУпр" Тогда
		ИсточникДанных = Форма;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	КлючПараметраВыбора = "Отбор.НазначениеПравила";

	ТекущиеПараметрыВыбора = Элементы[ИмяЭлемента].ПараметрыВыбора;
	НовыеПараметрыВыбора = Новый Массив;
	
	Для Индекс = 0 По ТекущиеПараметрыВыбора.Количество() - 1 Цикл
		
		ПараметрПоИндексу = ТекущиеПараметрыВыбора[Индекс]; // ПараметрВыбора
		Если ПараметрПоИндексу.Имя = КлючПараметраВыбора Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеПараметрыВыбора.Добавить(ПараметрПоИндексу);
		
	КонецЦикла;
	
	НовыйПараметр = Новый ПараметрВыбора(КлючПараметраВыбора, ДоступноеНазначениеПравила(ИсточникДанных[ИмяРеквизита]));
	НовыеПараметрыВыбора.Добавить(НовыйПараметр);
	
	Элементы[ИмяЭлемента].ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСоответствиеРеквизитовПараметрамВыбора(Форма, ИмяРеквизита, ИмяЭлемента)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ИмяРеквизита = "ПравилоРаспределенияРасходовРегл" Тогда
		Источник = Объект;
	ИначеЕсли ИмяРеквизита = "ПравилоРаспределенияРасходовУпр" Тогда
		Источник = Форма;
	КонецЕсли;
	
	ЗначенияПараметров = Новый Структура;
	МассивРеквизитов = Новый Массив;
	
	Для Каждого ПараметрВыбора Из Элементы[ИмяЭлемента].ПараметрыВыбора Цикл
		
		Если Найти(ПараметрВыбора.Имя, "Отбор.") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КлючПараметра = СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", "");
		
		ЗначенияПараметров.Вставить(КлючПараметра, ПараметрВыбора.Значение);
		МассивРеквизитов.Добавить(КлючПараметра);
		
	КонецЦикла;
	
	ЗначенияРеквизитов = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Источник[ИмяРеквизита], СтрСоединить(МассивРеквизитов, ","));
	
	Соответствует = Истина;
	Для Каждого КлючИЗначение Из ЗначенияПараметров Цикл
		
		Если ЗначенияРеквизитов[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		Соответствует = Ложь;
		Прервать;
		
	КонецЦикла;
	
	Если Соответствует Тогда
		Возврат;
	КонецЕсли;
	
	Источник[ИмяРеквизита] = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ДоступноеНазначениеПравила(ВариантРаспределения)
	
	Если ВариантРаспределения = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат");
	ИначеЕсли ВариантРаспределения = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства");
	ИначеЕсли ВариантРаспределения = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если Объект.ВариантРаспределенияРасходовУпр = Объект.ВариантРаспределенияРасходовРегл Тогда
		ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.ПустаяСсылка();
	Иначе
		ВариантРаспределенияРасходовУпр = Объект.ВариантРаспределенияРасходовУпр;
	КонецЕсли;
	
	Если Не Объект.ПравилоРаспределенияРасходовРегл = Объект.ПравилоРаспределенияРасходовУпр Тогда
		ПравилоРаспределенияРасходовУпр = Объект.ПравилоРаспределенияРасходовУпр;
	КонецЕсли;
	
	ФормироватьФинансовыйРезультат = ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат");
	
	УстановитьТипЗначения(Объект.ТипЗначения);
	УправлениеЭлементамиФормы();
	ЗаполнитьСписокДоступныхХозяйственныхОпераций();
	ЗаполнитьСписокВидовАналитикРасходов();
	
	//++ НЕ УТ
	НастройкаСчетовУчета.ПриЧтенииСозданииОбъектаНастройкиСчетовУчета(ЭтотОбъект);
	УстановитьПараметрыВыбораСчетаУчетаРасходов8Класса();
	//-- НЕ УТ
	УправлениеПараметрамиВыбора(ЭтаФорма, Неопределено, Ложь);
	СтатьиРасходовЛокализация.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначения(ВыбранныйТипЗначения)
	
	Если ВыбранныйТипЗначения = Неопределено Тогда
		Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
			ВыбранныйТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Иначе
			ВыбранныйТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
		КонецЕсли;
	КонецЕсли;
	
	СписокТиповЗначений = Новый СписокЗначений;
	СписокТиповЗначений.Добавить("СправочникСсылка.МаркетинговыеМероприятия");
	СписокТиповЗначений.Добавить("СправочникСсылка.НаправленияДеятельности");
	СписокТиповЗначений.Добавить("СправочникСсылка.СделкиСКлиентами");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказКлиента");
	СписокТиповЗначений.Добавить("СправочникСсылка.Склады");
	СписокТиповЗначений.Добавить("СправочникСсылка.Кассы");
	СписокТиповЗначений.Добавить("СправочникСсылка.Номенклатура");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказПоставщику");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПриобретениеТоваровУслуг");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаПеремещение");
	СписокТиповЗначений.Добавить("ДокументСсылка.РеализацияТоваровУслуг");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПеремещениеТоваров");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПередачаТоваровМеждуОрганизациями");
	СписокТиповЗначений.Добавить("ДокументСсылка.РеализацияТоваровУслуг");
	СписокТиповЗначений.Добавить("СправочникСсылка.ПрочиеРасходы");
	СписокТиповЗначений.Добавить("СправочникСсылка.ПрочиеАктивыПассивы");
	СписокТиповЗначений.Добавить("СправочникСсылка.Партнеры");
	СписокТиповЗначений.Добавить("СправочникСсылка.Организации");
	СписокТиповЗначений.Добавить("СправочникСсылка.ФизическиеЛица");
	СписокТиповЗначений.Добавить("СправочникСсылка.СтруктураПредприятия");
	СписокТиповЗначений.Добавить("СправочникСсылка.Проекты");
	СписокТиповЗначений.Добавить("СправочникСсылка.ПретензииКлиентов");
	СписокТиповЗначений.Добавить("СправочникСсылка.ДоговорыКредитовИДепозитов");
	//++ НЕ УТ
	СписокТиповЗначений.Добавить("СправочникСсылка.ОбъектыЭксплуатации");
	СписокТиповЗначений.Добавить("СправочникСсылка.ОбъектыСтроительства");
	СписокТиповЗначений.Добавить("СправочникСсылка.НематериальныеАктивы");
	СписокТиповЗначений.Добавить("СправочникСсылка.ОбъектыУчетаРезервовПредстоящихРасходов");
	//-- НЕ УТ
	СписокТиповЗначений.Добавить("ПеречислениеСсылка.АналитикаКурсовыхРазниц");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаСборку");
	СписокТиповЗначений.Добавить("ДокументСсылка.СборкаТоваров");
	СписокТиповЗначений.Добавить("ДокументСсылка.ВводОстатков");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПоступлениеТоваровНаСклад");
	
	СтатьиРасходовЛокализация.ДополнитьСписокТиповАналитикамиУчетаЗарплаты(СписокТиповЗначений);
	СтатьиРасходовЛокализация.ДополнитьСписокТиповАналитикамиПроизводством21(СписокТиповЗначений);
	
	Для Каждого ЭлементСписка Из СписокТиповЗначений Цикл
		Если ВыбранныйТипЗначения.СодержитТип(Тип(ЭлементСписка.Значение)) Тогда
			ТипЗначения = ЭлементСписка.Значение;
			//++ НЕ УТ
			Если ЭлементСписка.Значение = "СправочникСсылка.ОбъектыЭксплуатации"
             И Объект.ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства Тогда
				ТипЗначения = "СправочникСсылка.ОбъектыСтроительства22";
			КонецЕсли;
			//-- НЕ УТ
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНедоступныеХозяйственныеОперации()
	
	ТекущиеДоступныеХозяйственныеОперации = ОбщегоНазначения.СкопироватьРекурсивно(ДоступныеХозяйственныеОперации);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьСписокХозяйственныхОпераций(
		ДоступныеХозяйственныеОперации,
		ВариантРаспределенияРасходовУпр,
		Объект.ВариантРаспределенияРасходовРегл);
		
	Для Каждого ТекущийЭлементСписка Из ТекущиеДоступныеХозяйственныеОперации Цикл
		ЭлементСписка = ДоступныеХозяйственныеОперации.НайтиПоЗначению(ТекущийЭлементСписка.Значение);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхХозяйственныхОпераций()
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьСписокХозяйственныхОпераций(
		ДоступныеХозяйственныеОперации,
		ВариантРаспределенияРасходовУпр,
		Объект.ВариантРаспределенияРасходовРегл);
	
	Для Каждого СтрокаТаблицы Из Объект.ДоступныеХозяйственныеОперации Цикл
		ЭлементСписка = ДоступныеХозяйственныеОперации.НайтиПоЗначению(СтрокаТаблицы.ХозяйственнаяОперация);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовАналитикРасходов()
	
	СписокВыбора = Элементы.ТипЗначения.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Объект.ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ЗакупкаТоваров") Тогда
		СписокВыбора.Добавить("ДокументСсылка.ЗаказПоставщику", 					НСтр("ru='Заказ поставщику';uk='Замовлення постачальнику'"));
		СписокВыбора.Добавить("ДокументСсылка.ПриобретениеТоваровУслуг", 			НСтр("ru='Приобретение товаров и услуг';uk='Придбання товарів і послуг'"));
		СписокВыбора.Добавить("ДокументСсылка.ПоступлениеТоваровНаСклад", 					НСтр("ru='Поступление товаров';uk='Надходження товарів'"));
		СписокВыбора.Добавить("ДокументСсылка.ВводОстатков", 						НСтр("ru='Ввод остатков';uk='Введення залишків'"));
		СписокВыбора.Добавить("ДокументСсылка.ПередачаТоваровМеждуОрганизациями", 	НСтр("ru='Передача товаров между организациями';uk='Передача товарів між організаціями'"));
		
	ИначеЕсли Объект.ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.СкладскоеХранение") Тогда
		СписокВыбора.Добавить("СправочникСсылка.Склады", 			НСтр("ru='Склад (Место хранения)';uk='Склад (Місце зберігання)'"));
		СписокВыбора.Добавить("СправочникСсылка.Номенклатура", 		НСтр("ru='Номенклатура';uk='Номенклатура'"));
		СписокВыбора.Добавить("ДокументСсылка.ЗаказНаПеремещение", 	НСтр("ru='Заказ на перемещение';uk='Замовлення на переміщення'"));
		СписокВыбора.Добавить("ДокументСсылка.ПеремещениеТоваров", 	НСтр("ru='Перемещение товаров';uk='Переміщення товарів'"));
		СписокВыбора.Добавить("ДокументСсылка.ЗаказНаСборку", 		НСтр("ru='Заказ на сборку (разборку)';uk='Замовлення на збирання (розбирання)'"));
		СписокВыбора.Добавить("ДокументСсылка.СборкаТоваров", 		НСтр("ru='Сборка (разборка) товаров';uk='Збирання (розбирання) товарів'"));
		
	ИначеЕсли Объект.ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ПродажаТоваров") Тогда
		СписокВыбора.Добавить("СправочникСсылка.Партнеры",					НСтр("ru='Клиент';uk='Клієнт'"));
		СписокВыбора.Добавить("СправочникСсылка.СделкиСКлиентами",			НСтр("ru='Сделка';uk='Угода'"));
		СписокВыбора.Добавить("ДокументСсылка.ЗаказКлиента",				НСтр("ru='Заказ / Реализация';uk='Замовлення / Реалізація'"));
		СписокВыбора.Добавить("СправочникСсылка.МаркетинговыеМероприятия",	НСтр("ru='Маркетинговое мероприятие';uk='Маркетинговий захід'"));
		
	ИначеЕсли Объект.ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.Производственные") Тогда
		СписокВыбора.Добавить("СправочникСсылка.СтруктураПредприятия", 	НСтр("ru='Подразделение';uk='Підрозділ'"));
		СписокВыбора.Добавить("СправочникСсылка.ПрочиеРасходы", 		НСтр("ru='Прочие расходы';uk='Інші витрати'"));
		//++ НЕ УТ
		СписокВыбора.Добавить("СправочникСсылка.ОбъектыЭксплуатации", 	НСтр("ru='Объекты эксплуатации';uk='Об''єкти експлуатації'"));
		//-- НЕ УТ
	//++ НЕ УТ
	ИначеЕсли Объект.ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА") Тогда
		СписокВыбора.Добавить("СправочникСсылка.ОбъектыЭксплуатации", 	НСтр("ru='Основные средства';uk='Основні засоби'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
			СписокВыбора.Добавить("СправочникСсылка.ОбъектыСтроительства",НСтр("ru='Объекты строительства';uk='Об''єкти будівництва'"));
		КонецЕсли;
		СтатьиРасходовЛокализация.ДополнитьСписокВыбораФормированиеСтоимостиВНА(СписокВыбора);
        СписокВыбора.Добавить("СправочникСсылка.НематериальныеАктивы", 	НСтр("ru='НМА';uk='НМА'"));
	//-- НЕ УТ
		
	ИначеЕсли Объект.ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ПрочиеРасходы") Тогда
		СписокВыбора.Добавить("СправочникСсылка.СтруктураПредприятия", 		НСтр("ru='Подразделение';uk='Підрозділ'"));
		СписокВыбора.Добавить("СправочникСсылка.Организации", 				НСтр("ru='Организация';uk='Організація'"));
		СписокВыбора.Добавить("ПеречислениеСсылка.АналитикаКурсовыхРазниц", НСтр("ru='Виды курсовых разниц';uk='Види курсових різниць'"));
		СписокВыбора.Добавить("СправочникСсылка.Кассы", 					НСтр("ru='Касса';uk='Каса'"));
		СписокВыбора.Добавить("СправочникСсылка.ФизическиеЛица", 			НСтр("ru='Физическое лицо';uk='Фізична особа'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
			СписокВыбора.Добавить("СправочникСсылка.НаправленияДеятельности", 	НСтр("ru='(не используется) Направление деятельности';uk='(Не використовується) Напрям діяльності'"));
		Иначе
			СписокВыбора.Добавить("СправочникСсылка.НаправленияДеятельности", 	НСтр("ru='Направление деятельности';uk='Напрям діяльності'"));
		КонецЕсли;
		СписокВыбора.Добавить("СправочникСсылка.ДоговорыКредитовИДепозитов",НСтр("ru='Договор кредита (депозита)';uk='Договір кредиту (депозиту)'"));
		СписокВыбора.Добавить("СправочникСсылка.МаркетинговыеМероприятия", 	НСтр("ru='Маркетинговое мероприятие';uk='Маркетинговий захід'"));
		СписокВыбора.Добавить("СправочникСсылка.ПретензииКлиентов", 		НСтр("ru='Претензия клиента';uk='Претензія клієнта'"));
		СписокВыбора.Добавить("СправочникСсылка.Проекты", 					НСтр("ru='Проект';uk='Проєкт'"));
		//++ НЕ УТ
		СписокВыбора.Добавить("СправочникСсылка.ОбъектыЭксплуатации", 		НСтр("ru='Объекты эксплуатации';uk='Об''єкти експлуатації'"));
		//-- НЕ УТ
		СписокВыбора.Добавить("СправочникСсылка.Склады", 					НСтр("ru='Склад (Место хранения)';uk='Склад (Місце зберігання)'"));
		СписокВыбора.Добавить("СправочникСсылка.Номенклатура", 				НСтр("ru='Номенклатура';uk='Номенклатура'"));
		СписокВыбора.Добавить("СправочникСсылка.ПрочиеРасходы", 			НСтр("ru='Прочие расходы';uk='Інші витрати'"));
		СтатьиРасходовЛокализация.ДополнитьСписокТиповАналитикамиУчетаЗарплаты(СписокВыбора);
	КонецЕсли;
	
	
	УстановитьВидимостьТиповЗначенийАналитики();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидЦенности()
	
	Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
        Объект.ВидЦенности = Перечисления.ВидыЦенностей.Товары;
	//++ НЕ УТ
	ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы Тогда
		Если ТипЗначения = "СправочникСсылка.ОбъектыЭксплуатации" Тогда
            Объект.ВидЦенности = Перечисления.ВидыЦенностей.ОС;
		ИначеЕсли ТипЗначения = "СправочникСсылка.ОбъектыСтроительства"
			ИЛИ ТипЗначения = "СправочникСсылка.ОбъектыСтроительства22" Тогда
            Объект.ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства;
		ИначеЕсли ТипЗначения = "СправочникСсылка.НематериальныеАктивы" Тогда
			Объект.ВидЦенности = Перечисления.ВидыЦенностей.НМА;
		КонецЕсли;
	//-- НЕ УТ
	Иначе
        Объект.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Процедура УстановитьПараметрыВыбораСчетаУчетаРасходов8Класса()
	
	ДоступныеСчетаУчетаРасходов8Класса = Новый ФиксированныйМассив(Новый Массив);
	
	Если ПравоДоступа("Просмотр", Метаданные.ПланыСчетов.Хозрасчетный) Тогда
		СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаРасходов();
		ДоступныеСчетаУчетаРасходов8Класса = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасходов);
	КонецЕсли;
	
	ПараметрыВыбора8Класса = Новый Массив;
	ПараметрыВыбора8Класса.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеСчетаУчетаРасходов8Класса));
	Элементы.СчетУчета8Класс.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора8Класса);
	
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#КонецОбласти
