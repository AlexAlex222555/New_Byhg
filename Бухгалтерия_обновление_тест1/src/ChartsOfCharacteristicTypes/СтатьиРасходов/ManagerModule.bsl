#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ТипРасходов");
	Результат.Добавить("ВариантРаспределенияРасходовРегл");
	Результат.Добавить("ВариантРаспределенияРасходовУпр; ВариантРаспределенияРасходовУпр");
	Результат.Добавить("ТипЗначения; ТипЗначения");
	Результат.Добавить("ВидДеятельностиРасходов");
	
	СтатьиРасходовЛокализация.ДополнитьБлокируемыеРеквизитыОбъекта(Результат);
	
	Возврат Результат;
	
КонецФункции

// Функция определяет реквизиты выбранной статьи расходов.
//
// Параметры:
//  СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Ссылка на статью расходов.
//
// Возвращаемое значение:
//	Структура - реквизиты статьи расходов.
//
Функция ПолучитьРеквизитыСтатьиРасходов(Знач СтатьяРасходов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СтатьиРасходов.СпособРаспределенияПоНаправлениямДеятельности КАК СпособРаспределения,
	|	СтатьиРасходов.ТипЗначения КАК ТипЗначения,
	|	СтатьиРасходов.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.Ссылка = &СтатьяРасходов
	|");
	
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СпособРаспределения = Выборка.СпособРаспределения;
		ТребуетсяСпособРаспределения = Не Выборка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НаправленияДеятельности"));
		ТипЗначения = Выборка.ТипЗначения;
		СтатьяРасходовРаспределение = Выборка.СтатьяРасходов;
	Иначе
		СпособРаспределения = Справочники.СпособыРаспределенияПоНаправлениямДеятельности.ПустаяСсылка();
		ТребуетсяСпособРаспределения = Ложь;
		ТипЗначения = Неопределено;
		СтатьяРасходовРаспределение = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("СпособРаспределения, ТребуетсяСпособРаспределения, ТипЗначения",
		СпособРаспределения,
		ТребуетсяСпособРаспределения,
		ТипЗначения);
	СтруктураРеквизитов.Вставить("СтатьяРасходов", СтатьяРасходовРаспределение);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Функция определяет правило распределения на себестоимость товаров для статьи расходов.
//
// Параметры:
//  СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Ссылка на статью расходов.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ПравилаРаспределенияНаСебестоимостьТоваров - правило распределения статьи расходов.
//
Функция ПолучитьПравилоРаспределения(СтатьяРасходов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СтатьиРасходов.ПравилоРаспределенияНаСебестоимость КАК ПравилоРаспределения
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.Ссылка = &СтатьяРасходов
	|	И (СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|		ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|");
	
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПравилоРаспределения = Выборка.ПравилоРаспределения;
	Иначе
		ПравилоРаспределения = Неопределено;
	КонецЕсли;
	
	Возврат ПравилоРаспределения;

КонецФункции

// Процедура заполняет список хозяйственных операций, для которых используется
// ограничение отбора статьей расходов.
//
// Параметры:
//	СписокОпераций - СписокЗначений - Список хозяйственных операций и их представлений.
//	ВариантРаспределенияРасходовУпр - ПеречислениеСсылка.ВариантыРаспределенияРасходов - вариант распределения в упр. учете
//	ВариантРаспределенияРасходовРегл - ПеречислениеСсылка.ВариантыРаспределенияРасходов - вариант распределения в регл. учете
//
Процедура ЗаполнитьСписокХозяйственныхОпераций(СписокОпераций, ВариантРаспределенияРасходовУпр = Неопределено, ВариантРаспределенияРасходовРегл = Неопределено) Экспорт
	
	СписокОпераций.Очистить();
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.АвансовыйОтчет, НСтр("ru='Прочие расходы подотчетного лица';uk='Інші витрати підзвітної особи'"));
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика, НСтр("ru='Услуги сторонних организаций';uk='Послуги сторонніх організацій'"));
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы, НСтр("ru='Выдача денежных средств на прочие расходы';uk='Видача грошових коштів на інші витрати'"));
	
	Если ВариантРаспределенияРасходовУпр <> Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров
	 И ВариантРаспределенияРасходовРегл <> Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление") Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию, НСтр("ru='Внутреннее потребление товаров';uk='Внутрішнє споживання товарів'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров") Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПорчаТоваров, НСтр("ru='Изменение стоимости испорченного товара';uk='Зміна вартості зіпсованого товару'"));
		КонецЕсли;
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПересортицаТоваров, НСтр("ru='Изменение стоимости при пересортице';uk='Зміна вартості при пересортиці'"));
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваров, НСтр("ru='Списания недостач товаров';uk='Списання нестач товарів'"));
	КонецЕсли;
	
	Если ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
	 ИЛИ ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности, НСтр("ru='Списание задолженности партнеров';uk='Списання заборгованості партнерів'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОтчетБанкаПоОперациямЭквайринга, НСтр("ru='Эквайринговая комиссия';uk='Еквайрингова комісія'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит проверку заполнения реквизитов аналитик статей расходов в переданном объекте.
//
// Параметры:
// 		Объект - СправочникОбъект, ДокументОбъект, ДанныеФормыСтруктура - Объект ИБ предназначенный для проверки
// 		Реквизиты - Строка, Структура, Массив - Реквизиты статей расходов для проверки
// 			<Строка> Перечисление пар реквизитов для проверки в формате "СтатьяРаходов1, АналитикаРасходов1, СтатьяРаходов2, АналитикаРасходов2, ..."
// 				Пустая строка трактуется как "СтатьяРасходов, АналитикаРасходов"
// 			<Структура> Ключ: Строка с именем табличной части; Значение - Строка в нотации как у параметра типа <Строка>
// 			<Массив> Массив, элементы которого либо структуры в нотации как у параметра с типа <Структура>, либо строки в нотации <Строка>
// 		НепроверяемыеРеквизиты - Массив - Массив для накопления не проверяемых реквизитов переданного объекта
// 		Отказ - Булево - Признак наличия ошибок заполнения аналитик расходов переданного объекта
// 		ДополнительныеПараметры - Структура - При наличии свойства "ПрограммнаяПроверка", ошибки записываются в эту структуру, пользователю не выводятся.
//
Процедура ПроверитьЗаполнениеАналитик(Объект, Реквизиты = "", НепроверяемыеРеквизиты = Неопределено, Отказ = Ложь,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Ошибки = Новый Структура;
	Ошибки.Вставить("СписокОшибок", Новый Массив);
	Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	Ошибки.Вставить("ПрефиксОбъекта", ?(ТипЗнч(Объект)=Тип("ФормаКлиентскогоПриложения"), "", "Объект."));
	
	МассивОбработки = Новый Массив;
	Если ТипЗнч(Реквизиты) = Тип("Массив") Тогда
		МассивОбработки = Реквизиты;
	Иначе
		МассивОбработки.Добавить(Реквизиты);
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивОбработки Цикл
		
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			ПроверкаЗаполненияАналитикТЧОбъекта(Объект, ЭлементМассива, НепроверяемыеРеквизиты, Ошибки);
		Иначе
			ПроверкаЗаполненияАналитикОбъекта(Объект, ЭлементМассива, НепроверяемыеРеквизиты, Ошибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПрограммнаяПроверка") Тогда
		ДополнительныеПараметры.Вставить("Ошибки", Ошибки);
	Иначе
		Если Ошибки.СписокОшибок.Количество() <> 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает статьи расходов, использование которых запрещено
//
// Возвращаемое значение:
// 	СписокЗначений - Список заблокированных статей расходов.
//
Функция ЗаблокированныеСтатьиРасходов() Экспорт
	
	ЗаблокированныеСтатьи = Новый СписокЗначений;
	ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж);
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы);
        ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницыНеоперационные);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.НачисленныйНДСПриВыкупеМногооборотнойТары);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости);
        ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПрибыльУбытокПрошлыхЛет);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам);
    КонецЕсли;
	
	СтатьиРасходовЛокализация.ДополнитьСписокЗаблокированныхСтатей(ЗаблокированныеСтатьи);
	
	Возврат ЗаблокированныеСтатьи;
	
КонецФункции

// Вызывается при начальном заполнении предопределенных элементов
// Подробнее см. в СтандартныеПодсистемыСервер.НастройкиПредопределенныхЭлементов
//
// Параметры:
//  Настройки - Структура - Настройки начального заполнения.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - Ключ - Имя табличной части объекта.
//                               Значение - Выгрузка в таблицу значений пустой табличной части.
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
    
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	#Область ВыбытияТоваровВПрошлыхПериодах
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВыбытияТоваровВПрошлыхПериодах";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Выбытия товаров в прошлых периодах';uk='Вибуття товарів в минулих періодах'",КодОсновногоЯзыка);
	Элемент.Код = "000000012";
	Элемент.АналитикаРасходовЗаказРеализация = Ложь;
	Элемент.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	//++ НЕ УТ
	//-- НЕ УТ
	Элемент.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность;
    Элемент.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	Элемент.ОграничитьИспользование = Ложь;
	Элемент.ПрочиеРасходы = Ложь;
	Элемент.РасходыНаНМАиНИОКР = Ложь;
	Элемент.РасходыНаОбъектыСтроительства = Ложь;
	Элемент.РасходыНаОбъектыЭксплуатации = Ложь;
	Элемент.РеквизитДопУпорядочивания = 10;
	Элемент.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
	Элемент.РасходыНаЗаказыНаРемонт = Ложь;
	#КонецОбласти


	#Область КурсовыеРазницы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.АналитикаКурсовыхРазниц"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Курсовые разницы';uk='Курсові різниці'",КодОсновногоЯзыка);
	Элемент.Код = "000000003";
	Элемент.АналитикаРасходовЗаказРеализация = Ложь;
	Элемент.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	//++ НЕ УТ
	//-- НЕ УТ
	Элемент.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность;
    Элемент.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	Элемент.ОграничитьИспользование = Ложь;
	Элемент.ПрочиеРасходы = Ложь;
	Элемент.РасходыНаНМАиНИОКР = Ложь;
	Элемент.РасходыНаОбъектыСтроительства = Ложь;
	Элемент.РасходыНаОбъектыЭксплуатации = Ложь;
	Элемент.РеквизитДопУпорядочивания = 3;
	Элемент.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
	Элемент.РасходыНаЗаказыНаРемонт = Ложь;
	#КонецОбласти

	#Область НачисленныйНДСПриВыкупеМногооборотнойТары
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НачисленныйНДСПриВыкупеМногооборотнойТары";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Партнеры"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Начисленный НДС при выкупе многооборотной тары';uk='Нарахований ПДВ при викупі багатооборотної тари'",КодОсновногоЯзыка);
	Элемент.Код = "000000005";
	Элемент.АналитикаРасходовЗаказРеализация = Ложь;
	Элемент.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
    Элемент.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	Элемент.ОграничитьИспользование = Ложь;
	Элемент.ПрочиеРасходы = Ложь;
	Элемент.РасходыНаНМАиНИОКР = Ложь;
	Элемент.РасходыНаОбъектыСтроительства = Ложь;
	Элемент.РасходыНаОбъектыЭксплуатации = Ложь;
	Элемент.РеквизитДопУпорядочивания = 5;
	Элемент.ТипРасходов = Перечисления.ТипыРасходов.ПродажаТоваров;
	Элемент.РасходыНаЗаказыНаРемонт = Ложь;
	#КонецОбласти


	#Область ПогрешностьРасчетаСебестоимости
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПогрешностьРасчетаСебестоимости";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.НаправленияДеятельности"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Погрешность расчета себестоимости';uk='Похибка розрахунку собівартості'",КодОсновногоЯзыка);
	Элемент.Код = "000000002";
	Элемент.АналитикаРасходовЗаказРеализация = Ложь;
	Элемент.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
    Элемент.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	Элемент.ОграничитьИспользование = Ложь;
	Элемент.ПрочиеРасходы = Ложь;
	Элемент.РасходыНаНМАиНИОКР = Ложь;
	Элемент.РасходыНаОбъектыСтроительства = Ложь;
	Элемент.РасходыНаОбъектыЭксплуатации = Ложь;
	Элемент.РеквизитДопУпорядочивания = 2;
	Элемент.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
	Элемент.РасходыНаЗаказыНаРемонт = Ложь;
	#КонецОбласти

    #Область ПрибыльУбытокПрошлыхЛет
    Элемент = Элементы.Добавить();
    Элемент.ИмяПредопределенныхДанных = "ПрибыльУбытокПрошлыхЛет";
    МассивТипов = Новый Массив;
    МассивТипов.Добавить(Тип("СправочникСсылка.НаправленияДеятельности"));
    ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
    Элемент.ТипЗначения = ОписаниеТипа;
    Элемент.Наименование = НСтр("ru='Прибыль (убыток) прошлых лет';uk='Прибуток (збиток) минулих років'",КодОсновногоЯзыка);
    Элемент.Код = "000000011";
    Элемент.АналитикаРасходовЗаказРеализация = Ложь;
    Элемент.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
    Элемент.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
    Элемент.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность;
	Элемент.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
    Элемент.ДоговорыКредитовИДепозитов = Ложь;
    Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
    Элемент.ОграничитьИспользование = Ложь;
	Элемент.ПрочиеРасходы = Ложь;
    Элемент.РасходыНаНМАиНИОКР = Ложь;
    Элемент.РасходыНаОбъектыСтроительства = Ложь;
    Элемент.РасходыНаОбъектыЭксплуатации = Ложь;
    Элемент.РеквизитДопУпорядочивания = 7;
    Элемент.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
    Элемент.РасходыНаЗаказыНаРемонт = Ложь;
    #КонецОбласти

	#Область РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.НаправленияДеятельности"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Разницы стоимости возврата и фактической стоимости товаров';uk='Різниці вартості повернення і фактичної вартості товарів'",КодОсновногоЯзыка);
	Элемент.Код = "000000004";
	Элемент.АналитикаРасходовЗаказРеализация = Ложь;
	Элемент.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
    Элемент.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	Элемент.ОграничитьИспользование = Ложь;
	Элемент.ПрочиеРасходы = Ложь;
	Элемент.РасходыНаНМАиНИОКР = Ложь;
	Элемент.РасходыНаОбъектыСтроительства = Ложь;
	Элемент.РасходыНаОбъектыЭксплуатации = Ложь;
	Элемент.РеквизитДопУпорядочивания = 6;
	Элемент.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
	Элемент.РасходыНаЗаказыНаРемонт = Ложь;
	#КонецОбласти


	#Область СебестоимостьПродаж
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СебестоимостьПродаж";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.НаправленияДеятельности"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Себестоимость продаж';uk='Собівартість продажів'",КодОсновногоЯзыка);
	Элемент.Код = "000000001";
	Элемент.АналитикаРасходовЗаказРеализация = Ложь;
	Элемент.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
    Элемент.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	Элемент.ОграничитьИспользование = Ложь;
	Элемент.ПрочиеРасходы = Ложь;
	Элемент.РасходыНаНМАиНИОКР = Ложь;
	Элемент.РасходыНаОбъектыСтроительства = Ложь;
	Элемент.РасходыНаОбъектыЭксплуатации = Ложь;
	Элемент.РеквизитДопУпорядочивания = 1;
	Элемент.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
	Элемент.РасходыНаЗаказыНаРемонт = Ложь;
    Элемент.СебестоимостьРеализации = Истина;
	#КонецОбласти


	#Область ФормированиеРезервовПоСомнительнымДолгам
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ФормированиеРезервовПоСомнительнымДолгам";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Формирование резервов по сомнительным долгам';uk='Формування резервів по сумнівних боргах'",КодОсновногоЯзыка);
	Элемент.Код = "000000008";
	Элемент.АналитикаРасходовЗаказРеализация = Ложь;
	Элемент.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
    Элемент.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	Элемент.ОграничитьИспользование = Ложь;
	Элемент.ПрочиеРасходы = Ложь;
	Элемент.РасходыНаНМАиНИОКР = Ложь;
	Элемент.РасходыНаОбъектыСтроительства = Ложь;
	Элемент.РасходыНаОбъектыЭксплуатации = Ложь;
	Элемент.РеквизитДопУпорядочивания = 8;
	Элемент.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
	Элемент.РасходыНаЗаказыНаРемонт = Ложь;
	#КонецОбласти
    
    
	#Область КурсовыеРазницыНеоперационные
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыНеоперационные";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.АналитикаКурсовыхРазниц"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Курсовые разницы';uk='Курсові різниці'",КодОсновногоЯзыка);
	Элемент.Код = "000000009";
	Элемент.АналитикаРасходовЗаказРеализация = Ложь;
	Элемент.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность;
    Элемент.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	Элемент.ОграничитьИспользование = Ложь;
	Элемент.ПрочиеРасходы = Ложь;
	Элемент.РасходыНаНМАиНИОКР = Ложь;
	Элемент.РасходыНаОбъектыСтроительства = Ложь;
	Элемент.РасходыНаОбъектыЭксплуатации = Ложь;
	Элемент.РеквизитДопУпорядочивания = 11;
	Элемент.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
	Элемент.РасходыНаЗаказыНаРемонт = Ложь;
    Элемент.СебестоимостьРеализации = Ложь;
	#КонецОбласти
    
	#Область ЗатратыПриПокупкеИПродажеИностраннойВалюты
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЗатратыПриПокупкеИПродажеИностраннойВалюты";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Затраты при покупке и продаже иностранной валюты';uk='Витрати при купівлі і продажу іноземної валюти'",КодОсновногоЯзыка);
	Элемент.Код = "000000006";
	Элемент.АналитикаРасходовЗаказРеализация = Ложь;
	Элемент.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВариантРаспределенияРасходовУпр  = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
    Элемент.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	Элемент.ОграничитьИспользование = Ложь;
	Элемент.ПрочиеРасходы = Ложь;
	Элемент.РасходыНаНМАиНИОКР = Ложь;
	Элемент.РасходыНаОбъектыСтроительства = Ложь;
	Элемент.РасходыНаОбъектыЭксплуатации = Ложь;
	Элемент.РеквизитДопУпорядочивания = 12;
	Элемент.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
	Элемент.РасходыНаЗаказыНаРемонт = Ложь;
    Элемент.СебестоимостьРеализации = Ложь;
	#КонецОбласти
    
	#Область РаспределениеНачальныхОстатковНЗП
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "РаспределениеНачальныхОстатковНЗП";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ПрочиеРасходы"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Распределение начальных остатков НЗП';uk='Розподіл початкових залишків НЗВ'",КодОсновногоЯзыка);
	Элемент.Код = "000000007";
	Элемент.АналитикаРасходовЗаказРеализация = Ложь;
	Элемент.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты;
	Элемент.ВариантРаспределенияРасходовУпр  = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты;
	Элемент.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
    Элемент.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	Элемент.ОграничитьИспользование = Ложь;
	Элемент.ПрочиеРасходы = Ложь;
	Элемент.РасходыНаНМАиНИОКР = Ложь;
	Элемент.РасходыНаОбъектыСтроительства = Ложь;
	Элемент.РасходыНаОбъектыЭксплуатации = Ложь;
	Элемент.РеквизитДопУпорядочивания = 13;
	Элемент.ТипРасходов = Перечисления.ТипыРасходов.Производственные;
	Элемент.РасходыНаЗаказыНаРемонт = Ложь;
    Элемент.СебестоимостьРеализации = Ложь;
	#КонецОбласти
    
	#Область РасходыПриПерерасчетеПропорциональногоНДС
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "РасходыПриПерерасчетеПропорциональногоНДС";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Расходы при перерасчете пропорционального НДС';uk='Витрати при перерахунку пропорційного ПДВ'",КодОсновногоЯзыка);
	Элемент.Код = "000000010";
	Элемент.АналитикаРасходовЗаказРеализация = Ложь;
	Элемент.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВариантРаспределенияРасходовУпр  = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	Элемент.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
    Элемент.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	Элемент.ОграничитьИспользование = Ложь;
	Элемент.ПрочиеРасходы = Ложь;
	Элемент.РасходыНаНМАиНИОКР = Ложь;
	Элемент.РасходыНаОбъектыСтроительства = Ложь;
	Элемент.РасходыНаОбъектыЭксплуатации = Ложь;
	Элемент.РеквизитДопУпорядочивания = 14;
	Элемент.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
	Элемент.РасходыНаЗаказыНаРемонт = Ложь;
    Элемент.СебестоимостьРеализации = Ложь;
	#КонецОбласти
    

КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - ПланВидовХарактеристикОбъект.СтатьиРасходов - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

//++ НЕ УТ

// Заполняет отбор в параметрах при обработке получения данных выбора и открытии формы выбора.
//
// Параметры:
// 		Параметры - Структура - Структура параметров в формате параметров формы выбора или процедуры "ОбработкаПолученияДанныхВыбора".
//
Процедура ОбработкаПараметровВыбора(Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет реквизиты параметров настройки счетов учета расходов, которые влияют на настройку,
// 	соответствующими им именам реквизитов аналитики учета.
//
// Параметры:
// 	СоответствиеИмен - Соответствие - ключом выступает имя реквизита, используемое в настройке счетов учета,
// 		значением является соответствующее имя реквизита аналитики учета.
// 
Процедура ЗаполнитьСоответствиеРеквизитовНастройкиСчетовУчета(СоответствиеИмен) Экспорт
	
	СоответствиеИмен.ВидДеятельностиРасходов = "ВидДеятельностиРасходов";
	СоответствиеИмен.ВариантРаспределенияРасходовРегл = "ВариантРаспределенияРасходовРегл";
	СоответствиеИмен.РасходыНаОбъектыЭксплуатации = "РасходыНаОбъектыЭксплуатации";
	СоответствиеИмен.РасходыНаОбъектыСтроительства = "РасходыНаОбъектыСтроительства";
	СоответствиеИмен.РасходыНаНМАиНИОКР = "РасходыНаНМАиНИОКР";
	СоответствиеИмен.РасходыНаРемонтОС = "РасходыНаРемонтОС";
	СоответствиеИмен.СебестоимостьРеализации = "СебестоимостьРеализации";
	СтатьиРасходовЛокализация.ЗаполнитьСоответствиеРеквизитовНастройкиСчетовУчета(СоответствиеИмен);
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТВызовСервера.ОбработкаПолученияДанныхВыбораПВХСтатьиРасходов(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииЗаполненияАналитик

Функция ОбязательныеСтатьи(МассивСтатей)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статьи.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|ГДЕ
	|	Статьи.Ссылка В (&МассивСтатей)
	|	И Статьи.КонтролироватьЗаполнениеАналитики");
	
	Запрос.УстановитьПараметр("МассивСтатей", МассивСтатей);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ИменаРеквизитовСтатьиИАналитики(СтрокаРеквизитов, НепроверяемыеРеквизиты = Неопределено, ПрефиксТабличнойЧасти = "")
	
	Если ПустаяСтрока(СтрокаРеквизитов) Тогда
		Если НепроверяемыеРеквизиты <> Неопределено Тогда
			НепроверяемыеРеквизиты.Добавить(ПрефиксТабличнойЧасти + "АналитикаРасходов");
		КонецЕсли;
		Возврат Новый Структура("СтатьяРасходов", "АналитикаРасходов");
	КонецЕсли;
	
	СтруктураОбработки = Новый Структура(СтрокаРеквизитов);
	СтруктураВозврата = Новый Структура;
	ПредыдущийКлюч = Неопределено;
	Для Каждого КлючИЗначение Из СтруктураОбработки Цикл
		Если ПредыдущийКлюч = Неопределено Тогда
			ПредыдущийКлюч = КлючИЗначение.Ключ;
		Иначе
			СтруктураВозврата.Вставить(ПредыдущийКлюч, КлючИЗначение.Ключ);
			ПредыдущийКлюч = Неопределено;
			Если НепроверяемыеРеквизиты <> Неопределено Тогда
				НепроверяемыеРеквизиты.Добавить(ПрефиксТабличнойЧасти + КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ПроверкаЗаполненияАналитикОбъекта(Объект, Реквизиты, НепроверяемыеРеквизиты, Ошибки)
	
	СтруктураРеквизитов = ИменаРеквизитовСтатьиИАналитики(Реквизиты, НепроверяемыеРеквизиты);
	МассивСтатей = Новый Массив;
	
	// Определим список статей для контроля
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		Статья = Объект[КлючИЗначение.Ключ];
		
		Если ЗначениеЗаполнено(Статья) Тогда
			МассивСтатей.Добавить(Статья);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим заполнение аналитики
	ОбязательныеСтатьи = ОбязательныеСтатьи(МассивСтатей);
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		Статья = Объект[КлючИЗначение.Ключ];
		Аналитика = Объект[КлючИЗначение.Значение];
		
		Если Не (ОбязательныеСтатьи.Найти(Статья) = Неопределено Или ЗначениеЗаполнено(Аналитика)) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				Ошибки.ПрефиксОбъекта + КлючИЗначение.Значение,
				НСтр("ru='Аналитика расходов не заполнена';uk='Аналітика витрат не заповнена'"), "");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияАналитикТЧОбъекта(Объект, Реквизиты, НепроверяемыеРеквизиты, Ошибки)
	
	// Определим список статей для контроля
	ОбщийМассивСтатей = Новый Массив;
	Для Каждого ОписаниеТЧ Из Реквизиты Цикл
		
		ИмяТЧ = ОписаниеТЧ.Ключ;
		
		СтруктураРеквизитов = ИменаРеквизитовСтатьиИАналитики(ОписаниеТЧ.Значение, НепроверяемыеРеквизиты, ИмяТЧ + ".");
		
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			
			МассивСтатей = Объект[ИмяТЧ].ВыгрузитьКолонку(КлючИЗначение.Ключ);
			Для Каждого Статья Из МассивСтатей Цикл
				ОбщийМассивСтатей.Добавить(Статья);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверим заполнение аналитики
	ОбязательныеСтатьи = ОбязательныеСтатьи(ОбщийМассивСтатей);
	Для Каждого ОписаниеТЧ Из Реквизиты Цикл // Табличные части
		
		ИмяТЧ = ОписаниеТЧ.Ключ;
		ТЧ = Объект[ИмяТЧ];
		
		МетаданныеОбъекта = Объект.Метаданные();
		ТабличнаяЧасть = МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТЧ);
		
		СтруктураРеквизитов = ИменаРеквизитовСтатьиИАналитики(ОписаниеТЧ.Значение, Неопределено, ИмяТЧ + ".");
		
		Для Индекс = 0 По ТЧ.Количество() - 1 Цикл // Строки табличной части
			
			СтрокаТЧ = ТЧ[Индекс];
			
			Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
				
				РеквизитАналитика = ТабличнаяЧасть.Реквизиты.Найти(КлючИЗначение.Значение);
				
				Статья = СтрокаТЧ[КлючИЗначение.Ключ];
				Аналитика = СтрокаТЧ[КлючИЗначение.Значение];
				
				Если Не (ОбязательныеСтатьи.Найти(Статья) = Неопределено Или ЗначениеЗаполнено(Аналитика)) Тогда
					
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						Ошибки.ПрефиксОбъекта + ИмяТЧ + "[%1]." + КлючИЗначение.Значение,
						СтрШаблон(НСтр("ru='Не заполнено поле ""%1"" в строке %2 списка ""%3""';uk='Не заповнене поле ""%1"" в рядку %2 списку ""%3""'"), 
							РеквизитАналитика.Синоним, СтрокаТЧ.НомерСтроки, ТабличнаяЧасть.Синоним),
						ИмяТЧ,
						Индекс,
						СтрШаблон(НСтр("ru='Не заполнено поле ""%1"" в строке %2 списка ""%3""';uk='Не заповнене поле ""%1"" в рядку %2 списку ""%3""'"), 
							РеквизитАналитика.Синоним, СтрокаТЧ.НомерСтроки, ТабличнаяЧасть.Синоним));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.300";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ПланыВидовХарактеристик.СтатьиРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию22";
	Обработчик.ЧитаемыеОбъекты = ""
	//++ НЕ УТ
		+ "РегистрСведений.ПорядокОтраженияРасходов,"
	//-- НЕ УТ
		+ "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.ИзменяемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.Комментарий = НСтр("ru='В плане видов характеристик ""Статьи расходов"" заполняет реквизит ПравилоРаспределенияНаСебестоимость.';uk='У плані видів параметрів ""Статті витрат"" заповнює реквізит ПравилоРаспределенияНаСебестоимость.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.4.350";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ПланыВидовХарактеристик.СтатьиРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию24";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26d2c401-6f15-4fb1-98bd-5689fb96260f");
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.ИзменяемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.Комментарий = НСтр("ru='В статьях расходов заполняются новые реквизиты ""Тип расходов"", ""Вариант распределения расходов упр"" и ""Характер производственных затрат"". 
                                   |Создает новые элементы справочника ""Правила распределения расходов"" компонуя правила распределения указанные в статье расходов. 
                                   |Заполняет реквизиты значениями по умолчанию для новых статей ""Расходы при конвертации валюты"".'
                                   |;uk='У статтях витрат заповнюються нові реквізити ""Тип витрат"", ""Варіант розподілу витрат упр"" та ""Характер виробничих витрат"". Створює нові елементи довідника ""Правила розподілу витрат"" компонуючи правила розподілу, які зазначені у статті витрат. Заповнює реквізити значеннями по умовчанню для нових статей ""Витрати при конвертації валюти"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ПланыВидовХарактеристик.СтатьиРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "3.5.4.400";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7e4eea7f-3a6b-4f16-9ec6-729c9ff6ac59");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ПланыВидовХарактеристик.СтатьиРасходов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru='Для статей расходов с вариантам распределения на РБП, на фин. рез. заполняются реквизиты ПравилоРаспределенияРасходовРегл/Упр, по значениям реквизитов УдалитьСпособРаспределенияПоНаправлениямДеятельности и УдалитьСтатьяРасходов.';uk='Для статей витрат з варіантом розподілу на ВМП, на фін. рез. заповнюються реквізити Правило розподілу  витрат Регл /Упр за значеннями реквізитів УдалітьСпособРаспределеніяПоНаправленіямДеятельності і УдалитьСтатьяРасходов.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбновитьПредставленияПредопределенныхЭлементов";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ПравилаРаспределенияРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

Процедура ЗаполнитьПредопределенныеСтатьиРасходов() Экспорт

	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы);
    МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницыНеоперационные);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.НачисленныйНДСПриВыкупеМногооборотнойТары);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
    МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПрибыльУбытокПрошлыхЛет);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ВыбытияТоваровВПрошлыхПериодах);
    МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ЗатратыПриПокупкеИПродажеИностраннойВалюты);
    МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РасходыПриПерерасчетеПропорциональногоНДС);
    МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РаспределениеНачальныхОстатковНЗП);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.АмортизацияВременнойРазницы2020);
	
//++ НЕ УТ
	Для Каждого СтатьяРасходов Из МассивСтатей Цикл
		
		Если СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы Тогда 

			СчетУчета = ПланыСчетов.Хозрасчетный.ЗатратыОтОперационнойКурсовойРазницы;
			
		ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницыНеоперационные Тогда
				
			СчетУчета = ПланыСчетов.Хозрасчетный.ПотериОтНеоперационныхКурсовыхРазниц;
			
		ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам Тогда 
				
			СчетУчета = ПланыСчетов.Хозрасчетный.СомнительныеИБезнадежныеДолги;

		ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ЗатратыПриПокупкеИПродажеИностраннойВалюты Тогда 
				
			СчетУчета = ПланыСчетов.Хозрасчетный.СебестоимостьРеализованнойИностраннойВалюты;
			
	    ИначеЕсли СтатьяРасходов.Ссылка = ПланыВидовХарактеристик.СтатьиРасходов.РаспределениеНачальныхОстатковНЗП Тогда
				
			СчетУчета = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;   
			
	    ИначеЕсли СтатьяРасходов.Ссылка = ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж Тогда
				
			СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			
		Иначе // ПогрешностьРасчетаСебестоимости, РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров, НачисленныйНДСПриВыкупеМногооборотнойТары

			СчетУчета = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности;
		
 		КонецЕсли;
			
		Если ЗначениеЗаполнено(СчетУчета) Тогда
			Отказ = Ложь;
			СтруктураСчетовУчета = Новый Структура;
			СтруктураСчетовУчета.Вставить("СчетУчета_Расходы", СчетУчета);
			
			СтруктураИзмерений = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
			СтруктураИзмерений.АналитикаУчета = СтатьяРасходов.Ссылка;
			РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СохранитьЗначенияСчетовУчета(СтруктураИзмерений, СтруктураСчетовУчета, Отказ);
		КонецЕсли;
			
	КонецЦикла; 
//-- НЕ УТ

КонецПроцедуры

// Обработчик обновления УТ 3.5.4
// Заполняет новые реквизиты ТипРасходов, ВариантРаспределенияРасходовУпр, ХарактерПроизводственныхЗатрат. 
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланВидовХарактеристик.СтатьиРасходов";
	МетаданныеОбъекта = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДополнительныеПараметрыВыборкиДанных = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыВыборкиДанных.ВыбиратьПорциями = Ложь;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь,
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметрыВыборкиДанных
	);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОбъектыДляОбработки.Ссылка КАК Ссылка,
		|	Реквизиты.ВерсияДанных КАК ВерсияДанных,
		|	1 КАК НомерУсловия
		|ПОМЕСТИТЬ ВТУсловия
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Реквизиты
		|		ПО ОбъектыДляОбработки.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|			ГДЕ
		|				(НЕ СтатьиРасходов.УдалитьСтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
		|					ИЛИ СтатьиРасходов.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП))
		|				И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|							И СтатьиРасходов.ПравилоРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
		|						ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|							И СтатьиРасходов.ПравилоРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектыДляОбработки.Ссылка,
		|	Реквизиты.ВерсияДанных,
		|	2
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Реквизиты
		|		ПО ОбъектыДляОбработки.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|			ГДЕ
		|				(НЕ СтатьиРасходов.УдалитьСпособРаспределенияПоНаправлениямДеятельности = ЗНАЧЕНИЕ(Справочник.СпособыРаспределенияПоНаправлениямДеятельности.ПустаяСсылка)
		|					ИЛИ СтатьиРасходов.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат))
		|				И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
		|							И СтатьиРасходов.ПравилоРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
		|						ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
		|							И СтатьиРасходов.ПравилоРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектыДляОбработки.Ссылка,
		|	Реквизиты.ВерсияДанных,
		|	3
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Реквизиты
		|		ПО ОбъектыДляОбработки.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|			ГДЕ
		|				СтатьиРасходов.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства)
		|				И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
		|							И СтатьиРасходов.ПравилоРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
		|						ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
		|							И СтатьиРасходов.ПравилоРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	НомерУсловия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыДляОбработки.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(НаРБП.ВерсияДанных, ЕСТЬNULL(НаНД.ВерсияДанных, НаПроизводство.ВерсияДанных)) КАК ВерсияДанных,
		|	ВЫБОР
		|		КОГДА Реквизиты.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат)
		|			ТОГДА Реквизиты.УдалитьПравилоРаспределенияРасходов
		|		ИНАЧЕ
		|			ЕСТЬNULL(ПравилаНаНД.Ссылка, ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка))
		|	КОНЕЦ КАК ПравилоНаНД,
		|	ВЫБОР
		|		КОГДА Реквизиты.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП)
		|			ТОГДА Реквизиты.УдалитьПравилоРаспределенияРасходов
		|		ИНАЧЕ
		|			ЕСТЬNULL(ПравилаНаРБП.Ссылка, ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка))
		|	КОНЕЦ КАК ПравилоНаРБП,
		|	ВЫБОР
		|		КОГДА Реквизиты.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства)
		|			ТОГДА Реквизиты.УдалитьПравилоРаспределенияРасходов
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
		|	КОНЕЦ КАК ПравилоНаПроизводство,
		|	Реквизиты.ВариантРаспределенияРасходовРегл КАК ВариантРаспределенияРасходовРегл,
		|	Реквизиты.ВариантРаспределенияРасходовУпр КАК ВариантРаспределенияРасходовУпр
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Реквизиты
		|		ПО ОбъектыДляОбработки.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПравилаНаРБП
		|		ПО Реквизиты.УдалитьСтатьяРасходов = ПравилаНаРБП.СтатьяСписанияРБП
		|			И НЕ Реквизиты.УдалитьСтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПравилаНаНД
		|		ПО Реквизиты.УдалитьСпособРаспределенияПоНаправлениямДеятельности = ПравилаНаНД.УдалитьСпособРаспределения
		|			И НЕ Реквизиты.УдалитьСпособРаспределенияПоНаправлениямДеятельности = ЗНАЧЕНИЕ(Справочник.СпособыРаспределенияПоНаправлениямДеятельности.ПустаяСсылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловия КАК НаРБП
		|		ПО ОбъектыДляОбработки.Ссылка = НаРБП.Ссылка
		|			И (НаРБП.НомерУсловия = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловия КАК НаНД
		|		ПО ОбъектыДляОбработки.Ссылка = НаНД.Ссылка
		|			И (НаНД.НомерУсловия = 2)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловия КАК НаПроизводство
		|		ПО ОбъектыДляОбработки.Ссылка = НаПроизводство.Ссылка
		|			И (НаПроизводство.НомерУсловия = 3)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Выборка.Ссылка,
				Выборка.ВерсияДанных,
				Параметры.Очередь
			);     
			
			Если Объект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если Выборка.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов Тогда
				Объект.ПравилоРаспределенияРасходовРегл = Выборка.ПравилоНаРБП;
			ИначеЕсли Выборка.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
				Объект.ПравилоРаспределенияРасходовРегл = Выборка.ПравилоНаНД;
			ИначеЕсли Выборка.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
				Объект.ПравилоРаспределенияРасходовРегл = Выборка.ПравилоНаПроизводство;
			КонецЕсли;
			
			Если Выборка.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов Тогда
				Объект.ПравилоРаспределенияРасходовУпр = Выборка.ПравилоНаРБП;
			ИначеЕсли Выборка.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
				Объект.ПравилоРаспределенияРасходовУпр = Выборка.ПравилоНаНД;
			ИначеЕсли Выборка.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
				Объект.ПравилоРаспределенияРасходовУпр = Выборка.ПравилоНаПроизводство;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать элемент: %Ссылка% по причине: %Причина%';uk='Не вдалося обробити елемент:%Ссылка% через: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,
				Выборка.Ссылка,
				ТекстСообщения
			);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Регистрирует данные для обработчика обновления.
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = " 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтатьиРасходов.Ссылка КАК Ссылка
	|	ИЗ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ГДЕ
	|		(НЕ СтатьиРасходов.УдалитьСтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|			ИЛИ СтатьиРасходов.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП))
	|		И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|					И СтатьиРасходов.ПравилоРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
	|				ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|					И СтатьиРасходов.ПравилоРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтатьиРасходов.Ссылка
	|	ИЗ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ГДЕ
	|		(НЕ СтатьиРасходов.УдалитьСпособРаспределенияПоНаправлениямДеятельности = ЗНАЧЕНИЕ(Справочник.СпособыРаспределенияПоНаправлениямДеятельности.ПустаяСсылка)
	|			ИЛИ СтатьиРасходов.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат))
	|		И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|					И СтатьиРасходов.ПравилоРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
	|				ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|					И СтатьиРасходов.ПравилоРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтатьиРасходов.Ссылка
	|	ИЗ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ГДЕ
	|		СтатьиРасходов.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства)
	|		И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|					И СтатьиРасходов.ПравилоРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
	|				ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|					И СтатьиРасходов.ПравилоРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка))) КАК ВложенныйЗапрос
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
	);
	
КонецПроцедуры


// Регистрирует к обработке в обработчике обновления
//
Процедура ЗарегистрироватьПредопределенныеЭлементыДляОбновления(Параметры) Экспорт
	
	МультиязычностьСервер.ЗарегистрироватьПредопределенныеЭлементыДляОбновления(Параметры, Метаданные.ПланыВидовХарактеристик.СтатьиРасходов);
	
КонецПроцедуры

Процедура ОбновитьПредставленияПредопределенныхЭлементов(Параметры) Экспорт
	
	МультиязычностьСервер.ОбновитьПредставленияПредопределенныхЭлементов(Параметры, Метаданные.ПланыВидовХарактеристик.СтатьиРасходов);
	
КонецПроцедуры



// Обработчик обновления УТ 3.5.4 (монопольный)
// Заполняет реквизит ПравилоРаспределенияНаСебестоимость
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию22() Экспорт
	
	ЗаполнитьНовыеРеквизитыУТ();
	
КонецПроцедуры

Процедура ЗаполнитьНовыеРеквизитыУТ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ЭтоГруппа = ЛОЖЬ
	|	И (СтатьиРасходов.ВидДеятельностиРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиРасходов.ПустаяСсылка)
	|		ИЛИ СтатьиРасходов.ПравилоРаспределенияНаСебестоимость = ЗНАЧЕНИЕ(Перечисление.ПравилаРаспределенияНаСебестоимостьТоваров.ПустаяСсылка))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(Объект.ВидДеятельностиРасходов) Тогда
			Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ПравилоРаспределенияНаСебестоимость) Тогда
			Объект.ПравилоРаспределенияНаСебестоимость = Перечисления.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноКоличеству;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления УТ 3.5.4 (оперативно)
// Заполняет новые реквизиты ТипРасходов, ВариантРаспределенияРасходовУпр, ХарактерПроизводственныхЗатрат. 
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию24() Экспорт
	
	МетаданныеОбъекта = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	//++ НЕ УТ
	|	СтатьиРасходов.УдалитьСпособРаспределенияНаПроизводственныеЗатраты 			КАК СпособРаспределенияНаПроизводственныеЗатраты,
	|	ЕСТЬNULL(ПоПодразделениям.БазаРаспределения, 
	|		ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ПустаяСсылка)) 		КАК БазаРаспределенияПоПодразделениям,
	|	ЕСТЬNULL(ПоПартиям.БазаРаспределения, 
	|		ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ПустаяСсылка)) 		КАК БазаРаспределенияПоПартиям,
	|	ЕСТЬNULL(ПоПодразделениям.УдалитьНаправлениеРаспределения, 
	|		ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияСтатейРасходов.ПустаяСсылка)) КАК НаправлениеРаспределения,
	|	ЕСТЬNULL(ПоПартиям.СтатьяКалькуляции, 
	|		ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка))					КАК СтатьяКалькуляции,
	|	ПоПодразделениям.Ссылка 													КАК Показатель,
	|	ЕСТЬNULL(ПоПартиям.Наименование, """") КАК НаименованиеПравилаПоПартиям,
	|	ЕСТЬNULL(ПоПодразделениям.Наименование, """") КАК НаименованиеПравилаПоПодразделениям,
	|	ПоПодразделениям.ОтборПоПодразделениям.(
	|		Подразделение КАК Подразделение
	|	) КАК ОтборПоПодразделениям,
	|	ПоПартиям.ОтборПоМатериалам.(
	|		Материал КАК Материал
	|	) КАК ОтборПоМатериалам,
	|	ПоПартиям.ОтборПоВидамРабот.(
	|		ВидРабот КАК ВидРабот
	|	) КАК ОтборПоВидамРабот,
	|	ПоПартиям.ОтборПоГруппамПродукции.(
	|		ГруппаПродукции КАК ГруппаПродукции
	|	) КАК ОтборПоГруппамПродукции,
	|	ВЫБОР КОГДА (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|			ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты))
	|		И НЕ СтатьиРасходов.УдалитьСпособРаспределенияНаПроизводственныеЗатраты = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияСтатейРасходов.ПустаяСсылка)
	|		И СтатьиРасходов.УдалитьПравилоРаспределенияРасходов = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
	|	ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК ЗаполнитьПравилоРаспределения,
	//-- НЕ УТ
	|	СтатьиРасходов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	//++ НЕ УТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПоПодразделениям
	|		ПО (СтатьиРасходов.УдалитьПравилоРаспределенияПоПодразделениям = ПоПодразделениям.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПоПартиям
	|		ПО (СтатьиРасходов.УдалитьПравилоРаспределенияПоЭтапамПроизводства = ПоПартиям.Ссылка)
	//-- НЕ УТ
	|ГДЕ
	|	СтатьиРасходов.ЭтоГруппа = ЛОЖЬ
	|	И (СтатьиРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ПустаяСсылка)
	|		ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр
	|			= ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)
	//++ НЕ УТ
	|		ИЛИ СтатьиРасходов.ХарактерПроизводственныхЗатрат
	|			= ЗНАЧЕНИЕ(Перечисление.ХарактерПроизводственныхЗатрат.ПустаяСсылка)
	|		ИЛИ СтатьиРасходов.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам)
	//-- НЕ УТ
	|		ИЛИ СтатьиРасходов.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ВыбытияТоваровВПрошлыхПериодах)
	|			И СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)
	|		ИЛИ СтатьиРасходов.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.РасходыПриКонвертацииВалюты)
	|			И СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)
	|	)
	//++ НЕ УТ
	|	ИЛИ ((СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|			ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты))
	|	И НЕ СтатьиРасходов.УдалитьСпособРаспределенияНаПроизводственныеЗатраты = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияСтатейРасходов.ПустаяСсылка)
	|	И СтатьиРасходов.УдалитьПравилоРаспределенияРасходов = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка))
	|	
	//-- НЕ УТ
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Объект.Ссылка = ПланыВидовХарактеристик.СтатьиРасходов.ВыбытияТоваровВПрошлыхПериодах Тогда
			Объект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
			Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
			Объект.ВидЦенности = Перечисления.ВидыЦенностей.Товары;
			
		ИначеЕсли Объект.Ссылка = ПланыВидовХарактеристик.СтатьиРасходов.РасходыПриКонвертацииВалюты Тогда
			
			Объект.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.АналитикаКурсовыхРазниц");
			Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
			Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
			Объект.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			//++ НЕ УТ
			//-- НЕ УТ
				
		ИначеЕсли Объект.Ссылка = ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам Тогда
			
			Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ВариантРаспределенияРасходовУпр) Тогда
			Объект.ВариантРаспределенияРасходовУпр = Объект.ВариантРаспределенияРасходовРегл;
		КонецЕсли;
		
		//++ НЕ УТ
		Если Не ЗначениеЗаполнено(Объект.ХарактерПроизводственныхЗатрат) Тогда
			Объект.ХарактерПроизводственныхЗатрат = Перечисления.ХарактерПроизводственныхЗатрат.Постоянные;
		КонецЕсли;
		//-- НЕ УТ
		
		Если Не ЗначениеЗаполнено(Объект.ТипРасходов) Тогда
			Если Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ВводОстатков"))
			 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ЗаказПоставщику"))
			 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"))
			 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")) Тогда
			 
			 	Объект.ТипРасходов = Перечисления.ТипыРасходов.ЗакупкаТоваров;
				
			ИначеЕсли Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады"))
			 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура"))
			 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ЗаказНаПеремещение"))
			 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПеремещениеТоваров"))
			 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ЗаказНаСборку"))
			 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.СборкаТоваров")) Тогда
			 
			 	Объект.ТипРасходов = Перечисления.ТипыРасходов.СкладскоеХранение;
				
			ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
				
				Объект.ТипРасходов = Перечисления.ТипыРасходов.Производственные;
				
			ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы
			 ИЛИ Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы Тогда
			 
			    Объект.ТипРасходов = Перечисления.ТипыРасходов.ФормированиеСтоимостиВНА;	
				
			Иначе
				Если Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Партнеры"))
				 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.СделкиСКлиентами"))
				 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ЗаказКлиента"))
				 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
				 
				 	Объект.ТипРасходов = Перечисления.ТипыРасходов.ПродажаТоваров;
					
				Иначе
					
					Объект.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ВариантРаспределенияРасходовУпр) Тогда
			Объект.ВариантРаспределенияРасходовУпр = Объект.ВариантРаспределенияРасходовРегл;
		КонецЕсли;
		
		//++ НЕ УТ
		Если Не ЗначениеЗаполнено(Объект.ХарактерПроизводственныхЗатрат) Тогда
			Объект.ХарактерПроизводственныхЗатрат = Перечисления.ХарактерПроизводственныхЗатрат.Постоянные;
		КонецЕсли;
		//-- НЕ УТ
		
		Если Не ЗначениеЗаполнено(Объект.ТипРасходов) Тогда
			Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
				Если Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ВводОстатков"))
				 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ЗаказПоставщику"))
				 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"))
				 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")) Тогда
				 
				 	Объект.ТипРасходов = Перечисления.ТипыРасходов.ЗакупкаТоваров;
					
				Иначе
					
					Объект.ТипРасходов = Перечисления.ТипыРасходов.СкладскоеХранение;
					
				КонецЕсли;
			ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
				
				Объект.ТипРасходов = Перечисления.ТипыРасходов.Производственные; 
				
			ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы
			 ИЛИ Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы Тогда
			 
			 	Объект.ТипРасходов = Перечисления.ТипыРасходов.ФормированиеСтоимостиВНА;
				
			Иначе
				Если Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Партнеры"))
				 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.СделкиСКлиентами"))
				 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ЗаказКлиента"))
				 ИЛИ Объект.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
				 
				 	Объект.ТипРасходов = Перечисления.ТипыРасходов.ПродажаТоваров;
					
				Иначе
					
					Объект.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы; 
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		//++ НЕ УТ
		Если Не Выборка.ЗаполнитьПравилоРаспределения Тогда
		//-- НЕ УТ
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		//++ НЕ УТ
			Продолжить;
			
		КонецЕсли;
		
		НастройкиСтруктурой = НастройкиПравила();
		
		НастройкиСтруктурой.РаспределятьПоПартиям = Истина;
		НастройкиСтруктурой.БазаРаспределенияПоПартиям = Выборка.БазаРаспределенияПоПартиям;
		
		Если Выборка.СпособРаспределенияНаПроизводственныеЗатраты = Перечисления.СпособыРаспределенияСтатейРасходов.ПоПодразделениямИЭтапамПоПравилам Тогда
			
			НаименованиеПравила = НСтр("ru='%1/%2';uk='%1/%2'");
			НаименованиеПравила = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НаименованиеПравила,
				Выборка.НаименованиеПравилаПоПодразделениям,
				Выборка.НаименованиеПравилаПоПартиям
			);
				
			НастройкиСтруктурой.БазаРаспределенияПоПодразделениям = Выборка.БазаРаспределенияПоПодразделениям;
			НастройкиСтруктурой.РаспределятьПоПодразделениям = Истина;
			
			Если Выборка.БазаРаспределенияПоПодразделениям = Перечисления.ТипыБазыРаспределенияРасходов.ВводитсяЕжемесячно
				Или Выборка.БазаРаспределенияПоПодразделениям = Перечисления.ТипыБазыРаспределенияРасходов.ВводитсяПриИзменении Тогда
				НастройкиСтруктурой.Показатель = Выборка.Показатель;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.НаправлениеРаспределения) Тогда
				Если Выборка.НаправлениеРаспределения = Перечисления.СпособыРаспределенияСтатейРасходов.ПоПоказателюНаВышестоящееПодразделение Тогда
					НастройкиСтруктурой.НаправлениеРаспределения = Перечисления.НаправлениеРаспределенияПоПодразделениям.Вышестоящее;
				ИначеЕсли Выборка.НаправлениеРаспределения = Перечисления.СпособыРаспределенияСтатейРасходов.ПоПоказателюНаУказанныеПодразделения Тогда
					НастройкиСтруктурой.НаправлениеРаспределения = Перечисления.НаправлениеРаспределенияПоПодразделениям.Указанные;
				ИначеЕсли Выборка.НаправлениеРаспределения = Перечисления.СпособыРаспределенияСтатейРасходов.ПоПоказателюНаНижестоящиеПодразделения Тогда
					НастройкиСтруктурой.НаправлениеРаспределения = Перечисления.НаправлениеРаспределенияПоПодразделениям.Нижестоящие;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Выборка.СпособРаспределенияНаПроизводственныеЗатраты = Перечисления.СпособыРаспределенияСтатейРасходов.ПоПодразделениямВручнуюПоЭтапамПоПравилу Тогда
			
			НаименованиеПравила = НСтр("ru='По подразделениям вручную по партиям по %1';uk='По підрозділах вручну по партіях по %1'");
			НаименованиеПравила = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеПравила,
				Выборка.НаименованиеПравилаПоПартиям);
			НастройкиСтруктурой.РаспределятьПоПодразделениям = Истина;
			НастройкиСтруктурой.ПодразделенияУказаныВручную = Истина;
			
		ИначеЕсли Выборка.СпособРаспределенияНаПроизводственныеЗатраты = Перечисления.СпособыРаспределенияСтатейРасходов.НаДругиеСтатьиРасходов Тогда
			
			НаименованиеПравила = НСтр("ru='На другие статьи расходов';uk='На інші статті витрат'");
			НастройкиСтруктурой.РаспределятьНаСтатьи = Истина;
			НастройкиСтруктурой.РаспределятьПоПартиям = Ложь;
			НастройкиСтруктурой.БазаРаспределенияПоПартиям = Перечисления.ТипыБазыРаспределенияРасходов.ПустаяСсылка();
			
		ИначеЕсли Выборка.СпособРаспределенияНаПроизводственныеЗатраты = Перечисления.СпособыРаспределенияСтатейРасходов.ПоЭтапамВручнуюПоВсемПодразделениям Тогда
			
			НаименованиеПравила = НСтр("ru='Партии уточняются в документе';uk='Партії уточнюються в документі'");
			НастройкиСтруктурой.УточнятьПартииВДокументе = Истина;
			НастройкиСтруктурой.БазаРаспределенияПоПартиям = Перечисления.ТипыБазыРаспределенияРасходов.ПустаяСсылка();
			
		ИначеЕсли Выборка.СпособРаспределенияНаПроизводственныеЗатраты = Перечисления.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуВДанномПодразделении Тогда
			
			НаименованиеПравила = НСтр("ru='По партиям по правилу %1 в подразделении расхода';uk='По партіям по правилу %1 у підрозділі витрати'");
			НаименованиеПравила = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеПравила,
				Выборка.НаименованиеПравилаПоПартиям);
			НастройкиСтруктурой.НаправлениеРаспределения = Перечисления.НаправлениеРаспределенияПоПодразделениям.Текущее;
			
		ИначеЕсли Выборка.СпособРаспределенияНаПроизводственныеЗатраты = Перечисления.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуПоВсемПодразделениям Тогда
			
			НаименованиеПравила = НСтр("ru='По партиям по правилу %1 по всем подразделениям';uk='По партіям по правилу %1 у всіх підрозділах'");
			НаименованиеПравила = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеПравила,
				Выборка.НаименованиеПравилаПоПартиям);
			
		КонецЕсли;
		
		НастройкиСтруктурой.ОтборПоМатериалам = Выборка.ОтборПоМатериалам.Выгрузить().ВыгрузитьКолонку("Материал");
		ОбщегоНазначенияУТКлиентСервер.СортироватьМассив(НастройкиСтруктурой.ОтборПоМатериалам);
		
		НастройкиСтруктурой.ОтборПоВидамРабот = Выборка.ОтборПоВидамРабот.Выгрузить().ВыгрузитьКолонку("ВидРабот");
		ОбщегоНазначенияУТКлиентСервер.СортироватьМассив(НастройкиСтруктурой.ОтборПоВидамРабот);
		
		НастройкиСтруктурой.ОтборПоПодразделениям = Выборка.ОтборПоПодразделениям.Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОбщегоНазначенияУТКлиентСервер.СортироватьМассив(НастройкиСтруктурой.ОтборПоПодразделениям);
		
		НастройкиСтруктурой.ОтборПоГруппамПродукции = Выборка.ОтборПоГруппамПродукции.Выгрузить().ВыгрузитьКолонку("ГруппаПродукции");
		ОбщегоНазначенияУТКлиентСервер.СортироватьМассив(НастройкиСтруктурой.ОтборПоГруппамПродукции);
		
		СериализованныеНастройки = ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкиСтруктурой);
		ХешСумма = ОбщегоНазначенияУТ.ХешСуммаСтроки(СериализованныеНастройки, ХешФункция.MD5);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПравилаРаспределенияРасходов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
			|ГДЕ
			|	ПравилаРаспределенияРасходов.ХешСумма = &ХешСумма";
		
		Запрос.УстановитьПараметр("ХешСумма", ХешСумма);
		
		Результат = Запрос.Выполнить();
		ВыборкаНастроек = Результат.Выбрать();
		
		Если ВыборкаНастроек.Следующий() Тогда
			
			Объект.УдалитьПравилоРаспределенияРасходов = ВыборкаНастроек.Ссылка;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			Продолжить;
			
		КонецЕсли;
		
		НовоеПравило = Справочники.ПравилаРаспределенияРасходов.СоздатьЭлемент();
		НовоеПравило.НазначениеПравила = Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства;
		НовоеПравило.ХешСумма = ХешСумма;
		НовоеПравило.Наименование = НаименованиеПравила;
			
		ЗаполнитьЗначенияСвойств(НовоеПравило, НастройкиСтруктурой, , 
			"ОтборПоГруппамПродукции, ОтборПоМатериалам, ОтборПоВидамРабот, ОтборПоПодразделениям");
		
		Для Каждого СтрокаОтбора Из НастройкиСтруктурой.ОтборПоВидамРабот Цикл
			НовоеПравило.ОтборПоВидамРабот.Добавить().ВидРабот = СтрокаОтбора;
		КонецЦикла;
		
		Для Каждого СтрокаОтбора Из НастройкиСтруктурой.ОтборПоМатериалам Цикл
			НовоеПравило.ОтборПоМатериалам.Добавить().Материал = СтрокаОтбора;
		КонецЦикла;
		
		Для Каждого СтрокаОтбора Из НастройкиСтруктурой.ОтборПоПодразделениям Цикл
			НовоеПравило.ОтборПоПодразделениям.Добавить().Подразделение = СтрокаОтбора;
		КонецЦикла;
		
		Для Каждого СтрокаОтбора Из НастройкиСтруктурой.ОтборПоГруппамПродукции Цикл
			НовоеПравило.ОтборПоГруппамПродукции.Добавить().ГруппаПродукции = СтрокаОтбора;
		КонецЦикла;
		
		НовоеПравило.ПредставлениеПравила = Справочники.ПравилаРаспределенияРасходов.ПолучитьПредставлениеПравила(
			НовоеПравило.ОтборПоМатериалам, 
			НовоеПравило.ОтборПоВидамРабот, 
			НовоеПравило.ОтборПоПродукции, 
			НовоеПравило.БазаРаспределенияПоПартиям
		);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовоеПравило);
		
		Объект.УдалитьПравилоРаспределенияРасходов = НовоеПравило.Ссылка;
		Если Не ЗначениеЗаполнено(Объект.СтатьяКалькуляции) Тогда
			Объект.СтатьяКалькуляции = Выборка.СтатьяКалькуляции;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
		//-- НЕ УТ
		
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТ

Функция НастройкиПравила()
	
	Настройки = Новый Структура("НаправлениеРаспределения, БазаРаспределенияПоПодразделениям, БазаРаспределенияПоПартиям, 
	|УточнятьПартииВДокументе, РаспределятьНаСтатьи, РаспределятьПоПартиям, Показатель, РаспределятьПоПодразделениям, 
	|ПодразделенияУказаныВручную, ОтборПоГруппамПродукции, ОтборПоМатериалам, ОтборПоВидамРабот, ОтборПоПодразделениям");
	
	Настройки.Вставить("НаправлениеРаспределения", Перечисления.НаправлениеРаспределенияПоПодразделениям.ПустаяСсылка());
	Настройки.Вставить("БазаРаспределенияПоПодразделениям", Перечисления.ТипыБазыРаспределенияРасходов.ПустаяСсылка());
	Настройки.Вставить("БазаРаспределенияПоПартиям", Перечисления.ТипыБазыРаспределенияРасходов.ПустаяСсылка());
	Настройки.Вставить("Показатель", Справочники.ПравилаРаспределенияРасходов.ПустаяСсылка());
	Настройки.Вставить("УточнятьПартииВДокументе", Ложь);
	Настройки.Вставить("РаспределятьНаСтатьи", Ложь);
	Настройки.Вставить("РаспределятьПоПартиям", Ложь);
	Настройки.Вставить("РаспределятьПоПодразделениям", Ложь);
	Настройки.Вставить("ПодразделенияУказаныВручную", Ложь);
	Настройки.Вставить("ОтборПоГруппамПродукции", Новый Массив);
	Настройки.Вставить("ОтборПоМатериалам", Новый Массив);
	Настройки.Вставить("ОтборПоВидамРабот", Новый Массив);
	Настройки.Вставить("ОтборПоПодразделениям", Новый Массив);
	
	Возврат Настройки;
	
КонецФункции

//-- НЕ УТ


#КонецОбласти

#КонецОбласти

#КонецЕсли
