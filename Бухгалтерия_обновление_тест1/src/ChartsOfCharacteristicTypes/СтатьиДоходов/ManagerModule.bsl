#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТВызовСервера.ОбработкаПолученияДанныхВыбораПВХСтатьиДоходов(ДанныеВыбора, Параметры, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция определяет реквизиты выбранной статьи доходов.
//
// Параметры:
//  СтатьяДоходов - ПланВидовХарактеристикСсылка.СтатьиДоходов - Ссылка на статью доходов.
//
// Возвращаемое значение:
//	Структура - реквизиты статьи доходов.
//
Функция ПолучитьРеквизитыСтатьиДоходов(СтатьяДоходов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СтатьиДоходов.СпособРаспределения КАК СпособРаспределения,
	|	СтатьиДоходов.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|ГДЕ
	|	СтатьиДоходов.Ссылка = &СтатьяДоходов
	|");
	
	Запрос.УстановитьПараметр("СтатьяДоходов", СтатьяДоходов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СпособРаспределения = Выборка.СпособРаспределения;
		ТребуетсяСпособРаспределения = Не Выборка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НаправленияДеятельности"));
	Иначе
		СпособРаспределения = Неопределено;
		ТребуетсяСпособРаспределения = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("СпособРаспределения, ТребуетсяСпособРаспределения",
		СпособРаспределения,
		ТребуетсяСпособРаспределения);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Функция определяет аналитику доходов для подстановки в документ по статье доходов.
//
// Параметры:
//  СтатьяДоходов - ПланВидовХарактеристикСсылка.СтатьиДоходов - Ссылка на статью доходов
//	Объект - ДанныеФормыСтруктура - Текущий объект 
//	Подразделение - СправочникСсылка.СтруктураПредприятия - Ссылка на подразделение, указанное в документе.
//
// Возвращаемое значение:
//	СправочникСсылка - значение аналитики доходов.
//
Функция ПолучитьАналитикуДоходовПоУмолчанию(СтатьяДоходов, Объект, Подразделение) Экспорт
	
	ОписаниеТипов = Новый ОписаниеТипов(СтатьяДоходов.ТипЗначения);
	АналитикаДоходов = ОписаниеТипов.ПривестиЗначение();
	
	Если СтатьяДоходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Партнеры")
		И Объект.Свойство("Партнер") Тогда
		
		АналитикаДоходов = Объект.Партнер;	
		
	ИначеЕсли СтатьяДоходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации")
	   И Объект.Свойство("Организация") Тогда
	   
		АналитикаДоходов = Объект.Организация;
		
	ИначеЕсли СтатьяДоходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Если Объект.Свойство("Подразделение") Тогда
			АналитикаДоходов = Объект.Подразделение;
		Иначе
			АналитикаДоходов = Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат АналитикаДоходов;
	
КонецФункции

// Производит проверку заполнения реквизитов аналитик статей доходов в переданном объекте.
//
// Параметры:
// 		Объект - СправочникОбъект, ДокументОбъект, ДанныеФормыСтруктура - Объект ИБ предназначенный для проверки
// 		Реквизиты - Строка, Структура, Массив - Реквизиты статей доходов для проверки
// 			<Строка> Перечисление пар реквизитов для проверки в формате "СтатьяДоходов1, АналитикаДоходов1, СтатьяДоходов2, АналитикаДоходов2, ..."
// 				Пустая строка трактуется как "СтатьяДоходов, АналитикаДоходов"
// 			<Структура> Ключ: Строка с именем табличной части; Значение - Строка в нотации как у параметра типа <Строка>
// 			<Массив> Массив, элементы которого либо структуры в нотации как у параметра с типа <Структура>, либо строки в нотации <Строка>
// 		НепроверяемыеРеквизиты - Массив - Массив для накопления не проверяемых реквизитов переданного объекта
// 		Отказ - Булево - Признак наличия ошибок заполнения аналитик переданного объекта
// 		ДополнительныеПараметры - Структура - При наличии свойства "ПрограммнаяПроверка", ошибки записываются в эту структуру, пользователю не выводятся.
//
Процедура ПроверитьЗаполнениеАналитик(Объект, Реквизиты = "", НепроверяемыеРеквизиты = Неопределено, Отказ = Ложь,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Ошибки = Новый Структура;
	Ошибки.Вставить("СписокОшибок", Новый Массив);
	Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	Ошибки.Вставить("ПрефиксОбъекта", ?(ТипЗнч(Объект)=Тип("ФормаКлиентскогоПриложения"), "", "Объект."));
	
	МассивОбработки = Новый Массив;
	Если ТипЗнч(Реквизиты) = Тип("Массив") Тогда
		МассивОбработки = Реквизиты;
	Иначе
		МассивОбработки.Добавить(Реквизиты);
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивОбработки Цикл
		
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			ПроверкаЗаполненияАналитикТЧОбъекта(Объект, ЭлементМассива, НепроверяемыеРеквизиты, Ошибки);
		Иначе
			ПроверкаЗаполненияАналитикОбъекта(Объект, ЭлементМассива, НепроверяемыеРеквизиты, Ошибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПрограммнаяПроверка") Тогда
		ДополнительныеПараметры.Вставить("Ошибки", Ошибки);
	Иначе
		Если Ошибки.СписокОшибок.Количество() <> 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает статьи доходов, использование которых запрещено
//
// Возвращаемое значение:
// 	СписокЗначений - Список заблокированных статей доходов.
//
Функция ЗаблокированныеСтатьиДоходов() Экспорт
	
	ЗаблокированныеСтатьи = Новый СписокЗначений;
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.ВыручкаОтПродаж);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.ЗакрытиеРезервовПоСомнительнымДолгам);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.КурсовыеРазницы);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.КурсовыеРазницыНеоперационные);
        ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.ПрибыльУбытокПрошлыхЛет);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.РеализацияОС);
	КонецЕсли;
	
	Возврат ЗаблокированныеСтатьи;
	
КонецФункции

// Вызывается при начальном заполнении предопределенных элементов
// Подробнее см. в СтандартныеПодсистемыСервер.НастройкиПредопределенныхЭлементов
//
// Параметры:
//  Настройки - Структура - Настройки начального заполнения.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - Ключ - Имя табличной части объекта.
//                               Значение - Выгрузка в таблицу значений пустой табличной части.
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	#Область ВыручкаОтПродаж
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВыручкаОтПродаж";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.НаправленияДеятельности"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Выручка от продаж';uk='Виторг від продажів'",КодОсновногоЯзыка);
	Элемент.Код = "000000001";
	Элемент.РеквизитДопУпорядочивания = 1;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.ДоходыПоОбъектамЭксплуатации = Ложь;
	Элемент.ДоходыПоНМАиНИОКР = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	//++ НЕ УТ
	//++ Локализация
	//-- Локализация
	//-- НЕ УТ
	#КонецОбласти
	#Область ДоходыПриПокупкеИПродажеИностраннойВалюты
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ДоходыПриПокупкеИПродажеИностраннойВалюты";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Доходы при покупке и продаже иностранной валюты';uk='Доходи при купівлі і продажу іноземної валюти'",КодОсновногоЯзыка);
	Элемент.Код = "000000007";
	Элемент.РеквизитДопУпорядочивания = 4;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.ДоходыПоОбъектамЭксплуатации = Ложь;
	Элемент.ДоходыПоНМАиНИОКР = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	#КонецОбласти


	#Область ЗакрытиеРезервовПоСомнительнымДолгам
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЗакрытиеРезервовПоСомнительнымДолгам";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Закрытие резервов по сомнительным долгам';uk='Закриття резервів по сумнівних боргах'",КодОсновногоЯзыка);
	Элемент.Код = "000000006";
	Элемент.РеквизитДопУпорядочивания = 2;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.ДоходыПоОбъектамЭксплуатации = Ложь;
	Элемент.ДоходыПоНМАиНИОКР = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	//++ НЕ УТ
	//++ Локализация
	//-- Локализация
	//-- НЕ УТ
	#КонецОбласти

	#Область КурсовыеРазницы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.АналитикаКурсовыхРазниц"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Курсовые разницы';uk='Курсові різниці'",КодОсновногоЯзыка);
	Элемент.Код = "000000002";
	Элемент.РеквизитДопУпорядочивания = 3;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.ДоходыПоОбъектамЭксплуатации = Ложь;
	Элемент.ДоходыПоНМАиНИОКР = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	//++ НЕ УТ
	//++ Локализация
	//-- Локализация
	//-- НЕ УТ
	#КонецОбласти

    #Область ПрибыльУбытокПрошлыхЛет
    Элемент = Элементы.Добавить();
    Элемент.ИмяПредопределенныхДанных = "ПрибыльУбытокПрошлыхЛет";
    МассивТипов = Новый Массив;
    МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
    ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
    Элемент.ТипЗначения = ОписаниеТипа;
    Элемент.Наименование = НСтр("ru='Прибыль (убыток) прошлых лет';uk='Прибуток (збиток) минулих років'",КодОсновногоЯзыка);
    Элемент.Код = "000000005";
    Элемент.РеквизитДопУпорядочивания = 5;
    Элемент.ДоговорыКредитовИДепозитов = Ложь;
    Элемент.ДоходыПоОбъектамЭксплуатации = Ложь;
    Элемент.ДоходыПоНМАиНИОКР = Ложь;
    Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
    #КонецОбласти

	#Область РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Партнеры"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Разницы стоимости возврата и фактической стоимости товаров';uk='Різниці вартості повернення і фактичної вартості товарів'",КодОсновногоЯзыка);
	Элемент.Код = "000000003";
	Элемент.РеквизитДопУпорядочивания = 6;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.ДоходыПоОбъектамЭксплуатации = Ложь;
	Элемент.ДоходыПоНМАиНИОКР = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	//++ НЕ УТ
	//++ Локализация
	//-- Локализация
	//-- НЕ УТ
	#КонецОбласти
    
    //++ НЕ УТ

	#Область РеализацияОС
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "РеализацияОС";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ОбъектыЭксплуатации"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	Элемент.Наименование = НСтр("ru='Реализация ОС';uk='Реалізація ОЗ'",КодОсновногоЯзыка);
	Элемент.Код = "000000004";
	Элемент.РеквизитДопУпорядочивания = 7;
	Элемент.ДоговорыКредитовИДепозитов = Ложь;
	Элемент.ДоходыПоОбъектамЭксплуатации = Истина;
	Элемент.ДоходыПоНМАиНИОКР = Ложь;
	Элемент.КонтролироватьЗаполнениеАналитики = Ложь;
	//++ Локализация
	//-- Локализация
	#КонецОбласти
	//-- НЕ УТ

    
КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - ПланВидовХарактеристикОбъект.СтатьиДоходов - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Заполняет реквизиты параметров настройки счетов учета доходов, которые влияют на настройку,
// 	соответствующими им именам реквизитов аналитики учета.
//
// Параметры:
// 	СоответствиеИмен - Соответствие - ключом выступает имя реквизита, используемое в настройке счетов учета,
// 		значением является соответствующее имя реквизита аналитики учета.
// 
Процедура ЗаполнитьСоответствиеРеквизитовНастройкиСчетовУчета(СоответствиеИмен) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииЗаполненияАналитик

Функция ОбязательныеСтатьи(МассивСтатей)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статьи.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК Статьи
	|ГДЕ
	|	Статьи.Ссылка В (&МассивСтатей)
	|	И Статьи.КонтролироватьЗаполнениеАналитики");
	
	Запрос.УстановитьПараметр("МассивСтатей", МассивСтатей);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ИменаРеквизитовСтатьиИАналитики(СтрокаРеквизитов, НепроверяемыеРеквизиты = Неопределено, ПрефиксТабличнойЧасти = "")
	
	Если ПустаяСтрока(СтрокаРеквизитов) Тогда
		Если НепроверяемыеРеквизиты <> Неопределено Тогда
			НепроверяемыеРеквизиты.Добавить(ПрефиксТабличнойЧасти + "АналитикаДоходов");
		КонецЕсли;
		Возврат Новый Структура("СтатьяДоходов", "АналитикаДоходов");
	КонецЕсли;
	
	СтруктураОбработки = Новый Структура(СтрокаРеквизитов);
	СтруктураВозврата = Новый Структура;
	ПредыдущийКлюч = Неопределено;
	Для Каждого КлючИЗначение Из СтруктураОбработки Цикл
		Если ПредыдущийКлюч = Неопределено Тогда
			ПредыдущийКлюч = КлючИЗначение.Ключ;
		Иначе
			СтруктураВозврата.Вставить(ПредыдущийКлюч, КлючИЗначение.Ключ);
			ПредыдущийКлюч = Неопределено;
			Если НепроверяемыеРеквизиты <> Неопределено Тогда
				НепроверяемыеРеквизиты.Добавить(ПрефиксТабличнойЧасти + КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ПроверкаЗаполненияАналитикОбъекта(Объект, Реквизиты, НепроверяемыеРеквизиты, Ошибки)
	
	СтруктураРеквизитов = ИменаРеквизитовСтатьиИАналитики(Реквизиты, НепроверяемыеРеквизиты);
	МассивСтатей = Новый Массив;
	
	// Определим список статей для контроля
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		Статья = Объект[КлючИЗначение.Ключ];
		
		Если ЗначениеЗаполнено(Статья) Тогда
			МассивСтатей.Добавить(Статья);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим заполнение аналитики
	ОбязательныеСтатьи = ОбязательныеСтатьи(МассивСтатей);
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		Статья = Объект[КлючИЗначение.Ключ];
		Аналитика = Объект[КлючИЗначение.Значение];
		
		Если Не (ОбязательныеСтатьи.Найти(Статья) = Неопределено Или ЗначениеЗаполнено(Аналитика)) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				Ошибки.ПрефиксОбъекта + КлючИЗначение.Значение,
				НСтр("ru='Аналитика доходов не заполнена';uk='Аналітика доходів не заповнена'"), "");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияАналитикТЧОбъекта(Объект, Реквизиты, НепроверяемыеРеквизиты, Ошибки)
	
	// Определим список статей для контроля
	ОбщийМассивСтатей = Новый Массив;
	Для Каждого ОписаниеТЧ Из Реквизиты Цикл
		
		ИмяТЧ = ОписаниеТЧ.Ключ;
		
		СтруктураРеквизитов = ИменаРеквизитовСтатьиИАналитики(ОписаниеТЧ.Значение, НепроверяемыеРеквизиты, ИмяТЧ + ".");
		
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			
			МассивСтатей = Объект[ИмяТЧ].ВыгрузитьКолонку(КлючИЗначение.Ключ);
			Для Каждого Статья Из МассивСтатей Цикл
				ОбщийМассивСтатей.Добавить(Статья);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверим заполнение аналитики
	ОбязательныеСтатьи = ОбязательныеСтатьи(ОбщийМассивСтатей);
	Для Каждого ОписаниеТЧ Из Реквизиты Цикл // Табличные части
		
		ИмяТЧ = ОписаниеТЧ.Ключ;
		ТЧ = Объект[ИмяТЧ];
		
		МетаданныеОбъекта = Объект.Метаданные();
		ТабличнаяЧасть = МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТЧ);
		
		СтруктураРеквизитов = ИменаРеквизитовСтатьиИАналитики(ОписаниеТЧ.Значение, Неопределено, ИмяТЧ + ".");
		
		Для Индекс = 0 По ТЧ.Количество() - 1 Цикл // Строки табличной части
			
			СтрокаТЧ = ТЧ[Индекс];
			
			Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
				
				РеквизитАналитика = ТабличнаяЧасть.Реквизиты.Найти(КлючИЗначение.Значение);
				
				Статья = СтрокаТЧ[КлючИЗначение.Ключ];
				Аналитика = СтрокаТЧ[КлючИЗначение.Значение];
				
				Если Не (ОбязательныеСтатьи.Найти(Статья) = Неопределено Или ЗначениеЗаполнено(Аналитика)) Тогда
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						Ошибки.ПрефиксОбъекта + ИмяТЧ + "[%1]." + КлючИЗначение.Значение,
						СтрШаблон(НСтр("ru='Не заполнено поле ""%1"" в строке %2 списка ""%3""';uk='Не заповнене поле ""%1"" в рядку %2 списку ""%3""'"), 
							РеквизитАналитика.Синоним, СтрокаТЧ.НомерСтроки, ТабличнаяЧасть.Синоним),
						ИмяТЧ,
						Индекс,
						СтрШаблон(НСтр("ru='Не заполнено поле ""%1"" в строке %2 списка ""%3""';uk='Не заповнене поле ""%1"" в рядку %2 списку ""%3""'"), 
							РеквизитАналитика.Синоним, СтрокаТЧ.НомерСтроки, ТабличнаяЧасть.Синоним));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьПредопределенныеСтатьиДоходов() Экспорт
	
	МассивСтатейДоходов = Новый Массив;
	МассивСтатейДоходов.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.ВыручкаОтПродаж);
	МассивСтатейДоходов.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.ЗакрытиеРезервовПоСомнительнымДолгам);
	МассивСтатейДоходов.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.КурсовыеРазницы);
    МассивСтатейДоходов.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.ПрибыльУбытокПрошлыхЛет);
	МассивСтатейДоходов.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
	МассивСтатейДоходов.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.РеализацияОС);
    МассивСтатейДоходов.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.КурсовыеРазницыНеоперационные);
    МассивСтатейДоходов.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.ДоходыПриПокупкеИПродажеИностраннойВалюты);
    МассивСтатейДоходов.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.ДоходыПриВосстановленииНалоговогоКредита);
	Отказ = Ложь;
	Для каждого Статья Из МассивСтатейДоходов Цикл
		
		СтатьиДоходовОбъект = Статья.ПолучитьОбъект();

		Если Статья = ПланыВидовХарактеристик.СтатьиДоходов.ВыручкаОтПродаж Тогда
			СтатьиДоходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
		ИначеЕсли Статья = ПланыВидовХарактеристик.СтатьиДоходов.КурсовыеРазницы Тогда
			СтатьиДоходовОбъект.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.АналитикаКурсовыхРазниц");

//++ НЕ УТ
			СтруктураСчетовУчета = Новый Структура;
			СтруктураСчетовУчета.Вставить("СчетУчета_Доходы", ПланыСчетов.Хозрасчетный.ДоходОтОперационнойКурсовойРазницы);
			
			СтруктураИзмерений = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
			СтруктураИзмерений.АналитикаУчета = Статья.Ссылка;
			РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СохранитьЗначенияСчетовУчета(СтруктураИзмерений, СтруктураСчетовУчета, Отказ);
//-- НЕ УТ
		ИначеЕсли Статья = ПланыВидовХарактеристик.СтатьиДоходов.РеализацияОС Тогда
			Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
				СтатьиДоходовОбъект.Наименование = НСтр("ru='Реализация прочих активов';uk='Реалізація інших активів'");
				СтатьиДоходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
			КонецЕсли;

//++ НЕ УТ
			СтруктураСчетовУчета = Новый Структура;
			СтруктураСчетовУчета.Вставить("СчетУчета_Доходы", ПланыСчетов.Хозрасчетный.ДоходОтРеализацииДругихОборотныхАктивов);
			
			СтруктураИзмерений = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
			СтруктураИзмерений.АналитикаУчета = Статья.Ссылка;
			РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СохранитьЗначенияСчетовУчета(СтруктураИзмерений, СтруктураСчетовУчета, Отказ);
//-- НЕ УТ 
		ИначеЕсли (Статья = ПланыВидовХарактеристик.СтатьиДоходов.ЗакрытиеРезервовПоСомнительнымДолгам) 
				ИЛИ (Статья = ПланыВидовХарактеристик.СтатьиДоходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров) Тогда
//++ НЕ УТ
			СтруктураСчетовУчета = Новый Структура;
			СтруктураСчетовУчета.Вставить("СчетУчета_Доходы", ПланыСчетов.Хозрасчетный.ДругиеДоходыОтОперационнойДеятельности);
			
			СтруктураИзмерений = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
			СтруктураИзмерений.АналитикаУчета = Статья.Ссылка;
			РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СохранитьЗначенияСчетовУчета(СтруктураИзмерений, СтруктураСчетовУчета, Отказ);
//-- НЕ УТ 
		КонецЕсли;
		СтатьиДоходовЛокализация.ЗаполнитьРеквизитыПредопределеннойСтатьиДоходов(СтатьиДоходовОбъект);
		
		СтатьиДоходовОбъект.Записать();
		

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
